
keyboard_right_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ee44  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0801ef04  0801ef04  0001ff04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f4c4  0801f4c4  00021254  2**0
                  CONTENTS
  4 .ARM          00000000  0801f4c4  0801f4c4  00021254  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801f4c4  0801f4c4  00021254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f4c4  0801f4c4  000204c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f4c8  0801f4c8  000204c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  0801f4cc  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011e58  20000254  0801f720  00021254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200120ac  0801f720  000220ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00021254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008d082  00000000  00000000  00021282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00014eb6  00000000  00000000  000ae304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003668  00000000  00000000  000c31c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000259e  00000000  00000000  000c6828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f27c  00000000  00000000  000c8dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00092d54  00000000  00000000  00108042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f374a  00000000  00000000  0019ad96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000041e7  00000000  00000000  0028e4e0  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000033c  00000000  00000000  002926c7  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000024  00000000  00000000  00292a04  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000a30c  00000000  00000000  00292a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000016b  00000000  00000000  0029cd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000254 	.word	0x20000254
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801eeec 	.word	0x0801eeec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000258 	.word	0x20000258
 8000104:	0801eeec 	.word	0x0801eeec
	...

08000110 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000110:	b672      	cpsid	i
@    ORRS    r1, r1, r2                              @ Set the CYCCNTENA bit
@    STR     r1, [r0]                                @ Enable the cycle count register
@
@    /* Setup Vector Table Offset Register.  */
@
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 8000112:	4816      	ldr	r0, [pc, #88]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD08                              @ Offset to vector base register
 8000114:	4a16      	ldr	r2, [pc, #88]	@ (8000170 <__tx_DBGHandler+0x8>)
    ADD     r0, r0, r2                              @ Build vector base register
 8000116:	4410      	add	r0, r2
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000118:	4916      	ldr	r1, [pc, #88]	@ (8000174 <__tx_DBGHandler+0xc>)
    STR     r1, [r0]                                @ Set vector table address
 800011a:	6001      	str	r1, [r0, #0]
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800011c:	4816      	ldr	r0, [pc, #88]	@ (8000178 <__tx_DBGHandler+0x10>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800011e:	4915      	ldr	r1, [pc, #84]	@ (8000174 <__tx_DBGHandler+0xc>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000120:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000122:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 8000124:	4811      	ldr	r0, [pc, #68]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r1, =SYSTICK_CYCLES
 8000126:	4915      	ldr	r1, [pc, #84]	@ (800017c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000128:	6141      	str	r1, [r0, #20]
    LDR     r1, =0x7                                // Build SysTick Control Enable Value
 800012a:	4915      	ldr	r1, [pc, #84]	@ (8000180 <__tx_DBGHandler+0x18>)
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800012c:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */

    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 800012e:	4915      	ldr	r1, [pc, #84]	@ (8000184 <__tx_DBGHandler+0x1c>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 8000130:	480e      	ldr	r0, [pc, #56]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD18                              //
 8000132:	4a15      	ldr	r2, [pc, #84]	@ (8000188 <__tx_DBGHandler+0x20>)
    ADD     r0, r0, r2                              //
 8000134:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 4-7 Priority Registers
 8000136:	6001      	str	r1, [r0, #0]
    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 8000138:	4914      	ldr	r1, [pc, #80]	@ (800018c <__tx_DBGHandler+0x24>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 800013a:	480c      	ldr	r0, [pc, #48]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD1C                              //
 800013c:	4a14      	ldr	r2, [pc, #80]	@ (8000190 <__tx_DBGHandler+0x28>)
    ADD     r0, r0, r2                              //
 800013e:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 8-11 Priority Registers
 8000140:	6001      	str	r1, [r0, #0]
                                                    // Note: SVC must be lowest priority, which is 0xFF
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000142:	4914      	ldr	r1, [pc, #80]	@ (8000194 <__tx_DBGHandler+0x2c>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 8000144:	4809      	ldr	r0, [pc, #36]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD20                              //
 8000146:	4a14      	ldr	r2, [pc, #80]	@ (8000198 <__tx_DBGHandler+0x30>)
    ADD     r0, r0, r2                              //
 8000148:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 12-15 Priority Registers
 800014a:	6001      	str	r1, [r0, #0]
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 800014c:	4770      	bx	lr

0800014e <__tx_BadHandler>:

/* Define shells for each of the unused vectors.  */
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800014e:	e7fe      	b.n	800014e <__tx_BadHandler>

08000150 <__tx_HardfaultHandler>:

/* added to catch the hardfault */
    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000150:	e7fe      	b.n	8000150 <__tx_HardfaultHandler>

08000152 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0, lr}
 8000152:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* BL <your C Function>.... */
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0, r1}
 8000154:	bc03      	pop	{r0, r1}
    MOV     lr, r1
 8000156:	468e      	mov	lr, r1
    BX      lr
 8000158:	4770      	bx	lr

0800015a <SysTick_Handler>:
__tx_SysTickHandler:
    .thumb_func
SysTick_Handler:
// VOID SysTick_Handler (VOID)
// {
    PUSH    {r0, lr}
 800015a:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800015c:	f000 f8a8 	bl	80002b0 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0, r1}
 8000160:	bc03      	pop	{r0, r1}
    MOV     lr, r1
 8000162:	468e      	mov	lr, r1
    BX      lr
 8000164:	4770      	bx	lr

08000166 <__tx_NMIHandler>:

/* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000166:	e7fe      	b.n	8000166 <__tx_NMIHandler>

08000168 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000168:	e7fe      	b.n	8000168 <__tx_DBGHandler>
 800016a:	0000      	.short	0x0000
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 800016c:	e000e000 	.word	0xe000e000
    LDR     r2, =0xD08                              @ Offset to vector base register
 8000170:	00000d08 	.word	0x00000d08
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000174:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000178:	20011194 	.word	0x20011194
    LDR     r1, =SYSTICK_CYCLES
 800017c:	0000f9ff 	.word	0x0000f9ff
    LDR     r1, =0x7                                // Build SysTick Control Enable Value
 8000180:	00000007 	.word	0x00000007
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 8000184:	00000000 	.word	0x00000000
    LDR     r2, =0xD18                              //
 8000188:	00000d18 	.word	0x00000d18
    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 800018c:	ff000000 	.word	0xff000000
    LDR     r2, =0xD1C                              //
 8000190:	00000d1c 	.word	0x00000d1c
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000194:	40ff0000 	.word	0x40ff0000
    LDR     r2, =0xD20                              //
 8000198:	00000d20 	.word	0x00000d20
 800019c:	00000000 	.word	0x00000000

080001a0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@
    MOVS    r0, #0                                  @ Build value for TX_FALSE
 80001a0:	2000      	movs	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80001a2:	4a26      	ldr	r2, [pc, #152]	@ (800023c <__tx_ts_ready+0xc>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80001a4:	6010      	str	r0, [r2, #0]
@
@    /* Enable interrupts */
@
    CPSIE   i
 80001a6:	b662      	cpsie	i
@
@    /* Enter the scheduler for the first time.  */
@
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 80001a8:	4825      	ldr	r0, [pc, #148]	@ (8000240 <__tx_ts_ready+0x10>)
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 80001aa:	4926      	ldr	r1, [pc, #152]	@ (8000244 <__tx_ts_ready+0x14>)
    STR     r0, [r1]                                @ Set PENDSVBIT in ICSR
 80001ac:	6008      	str	r0, [r1, #0]
    DSB                                             @ Complete all memory accesses
 80001ae:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80001b2:	f3bf 8f6f 	isb	sy

080001b6 <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80001b6:	e7fe      	b.n	80001b6 <__tx_wait_here>

080001b8 <PendSV_Handler>:
    BL  _tx_execution_thread_exit                   @ Call the thread exit function
    POP     {r0, r1}                                @ Recover LR
    MOV     lr, r1                                  @
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80001b8:	4823      	ldr	r0, [pc, #140]	@ (8000248 <__tx_ts_ready+0x18>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80001ba:	4a24      	ldr	r2, [pc, #144]	@ (800024c <__tx_ts_ready+0x1c>)
    MOVS    r3, #0                                  @ Build NULL value
 80001bc:	2300      	movs	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80001be:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@
    CMP     r1,#0                                   @ If NULL, skip preservation
 80001c0:	2900      	cmp	r1, #0
    BEQ     __tx_ts_new                             @
 80001c2:	d015      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80001c4:	6003      	str	r3, [r0, #0]
    MRS     r3, PSP                                 @ Pickup PSP pointer (thread's stack pointer)
 80001c6:	f3ef 8309 	mrs	r3, PSP
    SUBS    r3, r3, #16                             @ Allocate stack space
 80001ca:	3b10      	subs	r3, #16
    STM     r3!, {r4-r7}                            @ Save its remaining registers (M3 Instruction: STMDB r12!, {r4-r11})
 80001cc:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    MOV     r4,r8                                   @
 80001ce:	4644      	mov	r4, r8
    MOV     r5,r9                                   @
 80001d0:	464d      	mov	r5, r9
    MOV     r6,r10                                  @
 80001d2:	4656      	mov	r6, sl
    MOV     r7,r11                                  @
 80001d4:	465f      	mov	r7, fp
    SUBS    r3, r3, #32                             @ Allocate stack space
 80001d6:	3b20      	subs	r3, #32
    STM     r3!,{r4-r7}                             @
 80001d8:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    SUBS    r3, r3, #20                             @ Allocate stack space
 80001da:	3b14      	subs	r3, #20
    MOV     r5, lr                                  @ Move LR into R4
 80001dc:	4675      	mov	r5, lr
    STR     r5, [r3]                                @ Save LR
 80001de:	601d      	str	r5, [r3, #0]
    STR     r3, [r1, #8]                            @ Save its stack pointer
 80001e0:	608b      	str	r3, [r1, #8]
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001e2:	4c1b      	ldr	r4, [pc, #108]	@ (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r4]                                @ Pickup current time-slice
 80001e4:	6825      	ldr	r5, [r4, #0]
    CMP     r5, #0                                  @ If not active, skip processing
 80001e6:	2d00      	cmp	r5, #0
    BEQ     __tx_ts_new                             @
 80001e8:	d002      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 80001ea:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    MOVS    r5, #0                                  @ Build clear value
 80001ec:	2500      	movs	r5, #0
    STR     r5, [r4]                                @ Clear time-slice
 80001ee:	6025      	str	r5, [r4, #0]

080001f0 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 80001f0:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 80001f2:	6811      	ldr	r1, [r2, #0]
    CMP     r1, #0                                  @
 80001f4:	2900      	cmp	r1, #0
    BEQ     __tx_ts_wait                            @ No, skip to the wait processing
 80001f6:	d014      	beq.n	8000222 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 80001f8:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 80001fa:	b662      	cpsie	i

080001fc <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 80001fc:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001fe:	4c14      	ldr	r4, [pc, #80]	@ (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000200:	698d      	ldr	r5, [r1, #24]
    ADDS    r7, r7, #1                              @ Increment the thread run count
 8000202:	3701      	adds	r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 8000204:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 8000206:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r3, [r1, #8]                            @ Pickup thread's stack pointer
 8000208:	688b      	ldr	r3, [r1, #8]
    LDR     r5, [r3]                                @ Recover saved LR
 800020a:	681d      	ldr	r5, [r3, #0]
    ADDS    r3, r3, #4                              @ Position past LR
 800020c:	3304      	adds	r3, #4
    MOV     lr, r5                                  @ Restore LR
 800020e:	46ae      	mov	lr, r5
    LDM     r3!,{r4-r7}                             @ Recover thread's registers (r4-r11)
 8000210:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MOV     r11,r7                                  @
 8000212:	46bb      	mov	fp, r7
    MOV     r10,r6                                  @
 8000214:	46b2      	mov	sl, r6
    MOV     r9,r5                                   @
 8000216:	46a9      	mov	r9, r5
    MOV     r8,r4                                   @
 8000218:	46a0      	mov	r8, r4
    LDM     r3!,{r4-r7}                             @
 800021a:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MSR     PSP, r3                                 @ Setup the thread's stack pointer
 800021c:	f383 8809 	msr	PSP, r3
@
@    /* Return to thread.  */
@
    BX      lr                                      @ Return to thread!
 8000220:	4770      	bx	lr

08000222 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000222:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000224:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000226:	6001      	str	r1, [r0, #0]
    CMP     r1, #0                                  @ If non-NULL, a new thread is ready!
 8000228:	2900      	cmp	r1, #0
    BNE     __tx_ts_ready                           @
 800022a:	d101      	bne.n	8000230 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       @ Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       @ Enable interrupts
 800022c:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800022e:	e7f8      	b.n	8000222 <__tx_ts_wait>

08000230 <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
@       already in the handler!  */
@
__tx_ts_ready:
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000230:	4f08      	ldr	r7, [pc, #32]	@ (8000254 <__tx_ts_ready+0x24>)
    LDR     r5, =0xE000ED04                         @ Build base NVIC address
 8000232:	4d04      	ldr	r5, [pc, #16]	@ (8000244 <__tx_ts_ready+0x14>)
    STR     r7, [r5]                                @ Clear any PendSV
 8000234:	602f      	str	r7, [r5, #0]
@
@    /* Re-enable interrupts and restore new thread.  */
@
    CPSIE   i                                       @ Enable interrupts
 8000236:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 8000238:	e7e0      	b.n	80001fc <__tx_ts_restore>
 800023a:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800023c:	20011230 	.word	0x20011230
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 8000240:	10000000 	.word	0x10000000
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 8000244:	e000ed04 	.word	0xe000ed04
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000248:	20011198 	.word	0x20011198
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 800024c:	2001119c 	.word	0x2001119c
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000250:	2001179c 	.word	0x2001179c
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000254:	08000000 	.word	0x08000000
	...

08000260 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000260:	6902      	ldr	r2, [r0, #16]
    MOVS    r3, #0x7                                @
 8000262:	2307      	movs	r3, #7
    BICS    r2, r2, r3                              @ Align frame for 8-byte alignment
 8000264:	439a      	bics	r2, r3
    SUBS    r2, r2, #68                             @ Subtract frame size
 8000266:	3a44      	subs	r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000268:	4b0b      	ldr	r3, [pc, #44]	@ (8000298 <_tx_thread_stack_build+0x38>)
    STR     r3, [r2, #0]                            @ Save on the stack
 800026a:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOVS    r3, #0                                  @ Build initial register value
 800026c:	2300      	movs	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r8
 800026e:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r9
 8000270:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r10
 8000272:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r11
 8000274:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r4
 8000276:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r5
 8000278:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           @ Store initial r6
 800027a:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           @ Store initial r7
 800027c:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800027e:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 8000280:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 8000282:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 8000284:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 8000286:	6353      	str	r3, [r2, #52]	@ 0x34
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <_tx_thread_stack_build+0x3c>)
    STR     r3, [r2, #56]                           @ Store initial lr
 800028a:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 800028c:	63d1      	str	r1, [r2, #60]	@ 0x3c
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 800028e:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <_tx_thread_stack_build+0x40>)
    STR     r3, [r2, #64]                           @ Store initial xPSR
 8000290:	6413      	str	r3, [r2, #64]	@ 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 8000292:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 8000294:	4770      	bx	lr
 8000296:	0000      	.short	0x0000
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000298:	fffffffd 	.word	0xfffffffd
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 800029c:	ffffffff 	.word	0xffffffff
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 80002a0:	01000000 	.word	0x01000000
	...

080002b0 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80002b0:	4923      	ldr	r1, [pc, #140]	@ (8000340 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 80002b2:	6808      	ldr	r0, [r1, #0]
    ADDS    r0, r0, #1                              @ Increment system clock
 80002b4:	3001      	adds	r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 80002b6:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 80002b8:	4b22      	ldr	r3, [pc, #136]	@ (8000344 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 80002ba:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 80002bc:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 80002be:	d006      	beq.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUBS    r2, r2, #1                              @ Decrement the time-slice
 80002c0:	3a01      	subs	r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 80002c2:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 80002c4:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 80002c6:	d102      	bne.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 80002c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000348 <__tx_timer_nothing_expired+0x10>)
    MOVS    r0, #1                                  @ Build expired value
 80002ca:	2001      	movs	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 80002cc:	6018      	str	r0, [r3, #0]

080002ce <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 80002ce:	491f      	ldr	r1, [pc, #124]	@ (800034c <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 80002d0:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 80002d2:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 80002d4:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 80002d6:	d003      	beq.n	80002e0 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 80002d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000350 <__tx_timer_nothing_expired+0x18>)
    MOVS    r2, #1                                  @ Build expired value
 80002da:	2201      	movs	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 80002dc:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 80002de:	e007      	b.n	80002f0 <__tx_timer_done>

080002e0 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADDS    r0, r0, #4                              @ Move to next timer
 80002e0:	3004      	adds	r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 80002e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000354 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 80002e4:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 80002e6:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 80002e8:	d101      	bne.n	80002ee <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 80002ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 80002ec:	6818      	ldr	r0, [r3, #0]

080002ee <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 80002ee:	6008      	str	r0, [r1, #0]

080002f0 <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 80002f0:	4b15      	ldr	r3, [pc, #84]	@ (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 80002f2:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 80002f4:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 80002f6:	d103      	bne.n	8000300 <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 80002f8:	4915      	ldr	r1, [pc, #84]	@ (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80002fa:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 80002fc:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 80002fe:	d01b      	beq.n	8000338 <__tx_timer_nothing_expired>

08000300 <__tx_something_expired>:
@
__tx_something_expired:
@
@
    PUSH    {r0, lr}                                @ Save the lr register on the stack
 8000300:	b501      	push	{r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 8000302:	4913      	ldr	r1, [pc, #76]	@ (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000304:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 8000306:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 8000308:	d001      	beq.n	800030e <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process()@
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 800030a:	f012 fde1 	bl	8012ed0 <_tx_timer_expiration_process>

0800030e <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired
 800030e:	4b0e      	ldr	r3, [pc, #56]	@ (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 8000310:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 8000312:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 8000314:	d00e      	beq.n	8000334 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   @ Call time-slice processing
 8000316:	f012 fd51 	bl	8012dbc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800031a:	4810      	ldr	r0, [pc, #64]	@ (800035c <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 800031c:	6801      	ldr	r1, [r0, #0]
    CMP     r1, #0                                  @
 800031e:	2900      	cmp	r1, #0
    BNE     __tx_timer_skip_time_slice              @ Yes, skip the PendSV logic
 8000320:	d108      	bne.n	8000334 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000322:	480f      	ldr	r0, [pc, #60]	@ (8000360 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000326:	4a0f      	ldr	r2, [pc, #60]	@ (8000364 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 8000328:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 800032a:	480f      	ldr	r0, [pc, #60]	@ (8000368 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800032c:	4a0f      	ldr	r2, [pc, #60]	@ (800036c <__tx_timer_nothing_expired+0x34>)
    CMP     r1, r3                                  @ Are they the same?
 800032e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 8000330:	d000      	beq.n	8000334 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 8000332:	6002      	str	r2, [r0, #0]

08000334 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    POP   {r0, r1}                                  @ Recover lr register (r0 is just there for
 8000334:	bc03      	pop	{r0, r1}
    MOV   lr, r1                                    @   the 8-byte stack alignment
 8000336:	468e      	mov	lr, r1

08000338 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 8000338:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 800033c:	4770      	bx	lr
 800033e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 8000340:	2001123c 	.word	0x2001123c
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 8000344:	2001179c 	.word	0x2001179c
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 8000348:	20011240 	.word	0x20011240
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 800034c:	200112cc 	.word	0x200112cc
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 8000350:	200112d0 	.word	0x200112d0
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000354:	200112c8 	.word	0x200112c8
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000358:	200112c4 	.word	0x200112c4
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800035c:	20011230 	.word	0x20011230
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000360:	20011198 	.word	0x20011198
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000364:	2001119c 	.word	0x2001119c
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000368:	e000ed04 	.word	0xe000ed04
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800036c:	10000000 	.word	0x10000000

08000370 <USBPD_CAD_Init>:
 8000370:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	0015      	movs	r5, r2
 8000376:	001e      	movs	r6, r3
 8000378:	2400      	movs	r4, #0
 800037a:	4668      	mov	r0, sp
 800037c:	7a00      	ldrb	r0, [r0, #8]
 800037e:	2803      	cmp	r0, #3
 8000380:	d301      	bcc.n	8000386 <USBPD_CAD_Init+0x16>
 8000382:	2401      	movs	r4, #1
 8000384:	e01f      	b.n	80003c6 <USBPD_CAD_Init+0x56>
 8000386:	9100      	str	r1, [sp, #0]
 8000388:	2900      	cmp	r1, #0
 800038a:	d101      	bne.n	8000390 <USBPD_CAD_Init+0x20>
 800038c:	2402      	movs	r4, #2
 800038e:	e01a      	b.n	80003c6 <USBPD_CAD_Init+0x56>
 8000390:	200c      	movs	r0, #12
 8000392:	f01e fc8f 	bl	801ecb4 <malloc>
 8000396:	0007      	movs	r7, r0
 8000398:	d101      	bne.n	800039e <USBPD_CAD_Init+0x2e>
 800039a:	2403      	movs	r4, #3
 800039c:	e013      	b.n	80003c6 <USBPD_CAD_Init+0x56>
 800039e:	210c      	movs	r1, #12
 80003a0:	f01e fd95 	bl	801eece <__aeabi_memclr>
 80003a4:	603e      	str	r6, [r7, #0]
 80003a6:	723c      	strb	r4, [r7, #8]
 80003a8:	9800      	ldr	r0, [sp, #0]
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	484a      	ldr	r0, [pc, #296]	@ (80004d8 <.text_6>)
 80003ae:	4669      	mov	r1, sp
 80003b0:	7a09      	ldrb	r1, [r1, #8]
 80003b2:	0089      	lsls	r1, r1, #2
 80003b4:	5047      	str	r7, [r0, r1]
 80003b6:	9800      	ldr	r0, [sp, #0]
 80003b8:	6843      	ldr	r3, [r0, #4]
 80003ba:	0032      	movs	r2, r6
 80003bc:	0029      	movs	r1, r5
 80003be:	4668      	mov	r0, sp
 80003c0:	7a00      	ldrb	r0, [r0, #8]
 80003c2:	f014 f8bb 	bl	801453c <CAD_Init>
 80003c6:	0020      	movs	r0, r4
 80003c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080003ca <USBPD_CAD_PortEnable>:
 80003ca:	2803      	cmp	r0, #3
 80003cc:	d203      	bcs.n	80003d6 <USBPD_CAD_PortEnable+0xc>
 80003ce:	4a42      	ldr	r2, [pc, #264]	@ (80004d8 <.text_6>)
 80003d0:	0080      	lsls	r0, r0, #2
 80003d2:	5810      	ldr	r0, [r2, r0]
 80003d4:	7201      	strb	r1, [r0, #8]
 80003d6:	4770      	bx	lr

080003d8 <USBPD_CAD_Process>:
 80003d8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80003da:	2400      	movs	r4, #0
 80003dc:	4669      	mov	r1, sp
 80003de:	700c      	strb	r4, [r1, #0]
 80003e0:	9401      	str	r4, [sp, #4]
 80003e2:	2500      	movs	r5, #0
 80003e4:	43ed      	mvns	r5, r5
 80003e6:	4f3d      	ldr	r7, [pc, #244]	@ (80004dc <.text_7>)
 80003e8:	483b      	ldr	r0, [pc, #236]	@ (80004d8 <.text_6>)
 80003ea:	00a1      	lsls	r1, r4, #2
 80003ec:	1846      	adds	r6, r0, r1
 80003ee:	6830      	ldr	r0, [r6, #0]
 80003f0:	2800      	cmp	r0, #0
 80003f2:	d06c      	beq.n	80004ce <USBPD_CAD_Process+0xf6>
 80003f4:	7a00      	ldrb	r0, [r0, #8]
 80003f6:	2801      	cmp	r0, #1
 80003f8:	d169      	bne.n	80004ce <USBPD_CAD_Process+0xf6>
 80003fa:	aa01      	add	r2, sp, #4
 80003fc:	4669      	mov	r1, sp
 80003fe:	b2e0      	uxtb	r0, r4
 8000400:	f014 fb0a 	bl	8014a18 <CAD_StateMachine>
 8000404:	42a8      	cmp	r0, r5
 8000406:	d800      	bhi.n	800040a <USBPD_CAD_Process+0x32>
 8000408:	0005      	movs	r5, r0
 800040a:	4668      	mov	r0, sp
 800040c:	7800      	ldrb	r0, [r0, #0]
 800040e:	2801      	cmp	r0, #1
 8000410:	d004      	beq.n	800041c <USBPD_CAD_Process+0x44>
 8000412:	2802      	cmp	r0, #2
 8000414:	d012      	beq.n	800043c <USBPD_CAD_Process+0x64>
 8000416:	2804      	cmp	r0, #4
 8000418:	d010      	beq.n	800043c <USBPD_CAD_Process+0x64>
 800041a:	e040      	b.n	800049e <USBPD_CAD_Process+0xc6>
 800041c:	6830      	ldr	r0, [r6, #0]
 800041e:	6801      	ldr	r1, [r0, #0]
 8000420:	680a      	ldr	r2, [r1, #0]
 8000422:	4b2f      	ldr	r3, [pc, #188]	@ (80004e0 <.text_8>)
 8000424:	4013      	ands	r3, r2
 8000426:	600b      	str	r3, [r1, #0]
 8000428:	6801      	ldr	r1, [r0, #0]
 800042a:	680a      	ldr	r2, [r1, #0]
 800042c:	23c0      	movs	r3, #192	@ 0xc0
 800042e:	439a      	bics	r2, r3
 8000430:	600a      	str	r2, [r1, #0]
 8000432:	6800      	ldr	r0, [r0, #0]
 8000434:	6801      	ldr	r1, [r0, #0]
 8000436:	4039      	ands	r1, r7
 8000438:	6001      	str	r1, [r0, #0]
 800043a:	e034      	b.n	80004a6 <USBPD_CAD_Process+0xce>
 800043c:	6830      	ldr	r0, [r6, #0]
 800043e:	9901      	ldr	r1, [sp, #4]
 8000440:	2901      	cmp	r1, #1
 8000442:	6801      	ldr	r1, [r0, #0]
 8000444:	680a      	ldr	r2, [r1, #0]
 8000446:	d103      	bne.n	8000450 <USBPD_CAD_Process+0x78>
 8000448:	403a      	ands	r2, r7
 800044a:	2380      	movs	r3, #128	@ 0x80
 800044c:	01db      	lsls	r3, r3, #7
 800044e:	e002      	b.n	8000456 <USBPD_CAD_Process+0x7e>
 8000450:	403a      	ands	r2, r7
 8000452:	2380      	movs	r3, #128	@ 0x80
 8000454:	019b      	lsls	r3, r3, #6
 8000456:	4313      	orrs	r3, r2
 8000458:	600b      	str	r3, [r1, #0]
 800045a:	6801      	ldr	r1, [r0, #0]
 800045c:	680b      	ldr	r3, [r1, #0]
 800045e:	22c0      	movs	r2, #192	@ 0xc0
 8000460:	4393      	bics	r3, r2
 8000462:	469c      	mov	ip, r3
 8000464:	9a01      	ldr	r2, [sp, #4]
 8000466:	0193      	lsls	r3, r2, #6
 8000468:	22c0      	movs	r2, #192	@ 0xc0
 800046a:	401a      	ands	r2, r3
 800046c:	4663      	mov	r3, ip
 800046e:	431a      	orrs	r2, r3
 8000470:	600a      	str	r2, [r1, #0]
 8000472:	6801      	ldr	r1, [r0, #0]
 8000474:	680a      	ldr	r2, [r1, #0]
 8000476:	2380      	movs	r3, #128	@ 0x80
 8000478:	015b      	lsls	r3, r3, #5
 800047a:	4313      	orrs	r3, r2
 800047c:	600b      	str	r3, [r1, #0]
 800047e:	6800      	ldr	r0, [r0, #0]
 8000480:	6801      	ldr	r1, [r0, #0]
 8000482:	074a      	lsls	r2, r1, #29
 8000484:	0fd2      	lsrs	r2, r2, #31
 8000486:	d103      	bne.n	8000490 <USBPD_CAD_Process+0xb8>
 8000488:	2208      	movs	r2, #8
 800048a:	4391      	bics	r1, r2
 800048c:	6001      	str	r1, [r0, #0]
 800048e:	e002      	b.n	8000496 <USBPD_CAD_Process+0xbe>
 8000490:	2208      	movs	r2, #8
 8000492:	430a      	orrs	r2, r1
 8000494:	6002      	str	r2, [r0, #0]
 8000496:	2168      	movs	r1, #104	@ 0x68
 8000498:	b2e0      	uxtb	r0, r4
 800049a:	f000 f925 	bl	80006e8 <USBPD_PE_Notification>
 800049e:	4668      	mov	r0, sp
 80004a0:	7800      	ldrb	r0, [r0, #0]
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d013      	beq.n	80004ce <USBPD_CAD_Process+0xf6>
 80004a6:	9a01      	ldr	r2, [sp, #4]
 80004a8:	4668      	mov	r0, sp
 80004aa:	7801      	ldrb	r1, [r0, #0]
 80004ac:	b2e0      	uxtb	r0, r4
 80004ae:	6833      	ldr	r3, [r6, #0]
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4798      	blx	r3
 80004b6:	4668      	mov	r0, sp
 80004b8:	7800      	ldrb	r0, [r0, #0]
 80004ba:	2801      	cmp	r0, #1
 80004bc:	d003      	beq.n	80004c6 <USBPD_CAD_Process+0xee>
 80004be:	4668      	mov	r0, sp
 80004c0:	7800      	ldrb	r0, [r0, #0]
 80004c2:	2803      	cmp	r0, #3
 80004c4:	d103      	bne.n	80004ce <USBPD_CAD_Process+0xf6>
 80004c6:	2169      	movs	r1, #105	@ 0x69
 80004c8:	b2e0      	uxtb	r0, r4
 80004ca:	f000 f90d 	bl	80006e8 <USBPD_PE_Notification>
 80004ce:	1c64      	adds	r4, r4, #1
 80004d0:	2c03      	cmp	r4, #3
 80004d2:	d389      	bcc.n	80003e8 <USBPD_CAD_Process+0x10>
 80004d4:	0028      	movs	r0, r5
 80004d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080004d8 <.text_6>:
 80004d8:	20000270 	.word	0x20000270

080004dc <.text_7>:
 80004dc:	ffff9fff 	.word	0xffff9fff

080004e0 <.text_8>:
 80004e0:	ffffefff 	.word	0xffffefff

080004e4 <USBPD_CAD_AssertRd>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	0004      	movs	r4, r0
 80004e8:	f016 fc0c 	bl	8016d04 <USBPDM1_DeAssertRp>
 80004ec:	0020      	movs	r0, r4
 80004ee:	f016 fc13 	bl	8016d18 <USBPDM1_AssertRd>
 80004f2:	bd10      	pop	{r4, pc}

080004f4 <USBPD_CAD_AssertRp>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	0004      	movs	r4, r0
 80004f8:	f016 fcb4 	bl	8016e64 <USBPDM1_DeAssertRd>
 80004fc:	0020      	movs	r0, r4
 80004fe:	f016 fb49 	bl	8016b94 <USBPDM1_AssertRp>
 8000502:	bd10      	pop	{r4, pc}

08000504 <USBPD_CAD_EnterErrorRecovery>:
 8000504:	b580      	push	{r7, lr}
 8000506:	f014 f923 	bl	8014750 <CAD_Enter_ErrorRecovery>
 800050a:	bd01      	pop	{r0, pc}

0800050c <USBPD_CAD_SRC_SetRpResistor>:
 800050c:	b510      	push	{r4, lr}
 800050e:	2404      	movs	r4, #4
 8000510:	f014 f984 	bl	801481c <CAD_Set_ResistorRp>
 8000514:	2800      	cmp	r0, #0
 8000516:	d100      	bne.n	800051a <USBPD_CAD_SRC_SetRpResistor+0xe>
 8000518:	2400      	movs	r4, #0
 800051a:	0020      	movs	r0, r4
 800051c:	bd10      	pop	{r4, pc}

0800051e <USBPD_CAD_SetRpResistor>:
 800051e:	b580      	push	{r7, lr}
 8000520:	f7ff fff4 	bl	800050c <USBPD_CAD_SRC_SetRpResistor>
 8000524:	bd02      	pop	{r1, pc}

08000526 <USBPD_CAD_GetMemoryConsumption>:
 8000526:	2024      	movs	r0, #36	@ 0x24
 8000528:	4770      	bx	lr
	...

0800052c <USBPD_PE_Init>:
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052e:	000e      	movs	r6, r1
 8000530:	0017      	movs	r7, r2
 8000532:	001c      	movs	r4, r3
 8000534:	6871      	ldr	r1, [r6, #4]
 8000536:	070a      	lsls	r2, r1, #28
 8000538:	0fd2      	lsrs	r2, r2, #31
 800053a:	d002      	beq.n	8000542 <USBPD_PE_Init+0x16>
 800053c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800053e:	2900      	cmp	r1, #0
 8000540:	d002      	beq.n	8000548 <USBPD_PE_Init+0x1c>
 8000542:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8000544:	2900      	cmp	r1, #0
 8000546:	d101      	bne.n	800054c <USBPD_PE_Init+0x20>
 8000548:	241b      	movs	r4, #27
 800054a:	e04a      	b.n	80005e2 <USBPD_PE_Init+0xb6>
 800054c:	4669      	mov	r1, sp
 800054e:	7008      	strb	r0, [r1, #0]
 8000550:	4668      	mov	r0, sp
 8000552:	7800      	ldrb	r0, [r0, #0]
 8000554:	2803      	cmp	r0, #3
 8000556:	d301      	bcc.n	800055c <USBPD_PE_Init+0x30>
 8000558:	2417      	movs	r4, #23
 800055a:	e042      	b.n	80005e2 <USBPD_PE_Init+0xb6>
 800055c:	2096      	movs	r0, #150	@ 0x96
 800055e:	00c0      	lsls	r0, r0, #3
 8000560:	f01e fba8 	bl	801ecb4 <malloc>
 8000564:	0005      	movs	r5, r0
 8000566:	d101      	bne.n	800056c <USBPD_PE_Init+0x40>
 8000568:	2416      	movs	r4, #22
 800056a:	e03a      	b.n	80005e2 <USBPD_PE_Init+0xb6>
 800056c:	2196      	movs	r1, #150	@ 0x96
 800056e:	00c9      	lsls	r1, r1, #3
 8000570:	f01e fcad 	bl	801eece <__aeabi_memclr>
 8000574:	487a      	ldr	r0, [pc, #488]	@ (8000760 <.text_16>)
 8000576:	4669      	mov	r1, sp
 8000578:	7809      	ldrb	r1, [r1, #0]
 800057a:	0089      	lsls	r1, r1, #2
 800057c:	5045      	str	r5, [r0, r1]
 800057e:	602e      	str	r6, [r5, #0]
 8000580:	606f      	str	r7, [r5, #4]
 8000582:	4668      	mov	r0, sp
 8000584:	7800      	ldrb	r0, [r0, #0]
 8000586:	7428      	strb	r0, [r5, #16]
 8000588:	60ac      	str	r4, [r5, #8]
 800058a:	4876      	ldr	r0, [pc, #472]	@ (8000764 <.text_17>)
 800058c:	182b      	adds	r3, r5, r0
 800058e:	4876      	ldr	r0, [pc, #472]	@ (8000768 <.text_18>)
 8000590:	182a      	adds	r2, r5, r0
 8000592:	0031      	movs	r1, r6
 8000594:	4668      	mov	r0, sp
 8000596:	7800      	ldrb	r0, [r0, #0]
 8000598:	f005 f98c 	bl	80058b4 <USBPD_PRL_Init>
 800059c:	0004      	movs	r4, r0
 800059e:	d120      	bne.n	80005e2 <USBPD_PE_Init+0xb6>
 80005a0:	6868      	ldr	r0, [r5, #4]
 80005a2:	6801      	ldr	r1, [r0, #0]
 80005a4:	2703      	movs	r7, #3
 80005a6:	682a      	ldr	r2, [r5, #0]
 80005a8:	6852      	ldr	r2, [r2, #4]
 80005aa:	0753      	lsls	r3, r2, #29
 80005ac:	0fdb      	lsrs	r3, r3, #31
 80005ae:	d006      	beq.n	80005be <USBPD_PE_Init+0x92>
 80005b0:	2208      	movs	r2, #8
 80005b2:	430a      	orrs	r2, r1
 80005b4:	6002      	str	r2, [r0, #0]
 80005b6:	6873      	ldr	r3, [r6, #4]
 80005b8:	403b      	ands	r3, r7
 80005ba:	2201      	movs	r2, #1
 80005bc:	e005      	b.n	80005ca <USBPD_PE_Init+0x9e>
 80005be:	2208      	movs	r2, #8
 80005c0:	4391      	bics	r1, r2
 80005c2:	6001      	str	r1, [r0, #0]
 80005c4:	6873      	ldr	r3, [r6, #4]
 80005c6:	403b      	ands	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	4611      	mov	r1, r2
 80005cc:	4668      	mov	r0, sp
 80005ce:	7800      	ldrb	r0, [r0, #0]
 80005d0:	f005 f9ab 	bl	800592a <USBPD_PRL_SetHeader>
 80005d4:	6870      	ldr	r0, [r6, #4]
 80005d6:	4007      	ands	r7, r0
 80005d8:	0039      	movs	r1, r7
 80005da:	4668      	mov	r0, sp
 80005dc:	7800      	ldrb	r0, [r0, #0]
 80005de:	f005 f9e2 	bl	80059a6 <USBPD_PRL_CBL_SetHeaderSpecification>
 80005e2:	0020      	movs	r0, r4
 80005e4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080005e6 <USBPD_PE_TimerCounter>:
 80005e6:	495e      	ldr	r1, [pc, #376]	@ (8000760 <.text_16>)
 80005e8:	0080      	lsls	r0, r0, #2
 80005ea:	5808      	ldr	r0, [r1, r0]
 80005ec:	49b4      	ldr	r1, [pc, #720]	@ (80008c0 <.text_20>)
 80005ee:	084a      	lsrs	r2, r1, #1
 80005f0:	8bc3      	ldrh	r3, [r0, #30]
 80005f2:	4213      	tst	r3, r2
 80005f4:	d002      	beq.n	80005fc <USBPD_PE_TimerCounter+0x16>
 80005f6:	8bc3      	ldrh	r3, [r0, #30]
 80005f8:	185b      	adds	r3, r3, r1
 80005fa:	83c3      	strh	r3, [r0, #30]
 80005fc:	8c03      	ldrh	r3, [r0, #32]
 80005fe:	4213      	tst	r3, r2
 8000600:	d002      	beq.n	8000608 <USBPD_PE_TimerCounter+0x22>
 8000602:	8c03      	ldrh	r3, [r0, #32]
 8000604:	185b      	adds	r3, r3, r1
 8000606:	8403      	strh	r3, [r0, #32]
 8000608:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800060a:	4213      	tst	r3, r2
 800060c:	d002      	beq.n	8000614 <USBPD_PE_TimerCounter+0x2e>
 800060e:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8000610:	185b      	adds	r3, r3, r1
 8000612:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8000614:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000616:	4213      	tst	r3, r2
 8000618:	d002      	beq.n	8000620 <USBPD_PE_TimerCounter+0x3a>
 800061a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800061c:	185b      	adds	r3, r3, r1
 800061e:	8443      	strh	r3, [r0, #34]	@ 0x22
 8000620:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 8000622:	4213      	tst	r3, r2
 8000624:	d002      	beq.n	800062c <USBPD_PE_TimerCounter+0x46>
 8000626:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
 8000628:	1851      	adds	r1, r2, r1
 800062a:	8481      	strh	r1, [r0, #36]	@ 0x24
 800062c:	4770      	bx	lr

0800062e <USBPD_PE_TimerCounteUpdate>:
 800062e:	b570      	push	{r4, r5, r6, lr}
 8000630:	000e      	movs	r6, r1
 8000632:	494b      	ldr	r1, [pc, #300]	@ (8000760 <.text_16>)
 8000634:	0080      	lsls	r0, r0, #2
 8000636:	580c      	ldr	r4, [r1, r0]
 8000638:	2180      	movs	r1, #128	@ 0x80
 800063a:	0209      	lsls	r1, r1, #8
 800063c:	428e      	cmp	r6, r1
 800063e:	da28      	bge.n	8000692 <USBPD_PE_TimerCounteUpdate+0x64>
 8000640:	1e4d      	subs	r5, r1, #1
 8000642:	8be0      	ldrh	r0, [r4, #30]
 8000644:	4228      	tst	r0, r5
 8000646:	d004      	beq.n	8000652 <USBPD_PE_TimerCounteUpdate+0x24>
 8000648:	0031      	movs	r1, r6
 800064a:	8be0      	ldrh	r0, [r4, #30]
 800064c:	f000 ffcb 	bl	80015e6 <PE_UpdateTimer>
 8000650:	83e0      	strh	r0, [r4, #30]
 8000652:	8c20      	ldrh	r0, [r4, #32]
 8000654:	4228      	tst	r0, r5
 8000656:	d004      	beq.n	8000662 <USBPD_PE_TimerCounteUpdate+0x34>
 8000658:	0031      	movs	r1, r6
 800065a:	8c20      	ldrh	r0, [r4, #32]
 800065c:	f000 ffc3 	bl	80015e6 <PE_UpdateTimer>
 8000660:	8420      	strh	r0, [r4, #32]
 8000662:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8000664:	4228      	tst	r0, r5
 8000666:	d004      	beq.n	8000672 <USBPD_PE_TimerCounteUpdate+0x44>
 8000668:	0031      	movs	r1, r6
 800066a:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 800066c:	f000 ffbb 	bl	80015e6 <PE_UpdateTimer>
 8000670:	84e0      	strh	r0, [r4, #38]	@ 0x26
 8000672:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8000674:	4228      	tst	r0, r5
 8000676:	d004      	beq.n	8000682 <USBPD_PE_TimerCounteUpdate+0x54>
 8000678:	0031      	movs	r1, r6
 800067a:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 800067c:	f000 ffb3 	bl	80015e6 <PE_UpdateTimer>
 8000680:	8460      	strh	r0, [r4, #34]	@ 0x22
 8000682:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8000684:	4228      	tst	r0, r5
 8000686:	d004      	beq.n	8000692 <USBPD_PE_TimerCounteUpdate+0x64>
 8000688:	0031      	movs	r1, r6
 800068a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 800068c:	f000 ffab 	bl	80015e6 <PE_UpdateTimer>
 8000690:	84a0      	strh	r0, [r4, #36]	@ 0x24
 8000692:	bd70      	pop	{r4, r5, r6, pc}

08000694 <USBPD_PE_IsCableConnected>:
 8000694:	b510      	push	{r4, lr}
 8000696:	4a32      	ldr	r2, [pc, #200]	@ (8000760 <.text_16>)
 8000698:	0080      	lsls	r0, r0, #2
 800069a:	5810      	ldr	r0, [r2, r0]
 800069c:	6842      	ldr	r2, [r0, #4]
 800069e:	6813      	ldr	r3, [r2, #0]
 80006a0:	4cb2      	ldr	r4, [pc, #712]	@ (800096c <.text_22>)
 80006a2:	401c      	ands	r4, r3
 80006a4:	0309      	lsls	r1, r1, #12
 80006a6:	2380      	movs	r3, #128	@ 0x80
 80006a8:	015b      	lsls	r3, r3, #5
 80006aa:	4019      	ands	r1, r3
 80006ac:	4321      	orrs	r1, r4
 80006ae:	6011      	str	r1, [r2, #0]
 80006b0:	2148      	movs	r1, #72	@ 0x48
 80006b2:	7441      	strb	r1, [r0, #17]
 80006b4:	bd10      	pop	{r4, pc}

080006b6 <USBPD_PE_StateMachine_Reset>:
 80006b6:	2148      	movs	r1, #72	@ 0x48
 80006b8:	4a29      	ldr	r2, [pc, #164]	@ (8000760 <.text_16>)
 80006ba:	0080      	lsls	r0, r0, #2
 80006bc:	5810      	ldr	r0, [r2, r0]
 80006be:	7441      	strb	r1, [r0, #17]
 80006c0:	4770      	bx	lr

080006c2 <USBPD_PE_StateMachine_Stop>:
 80006c2:	b580      	push	{r7, lr}
 80006c4:	f005 fc34 	bl	8005f30 <USBPD_PRL_Stop>
 80006c8:	bd01      	pop	{r0, pc}

080006ca <USBPD_PE_StateMachine_DRP>:
 80006ca:	b580      	push	{r7, lr}
 80006cc:	4924      	ldr	r1, [pc, #144]	@ (8000760 <.text_16>)
 80006ce:	0082      	lsls	r2, r0, #2
 80006d0:	5889      	ldr	r1, [r1, r2]
 80006d2:	6849      	ldr	r1, [r1, #4]
 80006d4:	6809      	ldr	r1, [r1, #0]
 80006d6:	074a      	lsls	r2, r1, #29
 80006d8:	0fd2      	lsrs	r2, r2, #31
 80006da:	d002      	beq.n	80006e2 <USBPD_PE_StateMachine_DRP+0x18>
 80006dc:	f002 fb8a 	bl	8002df4 <USBPD_PE_StateMachine_SRC>
 80006e0:	bd02      	pop	{r1, pc}
 80006e2:	f001 fcd5 	bl	8002090 <USBPD_PE_StateMachine_SNK>
 80006e6:	bd02      	pop	{r1, pc}

080006e8 <USBPD_PE_Notification>:
 80006e8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80006ea:	0004      	movs	r4, r0
 80006ec:	2803      	cmp	r0, #3
 80006ee:	d211      	bcs.n	8000714 <USBPD_PE_Notification+0x2c>
 80006f0:	000d      	movs	r5, r1
 80006f2:	2000      	movs	r0, #0
 80006f4:	9000      	str	r0, [sp, #0]
 80006f6:	2300      	movs	r3, #0
 80006f8:	002a      	movs	r2, r5
 80006fa:	0021      	movs	r1, r4
 80006fc:	2009      	movs	r0, #9
 80006fe:	4eb2      	ldr	r6, [pc, #712]	@ (80009c8 <.text_24>)
 8000700:	6836      	ldr	r6, [r6, #0]
 8000702:	47b0      	blx	r6
 8000704:	0029      	movs	r1, r5
 8000706:	0020      	movs	r0, r4
 8000708:	4ab0      	ldr	r2, [pc, #704]	@ (80009cc <.text_25>)
 800070a:	00a3      	lsls	r3, r4, #2
 800070c:	58d2      	ldr	r2, [r2, r3]
 800070e:	6892      	ldr	r2, [r2, #8]
 8000710:	68d2      	ldr	r2, [r2, #12]
 8000712:	4790      	blx	r2
 8000714:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08000716 <USBPD_PE_InitVDM_Callback>:
 8000716:	4aad      	ldr	r2, [pc, #692]	@ (80009cc <.text_25>)
 8000718:	0080      	lsls	r0, r0, #2
 800071a:	5810      	ldr	r0, [r2, r0]
 800071c:	60c1      	str	r1, [r0, #12]
 800071e:	4770      	bx	lr

08000720 <USBPD_PE_Request_HardReset>:
 8000720:	b580      	push	{r7, lr}
 8000722:	49aa      	ldr	r1, [pc, #680]	@ (80009cc <.text_25>)
 8000724:	0082      	lsls	r2, r0, #2
 8000726:	5889      	ldr	r1, [r1, r2]
 8000728:	220f      	movs	r2, #15
 800072a:	2332      	movs	r3, #50	@ 0x32
 800072c:	54ca      	strb	r2, [r1, r3]
 800072e:	6889      	ldr	r1, [r1, #8]
 8000730:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000732:	4788      	blx	r1
 8000734:	2000      	movs	r0, #0
 8000736:	bd02      	pop	{r1, pc}

08000738 <USBPD_PE_Request_CableReset>:
 8000738:	b580      	push	{r7, lr}
 800073a:	4909      	ldr	r1, [pc, #36]	@ (8000760 <.text_16>)
 800073c:	0082      	lsls	r2, r0, #2
 800073e:	5889      	ldr	r1, [r1, r2]
 8000740:	684a      	ldr	r2, [r1, #4]
 8000742:	6812      	ldr	r2, [r2, #0]
 8000744:	4ba2      	ldr	r3, [pc, #648]	@ (80009d0 <.text_26>)
 8000746:	4013      	ands	r3, r2
 8000748:	4aa2      	ldr	r2, [pc, #648]	@ (80009d4 <.text_27>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d105      	bne.n	800075a <USBPD_PE_Request_CableReset+0x22>
 800074e:	2299      	movs	r2, #153	@ 0x99
 8000750:	2332      	movs	r3, #50	@ 0x32
 8000752:	54ca      	strb	r2, [r1, r3]
 8000754:	6889      	ldr	r1, [r1, #8]
 8000756:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000758:	4788      	blx	r1
 800075a:	2010      	movs	r0, #16
 800075c:	bd02      	pop	{r1, pc}
	...

08000760 <.text_16>:
 8000760:	2000027c 	.word	0x2000027c

08000764 <.text_17>:
 8000764:	0000048e 	.word	0x0000048e

08000768 <.text_18>:
 8000768:	00000281 	.word	0x00000281

0800076c <USBPD_PE_Request_CtrlMessage>:
 800076c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800076e:	b096      	sub	sp, #88	@ 0x58
 8000770:	4896      	ldr	r0, [pc, #600]	@ (80009cc <.text_25>)
 8000772:	a916      	add	r1, sp, #88	@ 0x58
 8000774:	7809      	ldrb	r1, [r1, #0]
 8000776:	0089      	lsls	r1, r1, #2
 8000778:	5840      	ldr	r0, [r0, r1]
 800077a:	9001      	str	r0, [sp, #4]
 800077c:	2400      	movs	r4, #0
 800077e:	a802      	add	r0, sp, #8
 8000780:	4995      	ldr	r1, [pc, #596]	@ (80009d8 <.text_28>)
 8000782:	224c      	movs	r2, #76	@ 0x4c
 8000784:	f01e fb98 	bl	801eeb8 <__aeabi_memcpy>
 8000788:	2303      	movs	r3, #3
 800078a:	9801      	ldr	r0, [sp, #4]
 800078c:	2132      	movs	r1, #50	@ 0x32
 800078e:	5c40      	ldrb	r0, [r0, r1]
 8000790:	2800      	cmp	r0, #0
 8000792:	d105      	bne.n	80007a0 <USBPD_PE_Request_CtrlMessage+0x34>
 8000794:	9801      	ldr	r0, [sp, #4]
 8000796:	6840      	ldr	r0, [r0, #4]
 8000798:	6800      	ldr	r0, [r0, #0]
 800079a:	04c1      	lsls	r1, r0, #19
 800079c:	0fc9      	lsrs	r1, r1, #31
 800079e:	d101      	bne.n	80007a4 <USBPD_PE_Request_CtrlMessage+0x38>
 80007a0:	2403      	movs	r4, #3
 80007a2:	e089      	b.n	80008b8 <USBPD_PE_Request_CtrlMessage+0x14c>
 80007a4:	9901      	ldr	r1, [sp, #4]
 80007a6:	6809      	ldr	r1, [r1, #0]
 80007a8:	684a      	ldr	r2, [r1, #4]
 80007aa:	0712      	lsls	r2, r2, #28
 80007ac:	0fd5      	lsrs	r5, r2, #31
 80007ae:	466a      	mov	r2, sp
 80007b0:	7055      	strb	r5, [r2, #1]
 80007b2:	2201      	movs	r2, #1
 80007b4:	0885      	lsrs	r5, r0, #2
 80007b6:	4015      	ands	r5, r2
 80007b8:	d103      	bne.n	80007c2 <USBPD_PE_Request_CtrlMessage+0x56>
 80007ba:	2502      	movs	r5, #2
 80007bc:	466f      	mov	r7, sp
 80007be:	703c      	strb	r4, [r7, #0]
 80007c0:	e003      	b.n	80007ca <USBPD_PE_Request_CtrlMessage+0x5e>
 80007c2:	2500      	movs	r5, #0
 80007c4:	2604      	movs	r6, #4
 80007c6:	466f      	mov	r7, sp
 80007c8:	703e      	strb	r6, [r7, #0]
 80007ca:	0546      	lsls	r6, r0, #21
 80007cc:	0f76      	lsrs	r6, r6, #29
 80007ce:	2e03      	cmp	r6, #3
 80007d0:	d101      	bne.n	80007d6 <USBPD_PE_Request_CtrlMessage+0x6a>
 80007d2:	2608      	movs	r6, #8
 80007d4:	e000      	b.n	80007d8 <USBPD_PE_Request_CtrlMessage+0x6c>
 80007d6:	2600      	movs	r6, #0
 80007d8:	4018      	ands	r0, r3
 80007da:	2802      	cmp	r0, #2
 80007dc:	d101      	bne.n	80007e2 <USBPD_PE_Request_CtrlMessage+0x76>
 80007de:	2040      	movs	r0, #64	@ 0x40
 80007e0:	e000      	b.n	80007e4 <USBPD_PE_Request_CtrlMessage+0x78>
 80007e2:	2000      	movs	r0, #0
 80007e4:	787f      	ldrb	r7, [r7, #1]
 80007e6:	433d      	orrs	r5, r7
 80007e8:	466f      	mov	r7, sp
 80007ea:	783f      	ldrb	r7, [r7, #0]
 80007ec:	432f      	orrs	r7, r5
 80007ee:	433e      	orrs	r6, r7
 80007f0:	4330      	orrs	r0, r6
 80007f2:	4003      	ands	r3, r0
 80007f4:	d002      	beq.n	80007fc <USBPD_PE_Request_CtrlMessage+0x90>
 80007f6:	0003      	movs	r3, r0
 80007f8:	2010      	movs	r0, #16
 80007fa:	4318      	orrs	r0, r3
 80007fc:	2505      	movs	r5, #5
 80007fe:	4228      	tst	r0, r5
 8000800:	d002      	beq.n	8000808 <USBPD_PE_Request_CtrlMessage+0x9c>
 8000802:	0003      	movs	r3, r0
 8000804:	2020      	movs	r0, #32
 8000806:	4318      	orrs	r0, r3
 8000808:	ab17      	add	r3, sp, #92	@ 0x5c
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	005e      	lsls	r6, r3, #1
 800080e:	18f3      	adds	r3, r6, r3
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	ab02      	add	r3, sp, #8
 8000814:	9e00      	ldr	r6, [sp, #0]
 8000816:	5d9e      	ldrb	r6, [r3, r6]
 8000818:	4030      	ands	r0, r6
 800081a:	42b0      	cmp	r0, r6
 800081c:	d11f      	bne.n	800085e <USBPD_PE_Request_CtrlMessage+0xf2>
 800081e:	9e01      	ldr	r6, [sp, #4]
 8000820:	2733      	movs	r7, #51	@ 0x33
 8000822:	55f4      	strb	r4, [r6, r7]
 8000824:	9801      	ldr	r0, [sp, #4]
 8000826:	4eb2      	ldr	r6, [pc, #712]	@ (8000af0 <.text_30>)
 8000828:	1980      	adds	r0, r0, r6
 800082a:	ae17      	add	r6, sp, #92	@ 0x5c
 800082c:	7836      	ldrb	r6, [r6, #0]
 800082e:	2e05      	cmp	r6, #5
 8000830:	d031      	beq.n	8000896 <USBPD_PE_Request_CtrlMessage+0x12a>
 8000832:	2e0b      	cmp	r6, #11
 8000834:	d00e      	beq.n	8000854 <USBPD_PE_Request_CtrlMessage+0xe8>
 8000836:	2e0d      	cmp	r6, #13
 8000838:	d028      	beq.n	800088c <USBPD_PE_Request_CtrlMessage+0x120>
 800083a:	2e11      	cmp	r6, #17
 800083c:	d011      	beq.n	8000862 <USBPD_PE_Request_CtrlMessage+0xf6>
 800083e:	2e12      	cmp	r6, #18
 8000840:	d013      	beq.n	800086a <USBPD_PE_Request_CtrlMessage+0xfe>
 8000842:	2e14      	cmp	r6, #20
 8000844:	d013      	beq.n	800086e <USBPD_PE_Request_CtrlMessage+0x102>
 8000846:	2e15      	cmp	r6, #21
 8000848:	d017      	beq.n	800087a <USBPD_PE_Request_CtrlMessage+0x10e>
 800084a:	2e16      	cmp	r6, #22
 800084c:	d00b      	beq.n	8000866 <USBPD_PE_Request_CtrlMessage+0xfa>
 800084e:	2e18      	cmp	r6, #24
 8000850:	d01c      	beq.n	800088c <USBPD_PE_Request_CtrlMessage+0x120>
 8000852:	e021      	b.n	8000898 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000854:	9901      	ldr	r1, [sp, #4]
 8000856:	6889      	ldr	r1, [r1, #8]
 8000858:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 800085a:	2900      	cmp	r1, #0
 800085c:	d11c      	bne.n	8000898 <USBPD_PE_Request_CtrlMessage+0x12c>
 800085e:	2402      	movs	r4, #2
 8000860:	e02a      	b.n	80008b8 <USBPD_PE_Request_CtrlMessage+0x14c>
 8000862:	2111      	movs	r1, #17
 8000864:	e010      	b.n	8000888 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000866:	2116      	movs	r1, #22
 8000868:	e00e      	b.n	8000888 <USBPD_PE_Request_CtrlMessage+0x11c>
 800086a:	2112      	movs	r1, #18
 800086c:	e00c      	b.n	8000888 <USBPD_PE_Request_CtrlMessage+0x11c>
 800086e:	8909      	ldrh	r1, [r1, #8]
 8000870:	0889      	lsrs	r1, r1, #2
 8000872:	4211      	tst	r1, r2
 8000874:	d110      	bne.n	8000898 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000876:	2410      	movs	r4, #16
 8000878:	e01e      	b.n	80008b8 <USBPD_PE_Request_CtrlMessage+0x14c>
 800087a:	8909      	ldrh	r1, [r1, #8]
 800087c:	09c9      	lsrs	r1, r1, #7
 800087e:	4211      	tst	r1, r2
 8000880:	d101      	bne.n	8000886 <USBPD_PE_Request_CtrlMessage+0x11a>
 8000882:	2010      	movs	r0, #16
 8000884:	e019      	b.n	80008ba <USBPD_PE_Request_CtrlMessage+0x14e>
 8000886:	2115      	movs	r1, #21
 8000888:	7001      	strb	r1, [r0, #0]
 800088a:	e005      	b.n	8000898 <USBPD_PE_Request_CtrlMessage+0x12c>
 800088c:	a918      	add	r1, sp, #96	@ 0x60
 800088e:	7809      	ldrb	r1, [r1, #0]
 8000890:	9a01      	ldr	r2, [sp, #4]
 8000892:	55d1      	strb	r1, [r2, r7]
 8000894:	e000      	b.n	8000898 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000896:	7005      	strb	r5, [r0, #0]
 8000898:	9900      	ldr	r1, [sp, #0]
 800089a:	1859      	adds	r1, r3, r1
 800089c:	7849      	ldrb	r1, [r1, #1]
 800089e:	7041      	strb	r1, [r0, #1]
 80008a0:	9800      	ldr	r0, [sp, #0]
 80008a2:	1818      	adds	r0, r3, r0
 80008a4:	7880      	ldrb	r0, [r0, #2]
 80008a6:	9901      	ldr	r1, [sp, #4]
 80008a8:	2232      	movs	r2, #50	@ 0x32
 80008aa:	5488      	strb	r0, [r1, r2]
 80008ac:	a816      	add	r0, sp, #88	@ 0x58
 80008ae:	7800      	ldrb	r0, [r0, #0]
 80008b0:	9901      	ldr	r1, [sp, #4]
 80008b2:	6889      	ldr	r1, [r1, #8]
 80008b4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80008b6:	4788      	blx	r1
 80008b8:	0020      	movs	r0, r4
 80008ba:	b019      	add	sp, #100	@ 0x64
 80008bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080008c0 <.text_20>:
 80008c0:	0000ffff 	.word	0x0000ffff

080008c4 <USBPD_PE_Request_DataMessage>:
 80008c4:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	000b      	movs	r3, r1
 80008ca:	0017      	movs	r7, r2
 80008cc:	483f      	ldr	r0, [pc, #252]	@ (80009cc <.text_25>)
 80008ce:	4669      	mov	r1, sp
 80008d0:	7a09      	ldrb	r1, [r1, #8]
 80008d2:	0089      	lsls	r1, r1, #2
 80008d4:	5841      	ldr	r1, [r0, r1]
 80008d6:	2402      	movs	r4, #2
 80008d8:	2032      	movs	r0, #50	@ 0x32
 80008da:	5c08      	ldrb	r0, [r1, r0]
 80008dc:	2800      	cmp	r0, #0
 80008de:	d105      	bne.n	80008ec <USBPD_PE_Request_DataMessage+0x28>
 80008e0:	2001      	movs	r0, #1
 80008e2:	684a      	ldr	r2, [r1, #4]
 80008e4:	6812      	ldr	r2, [r2, #0]
 80008e6:	0b12      	lsrs	r2, r2, #12
 80008e8:	4002      	ands	r2, r0
 80008ea:	d101      	bne.n	80008f0 <USBPD_PE_Request_DataMessage+0x2c>
 80008ec:	2403      	movs	r4, #3
 80008ee:	e021      	b.n	8000934 <USBPD_PE_Request_DataMessage+0x70>
 80008f0:	466a      	mov	r2, sp
 80008f2:	7013      	strb	r3, [r2, #0]
 80008f4:	2200      	movs	r2, #0
 80008f6:	2533      	movs	r5, #51	@ 0x33
 80008f8:	554a      	strb	r2, [r1, r5]
 80008fa:	000b      	movs	r3, r1
 80008fc:	3332      	adds	r3, #50	@ 0x32
 80008fe:	4dc0      	ldr	r5, [pc, #768]	@ (8000c00 <.text_36>)
 8000900:	4ec0      	ldr	r6, [pc, #768]	@ (8000c04 <.text_37>)
 8000902:	9701      	str	r7, [sp, #4]
 8000904:	466f      	mov	r7, sp
 8000906:	783f      	ldrb	r7, [r7, #0]
 8000908:	2f01      	cmp	r7, #1
 800090a:	d004      	beq.n	8000916 <USBPD_PE_Request_DataMessage+0x52>
 800090c:	2f06      	cmp	r7, #6
 800090e:	d013      	beq.n	8000938 <USBPD_PE_Request_DataMessage+0x74>
 8000910:	2f07      	cmp	r7, #7
 8000912:	d01b      	beq.n	800094c <USBPD_PE_Request_DataMessage+0x88>
 8000914:	e027      	b.n	8000966 <USBPD_PE_Request_DataMessage+0xa2>
 8000916:	684d      	ldr	r5, [r1, #4]
 8000918:	682d      	ldr	r5, [r5, #0]
 800091a:	08ad      	lsrs	r5, r5, #2
 800091c:	4005      	ands	r5, r0
 800091e:	d009      	beq.n	8000934 <USBPD_PE_Request_DataMessage+0x70>
 8000920:	4cc1      	ldr	r4, [pc, #772]	@ (8000c28 <.text_39>)
 8000922:	5508      	strb	r0, [r1, r4]
 8000924:	2007      	movs	r0, #7
 8000926:	7018      	strb	r0, [r3, #0]
 8000928:	2400      	movs	r4, #0
 800092a:	4668      	mov	r0, sp
 800092c:	7a00      	ldrb	r0, [r0, #8]
 800092e:	6889      	ldr	r1, [r1, #8]
 8000930:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000932:	4788      	blx	r1
 8000934:	0020      	movs	r0, r4
 8000936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000938:	6848      	ldr	r0, [r1, #4]
 800093a:	6800      	ldr	r0, [r0, #0]
 800093c:	4006      	ands	r6, r0
 800093e:	42ae      	cmp	r6, r5
 8000940:	d1f8      	bne.n	8000934 <USBPD_PE_Request_DataMessage+0x70>
 8000942:	9801      	ldr	r0, [sp, #4]
 8000944:	6800      	ldr	r0, [r0, #0]
 8000946:	6288      	str	r0, [r1, #40]	@ 0x28
 8000948:	202b      	movs	r0, #43	@ 0x2b
 800094a:	e7ec      	b.n	8000926 <USBPD_PE_Request_DataMessage+0x62>
 800094c:	6848      	ldr	r0, [r1, #4]
 800094e:	6800      	ldr	r0, [r0, #0]
 8000950:	4006      	ands	r6, r0
 8000952:	42ae      	cmp	r6, r5
 8000954:	d1ee      	bne.n	8000934 <USBPD_PE_Request_DataMessage+0x70>
 8000956:	9801      	ldr	r0, [sp, #4]
 8000958:	6800      	ldr	r0, [r0, #0]
 800095a:	6288      	str	r0, [r1, #40]	@ 0x28
 800095c:	205d      	movs	r0, #93	@ 0x5d
 800095e:	4cb2      	ldr	r4, [pc, #712]	@ (8000c28 <.text_39>)
 8000960:	5508      	strb	r0, [r1, r4]
 8000962:	2062      	movs	r0, #98	@ 0x62
 8000964:	e7df      	b.n	8000926 <USBPD_PE_Request_DataMessage+0x62>
 8000966:	2410      	movs	r4, #16
 8000968:	e7e4      	b.n	8000934 <USBPD_PE_Request_DataMessage+0x70>
	...

0800096c <.text_22>:
 800096c:	ffffefff 	.word	0xffffefff

08000970 <USBPD_PE_Send_Request>:
 8000970:	b570      	push	{r4, r5, r6, lr}
 8000972:	000b      	movs	r3, r1
 8000974:	4915      	ldr	r1, [pc, #84]	@ (80009cc <.text_25>)
 8000976:	0084      	lsls	r4, r0, #2
 8000978:	590d      	ldr	r5, [r1, r4]
 800097a:	2102      	movs	r1, #2
 800097c:	2432      	movs	r4, #50	@ 0x32
 800097e:	5d2c      	ldrb	r4, [r5, r4]
 8000980:	2c00      	cmp	r4, #0
 8000982:	d104      	bne.n	800098e <USBPD_PE_Send_Request+0x1e>
 8000984:	686c      	ldr	r4, [r5, #4]
 8000986:	6824      	ldr	r4, [r4, #0]
 8000988:	04e6      	lsls	r6, r4, #19
 800098a:	0ff6      	lsrs	r6, r6, #31
 800098c:	d101      	bne.n	8000992 <USBPD_PE_Send_Request+0x22>
 800098e:	2103      	movs	r1, #3
 8000990:	e017      	b.n	80009c2 <USBPD_PE_Send_Request+0x52>
 8000992:	4ea6      	ldr	r6, [pc, #664]	@ (8000c2c <.text_40>)
 8000994:	4026      	ands	r6, r4
 8000996:	24c0      	movs	r4, #192	@ 0xc0
 8000998:	00a4      	lsls	r4, r4, #2
 800099a:	42a6      	cmp	r6, r4
 800099c:	d111      	bne.n	80009c2 <USBPD_PE_Send_Request+0x52>
 800099e:	2145      	movs	r1, #69	@ 0x45
 80009a0:	2432      	movs	r4, #50	@ 0x32
 80009a2:	5529      	strb	r1, [r5, r4]
 80009a4:	61ab      	str	r3, [r5, #24]
 80009a6:	6969      	ldr	r1, [r5, #20]
 80009a8:	2318      	movs	r3, #24
 80009aa:	4399      	bics	r1, r3
 80009ac:	00d2      	lsls	r2, r2, #3
 80009ae:	4013      	ands	r3, r2
 80009b0:	430b      	orrs	r3, r1
 80009b2:	616b      	str	r3, [r5, #20]
 80009b4:	2400      	movs	r4, #0
 80009b6:	2233      	movs	r2, #51	@ 0x33
 80009b8:	54ac      	strb	r4, [r5, r2]
 80009ba:	68a9      	ldr	r1, [r5, #8]
 80009bc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80009be:	4788      	blx	r1
 80009c0:	2100      	movs	r1, #0
 80009c2:	0008      	movs	r0, r1
 80009c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080009c8 <.text_24>:
 80009c8:	20000000 	.word	0x20000000

080009cc <.text_25>:
 80009cc:	2000027c 	.word	0x2000027c

080009d0 <.text_26>:
 80009d0:	00008708 	.word	0x00008708

080009d4 <.text_27>:
 80009d4:	00008308 	.word	0x00008308

080009d8 <.text_28>:
 80009d8:	0801f074 	.word	0x0801f074

080009dc <USBPD_PE_SendExtendedMessage>:
 80009dc:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 80009de:	b083      	sub	sp, #12
 80009e0:	001f      	movs	r7, r3
 80009e2:	2400      	movs	r4, #0
 80009e4:	2500      	movs	r5, #0
 80009e6:	48b5      	ldr	r0, [pc, #724]	@ (8000cbc <.text_43>)
 80009e8:	4669      	mov	r1, sp
 80009ea:	7b09      	ldrb	r1, [r1, #12]
 80009ec:	0089      	lsls	r1, r1, #2
 80009ee:	5846      	ldr	r6, [r0, r1]
 80009f0:	2003      	movs	r0, #3
 80009f2:	2132      	movs	r1, #50	@ 0x32
 80009f4:	5c71      	ldrb	r1, [r6, r1]
 80009f6:	2900      	cmp	r1, #0
 80009f8:	d107      	bne.n	8000a0a <USBPD_PE_SendExtendedMessage+0x2e>
 80009fa:	6871      	ldr	r1, [r6, #4]
 80009fc:	6809      	ldr	r1, [r1, #0]
 80009fe:	9100      	str	r1, [sp, #0]
 8000a00:	2101      	movs	r1, #1
 8000a02:	9b00      	ldr	r3, [sp, #0]
 8000a04:	0b1b      	lsrs	r3, r3, #12
 8000a06:	400b      	ands	r3, r1
 8000a08:	d101      	bne.n	8000a0e <USBPD_PE_SendExtendedMessage+0x32>
 8000a0a:	2503      	movs	r5, #3
 8000a0c:	e06c      	b.n	8000ae8 <USBPD_PE_SendExtendedMessage+0x10c>
 8000a0e:	9b00      	ldr	r3, [sp, #0]
 8000a10:	055b      	lsls	r3, r3, #21
 8000a12:	0f5b      	lsrs	r3, r3, #29
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d10b      	bne.n	8000a30 <USBPD_PE_SendExtendedMessage+0x54>
 8000a18:	9b00      	ldr	r3, [sp, #0]
 8000a1a:	4018      	ands	r0, r3
 8000a1c:	2801      	cmp	r0, #1
 8000a1e:	d801      	bhi.n	8000a24 <USBPD_PE_SendExtendedMessage+0x48>
 8000a20:	2501      	movs	r5, #1
 8000a22:	e061      	b.n	8000ae8 <USBPD_PE_SendExtendedMessage+0x10c>
 8000a24:	4668      	mov	r0, sp
 8000a26:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8000a28:	21ff      	movs	r1, #255	@ 0xff
 8000a2a:	1d89      	adds	r1, r1, #6
 8000a2c:	4288      	cmp	r0, r1
 8000a2e:	d301      	bcc.n	8000a34 <USBPD_PE_SendExtendedMessage+0x58>
 8000a30:	2502      	movs	r5, #2
 8000a32:	e059      	b.n	8000ae8 <USBPD_PE_SendExtendedMessage+0x10c>
 8000a34:	4668      	mov	r0, sp
 8000a36:	7002      	strb	r2, [r0, #0]
 8000a38:	6970      	ldr	r0, [r6, #20]
 8000a3a:	2120      	movs	r1, #32
 8000a3c:	4388      	bics	r0, r1
 8000a3e:	6170      	str	r0, [r6, #20]
 8000a40:	2020      	movs	r0, #32
 8000a42:	4669      	mov	r1, sp
 8000a44:	7809      	ldrb	r1, [r1, #0]
 8000a46:	2903      	cmp	r1, #3
 8000a48:	d008      	beq.n	8000a5c <USBPD_PE_SendExtendedMessage+0x80>
 8000a4a:	2904      	cmp	r1, #4
 8000a4c:	d020      	beq.n	8000a90 <USBPD_PE_SendExtendedMessage+0xb4>
 8000a4e:	2906      	cmp	r1, #6
 8000a50:	d020      	beq.n	8000a94 <USBPD_PE_SendExtendedMessage+0xb8>
 8000a52:	2908      	cmp	r1, #8
 8000a54:	d020      	beq.n	8000a98 <USBPD_PE_SendExtendedMessage+0xbc>
 8000a56:	290a      	cmp	r1, #10
 8000a58:	d023      	beq.n	8000aa2 <USBPD_PE_SendExtendedMessage+0xc6>
 8000a5a:	e024      	b.n	8000aa6 <USBPD_PE_SendExtendedMessage+0xca>
 8000a5c:	210c      	movs	r1, #12
 8000a5e:	4aac      	ldr	r2, [pc, #688]	@ (8000d10 <.text_45>)
 8000a60:	18b2      	adds	r2, r6, r2
 8000a62:	7091      	strb	r1, [r2, #2]
 8000a64:	6971      	ldr	r1, [r6, #20]
 8000a66:	4308      	orrs	r0, r1
 8000a68:	6170      	str	r0, [r6, #20]
 8000a6a:	4668      	mov	r0, sp
 8000a6c:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	d027      	beq.n	8000ac2 <USBPD_PE_SendExtendedMessage+0xe6>
 8000a72:	9401      	str	r4, [sp, #4]
 8000a74:	4668      	mov	r0, sp
 8000a76:	7b00      	ldrb	r0, [r0, #12]
 8000a78:	f000 fa98 	bl	8000fac <PE_Get_UnchunkedSupport>
 8000a7c:	2801      	cmp	r0, #1
 8000a7e:	d101      	bne.n	8000a84 <USBPD_PE_SendExtendedMessage+0xa8>
 8000a80:	2004      	movs	r0, #4
 8000a82:	9001      	str	r0, [sp, #4]
 8000a84:	9702      	str	r7, [sp, #8]
 8000a86:	9801      	ldr	r0, [sp, #4]
 8000a88:	4669      	mov	r1, sp
 8000a8a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8000a8c:	4fa1      	ldr	r7, [pc, #644]	@ (8000d14 <.text_46>)
 8000a8e:	e012      	b.n	8000ab6 <USBPD_PE_SendExtendedMessage+0xda>
 8000a90:	210d      	movs	r1, #13
 8000a92:	e7e4      	b.n	8000a5e <USBPD_PE_SendExtendedMessage+0x82>
 8000a94:	210e      	movs	r1, #14
 8000a96:	e7e2      	b.n	8000a5e <USBPD_PE_SendExtendedMessage+0x82>
 8000a98:	205b      	movs	r0, #91	@ 0x5b
 8000a9a:	499d      	ldr	r1, [pc, #628]	@ (8000d10 <.text_45>)
 8000a9c:	1871      	adds	r1, r6, r1
 8000a9e:	7088      	strb	r0, [r1, #2]
 8000aa0:	e7e3      	b.n	8000a6a <USBPD_PE_SendExtendedMessage+0x8e>
 8000aa2:	205c      	movs	r0, #92	@ 0x5c
 8000aa4:	e7f9      	b.n	8000a9a <USBPD_PE_SendExtendedMessage+0xbe>
 8000aa6:	2510      	movs	r5, #16
 8000aa8:	e01e      	b.n	8000ae8 <USBPD_PE_SendExtendedMessage+0x10c>
 8000aaa:	9a02      	ldr	r2, [sp, #8]
 8000aac:	5d12      	ldrb	r2, [r2, r4]
 8000aae:	1823      	adds	r3, r4, r0
 8000ab0:	18f3      	adds	r3, r6, r3
 8000ab2:	55da      	strb	r2, [r3, r7]
 8000ab4:	1c64      	adds	r4, r4, #1
 8000ab6:	428c      	cmp	r4, r1
 8000ab8:	d3f7      	bcc.n	8000aaa <USBPD_PE_SendExtendedMessage+0xce>
 8000aba:	2092      	movs	r0, #146	@ 0x92
 8000abc:	00c0      	lsls	r0, r0, #3
 8000abe:	5231      	strh	r1, [r6, r0]
 8000ac0:	e002      	b.n	8000ac8 <USBPD_PE_SendExtendedMessage+0xec>
 8000ac2:	2092      	movs	r0, #146	@ 0x92
 8000ac4:	00c0      	lsls	r0, r0, #3
 8000ac6:	5234      	strh	r4, [r6, r0]
 8000ac8:	4668      	mov	r0, sp
 8000aca:	7c00      	ldrb	r0, [r0, #16]
 8000acc:	2133      	movs	r1, #51	@ 0x33
 8000ace:	5470      	strb	r0, [r6, r1]
 8000ad0:	4668      	mov	r0, sp
 8000ad2:	7800      	ldrb	r0, [r0, #0]
 8000ad4:	498e      	ldr	r1, [pc, #568]	@ (8000d10 <.text_45>)
 8000ad6:	5470      	strb	r0, [r6, r1]
 8000ad8:	2031      	movs	r0, #49	@ 0x31
 8000ada:	2132      	movs	r1, #50	@ 0x32
 8000adc:	5470      	strb	r0, [r6, r1]
 8000ade:	4668      	mov	r0, sp
 8000ae0:	7b00      	ldrb	r0, [r0, #12]
 8000ae2:	68b1      	ldr	r1, [r6, #8]
 8000ae4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000ae6:	4788      	blx	r1
 8000ae8:	0028      	movs	r0, r5
 8000aea:	b005      	add	sp, #20
 8000aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000af0 <.text_30>:
 8000af0:	0000025e 	.word	0x0000025e

08000af4 <PE_Send_RESET>:
 8000af4:	b538      	push	{r3, r4, r5, lr}
 8000af6:	0005      	movs	r5, r0
 8000af8:	000c      	movs	r4, r1
 8000afa:	2c05      	cmp	r4, #5
 8000afc:	d101      	bne.n	8000b02 <PE_Send_RESET+0xe>
 8000afe:	211f      	movs	r1, #31
 8000b00:	e000      	b.n	8000b04 <PE_Send_RESET+0x10>
 8000b02:	215e      	movs	r1, #94	@ 0x5e
 8000b04:	7c28      	ldrb	r0, [r5, #16]
 8000b06:	f7ff fdef 	bl	80006e8 <USBPD_PE_Notification>
 8000b0a:	0021      	movs	r1, r4
 8000b0c:	7c28      	ldrb	r0, [r5, #16]
 8000b0e:	f005 f9ab 	bl	8005e68 <USBPD_PRL_ResetRequestProcess>
 8000b12:	f3ef 8010 	mrs	r0, PRIMASK
 8000b16:	b672      	cpsid	i
 8000b18:	2100      	movs	r1, #0
 8000b1a:	223c      	movs	r2, #60	@ 0x3c
 8000b1c:	54a9      	strb	r1, [r5, r2]
 8000b1e:	f380 8810 	msr	PRIMASK, r0
 8000b22:	bd31      	pop	{r0, r4, r5, pc}

08000b24 <PE_Get_SpecRevision>:
 8000b24:	4965      	ldr	r1, [pc, #404]	@ (8000cbc <.text_43>)
 8000b26:	0080      	lsls	r0, r0, #2
 8000b28:	5808      	ldr	r0, [r1, r0]
 8000b2a:	6840      	ldr	r0, [r0, #4]
 8000b2c:	7800      	ldrb	r0, [r0, #0]
 8000b2e:	0780      	lsls	r0, r0, #30
 8000b30:	0f80      	lsrs	r0, r0, #30
 8000b32:	4770      	bx	lr

08000b34 <PE_ChangePowerRole>:
 8000b34:	b538      	push	{r3, r4, r5, lr}
 8000b36:	6842      	ldr	r2, [r0, #4]
 8000b38:	6813      	ldr	r3, [r2, #0]
 8000b3a:	2404      	movs	r4, #4
 8000b3c:	43a3      	bics	r3, r4
 8000b3e:	008c      	lsls	r4, r1, #2
 8000b40:	2504      	movs	r5, #4
 8000b42:	402c      	ands	r4, r5
 8000b44:	431c      	orrs	r4, r3
 8000b46:	6014      	str	r4, [r2, #0]
 8000b48:	7c00      	ldrb	r0, [r0, #16]
 8000b4a:	f004 ff0a 	bl	8005962 <USBPD_PRL_SetHeaderPowerRole>
 8000b4e:	bd31      	pop	{r0, r4, r5, pc}

08000b50 <PE_Get_RxEvent>:
 8000b50:	b530      	push	{r4, r5, lr}
 8000b52:	0001      	movs	r1, r0
 8000b54:	2014      	movs	r0, #20
 8000b56:	f3ef 8210 	mrs	r2, PRIMASK
 8000b5a:	b672      	cpsid	i
 8000b5c:	233c      	movs	r3, #60	@ 0x3c
 8000b5e:	5ccc      	ldrb	r4, [r1, r3]
 8000b60:	2c00      	cmp	r4, #0
 8000b62:	d029      	beq.n	8000bb8 <PE_Get_RxEvent+0x68>
 8000b64:	2393      	movs	r3, #147	@ 0x93
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	18cb      	adds	r3, r1, r3
 8000b6a:	5d1d      	ldrb	r5, [r3, r4]
 8000b6c:	066d      	lsls	r5, r5, #25
 8000b6e:	d401      	bmi.n	8000b74 <PE_Get_RxEvent+0x24>
 8000b70:	2003      	movs	r0, #3
 8000b72:	e021      	b.n	8000bb8 <PE_Get_RxEvent+0x68>
 8000b74:	2584      	movs	r5, #132	@ 0x84
 8000b76:	006d      	lsls	r5, r5, #1
 8000b78:	436c      	muls	r4, r5
 8000b7a:	190c      	adds	r4, r1, r4
 8000b7c:	3ccb      	subs	r4, #203	@ 0xcb
 8000b7e:	638c      	str	r4, [r1, #56]	@ 0x38
 8000b80:	7825      	ldrb	r5, [r4, #0]
 8000b82:	7864      	ldrb	r4, [r4, #1]
 8000b84:	0224      	lsls	r4, r4, #8
 8000b86:	192c      	adds	r4, r5, r4
 8000b88:	868c      	strh	r4, [r1, #52]	@ 0x34
 8000b8a:	000c      	movs	r4, r1
 8000b8c:	3430      	adds	r4, #48	@ 0x30
 8000b8e:	253c      	movs	r5, #60	@ 0x3c
 8000b90:	5d49      	ldrb	r1, [r1, r5]
 8000b92:	5c59      	ldrb	r1, [r3, r1]
 8000b94:	06c9      	lsls	r1, r1, #27
 8000b96:	0ec9      	lsrs	r1, r1, #27
 8000b98:	2901      	cmp	r1, #1
 8000b9a:	d004      	beq.n	8000ba6 <PE_Get_RxEvent+0x56>
 8000b9c:	2902      	cmp	r1, #2
 8000b9e:	d005      	beq.n	8000bac <PE_Get_RxEvent+0x5c>
 8000ba0:	2904      	cmp	r1, #4
 8000ba2:	d006      	beq.n	8000bb2 <PE_Get_RxEvent+0x62>
 8000ba4:	e008      	b.n	8000bb8 <PE_Get_RxEvent+0x68>
 8000ba6:	2011      	movs	r0, #17
 8000ba8:	2100      	movs	r1, #0
 8000baa:	e004      	b.n	8000bb6 <PE_Get_RxEvent+0x66>
 8000bac:	2012      	movs	r0, #18
 8000bae:	2101      	movs	r1, #1
 8000bb0:	e001      	b.n	8000bb6 <PE_Get_RxEvent+0x66>
 8000bb2:	2013      	movs	r0, #19
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	7021      	strb	r1, [r4, #0]
 8000bb8:	f382 8810 	msr	PRIMASK, r2
 8000bbc:	bd30      	pop	{r4, r5, pc}

08000bbe <PE_Clear_RxEvent>:
 8000bbe:	b510      	push	{r4, lr}
 8000bc0:	0001      	movs	r1, r0
 8000bc2:	f3ef 8010 	mrs	r0, PRIMASK
 8000bc6:	b672      	cpsid	i
 8000bc8:	223c      	movs	r2, #60	@ 0x3c
 8000bca:	5c8a      	ldrb	r2, [r1, r2]
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d014      	beq.n	8000bfa <PE_Clear_RxEvent+0x3c>
 8000bd0:	1e53      	subs	r3, r2, #1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4acb      	ldr	r2, [pc, #812]	@ (8000f04 <.text_56>)
 8000bd6:	188c      	adds	r4, r1, r2
 8000bd8:	2200      	movs	r2, #0
 8000bda:	54e2      	strb	r2, [r4, r3]
 8000bdc:	1e5b      	subs	r3, r3, #1
 8000bde:	419b      	sbcs	r3, r3
 8000be0:	0fdb      	lsrs	r3, r3, #31
 8000be2:	5ce4      	ldrb	r4, [r4, r3]
 8000be4:	0664      	lsls	r4, r4, #25
 8000be6:	d506      	bpl.n	8000bf6 <PE_Clear_RxEvent+0x38>
 8000be8:	1c5b      	adds	r3, r3, #1
 8000bea:	223c      	movs	r2, #60	@ 0x3c
 8000bec:	548b      	strb	r3, [r1, r2]
 8000bee:	f380 8810 	msr	PRIMASK, r0
 8000bf2:	7c08      	ldrb	r0, [r1, #16]
 8000bf4:	e168      	b.n	8000ec8 <.text_54>
 8000bf6:	233c      	movs	r3, #60	@ 0x3c
 8000bf8:	54ca      	strb	r2, [r1, r3]
 8000bfa:	f380 8810 	msr	PRIMASK, r0
 8000bfe:	bd10      	pop	{r4, pc}

08000c00 <.text_36>:
 8000c00:	00000302 	.word	0x00000302

08000c04 <.text_37>:
 8000c04:	00000703 	.word	0x00000703

08000c08 <PE_PRL_Control_RxEvent>:
 8000c08:	492c      	ldr	r1, [pc, #176]	@ (8000cbc <.text_43>)
 8000c0a:	0080      	lsls	r0, r0, #2
 8000c0c:	580a      	ldr	r2, [r1, r0]
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f3ef 8110 	mrs	r1, PRIMASK
 8000c14:	b672      	cpsid	i
 8000c16:	233c      	movs	r3, #60	@ 0x3c
 8000c18:	5cd2      	ldrb	r2, [r2, r3]
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d000      	beq.n	8000c20 <PE_PRL_Control_RxEvent+0x18>
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f381 8810 	msr	PRIMASK, r1
 8000c24:	4770      	bx	lr
	...

08000c28 <.text_39>:
 8000c28:	0000025f 	.word	0x0000025f

08000c2c <.text_40>:
 8000c2c:	00000704 	.word	0x00000704

08000c30 <PE_Convert_SOPRxEvent>:
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d003      	beq.n	8000c3c <PE_Convert_SOPRxEvent+0xc>
 8000c34:	2802      	cmp	r0, #2
 8000c36:	d005      	beq.n	8000c44 <PE_Convert_SOPRxEvent+0x14>
 8000c38:	d302      	bcc.n	8000c40 <PE_Convert_SOPRxEvent+0x10>
 8000c3a:	e005      	b.n	8000c48 <PE_Convert_SOPRxEvent+0x18>
 8000c3c:	2011      	movs	r0, #17
 8000c3e:	4770      	bx	lr
 8000c40:	2012      	movs	r0, #18
 8000c42:	4770      	bx	lr
 8000c44:	2013      	movs	r0, #19
 8000c46:	4770      	bx	lr
 8000c48:	2014      	movs	r0, #20
 8000c4a:	4770      	bx	lr

08000c4c <PE_Check_AMSConflict>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	0005      	movs	r5, r0
 8000c50:	2400      	movs	r4, #0
 8000c52:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8000c54:	49b7      	ldr	r1, [pc, #732]	@ (8000f34 <.text_58>)
 8000c56:	4001      	ands	r1, r0
 8000c58:	290d      	cmp	r1, #13
 8000c5a:	d101      	bne.n	8000c60 <PE_Check_AMSConflict+0x14>
 8000c5c:	2010      	movs	r0, #16
 8000c5e:	e01b      	b.n	8000c98 <PE_Check_AMSConflict+0x4c>
 8000c60:	2603      	movs	r6, #3
 8000c62:	200f      	movs	r0, #15
 8000c64:	7f29      	ldrb	r1, [r5, #28]
 8000c66:	2900      	cmp	r1, #0
 8000c68:	d011      	beq.n	8000c8e <PE_Check_AMSConflict+0x42>
 8000c6a:	1e49      	subs	r1, r1, #1
 8000c6c:	2901      	cmp	r1, #1
 8000c6e:	d912      	bls.n	8000c96 <PE_Check_AMSConflict+0x4a>
 8000c70:	1e89      	subs	r1, r1, #2
 8000c72:	d011      	beq.n	8000c98 <PE_Check_AMSConflict+0x4c>
 8000c74:	1e49      	subs	r1, r1, #1
 8000c76:	d01d      	beq.n	8000cb4 <PE_Check_AMSConflict+0x68>
 8000c78:	1e49      	subs	r1, r1, #1
 8000c7a:	2909      	cmp	r1, #9
 8000c7c:	d90b      	bls.n	8000c96 <PE_Check_AMSConflict+0x4a>
 8000c7e:	390b      	subs	r1, #11
 8000c80:	2901      	cmp	r1, #1
 8000c82:	d908      	bls.n	8000c96 <PE_Check_AMSConflict+0x4a>
 8000c84:	1e89      	subs	r1, r1, #2
 8000c86:	d004      	beq.n	8000c92 <PE_Check_AMSConflict+0x46>
 8000c88:	394d      	subs	r1, #77	@ 0x4d
 8000c8a:	d004      	beq.n	8000c96 <PE_Check_AMSConflict+0x4a>
 8000c8c:	e006      	b.n	8000c9c <PE_Check_AMSConflict+0x50>
 8000c8e:	746e      	strb	r6, [r5, #17]
 8000c90:	e011      	b.n	8000cb6 <PE_Check_AMSConflict+0x6a>
 8000c92:	7468      	strb	r0, [r5, #17]
 8000c94:	e00f      	b.n	8000cb6 <PE_Check_AMSConflict+0x6a>
 8000c96:	2011      	movs	r0, #17
 8000c98:	7468      	strb	r0, [r5, #17]
 8000c9a:	e00b      	b.n	8000cb4 <PE_Check_AMSConflict+0x68>
 8000c9c:	215c      	movs	r1, #92	@ 0x5c
 8000c9e:	7c28      	ldrb	r0, [r5, #16]
 8000ca0:	f7ff fd22 	bl	80006e8 <USBPD_PE_Notification>
 8000ca4:	746e      	strb	r6, [r5, #17]
 8000ca6:	6868      	ldr	r0, [r5, #4]
 8000ca8:	6800      	ldr	r0, [r0, #0]
 8000caa:	49c4      	ldr	r1, [pc, #784]	@ (8000fbc <.text_62>)
 8000cac:	4001      	ands	r1, r0
 8000cae:	0230      	lsls	r0, r6, #8
 8000cb0:	4281      	cmp	r1, r0
 8000cb2:	d000      	beq.n	8000cb6 <PE_Check_AMSConflict+0x6a>
 8000cb4:	2415      	movs	r4, #21
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08000cbc <.text_43>:
 8000cbc:	2000027c 	.word	0x2000027c

08000cc0 <PE_PRL_ResetReceived>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	0004      	movs	r4, r0
 8000cc4:	48be      	ldr	r0, [pc, #760]	@ (8000fc0 <.text_63>)
 8000cc6:	00a2      	lsls	r2, r4, #2
 8000cc8:	5885      	ldr	r5, [r0, r2]
 8000cca:	2905      	cmp	r1, #5
 8000ccc:	d115      	bne.n	8000cfa <PE_PRL_ResetReceived+0x3a>
 8000cce:	6868      	ldr	r0, [r5, #4]
 8000cd0:	6801      	ldr	r1, [r0, #0]
 8000cd2:	2210      	movs	r2, #16
 8000cd4:	4391      	bics	r1, r2
 8000cd6:	6001      	str	r1, [r0, #0]
 8000cd8:	6968      	ldr	r0, [r5, #20]
 8000cda:	49ba      	ldr	r1, [pc, #744]	@ (8000fc4 <.text_64>)
 8000cdc:	4001      	ands	r1, r0
 8000cde:	0150      	lsls	r0, r2, #5
 8000ce0:	4308      	orrs	r0, r1
 8000ce2:	6168      	str	r0, [r5, #20]
 8000ce4:	2014      	movs	r0, #20
 8000ce6:	2132      	movs	r1, #50	@ 0x32
 8000ce8:	5468      	strb	r0, [r5, r1]
 8000cea:	2000      	movs	r0, #0
 8000cec:	213c      	movs	r1, #60	@ 0x3c
 8000cee:	5468      	strb	r0, [r5, r1]
 8000cf0:	211e      	movs	r1, #30
 8000cf2:	7c28      	ldrb	r0, [r5, #16]
 8000cf4:	f7ff fcf8 	bl	80006e8 <USBPD_PE_Notification>
 8000cf8:	e004      	b.n	8000d04 <PE_PRL_ResetReceived+0x44>
 8000cfa:	6968      	ldr	r0, [r5, #20]
 8000cfc:	2180      	movs	r1, #128	@ 0x80
 8000cfe:	02c9      	lsls	r1, r1, #11
 8000d00:	4301      	orrs	r1, r0
 8000d02:	6169      	str	r1, [r5, #20]
 8000d04:	0020      	movs	r0, r4
 8000d06:	68a9      	ldr	r1, [r5, #8]
 8000d08:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000d0a:	4788      	blx	r1
 8000d0c:	bd31      	pop	{r0, r4, r5, pc}
	...

08000d10 <.text_45>:
 8000d10:	0000025d 	.word	0x0000025d

08000d14 <.text_46>:
 8000d14:	00000385 	.word	0x00000385

08000d18 <PE_PRL_BistCompleted>:
 8000d18:	4770      	bx	lr

08000d1a <PE_Reset_HardReset>:
 8000d1a:	b538      	push	{r3, r4, r5, lr}
 8000d1c:	0004      	movs	r4, r0
 8000d1e:	2032      	movs	r0, #50	@ 0x32
 8000d20:	5c20      	ldrb	r0, [r4, r0]
 8000d22:	2800      	cmp	r0, #0
 8000d24:	d003      	beq.n	8000d2e <PE_Reset_HardReset+0x14>
 8000d26:	215b      	movs	r1, #91	@ 0x5b
 8000d28:	7c20      	ldrb	r0, [r4, #16]
 8000d2a:	f7ff fcdd 	bl	80006e8 <USBPD_PE_Notification>
 8000d2e:	0020      	movs	r0, r4
 8000d30:	f000 f82c 	bl	8000d8c <PE_Reset_ZI>
 8000d34:	2503      	movs	r5, #3
 8000d36:	6820      	ldr	r0, [r4, #0]
 8000d38:	6843      	ldr	r3, [r0, #4]
 8000d3a:	402b      	ands	r3, r5
 8000d3c:	7c20      	ldrb	r0, [r4, #16]
 8000d3e:	6861      	ldr	r1, [r4, #4]
 8000d40:	6809      	ldr	r1, [r1, #0]
 8000d42:	074a      	lsls	r2, r1, #29
 8000d44:	0fd2      	lsrs	r2, r2, #31
 8000d46:	d008      	beq.n	8000d5a <PE_Reset_HardReset+0x40>
 8000d48:	2101      	movs	r1, #1
 8000d4a:	f004 fdee 	bl	800592a <USBPD_PRL_SetHeader>
 8000d4e:	6860      	ldr	r0, [r4, #4]
 8000d50:	6801      	ldr	r1, [r0, #0]
 8000d52:	2208      	movs	r2, #8
 8000d54:	430a      	orrs	r2, r1
 8000d56:	6002      	str	r2, [r0, #0]
 8000d58:	e007      	b.n	8000d6a <PE_Reset_HardReset+0x50>
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	f004 fde5 	bl	800592a <USBPD_PRL_SetHeader>
 8000d60:	6860      	ldr	r0, [r4, #4]
 8000d62:	6801      	ldr	r1, [r0, #0]
 8000d64:	2208      	movs	r2, #8
 8000d66:	4391      	bics	r1, r2
 8000d68:	6001      	str	r1, [r0, #0]
 8000d6a:	6820      	ldr	r0, [r4, #0]
 8000d6c:	6840      	ldr	r0, [r0, #4]
 8000d6e:	4005      	ands	r5, r0
 8000d70:	6860      	ldr	r0, [r4, #4]
 8000d72:	6801      	ldr	r1, [r0, #0]
 8000d74:	2203      	movs	r2, #3
 8000d76:	4391      	bics	r1, r2
 8000d78:	430d      	orrs	r5, r1
 8000d7a:	6005      	str	r5, [r0, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	7c20      	ldrb	r0, [r4, #16]
 8000d80:	f004 fe44 	bl	8005a0c <USBPD_PRL_SOPCapability>
 8000d84:	7c20      	ldrb	r0, [r4, #16]
 8000d86:	f005 f8ad 	bl	8005ee4 <USBPD_PRL_Reset>
 8000d8a:	bd31      	pop	{r0, r4, r5, pc}

08000d8c <PE_Reset_ZI>:
 8000d8c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8000d8e:	0004      	movs	r4, r0
 8000d90:	2000      	movs	r0, #0
 8000d92:	9001      	str	r0, [sp, #4]
 8000d94:	6860      	ldr	r0, [r4, #4]
 8000d96:	6801      	ldr	r1, [r0, #0]
 8000d98:	2210      	movs	r2, #16
 8000d9a:	4391      	bics	r1, r2
 8000d9c:	6001      	str	r1, [r0, #0]
 8000d9e:	2100      	movs	r1, #0
 8000da0:	0020      	movs	r0, r4
 8000da2:	f000 fc34 	bl	800160e <PE_SetPowerNegotiation>
 8000da6:	2193      	movs	r1, #147	@ 0x93
 8000da8:	0089      	lsls	r1, r1, #2
 8000daa:	0020      	movs	r0, r4
 8000dac:	3014      	adds	r0, #20
 8000dae:	f01e f88e 	bl	801eece <__aeabi_memclr>
 8000db2:	2304      	movs	r3, #4
 8000db4:	aa01      	add	r2, sp, #4
 8000db6:	2102      	movs	r1, #2
 8000db8:	7c20      	ldrb	r0, [r4, #16]
 8000dba:	68a5      	ldr	r5, [r4, #8]
 8000dbc:	69ad      	ldr	r5, [r5, #24]
 8000dbe:	47a8      	blx	r5
 8000dc0:	2080      	movs	r0, #128	@ 0x80
 8000dc2:	0440      	lsls	r0, r0, #17
 8000dc4:	9000      	str	r0, [sp, #0]
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	466a      	mov	r2, sp
 8000dca:	2106      	movs	r1, #6
 8000dcc:	7c20      	ldrb	r0, [r4, #16]
 8000dce:	68a5      	ldr	r5, [r4, #8]
 8000dd0:	69ad      	ldr	r5, [r5, #24]
 8000dd2:	47a8      	blx	r5
 8000dd4:	2503      	movs	r5, #3
 8000dd6:	6820      	ldr	r0, [r4, #0]
 8000dd8:	6841      	ldr	r1, [r0, #4]
 8000dda:	4029      	ands	r1, r5
 8000ddc:	7c20      	ldrb	r0, [r4, #16]
 8000dde:	f004 fde2 	bl	80059a6 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000de2:	6820      	ldr	r0, [r4, #0]
 8000de4:	6840      	ldr	r0, [r0, #4]
 8000de6:	4005      	ands	r5, r0
 8000de8:	6860      	ldr	r0, [r4, #4]
 8000dea:	6801      	ldr	r1, [r0, #0]
 8000dec:	4a76      	ldr	r2, [pc, #472]	@ (8000fc8 <.text_65>)
 8000dee:	400a      	ands	r2, r1
 8000df0:	06a9      	lsls	r1, r5, #26
 8000df2:	4311      	orrs	r1, r2
 8000df4:	6001      	str	r1, [r0, #0]
 8000df6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000df8 <PE_Reset_Counter>:
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	2298      	movs	r2, #152	@ 0x98
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	1880      	adds	r0, r0, r2
 8000e02:	f01e f864 	bl	801eece <__aeabi_memclr>
 8000e06:	bd01      	pop	{r0, pc}

08000e08 <PE_Reset_StateMachine>:
 8000e08:	b538      	push	{r3, r4, r5, lr}
 8000e0a:	0004      	movs	r4, r0
 8000e0c:	2032      	movs	r0, #50	@ 0x32
 8000e0e:	5c20      	ldrb	r0, [r4, r0]
 8000e10:	2800      	cmp	r0, #0
 8000e12:	d003      	beq.n	8000e1c <PE_Reset_StateMachine+0x14>
 8000e14:	215b      	movs	r1, #91	@ 0x5b
 8000e16:	7c20      	ldrb	r0, [r4, #16]
 8000e18:	f7ff fc66 	bl	80006e8 <USBPD_PE_Notification>
 8000e1c:	0020      	movs	r0, r4
 8000e1e:	f7ff ffb5 	bl	8000d8c <PE_Reset_ZI>
 8000e22:	2101      	movs	r1, #1
 8000e24:	0020      	movs	r0, r4
 8000e26:	f000 fbf2 	bl	800160e <PE_SetPowerNegotiation>
 8000e2a:	7c20      	ldrb	r0, [r4, #16]
 8000e2c:	f005 f85a 	bl	8005ee4 <USBPD_PRL_Reset>
 8000e30:	6860      	ldr	r0, [r4, #4]
 8000e32:	6801      	ldr	r1, [r0, #0]
 8000e34:	2501      	movs	r5, #1
 8000e36:	08ca      	lsrs	r2, r1, #3
 8000e38:	402a      	ands	r2, r5
 8000e3a:	078b      	lsls	r3, r1, #30
 8000e3c:	0f9b      	lsrs	r3, r3, #30
 8000e3e:	7c20      	ldrb	r0, [r4, #16]
 8000e40:	0889      	lsrs	r1, r1, #2
 8000e42:	400d      	ands	r5, r1
 8000e44:	d004      	beq.n	8000e50 <PE_Reset_StateMachine+0x48>
 8000e46:	2101      	movs	r1, #1
 8000e48:	f004 fd6f 	bl	800592a <USBPD_PRL_SetHeader>
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	e003      	b.n	8000e58 <PE_Reset_StateMachine+0x50>
 8000e50:	2100      	movs	r1, #0
 8000e52:	f004 fd6a 	bl	800592a <USBPD_PRL_SetHeader>
 8000e56:	203e      	movs	r0, #62	@ 0x3e
 8000e58:	7460      	strb	r0, [r4, #17]
 8000e5a:	bd31      	pop	{r0, r4, r5, pc}

08000e5c <PE_ExtRevisionInteroperability>:
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	000a      	movs	r2, r1
 8000e60:	4957      	ldr	r1, [pc, #348]	@ (8000fc0 <.text_63>)
 8000e62:	0083      	lsls	r3, r0, #2
 8000e64:	58cb      	ldr	r3, [r1, r3]
 8000e66:	685c      	ldr	r4, [r3, #4]
 8000e68:	6825      	ldr	r5, [r4, #0]
 8000e6a:	2103      	movs	r1, #3
 8000e6c:	2603      	movs	r6, #3
 8000e6e:	402e      	ands	r6, r5
 8000e70:	42b2      	cmp	r2, r6
 8000e72:	db00      	blt.n	8000e76 <PE_ExtRevisionInteroperability+0x1a>
 8000e74:	0032      	movs	r2, r6
 8000e76:	438d      	bics	r5, r1
 8000e78:	400a      	ands	r2, r1
 8000e7a:	432a      	orrs	r2, r5
 8000e7c:	6022      	str	r2, [r4, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	6814      	ldr	r4, [r2, #0]
 8000e82:	2503      	movs	r5, #3
 8000e84:	4025      	ands	r5, r4
 8000e86:	2d01      	cmp	r5, #1
 8000e88:	d101      	bne.n	8000e8e <PE_ExtRevisionInteroperability+0x32>
 8000e8a:	2500      	movs	r5, #0
 8000e8c:	e000      	b.n	8000e90 <PE_ExtRevisionInteroperability+0x34>
 8000e8e:	2520      	movs	r5, #32
 8000e90:	2620      	movs	r6, #32
 8000e92:	43b4      	bics	r4, r6
 8000e94:	4325      	orrs	r5, r4
 8000e96:	6015      	str	r5, [r2, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	6812      	ldr	r2, [r2, #0]
 8000e9c:	4011      	ands	r1, r2
 8000e9e:	f004 fd76 	bl	800598e <USBPD_PRL_SetHeaderSpecification>
 8000ea2:	bd70      	pop	{r4, r5, r6, pc}

08000ea4 <PE_PRL_FastRoleSwapReception>:
 8000ea4:	4946      	ldr	r1, [pc, #280]	@ (8000fc0 <.text_63>)
 8000ea6:	0082      	lsls	r2, r0, #2
 8000ea8:	5889      	ldr	r1, [r1, r2]
 8000eaa:	7f0a      	ldrb	r2, [r1, #28]
 8000eac:	2a09      	cmp	r2, #9
 8000eae:	d100      	bne.n	8000eb2 <PE_PRL_FastRoleSwapReception+0xe>
 8000eb0:	4770      	bx	lr
 8000eb2:	b510      	push	{r4, lr}
 8000eb4:	684a      	ldr	r2, [r1, #4]
 8000eb6:	6813      	ldr	r3, [r2, #0]
 8000eb8:	2410      	movs	r4, #16
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	6014      	str	r4, [r2, #0]
 8000ebe:	694a      	ldr	r2, [r1, #20]
 8000ec0:	2380      	movs	r3, #128	@ 0x80
 8000ec2:	029b      	lsls	r3, r3, #10
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	614b      	str	r3, [r1, #20]

08000ec8 <.text_54>:
 8000ec8:	6889      	ldr	r1, [r1, #8]
 8000eca:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000ecc:	4788      	blx	r1
 8000ece:	bd10      	pop	{r4, pc}

08000ed0 <PE_PRL_PostReceiveEvent>:
 8000ed0:	b530      	push	{r4, r5, lr}
 8000ed2:	4a3b      	ldr	r2, [pc, #236]	@ (8000fc0 <.text_63>)
 8000ed4:	0080      	lsls	r0, r0, #2
 8000ed6:	5813      	ldr	r3, [r2, r0]
 8000ed8:	2400      	movs	r4, #0
 8000eda:	2000      	movs	r0, #0
 8000edc:	191a      	adds	r2, r3, r4
 8000ede:	4d09      	ldr	r5, [pc, #36]	@ (8000f04 <.text_56>)
 8000ee0:	1952      	adds	r2, r2, r5
 8000ee2:	7815      	ldrb	r5, [r2, #0]
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d004      	beq.n	8000ef2 <PE_PRL_PostReceiveEvent+0x22>
 8000ee8:	1c64      	adds	r4, r4, #1
 8000eea:	b2e4      	uxtb	r4, r4
 8000eec:	2c01      	cmp	r4, #1
 8000eee:	d9f5      	bls.n	8000edc <PE_PRL_PostReceiveEvent+0xc>
 8000ef0:	bd30      	pop	{r4, r5, pc}
 8000ef2:	2020      	movs	r0, #32
 8000ef4:	7010      	strb	r0, [r2, #0]
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	7813      	ldrb	r3, [r2, #0]
 8000efa:	2401      	movs	r4, #1
 8000efc:	408c      	lsls	r4, r1
 8000efe:	431c      	orrs	r4, r3
 8000f00:	7014      	strb	r4, [r2, #0]
 8000f02:	bd30      	pop	{r4, r5, pc}

08000f04 <.text_56>:
 8000f04:	0000024d 	.word	0x0000024d

08000f08 <PE_PRL_PostReceiveEventError>:
 8000f08:	b530      	push	{r4, r5, lr}
 8000f0a:	492d      	ldr	r1, [pc, #180]	@ (8000fc0 <.text_63>)
 8000f0c:	0080      	lsls	r0, r0, #2
 8000f0e:	5809      	ldr	r1, [r1, r0]
 8000f10:	2000      	movs	r0, #0
 8000f12:	2200      	movs	r2, #0
 8000f14:	b2d3      	uxtb	r3, r2
 8000f16:	18cb      	adds	r3, r1, r3
 8000f18:	4c2c      	ldr	r4, [pc, #176]	@ (8000fcc <.text_66>)
 8000f1a:	191b      	adds	r3, r3, r4
 8000f1c:	781c      	ldrb	r4, [r3, #0]
 8000f1e:	2560      	movs	r5, #96	@ 0x60
 8000f20:	4025      	ands	r5, r4
 8000f22:	2d20      	cmp	r5, #32
 8000f24:	d004      	beq.n	8000f30 <PE_PRL_PostReceiveEventError+0x28>
 8000f26:	1c52      	adds	r2, r2, #1
 8000f28:	b2d3      	uxtb	r3, r2
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d3f2      	bcc.n	8000f14 <PE_PRL_PostReceiveEventError+0xc>
 8000f2e:	bd30      	pop	{r4, r5, pc}
 8000f30:	7018      	strb	r0, [r3, #0]
 8000f32:	bd30      	pop	{r4, r5, pc}

08000f34 <.text_58>:
 8000f34:	0000f01f 	.word	0x0000f01f

08000f38 <PE_PRL_PostReceiveEventCopy>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	4a21      	ldr	r2, [pc, #132]	@ (8000fc0 <.text_63>)
 8000f3c:	0080      	lsls	r0, r0, #2
 8000f3e:	5813      	ldr	r3, [r2, r0]
 8000f40:	2200      	movs	r2, #0
 8000f42:	b2d0      	uxtb	r0, r2
 8000f44:	181c      	adds	r4, r3, r0
 8000f46:	4d21      	ldr	r5, [pc, #132]	@ (8000fcc <.text_66>)
 8000f48:	5d64      	ldrb	r4, [r4, r5]
 8000f4a:	2560      	movs	r5, #96	@ 0x60
 8000f4c:	4025      	ands	r5, r4
 8000f4e:	2d20      	cmp	r5, #32
 8000f50:	d004      	beq.n	8000f5c <PE_PRL_PostReceiveEventCopy+0x24>
 8000f52:	1c52      	adds	r2, r2, #1
 8000f54:	b2d0      	uxtb	r0, r2
 8000f56:	2802      	cmp	r0, #2
 8000f58:	d3f3      	bcc.n	8000f42 <PE_PRL_PostReceiveEventCopy+0xa>
 8000f5a:	bd31      	pop	{r0, r4, r5, pc}
 8000f5c:	2284      	movs	r2, #132	@ 0x84
 8000f5e:	0052      	lsls	r2, r2, #1
 8000f60:	4350      	muls	r0, r2
 8000f62:	1818      	adds	r0, r3, r0
 8000f64:	303d      	adds	r0, #61	@ 0x3d
 8000f66:	f01d ffa7 	bl	801eeb8 <__aeabi_memcpy>
 8000f6a:	bd31      	pop	{r0, r4, r5, pc}

08000f6c <PE_PRL_PostReceiveEventComplete>:
 8000f6c:	b538      	push	{r3, r4, r5, lr}
 8000f6e:	4914      	ldr	r1, [pc, #80]	@ (8000fc0 <.text_63>)
 8000f70:	0082      	lsls	r2, r0, #2
 8000f72:	5889      	ldr	r1, [r1, r2]
 8000f74:	2300      	movs	r3, #0
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	18cb      	adds	r3, r1, r3
 8000f7a:	4c14      	ldr	r4, [pc, #80]	@ (8000fcc <.text_66>)
 8000f7c:	191b      	adds	r3, r3, r4
 8000f7e:	781c      	ldrb	r4, [r3, #0]
 8000f80:	2560      	movs	r5, #96	@ 0x60
 8000f82:	4025      	ands	r5, r4
 8000f84:	2d20      	cmp	r5, #32
 8000f86:	d003      	beq.n	8000f90 <PE_PRL_PostReceiveEventComplete+0x24>
 8000f88:	b2d3      	uxtb	r3, r2
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d3f3      	bcc.n	8000f76 <PE_PRL_PostReceiveEventComplete+0xa>
 8000f8e:	bd31      	pop	{r0, r4, r5, pc}
 8000f90:	781c      	ldrb	r4, [r3, #0]
 8000f92:	2540      	movs	r5, #64	@ 0x40
 8000f94:	4325      	orrs	r5, r4
 8000f96:	701d      	strb	r5, [r3, #0]
 8000f98:	233c      	movs	r3, #60	@ 0x3c
 8000f9a:	5ccb      	ldrb	r3, [r1, r3]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <PE_PRL_PostReceiveEventComplete+0x38>
 8000fa0:	233c      	movs	r3, #60	@ 0x3c
 8000fa2:	54ca      	strb	r2, [r1, r3]
 8000fa4:	6889      	ldr	r1, [r1, #8]
 8000fa6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000fa8:	4788      	blx	r1
 8000faa:	bd31      	pop	{r0, r4, r5, pc}

08000fac <PE_Get_UnchunkedSupport>:
 8000fac:	4904      	ldr	r1, [pc, #16]	@ (8000fc0 <.text_63>)
 8000fae:	0080      	lsls	r0, r0, #2
 8000fb0:	5808      	ldr	r0, [r1, r0]
 8000fb2:	6840      	ldr	r0, [r0, #4]
 8000fb4:	6800      	ldr	r0, [r0, #0]
 8000fb6:	0181      	lsls	r1, r0, #6
 8000fb8:	0fc8      	lsrs	r0, r1, #31
 8000fba:	4770      	bx	lr

08000fbc <.text_62>:
 8000fbc:	00000704 	.word	0x00000704

08000fc0 <.text_63>:
 8000fc0:	2000027c 	.word	0x2000027c

08000fc4 <.text_64>:
 8000fc4:	fffff9ff 	.word	0xfffff9ff

08000fc8 <.text_65>:
 8000fc8:	f3ffffff 	.word	0xf3ffffff

08000fcc <.text_66>:
 8000fcc:	0000024d 	.word	0x0000024d

08000fd0 <PE_SubStateMachine_Generic>:
 8000fd0:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000fd2:	b08d      	sub	sp, #52	@ 0x34
 8000fd4:	0004      	movs	r4, r0
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	9004      	str	r0, [sp, #16]
 8000fda:	2500      	movs	r5, #0
 8000fdc:	9503      	str	r5, [sp, #12]
 8000fde:	2601      	movs	r6, #1
 8000fe0:	2714      	movs	r7, #20
 8000fe2:	7c61      	ldrb	r1, [r4, #17]
 8000fe4:	2901      	cmp	r1, #1
 8000fe6:	d100      	bne.n	8000fea <PE_SubStateMachine_Generic+0x1a>
 8000fe8:	e195      	b.n	8001316 <PE_SubStateMachine_Generic+0x346>
 8000fea:	2918      	cmp	r1, #24
 8000fec:	d03f      	beq.n	800106e <PE_SubStateMachine_Generic+0x9e>
 8000fee:	2919      	cmp	r1, #25
 8000ff0:	d050      	beq.n	8001094 <PE_SubStateMachine_Generic+0xc4>
 8000ff2:	291d      	cmp	r1, #29
 8000ff4:	d100      	bne.n	8000ff8 <PE_SubStateMachine_Generic+0x28>
 8000ff6:	e092      	b.n	800111e <PE_SubStateMachine_Generic+0x14e>
 8000ff8:	2927      	cmp	r1, #39	@ 0x27
 8000ffa:	d100      	bne.n	8000ffe <PE_SubStateMachine_Generic+0x2e>
 8000ffc:	e0b0      	b.n	8001160 <PE_SubStateMachine_Generic+0x190>
 8000ffe:	2928      	cmp	r1, #40	@ 0x28
 8001000:	d100      	bne.n	8001004 <PE_SubStateMachine_Generic+0x34>
 8001002:	e0b9      	b.n	8001178 <PE_SubStateMachine_Generic+0x1a8>
 8001004:	2929      	cmp	r1, #41	@ 0x29
 8001006:	d100      	bne.n	800100a <PE_SubStateMachine_Generic+0x3a>
 8001008:	e0c0      	b.n	800118c <PE_SubStateMachine_Generic+0x1bc>
 800100a:	292c      	cmp	r1, #44	@ 0x2c
 800100c:	d100      	bne.n	8001010 <PE_SubStateMachine_Generic+0x40>
 800100e:	e2bc      	b.n	800158a <PE_SubStateMachine_Generic+0x5ba>
 8001010:	2930      	cmp	r1, #48	@ 0x30
 8001012:	d100      	bne.n	8001016 <PE_SubStateMachine_Generic+0x46>
 8001014:	e1de      	b.n	80013d4 <PE_SubStateMachine_Generic+0x404>
 8001016:	293a      	cmp	r1, #58	@ 0x3a
 8001018:	d100      	bne.n	800101c <PE_SubStateMachine_Generic+0x4c>
 800101a:	e28c      	b.n	8001536 <PE_SubStateMachine_Generic+0x566>
 800101c:	293b      	cmp	r1, #59	@ 0x3b
 800101e:	d100      	bne.n	8001022 <PE_SubStateMachine_Generic+0x52>
 8001020:	e270      	b.n	8001504 <PE_SubStateMachine_Generic+0x534>
 8001022:	293c      	cmp	r1, #60	@ 0x3c
 8001024:	d100      	bne.n	8001028 <PE_SubStateMachine_Generic+0x58>
 8001026:	e247      	b.n	80014b8 <PE_SubStateMachine_Generic+0x4e8>
 8001028:	294b      	cmp	r1, #75	@ 0x4b
 800102a:	d100      	bne.n	800102e <PE_SubStateMachine_Generic+0x5e>
 800102c:	e114      	b.n	8001258 <PE_SubStateMachine_Generic+0x288>
 800102e:	2963      	cmp	r1, #99	@ 0x63
 8001030:	d100      	bne.n	8001034 <PE_SubStateMachine_Generic+0x64>
 8001032:	e178      	b.n	8001326 <PE_SubStateMachine_Generic+0x356>
 8001034:	2964      	cmp	r1, #100	@ 0x64
 8001036:	d100      	bne.n	800103a <PE_SubStateMachine_Generic+0x6a>
 8001038:	e1a0      	b.n	800137c <PE_SubStateMachine_Generic+0x3ac>
 800103a:	2967      	cmp	r1, #103	@ 0x67
 800103c:	d100      	bne.n	8001040 <PE_SubStateMachine_Generic+0x70>
 800103e:	e120      	b.n	8001282 <PE_SubStateMachine_Generic+0x2b2>
 8001040:	2968      	cmp	r1, #104	@ 0x68
 8001042:	d100      	bne.n	8001046 <PE_SubStateMachine_Generic+0x76>
 8001044:	e138      	b.n	80012b8 <PE_SubStateMachine_Generic+0x2e8>
 8001046:	2974      	cmp	r1, #116	@ 0x74
 8001048:	d100      	bne.n	800104c <PE_SubStateMachine_Generic+0x7c>
 800104a:	e1f3      	b.n	8001434 <PE_SubStateMachine_Generic+0x464>
 800104c:	2993      	cmp	r1, #147	@ 0x93
 800104e:	d100      	bne.n	8001052 <PE_SubStateMachine_Generic+0x82>
 8001050:	e0a6      	b.n	80011a0 <PE_SubStateMachine_Generic+0x1d0>
 8001052:	2994      	cmp	r1, #148	@ 0x94
 8001054:	d100      	bne.n	8001058 <PE_SubStateMachine_Generic+0x88>
 8001056:	e0a7      	b.n	80011a8 <PE_SubStateMachine_Generic+0x1d8>
 8001058:	2995      	cmp	r1, #149	@ 0x95
 800105a:	d100      	bne.n	800105e <PE_SubStateMachine_Generic+0x8e>
 800105c:	e0bd      	b.n	80011da <PE_SubStateMachine_Generic+0x20a>
 800105e:	2999      	cmp	r1, #153	@ 0x99
 8001060:	d000      	beq.n	8001064 <PE_SubStateMachine_Generic+0x94>
 8001062:	e297      	b.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 8001064:	2106      	movs	r1, #6
 8001066:	0020      	movs	r0, r4
 8001068:	f7ff fd44 	bl	8000af4 <PE_Send_RESET>
 800106c:	e220      	b.n	80014b0 <PE_SubStateMachine_Generic+0x4e0>
 800106e:	6861      	ldr	r1, [r4, #4]
 8001070:	6809      	ldr	r1, [r1, #0]
 8001072:	0889      	lsrs	r1, r1, #2
 8001074:	400e      	ands	r6, r1
 8001076:	d002      	beq.n	800107e <PE_SubStateMachine_Generic+0xae>
 8001078:	6960      	ldr	r0, [r4, #20]
 800107a:	0741      	lsls	r1, r0, #29
 800107c:	0fc8      	lsrs	r0, r1, #31
 800107e:	9000      	str	r0, [sp, #0]
 8001080:	2319      	movs	r3, #25
 8001082:	2208      	movs	r2, #8
 8001084:	2100      	movs	r1, #0
 8001086:	0020      	movs	r0, r4
 8001088:	f000 fb76 	bl	8001778 <PE_Send_CtrlMessage>
 800108c:	2800      	cmp	r0, #0
 800108e:	d156      	bne.n	800113e <PE_SubStateMachine_Generic+0x16e>
 8001090:	2007      	movs	r0, #7
 8001092:	e107      	b.n	80012a4 <PE_SubStateMachine_Generic+0x2d4>
 8001094:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001096:	7800      	ldrb	r0, [r0, #0]
 8001098:	2811      	cmp	r0, #17
 800109a:	d13c      	bne.n	8001116 <PE_SubStateMachine_Generic+0x146>
 800109c:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800109e:	0bc1      	lsrs	r1, r0, #15
 80010a0:	d11e      	bne.n	80010e0 <PE_SubStateMachine_Generic+0x110>
 80010a2:	0441      	lsls	r1, r0, #17
 80010a4:	0f49      	lsrs	r1, r1, #29
 80010a6:	d01b      	beq.n	80010e0 <PE_SubStateMachine_Generic+0x110>
 80010a8:	06c0      	lsls	r0, r0, #27
 80010aa:	0ec0      	lsrs	r0, r0, #27
 80010ac:	2804      	cmp	r0, #4
 80010ae:	d117      	bne.n	80010e0 <PE_SubStateMachine_Generic+0x110>
 80010b0:	008b      	lsls	r3, r1, #2
 80010b2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80010b4:	1c82      	adds	r2, r0, #2
 80010b6:	2105      	movs	r1, #5
 80010b8:	7c20      	ldrb	r0, [r4, #16]
 80010ba:	68a6      	ldr	r6, [r4, #8]
 80010bc:	69b6      	ldr	r6, [r6, #24]
 80010be:	47b0      	blx	r6
 80010c0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80010c2:	7800      	ldrb	r0, [r0, #0]
 80010c4:	2814      	cmp	r0, #20
 80010c6:	d004      	beq.n	80010d2 <PE_SubStateMachine_Generic+0x102>
 80010c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80010ca:	700f      	strb	r7, [r1, #0]
 80010cc:	0020      	movs	r0, r4
 80010ce:	f7ff fd76 	bl	8000bbe <PE_Clear_RxEvent>
 80010d2:	2003      	movs	r0, #3
 80010d4:	7460      	strb	r0, [r4, #17]
 80010d6:	9504      	str	r5, [sp, #16]
 80010d8:	2107      	movs	r1, #7
 80010da:	7c20      	ldrb	r0, [r4, #16]
 80010dc:	f7ff fb04 	bl	80006e8 <USBPD_PE_Notification>
 80010e0:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80010e2:	21f0      	movs	r1, #240	@ 0xf0
 80010e4:	0209      	lsls	r1, r1, #8
 80010e6:	4001      	ands	r1, r0
 80010e8:	d115      	bne.n	8001116 <PE_SubStateMachine_Generic+0x146>
 80010ea:	06c0      	lsls	r0, r0, #27
 80010ec:	0ec0      	lsrs	r0, r0, #27
 80010ee:	2804      	cmp	r0, #4
 80010f0:	d001      	beq.n	80010f6 <PE_SubStateMachine_Generic+0x126>
 80010f2:	2810      	cmp	r0, #16
 80010f4:	d10f      	bne.n	8001116 <PE_SubStateMachine_Generic+0x146>
 80010f6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80010f8:	7800      	ldrb	r0, [r0, #0]
 80010fa:	2814      	cmp	r0, #20
 80010fc:	d004      	beq.n	8001108 <PE_SubStateMachine_Generic+0x138>
 80010fe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001100:	7007      	strb	r7, [r0, #0]
 8001102:	0020      	movs	r0, r4
 8001104:	f7ff fd5b 	bl	8000bbe <PE_Clear_RxEvent>
 8001108:	2003      	movs	r0, #3
 800110a:	7460      	strb	r0, [r4, #17]
 800110c:	9504      	str	r5, [sp, #16]
 800110e:	2108      	movs	r1, #8
 8001110:	7c20      	ldrb	r0, [r4, #16]
 8001112:	f7ff fae9 	bl	80006e8 <USBPD_PE_Notification>
 8001116:	8be0      	ldrh	r0, [r4, #30]
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	0209      	lsls	r1, r1, #8
 800111c:	e099      	b.n	8001252 <PE_SubStateMachine_Generic+0x282>
 800111e:	9505      	str	r5, [sp, #20]
 8001120:	ab05      	add	r3, sp, #20
 8001122:	aa06      	add	r2, sp, #24
 8001124:	2101      	movs	r1, #1
 8001126:	7c20      	ldrb	r0, [r4, #16]
 8001128:	68a5      	ldr	r5, [r4, #8]
 800112a:	696d      	ldr	r5, [r5, #20]
 800112c:	47a8      	blx	r5
 800112e:	2104      	movs	r1, #4
 8001130:	9805      	ldr	r0, [sp, #20]
 8001132:	f000 fabf 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8001136:	2800      	cmp	r0, #0
 8001138:	d002      	beq.n	8001140 <PE_SubStateMachine_Generic+0x170>
 800113a:	2003      	movs	r0, #3
 800113c:	7460      	strb	r0, [r4, #17]
 800113e:	e22a      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 8001140:	9002      	str	r0, [sp, #8]
 8001142:	2003      	movs	r0, #3
 8001144:	9001      	str	r0, [sp, #4]
 8001146:	9805      	ldr	r0, [sp, #20]
 8001148:	0880      	lsrs	r0, r0, #2
 800114a:	9000      	str	r0, [sp, #0]
 800114c:	ab06      	add	r3, sp, #24
 800114e:	2204      	movs	r2, #4
 8001150:	2100      	movs	r1, #0
 8001152:	0020      	movs	r0, r4
 8001154:	f000 fb3b 	bl	80017ce <PE_Send_DataMessage>
 8001158:	2800      	cmp	r0, #0
 800115a:	d1f0      	bne.n	800113e <PE_SubStateMachine_Generic+0x16e>
 800115c:	210a      	movs	r1, #10
 800115e:	e165      	b.n	800142c <PE_SubStateMachine_Generic+0x45c>
 8001160:	2012      	movs	r0, #18
 8001162:	7720      	strb	r0, [r4, #28]
 8001164:	2105      	movs	r1, #5
 8001166:	7c20      	ldrb	r0, [r4, #16]
 8001168:	f004 feab 	bl	8005ec2 <USBDPD_PRL_BistCarrierEyeMode>
 800116c:	2028      	movs	r0, #40	@ 0x28
 800116e:	7460      	strb	r0, [r4, #17]
 8001170:	484f      	ldr	r0, [pc, #316]	@ (80012b0 <PE_SubStateMachine_Generic+0x2e0>)
 8001172:	83e0      	strh	r0, [r4, #30]
 8001174:	202d      	movs	r0, #45	@ 0x2d
 8001176:	e099      	b.n	80012ac <PE_SubStateMachine_Generic+0x2dc>
 8001178:	8be0      	ldrh	r0, [r4, #30]
 800117a:	03f1      	lsls	r1, r6, #15
 800117c:	4288      	cmp	r0, r1
 800117e:	d10e      	bne.n	800119e <PE_SubStateMachine_Generic+0x1ce>
 8001180:	2105      	movs	r1, #5
 8001182:	7c20      	ldrb	r0, [r4, #16]
 8001184:	f004 fea5 	bl	8005ed2 <USBDPD_PRL_BistCarrierEyeModeExit>
 8001188:	83e5      	strh	r5, [r4, #30]
 800118a:	e191      	b.n	80014b0 <PE_SubStateMachine_Generic+0x4e0>
 800118c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800118e:	7800      	ldrb	r0, [r0, #0]
 8001190:	2814      	cmp	r0, #20
 8001192:	d004      	beq.n	800119e <PE_SubStateMachine_Generic+0x1ce>
 8001194:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001196:	7007      	strb	r7, [r0, #0]
 8001198:	0020      	movs	r0, r4
 800119a:	f7ff fd10 	bl	8000bbe <PE_Clear_RxEvent>
 800119e:	e1fa      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 80011a0:	0020      	movs	r0, r4
 80011a2:	f000 f9fb 	bl	800159c <PE_SubStateMachine_ReceiveDRS>
 80011a6:	e1f6      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 80011a8:	6861      	ldr	r1, [r4, #4]
 80011aa:	6809      	ldr	r1, [r1, #0]
 80011ac:	0889      	lsrs	r1, r1, #2
 80011ae:	400e      	ands	r6, r1
 80011b0:	d002      	beq.n	80011b8 <PE_SubStateMachine_Generic+0x1e8>
 80011b2:	6960      	ldr	r0, [r4, #20]
 80011b4:	0741      	lsls	r1, r0, #29
 80011b6:	0fc8      	lsrs	r0, r1, #31
 80011b8:	9000      	str	r0, [sp, #0]
 80011ba:	2395      	movs	r3, #149	@ 0x95
 80011bc:	2209      	movs	r2, #9
 80011be:	2100      	movs	r1, #0
 80011c0:	0020      	movs	r0, r4
 80011c2:	f000 fad9 	bl	8001778 <PE_Send_CtrlMessage>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d1ed      	bne.n	80011a6 <PE_SubStateMachine_Generic+0x1d6>
 80011ca:	2010      	movs	r0, #16
 80011cc:	7720      	strb	r0, [r4, #28]
 80011ce:	4839      	ldr	r0, [pc, #228]	@ (80012b4 <PE_SubStateMachine_Generic+0x2e4>)
 80011d0:	83e0      	strh	r0, [r4, #30]
 80011d2:	201b      	movs	r0, #27
 80011d4:	9004      	str	r0, [sp, #16]
 80011d6:	2122      	movs	r1, #34	@ 0x22
 80011d8:	e128      	b.n	800142c <PE_SubStateMachine_Generic+0x45c>
 80011da:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80011dc:	7800      	ldrb	r0, [r0, #0]
 80011de:	2814      	cmp	r0, #20
 80011e0:	d035      	beq.n	800124e <PE_SubStateMachine_Generic+0x27e>
 80011e2:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80011e4:	21f0      	movs	r1, #240	@ 0xf0
 80011e6:	0209      	lsls	r1, r1, #8
 80011e8:	4001      	ands	r1, r0
 80011ea:	d130      	bne.n	800124e <PE_SubStateMachine_Generic+0x27e>
 80011ec:	211f      	movs	r1, #31
 80011ee:	231f      	movs	r3, #31
 80011f0:	4003      	ands	r3, r0
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d006      	beq.n	8001204 <PE_SubStateMachine_Generic+0x234>
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d008      	beq.n	800120c <PE_SubStateMachine_Generic+0x23c>
 80011fa:	2b0c      	cmp	r3, #12
 80011fc:	d006      	beq.n	800120c <PE_SubStateMachine_Generic+0x23c>
 80011fe:	2b10      	cmp	r3, #16
 8001200:	d015      	beq.n	800122e <PE_SubStateMachine_Generic+0x25e>
 8001202:	e024      	b.n	800124e <PE_SubStateMachine_Generic+0x27e>
 8001204:	0020      	movs	r0, r4
 8001206:	f000 fa6d 	bl	80016e4 <PE_SwitchDataRole>
 800120a:	e008      	b.n	800121e <PE_SubStateMachine_Generic+0x24e>
 800120c:	4001      	ands	r1, r0
 800120e:	290c      	cmp	r1, #12
 8001210:	d101      	bne.n	8001216 <PE_SubStateMachine_Generic+0x246>
 8001212:	2126      	movs	r1, #38	@ 0x26
 8001214:	e000      	b.n	8001218 <PE_SubStateMachine_Generic+0x248>
 8001216:	2127      	movs	r1, #39	@ 0x27
 8001218:	7c20      	ldrb	r0, [r4, #16]
 800121a:	f7ff fa65 	bl	80006e8 <USBPD_PE_Notification>
 800121e:	2003      	movs	r0, #3
 8001220:	7460      	strb	r0, [r4, #17]
 8001222:	9504      	str	r5, [sp, #16]
 8001224:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001226:	7800      	ldrb	r0, [r0, #0]
 8001228:	2814      	cmp	r0, #20
 800122a:	d10b      	bne.n	8001244 <PE_SubStateMachine_Generic+0x274>
 800122c:	e00f      	b.n	800124e <PE_SubStateMachine_Generic+0x27e>
 800122e:	2128      	movs	r1, #40	@ 0x28
 8001230:	7c20      	ldrb	r0, [r4, #16]
 8001232:	f7ff fa59 	bl	80006e8 <USBPD_PE_Notification>
 8001236:	2003      	movs	r0, #3
 8001238:	7460      	strb	r0, [r4, #17]
 800123a:	9504      	str	r5, [sp, #16]
 800123c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800123e:	7800      	ldrb	r0, [r0, #0]
 8001240:	2814      	cmp	r0, #20
 8001242:	d004      	beq.n	800124e <PE_SubStateMachine_Generic+0x27e>
 8001244:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001246:	7007      	strb	r7, [r0, #0]
 8001248:	0020      	movs	r0, r4
 800124a:	f7ff fcb8 	bl	8000bbe <PE_Clear_RxEvent>
 800124e:	8be0      	ldrh	r0, [r4, #30]
 8001250:	03f1      	lsls	r1, r6, #15
 8001252:	4288      	cmp	r0, r1
 8001254:	d12b      	bne.n	80012ae <PE_SubStateMachine_Generic+0x2de>
 8001256:	e12b      	b.n	80014b0 <PE_SubStateMachine_Generic+0x4e0>
 8001258:	ab03      	add	r3, sp, #12
 800125a:	aa05      	add	r2, sp, #20
 800125c:	2114      	movs	r1, #20
 800125e:	7c20      	ldrb	r0, [r4, #16]
 8001260:	68a5      	ldr	r5, [r4, #8]
 8001262:	696d      	ldr	r5, [r5, #20]
 8001264:	47a8      	blx	r5
 8001266:	9803      	ldr	r0, [sp, #12]
 8001268:	2800      	cmp	r0, #0
 800126a:	d100      	bne.n	800126e <PE_SubStateMachine_Generic+0x29e>
 800126c:	e192      	b.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 800126e:	2000      	movs	r0, #0
 8001270:	9002      	str	r0, [sp, #8]
 8001272:	2003      	movs	r0, #3
 8001274:	9001      	str	r0, [sp, #4]
 8001276:	9803      	ldr	r0, [sp, #12]
 8001278:	0880      	lsrs	r0, r0, #2
 800127a:	9000      	str	r0, [sp, #0]
 800127c:	ab05      	add	r3, sp, #20
 800127e:	220c      	movs	r2, #12
 8001280:	e154      	b.n	800152c <PE_SubStateMachine_Generic+0x55c>
 8001282:	6861      	ldr	r1, [r4, #4]
 8001284:	6809      	ldr	r1, [r1, #0]
 8001286:	0889      	lsrs	r1, r1, #2
 8001288:	4031      	ands	r1, r6
 800128a:	d000      	beq.n	800128e <PE_SubStateMachine_Generic+0x2be>
 800128c:	2001      	movs	r0, #1
 800128e:	9000      	str	r0, [sp, #0]
 8001290:	2368      	movs	r3, #104	@ 0x68
 8001292:	2218      	movs	r2, #24
 8001294:	2031      	movs	r0, #49	@ 0x31
 8001296:	5c21      	ldrb	r1, [r4, r0]
 8001298:	0020      	movs	r0, r4
 800129a:	f000 fa6d 	bl	8001778 <PE_Send_CtrlMessage>
 800129e:	2800      	cmp	r0, #0
 80012a0:	d105      	bne.n	80012ae <PE_SubStateMachine_Generic+0x2de>
 80012a2:	200f      	movs	r0, #15
 80012a4:	7720      	strb	r0, [r4, #28]
 80012a6:	4803      	ldr	r0, [pc, #12]	@ (80012b4 <PE_SubStateMachine_Generic+0x2e4>)
 80012a8:	83e0      	strh	r0, [r4, #30]
 80012aa:	201b      	movs	r0, #27
 80012ac:	9004      	str	r0, [sp, #16]
 80012ae:	e172      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 80012b0:	0000802d 	.word	0x0000802d
 80012b4:	0000801b 	.word	0x0000801b
 80012b8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80012ba:	7800      	ldrb	r0, [r0, #0]
 80012bc:	2814      	cmp	r0, #20
 80012be:	d023      	beq.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012c0:	2030      	movs	r0, #48	@ 0x30
 80012c2:	5c20      	ldrb	r0, [r4, r0]
 80012c4:	2131      	movs	r1, #49	@ 0x31
 80012c6:	5c61      	ldrb	r1, [r4, r1]
 80012c8:	4288      	cmp	r0, r1
 80012ca:	d11d      	bne.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012cc:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80012ce:	0bc1      	lsrs	r1, r0, #15
 80012d0:	d11a      	bne.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012d2:	0b01      	lsrs	r1, r0, #12
 80012d4:	0749      	lsls	r1, r1, #29
 80012d6:	d017      	beq.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012d8:	06c0      	lsls	r0, r0, #27
 80012da:	0ec0      	lsrs	r0, r0, #27
 80012dc:	280c      	cmp	r0, #12
 80012de:	d113      	bne.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012e0:	2304      	movs	r3, #4
 80012e2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80012e4:	1c82      	adds	r2, r0, #2
 80012e6:	2114      	movs	r1, #20
 80012e8:	7c20      	ldrb	r0, [r4, #16]
 80012ea:	68a6      	ldr	r6, [r4, #8]
 80012ec:	69b6      	ldr	r6, [r6, #24]
 80012ee:	47b0      	blx	r6
 80012f0:	2003      	movs	r0, #3
 80012f2:	7460      	strb	r0, [r4, #17]
 80012f4:	9504      	str	r5, [sp, #16]
 80012f6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80012f8:	7800      	ldrb	r0, [r0, #0]
 80012fa:	2814      	cmp	r0, #20
 80012fc:	d004      	beq.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012fe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001300:	7007      	strb	r7, [r0, #0]
 8001302:	0020      	movs	r0, r4
 8001304:	f7ff fc5b 	bl	8000bbe <PE_Clear_RxEvent>
 8001308:	8be0      	ldrh	r0, [r4, #30]
 800130a:	2180      	movs	r1, #128	@ 0x80
 800130c:	0209      	lsls	r1, r1, #8
 800130e:	4288      	cmp	r0, r1
 8001310:	d108      	bne.n	8001324 <PE_SubStateMachine_Generic+0x354>
 8001312:	2011      	movs	r0, #17
 8001314:	e0cd      	b.n	80014b2 <PE_SubStateMachine_Generic+0x4e2>
 8001316:	9500      	str	r5, [sp, #0]
 8001318:	2303      	movs	r3, #3
 800131a:	2210      	movs	r2, #16
 800131c:	2100      	movs	r1, #0
 800131e:	0020      	movs	r0, r4
 8001320:	f000 fa2a 	bl	8001778 <PE_Send_CtrlMessage>
 8001324:	e137      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 8001326:	ab03      	add	r3, sp, #12
 8001328:	48c9      	ldr	r0, [pc, #804]	@ (8001650 <.text_73>)
 800132a:	1822      	adds	r2, r4, r0
 800132c:	2108      	movs	r1, #8
 800132e:	7c20      	ldrb	r0, [r4, #16]
 8001330:	68a7      	ldr	r7, [r4, #8]
 8001332:	697f      	ldr	r7, [r7, #20]
 8001334:	47b8      	blx	r7
 8001336:	2119      	movs	r1, #25
 8001338:	9803      	ldr	r0, [sp, #12]
 800133a:	f000 f9bb 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 800133e:	2800      	cmp	r0, #0
 8001340:	d129      	bne.n	8001396 <PE_SubStateMachine_Generic+0x3c6>
 8001342:	48c4      	ldr	r0, [pc, #784]	@ (8001654 <.text_74>)
 8001344:	1826      	adds	r6, r4, r0
 8001346:	7035      	strb	r5, [r6, #0]
 8001348:	7075      	strb	r5, [r6, #1]
 800134a:	7c20      	ldrb	r0, [r4, #16]
 800134c:	f7ff fe2e 	bl	8000fac <PE_Get_UnchunkedSupport>
 8001350:	2800      	cmp	r0, #0
 8001352:	d103      	bne.n	800135c <PE_SubStateMachine_Generic+0x38c>
 8001354:	7870      	ldrb	r0, [r6, #1]
 8001356:	2180      	movs	r1, #128	@ 0x80
 8001358:	4301      	orrs	r1, r0
 800135a:	7071      	strb	r1, [r6, #1]
 800135c:	9502      	str	r5, [sp, #8]
 800135e:	2003      	movs	r0, #3
 8001360:	9001      	str	r0, [sp, #4]
 8001362:	9803      	ldr	r0, [sp, #12]
 8001364:	1d00      	adds	r0, r0, #4
 8001366:	b280      	uxth	r0, r0
 8001368:	9000      	str	r0, [sp, #0]
 800136a:	48bb      	ldr	r0, [pc, #748]	@ (8001658 <.text_75>)
 800136c:	1823      	adds	r3, r4, r0
 800136e:	2201      	movs	r2, #1
 8001370:	2100      	movs	r1, #0
 8001372:	0020      	movs	r0, r4
 8001374:	f000 fb5e 	bl	8001a34 <PE_Send_ExtendedMessage>
 8001378:	2148      	movs	r1, #72	@ 0x48
 800137a:	e057      	b.n	800142c <PE_SubStateMachine_Generic+0x45c>
 800137c:	ab03      	add	r3, sp, #12
 800137e:	48b4      	ldr	r0, [pc, #720]	@ (8001650 <.text_73>)
 8001380:	1822      	adds	r2, r4, r0
 8001382:	2113      	movs	r1, #19
 8001384:	7c20      	ldrb	r0, [r4, #16]
 8001386:	68a7      	ldr	r7, [r4, #8]
 8001388:	697f      	ldr	r7, [r7, #20]
 800138a:	47b8      	blx	r7
 800138c:	2118      	movs	r1, #24
 800138e:	9803      	ldr	r0, [sp, #12]
 8001390:	f000 f990 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8001394:	2800      	cmp	r0, #0
 8001396:	d000      	beq.n	800139a <PE_SubStateMachine_Generic+0x3ca>
 8001398:	e0fc      	b.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 800139a:	48ae      	ldr	r0, [pc, #696]	@ (8001654 <.text_74>)
 800139c:	1826      	adds	r6, r4, r0
 800139e:	7035      	strb	r5, [r6, #0]
 80013a0:	7075      	strb	r5, [r6, #1]
 80013a2:	7c20      	ldrb	r0, [r4, #16]
 80013a4:	f7ff fe02 	bl	8000fac <PE_Get_UnchunkedSupport>
 80013a8:	2800      	cmp	r0, #0
 80013aa:	d103      	bne.n	80013b4 <PE_SubStateMachine_Generic+0x3e4>
 80013ac:	7870      	ldrb	r0, [r6, #1]
 80013ae:	2180      	movs	r1, #128	@ 0x80
 80013b0:	4301      	orrs	r1, r0
 80013b2:	7071      	strb	r1, [r6, #1]
 80013b4:	9502      	str	r5, [sp, #8]
 80013b6:	2003      	movs	r0, #3
 80013b8:	9001      	str	r0, [sp, #4]
 80013ba:	9803      	ldr	r0, [sp, #12]
 80013bc:	1d00      	adds	r0, r0, #4
 80013be:	b280      	uxth	r0, r0
 80013c0:	9000      	str	r0, [sp, #0]
 80013c2:	48a5      	ldr	r0, [pc, #660]	@ (8001658 <.text_75>)
 80013c4:	1823      	adds	r3, r4, r0
 80013c6:	220f      	movs	r2, #15
 80013c8:	2100      	movs	r1, #0
 80013ca:	0020      	movs	r0, r4
 80013cc:	f000 fb32 	bl	8001a34 <PE_Send_ExtendedMessage>
 80013d0:	2161      	movs	r1, #97	@ 0x61
 80013d2:	e02b      	b.n	800142c <PE_SubStateMachine_Generic+0x45c>
 80013d4:	ab03      	add	r3, sp, #12
 80013d6:	489e      	ldr	r0, [pc, #632]	@ (8001650 <.text_73>)
 80013d8:	1822      	adds	r2, r4, r0
 80013da:	2109      	movs	r1, #9
 80013dc:	7c20      	ldrb	r0, [r4, #16]
 80013de:	68a7      	ldr	r7, [r4, #8]
 80013e0:	697f      	ldr	r7, [r7, #20]
 80013e2:	47b8      	blx	r7
 80013e4:	2107      	movs	r1, #7
 80013e6:	9803      	ldr	r0, [sp, #12]
 80013e8:	f000 f964 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d170      	bne.n	80014d2 <PE_SubStateMachine_Generic+0x502>
 80013f0:	4998      	ldr	r1, [pc, #608]	@ (8001654 <.text_74>)
 80013f2:	5465      	strb	r5, [r4, r1]
 80013f4:	1860      	adds	r0, r4, r1
 80013f6:	7045      	strb	r5, [r0, #1]
 80013f8:	7c20      	ldrb	r0, [r4, #16]
 80013fa:	f7ff fdd7 	bl	8000fac <PE_Get_UnchunkedSupport>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d105      	bne.n	800140e <PE_SubStateMachine_Generic+0x43e>
 8001402:	4894      	ldr	r0, [pc, #592]	@ (8001654 <.text_74>)
 8001404:	1820      	adds	r0, r4, r0
 8001406:	7841      	ldrb	r1, [r0, #1]
 8001408:	2280      	movs	r2, #128	@ 0x80
 800140a:	430a      	orrs	r2, r1
 800140c:	7042      	strb	r2, [r0, #1]
 800140e:	9502      	str	r5, [sp, #8]
 8001410:	2003      	movs	r0, #3
 8001412:	9001      	str	r0, [sp, #4]
 8001414:	9803      	ldr	r0, [sp, #12]
 8001416:	1d00      	adds	r0, r0, #4
 8001418:	b280      	uxth	r0, r0
 800141a:	9000      	str	r0, [sp, #0]
 800141c:	488e      	ldr	r0, [pc, #568]	@ (8001658 <.text_75>)
 800141e:	1823      	adds	r3, r4, r0
 8001420:	2202      	movs	r2, #2
 8001422:	2100      	movs	r1, #0
 8001424:	0020      	movs	r0, r4
 8001426:	f000 fb05 	bl	8001a34 <PE_Send_ExtendedMessage>
 800142a:	214f      	movs	r1, #79	@ 0x4f
 800142c:	7c20      	ldrb	r0, [r4, #16]
 800142e:	f7ff f95b 	bl	80006e8 <USBPD_PE_Notification>
 8001432:	e0b0      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 8001434:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001436:	7800      	ldrb	r0, [r0, #0]
 8001438:	2814      	cmp	r0, #20
 800143a:	d034      	beq.n	80014a6 <PE_SubStateMachine_Generic+0x4d6>
 800143c:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800143e:	0bc1      	lsrs	r1, r0, #15
 8001440:	d11a      	bne.n	8001478 <PE_SubStateMachine_Generic+0x4a8>
 8001442:	0b01      	lsrs	r1, r0, #12
 8001444:	0749      	lsls	r1, r1, #29
 8001446:	d017      	beq.n	8001478 <PE_SubStateMachine_Generic+0x4a8>
 8001448:	06c0      	lsls	r0, r0, #27
 800144a:	0ec0      	lsrs	r0, r0, #27
 800144c:	2805      	cmp	r0, #5
 800144e:	d113      	bne.n	8001478 <PE_SubStateMachine_Generic+0x4a8>
 8001450:	2304      	movs	r3, #4
 8001452:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001454:	1d02      	adds	r2, r0, #4
 8001456:	210f      	movs	r1, #15
 8001458:	7c20      	ldrb	r0, [r4, #16]
 800145a:	68a6      	ldr	r6, [r4, #8]
 800145c:	69b6      	ldr	r6, [r6, #24]
 800145e:	47b0      	blx	r6
 8001460:	2003      	movs	r0, #3
 8001462:	7460      	strb	r0, [r4, #17]
 8001464:	9504      	str	r5, [sp, #16]
 8001466:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001468:	7800      	ldrb	r0, [r0, #0]
 800146a:	2814      	cmp	r0, #20
 800146c:	d004      	beq.n	8001478 <PE_SubStateMachine_Generic+0x4a8>
 800146e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8001470:	700f      	strb	r7, [r1, #0]
 8001472:	0020      	movs	r0, r4
 8001474:	f7ff fba3 	bl	8000bbe <PE_Clear_RxEvent>
 8001478:	2034      	movs	r0, #52	@ 0x34
 800147a:	5c20      	ldrb	r0, [r4, r0]
 800147c:	06c0      	lsls	r0, r0, #27
 800147e:	0ec0      	lsrs	r0, r0, #27
 8001480:	2810      	cmp	r0, #16
 8001482:	d110      	bne.n	80014a6 <PE_SubStateMachine_Generic+0x4d6>
 8001484:	2159      	movs	r1, #89	@ 0x59
 8001486:	7c20      	ldrb	r0, [r4, #16]
 8001488:	f7ff f92e 	bl	80006e8 <USBPD_PE_Notification>
 800148c:	83e5      	strh	r5, [r4, #30]
 800148e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001490:	7800      	ldrb	r0, [r0, #0]
 8001492:	2814      	cmp	r0, #20
 8001494:	d004      	beq.n	80014a0 <PE_SubStateMachine_Generic+0x4d0>
 8001496:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001498:	7007      	strb	r7, [r0, #0]
 800149a:	0020      	movs	r0, r4
 800149c:	f7ff fb8f 	bl	8000bbe <PE_Clear_RxEvent>
 80014a0:	2003      	movs	r0, #3
 80014a2:	7460      	strb	r0, [r4, #17]
 80014a4:	9504      	str	r5, [sp, #16]
 80014a6:	8be0      	ldrh	r0, [r4, #30]
 80014a8:	2180      	movs	r1, #128	@ 0x80
 80014aa:	0209      	lsls	r1, r1, #8
 80014ac:	4288      	cmp	r0, r1
 80014ae:	d172      	bne.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 80014b0:	2003      	movs	r0, #3
 80014b2:	7460      	strb	r0, [r4, #17]
 80014b4:	9504      	str	r5, [sp, #16]
 80014b6:	e06e      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 80014b8:	ab03      	add	r3, sp, #12
 80014ba:	4865      	ldr	r0, [pc, #404]	@ (8001650 <.text_73>)
 80014bc:	1822      	adds	r2, r4, r0
 80014be:	210d      	movs	r1, #13
 80014c0:	7c20      	ldrb	r0, [r4, #16]
 80014c2:	68a7      	ldr	r7, [r4, #8]
 80014c4:	697f      	ldr	r7, [r7, #20]
 80014c6:	47b8      	blx	r7
 80014c8:	2104      	movs	r1, #4
 80014ca:	9803      	ldr	r0, [sp, #12]
 80014cc:	f000 f8f2 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d15f      	bne.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 80014d4:	485f      	ldr	r0, [pc, #380]	@ (8001654 <.text_74>)
 80014d6:	1826      	adds	r6, r4, r0
 80014d8:	7035      	strb	r5, [r6, #0]
 80014da:	7075      	strb	r5, [r6, #1]
 80014dc:	7c20      	ldrb	r0, [r4, #16]
 80014de:	f7ff fd65 	bl	8000fac <PE_Get_UnchunkedSupport>
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d103      	bne.n	80014ee <PE_SubStateMachine_Generic+0x51e>
 80014e6:	7870      	ldrb	r0, [r6, #1]
 80014e8:	2180      	movs	r1, #128	@ 0x80
 80014ea:	4301      	orrs	r1, r0
 80014ec:	7071      	strb	r1, [r6, #1]
 80014ee:	9502      	str	r5, [sp, #8]
 80014f0:	2003      	movs	r0, #3
 80014f2:	9001      	str	r0, [sp, #4]
 80014f4:	9803      	ldr	r0, [sp, #12]
 80014f6:	1d00      	adds	r0, r0, #4
 80014f8:	b280      	uxth	r0, r0
 80014fa:	9000      	str	r0, [sp, #0]
 80014fc:	4856      	ldr	r0, [pc, #344]	@ (8001658 <.text_75>)
 80014fe:	1823      	adds	r3, r4, r0
 8001500:	2207      	movs	r2, #7
 8001502:	e03d      	b.n	8001580 <PE_SubStateMachine_Generic+0x5b0>
 8001504:	9505      	str	r5, [sp, #20]
 8001506:	ab03      	add	r3, sp, #12
 8001508:	aa05      	add	r2, sp, #20
 800150a:	210f      	movs	r1, #15
 800150c:	7c20      	ldrb	r0, [r4, #16]
 800150e:	68a5      	ldr	r5, [r4, #8]
 8001510:	696d      	ldr	r5, [r5, #20]
 8001512:	47a8      	blx	r5
 8001514:	2104      	movs	r1, #4
 8001516:	9803      	ldr	r0, [sp, #12]
 8001518:	f000 f8cc 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 800151c:	2800      	cmp	r0, #0
 800151e:	d139      	bne.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 8001520:	9002      	str	r0, [sp, #8]
 8001522:	2003      	movs	r0, #3
 8001524:	9001      	str	r0, [sp, #4]
 8001526:	9600      	str	r6, [sp, #0]
 8001528:	ab05      	add	r3, sp, #20
 800152a:	2205      	movs	r2, #5
 800152c:	2100      	movs	r1, #0
 800152e:	0020      	movs	r0, r4
 8001530:	f000 f94d 	bl	80017ce <PE_Send_DataMessage>
 8001534:	e02f      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 8001536:	ab03      	add	r3, sp, #12
 8001538:	4845      	ldr	r0, [pc, #276]	@ (8001650 <.text_73>)
 800153a:	1822      	adds	r2, r4, r0
 800153c:	2111      	movs	r1, #17
 800153e:	7c20      	ldrb	r0, [r4, #16]
 8001540:	68a7      	ldr	r7, [r4, #8]
 8001542:	697f      	ldr	r7, [r7, #20]
 8001544:	47b8      	blx	r7
 8001546:	2109      	movs	r1, #9
 8001548:	9803      	ldr	r0, [sp, #12]
 800154a:	f000 f8b3 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 800154e:	2800      	cmp	r0, #0
 8001550:	d120      	bne.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 8001552:	4840      	ldr	r0, [pc, #256]	@ (8001654 <.text_74>)
 8001554:	1826      	adds	r6, r4, r0
 8001556:	7035      	strb	r5, [r6, #0]
 8001558:	7075      	strb	r5, [r6, #1]
 800155a:	7c20      	ldrb	r0, [r4, #16]
 800155c:	f7ff fd26 	bl	8000fac <PE_Get_UnchunkedSupport>
 8001560:	2800      	cmp	r0, #0
 8001562:	d103      	bne.n	800156c <PE_SubStateMachine_Generic+0x59c>
 8001564:	7870      	ldrb	r0, [r6, #1]
 8001566:	2180      	movs	r1, #128	@ 0x80
 8001568:	4301      	orrs	r1, r0
 800156a:	7071      	strb	r1, [r6, #1]
 800156c:	9502      	str	r5, [sp, #8]
 800156e:	2003      	movs	r0, #3
 8001570:	9001      	str	r0, [sp, #4]
 8001572:	9803      	ldr	r0, [sp, #12]
 8001574:	1d00      	adds	r0, r0, #4
 8001576:	b280      	uxth	r0, r0
 8001578:	9000      	str	r0, [sp, #0]
 800157a:	4837      	ldr	r0, [pc, #220]	@ (8001658 <.text_75>)
 800157c:	1823      	adds	r3, r4, r0
 800157e:	2205      	movs	r2, #5
 8001580:	2100      	movs	r1, #0
 8001582:	0020      	movs	r0, r4
 8001584:	f000 fa56 	bl	8001a34 <PE_Send_ExtendedMessage>
 8001588:	e005      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 800158a:	2150      	movs	r1, #80	@ 0x50
 800158c:	7c20      	ldrb	r0, [r4, #16]
 800158e:	f7ff f8ab 	bl	80006e8 <USBPD_PE_Notification>
 8001592:	e78d      	b.n	80014b0 <PE_SubStateMachine_Generic+0x4e0>
 8001594:	7466      	strb	r6, [r4, #17]
 8001596:	9804      	ldr	r0, [sp, #16]
 8001598:	b00f      	add	sp, #60	@ 0x3c
 800159a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800159c <PE_SubStateMachine_ReceiveDRS>:
 800159c:	b538      	push	{r3, r4, r5, lr}
 800159e:	0004      	movs	r4, r0
 80015a0:	252a      	movs	r5, #42	@ 0x2a
 80015a2:	7c20      	ldrb	r0, [r4, #16]
 80015a4:	68a1      	ldr	r1, [r4, #8]
 80015a6:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 80015a8:	4788      	blx	r1
 80015aa:	280a      	cmp	r0, #10
 80015ac:	d002      	beq.n	80015b4 <PE_SubStateMachine_ReceiveDRS+0x18>
 80015ae:	280c      	cmp	r0, #12
 80015b0:	d017      	beq.n	80015e2 <PE_SubStateMachine_ReceiveDRS+0x46>
 80015b2:	e00d      	b.n	80015d0 <PE_SubStateMachine_ReceiveDRS+0x34>
 80015b4:	2000      	movs	r0, #0
 80015b6:	9000      	str	r0, [sp, #0]
 80015b8:	2303      	movs	r3, #3
 80015ba:	2203      	movs	r2, #3
 80015bc:	2100      	movs	r1, #0
 80015be:	0020      	movs	r0, r4
 80015c0:	f000 f8da 	bl	8001778 <PE_Send_CtrlMessage>
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d10d      	bne.n	80015e4 <PE_SubStateMachine_ReceiveDRS+0x48>
 80015c8:	0020      	movs	r0, r4
 80015ca:	f000 f88b 	bl	80016e4 <PE_SwitchDataRole>
 80015ce:	bd31      	pop	{r0, r4, r5, pc}
 80015d0:	6860      	ldr	r0, [r4, #4]
 80015d2:	7800      	ldrb	r0, [r0, #0]
 80015d4:	0780      	lsls	r0, r0, #30
 80015d6:	0f80      	lsrs	r0, r0, #30
 80015d8:	2802      	cmp	r0, #2
 80015da:	d102      	bne.n	80015e2 <PE_SubStateMachine_ReceiveDRS+0x46>
 80015dc:	2001      	movs	r0, #1
 80015de:	7460      	strb	r0, [r4, #17]
 80015e0:	bd31      	pop	{r0, r4, r5, pc}
 80015e2:	7465      	strb	r5, [r4, #17]
 80015e4:	bd31      	pop	{r0, r4, r5, pc}

080015e6 <PE_UpdateTimer>:
 80015e6:	b510      	push	{r4, lr}
 80015e8:	0002      	movs	r2, r0
 80015ea:	2080      	movs	r0, #128	@ 0x80
 80015ec:	0200      	lsls	r0, r0, #8
 80015ee:	0454      	lsls	r4, r2, #17
 80015f0:	0c64      	lsrs	r4, r4, #17
 80015f2:	42a1      	cmp	r1, r4
 80015f4:	da00      	bge.n	80015f8 <PE_UpdateTimer+0x12>
 80015f6:	1a50      	subs	r0, r2, r1
 80015f8:	b280      	uxth	r0, r0
 80015fa:	bd10      	pop	{r4, pc}

080015fc <PE_CallHardResetCallback>:
 80015fc:	6883      	ldr	r3, [r0, #8]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d100      	bne.n	8001606 <PE_CallHardResetCallback+0xa>
 8001604:	4770      	bx	lr
 8001606:	b580      	push	{r7, lr}
 8001608:	7c00      	ldrb	r0, [r0, #16]
 800160a:	4798      	blx	r3
 800160c:	bd01      	pop	{r0, pc}

0800160e <PE_SetPowerNegotiation>:
 800160e:	b510      	push	{r4, lr}
 8001610:	6842      	ldr	r2, [r0, #4]
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	055c      	lsls	r4, r3, #21
 8001616:	0f64      	lsrs	r4, r4, #29
 8001618:	42a1      	cmp	r1, r4
 800161a:	d00b      	beq.n	8001634 <PE_SetPowerNegotiation+0x26>
 800161c:	4c2e      	ldr	r4, [pc, #184]	@ (80016d8 <.text_79>)
 800161e:	401c      	ands	r4, r3
 8001620:	0209      	lsls	r1, r1, #8
 8001622:	23e0      	movs	r3, #224	@ 0xe0
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	400b      	ands	r3, r1
 8001628:	4323      	orrs	r3, r4
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	215a      	movs	r1, #90	@ 0x5a
 800162e:	7c00      	ldrb	r0, [r0, #16]
 8001630:	f7ff f85a 	bl	80006e8 <USBPD_PE_Notification>
 8001634:	bd10      	pop	{r4, pc}

08001636 <USBPD_PE_ExecFastRoleSwapSignalling>:
 8001636:	b580      	push	{r7, lr}
 8001638:	4928      	ldr	r1, [pc, #160]	@ (80016dc <.text_80>)
 800163a:	0082      	lsls	r2, r0, #2
 800163c:	5889      	ldr	r1, [r1, r2]
 800163e:	694a      	ldr	r2, [r1, #20]
 8001640:	2380      	movs	r3, #128	@ 0x80
 8001642:	029b      	lsls	r3, r3, #10
 8001644:	4313      	orrs	r3, r2
 8001646:	614b      	str	r3, [r1, #20]
 8001648:	6889      	ldr	r1, [r1, #8]
 800164a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800164c:	4788      	blx	r1
 800164e:	bd01      	pop	{r0, pc}

08001650 <.text_73>:
 8001650:	00000267 	.word	0x00000267

08001654 <.text_74>:
 8001654:	00000265 	.word	0x00000265

08001658 <.text_75>:
 8001658:	00000263 	.word	0x00000263

0800165c <PE_CalculateMinTiming>:
 800165c:	0001      	movs	r1, r0
 800165e:	2000      	movs	r0, #0
 8001660:	43c0      	mvns	r0, r0
 8001662:	0c42      	lsrs	r2, r0, #17
 8001664:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
 8001666:	4213      	tst	r3, r2
 8001668:	d001      	beq.n	800166e <PE_CalculateMinTiming+0x12>
 800166a:	8c88      	ldrh	r0, [r1, #36]	@ 0x24
 800166c:	4010      	ands	r0, r2
 800166e:	8c4b      	ldrh	r3, [r1, #34]	@ 0x22
 8001670:	4213      	tst	r3, r2
 8001672:	d006      	beq.n	8001682 <PE_CalculateMinTiming+0x26>
 8001674:	8c4b      	ldrh	r3, [r1, #34]	@ 0x22
 8001676:	4013      	ands	r3, r2
 8001678:	4298      	cmp	r0, r3
 800167a:	d302      	bcc.n	8001682 <PE_CalculateMinTiming+0x26>
 800167c:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800167e:	0010      	movs	r0, r2
 8001680:	4008      	ands	r0, r1
 8001682:	4770      	bx	lr

08001684 <PE_SetPowerNegociation>:
 8001684:	b538      	push	{r3, r4, r5, lr}
 8001686:	0005      	movs	r5, r0
 8001688:	000c      	movs	r4, r1
 800168a:	6868      	ldr	r0, [r5, #4]
 800168c:	6800      	ldr	r0, [r0, #0]
 800168e:	0540      	lsls	r0, r0, #21
 8001690:	0f40      	lsrs	r0, r0, #29
 8001692:	4284      	cmp	r4, r0
 8001694:	d003      	beq.n	800169e <PE_SetPowerNegociation+0x1a>
 8001696:	215a      	movs	r1, #90	@ 0x5a
 8001698:	7c28      	ldrb	r0, [r5, #16]
 800169a:	f7ff f825 	bl	80006e8 <USBPD_PE_Notification>
 800169e:	6868      	ldr	r0, [r5, #4]
 80016a0:	6801      	ldr	r1, [r0, #0]
 80016a2:	4a0d      	ldr	r2, [pc, #52]	@ (80016d8 <.text_79>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	0221      	lsls	r1, r4, #8
 80016a8:	23e0      	movs	r3, #224	@ 0xe0
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	400b      	ands	r3, r1
 80016ae:	4313      	orrs	r3, r2
 80016b0:	6003      	str	r3, [r0, #0]
 80016b2:	bd31      	pop	{r0, r4, r5, pc}

080016b4 <PE_CheckDataSizeFromGetDataInfo>:
 80016b4:	b51c      	push	{r2, r3, r4, lr}
 80016b6:	0002      	movs	r2, r0
 80016b8:	2000      	movs	r0, #0
 80016ba:	428a      	cmp	r2, r1
 80016bc:	d20a      	bcs.n	80016d4 <PE_CheckDataSizeFromGetDataInfo+0x20>
 80016be:	2018      	movs	r0, #24
 80016c0:	9000      	str	r0, [sp, #0]
 80016c2:	bf00      	nop
 80016c4:	a315      	add	r3, pc, #84	@ (adr r3, 800171c <.text_83>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	2006      	movs	r0, #6
 80016cc:	4c04      	ldr	r4, [pc, #16]	@ (80016e0 <.text_81>)
 80016ce:	6824      	ldr	r4, [r4, #0]
 80016d0:	47a0      	blx	r4
 80016d2:	2002      	movs	r0, #2
 80016d4:	bd16      	pop	{r1, r2, r4, pc}
	...

080016d8 <.text_79>:
 80016d8:	fffff8ff 	.word	0xfffff8ff

080016dc <.text_80>:
 80016dc:	2000027c 	.word	0x2000027c

080016e0 <.text_81>:
 80016e0:	20000000 	.word	0x20000000

080016e4 <PE_SwitchDataRole>:
 80016e4:	b510      	push	{r4, lr}
 80016e6:	0004      	movs	r4, r0
 80016e8:	6860      	ldr	r0, [r4, #4]
 80016ea:	6802      	ldr	r2, [r0, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	08d3      	lsrs	r3, r2, #3
 80016f0:	400b      	ands	r3, r1
 80016f2:	d107      	bne.n	8001704 <PE_SwitchDataRole+0x20>
 80016f4:	2308      	movs	r3, #8
 80016f6:	4313      	orrs	r3, r2
 80016f8:	6003      	str	r3, [r0, #0]
 80016fa:	7c20      	ldrb	r0, [r4, #16]
 80016fc:	f004 f93b 	bl	8005976 <USBPD_PRL_SetHeaderDataRole>
 8001700:	2125      	movs	r1, #37	@ 0x25
 8001702:	e007      	b.n	8001714 <PE_SwitchDataRole+0x30>
 8001704:	2108      	movs	r1, #8
 8001706:	438a      	bics	r2, r1
 8001708:	6002      	str	r2, [r0, #0]
 800170a:	2100      	movs	r1, #0
 800170c:	7c20      	ldrb	r0, [r4, #16]
 800170e:	f004 f932 	bl	8005976 <USBPD_PRL_SetHeaderDataRole>
 8001712:	2124      	movs	r1, #36	@ 0x24
 8001714:	7c20      	ldrb	r0, [r4, #16]
 8001716:	f7fe ffe7 	bl	80006e8 <USBPD_PE_Notification>
 800171a:	bd10      	pop	{r4, pc}

0800171c <.text_83>:
 800171c:	61746144 	.word	0x61746144
 8001720:	7a695320 	.word	0x7a695320
 8001724:	73692065 	.word	0x73692065
 8001728:	746f6e20 	.word	0x746f6e20
 800172c:	726f6320 	.word	0x726f6320
 8001730:	74636572 	.word	0x74636572
 8001734:	00          	.byte	0x00
 8001735:	00          	.byte	0x00
	...

08001738 <USBPD_PE_SetTrace>:
 8001738:	0001      	movs	r1, r0
 800173a:	d100      	bne.n	800173e <USBPD_PE_SetTrace+0x6>
 800173c:	4805      	ldr	r0, [pc, #20]	@ (8001754 <.text_5>)
 800173e:	4906      	ldr	r1, [pc, #24]	@ (8001758 <.text_6>)
 8001740:	6008      	str	r0, [r1, #0]
 8001742:	4770      	bx	lr

08001744 <USBPD_PE_CheckLIB>:
 8001744:	0001      	movs	r1, r0
 8001746:	2000      	movs	r0, #0
 8001748:	4a04      	ldr	r2, [pc, #16]	@ (800175c <.text_7>)
 800174a:	4291      	cmp	r1, r2
 800174c:	d100      	bne.n	8001750 <USBPD_PE_CheckLIB+0xc>
 800174e:	2001      	movs	r0, #1
 8001750:	4770      	bx	lr
	...

08001754 <.text_5>:
 8001754:	08001777 	.word	0x08001777

08001758 <.text_6>:
 8001758:	20000000 	.word	0x20000000

0800175c <.text_7>:
 800175c:	30410000 	.word	0x30410000

08001760 <USBPD_PE_GetMemoryConsumption>:
 8001760:	b510      	push	{r4, lr}
 8001762:	f004 f8df 	bl	8005924 <USBPD_PRL_GetMemoryConsumption>
 8001766:	0004      	movs	r4, r0
 8001768:	f7fe fedd 	bl	8000526 <USBPD_CAD_GetMemoryConsumption>
 800176c:	1820      	adds	r0, r4, r0
 800176e:	21e1      	movs	r1, #225	@ 0xe1
 8001770:	0109      	lsls	r1, r1, #4
 8001772:	1840      	adds	r0, r0, r1
 8001774:	bd10      	pop	{r4, pc}

08001776 <PE_Trace_Empty>:
 8001776:	4770      	bx	lr

08001778 <PE_Send_CtrlMessage>:
 8001778:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800177a:	2501      	movs	r5, #1
 800177c:	0004      	movs	r4, r0
 800177e:	000f      	movs	r7, r1
 8001780:	0016      	movs	r6, r2
 8001782:	6860      	ldr	r0, [r4, #4]
 8001784:	6800      	ldr	r0, [r0, #0]
 8001786:	0b00      	lsrs	r0, r0, #12
 8001788:	4028      	ands	r0, r5
 800178a:	d014      	beq.n	80017b6 <PE_Send_CtrlMessage+0x3e>
 800178c:	a808      	add	r0, sp, #32
 800178e:	7800      	ldrb	r0, [r0, #0]
 8001790:	9001      	str	r0, [sp, #4]
 8001792:	2002      	movs	r0, #2
 8001794:	9000      	str	r0, [sp, #0]
 8001796:	48a2      	ldr	r0, [pc, #648]	@ (8001a20 <.text_5>)
 8001798:	1823      	adds	r3, r4, r0
 800179a:	0032      	movs	r2, r6
 800179c:	0039      	movs	r1, r7
 800179e:	7c20      	ldrb	r0, [r4, #16]
 80017a0:	f004 f938 	bl	8005a14 <USBPD_PRL_SendMessage>
 80017a4:	2803      	cmp	r0, #3
 80017a6:	d0ec      	beq.n	8001782 <PE_Send_CtrlMessage+0xa>
 80017a8:	0039      	movs	r1, r7
 80017aa:	2810      	cmp	r0, #16
 80017ac:	d00e      	beq.n	80017cc <PE_Send_CtrlMessage+0x54>
 80017ae:	2e0d      	cmp	r6, #13
 80017b0:	d104      	bne.n	80017bc <PE_Send_CtrlMessage+0x44>
 80017b2:	2201      	movs	r2, #1
 80017b4:	e003      	b.n	80017be <PE_Send_CtrlMessage+0x46>
 80017b6:	7460      	strb	r0, [r4, #17]
 80017b8:	2010      	movs	r0, #16
 80017ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80017bc:	2200      	movs	r2, #0
 80017be:	466b      	mov	r3, sp
 80017c0:	7a1b      	ldrb	r3, [r3, #8]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	0003      	movs	r3, r0
 80017c6:	0020      	movs	r0, r4
 80017c8:	f000 fc24 	bl	8002014 <PE_CheckSendMessageStatus>
 80017cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080017ce <PE_Send_DataMessage>:
 80017ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	0004      	movs	r4, r0
 80017d4:	2000      	movs	r0, #0
 80017d6:	4e93      	ldr	r6, [pc, #588]	@ (8001a24 <.text_6>)
 80017d8:	e00c      	b.n	80017f4 <PE_Send_DataMessage+0x26>
 80017da:	2100      	movs	r1, #0
 80017dc:	0082      	lsls	r2, r0, #2
 80017de:	18a2      	adds	r2, r4, r2
 80017e0:	1855      	adds	r5, r2, r1
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	00cf      	lsls	r7, r1, #3
 80017e6:	40fa      	lsrs	r2, r7
 80017e8:	55aa      	strb	r2, [r5, r6]
 80017ea:	1c49      	adds	r1, r1, #1
 80017ec:	2904      	cmp	r1, #4
 80017ee:	d3f5      	bcc.n	80017dc <PE_Send_DataMessage+0xe>
 80017f0:	1d1b      	adds	r3, r3, #4
 80017f2:	1c40      	adds	r0, r0, #1
 80017f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80017f6:	4288      	cmp	r0, r1
 80017f8:	d3ef      	bcc.n	80017da <PE_Send_DataMessage+0xc>
 80017fa:	6860      	ldr	r0, [r4, #4]
 80017fc:	6800      	ldr	r0, [r0, #0]
 80017fe:	04c1      	lsls	r1, r0, #19
 8001800:	0fc9      	lsrs	r1, r1, #31
 8001802:	d01f      	beq.n	8001844 <PE_Send_DataMessage+0x76>
 8001804:	a80c      	add	r0, sp, #48	@ 0x30
 8001806:	7800      	ldrb	r0, [r0, #0]
 8001808:	9001      	str	r0, [sp, #4]
 800180a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800180c:	0080      	lsls	r0, r0, #2
 800180e:	1c80      	adds	r0, r0, #2
 8001810:	b280      	uxth	r0, r0
 8001812:	9000      	str	r0, [sp, #0]
 8001814:	1eb0      	subs	r0, r6, #2
 8001816:	1823      	adds	r3, r4, r0
 8001818:	4668      	mov	r0, sp
 800181a:	7c02      	ldrb	r2, [r0, #16]
 800181c:	7b01      	ldrb	r1, [r0, #12]
 800181e:	7c20      	ldrb	r0, [r4, #16]
 8001820:	f004 f8f8 	bl	8005a14 <USBPD_PRL_SendMessage>
 8001824:	2803      	cmp	r0, #3
 8001826:	d0e8      	beq.n	80017fa <PE_Send_DataMessage+0x2c>
 8001828:	4669      	mov	r1, sp
 800182a:	7b09      	ldrb	r1, [r1, #12]
 800182c:	2810      	cmp	r0, #16
 800182e:	d007      	beq.n	8001840 <PE_Send_DataMessage+0x72>
 8001830:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001832:	7812      	ldrb	r2, [r2, #0]
 8001834:	9200      	str	r2, [sp, #0]
 8001836:	0003      	movs	r3, r0
 8001838:	2200      	movs	r2, #0
 800183a:	0020      	movs	r0, r4
 800183c:	f000 fbea 	bl	8002014 <PE_CheckSendMessageStatus>
 8001840:	b005      	add	sp, #20
 8001842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001844:	2010      	movs	r0, #16
 8001846:	e7fb      	b.n	8001840 <PE_Send_DataMessage+0x72>

08001848 <PE_Check_ExtendedMessage>:
 8001848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184a:	0004      	movs	r4, r0
 800184c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800184e:	7881      	ldrb	r1, [r0, #2]
 8001850:	78c0      	ldrb	r0, [r0, #3]
 8001852:	0200      	lsls	r0, r0, #8
 8001854:	1808      	adds	r0, r1, r0
 8001856:	4974      	ldr	r1, [pc, #464]	@ (8001a28 <.text_7>)
 8001858:	1861      	adds	r1, r4, r1
 800185a:	8008      	strh	r0, [r1, #0]
 800185c:	2234      	movs	r2, #52	@ 0x34
 800185e:	5ca2      	ldrb	r2, [r4, r2]
 8001860:	06d2      	lsls	r2, r2, #27
 8001862:	0ed2      	lsrs	r2, r2, #27
 8001864:	708a      	strb	r2, [r1, #2]
 8001866:	2501      	movs	r5, #1
 8001868:	0403      	lsls	r3, r0, #16
 800186a:	0e9b      	lsrs	r3, r3, #26
 800186c:	2201      	movs	r2, #1
 800186e:	401a      	ands	r2, r3
 8001870:	0403      	lsls	r3, r0, #16
 8001872:	0edb      	lsrs	r3, r3, #27
 8001874:	071b      	lsls	r3, r3, #28
 8001876:	d003      	beq.n	8001880 <PE_Check_ExtendedMessage+0x38>
 8001878:	0013      	movs	r3, r2
 800187a:	d001      	beq.n	8001880 <PE_Check_ExtendedMessage+0x38>
 800187c:	2034      	movs	r0, #52	@ 0x34
 800187e:	e09e      	b.n	80019be <PE_Check_ExtendedMessage+0x176>
 8001880:	05c6      	lsls	r6, r0, #23
 8001882:	0df6      	lsrs	r6, r6, #23
 8001884:	2300      	movs	r3, #0
 8001886:	0407      	lsls	r7, r0, #16
 8001888:	0fff      	lsrs	r7, r7, #31
 800188a:	d10d      	bne.n	80018a8 <PE_Check_ExtendedMessage+0x60>
 800188c:	4867      	ldr	r0, [pc, #412]	@ (8001a2c <.text_8>)
 800188e:	5226      	strh	r6, [r4, r0]
 8001890:	4866      	ldr	r0, [pc, #408]	@ (8001a2c <.text_8>)
 8001892:	5a20      	ldrh	r0, [r4, r0]
 8001894:	4283      	cmp	r3, r0
 8001896:	d21b      	bcs.n	80018d0 <PE_Check_ExtendedMessage+0x88>
 8001898:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800189a:	1d00      	adds	r0, r0, #4
 800189c:	5cc0      	ldrb	r0, [r0, r3]
 800189e:	4a64      	ldr	r2, [pc, #400]	@ (8001a30 <.text_9>)
 80018a0:	18a2      	adds	r2, r4, r2
 80018a2:	54d0      	strb	r0, [r2, r3]
 80018a4:	1c5b      	adds	r3, r3, #1
 80018a6:	e7f3      	b.n	8001890 <PE_Check_ExtendedMessage+0x48>
 80018a8:	27f8      	movs	r7, #248	@ 0xf8
 80018aa:	01ff      	lsls	r7, r7, #7
 80018ac:	4007      	ands	r7, r0
 80018ae:	d106      	bne.n	80018be <PE_Check_ExtendedMessage+0x76>
 80018b0:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80018b2:	0440      	lsls	r0, r0, #17
 80018b4:	0f40      	lsrs	r0, r0, #29
 80018b6:	2807      	cmp	r0, #7
 80018b8:	d30a      	bcc.n	80018d0 <PE_Check_ExtendedMessage+0x88>
 80018ba:	2e1a      	cmp	r6, #26
 80018bc:	d908      	bls.n	80018d0 <PE_Check_ExtendedMessage+0x88>
 80018be:	2a00      	cmp	r2, #0
 80018c0:	d106      	bne.n	80018d0 <PE_Check_ExtendedMessage+0x88>
 80018c2:	485a      	ldr	r0, [pc, #360]	@ (8001a2c <.text_8>)
 80018c4:	5a20      	ldrh	r0, [r4, r0]
 80018c6:	42b0      	cmp	r0, r6
 80018c8:	d202      	bcs.n	80018d0 <PE_Check_ExtendedMessage+0x88>
 80018ca:	83e3      	strh	r3, [r4, #30]
 80018cc:	2037      	movs	r0, #55	@ 0x37
 80018ce:	e076      	b.n	80019be <PE_Check_ExtendedMessage+0x176>
 80018d0:	7889      	ldrb	r1, [r1, #2]
 80018d2:	2603      	movs	r6, #3
 80018d4:	7f22      	ldrb	r2, [r4, #28]
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	d039      	beq.n	800194e <PE_Check_ExtendedMessage+0x106>
 80018da:	2901      	cmp	r1, #1
 80018dc:	d008      	beq.n	80018f0 <PE_Check_ExtendedMessage+0xa8>
 80018de:	2902      	cmp	r1, #2
 80018e0:	d01c      	beq.n	800191c <PE_Check_ExtendedMessage+0xd4>
 80018e2:	2905      	cmp	r1, #5
 80018e4:	d02a      	beq.n	800193c <PE_Check_ExtendedMessage+0xf4>
 80018e6:	2907      	cmp	r1, #7
 80018e8:	d023      	beq.n	8001932 <PE_Check_ExtendedMessage+0xea>
 80018ea:	290f      	cmp	r1, #15
 80018ec:	d00b      	beq.n	8001906 <PE_Check_ExtendedMessage+0xbe>
 80018ee:	e094      	b.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 80018f0:	2319      	movs	r3, #25
 80018f2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80018f4:	1d02      	adds	r2, r0, #4
 80018f6:	2108      	movs	r1, #8
 80018f8:	7c20      	ldrb	r0, [r4, #16]
 80018fa:	68a7      	ldr	r7, [r4, #8]
 80018fc:	69bf      	ldr	r7, [r7, #24]
 80018fe:	47b8      	blx	r7
 8001900:	7466      	strb	r6, [r4, #17]
 8001902:	2147      	movs	r1, #71	@ 0x47
 8001904:	e014      	b.n	8001930 <PE_Check_ExtendedMessage+0xe8>
 8001906:	2318      	movs	r3, #24
 8001908:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800190a:	1d02      	adds	r2, r0, #4
 800190c:	2113      	movs	r1, #19
 800190e:	7c20      	ldrb	r0, [r4, #16]
 8001910:	68a7      	ldr	r7, [r4, #8]
 8001912:	69bf      	ldr	r7, [r7, #24]
 8001914:	47b8      	blx	r7
 8001916:	7466      	strb	r6, [r4, #17]
 8001918:	2162      	movs	r1, #98	@ 0x62
 800191a:	e009      	b.n	8001930 <PE_Check_ExtendedMessage+0xe8>
 800191c:	2307      	movs	r3, #7
 800191e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001920:	1d02      	adds	r2, r0, #4
 8001922:	2109      	movs	r1, #9
 8001924:	7c20      	ldrb	r0, [r4, #16]
 8001926:	68a7      	ldr	r7, [r4, #8]
 8001928:	69bf      	ldr	r7, [r7, #24]
 800192a:	47b8      	blx	r7
 800192c:	7466      	strb	r6, [r4, #17]
 800192e:	214e      	movs	r1, #78	@ 0x4e
 8001930:	e2c7      	b.n	8001ec2 <.text_21>
 8001932:	231a      	movs	r3, #26
 8001934:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001936:	1d02      	adds	r2, r0, #4
 8001938:	210d      	movs	r1, #13
 800193a:	e003      	b.n	8001944 <PE_Check_ExtendedMessage+0xfc>
 800193c:	2309      	movs	r3, #9
 800193e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001940:	1d02      	adds	r2, r0, #4
 8001942:	2111      	movs	r1, #17
 8001944:	7c20      	ldrb	r0, [r4, #16]
 8001946:	68a7      	ldr	r7, [r4, #8]
 8001948:	69bf      	ldr	r7, [r7, #24]
 800194a:	47b8      	blx	r7
 800194c:	e063      	b.n	8001a16 <PE_Check_ExtendedMessage+0x1ce>
 800194e:	1ec8      	subs	r0, r1, #3
 8001950:	2808      	cmp	r0, #8
 8001952:	d862      	bhi.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 8001954:	a201      	add	r2, pc, #4	@ (adr r2, 800195c <PE_Check_ExtendedMessage+0x114>)
 8001956:	5c12      	ldrb	r2, [r2, r0]
 8001958:	4497      	add	pc, r2
 800195a:	bf00      	nop
 800195c:	46be280a 	.word	0x46be280a
 8001960:	669884be 	.word	0x669884be
 8001964:	006e      	.short	0x006e
 8001966:	6820      	ldr	r0, [r4, #0]
 8001968:	8900      	ldrh	r0, [r0, #8]
 800196a:	0b00      	lsrs	r0, r0, #12
 800196c:	4228      	tst	r0, r5
 800196e:	d054      	beq.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 8001970:	2301      	movs	r3, #1
 8001972:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001974:	1d02      	adds	r2, r0, #4
 8001976:	2110      	movs	r1, #16
 8001978:	7c20      	ldrb	r0, [r4, #16]
 800197a:	68a5      	ldr	r5, [r4, #8]
 800197c:	69ad      	ldr	r5, [r5, #24]
 800197e:	47a8      	blx	r5
 8001980:	203a      	movs	r0, #58	@ 0x3a
 8001982:	e01c      	b.n	80019be <PE_Check_ExtendedMessage+0x176>
 8001984:	6820      	ldr	r0, [r4, #0]
 8001986:	8900      	ldrh	r0, [r0, #8]
 8001988:	0b00      	lsrs	r0, r0, #12
 800198a:	4228      	tst	r0, r5
 800198c:	d045      	beq.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 800198e:	2301      	movs	r3, #1
 8001990:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001992:	1d02      	adds	r2, r0, #4
 8001994:	210e      	movs	r1, #14
 8001996:	7c20      	ldrb	r0, [r4, #16]
 8001998:	68a5      	ldr	r5, [r4, #8]
 800199a:	69ad      	ldr	r5, [r5, #24]
 800199c:	47a8      	blx	r5
 800199e:	203b      	movs	r0, #59	@ 0x3b
 80019a0:	e00d      	b.n	80019be <PE_Check_ExtendedMessage+0x176>
 80019a2:	6820      	ldr	r0, [r4, #0]
 80019a4:	8900      	ldrh	r0, [r0, #8]
 80019a6:	0980      	lsrs	r0, r0, #6
 80019a8:	4228      	tst	r0, r5
 80019aa:	d036      	beq.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 80019ac:	2302      	movs	r3, #2
 80019ae:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80019b0:	1d02      	adds	r2, r0, #4
 80019b2:	210c      	movs	r1, #12
 80019b4:	7c20      	ldrb	r0, [r4, #16]
 80019b6:	68a5      	ldr	r5, [r4, #8]
 80019b8:	69ad      	ldr	r5, [r5, #24]
 80019ba:	47a8      	blx	r5
 80019bc:	203c      	movs	r0, #60	@ 0x3c
 80019be:	7460      	strb	r0, [r4, #17]
 80019c0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80019c2:	6820      	ldr	r0, [r4, #0]
 80019c4:	8900      	ldrh	r0, [r0, #8]
 80019c6:	0a80      	lsrs	r0, r0, #10
 80019c8:	e00d      	b.n	80019e6 <PE_Check_ExtendedMessage+0x19e>
 80019ca:	68a0      	ldr	r0, [r4, #8]
 80019cc:	6905      	ldr	r5, [r0, #16]
 80019ce:	2d00      	cmp	r5, #0
 80019d0:	d024      	beq.n	8001a1c <PE_Check_ExtendedMessage+0x1d4>
 80019d2:	4816      	ldr	r0, [pc, #88]	@ (8001a2c <.text_8>)
 80019d4:	5a23      	ldrh	r3, [r4, r0]
 80019d6:	4816      	ldr	r0, [pc, #88]	@ (8001a30 <.text_9>)
 80019d8:	1822      	adds	r2, r4, r0
 80019da:	7c20      	ldrb	r0, [r4, #16]
 80019dc:	47a8      	blx	r5
 80019de:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80019e0:	6820      	ldr	r0, [r4, #0]
 80019e2:	8900      	ldrh	r0, [r0, #8]
 80019e4:	0a40      	lsrs	r0, r0, #9
 80019e6:	4228      	tst	r0, r5
 80019e8:	d017      	beq.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 80019ea:	68a0      	ldr	r0, [r4, #8]
 80019ec:	6900      	ldr	r0, [r0, #16]
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d109      	bne.n	8001a06 <PE_Check_ExtendedMessage+0x1be>
 80019f2:	e012      	b.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 80019f4:	6820      	ldr	r0, [r4, #0]
 80019f6:	8900      	ldrh	r0, [r0, #8]
 80019f8:	0a40      	lsrs	r0, r0, #9
 80019fa:	4228      	tst	r0, r5
 80019fc:	d00e      	beq.n	8001a1c <PE_Check_ExtendedMessage+0x1d4>
 80019fe:	68a0      	ldr	r0, [r4, #8]
 8001a00:	6900      	ldr	r0, [r0, #16]
 8001a02:	2800      	cmp	r0, #0
 8001a04:	d00a      	beq.n	8001a1c <PE_Check_ExtendedMessage+0x1d4>
 8001a06:	4809      	ldr	r0, [pc, #36]	@ (8001a2c <.text_8>)
 8001a08:	5a23      	ldrh	r3, [r4, r0]
 8001a0a:	4809      	ldr	r0, [pc, #36]	@ (8001a30 <.text_9>)
 8001a0c:	1822      	adds	r2, r4, r0
 8001a0e:	7c20      	ldrb	r0, [r4, #16]
 8001a10:	68a5      	ldr	r5, [r4, #8]
 8001a12:	692d      	ldr	r5, [r5, #16]
 8001a14:	47a8      	blx	r5
 8001a16:	7466      	strb	r6, [r4, #17]
 8001a18:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001a1a:	7465      	strb	r5, [r4, #17]
 8001a1c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

08001a20 <.text_5>:
 8001a20:	00000263 	.word	0x00000263

08001a24 <.text_6>:
 8001a24:	00000265 	.word	0x00000265

08001a28 <.text_7>:
 8001a28:	0000025a 	.word	0x0000025a

08001a2c <.text_8>:
 8001a2c:	0000048e 	.word	0x0000048e

08001a30 <.text_9>:
 8001a30:	00000281 	.word	0x00000281

08001a34 <PE_Send_ExtendedMessage>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8001a3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001a3c:	0004      	movs	r4, r0
 8001a3e:	000d      	movs	r5, r1
 8001a40:	4668      	mov	r0, sp
 8001a42:	7202      	strb	r2, [r0, #8]
 8001a44:	9303      	str	r3, [sp, #12]
 8001a46:	6860      	ldr	r0, [r4, #4]
 8001a48:	6800      	ldr	r0, [r0, #0]
 8001a4a:	04c1      	lsls	r1, r0, #19
 8001a4c:	0fc9      	lsrs	r1, r1, #31
 8001a4e:	d019      	beq.n	8001a84 <PE_Send_ExtendedMessage+0x50>
 8001a50:	9601      	str	r6, [sp, #4]
 8001a52:	9700      	str	r7, [sp, #0]
 8001a54:	9b03      	ldr	r3, [sp, #12]
 8001a56:	4668      	mov	r0, sp
 8001a58:	7a00      	ldrb	r0, [r0, #8]
 8001a5a:	2280      	movs	r2, #128	@ 0x80
 8001a5c:	4302      	orrs	r2, r0
 8001a5e:	0029      	movs	r1, r5
 8001a60:	7c20      	ldrb	r0, [r4, #16]
 8001a62:	f003 ffd7 	bl	8005a14 <USBPD_PRL_SendMessage>
 8001a66:	2803      	cmp	r0, #3
 8001a68:	d0ed      	beq.n	8001a46 <PE_Send_ExtendedMessage+0x12>
 8001a6a:	0029      	movs	r1, r5
 8001a6c:	2810      	cmp	r0, #16
 8001a6e:	d007      	beq.n	8001a80 <PE_Send_ExtendedMessage+0x4c>
 8001a70:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	9200      	str	r2, [sp, #0]
 8001a76:	0003      	movs	r3, r0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	0020      	movs	r0, r4
 8001a7c:	f000 faca 	bl	8002014 <PE_CheckSendMessageStatus>
 8001a80:	b005      	add	sp, #20
 8001a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a84:	2011      	movs	r0, #17
 8001a86:	7460      	strb	r0, [r4, #17]
 8001a88:	2010      	movs	r0, #16
 8001a8a:	e7f9      	b.n	8001a80 <PE_Send_ExtendedMessage+0x4c>

08001a8c <PE_SubStateMachine_ExtendedMessages>:
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	0004      	movs	r4, r0
 8001a92:	2702      	movs	r7, #2
 8001a94:	4889      	ldr	r0, [pc, #548]	@ (8001cbc <.text_12>)
 8001a96:	1820      	adds	r0, r4, r0
 8001a98:	9000      	str	r0, [sp, #0]
 8001a9a:	2039      	movs	r0, #57	@ 0x39
 8001a9c:	2180      	movs	r1, #128	@ 0x80
 8001a9e:	466a      	mov	r2, sp
 8001aa0:	7211      	strb	r1, [r2, #8]
 8001aa2:	4a87      	ldr	r2, [pc, #540]	@ (8001cc0 <.text_13>)
 8001aa4:	2500      	movs	r5, #0
 8001aa6:	2603      	movs	r6, #3
 8001aa8:	7c63      	ldrb	r3, [r4, #17]
 8001aaa:	2b31      	cmp	r3, #49	@ 0x31
 8001aac:	d010      	beq.n	8001ad0 <PE_SubStateMachine_ExtendedMessages+0x44>
 8001aae:	2b33      	cmp	r3, #51	@ 0x33
 8001ab0:	d075      	beq.n	8001b9e <PE_SubStateMachine_ExtendedMessages+0x112>
 8001ab2:	2b34      	cmp	r3, #52	@ 0x34
 8001ab4:	d07c      	beq.n	8001bb0 <PE_SubStateMachine_ExtendedMessages+0x124>
 8001ab6:	2b35      	cmp	r3, #53	@ 0x35
 8001ab8:	d100      	bne.n	8001abc <PE_SubStateMachine_ExtendedMessages+0x30>
 8001aba:	e0a8      	b.n	8001c0e <PE_SubStateMachine_ExtendedMessages+0x182>
 8001abc:	2b36      	cmp	r3, #54	@ 0x36
 8001abe:	d100      	bne.n	8001ac2 <PE_SubStateMachine_ExtendedMessages+0x36>
 8001ac0:	e0be      	b.n	8001c40 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 8001ac2:	2b37      	cmp	r3, #55	@ 0x37
 8001ac4:	d100      	bne.n	8001ac8 <PE_SubStateMachine_ExtendedMessages+0x3c>
 8001ac6:	e0be      	b.n	8001c46 <PE_SubStateMachine_ExtendedMessages+0x1ba>
 8001ac8:	2b38      	cmp	r3, #56	@ 0x38
 8001aca:	d100      	bne.n	8001ace <PE_SubStateMachine_ExtendedMessages+0x42>
 8001acc:	e0ef      	b.n	8001cae <PE_SubStateMachine_ExtendedMessages+0x222>
 8001ace:	e0f2      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001ad0:	487c      	ldr	r0, [pc, #496]	@ (8001cc4 <.text_14>)
 8001ad2:	1820      	adds	r0, r4, r0
 8001ad4:	9004      	str	r0, [sp, #16]
 8001ad6:	4669      	mov	r1, sp
 8001ad8:	730d      	strb	r5, [r1, #12]
 8001ada:	497b      	ldr	r1, [pc, #492]	@ (8001cc8 <.text_15>)
 8001adc:	5265      	strh	r5, [r4, r1]
 8001ade:	7c20      	ldrb	r0, [r4, #16]
 8001ae0:	f7ff fa64 	bl	8000fac <PE_Get_UnchunkedSupport>
 8001ae4:	2801      	cmp	r0, #1
 8001ae6:	d107      	bne.n	8001af8 <PE_SubStateMachine_ExtendedMessages+0x6c>
 8001ae8:	4878      	ldr	r0, [pc, #480]	@ (8001ccc <.text_16>)
 8001aea:	1820      	adds	r0, r4, r0
 8001aec:	7005      	strb	r5, [r0, #0]
 8001aee:	7045      	strb	r5, [r0, #1]
 8001af0:	4877      	ldr	r0, [pc, #476]	@ (8001cd0 <.text_17>)
 8001af2:	1820      	adds	r0, r4, r0
 8001af4:	9004      	str	r0, [sp, #16]
 8001af6:	e028      	b.n	8001b4a <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001af8:	4976      	ldr	r1, [pc, #472]	@ (8001cd4 <.text_18>)
 8001afa:	1861      	adds	r1, r4, r1
 8001afc:	72cd      	strb	r5, [r1, #11]
 8001afe:	4975      	ldr	r1, [pc, #468]	@ (8001cd4 <.text_18>)
 8001b00:	1861      	adds	r1, r4, r1
 8001b02:	730d      	strb	r5, [r1, #12]
 8001b04:	7c20      	ldrb	r0, [r4, #16]
 8001b06:	f7ff fa51 	bl	8000fac <PE_Get_UnchunkedSupport>
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	d106      	bne.n	8001b1c <PE_SubStateMachine_ExtendedMessages+0x90>
 8001b0e:	4871      	ldr	r0, [pc, #452]	@ (8001cd4 <.text_18>)
 8001b10:	1820      	adds	r0, r4, r0
 8001b12:	7b01      	ldrb	r1, [r0, #12]
 8001b14:	466a      	mov	r2, sp
 8001b16:	7a12      	ldrb	r2, [r2, #8]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	7302      	strb	r2, [r0, #12]
 8001b1c:	486a      	ldr	r0, [pc, #424]	@ (8001cc8 <.text_15>)
 8001b1e:	1820      	adds	r0, r4, r0
 8001b20:	8841      	ldrh	r1, [r0, #2]
 8001b22:	291b      	cmp	r1, #27
 8001b24:	d30e      	bcc.n	8001b44 <PE_SubStateMachine_ExtendedMessages+0xb8>
 8001b26:	486a      	ldr	r0, [pc, #424]	@ (8001cd0 <.text_17>)
 8001b28:	1820      	adds	r0, r4, r0
 8001b2a:	5d40      	ldrb	r0, [r0, r5]
 8001b2c:	9900      	ldr	r1, [sp, #0]
 8001b2e:	5548      	strb	r0, [r1, r5]
 8001b30:	1c6d      	adds	r5, r5, #1
 8001b32:	2d1a      	cmp	r5, #26
 8001b34:	d209      	bcs.n	8001b4a <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001b36:	e7f6      	b.n	8001b26 <PE_SubStateMachine_ExtendedMessages+0x9a>
 8001b38:	4965      	ldr	r1, [pc, #404]	@ (8001cd0 <.text_17>)
 8001b3a:	1861      	adds	r1, r4, r1
 8001b3c:	5d49      	ldrb	r1, [r1, r5]
 8001b3e:	9a00      	ldr	r2, [sp, #0]
 8001b40:	5551      	strb	r1, [r2, r5]
 8001b42:	1c6d      	adds	r5, r5, #1
 8001b44:	8841      	ldrh	r1, [r0, #2]
 8001b46:	428d      	cmp	r5, r1
 8001b48:	d3f6      	bcc.n	8001b38 <PE_SubStateMachine_ExtendedMessages+0xac>
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	6961      	ldr	r1, [r4, #20]
 8001b4e:	0949      	lsrs	r1, r1, #5
 8001b50:	4001      	ands	r1, r0
 8001b52:	d00a      	beq.n	8001b6a <PE_SubStateMachine_ExtendedMessages+0xde>
 8001b54:	6861      	ldr	r1, [r4, #4]
 8001b56:	6809      	ldr	r1, [r1, #0]
 8001b58:	0889      	lsrs	r1, r1, #2
 8001b5a:	4001      	ands	r1, r0
 8001b5c:	d002      	beq.n	8001b64 <PE_SubStateMachine_ExtendedMessages+0xd8>
 8001b5e:	4669      	mov	r1, sp
 8001b60:	7308      	strb	r0, [r1, #12]
 8001b62:	e001      	b.n	8001b68 <PE_SubStateMachine_ExtendedMessages+0xdc>
 8001b64:	4669      	mov	r1, sp
 8001b66:	730f      	strb	r7, [r1, #12]
 8001b68:	2633      	movs	r6, #51	@ 0x33
 8001b6a:	4668      	mov	r0, sp
 8001b6c:	7b00      	ldrb	r0, [r0, #12]
 8001b6e:	9002      	str	r0, [sp, #8]
 8001b70:	9601      	str	r6, [sp, #4]
 8001b72:	4855      	ldr	r0, [pc, #340]	@ (8001cc8 <.text_15>)
 8001b74:	1820      	adds	r0, r4, r0
 8001b76:	8840      	ldrh	r0, [r0, #2]
 8001b78:	1d00      	adds	r0, r0, #4
 8001b7a:	b280      	uxth	r0, r0
 8001b7c:	9000      	str	r0, [sp, #0]
 8001b7e:	9b04      	ldr	r3, [sp, #16]
 8001b80:	4854      	ldr	r0, [pc, #336]	@ (8001cd4 <.text_18>)
 8001b82:	1820      	adds	r0, r4, r0
 8001b84:	78c2      	ldrb	r2, [r0, #3]
 8001b86:	2033      	movs	r0, #51	@ 0x33
 8001b88:	5c21      	ldrb	r1, [r4, r0]
 8001b8a:	0020      	movs	r0, r4
 8001b8c:	f7ff ff52 	bl	8001a34 <PE_Send_ExtendedMessage>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d103      	bne.n	8001b9c <PE_SubStateMachine_ExtendedMessages+0x110>
 8001b94:	484f      	ldr	r0, [pc, #316]	@ (8001cd4 <.text_18>)
 8001b96:	1820      	adds	r0, r4, r0
 8001b98:	7940      	ldrb	r0, [r0, #5]
 8001b9a:	7720      	strb	r0, [r4, #28]
 8001b9c:	e08b      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001b9e:	83e2      	strh	r2, [r4, #30]
 8001ba0:	271b      	movs	r7, #27
 8001ba2:	494c      	ldr	r1, [pc, #304]	@ (8001cd4 <.text_18>)
 8001ba4:	1861      	adds	r1, r4, r1
 8001ba6:	78c9      	ldrb	r1, [r1, #3]
 8001ba8:	2904      	cmp	r1, #4
 8001baa:	d151      	bne.n	8001c50 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001bac:	2074      	movs	r0, #116	@ 0x74
 8001bae:	e04f      	b.n	8001c50 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001bb0:	4848      	ldr	r0, [pc, #288]	@ (8001cd4 <.text_18>)
 8001bb2:	5a20      	ldrh	r0, [r4, r0]
 8001bb4:	0440      	lsls	r0, r0, #17
 8001bb6:	0f02      	lsrs	r2, r0, #28
 8001bb8:	211a      	movs	r1, #26
 8001bba:	4351      	muls	r1, r2
 8001bbc:	4842      	ldr	r0, [pc, #264]	@ (8001cc8 <.text_15>)
 8001bbe:	1820      	adds	r0, r4, r0
 8001bc0:	8843      	ldrh	r3, [r0, #2]
 8001bc2:	4299      	cmp	r1, r3
 8001bc4:	da01      	bge.n	8001bca <PE_SubStateMachine_ExtendedMessages+0x13e>
 8001bc6:	2a0a      	cmp	r2, #10
 8001bc8:	d301      	bcc.n	8001bce <PE_SubStateMachine_ExtendedMessages+0x142>
 8001bca:	7466      	strb	r6, [r4, #17]
 8001bcc:	e01d      	b.n	8001c0a <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001bce:	1a5a      	subs	r2, r3, r1
 8001bd0:	2a1a      	cmp	r2, #26
 8001bd2:	d202      	bcs.n	8001bda <PE_SubStateMachine_ExtendedMessages+0x14e>
 8001bd4:	1a5b      	subs	r3, r3, r1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	e000      	b.n	8001bdc <PE_SubStateMachine_ExtendedMessages+0x150>
 8001bda:	231a      	movs	r3, #26
 8001bdc:	2200      	movs	r2, #0
 8001bde:	e006      	b.n	8001bee <PE_SubStateMachine_ExtendedMessages+0x162>
 8001be0:	4e3b      	ldr	r6, [pc, #236]	@ (8001cd0 <.text_17>)
 8001be2:	19a6      	adds	r6, r4, r6
 8001be4:	188f      	adds	r7, r1, r2
 8001be6:	5df6      	ldrb	r6, [r6, r7]
 8001be8:	9f00      	ldr	r7, [sp, #0]
 8001bea:	54be      	strb	r6, [r7, r2]
 8001bec:	1c52      	adds	r2, r2, #1
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d3f6      	bcc.n	8001be0 <PE_SubStateMachine_ExtendedMessages+0x154>
 8001bf2:	4934      	ldr	r1, [pc, #208]	@ (8001cc4 <.text_14>)
 8001bf4:	1863      	adds	r3, r4, r1
 8001bf6:	8842      	ldrh	r2, [r0, #2]
 8001bf8:	4836      	ldr	r0, [pc, #216]	@ (8001cd4 <.text_18>)
 8001bfa:	5a20      	ldrh	r0, [r4, r0]
 8001bfc:	0440      	lsls	r0, r0, #17
 8001bfe:	0f01      	lsrs	r1, r0, #28
 8001c00:	7c20      	ldrb	r0, [r4, #16]
 8001c02:	f004 fba8 	bl	8006356 <USBPD_PRL_PrepareExtendedTxChunkSending>
 8001c06:	2035      	movs	r0, #53	@ 0x35
 8001c08:	7460      	strb	r0, [r4, #17]
 8001c0a:	2700      	movs	r7, #0
 8001c0c:	e053      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001c0e:	6960      	ldr	r0, [r4, #20]
 8001c10:	0681      	lsls	r1, r0, #26
 8001c12:	0fc9      	lsrs	r1, r1, #31
 8001c14:	d001      	beq.n	8001c1a <PE_SubStateMachine_ExtendedMessages+0x18e>
 8001c16:	2036      	movs	r0, #54	@ 0x36
 8001c18:	e000      	b.n	8001c1c <PE_SubStateMachine_ExtendedMessages+0x190>
 8001c1a:	2003      	movs	r0, #3
 8001c1c:	492a      	ldr	r1, [pc, #168]	@ (8001cc8 <.text_15>)
 8001c1e:	1866      	adds	r6, r4, r1
 8001c20:	9502      	str	r5, [sp, #8]
 8001c22:	9001      	str	r0, [sp, #4]
 8001c24:	8870      	ldrh	r0, [r6, #2]
 8001c26:	9000      	str	r0, [sp, #0]
 8001c28:	4826      	ldr	r0, [pc, #152]	@ (8001cc4 <.text_14>)
 8001c2a:	1823      	adds	r3, r4, r0
 8001c2c:	3809      	subs	r0, #9
 8001c2e:	1820      	adds	r0, r4, r0
 8001c30:	78c2      	ldrb	r2, [r0, #3]
 8001c32:	2030      	movs	r0, #48	@ 0x30
 8001c34:	5c21      	ldrb	r1, [r4, r0]
 8001c36:	0020      	movs	r0, r4
 8001c38:	f7ff fefc 	bl	8001a34 <PE_Send_ExtendedMessage>
 8001c3c:	8035      	strh	r5, [r6, #0]
 8001c3e:	e03a      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001c40:	83e2      	strh	r2, [r4, #30]
 8001c42:	271b      	movs	r7, #27
 8001c44:	e004      	b.n	8001c50 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001c46:	8be0      	ldrh	r0, [r4, #30]
 8001c48:	020b      	lsls	r3, r1, #8
 8001c4a:	4298      	cmp	r0, r3
 8001c4c:	d102      	bne.n	8001c54 <PE_SubStateMachine_ExtendedMessages+0x1c8>
 8001c4e:	200f      	movs	r0, #15
 8001c50:	7460      	strb	r0, [r4, #17]
 8001c52:	e030      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001c54:	83e2      	strh	r2, [r4, #30]
 8001c56:	271b      	movs	r7, #27
 8001c58:	481a      	ldr	r0, [pc, #104]	@ (8001cc4 <.text_14>)
 8001c5a:	1825      	adds	r5, r4, r0
 8001c5c:	0029      	movs	r1, r5
 8001c5e:	7c20      	ldrb	r0, [r4, #16]
 8001c60:	f004 fba1 	bl	80063a6 <USBPD_PRL_PrepareChunkRequest>
 8001c64:	6860      	ldr	r0, [r4, #4]
 8001c66:	6800      	ldr	r0, [r0, #0]
 8001c68:	04c1      	lsls	r1, r0, #19
 8001c6a:	0fc9      	lsrs	r1, r1, #31
 8001c6c:	d012      	beq.n	8001c94 <PE_SubStateMachine_ExtendedMessages+0x208>
 8001c6e:	2000      	movs	r0, #0
 8001c70:	9001      	str	r0, [sp, #4]
 8001c72:	2006      	movs	r0, #6
 8001c74:	9000      	str	r0, [sp, #0]
 8001c76:	002b      	movs	r3, r5
 8001c78:	4816      	ldr	r0, [pc, #88]	@ (8001cd4 <.text_18>)
 8001c7a:	1820      	adds	r0, r4, r0
 8001c7c:	7880      	ldrb	r0, [r0, #2]
 8001c7e:	4669      	mov	r1, sp
 8001c80:	7a0a      	ldrb	r2, [r1, #8]
 8001c82:	4302      	orrs	r2, r0
 8001c84:	2030      	movs	r0, #48	@ 0x30
 8001c86:	5c21      	ldrb	r1, [r4, r0]
 8001c88:	7c20      	ldrb	r0, [r4, #16]
 8001c8a:	f003 fec3 	bl	8005a14 <USBPD_PRL_SendMessage>
 8001c8e:	2803      	cmp	r0, #3
 8001c90:	d0e8      	beq.n	8001c64 <PE_SubStateMachine_ExtendedMessages+0x1d8>
 8001c92:	e002      	b.n	8001c9a <PE_SubStateMachine_ExtendedMessages+0x20e>
 8001c94:	2011      	movs	r0, #17
 8001c96:	7460      	strb	r0, [r4, #17]
 8001c98:	2010      	movs	r0, #16
 8001c9a:	2139      	movs	r1, #57	@ 0x39
 8001c9c:	9100      	str	r1, [sp, #0]
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2030      	movs	r0, #48	@ 0x30
 8001ca4:	5c21      	ldrb	r1, [r4, r0]
 8001ca6:	0020      	movs	r0, r4
 8001ca8:	f000 f9b4 	bl	8002014 <PE_CheckSendMessageStatus>
 8001cac:	e003      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001cae:	7466      	strb	r6, [r4, #17]
 8001cb0:	2700      	movs	r7, #0
 8001cb2:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <.text_15>)
 8001cb4:	5225      	strh	r5, [r4, r0]
 8001cb6:	0038      	movs	r0, r7
 8001cb8:	b005      	add	sp, #20
 8001cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cbc <.text_12>:
 8001cbc:	00000267 	.word	0x00000267

08001cc0 <.text_13>:
 8001cc0:	0000801b 	.word	0x0000801b

08001cc4 <.text_14>:
 8001cc4:	00000263 	.word	0x00000263

08001cc8 <.text_15>:
 8001cc8:	0000048e 	.word	0x0000048e

08001ccc <.text_16>:
 8001ccc:	00000387 	.word	0x00000387

08001cd0 <.text_17>:
 8001cd0:	00000385 	.word	0x00000385

08001cd4 <.text_18>:
 8001cd4:	0000025a 	.word	0x0000025a

08001cd8 <PE_ManageRXEvent>:
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	2130      	movs	r1, #48	@ 0x30
 8001cdc:	5c41      	ldrb	r1, [r0, r1]
 8001cde:	2231      	movs	r2, #49	@ 0x31
 8001ce0:	5481      	strb	r1, [r0, r2]
 8001ce2:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 8001ce4:	0bca      	lsrs	r2, r1, #15
 8001ce6:	d002      	beq.n	8001cee <PE_ManageRXEvent+0x16>
 8001ce8:	f7ff fdae 	bl	8001848 <PE_Check_ExtendedMessage>
 8001cec:	bd01      	pop	{r0, pc}
 8001cee:	22f0      	movs	r2, #240	@ 0xf0
 8001cf0:	0212      	lsls	r2, r2, #8
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	d102      	bne.n	8001cfc <PE_ManageRXEvent+0x24>
 8001cf6:	f000 f805 	bl	8001d04 <PE_Check_ControlMessage>
 8001cfa:	bd01      	pop	{r0, pc}
 8001cfc:	f000 f8e5 	bl	8001eca <PE_Check_DataMessage>
 8001d00:	bd01      	pop	{r0, pc}
	...

08001d04 <PE_Check_ControlMessage>:
 8001d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d06:	0004      	movs	r4, r0
 8001d08:	272a      	movs	r7, #42	@ 0x2a
 8001d0a:	2603      	movs	r6, #3
 8001d0c:	2501      	movs	r5, #1
 8001d0e:	200b      	movs	r0, #11
 8001d10:	2134      	movs	r1, #52	@ 0x34
 8001d12:	5c61      	ldrb	r1, [r4, r1]
 8001d14:	06c9      	lsls	r1, r1, #27
 8001d16:	0ec9      	lsrs	r1, r1, #27
 8001d18:	1e49      	subs	r1, r1, #1
 8001d1a:	2917      	cmp	r1, #23
 8001d1c:	d900      	bls.n	8001d20 <PE_Check_ControlMessage+0x1c>
 8001d1e:	e0c7      	b.n	8001eb0 <PE_Check_ControlMessage+0x1ac>
 8001d20:	a201      	add	r2, pc, #4	@ (adr r2, 8001d28 <PE_Check_ControlMessage+0x24>)
 8001d22:	5c52      	ldrb	r2, [r2, r1]
 8001d24:	0052      	lsls	r2, r2, #1
 8001d26:	4497      	add	pc, r2
 8001d28:	c0c00bcb 	.word	0xc0c00bcb
 8001d2c:	5b22c020 	.word	0x5b22c020
 8001d30:	c0413449 	.word	0xc0413449
 8001d34:	bec3c319 	.word	0xbec3c319
 8001d38:	9fb7936f 	.word	0x9fb7936f
 8001d3c:	bac383b0 	.word	0xbac383b0
 8001d40:	6860      	ldr	r0, [r4, #4]
 8001d42:	6800      	ldr	r0, [r0, #0]
 8001d44:	0880      	lsrs	r0, r0, #2
 8001d46:	4005      	ands	r5, r0
 8001d48:	d000      	beq.n	8001d4c <PE_Check_ControlMessage+0x48>
 8001d4a:	e0b9      	b.n	8001ec0 <PE_Check_ControlMessage+0x1bc>
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	7720      	strb	r0, [r4, #28]
 8001d50:	212b      	movs	r1, #43	@ 0x2b
 8001d52:	7c20      	ldrb	r0, [r4, #16]
 8001d54:	f7fe fcc8 	bl	80006e8 <USBPD_PE_Notification>
 8001d58:	2098      	movs	r0, #152	@ 0x98
 8001d5a:	e0a7      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001d5c:	7726      	strb	r6, [r4, #28]
 8001d5e:	2132      	movs	r1, #50	@ 0x32
 8001d60:	7c20      	ldrb	r0, [r4, #16]
 8001d62:	f7fe fcc1 	bl	80006e8 <USBPD_PE_Notification>
 8001d66:	2010      	movs	r0, #16
 8001d68:	e0a0      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001d6a:	2133      	movs	r1, #51	@ 0x33
 8001d6c:	e09c      	b.n	8001ea8 <PE_Check_ControlMessage+0x1a4>
 8001d6e:	2006      	movs	r0, #6
 8001d70:	7720      	strb	r0, [r4, #28]
 8001d72:	6860      	ldr	r0, [r4, #4]
 8001d74:	6800      	ldr	r0, [r0, #0]
 8001d76:	0881      	lsrs	r1, r0, #2
 8001d78:	4029      	ands	r1, r5
 8001d7a:	d104      	bne.n	8001d86 <PE_Check_ControlMessage+0x82>
 8001d7c:	6821      	ldr	r1, [r4, #0]
 8001d7e:	6849      	ldr	r1, [r1, #4]
 8001d80:	08c9      	lsrs	r1, r1, #3
 8001d82:	4029      	ands	r1, r5
 8001d84:	d039      	beq.n	8001dfa <PE_Check_ControlMessage+0xf6>
 8001d86:	210c      	movs	r1, #12
 8001d88:	7c20      	ldrb	r0, [r4, #16]
 8001d8a:	f7fe fcad 	bl	80006e8 <USBPD_PE_Notification>
 8001d8e:	204c      	movs	r0, #76	@ 0x4c
 8001d90:	e08c      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001d92:	6820      	ldr	r0, [r4, #0]
 8001d94:	6840      	ldr	r0, [r0, #4]
 8001d96:	08c0      	lsrs	r0, r0, #3
 8001d98:	4028      	ands	r0, r5
 8001d9a:	d00a      	beq.n	8001db2 <PE_Check_ControlMessage+0xae>
 8001d9c:	2008      	movs	r0, #8
 8001d9e:	7720      	strb	r0, [r4, #28]
 8001da0:	213c      	movs	r1, #60	@ 0x3c
 8001da2:	7c20      	ldrb	r0, [r4, #16]
 8001da4:	f7fe fca0 	bl	80006e8 <USBPD_PE_Notification>
 8001da8:	2022      	movs	r0, #34	@ 0x22
 8001daa:	e07f      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001dac:	68a0      	ldr	r0, [r4, #8]
 8001dae:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d07d      	beq.n	8001eb0 <PE_Check_ControlMessage+0x1ac>
 8001db4:	2011      	movs	r0, #17
 8001db6:	7720      	strb	r0, [r4, #28]
 8001db8:	209d      	movs	r0, #157	@ 0x9d
 8001dba:	e077      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001dbc:	2123      	movs	r1, #35	@ 0x23
 8001dbe:	7c20      	ldrb	r0, [r4, #16]
 8001dc0:	f7fe fc92 	bl	80006e8 <USBPD_PE_Notification>
 8001dc4:	6960      	ldr	r0, [r4, #20]
 8001dc6:	05c0      	lsls	r0, r0, #23
 8001dc8:	0f40      	lsrs	r0, r0, #29
 8001dca:	d001      	beq.n	8001dd0 <PE_Check_ControlMessage+0xcc>
 8001dcc:	200f      	movs	r0, #15
 8001dce:	e06d      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001dd0:	68a0      	ldr	r0, [r4, #8]
 8001dd2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	d06b      	beq.n	8001eb0 <PE_Check_ControlMessage+0x1ac>
 8001dd8:	2010      	movs	r0, #16
 8001dda:	7720      	strb	r0, [r4, #28]
 8001ddc:	2093      	movs	r0, #147	@ 0x93
 8001dde:	e065      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001de0:	6860      	ldr	r0, [r4, #4]
 8001de2:	6800      	ldr	r0, [r0, #0]
 8001de4:	0541      	lsls	r1, r0, #21
 8001de6:	0f49      	lsrs	r1, r1, #29
 8001de8:	2903      	cmp	r1, #3
 8001dea:	d163      	bne.n	8001eb4 <PE_Check_ControlMessage+0x1b0>
 8001dec:	0881      	lsrs	r1, r0, #2
 8001dee:	4029      	ands	r1, r5
 8001df0:	d004      	beq.n	8001dfc <PE_Check_ControlMessage+0xf8>
 8001df2:	6821      	ldr	r1, [r4, #0]
 8001df4:	6849      	ldr	r1, [r1, #4]
 8001df6:	08c9      	lsrs	r1, r1, #3
 8001df8:	4029      	ands	r1, r5
 8001dfa:	d05b      	beq.n	8001eb4 <PE_Check_ControlMessage+0x1b0>
 8001dfc:	2007      	movs	r0, #7
 8001dfe:	7720      	strb	r0, [r4, #28]
 8001e00:	201d      	movs	r0, #29
 8001e02:	7460      	strb	r0, [r4, #17]
 8001e04:	2106      	movs	r1, #6
 8001e06:	e04f      	b.n	8001ea8 <PE_Check_ControlMessage+0x1a4>
 8001e08:	6820      	ldr	r0, [r4, #0]
 8001e0a:	8901      	ldrh	r1, [r0, #8]
 8001e0c:	08c9      	lsrs	r1, r1, #3
 8001e0e:	4229      	tst	r1, r5
 8001e10:	d053      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e12:	6861      	ldr	r1, [r4, #4]
 8001e14:	6809      	ldr	r1, [r1, #0]
 8001e16:	0889      	lsrs	r1, r1, #2
 8001e18:	4029      	ands	r1, r5
 8001e1a:	d103      	bne.n	8001e24 <PE_Check_ControlMessage+0x120>
 8001e1c:	6840      	ldr	r0, [r0, #4]
 8001e1e:	08c0      	lsrs	r0, r0, #3
 8001e20:	4028      	ands	r0, r5
 8001e22:	d04a      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e24:	200a      	movs	r0, #10
 8001e26:	7720      	strb	r0, [r4, #28]
 8001e28:	2063      	movs	r0, #99	@ 0x63
 8001e2a:	7460      	strb	r0, [r4, #17]
 8001e2c:	2146      	movs	r1, #70	@ 0x46
 8001e2e:	e03b      	b.n	8001ea8 <PE_Check_ControlMessage+0x1a4>
 8001e30:	6860      	ldr	r0, [r4, #4]
 8001e32:	6800      	ldr	r0, [r0, #0]
 8001e34:	0880      	lsrs	r0, r0, #2
 8001e36:	4028      	ands	r0, r5
 8001e38:	d004      	beq.n	8001e44 <PE_Check_ControlMessage+0x140>
 8001e3a:	6820      	ldr	r0, [r4, #0]
 8001e3c:	6840      	ldr	r0, [r0, #4]
 8001e3e:	08c0      	lsrs	r0, r0, #3
 8001e40:	4028      	ands	r0, r5
 8001e42:	d03a      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e44:	205f      	movs	r0, #95	@ 0x5f
 8001e46:	7720      	strb	r0, [r4, #28]
 8001e48:	2064      	movs	r0, #100	@ 0x64
 8001e4a:	7460      	strb	r0, [r4, #17]
 8001e4c:	2160      	movs	r1, #96	@ 0x60
 8001e4e:	e02b      	b.n	8001ea8 <PE_Check_ControlMessage+0x1a4>
 8001e50:	6821      	ldr	r1, [r4, #0]
 8001e52:	8909      	ldrh	r1, [r1, #8]
 8001e54:	0949      	lsrs	r1, r1, #5
 8001e56:	4229      	tst	r1, r5
 8001e58:	d02f      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e5a:	7720      	strb	r0, [r4, #28]
 8001e5c:	214d      	movs	r1, #77	@ 0x4d
 8001e5e:	7c20      	ldrb	r0, [r4, #16]
 8001e60:	f7fe fc42 	bl	80006e8 <USBPD_PE_Notification>
 8001e64:	2030      	movs	r0, #48	@ 0x30
 8001e66:	e021      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001e68:	6821      	ldr	r1, [r4, #0]
 8001e6a:	8909      	ldrh	r1, [r1, #8]
 8001e6c:	0889      	lsrs	r1, r1, #2
 8001e6e:	4229      	tst	r1, r5
 8001e70:	d023      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e72:	7720      	strb	r0, [r4, #28]
 8001e74:	2149      	movs	r1, #73	@ 0x49
 8001e76:	7c20      	ldrb	r0, [r4, #16]
 8001e78:	f7fe fc36 	bl	80006e8 <USBPD_PE_Notification>
 8001e7c:	6860      	ldr	r0, [r4, #4]
 8001e7e:	6800      	ldr	r0, [r0, #0]
 8001e80:	0880      	lsrs	r0, r0, #2
 8001e82:	4005      	ands	r5, r0
 8001e84:	d011      	beq.n	8001eaa <PE_Check_ControlMessage+0x1a6>
 8001e86:	202d      	movs	r0, #45	@ 0x2d
 8001e88:	e010      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001e8a:	6820      	ldr	r0, [r4, #0]
 8001e8c:	8900      	ldrh	r0, [r0, #8]
 8001e8e:	09c0      	lsrs	r0, r0, #7
 8001e90:	4228      	tst	r0, r5
 8001e92:	d012      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e94:	202f      	movs	r0, #47	@ 0x2f
 8001e96:	e009      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001e98:	2009      	movs	r0, #9
 8001e9a:	7720      	strb	r0, [r4, #28]
 8001e9c:	e00d      	b.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e9e:	200f      	movs	r0, #15
 8001ea0:	7720      	strb	r0, [r4, #28]
 8001ea2:	204b      	movs	r0, #75	@ 0x4b
 8001ea4:	e002      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001ea6:	2159      	movs	r1, #89	@ 0x59
 8001ea8:	e00b      	b.n	8001ec2 <.text_21>
 8001eaa:	2011      	movs	r0, #17
 8001eac:	7460      	strb	r0, [r4, #17]
 8001eae:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001eb0:	6860      	ldr	r0, [r4, #4]
 8001eb2:	6800      	ldr	r0, [r0, #0]
 8001eb4:	4006      	ands	r6, r0
 8001eb6:	2e02      	cmp	r6, #2
 8001eb8:	d101      	bne.n	8001ebe <PE_Check_ControlMessage+0x1ba>
 8001eba:	7465      	strb	r5, [r4, #17]
 8001ebc:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001ebe:	7467      	strb	r7, [r4, #17]
 8001ec0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001ec2 <.text_21>:
 8001ec2:	7c20      	ldrb	r0, [r4, #16]
 8001ec4:	f7fe fc10 	bl	80006e8 <USBPD_PE_Notification>
 8001ec8:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001eca <PE_Check_DataMessage>:
 8001eca:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001ecc:	0004      	movs	r4, r0
 8001ece:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001ed0:	2501      	movs	r5, #1
 8001ed2:	2603      	movs	r6, #3
 8001ed4:	2700      	movs	r7, #0
 8001ed6:	06c1      	lsls	r1, r0, #27
 8001ed8:	0ec9      	lsrs	r1, r1, #27
 8001eda:	2901      	cmp	r1, #1
 8001edc:	d029      	beq.n	8001f32 <PE_Check_DataMessage+0x68>
 8001ede:	2902      	cmp	r1, #2
 8001ee0:	d00b      	beq.n	8001efa <PE_Check_DataMessage+0x30>
 8001ee2:	2903      	cmp	r1, #3
 8001ee4:	d03d      	beq.n	8001f62 <PE_Check_DataMessage+0x98>
 8001ee6:	2906      	cmp	r1, #6
 8001ee8:	d079      	beq.n	8001fde <PE_Check_DataMessage+0x114>
 8001eea:	2907      	cmp	r1, #7
 8001eec:	d100      	bne.n	8001ef0 <PE_Check_DataMessage+0x26>
 8001eee:	e085      	b.n	8001ffc <PE_Check_DataMessage+0x132>
 8001ef0:	290a      	cmp	r1, #10
 8001ef2:	d078      	beq.n	8001fe6 <PE_Check_DataMessage+0x11c>
 8001ef4:	290f      	cmp	r1, #15
 8001ef6:	d06e      	beq.n	8001fd6 <PE_Check_DataMessage+0x10c>
 8001ef8:	e089      	b.n	800200e <PE_Check_DataMessage+0x144>
 8001efa:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001efc:	7881      	ldrb	r1, [r0, #2]
 8001efe:	78c2      	ldrb	r2, [r0, #3]
 8001f00:	0212      	lsls	r2, r2, #8
 8001f02:	1889      	adds	r1, r1, r2
 8001f04:	7902      	ldrb	r2, [r0, #4]
 8001f06:	0412      	lsls	r2, r2, #16
 8001f08:	1889      	adds	r1, r1, r2
 8001f0a:	7940      	ldrb	r0, [r0, #5]
 8001f0c:	0600      	lsls	r0, r0, #24
 8001f0e:	1808      	adds	r0, r1, r0
 8001f10:	9000      	str	r0, [sp, #0]
 8001f12:	6860      	ldr	r0, [r4, #4]
 8001f14:	6800      	ldr	r0, [r0, #0]
 8001f16:	0880      	lsrs	r0, r0, #2
 8001f18:	4028      	ands	r0, r5
 8001f1a:	d07a      	beq.n	8002012 <PE_Check_DataMessage+0x148>
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	466a      	mov	r2, sp
 8001f20:	2106      	movs	r1, #6
 8001f22:	7c20      	ldrb	r0, [r4, #16]
 8001f24:	68a6      	ldr	r6, [r4, #8]
 8001f26:	69b6      	ldr	r6, [r6, #24]
 8001f28:	47b0      	blx	r6
 8001f2a:	7725      	strb	r5, [r4, #28]
 8001f2c:	84a7      	strh	r7, [r4, #36]	@ 0x24
 8001f2e:	2009      	movs	r0, #9
 8001f30:	e06e      	b.n	8002010 <PE_Check_DataMessage+0x146>
 8001f32:	6861      	ldr	r1, [r4, #4]
 8001f34:	6809      	ldr	r1, [r1, #0]
 8001f36:	0889      	lsrs	r1, r1, #2
 8001f38:	400d      	ands	r5, r1
 8001f3a:	d16a      	bne.n	8002012 <PE_Check_DataMessage+0x148>
 8001f3c:	0980      	lsrs	r0, r0, #6
 8001f3e:	4006      	ands	r6, r0
 8001f40:	0031      	movs	r1, r6
 8001f42:	7c20      	ldrb	r0, [r4, #16]
 8001f44:	f7fe ff8a 	bl	8000e5c <PE_ExtRevisionInteroperability>
 8001f48:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001f4a:	0440      	lsls	r0, r0, #17
 8001f4c:	0f40      	lsrs	r0, r0, #29
 8001f4e:	0083      	lsls	r3, r0, #2
 8001f50:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001f52:	1c82      	adds	r2, r0, #2
 8001f54:	2104      	movs	r1, #4
 8001f56:	7c20      	ldrb	r0, [r4, #16]
 8001f58:	68a5      	ldr	r5, [r4, #8]
 8001f5a:	69ad      	ldr	r5, [r5, #24]
 8001f5c:	47a8      	blx	r5
 8001f5e:	2044      	movs	r0, #68	@ 0x44
 8001f60:	e056      	b.n	8002010 <PE_Check_DataMessage+0x146>
 8001f62:	9701      	str	r7, [sp, #4]
 8001f64:	9700      	str	r7, [sp, #0]
 8001f66:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001f68:	7881      	ldrb	r1, [r0, #2]
 8001f6a:	78c2      	ldrb	r2, [r0, #3]
 8001f6c:	0212      	lsls	r2, r2, #8
 8001f6e:	1889      	adds	r1, r1, r2
 8001f70:	7902      	ldrb	r2, [r0, #4]
 8001f72:	0412      	lsls	r2, r2, #16
 8001f74:	1889      	adds	r1, r1, r2
 8001f76:	7940      	ldrb	r0, [r0, #5]
 8001f78:	0600      	lsls	r0, r0, #24
 8001f7a:	180d      	adds	r5, r1, r0
 8001f7c:	466b      	mov	r3, sp
 8001f7e:	aa01      	add	r2, sp, #4
 8001f80:	2103      	movs	r1, #3
 8001f82:	7c20      	ldrb	r0, [r4, #16]
 8001f84:	68a7      	ldr	r7, [r4, #8]
 8001f86:	697f      	ldr	r7, [r7, #20]
 8001f88:	47b8      	blx	r7
 8001f8a:	2104      	movs	r1, #4
 8001f8c:	9800      	ldr	r0, [sp, #0]
 8001f8e:	f7ff fb91 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d11d      	bne.n	8001fd2 <PE_Check_DataMessage+0x108>
 8001f96:	6860      	ldr	r0, [r4, #4]
 8001f98:	6800      	ldr	r0, [r0, #0]
 8001f9a:	0540      	lsls	r0, r0, #21
 8001f9c:	0f40      	lsrs	r0, r0, #29
 8001f9e:	2803      	cmp	r0, #3
 8001fa0:	d117      	bne.n	8001fd2 <PE_Check_DataMessage+0x108>
 8001fa2:	9801      	ldr	r0, [sp, #4]
 8001fa4:	4938      	ldr	r1, [pc, #224]	@ (8002088 <.text_24>)
 8001fa6:	4288      	cmp	r0, r1
 8001fa8:	d113      	bne.n	8001fd2 <PE_Check_DataMessage+0x108>
 8001faa:	0f28      	lsrs	r0, r5, #28
 8001fac:	2805      	cmp	r0, #5
 8001fae:	d00e      	beq.n	8001fce <PE_Check_DataMessage+0x104>
 8001fb0:	2808      	cmp	r0, #8
 8001fb2:	d00a      	beq.n	8001fca <PE_Check_DataMessage+0x100>
 8001fb4:	2809      	cmp	r0, #9
 8001fb6:	d003      	beq.n	8001fc0 <PE_Check_DataMessage+0xf6>
 8001fb8:	280a      	cmp	r0, #10
 8001fba:	d12a      	bne.n	8002012 <PE_Check_DataMessage+0x148>
 8001fbc:	2166      	movs	r1, #102	@ 0x66
 8001fbe:	e000      	b.n	8001fc2 <PE_Check_DataMessage+0xf8>
 8001fc0:	2165      	movs	r1, #101	@ 0x65
 8001fc2:	7c20      	ldrb	r0, [r4, #16]
 8001fc4:	f7fe fb90 	bl	80006e8 <USBPD_PE_Notification>
 8001fc8:	e003      	b.n	8001fd2 <PE_Check_DataMessage+0x108>
 8001fca:	2029      	movs	r0, #41	@ 0x29
 8001fcc:	e020      	b.n	8002010 <PE_Check_DataMessage+0x146>
 8001fce:	2027      	movs	r0, #39	@ 0x27
 8001fd0:	e01e      	b.n	8002010 <PE_Check_DataMessage+0x146>
 8001fd2:	7466      	strb	r6, [r4, #17]
 8001fd4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001fd6:	0020      	movs	r0, r4
 8001fd8:	f003 fabe 	bl	8005558 <PE_Check_DataMessageVDM>
 8001fdc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001fde:	6820      	ldr	r0, [r4, #0]
 8001fe0:	8900      	ldrh	r0, [r0, #8]
 8001fe2:	0900      	lsrs	r0, r0, #4
 8001fe4:	4228      	tst	r0, r5
 8001fe6:	d010      	beq.n	800200a <PE_Check_DataMessage+0x140>
 8001fe8:	2304      	movs	r3, #4
 8001fea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001fec:	1c82      	adds	r2, r0, #2
 8001fee:	210b      	movs	r1, #11
 8001ff0:	7c20      	ldrb	r0, [r4, #16]
 8001ff2:	68a5      	ldr	r5, [r4, #8]
 8001ff4:	69ad      	ldr	r5, [r5, #24]
 8001ff6:	47a8      	blx	r5
 8001ff8:	202c      	movs	r0, #44	@ 0x2c
 8001ffa:	e009      	b.n	8002010 <PE_Check_DataMessage+0x146>
 8001ffc:	6820      	ldr	r0, [r4, #0]
 8001ffe:	8900      	ldrh	r0, [r0, #8]
 8002000:	0a00      	lsrs	r0, r0, #8
 8002002:	4228      	tst	r0, r5
 8002004:	d001      	beq.n	800200a <PE_Check_DataMessage+0x140>
 8002006:	203d      	movs	r0, #61	@ 0x3d
 8002008:	e002      	b.n	8002010 <PE_Check_DataMessage+0x146>
 800200a:	7465      	strb	r5, [r4, #17]
 800200c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800200e:	2011      	movs	r0, #17
 8002010:	7460      	strb	r0, [r4, #17]
 8002012:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08002014 <PE_CheckSendMessageStatus>:
 8002014:	b510      	push	{r4, lr}
 8002016:	000c      	movs	r4, r1
 8002018:	2110      	movs	r1, #16
 800201a:	2b05      	cmp	r3, #5
 800201c:	d006      	beq.n	800202c <PE_CheckSendMessageStatus+0x18>
 800201e:	2b06      	cmp	r3, #6
 8002020:	d00e      	beq.n	8002040 <PE_CheckSendMessageStatus+0x2c>
 8002022:	2b07      	cmp	r3, #7
 8002024:	d011      	beq.n	800204a <PE_CheckSendMessageStatus+0x36>
 8002026:	2b09      	cmp	r3, #9
 8002028:	d008      	beq.n	800203c <PE_CheckSendMessageStatus+0x28>
 800202a:	e02a      	b.n	8002082 <PE_CheckSendMessageStatus+0x6e>
 800202c:	9902      	ldr	r1, [sp, #8]
 800202e:	7441      	strb	r1, [r0, #17]
 8002030:	6941      	ldr	r1, [r0, #20]
 8002032:	4a16      	ldr	r2, [pc, #88]	@ (800208c <.text_25>)
 8002034:	400a      	ands	r2, r1
 8002036:	6142      	str	r2, [r0, #20]
 8002038:	2100      	movs	r1, #0
 800203a:	e022      	b.n	8002082 <PE_CheckSendMessageStatus+0x6e>
 800203c:	2109      	movs	r1, #9
 800203e:	e020      	b.n	8002082 <PE_CheckSendMessageStatus+0x6e>
 8002040:	6942      	ldr	r2, [r0, #20]
 8002042:	024b      	lsls	r3, r1, #9
 8002044:	4313      	orrs	r3, r2
 8002046:	6143      	str	r3, [r0, #20]
 8002048:	e01b      	b.n	8002082 <PE_CheckSendMessageStatus+0x6e>
 800204a:	2c00      	cmp	r4, #0
 800204c:	d005      	beq.n	800205a <PE_CheckSendMessageStatus+0x46>
 800204e:	2a01      	cmp	r2, #1
 8002050:	d101      	bne.n	8002056 <PE_CheckSendMessageStatus+0x42>
 8002052:	2299      	movs	r2, #153	@ 0x99
 8002054:	e014      	b.n	8002080 <PE_CheckSendMessageStatus+0x6c>
 8002056:	2107      	movs	r1, #7
 8002058:	e013      	b.n	8002082 <PE_CheckSendMessageStatus+0x6e>
 800205a:	6844      	ldr	r4, [r0, #4]
 800205c:	6824      	ldr	r4, [r4, #0]
 800205e:	0a24      	lsrs	r4, r4, #8
 8002060:	4023      	ands	r3, r4
 8002062:	2b04      	cmp	r3, #4
 8002064:	d003      	beq.n	800206e <PE_CheckSendMessageStatus+0x5a>
 8002066:	2a01      	cmp	r2, #1
 8002068:	d109      	bne.n	800207e <PE_CheckSendMessageStatus+0x6a>
 800206a:	220f      	movs	r2, #15
 800206c:	e008      	b.n	8002080 <PE_CheckSendMessageStatus+0x6c>
 800206e:	2a00      	cmp	r2, #0
 8002070:	d1fb      	bne.n	800206a <PE_CheckSendMessageStatus+0x56>
 8002072:	6882      	ldr	r2, [r0, #8]
 8002074:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002076:	2a00      	cmp	r2, #0
 8002078:	d0f7      	beq.n	800206a <PE_CheckSendMessageStatus+0x56>
 800207a:	2292      	movs	r2, #146	@ 0x92
 800207c:	e000      	b.n	8002080 <PE_CheckSendMessageStatus+0x6c>
 800207e:	2211      	movs	r2, #17
 8002080:	7442      	strb	r2, [r0, #17]
 8002082:	0008      	movs	r0, r1
 8002084:	bd10      	pop	{r4, pc}
	...

08002088 <.text_24>:
 8002088:	00001388 	.word	0x00001388

0800208c <.text_25>:
 800208c:	ffffbfff 	.word	0xffffbfff

08002090 <USBPD_PE_StateMachine_SNK>:
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002092:	b08c      	sub	sp, #48	@ 0x30
 8002094:	0004      	movs	r4, r0
 8002096:	4828      	ldr	r0, [pc, #160]	@ (8002138 <USBPD_PE_StateMachine_SNK+0xa8>)
 8002098:	00a1      	lsls	r1, r4, #2
 800209a:	5845      	ldr	r5, [r0, r1]
 800209c:	7c68      	ldrb	r0, [r5, #17]
 800209e:	2848      	cmp	r0, #72	@ 0x48
 80020a0:	d133      	bne.n	800210a <USBPD_PE_StateMachine_SNK+0x7a>
 80020a2:	0028      	movs	r0, r5
 80020a4:	f7fe fe72 	bl	8000d8c <PE_Reset_ZI>
 80020a8:	0028      	movs	r0, r5
 80020aa:	f7fe fea5 	bl	8000df8 <PE_Reset_Counter>
 80020ae:	6828      	ldr	r0, [r5, #0]
 80020b0:	7900      	ldrb	r0, [r0, #4]
 80020b2:	0783      	lsls	r3, r0, #30
 80020b4:	0f9b      	lsrs	r3, r3, #30
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	7c28      	ldrb	r0, [r5, #16]
 80020bc:	f003 fc35 	bl	800592a <USBPD_PRL_SetHeader>
 80020c0:	6868      	ldr	r0, [r5, #4]
 80020c2:	6801      	ldr	r1, [r0, #0]
 80020c4:	2208      	movs	r2, #8
 80020c6:	4391      	bics	r1, r2
 80020c8:	6001      	str	r1, [r0, #0]
 80020ca:	6868      	ldr	r0, [r5, #4]
 80020cc:	6801      	ldr	r1, [r0, #0]
 80020ce:	2203      	movs	r2, #3
 80020d0:	4391      	bics	r1, r2
 80020d2:	682a      	ldr	r2, [r5, #0]
 80020d4:	7912      	ldrb	r2, [r2, #4]
 80020d6:	0792      	lsls	r2, r2, #30
 80020d8:	0f92      	lsrs	r2, r2, #30
 80020da:	430a      	orrs	r2, r1
 80020dc:	6002      	str	r2, [r0, #0]
 80020de:	2101      	movs	r1, #1
 80020e0:	7c28      	ldrb	r0, [r5, #16]
 80020e2:	f003 fc93 	bl	8005a0c <USBPD_PRL_SOPCapability>
 80020e6:	7c28      	ldrb	r0, [r5, #16]
 80020e8:	f003 fefc 	bl	8005ee4 <USBPD_PRL_Reset>
 80020ec:	203e      	movs	r0, #62	@ 0x3e
 80020ee:	7468      	strb	r0, [r5, #17]
 80020f0:	7ca9      	ldrb	r1, [r5, #18]
 80020f2:	293e      	cmp	r1, #62	@ 0x3e
 80020f4:	d009      	beq.n	800210a <USBPD_PE_StateMachine_SNK+0x7a>
 80020f6:	74a8      	strb	r0, [r5, #18]
 80020f8:	2000      	movs	r0, #0
 80020fa:	9000      	str	r0, [sp, #0]
 80020fc:	2300      	movs	r3, #0
 80020fe:	223e      	movs	r2, #62	@ 0x3e
 8002100:	7c29      	ldrb	r1, [r5, #16]
 8002102:	2004      	movs	r0, #4
 8002104:	4eb1      	ldr	r6, [pc, #708]	@ (80023cc <__iar_annotation$$branch+0x4>)
 8002106:	6836      	ldr	r6, [r6, #0]
 8002108:	47b0      	blx	r6
 800210a:	6968      	ldr	r0, [r5, #20]
 800210c:	0341      	lsls	r1, r0, #13
 800210e:	0fc9      	lsrs	r1, r1, #31
 8002110:	d006      	beq.n	8002120 <USBPD_PE_StateMachine_SNK+0x90>
 8002112:	49af      	ldr	r1, [pc, #700]	@ (80023d0 <__iar_annotation$$branch+0x8>)
 8002114:	4001      	ands	r1, r0
 8002116:	6169      	str	r1, [r5, #20]
 8002118:	2164      	movs	r1, #100	@ 0x64
 800211a:	7c28      	ldrb	r0, [r5, #16]
 800211c:	f7fe fae4 	bl	80006e8 <USBPD_PE_Notification>
 8002120:	0028      	movs	r0, r5
 8002122:	f7fe fd15 	bl	8000b50 <PE_Get_RxEvent>
 8002126:	4669      	mov	r1, sp
 8002128:	7308      	strb	r0, [r1, #12]
 800212a:	4668      	mov	r0, sp
 800212c:	7b00      	ldrb	r0, [r0, #12]
 800212e:	2803      	cmp	r0, #3
 8002130:	d104      	bne.n	800213c <USBPD_PE_StateMachine_SNK+0xac>
 8002132:	2001      	movs	r0, #1
 8002134:	b00d      	add	sp, #52	@ 0x34
 8002136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002138:	2000027c 	.word	0x2000027c
 800213c:	4668      	mov	r0, sp
 800213e:	7344      	strb	r4, [r0, #13]
 8002140:	2402      	movs	r4, #2
 8002142:	6868      	ldr	r0, [r5, #4]
 8002144:	6800      	ldr	r0, [r0, #0]
 8002146:	04c1      	lsls	r1, r0, #19
 8002148:	0fc9      	lsrs	r1, r1, #31
 800214a:	d100      	bne.n	800214e <USBPD_PE_StateMachine_SNK+0xbe>
 800214c:	e148      	b.n	80023e0 <__iar_annotation$$branch+0x18>
 800214e:	6968      	ldr	r0, [r5, #20]
 8002150:	0381      	lsls	r1, r0, #14
 8002152:	0fc9      	lsrs	r1, r1, #31
 8002154:	d014      	beq.n	8002180 <USBPD_PE_StateMachine_SNK+0xf0>
 8002156:	21a7      	movs	r1, #167	@ 0xa7
 8002158:	7469      	strb	r1, [r5, #17]
 800215a:	4a9e      	ldr	r2, [pc, #632]	@ (80023d4 <__iar_annotation$$branch+0xc>)
 800215c:	4002      	ands	r2, r0
 800215e:	616a      	str	r2, [r5, #20]
 8002160:	2000      	movs	r0, #0
 8002162:	2232      	movs	r2, #50	@ 0x32
 8002164:	54a8      	strb	r0, [r5, r2]
 8002166:	7ca8      	ldrb	r0, [r5, #18]
 8002168:	28a7      	cmp	r0, #167	@ 0xa7
 800216a:	d02b      	beq.n	80021c4 <USBPD_PE_StateMachine_SNK+0x134>
 800216c:	74a9      	strb	r1, [r5, #18]
 800216e:	2000      	movs	r0, #0
 8002170:	9000      	str	r0, [sp, #0]
 8002172:	2300      	movs	r3, #0
 8002174:	22a7      	movs	r2, #167	@ 0xa7
 8002176:	7c29      	ldrb	r1, [r5, #16]
 8002178:	2004      	movs	r0, #4
 800217a:	4e94      	ldr	r6, [pc, #592]	@ (80023cc <__iar_annotation$$branch+0x4>)
 800217c:	6836      	ldr	r6, [r6, #0]
 800217e:	47b0      	blx	r6
 8002180:	2032      	movs	r0, #50	@ 0x32
 8002182:	5c28      	ldrb	r0, [r5, r0]
 8002184:	280f      	cmp	r0, #15
 8002186:	d001      	beq.n	800218c <USBPD_PE_StateMachine_SNK+0xfc>
 8002188:	2814      	cmp	r0, #20
 800218a:	d11b      	bne.n	80021c4 <USBPD_PE_StateMachine_SNK+0x134>
 800218c:	4668      	mov	r0, sp
 800218e:	7b00      	ldrb	r0, [r0, #12]
 8002190:	2814      	cmp	r0, #20
 8002192:	d005      	beq.n	80021a0 <USBPD_PE_StateMachine_SNK+0x110>
 8002194:	2014      	movs	r0, #20
 8002196:	4669      	mov	r1, sp
 8002198:	7308      	strb	r0, [r1, #12]
 800219a:	0028      	movs	r0, r5
 800219c:	f7fe fd0f 	bl	8000bbe <PE_Clear_RxEvent>
 80021a0:	2032      	movs	r0, #50	@ 0x32
 80021a2:	5c2a      	ldrb	r2, [r5, r0]
 80021a4:	746a      	strb	r2, [r5, #17]
 80021a6:	2000      	movs	r0, #0
 80021a8:	2132      	movs	r1, #50	@ 0x32
 80021aa:	5468      	strb	r0, [r5, r1]
 80021ac:	7ca8      	ldrb	r0, [r5, #18]
 80021ae:	4290      	cmp	r0, r2
 80021b0:	d008      	beq.n	80021c4 <USBPD_PE_StateMachine_SNK+0x134>
 80021b2:	74aa      	strb	r2, [r5, #18]
 80021b4:	2000      	movs	r0, #0
 80021b6:	9000      	str	r0, [sp, #0]
 80021b8:	2300      	movs	r3, #0
 80021ba:	7c29      	ldrb	r1, [r5, #16]
 80021bc:	2004      	movs	r0, #4
 80021be:	4e83      	ldr	r6, [pc, #524]	@ (80023cc <__iar_annotation$$branch+0x4>)
 80021c0:	6836      	ldr	r6, [r6, #0]
 80021c2:	47b0      	blx	r6
 80021c4:	4668      	mov	r0, sp
 80021c6:	7b00      	ldrb	r0, [r0, #12]
 80021c8:	2811      	cmp	r0, #17
 80021ca:	d11f      	bne.n	800220c <USBPD_PE_StateMachine_SNK+0x17c>
 80021cc:	6868      	ldr	r0, [r5, #4]
 80021ce:	6800      	ldr	r0, [r0, #0]
 80021d0:	0701      	lsls	r1, r0, #28
 80021d2:	0fc9      	lsrs	r1, r1, #31
 80021d4:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80021d6:	0680      	lsls	r0, r0, #26
 80021d8:	0fc2      	lsrs	r2, r0, #31
 80021da:	4291      	cmp	r1, r2
 80021dc:	d116      	bne.n	800220c <USBPD_PE_StateMachine_SNK+0x17c>
 80021de:	2014      	movs	r0, #20
 80021e0:	4669      	mov	r1, sp
 80021e2:	7308      	strb	r0, [r1, #12]
 80021e4:	0028      	movs	r0, r5
 80021e6:	f7fe fcea 	bl	8000bbe <PE_Clear_RxEvent>
 80021ea:	2092      	movs	r0, #146	@ 0x92
 80021ec:	7468      	strb	r0, [r5, #17]
 80021ee:	7ca8      	ldrb	r0, [r5, #18]
 80021f0:	2892      	cmp	r0, #146	@ 0x92
 80021f2:	d100      	bne.n	80021f6 <USBPD_PE_StateMachine_SNK+0x166>
 80021f4:	e104      	b.n	8002400 <__iar_annotation$$branch+0x38>
 80021f6:	2092      	movs	r0, #146	@ 0x92
 80021f8:	74a8      	strb	r0, [r5, #18]
 80021fa:	2000      	movs	r0, #0
 80021fc:	9000      	str	r0, [sp, #0]
 80021fe:	2300      	movs	r3, #0
 8002200:	2292      	movs	r2, #146	@ 0x92
 8002202:	7c29      	ldrb	r1, [r5, #16]
 8002204:	2004      	movs	r0, #4
 8002206:	4e71      	ldr	r6, [pc, #452]	@ (80023cc <__iar_annotation$$branch+0x4>)
 8002208:	6836      	ldr	r6, [r6, #0]
 800220a:	47b0      	blx	r6
 800220c:	7c68      	ldrb	r0, [r5, #17]
 800220e:	4669      	mov	r1, sp
 8002210:	7008      	strb	r0, [r1, #0]
 8002212:	4f71      	ldr	r7, [pc, #452]	@ (80023d8 <__iar_annotation$$branch+0x10>)
 8002214:	20f0      	movs	r0, #240	@ 0xf0
 8002216:	0200      	lsls	r0, r0, #8
 8002218:	4e70      	ldr	r6, [pc, #448]	@ (80023dc <__iar_annotation$$branch+0x14>)
 800221a:	2104      	movs	r1, #4
 800221c:	466a      	mov	r2, sp
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	2a00      	cmp	r2, #0
 8002222:	d100      	bne.n	8002226 <USBPD_PE_StateMachine_SNK+0x196>
 8002224:	e0e0      	b.n	80023e8 <__iar_annotation$$branch+0x20>
 8002226:	1e52      	subs	r2, r2, #1
 8002228:	d040      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 800222a:	1e92      	subs	r2, r2, #2
 800222c:	2a01      	cmp	r2, #1
 800222e:	d800      	bhi.n	8002232 <USBPD_PE_StateMachine_SNK+0x1a2>
 8002230:	e323      	b.n	800287a <__iar_annotation$$branch+0x4b2>
 8002232:	1e92      	subs	r2, r2, #2
 8002234:	d100      	bne.n	8002238 <USBPD_PE_StateMachine_SNK+0x1a8>
 8002236:	e1fb      	b.n	8002630 <__iar_annotation$$branch+0x268>
 8002238:	3a0a      	subs	r2, #10
 800223a:	d100      	bne.n	800223e <USBPD_PE_StateMachine_SNK+0x1ae>
 800223c:	e1fd      	b.n	800263a <__iar_annotation$$branch+0x272>
 800223e:	1e52      	subs	r2, r2, #1
 8002240:	d100      	bne.n	8002244 <USBPD_PE_StateMachine_SNK+0x1b4>
 8002242:	e299      	b.n	8002778 <__iar_annotation$$branch+0x3b0>
 8002244:	1e52      	subs	r2, r2, #1
 8002246:	d100      	bne.n	800224a <USBPD_PE_StateMachine_SNK+0x1ba>
 8002248:	e2a3      	b.n	8002792 <__iar_annotation$$branch+0x3ca>
 800224a:	1ed2      	subs	r2, r2, #3
 800224c:	d100      	bne.n	8002250 <USBPD_PE_StateMachine_SNK+0x1c0>
 800224e:	e228      	b.n	80026a2 <__iar_annotation$$branch+0x2da>
 8002250:	1f12      	subs	r2, r2, #4
 8002252:	2a01      	cmp	r2, #1
 8002254:	d92a      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 8002256:	1e92      	subs	r2, r2, #2
 8002258:	d100      	bne.n	800225c <USBPD_PE_StateMachine_SNK+0x1cc>
 800225a:	e2d2      	b.n	8002802 <__iar_annotation$$branch+0x43a>
 800225c:	1ed2      	subs	r2, r2, #3
 800225e:	d025      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 8002260:	1e52      	subs	r2, r2, #1
 8002262:	d100      	bne.n	8002266 <USBPD_PE_StateMachine_SNK+0x1d6>
 8002264:	e3c3      	b.n	80029ee <__iar_annotation$$branch+0x626>
 8002266:	1f12      	subs	r2, r2, #4
 8002268:	d100      	bne.n	800226c <USBPD_PE_StateMachine_SNK+0x1dc>
 800226a:	e316      	b.n	800289a <__iar_annotation$$branch+0x4d2>
 800226c:	1f52      	subs	r2, r2, #5
 800226e:	2a02      	cmp	r2, #2
 8002270:	d91c      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 8002272:	1ed2      	subs	r2, r2, #3
 8002274:	d100      	bne.n	8002278 <USBPD_PE_StateMachine_SNK+0x1e8>
 8002276:	e2f7      	b.n	8002868 <__iar_annotation$$branch+0x4a0>
 8002278:	1e52      	subs	r2, r2, #1
 800227a:	d101      	bne.n	8002280 <__iar_annotation$$branch+0x4>

0800227c <__iar_annotation$$branch>:
 800227c:	f000 fc39 	bl	8002af2 <__iar_annotation$$branch+0x72a>
 8002280:	1e52      	subs	r2, r2, #1
 8002282:	d013      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 8002284:	1e92      	subs	r2, r2, #2
 8002286:	d101      	bne.n	800228c <__iar_annotation$$branch+0x4>

08002288 <__iar_annotation$$branch>:
 8002288:	f000 fc80 	bl	8002b8c <__iar_annotation$$branch+0x7c4>
 800228c:	1e52      	subs	r2, r2, #1
 800228e:	2a01      	cmp	r2, #1
 8002290:	d90c      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 8002292:	1e92      	subs	r2, r2, #2
 8002294:	d001      	beq.n	800229a <__iar_annotation$$branch+0x12>
 8002296:	1e92      	subs	r2, r2, #2
 8002298:	2a05      	cmp	r2, #5
 800229a:	d801      	bhi.n	80022a0 <__iar_annotation$$branch+0x4>

0800229c <__iar_annotation$$branch>:
 800229c:	f000 fcbc 	bl	8002c18 <__iar_annotation$$branch+0x850>
 80022a0:	1f92      	subs	r2, r2, #6
 80022a2:	d101      	bne.n	80022a8 <__iar_annotation$$branch+0x4>

080022a4 <__iar_annotation$$branch>:
 80022a4:	f000 fc86 	bl	8002bb4 <__iar_annotation$$branch+0x7ec>
 80022a8:	1e52      	subs	r2, r2, #1
 80022aa:	2a03      	cmp	r2, #3
 80022ac:	d801      	bhi.n	80022b2 <__iar_annotation$$branch+0x4>

080022ae <__iar_annotation$$branch>:
 80022ae:	f000 fcb7 	bl	8002c20 <__iar_annotation$$branch+0x858>
 80022b2:	1f12      	subs	r2, r2, #4
 80022b4:	d100      	bne.n	80022b8 <__iar_annotation$$branch+0xa>
 80022b6:	e0af      	b.n	8002418 <__iar_annotation$$branch+0x50>
 80022b8:	1e92      	subs	r2, r2, #2
 80022ba:	d100      	bne.n	80022be <__iar_annotation$$branch+0x10>
 80022bc:	e221      	b.n	8002702 <__iar_annotation$$branch+0x33a>
 80022be:	1ed2      	subs	r2, r2, #3
 80022c0:	d100      	bne.n	80022c4 <__iar_annotation$$branch+0x16>
 80022c2:	e0c1      	b.n	8002448 <__iar_annotation$$branch+0x80>
 80022c4:	1e52      	subs	r2, r2, #1
 80022c6:	d100      	bne.n	80022ca <__iar_annotation$$branch+0x1c>
 80022c8:	e100      	b.n	80024cc <__iar_annotation$$branch+0x104>
 80022ca:	1e52      	subs	r2, r2, #1
 80022cc:	d100      	bne.n	80022d0 <__iar_annotation$$branch+0x22>
 80022ce:	e10f      	b.n	80024f0 <__iar_annotation$$branch+0x128>
 80022d0:	1e52      	subs	r2, r2, #1
 80022d2:	d100      	bne.n	80022d6 <__iar_annotation$$branch+0x28>
 80022d4:	e128      	b.n	8002528 <__iar_annotation$$branch+0x160>
 80022d6:	1e52      	subs	r2, r2, #1
 80022d8:	d100      	bne.n	80022dc <__iar_annotation$$branch+0x2e>
 80022da:	e178      	b.n	80025ce <__iar_annotation$$branch+0x206>
 80022dc:	1e92      	subs	r2, r2, #2
 80022de:	d0a6      	beq.n	800222e <USBPD_PE_StateMachine_SNK+0x19e>
 80022e0:	1e92      	subs	r2, r2, #2
 80022e2:	d0e3      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 80022e4:	1e52      	subs	r2, r2, #1
 80022e6:	d101      	bne.n	80022ec <__iar_annotation$$branch+0x4>

080022e8 <__iar_annotation$$branch>:
 80022e8:	f000 fbe5 	bl	8002ab6 <__iar_annotation$$branch+0x6ee>
 80022ec:	1f12      	subs	r2, r2, #4
 80022ee:	d100      	bne.n	80022f2 <__iar_annotation$$branch+0xa>
 80022f0:	e26a      	b.n	80027c8 <__iar_annotation$$branch+0x400>
 80022f2:	1ed2      	subs	r2, r2, #3
 80022f4:	d100      	bne.n	80022f8 <__iar_annotation$$branch+0x10>
 80022f6:	e334      	b.n	8002962 <__iar_annotation$$branch+0x59a>
 80022f8:	1f52      	subs	r2, r2, #5
 80022fa:	d100      	bne.n	80022fe <__iar_annotation$$branch+0x16>
 80022fc:	e388      	b.n	8002a10 <__iar_annotation$$branch+0x648>
 80022fe:	1e52      	subs	r2, r2, #1
 8002300:	d100      	bne.n	8002304 <__iar_annotation$$branch+0x1c>
 8002302:	e2ff      	b.n	8002904 <__iar_annotation$$branch+0x53c>
 8002304:	3a09      	subs	r2, #9
 8002306:	2a02      	cmp	r2, #2
 8002308:	d9d0      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 800230a:	1ed2      	subs	r2, r2, #3
 800230c:	d101      	bne.n	8002312 <__iar_annotation$$branch+0x4>

0800230e <__iar_annotation$$branch>:
 800230e:	f000 fc01 	bl	8002b14 <__iar_annotation$$branch+0x74c>
 8002312:	1e52      	subs	r2, r2, #1
 8002314:	d101      	bne.n	800231a <__iar_annotation$$branch+0x4>

08002316 <__iar_annotation$$branch>:
 8002316:	f000 fc0f 	bl	8002b38 <__iar_annotation$$branch+0x770>
 800231a:	1e52      	subs	r2, r2, #1
 800231c:	2a01      	cmp	r2, #1
 800231e:	d9c5      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 8002320:	3a0d      	subs	r2, #13
 8002322:	d0c3      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 8002324:	3a12      	subs	r2, #18
 8002326:	d101      	bne.n	800232c <__iar_annotation$$branch+0x4>

08002328 <__iar_annotation$$branch>:
 8002328:	f000 fc92 	bl	8002c50 <__iar_annotation$$branch+0x888>
 800232c:	3a0c      	subs	r2, #12
 800232e:	d067      	beq.n	8002400 <__iar_annotation$$branch+0x38>
 8002330:	1e52      	subs	r2, r2, #1
 8002332:	2a02      	cmp	r2, #2
 8002334:	d9ba      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 8002336:	1f52      	subs	r2, r2, #5
 8002338:	d100      	bne.n	800233c <__iar_annotation$$branch+0x14>
 800233a:	e271      	b.n	8002820 <__iar_annotation$$branch+0x458>
 800233c:	1e52      	subs	r2, r2, #1
 800233e:	d0b5      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 8002340:	1e52      	subs	r2, r2, #1
 8002342:	d100      	bne.n	8002346 <__iar_annotation$$branch+0x1e>
 8002344:	e174      	b.n	8002630 <__iar_annotation$$branch+0x268>
 8002346:	1e52      	subs	r2, r2, #1
 8002348:	d100      	bne.n	800234c <__iar_annotation$$branch+0x24>
 800234a:	e1be      	b.n	80026ca <__iar_annotation$$branch+0x302>
 800234c:	1e52      	subs	r2, r2, #1
 800234e:	2a08      	cmp	r2, #8
 8002350:	d801      	bhi.n	8002356 <__iar_annotation$$branch+0x4>

08002352 <__iar_annotation$$branch>:
 8002352:	f000 fc6a 	bl	8002c2a <__iar_annotation$$branch+0x862>
 8002356:	3a0b      	subs	r2, #11
 8002358:	d101      	bne.n	800235e <__iar_annotation$$branch+0x4>

0800235a <__iar_annotation$$branch>:
 800235a:	f000 fc7f 	bl	8002c5c <__iar_annotation$$branch+0x894>
 800235e:	a903      	add	r1, sp, #12
 8002360:	0028      	movs	r0, r5
 8002362:	f002 f9e3 	bl	800472c <PE_StateMachine_VDM>
 8002366:	0004      	movs	r4, r0
 8002368:	7c6a      	ldrb	r2, [r5, #17]
 800236a:	7ca8      	ldrb	r0, [r5, #18]
 800236c:	4290      	cmp	r0, r2
 800236e:	d008      	beq.n	8002382 <__iar_annotation$$branch+0x28>
 8002370:	74aa      	strb	r2, [r5, #18]
 8002372:	2000      	movs	r0, #0
 8002374:	9000      	str	r0, [sp, #0]
 8002376:	2300      	movs	r3, #0
 8002378:	7c29      	ldrb	r1, [r5, #16]
 800237a:	2004      	movs	r0, #4
 800237c:	4e13      	ldr	r6, [pc, #76]	@ (80023cc <__iar_annotation$$branch+0x4>)
 800237e:	6836      	ldr	r6, [r6, #0]
 8002380:	47b0      	blx	r6
 8002382:	4e12      	ldr	r6, [pc, #72]	@ (80023cc <__iar_annotation$$branch+0x4>)
 8002384:	4668      	mov	r0, sp
 8002386:	7b00      	ldrb	r0, [r0, #12]
 8002388:	2814      	cmp	r0, #20
 800238a:	d101      	bne.n	8002390 <__iar_annotation$$branch+0x4>

0800238c <__iar_annotation$$branch>:
 800238c:	f000 fc73 	bl	8002c76 <__iar_annotation$$branch+0x8ae>
 8002390:	0028      	movs	r0, r5
 8002392:	f7fe fc5b 	bl	8000c4c <PE_Check_AMSConflict>
 8002396:	2815      	cmp	r0, #21
 8002398:	d109      	bne.n	80023ae <__iar_annotation$$branch+0x22>
 800239a:	4668      	mov	r0, sp
 800239c:	7b00      	ldrb	r0, [r0, #12]
 800239e:	2814      	cmp	r0, #20
 80023a0:	d005      	beq.n	80023ae <__iar_annotation$$branch+0x22>
 80023a2:	2014      	movs	r0, #20
 80023a4:	4669      	mov	r1, sp
 80023a6:	7308      	strb	r0, [r1, #12]
 80023a8:	0028      	movs	r0, r5
 80023aa:	f7fe fc08 	bl	8000bbe <PE_Clear_RxEvent>
 80023ae:	7c6a      	ldrb	r2, [r5, #17]
 80023b0:	7ca8      	ldrb	r0, [r5, #18]
 80023b2:	4290      	cmp	r0, r2
 80023b4:	d007      	beq.n	80023c6 <__iar_annotation$$branch+0x3a>
 80023b6:	74aa      	strb	r2, [r5, #18]
 80023b8:	2000      	movs	r0, #0
 80023ba:	9000      	str	r0, [sp, #0]
 80023bc:	2300      	movs	r3, #0
 80023be:	7c29      	ldrb	r1, [r5, #16]
 80023c0:	2004      	movs	r0, #4
 80023c2:	6834      	ldr	r4, [r6, #0]
 80023c4:	47a0      	blx	r4
 80023c6:	2400      	movs	r4, #0

080023c8 <__iar_annotation$$branch>:
 80023c8:	f000 fc74 	bl	8002cb4 <__iar_annotation$$branch+0x8ec>
 80023cc:	20000000 	.word	0x20000000
 80023d0:	fffbffff 	.word	0xfffbffff
 80023d4:	fffdffff 	.word	0xfffdffff
 80023d8:	000081f4 	.word	0x000081f4
 80023dc:	0000801b 	.word	0x0000801b
 80023e0:	2400      	movs	r4, #0
 80023e2:	43e4      	mvns	r4, r4
 80023e4:	0020      	movs	r0, r4
 80023e6:	e6a5      	b.n	8002134 <USBPD_PE_StateMachine_SNK+0xa4>
 80023e8:	6868      	ldr	r0, [r5, #4]
 80023ea:	6801      	ldr	r1, [r0, #0]
 80023ec:	2210      	movs	r2, #16
 80023ee:	4391      	bics	r1, r2
 80023f0:	6001      	str	r1, [r0, #0]
 80023f2:	215f      	movs	r1, #95	@ 0x5f
 80023f4:	7c28      	ldrb	r0, [r5, #16]
 80023f6:	f7fe f977 	bl	80006e8 <USBPD_PE_Notification>
 80023fa:	2400      	movs	r4, #0
 80023fc:	43e4      	mvns	r4, r4
 80023fe:	e7b3      	b.n	8002368 <__iar_annotation$$branch+0xe>
 8002400:	6868      	ldr	r0, [r5, #4]
 8002402:	6801      	ldr	r1, [r0, #0]
 8002404:	2210      	movs	r2, #16
 8002406:	4391      	bics	r1, r2
 8002408:	6001      	str	r1, [r0, #0]
 800240a:	68a8      	ldr	r0, [r5, #8]
 800240c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800240e:	2900      	cmp	r1, #0
 8002410:	d0f3      	beq.n	80023fa <__iar_annotation$$branch+0x32>
 8002412:	7c28      	ldrb	r0, [r5, #16]
 8002414:	4788      	blx	r1
 8002416:	e7f0      	b.n	80023fa <__iar_annotation$$branch+0x32>
 8002418:	6868      	ldr	r0, [r5, #4]
 800241a:	6801      	ldr	r1, [r0, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	0b0b      	lsrs	r3, r1, #12
 8002420:	4013      	ands	r3, r2
 8002422:	d0a1      	beq.n	8002368 <__iar_annotation$$branch+0xe>
 8002424:	078b      	lsls	r3, r1, #30
 8002426:	0f9b      	lsrs	r3, r3, #30
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <__iar_annotation$$branch+0x68>
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <__iar_annotation$$branch+0x6a>
 8002430:	2320      	movs	r3, #32
 8002432:	2420      	movs	r4, #32
 8002434:	43a1      	bics	r1, r4
 8002436:	430b      	orrs	r3, r1
 8002438:	6003      	str	r3, [r0, #0]
 800243a:	772a      	strb	r2, [r5, #28]
 800243c:	83ef      	strh	r7, [r5, #30]
 800243e:	24fa      	movs	r4, #250	@ 0xfa
 8002440:	0064      	lsls	r4, r4, #1
 8002442:	2043      	movs	r0, #67	@ 0x43
 8002444:	7468      	strb	r0, [r5, #17]
 8002446:	e78f      	b.n	8002368 <__iar_annotation$$branch+0xe>
 8002448:	4668      	mov	r0, sp
 800244a:	7b00      	ldrb	r0, [r0, #12]
 800244c:	2811      	cmp	r0, #17
 800244e:	d135      	bne.n	80024bc <__iar_annotation$$branch+0xf4>
 8002450:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002452:	0bc2      	lsrs	r2, r0, #15
 8002454:	d12c      	bne.n	80024b0 <__iar_annotation$$branch+0xe8>
 8002456:	2607      	movs	r6, #7
 8002458:	0b02      	lsrs	r2, r0, #12
 800245a:	4232      	tst	r2, r6
 800245c:	d028      	beq.n	80024b0 <__iar_annotation$$branch+0xe8>
 800245e:	06c2      	lsls	r2, r0, #27
 8002460:	0ed2      	lsrs	r2, r2, #27
 8002462:	2a01      	cmp	r2, #1
 8002464:	d124      	bne.n	80024b0 <__iar_annotation$$branch+0xe8>
 8002466:	2200      	movs	r2, #0
 8002468:	4bc1      	ldr	r3, [pc, #772]	@ (8002770 <__iar_annotation$$branch+0x3a8>)
 800246a:	18eb      	adds	r3, r5, r3
 800246c:	709a      	strb	r2, [r3, #2]
 800246e:	696a      	ldr	r2, [r5, #20]
 8002470:	4311      	orrs	r1, r2
 8002472:	6169      	str	r1, [r5, #20]
 8002474:	0600      	lsls	r0, r0, #24
 8002476:	0f81      	lsrs	r1, r0, #30
 8002478:	4668      	mov	r0, sp
 800247a:	7b40      	ldrb	r0, [r0, #13]
 800247c:	f7fe fcee 	bl	8000e5c <PE_ExtRevisionInteroperability>
 8002480:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002482:	0b00      	lsrs	r0, r0, #12
 8002484:	4006      	ands	r6, r0
 8002486:	00b3      	lsls	r3, r6, #2
 8002488:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800248a:	1c82      	adds	r2, r0, #2
 800248c:	2104      	movs	r1, #4
 800248e:	7c28      	ldrb	r0, [r5, #16]
 8002490:	68ae      	ldr	r6, [r5, #8]
 8002492:	69b6      	ldr	r6, [r6, #24]
 8002494:	47b0      	blx	r6
 8002496:	2001      	movs	r0, #1
 8002498:	7728      	strb	r0, [r5, #28]
 800249a:	6868      	ldr	r0, [r5, #4]
 800249c:	6801      	ldr	r1, [r0, #0]
 800249e:	2210      	movs	r2, #16
 80024a0:	4391      	bics	r1, r2
 80024a2:	6001      	str	r1, [r0, #0]
 80024a4:	2044      	movs	r0, #68	@ 0x44
 80024a6:	7468      	strb	r0, [r5, #17]
 80024a8:	4668      	mov	r0, sp
 80024aa:	7b00      	ldrb	r0, [r0, #12]
 80024ac:	2814      	cmp	r0, #20
 80024ae:	d005      	beq.n	80024bc <__iar_annotation$$branch+0xf4>
 80024b0:	2014      	movs	r0, #20
 80024b2:	4669      	mov	r1, sp
 80024b4:	7308      	strb	r0, [r1, #12]
 80024b6:	0028      	movs	r0, r5
 80024b8:	f7fe fb81 	bl	8000bbe <PE_Clear_RxEvent>
 80024bc:	8be8      	ldrh	r0, [r5, #30]
 80024be:	03a1      	lsls	r1, r4, #14
 80024c0:	4288      	cmp	r0, r1
 80024c2:	d102      	bne.n	80024ca <__iar_annotation$$branch+0x102>
 80024c4:	200f      	movs	r0, #15
 80024c6:	7468      	strb	r0, [r5, #17]
 80024c8:	2400      	movs	r4, #0
 80024ca:	e74d      	b.n	8002368 <__iar_annotation$$branch+0xe>
 80024cc:	466a      	mov	r2, sp
 80024ce:	0029      	movs	r1, r5
 80024d0:	3118      	adds	r1, #24
 80024d2:	7c28      	ldrb	r0, [r5, #16]
 80024d4:	68ab      	ldr	r3, [r5, #8]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4798      	blx	r3
 80024da:	6968      	ldr	r0, [r5, #20]
 80024dc:	2118      	movs	r1, #24
 80024de:	4388      	bics	r0, r1
 80024e0:	9900      	ldr	r1, [sp, #0]
 80024e2:	00c9      	lsls	r1, r1, #3
 80024e4:	2218      	movs	r2, #24
 80024e6:	400a      	ands	r2, r1
 80024e8:	4302      	orrs	r2, r0
 80024ea:	616a      	str	r2, [r5, #20]
 80024ec:	2045      	movs	r0, #69	@ 0x45
 80024ee:	e7ea      	b.n	80024c6 <__iar_annotation$$branch+0xfe>
 80024f0:	6968      	ldr	r0, [r5, #20]
 80024f2:	0401      	lsls	r1, r0, #16
 80024f4:	0fc9      	lsrs	r1, r1, #31
 80024f6:	d001      	beq.n	80024fc <__iar_annotation$$branch+0x134>
 80024f8:	2002      	movs	r0, #2
 80024fa:	e000      	b.n	80024fe <__iar_annotation$$branch+0x136>
 80024fc:	2000      	movs	r0, #0
 80024fe:	9002      	str	r0, [sp, #8]
 8002500:	2046      	movs	r0, #70	@ 0x46
 8002502:	9001      	str	r0, [sp, #4]
 8002504:	2001      	movs	r0, #1
 8002506:	9000      	str	r0, [sp, #0]
 8002508:	002b      	movs	r3, r5
 800250a:	3318      	adds	r3, #24
 800250c:	2202      	movs	r2, #2
 800250e:	2100      	movs	r1, #0
 8002510:	0028      	movs	r0, r5
 8002512:	f7ff f95c 	bl	80017ce <PE_Send_DataMessage>
 8002516:	2800      	cmp	r0, #0
 8002518:	d105      	bne.n	8002526 <__iar_annotation$$branch+0x15e>
 800251a:	6968      	ldr	r0, [r5, #20]
 800251c:	4995      	ldr	r1, [pc, #596]	@ (8002774 <__iar_annotation$$branch+0x3ac>)
 800251e:	4001      	ands	r1, r0
 8002520:	6169      	str	r1, [r5, #20]
 8002522:	83ee      	strh	r6, [r5, #30]
 8002524:	241b      	movs	r4, #27
 8002526:	e71f      	b.n	8002368 <__iar_annotation$$branch+0xe>
 8002528:	4669      	mov	r1, sp
 800252a:	7b09      	ldrb	r1, [r1, #12]
 800252c:	2911      	cmp	r1, #17
 800252e:	d148      	bne.n	80025c2 <__iar_annotation$$branch+0x1fa>
 8002530:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8002532:	4201      	tst	r1, r0
 8002534:	d145      	bne.n	80025c2 <__iar_annotation$$branch+0x1fa>
 8002536:	20fa      	movs	r0, #250	@ 0xfa
 8002538:	0040      	lsls	r0, r0, #1
 800253a:	261f      	movs	r6, #31
 800253c:	221f      	movs	r2, #31
 800253e:	400a      	ands	r2, r1
 8002540:	1e92      	subs	r2, r2, #2
 8002542:	2a01      	cmp	r2, #1
 8002544:	d917      	bls.n	8002576 <__iar_annotation$$branch+0x1ae>
 8002546:	1e92      	subs	r2, r2, #2
 8002548:	d001      	beq.n	800254e <__iar_annotation$$branch+0x186>
 800254a:	3a08      	subs	r2, #8
 800254c:	d125      	bne.n	800259a <__iar_annotation$$branch+0x1d2>
 800254e:	686a      	ldr	r2, [r5, #4]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	0552      	lsls	r2, r2, #21
 8002554:	0f52      	lsrs	r2, r2, #29
 8002556:	2a03      	cmp	r2, #3
 8002558:	d004      	beq.n	8002564 <__iar_annotation$$branch+0x19c>
 800255a:	2143      	movs	r1, #67	@ 0x43
 800255c:	7469      	strb	r1, [r5, #17]
 800255e:	83ef      	strh	r7, [r5, #30]
 8002560:	0004      	movs	r4, r0
 8002562:	e014      	b.n	800258e <__iar_annotation$$branch+0x1c6>
 8002564:	4031      	ands	r1, r6
 8002566:	290c      	cmp	r1, #12
 8002568:	d101      	bne.n	800256e <__iar_annotation$$branch+0x1a6>
 800256a:	2049      	movs	r0, #73	@ 0x49
 800256c:	e000      	b.n	8002570 <__iar_annotation$$branch+0x1a8>
 800256e:	2003      	movs	r0, #3
 8002570:	7468      	strb	r0, [r5, #17]
 8002572:	2400      	movs	r4, #0
 8002574:	e00b      	b.n	800258e <__iar_annotation$$branch+0x1c6>
 8002576:	83ef      	strh	r7, [r5, #30]
 8002578:	0004      	movs	r4, r0
 800257a:	2104      	movs	r1, #4
 800257c:	0028      	movs	r0, r5
 800257e:	f7ff f846 	bl	800160e <PE_SetPowerNegotiation>
 8002582:	2047      	movs	r0, #71	@ 0x47
 8002584:	7468      	strb	r0, [r5, #17]
 8002586:	4668      	mov	r0, sp
 8002588:	7b00      	ldrb	r0, [r0, #12]
 800258a:	2814      	cmp	r0, #20
 800258c:	d005      	beq.n	800259a <__iar_annotation$$branch+0x1d2>
 800258e:	2014      	movs	r0, #20
 8002590:	4669      	mov	r1, sp
 8002592:	7308      	strb	r0, [r1, #12]
 8002594:	0028      	movs	r0, r5
 8002596:	f7fe fb12 	bl	8000bbe <PE_Clear_RxEvent>
 800259a:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 800259c:	4006      	ands	r6, r0
 800259e:	2e02      	cmp	r6, #2
 80025a0:	d009      	beq.n	80025b6 <__iar_annotation$$branch+0x1ee>
 80025a2:	2e03      	cmp	r6, #3
 80025a4:	d009      	beq.n	80025ba <__iar_annotation$$branch+0x1f2>
 80025a6:	2e04      	cmp	r6, #4
 80025a8:	d003      	beq.n	80025b2 <__iar_annotation$$branch+0x1ea>
 80025aa:	2e0c      	cmp	r6, #12
 80025ac:	d109      	bne.n	80025c2 <__iar_annotation$$branch+0x1fa>
 80025ae:	2103      	movs	r1, #3
 80025b0:	e004      	b.n	80025bc <__iar_annotation$$branch+0x1f4>
 80025b2:	2102      	movs	r1, #2
 80025b4:	e002      	b.n	80025bc <__iar_annotation$$branch+0x1f4>
 80025b6:	2104      	movs	r1, #4
 80025b8:	e000      	b.n	80025bc <__iar_annotation$$branch+0x1f4>
 80025ba:	2101      	movs	r1, #1
 80025bc:	7c28      	ldrb	r0, [r5, #16]
 80025be:	f7fe f893 	bl	80006e8 <USBPD_PE_Notification>
 80025c2:	8be8      	ldrh	r0, [r5, #30]
 80025c4:	2180      	movs	r1, #128	@ 0x80
 80025c6:	0209      	lsls	r1, r1, #8
 80025c8:	4288      	cmp	r0, r1
 80025ca:	d1ac      	bne.n	8002526 <__iar_annotation$$branch+0x15e>
 80025cc:	e77a      	b.n	80024c4 <__iar_annotation$$branch+0xfc>
 80025ce:	4668      	mov	r0, sp
 80025d0:	7b00      	ldrb	r0, [r0, #12]
 80025d2:	2811      	cmp	r0, #17
 80025d4:	d1f5      	bne.n	80025c2 <__iar_annotation$$branch+0x1fa>
 80025d6:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80025d8:	499f      	ldr	r1, [pc, #636]	@ (8002858 <__iar_annotation$$branch+0x490>)
 80025da:	4001      	ands	r1, r0
 80025dc:	2906      	cmp	r1, #6
 80025de:	d1f0      	bne.n	80025c2 <__iar_annotation$$branch+0x1fa>
 80025e0:	2014      	movs	r0, #20
 80025e2:	4669      	mov	r1, sp
 80025e4:	7308      	strb	r0, [r1, #12]
 80025e6:	0028      	movs	r0, r5
 80025e8:	f7fe fae9 	bl	8000bbe <PE_Clear_RxEvent>
 80025ec:	2103      	movs	r1, #3
 80025ee:	0028      	movs	r0, r5
 80025f0:	f7ff f80d 	bl	800160e <PE_SetPowerNegotiation>
 80025f4:	2110      	movs	r1, #16
 80025f6:	7c28      	ldrb	r0, [r5, #16]
 80025f8:	f7fe f876 	bl	80006e8 <USBPD_PE_Notification>
 80025fc:	6868      	ldr	r0, [r5, #4]
 80025fe:	6800      	ldr	r0, [r0, #0]
 8002600:	0401      	lsls	r1, r0, #16
 8002602:	0fc9      	lsrs	r1, r1, #31
 8002604:	d002      	beq.n	800260c <__iar_annotation$$branch+0x244>
 8002606:	6828      	ldr	r0, [r5, #0]
 8002608:	6801      	ldr	r1, [r0, #0]
 800260a:	e000      	b.n	800260e <__iar_annotation$$branch+0x246>
 800260c:	2101      	movs	r1, #1
 800260e:	4668      	mov	r0, sp
 8002610:	7b40      	ldrb	r0, [r0, #13]
 8002612:	f003 f9fb 	bl	8005a0c <USBPD_PRL_SOPCapability>
 8002616:	2000      	movs	r0, #0
 8002618:	84a8      	strh	r0, [r5, #36]	@ 0x24
 800261a:	2003      	movs	r0, #3
 800261c:	6969      	ldr	r1, [r5, #20]
 800261e:	08c9      	lsrs	r1, r1, #3
 8002620:	4001      	ands	r1, r0
 8002622:	2903      	cmp	r1, #3
 8002624:	d101      	bne.n	800262a <__iar_annotation$$branch+0x262>
 8002626:	498d      	ldr	r1, [pc, #564]	@ (800285c <__iar_annotation$$branch+0x494>)
 8002628:	84a9      	strh	r1, [r5, #36]	@ 0x24
 800262a:	7468      	strb	r0, [r5, #17]
 800262c:	2400      	movs	r4, #0
 800262e:	e7c8      	b.n	80025c2 <__iar_annotation$$branch+0x1fa>
 8002630:	a903      	add	r1, sp, #12
 8002632:	0028      	movs	r0, r5
 8002634:	f001 fbac 	bl	8003d90 <PE_StateMachine_VDMCable>
 8002638:	e695      	b.n	8002366 <__iar_annotation$$branch+0xc>
 800263a:	2601      	movs	r6, #1
 800263c:	6868      	ldr	r0, [r5, #4]
 800263e:	6800      	ldr	r0, [r0, #0]
 8002640:	0bc0      	lsrs	r0, r0, #15
 8002642:	4030      	ands	r0, r6
 8002644:	d006      	beq.n	8002654 <__iar_annotation$$branch+0x28c>
 8002646:	68a8      	ldr	r0, [r5, #8]
 8002648:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800264a:	2a00      	cmp	r2, #0
 800264c:	d002      	beq.n	8002654 <__iar_annotation$$branch+0x28c>
 800264e:	2100      	movs	r1, #0
 8002650:	7c28      	ldrb	r0, [r5, #16]
 8002652:	4790      	blx	r2
 8002654:	6868      	ldr	r0, [r5, #4]
 8002656:	6801      	ldr	r1, [r0, #0]
 8002658:	2210      	movs	r2, #16
 800265a:	4391      	bics	r1, r2
 800265c:	6001      	str	r1, [r0, #0]
 800265e:	2101      	movs	r1, #1
 8002660:	0028      	movs	r0, r5
 8002662:	f7fe ffd4 	bl	800160e <PE_SetPowerNegotiation>
 8002666:	4842      	ldr	r0, [pc, #264]	@ (8002770 <__iar_annotation$$branch+0x3a8>)
 8002668:	1829      	adds	r1, r5, r0
 800266a:	7888      	ldrb	r0, [r1, #2]
 800266c:	2803      	cmp	r0, #3
 800266e:	d309      	bcc.n	8002684 <__iar_annotation$$branch+0x2bc>
 8002670:	6968      	ldr	r0, [r5, #20]
 8002672:	0880      	lsrs	r0, r0, #2
 8002674:	4006      	ands	r6, r0
 8002676:	d003      	beq.n	8002680 <__iar_annotation$$branch+0x2b8>
 8002678:	68a8      	ldr	r0, [r5, #8]
 800267a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800267c:	2800      	cmp	r0, #0
 800267e:	d171      	bne.n	8002764 <__iar_annotation$$branch+0x39c>
 8002680:	2000      	movs	r0, #0
 8002682:	e6df      	b.n	8002444 <__iar_annotation$$branch+0x7c>
 8002684:	1c40      	adds	r0, r0, #1
 8002686:	7088      	strb	r0, [r1, #2]
 8002688:	2105      	movs	r1, #5
 800268a:	0028      	movs	r0, r5
 800268c:	f7fe fa32 	bl	8000af4 <PE_Send_RESET>
 8002690:	4873      	ldr	r0, [pc, #460]	@ (8002860 <__iar_annotation$$branch+0x498>)
 8002692:	83e8      	strh	r0, [r5, #30]
 8002694:	2201      	movs	r2, #1
 8002696:	2101      	movs	r1, #1
 8002698:	0028      	movs	r0, r5
 800269a:	f7fe ffaf 	bl	80015fc <PE_CallHardResetCallback>
 800269e:	209b      	movs	r0, #155	@ 0x9b
 80026a0:	e711      	b.n	80024c6 <__iar_annotation$$branch+0xfe>
 80026a2:	6868      	ldr	r0, [r5, #4]
 80026a4:	6800      	ldr	r0, [r0, #0]
 80026a6:	0401      	lsls	r1, r0, #16
 80026a8:	0fc9      	lsrs	r1, r1, #31
 80026aa:	d006      	beq.n	80026ba <__iar_annotation$$branch+0x2f2>
 80026ac:	68a8      	ldr	r0, [r5, #8]
 80026ae:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80026b0:	2a00      	cmp	r2, #0
 80026b2:	d002      	beq.n	80026ba <__iar_annotation$$branch+0x2f2>
 80026b4:	2100      	movs	r1, #0
 80026b6:	7c28      	ldrb	r0, [r5, #16]
 80026b8:	4790      	blx	r2
 80026ba:	2200      	movs	r2, #0
 80026bc:	2101      	movs	r1, #1
 80026be:	0028      	movs	r0, r5
 80026c0:	f7fe ff9c 	bl	80015fc <PE_CallHardResetCallback>
 80026c4:	4866      	ldr	r0, [pc, #408]	@ (8002860 <__iar_annotation$$branch+0x498>)
 80026c6:	83e8      	strh	r0, [r5, #30]
 80026c8:	e7e9      	b.n	800269e <__iar_annotation$$branch+0x2d6>
 80026ca:	2100      	movs	r1, #0
 80026cc:	4668      	mov	r0, sp
 80026ce:	7b40      	ldrb	r0, [r0, #13]
 80026d0:	68aa      	ldr	r2, [r5, #8]
 80026d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026d4:	4790      	blx	r2
 80026d6:	2801      	cmp	r0, #1
 80026d8:	d10d      	bne.n	80026f6 <__iar_annotation$$branch+0x32e>
 80026da:	4862      	ldr	r0, [pc, #392]	@ (8002864 <__iar_annotation$$branch+0x49c>)
 80026dc:	83e8      	strh	r0, [r5, #30]
 80026de:	2169      	movs	r1, #105	@ 0x69
 80026e0:	4668      	mov	r0, sp
 80026e2:	7b40      	ldrb	r0, [r0, #13]
 80026e4:	f7fe f800 	bl	80006e8 <USBPD_PE_Notification>
 80026e8:	2040      	movs	r0, #64	@ 0x40
 80026ea:	7468      	strb	r0, [r5, #17]
 80026ec:	2400      	movs	r4, #0
 80026ee:	2113      	movs	r1, #19
 80026f0:	7c28      	ldrb	r0, [r5, #16]
 80026f2:	f7fd fff9 	bl	80006e8 <USBPD_PE_Notification>
 80026f6:	8be8      	ldrh	r0, [r5, #30]
 80026f8:	2180      	movs	r1, #128	@ 0x80
 80026fa:	0209      	lsls	r1, r1, #8
 80026fc:	4288      	cmp	r0, r1
 80026fe:	d135      	bne.n	800276c <__iar_annotation$$branch+0x3a4>
 8002700:	e01e      	b.n	8002740 <__iar_annotation$$branch+0x378>
 8002702:	2101      	movs	r1, #1
 8002704:	4668      	mov	r0, sp
 8002706:	7b40      	ldrb	r0, [r0, #13]
 8002708:	68aa      	ldr	r2, [r5, #8]
 800270a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800270c:	4790      	blx	r2
 800270e:	2801      	cmp	r0, #1
 8002710:	d111      	bne.n	8002736 <__iar_annotation$$branch+0x36e>
 8002712:	0028      	movs	r0, r5
 8002714:	f7fe fb01 	bl	8000d1a <PE_Reset_HardReset>
 8002718:	2205      	movs	r2, #5
 800271a:	2100      	movs	r1, #0
 800271c:	0028      	movs	r0, r5
 800271e:	f7fe ff6d 	bl	80015fc <PE_CallHardResetCallback>
 8002722:	2168      	movs	r1, #104	@ 0x68
 8002724:	4668      	mov	r0, sp
 8002726:	7b40      	ldrb	r0, [r0, #13]
 8002728:	f7fd ffde 	bl	80006e8 <USBPD_PE_Notification>
 800272c:	83ef      	strh	r7, [r5, #30]
 800272e:	24fa      	movs	r4, #250	@ 0xfa
 8002730:	0064      	lsls	r4, r4, #1
 8002732:	2043      	movs	r0, #67	@ 0x43
 8002734:	7468      	strb	r0, [r5, #17]
 8002736:	8be8      	ldrh	r0, [r5, #30]
 8002738:	2180      	movs	r1, #128	@ 0x80
 800273a:	0209      	lsls	r1, r1, #8
 800273c:	4288      	cmp	r0, r1
 800273e:	d115      	bne.n	800276c <__iar_annotation$$branch+0x3a4>
 8002740:	2206      	movs	r2, #6
 8002742:	2100      	movs	r1, #0
 8002744:	0028      	movs	r0, r5
 8002746:	f7fe ff59 	bl	80015fc <PE_CallHardResetCallback>
 800274a:	4809      	ldr	r0, [pc, #36]	@ (8002770 <__iar_annotation$$branch+0x3a8>)
 800274c:	1828      	adds	r0, r5, r0
 800274e:	7880      	ldrb	r0, [r0, #2]
 8002750:	2803      	cmp	r0, #3
 8002752:	d200      	bcs.n	8002756 <__iar_annotation$$branch+0x38e>
 8002754:	e6b6      	b.n	80024c4 <__iar_annotation$$branch+0xfc>
 8002756:	6968      	ldr	r0, [r5, #20]
 8002758:	0741      	lsls	r1, r0, #29
 800275a:	0fc9      	lsrs	r1, r1, #31
 800275c:	d004      	beq.n	8002768 <__iar_annotation$$branch+0x3a0>
 800275e:	68a8      	ldr	r0, [r5, #8]
 8002760:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002762:	2800      	cmp	r0, #0
 8002764:	d000      	beq.n	8002768 <__iar_annotation$$branch+0x3a0>
 8002766:	e0fa      	b.n	800295e <__iar_annotation$$branch+0x596>
 8002768:	2400      	movs	r4, #0
 800276a:	746c      	strb	r4, [r5, #17]
 800276c:	e5fc      	b.n	8002368 <__iar_annotation$$branch+0xe>
 800276e:	bf00      	nop
 8002770:	0000025e 	.word	0x0000025e
 8002774:	ffff7fff 	.word	0xffff7fff
 8002778:	2000      	movs	r0, #0
 800277a:	9000      	str	r0, [sp, #0]
 800277c:	2303      	movs	r3, #3
 800277e:	2203      	movs	r2, #3
 8002780:	2100      	movs	r1, #0
 8002782:	0028      	movs	r0, r5
 8002784:	f7fe fff8 	bl	8001778 <PE_Send_CtrlMessage>
 8002788:	2800      	cmp	r0, #0
 800278a:	d1ef      	bne.n	800276c <__iar_annotation$$branch+0x3a4>
 800278c:	2001      	movs	r0, #1
 800278e:	7728      	strb	r0, [r5, #28]
 8002790:	e654      	b.n	800243c <__iar_annotation$$branch+0x74>
 8002792:	6868      	ldr	r0, [r5, #4]
 8002794:	6800      	ldr	r0, [r0, #0]
 8002796:	0540      	lsls	r0, r0, #21
 8002798:	0f40      	lsrs	r0, r0, #29
 800279a:	2804      	cmp	r0, #4
 800279c:	d100      	bne.n	80027a0 <__iar_annotation$$branch+0x3d8>
 800279e:	e691      	b.n	80024c4 <__iar_annotation$$branch+0xfc>
 80027a0:	2000      	movs	r0, #0
 80027a2:	9000      	str	r0, [sp, #0]
 80027a4:	2350      	movs	r3, #80	@ 0x50
 80027a6:	220d      	movs	r2, #13
 80027a8:	2031      	movs	r0, #49	@ 0x31
 80027aa:	5c29      	ldrb	r1, [r5, r0]
 80027ac:	0028      	movs	r0, r5
 80027ae:	f7fe ffe3 	bl	8001778 <PE_Send_CtrlMessage>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d107      	bne.n	80027c6 <__iar_annotation$$branch+0x3fe>
 80027b6:	2003      	movs	r0, #3
 80027b8:	7728      	strb	r0, [r5, #28]
 80027ba:	83ee      	strh	r6, [r5, #30]
 80027bc:	241b      	movs	r4, #27
 80027be:	2130      	movs	r1, #48	@ 0x30
 80027c0:	7c28      	ldrb	r0, [r5, #16]
 80027c2:	f7fd ff91 	bl	80006e8 <USBPD_PE_Notification>
 80027c6:	e5cf      	b.n	8002368 <__iar_annotation$$branch+0xe>
 80027c8:	4668      	mov	r0, sp
 80027ca:	7b00      	ldrb	r0, [r0, #12]
 80027cc:	2814      	cmp	r0, #20
 80027ce:	d017      	beq.n	8002800 <__iar_annotation$$branch+0x438>
 80027d0:	2030      	movs	r0, #48	@ 0x30
 80027d2:	5c28      	ldrb	r0, [r5, r0]
 80027d4:	2131      	movs	r1, #49	@ 0x31
 80027d6:	5c69      	ldrb	r1, [r5, r1]
 80027d8:	4288      	cmp	r0, r1
 80027da:	d111      	bne.n	8002800 <__iar_annotation$$branch+0x438>
 80027dc:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80027de:	491e      	ldr	r1, [pc, #120]	@ (8002858 <__iar_annotation$$branch+0x490>)
 80027e0:	4001      	ands	r1, r0
 80027e2:	2903      	cmp	r1, #3
 80027e4:	d10c      	bne.n	8002800 <__iar_annotation$$branch+0x438>
 80027e6:	2001      	movs	r0, #1
 80027e8:	7728      	strb	r0, [r5, #28]
 80027ea:	83ef      	strh	r7, [r5, #30]
 80027ec:	24fa      	movs	r4, #250	@ 0xfa
 80027ee:	0064      	lsls	r4, r4, #1
 80027f0:	2043      	movs	r0, #67	@ 0x43
 80027f2:	7468      	strb	r0, [r5, #17]
 80027f4:	2014      	movs	r0, #20
 80027f6:	4669      	mov	r1, sp
 80027f8:	7308      	strb	r0, [r1, #12]
 80027fa:	0028      	movs	r0, r5
 80027fc:	f7fe f9df 	bl	8000bbe <PE_Clear_RxEvent>
 8002800:	e6df      	b.n	80025c2 <__iar_annotation$$branch+0x1fa>
 8002802:	9400      	str	r4, [sp, #0]
 8002804:	2343      	movs	r3, #67	@ 0x43
 8002806:	2207      	movs	r2, #7
 8002808:	2100      	movs	r1, #0
 800280a:	0028      	movs	r0, r5
 800280c:	f7fe ffb4 	bl	8001778 <PE_Send_CtrlMessage>
 8002810:	2800      	cmp	r0, #0
 8002812:	d11f      	bne.n	8002854 <__iar_annotation$$branch+0x48c>
 8002814:	2006      	movs	r0, #6
 8002816:	7728      	strb	r0, [r5, #28]
 8002818:	83ee      	strh	r6, [r5, #30]
 800281a:	241b      	movs	r4, #27
 800281c:	210b      	movs	r1, #11
 800281e:	e7cf      	b.n	80027c0 <__iar_annotation$$branch+0x3f8>
 8002820:	4668      	mov	r0, sp
 8002822:	7b00      	ldrb	r0, [r0, #12]
 8002824:	2811      	cmp	r0, #17
 8002826:	d115      	bne.n	8002854 <__iar_annotation$$branch+0x48c>
 8002828:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 800282a:	490b      	ldr	r1, [pc, #44]	@ (8002858 <__iar_annotation$$branch+0x490>)
 800282c:	4001      	ands	r1, r0
 800282e:	2906      	cmp	r1, #6
 8002830:	d110      	bne.n	8002854 <__iar_annotation$$branch+0x48c>
 8002832:	212c      	movs	r1, #44	@ 0x2c
 8002834:	7c28      	ldrb	r0, [r5, #16]
 8002836:	f7fd ff57 	bl	80006e8 <USBPD_PE_Notification>
 800283a:	2003      	movs	r0, #3
 800283c:	7468      	strb	r0, [r5, #17]
 800283e:	2400      	movs	r4, #0
 8002840:	4668      	mov	r0, sp
 8002842:	7b00      	ldrb	r0, [r0, #12]
 8002844:	2814      	cmp	r0, #20
 8002846:	d005      	beq.n	8002854 <__iar_annotation$$branch+0x48c>
 8002848:	2014      	movs	r0, #20
 800284a:	4669      	mov	r1, sp
 800284c:	7308      	strb	r0, [r1, #12]
 800284e:	0028      	movs	r0, r5
 8002850:	f7fe f9b5 	bl	8000bbe <PE_Clear_RxEvent>
 8002854:	e588      	b.n	8002368 <__iar_annotation$$branch+0xe>
 8002856:	bf00      	nop
 8002858:	0000f01f 	.word	0x0000f01f
 800285c:	0000a328 	.word	0x0000a328
 8002860:	000083e8 	.word	0x000083e8
 8002864:	000088e3 	.word	0x000088e3
 8002868:	2000      	movs	r0, #0
 800286a:	9000      	str	r0, [sp, #0]
 800286c:	2303      	movs	r3, #3
 800286e:	2204      	movs	r2, #4
 8002870:	2100      	movs	r1, #0
 8002872:	0028      	movs	r0, r5
 8002874:	f7fe ff80 	bl	8001778 <PE_Send_CtrlMessage>
 8002878:	e576      	b.n	8002368 <__iar_annotation$$branch+0xe>
 800287a:	4668      	mov	r0, sp
 800287c:	7800      	ldrb	r0, [r0, #0]
 800287e:	2804      	cmp	r0, #4
 8002880:	d006      	beq.n	8002890 <__iar_annotation$$branch+0x4c8>
 8002882:	2000      	movs	r0, #0
 8002884:	7728      	strb	r0, [r5, #28]
 8002886:	7469      	strb	r1, [r5, #17]
 8002888:	2120      	movs	r1, #32
 800288a:	7c28      	ldrb	r0, [r5, #16]
 800288c:	f7fd ff2c 	bl	80006e8 <USBPD_PE_Notification>
 8002890:	a903      	add	r1, sp, #12
 8002892:	0028      	movs	r0, r5
 8002894:	f000 fa1a 	bl	8002ccc <PE_StateMachine_SNK_ReadyWait>
 8002898:	e565      	b.n	8002366 <__iar_annotation$$branch+0xc>
 800289a:	68a8      	ldr	r0, [r5, #8]
 800289c:	6881      	ldr	r1, [r0, #8]
 800289e:	2900      	cmp	r1, #0
 80028a0:	d02e      	beq.n	8002900 <__iar_annotation$$branch+0x538>
 80028a2:	4668      	mov	r0, sp
 80028a4:	7b40      	ldrb	r0, [r0, #13]
 80028a6:	4788      	blx	r1
 80028a8:	280a      	cmp	r0, #10
 80028aa:	d002      	beq.n	80028b2 <__iar_annotation$$branch+0x4ea>
 80028ac:	280d      	cmp	r0, #13
 80028ae:	d022      	beq.n	80028f6 <__iar_annotation$$branch+0x52e>
 80028b0:	e026      	b.n	8002900 <__iar_annotation$$branch+0x538>
 80028b2:	2201      	movs	r2, #1
 80028b4:	2100      	movs	r1, #0
 80028b6:	7c28      	ldrb	r0, [r5, #16]
 80028b8:	68ab      	ldr	r3, [r5, #8]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	4798      	blx	r3
 80028be:	2000      	movs	r0, #0
 80028c0:	9000      	str	r0, [sp, #0]
 80028c2:	2359      	movs	r3, #89	@ 0x59
 80028c4:	2203      	movs	r2, #3
 80028c6:	2100      	movs	r1, #0
 80028c8:	0028      	movs	r0, r5
 80028ca:	f7fe ff55 	bl	8001778 <PE_Send_CtrlMessage>
 80028ce:	2800      	cmp	r0, #0
 80028d0:	d110      	bne.n	80028f4 <__iar_annotation$$branch+0x52c>
 80028d2:	2008      	movs	r0, #8
 80028d4:	7728      	strb	r0, [r5, #28]
 80028d6:	6868      	ldr	r0, [r5, #4]
 80028d8:	6801      	ldr	r1, [r0, #0]
 80028da:	2210      	movs	r2, #16
 80028dc:	430a      	orrs	r2, r1
 80028de:	6002      	str	r2, [r0, #0]
 80028e0:	2206      	movs	r2, #6
 80028e2:	2100      	movs	r1, #0
 80028e4:	7c28      	ldrb	r0, [r5, #16]
 80028e6:	68ab      	ldr	r3, [r5, #8]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	4798      	blx	r3
 80028ec:	48b0      	ldr	r0, [pc, #704]	@ (8002bb0 <__iar_annotation$$branch+0x7e8>)
 80028ee:	83e8      	strh	r0, [r5, #30]
 80028f0:	24e1      	movs	r4, #225	@ 0xe1
 80028f2:	00a4      	lsls	r4, r4, #2
 80028f4:	e538      	b.n	8002368 <__iar_annotation$$branch+0xe>
 80028f6:	2000      	movs	r0, #0
 80028f8:	9000      	str	r0, [sp, #0]
 80028fa:	2303      	movs	r3, #3
 80028fc:	220c      	movs	r2, #12
 80028fe:	e7b7      	b.n	8002870 <__iar_annotation$$branch+0x4a8>
 8002900:	202a      	movs	r0, #42	@ 0x2a
 8002902:	e5e0      	b.n	80024c6 <__iar_annotation$$branch+0xfe>
 8002904:	4668      	mov	r0, sp
 8002906:	7b00      	ldrb	r0, [r0, #12]
 8002908:	2811      	cmp	r0, #17
 800290a:	d119      	bne.n	8002940 <__iar_annotation$$branch+0x578>
 800290c:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 800290e:	49c1      	ldr	r1, [pc, #772]	@ (8002c14 <__iar_annotation$$branch+0x84c>)
 8002910:	4001      	ands	r1, r0
 8002912:	2906      	cmp	r1, #6
 8002914:	d114      	bne.n	8002940 <__iar_annotation$$branch+0x578>
 8002916:	7f28      	ldrb	r0, [r5, #28]
 8002918:	2809      	cmp	r0, #9
 800291a:	d005      	beq.n	8002928 <__iar_annotation$$branch+0x560>
 800291c:	2209      	movs	r2, #9
 800291e:	2100      	movs	r1, #0
 8002920:	7c28      	ldrb	r0, [r5, #16]
 8002922:	68ab      	ldr	r3, [r5, #8]
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	4798      	blx	r3
 8002928:	2053      	movs	r0, #83	@ 0x53
 800292a:	7468      	strb	r0, [r5, #17]
 800292c:	4668      	mov	r0, sp
 800292e:	7b00      	ldrb	r0, [r0, #12]
 8002930:	2814      	cmp	r0, #20
 8002932:	d005      	beq.n	8002940 <__iar_annotation$$branch+0x578>
 8002934:	2014      	movs	r0, #20
 8002936:	4669      	mov	r1, sp
 8002938:	7308      	strb	r0, [r1, #12]
 800293a:	0028      	movs	r0, r5
 800293c:	f7fe f93f 	bl	8000bbe <PE_Clear_RxEvent>
 8002940:	8be8      	ldrh	r0, [r5, #30]
 8002942:	03a1      	lsls	r1, r4, #14
 8002944:	4288      	cmp	r0, r1
 8002946:	d1d5      	bne.n	80028f4 <__iar_annotation$$branch+0x52c>
 8002948:	220f      	movs	r2, #15
 800294a:	2100      	movs	r1, #0
 800294c:	7c28      	ldrb	r0, [r5, #16]
 800294e:	68ab      	ldr	r3, [r5, #8]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	4798      	blx	r3
 8002954:	68a8      	ldr	r0, [r5, #8]
 8002956:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002958:	2800      	cmp	r0, #0
 800295a:	d100      	bne.n	800295e <__iar_annotation$$branch+0x596>
 800295c:	e5b2      	b.n	80024c4 <__iar_annotation$$branch+0xfc>
 800295e:	2092      	movs	r0, #146	@ 0x92
 8002960:	e5b1      	b.n	80024c6 <__iar_annotation$$branch+0xfe>
 8002962:	0028      	movs	r0, r5
 8002964:	f7fe fe53 	bl	800160e <PE_SetPowerNegotiation>
 8002968:	220a      	movs	r2, #10
 800296a:	2100      	movs	r1, #0
 800296c:	7c28      	ldrb	r0, [r5, #16]
 800296e:	68ab      	ldr	r3, [r5, #8]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	4798      	blx	r3
 8002974:	6868      	ldr	r0, [r5, #4]
 8002976:	7800      	ldrb	r0, [r0, #0]
 8002978:	0780      	lsls	r0, r0, #30
 800297a:	0f80      	lsrs	r0, r0, #30
 800297c:	2802      	cmp	r0, #2
 800297e:	d102      	bne.n	8002986 <__iar_annotation$$branch+0x5be>
 8002980:	7c28      	ldrb	r0, [r5, #16]
 8002982:	f003 f820 	bl	80059c6 <USBPD_PRL_SRCSetSinkNG>
 8002986:	2101      	movs	r1, #1
 8002988:	0028      	movs	r0, r5
 800298a:	f7fe f8d3 	bl	8000b34 <PE_ChangePowerRole>
 800298e:	7f28      	ldrb	r0, [r5, #28]
 8002990:	2809      	cmp	r0, #9
 8002992:	d005      	beq.n	80029a0 <__iar_annotation$$branch+0x5d8>
 8002994:	220b      	movs	r2, #11
 8002996:	2101      	movs	r1, #1
 8002998:	7c28      	ldrb	r0, [r5, #16]
 800299a:	68ab      	ldr	r3, [r5, #8]
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	4798      	blx	r3
 80029a0:	2000      	movs	r0, #0
 80029a2:	9000      	str	r0, [sp, #0]
 80029a4:	235b      	movs	r3, #91	@ 0x5b
 80029a6:	2206      	movs	r2, #6
 80029a8:	2100      	movs	r1, #0
 80029aa:	0028      	movs	r0, r5
 80029ac:	f7fe fee4 	bl	8001778 <PE_Send_CtrlMessage>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	d108      	bne.n	80029c6 <__iar_annotation$$branch+0x5fe>
 80029b4:	220c      	movs	r2, #12
 80029b6:	2100      	movs	r1, #0
 80029b8:	7c28      	ldrb	r0, [r5, #16]
 80029ba:	68ab      	ldr	r3, [r5, #8]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	4798      	blx	r3
 80029c0:	48c1      	ldr	r0, [pc, #772]	@ (8002cc8 <.text_3>)
 80029c2:	83e8      	strh	r0, [r5, #30]
 80029c4:	2414      	movs	r4, #20
 80029c6:	7c68      	ldrb	r0, [r5, #17]
 80029c8:	285b      	cmp	r0, #91	@ 0x5b
 80029ca:	d00f      	beq.n	80029ec <__iar_annotation$$branch+0x624>
 80029cc:	2100      	movs	r1, #0
 80029ce:	0028      	movs	r0, r5
 80029d0:	f7fe f8b0 	bl	8000b34 <PE_ChangePowerRole>
 80029d4:	2206      	movs	r2, #6
 80029d6:	2101      	movs	r1, #1
 80029d8:	7c28      	ldrb	r0, [r5, #16]
 80029da:	68ab      	ldr	r3, [r5, #8]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	4798      	blx	r3
 80029e0:	2207      	movs	r2, #7
 80029e2:	2100      	movs	r1, #0
 80029e4:	7c28      	ldrb	r0, [r5, #16]
 80029e6:	68ab      	ldr	r3, [r5, #8]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	4798      	blx	r3
 80029ec:	e4bc      	b.n	8002368 <__iar_annotation$$branch+0xe>
 80029ee:	9400      	str	r4, [sp, #0]
 80029f0:	2358      	movs	r3, #88	@ 0x58
 80029f2:	220a      	movs	r2, #10
 80029f4:	2100      	movs	r1, #0
 80029f6:	0028      	movs	r0, r5
 80029f8:	f7fe febe 	bl	8001778 <PE_Send_CtrlMessage>
 80029fc:	2800      	cmp	r0, #0
 80029fe:	d105      	bne.n	8002a0c <__iar_annotation$$branch+0x644>
 8002a00:	2008      	movs	r0, #8
 8002a02:	7728      	strb	r0, [r5, #28]
 8002a04:	83ee      	strh	r6, [r5, #30]
 8002a06:	241b      	movs	r4, #27
 8002a08:	2202      	movs	r2, #2
 8002a0a:	e7ea      	b.n	80029e2 <__iar_annotation$$branch+0x61a>
 8002a0c:	220f      	movs	r2, #15
 8002a0e:	e7e8      	b.n	80029e2 <__iar_annotation$$branch+0x61a>
 8002a10:	4669      	mov	r1, sp
 8002a12:	7b09      	ldrb	r1, [r1, #12]
 8002a14:	2911      	cmp	r1, #17
 8002a16:	d10c      	bne.n	8002a32 <__iar_annotation$$branch+0x66a>
 8002a18:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8002a1a:	4201      	tst	r1, r0
 8002a1c:	d109      	bne.n	8002a32 <__iar_annotation$$branch+0x66a>
 8002a1e:	06c8      	lsls	r0, r1, #27
 8002a20:	0ec0      	lsrs	r0, r0, #27
 8002a22:	2803      	cmp	r0, #3
 8002a24:	d006      	beq.n	8002a34 <__iar_annotation$$branch+0x66c>
 8002a26:	2804      	cmp	r0, #4
 8002a28:	d02d      	beq.n	8002a86 <__iar_annotation$$branch+0x6be>
 8002a2a:	280c      	cmp	r0, #12
 8002a2c:	d029      	beq.n	8002a82 <__iar_annotation$$branch+0x6ba>
 8002a2e:	2810      	cmp	r0, #16
 8002a30:	d032      	beq.n	8002a98 <__iar_annotation$$branch+0x6d0>
 8002a32:	e0a5      	b.n	8002b80 <__iar_annotation$$branch+0x7b8>
 8002a34:	6868      	ldr	r0, [r5, #4]
 8002a36:	6801      	ldr	r1, [r0, #0]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	6002      	str	r2, [r0, #0]
 8002a3e:	485c      	ldr	r0, [pc, #368]	@ (8002bb0 <__iar_annotation$$branch+0x7e8>)
 8002a40:	83e8      	strh	r0, [r5, #30]
 8002a42:	24e1      	movs	r4, #225	@ 0xe1
 8002a44:	00a4      	lsls	r4, r4, #2
 8002a46:	7f28      	ldrb	r0, [r5, #28]
 8002a48:	2809      	cmp	r0, #9
 8002a4a:	d005      	beq.n	8002a58 <__iar_annotation$$branch+0x690>
 8002a4c:	2206      	movs	r2, #6
 8002a4e:	2100      	movs	r1, #0
 8002a50:	7c28      	ldrb	r0, [r5, #16]
 8002a52:	68ab      	ldr	r3, [r5, #8]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	4798      	blx	r3
 8002a58:	2104      	movs	r1, #4
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f7fe fdd7 	bl	800160e <PE_SetPowerNegotiation>
 8002a60:	213a      	movs	r1, #58	@ 0x3a
 8002a62:	7c28      	ldrb	r0, [r5, #16]
 8002a64:	f7fd fe40 	bl	80006e8 <USBPD_PE_Notification>
 8002a68:	4668      	mov	r0, sp
 8002a6a:	7b00      	ldrb	r0, [r0, #12]
 8002a6c:	2814      	cmp	r0, #20
 8002a6e:	d005      	beq.n	8002a7c <__iar_annotation$$branch+0x6b4>
 8002a70:	2014      	movs	r0, #20
 8002a72:	4669      	mov	r1, sp
 8002a74:	7308      	strb	r0, [r1, #12]
 8002a76:	0028      	movs	r0, r5
 8002a78:	f7fe f8a1 	bl	8000bbe <PE_Clear_RxEvent>
 8002a7c:	2059      	movs	r0, #89	@ 0x59
 8002a7e:	7468      	strb	r0, [r5, #17]
 8002a80:	e07e      	b.n	8002b80 <__iar_annotation$$branch+0x7b8>
 8002a82:	213b      	movs	r1, #59	@ 0x3b
 8002a84:	e000      	b.n	8002a88 <__iar_annotation$$branch+0x6c0>
 8002a86:	2116      	movs	r1, #22
 8002a88:	7c28      	ldrb	r0, [r5, #16]
 8002a8a:	f7fd fe2d 	bl	80006e8 <USBPD_PE_Notification>
 8002a8e:	4668      	mov	r0, sp
 8002a90:	7b00      	ldrb	r0, [r0, #12]
 8002a92:	2814      	cmp	r0, #20
 8002a94:	d108      	bne.n	8002aa8 <__iar_annotation$$branch+0x6e0>
 8002a96:	e070      	b.n	8002b7a <__iar_annotation$$branch+0x7b2>
 8002a98:	2117      	movs	r1, #23
 8002a9a:	7c28      	ldrb	r0, [r5, #16]
 8002a9c:	f7fd fe24 	bl	80006e8 <USBPD_PE_Notification>
 8002aa0:	4668      	mov	r0, sp
 8002aa2:	7b00      	ldrb	r0, [r0, #12]
 8002aa4:	2814      	cmp	r0, #20
 8002aa6:	d068      	beq.n	8002b7a <__iar_annotation$$branch+0x7b2>
 8002aa8:	2014      	movs	r0, #20
 8002aaa:	4669      	mov	r1, sp
 8002aac:	7308      	strb	r0, [r1, #12]
 8002aae:	0028      	movs	r0, r5
 8002ab0:	f7fe f885 	bl	8000bbe <PE_Clear_RxEvent>
 8002ab4:	e061      	b.n	8002b7a <__iar_annotation$$branch+0x7b2>
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	9004      	str	r0, [sp, #16]
 8002aba:	ab04      	add	r3, sp, #16
 8002abc:	aa05      	add	r2, sp, #20
 8002abe:	2100      	movs	r1, #0
 8002ac0:	7c28      	ldrb	r0, [r5, #16]
 8002ac2:	68ae      	ldr	r6, [r5, #8]
 8002ac4:	6976      	ldr	r6, [r6, #20]
 8002ac6:	47b0      	blx	r6
 8002ac8:	2104      	movs	r1, #4
 8002aca:	9804      	ldr	r0, [sp, #16]
 8002acc:	f7fe fdf2 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	d001      	beq.n	8002ad8 <__iar_annotation$$branch+0x710>
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	e4b5      	b.n	8002444 <__iar_annotation$$branch+0x7c>
 8002ad8:	9002      	str	r0, [sp, #8]
 8002ada:	2003      	movs	r0, #3
 8002adc:	9001      	str	r0, [sp, #4]
 8002ade:	9804      	ldr	r0, [sp, #16]
 8002ae0:	0880      	lsrs	r0, r0, #2
 8002ae2:	9000      	str	r0, [sp, #0]
 8002ae4:	ab05      	add	r3, sp, #20
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	2100      	movs	r1, #0
 8002aea:	0028      	movs	r0, r5
 8002aec:	f7fe fe6f 	bl	80017ce <PE_Send_DataMessage>
 8002af0:	e43a      	b.n	8002368 <__iar_annotation$$branch+0xe>
 8002af2:	2000      	movs	r0, #0
 8002af4:	9002      	str	r0, [sp, #8]
 8002af6:	2003      	movs	r0, #3
 8002af8:	9001      	str	r0, [sp, #4]
 8002afa:	2001      	movs	r0, #1
 8002afc:	9000      	str	r0, [sp, #0]
 8002afe:	002b      	movs	r3, r5
 8002b00:	332c      	adds	r3, #44	@ 0x2c
 8002b02:	2206      	movs	r2, #6
 8002b04:	2100      	movs	r1, #0
 8002b06:	0028      	movs	r0, r5
 8002b08:	f7fe fe61 	bl	80017ce <PE_Send_DataMessage>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d1ef      	bne.n	8002af0 <__iar_annotation$$branch+0x728>
 8002b10:	215d      	movs	r1, #93	@ 0x5d
 8002b12:	e655      	b.n	80027c0 <__iar_annotation$$branch+0x3f8>
 8002b14:	9400      	str	r4, [sp, #0]
 8002b16:	2366      	movs	r3, #102	@ 0x66
 8002b18:	2214      	movs	r2, #20
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	0028      	movs	r0, r5
 8002b1e:	f7fe fe2b 	bl	8001778 <PE_Send_CtrlMessage>
 8002b22:	2800      	cmp	r0, #0
 8002b24:	d1e4      	bne.n	8002af0 <__iar_annotation$$branch+0x728>
 8002b26:	83ee      	strh	r6, [r5, #30]
 8002b28:	241b      	movs	r4, #27
 8002b2a:	214a      	movs	r1, #74	@ 0x4a
 8002b2c:	7c28      	ldrb	r0, [r5, #16]
 8002b2e:	f7fd fddb 	bl	80006e8 <USBPD_PE_Notification>
 8002b32:	200b      	movs	r0, #11
 8002b34:	7728      	strb	r0, [r5, #28]
 8002b36:	e7db      	b.n	8002af0 <__iar_annotation$$branch+0x728>
 8002b38:	4668      	mov	r0, sp
 8002b3a:	7b00      	ldrb	r0, [r0, #12]
 8002b3c:	2811      	cmp	r0, #17
 8002b3e:	d11f      	bne.n	8002b80 <__iar_annotation$$branch+0x7b8>
 8002b40:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002b42:	0bc1      	lsrs	r1, r0, #15
 8002b44:	d01c      	beq.n	8002b80 <__iar_annotation$$branch+0x7b8>
 8002b46:	06c0      	lsls	r0, r0, #27
 8002b48:	0ec0      	lsrs	r0, r0, #27
 8002b4a:	280c      	cmp	r0, #12
 8002b4c:	d118      	bne.n	8002b80 <__iar_annotation$$branch+0x7b8>
 8002b4e:	2304      	movs	r3, #4
 8002b50:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8002b52:	1d02      	adds	r2, r0, #4
 8002b54:	210a      	movs	r1, #10
 8002b56:	7c28      	ldrb	r0, [r5, #16]
 8002b58:	68ac      	ldr	r4, [r5, #8]
 8002b5a:	69a4      	ldr	r4, [r4, #24]
 8002b5c:	47a0      	blx	r4
 8002b5e:	4668      	mov	r0, sp
 8002b60:	7b00      	ldrb	r0, [r0, #12]
 8002b62:	2814      	cmp	r0, #20
 8002b64:	d005      	beq.n	8002b72 <__iar_annotation$$branch+0x7aa>
 8002b66:	2014      	movs	r0, #20
 8002b68:	4669      	mov	r1, sp
 8002b6a:	7308      	strb	r0, [r1, #12]
 8002b6c:	0028      	movs	r0, r5
 8002b6e:	f7fe f826 	bl	8000bbe <PE_Clear_RxEvent>
 8002b72:	214b      	movs	r1, #75	@ 0x4b
 8002b74:	7c28      	ldrb	r0, [r5, #16]
 8002b76:	f7fd fdb7 	bl	80006e8 <USBPD_PE_Notification>
 8002b7a:	2003      	movs	r0, #3
 8002b7c:	7468      	strb	r0, [r5, #17]
 8002b7e:	2400      	movs	r4, #0
 8002b80:	8be8      	ldrh	r0, [r5, #30]
 8002b82:	2180      	movs	r1, #128	@ 0x80
 8002b84:	0209      	lsls	r1, r1, #8
 8002b86:	4288      	cmp	r0, r1
 8002b88:	d1b2      	bne.n	8002af0 <__iar_annotation$$branch+0x728>
 8002b8a:	e041      	b.n	8002c10 <__iar_annotation$$branch+0x848>
 8002b8c:	4895      	ldr	r0, [pc, #596]	@ (8002de4 <.text_5>)
 8002b8e:	182f      	adds	r7, r5, r0
 8002b90:	9400      	str	r4, [sp, #0]
 8002b92:	2339      	movs	r3, #57	@ 0x39
 8002b94:	783a      	ldrb	r2, [r7, #0]
 8002b96:	2100      	movs	r1, #0
 8002b98:	0028      	movs	r0, r5
 8002b9a:	f7fe fded 	bl	8001778 <PE_Send_CtrlMessage>
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d1a6      	bne.n	8002af0 <__iar_annotation$$branch+0x728>
 8002ba2:	7878      	ldrb	r0, [r7, #1]
 8002ba4:	7728      	strb	r0, [r5, #28]
 8002ba6:	2144      	movs	r1, #68	@ 0x44
 8002ba8:	7c28      	ldrb	r0, [r5, #16]
 8002baa:	f7fd fd9d 	bl	80006e8 <USBPD_PE_Notification>
 8002bae:	e4b8      	b.n	8002522 <__iar_annotation$$branch+0x15a>
 8002bb0:	00008384 	.word	0x00008384
 8002bb4:	4668      	mov	r0, sp
 8002bb6:	7b00      	ldrb	r0, [r0, #12]
 8002bb8:	2814      	cmp	r0, #20
 8002bba:	d024      	beq.n	8002c06 <__iar_annotation$$branch+0x83e>
 8002bbc:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002bbe:	0bc0      	lsrs	r0, r0, #15
 8002bc0:	d00e      	beq.n	8002be0 <__iar_annotation$$branch+0x818>
 8002bc2:	0028      	movs	r0, r5
 8002bc4:	f7fe fe40 	bl	8001848 <PE_Check_ExtendedMessage>
 8002bc8:	4668      	mov	r0, sp
 8002bca:	7b00      	ldrb	r0, [r0, #12]
 8002bcc:	2814      	cmp	r0, #20
 8002bce:	d005      	beq.n	8002bdc <__iar_annotation$$branch+0x814>
 8002bd0:	2014      	movs	r0, #20
 8002bd2:	4669      	mov	r1, sp
 8002bd4:	7308      	strb	r0, [r1, #12]
 8002bd6:	0028      	movs	r0, r5
 8002bd8:	f7fd fff1 	bl	8000bbe <PE_Clear_RxEvent>
 8002bdc:	2000      	movs	r0, #0
 8002bde:	83e8      	strh	r0, [r5, #30]
 8002be0:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002be2:	490c      	ldr	r1, [pc, #48]	@ (8002c14 <__iar_annotation$$branch+0x84c>)
 8002be4:	4001      	ands	r1, r0
 8002be6:	2910      	cmp	r1, #16
 8002be8:	d10d      	bne.n	8002c06 <__iar_annotation$$branch+0x83e>
 8002bea:	2003      	movs	r0, #3
 8002bec:	7468      	strb	r0, [r5, #17]
 8002bee:	2400      	movs	r4, #0
 8002bf0:	4668      	mov	r0, sp
 8002bf2:	7b00      	ldrb	r0, [r0, #12]
 8002bf4:	2814      	cmp	r0, #20
 8002bf6:	d005      	beq.n	8002c04 <__iar_annotation$$branch+0x83c>
 8002bf8:	2014      	movs	r0, #20
 8002bfa:	4669      	mov	r1, sp
 8002bfc:	7308      	strb	r0, [r1, #12]
 8002bfe:	0028      	movs	r0, r5
 8002c00:	f7fd ffdd 	bl	8000bbe <PE_Clear_RxEvent>
 8002c04:	83ec      	strh	r4, [r5, #30]
 8002c06:	8be8      	ldrh	r0, [r5, #30]
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0209      	lsls	r1, r1, #8
 8002c0c:	4288      	cmp	r0, r1
 8002c0e:	d11c      	bne.n	8002c4a <__iar_annotation$$branch+0x882>
 8002c10:	2003      	movs	r0, #3
 8002c12:	e458      	b.n	80024c6 <__iar_annotation$$branch+0xfe>
 8002c14:	0000f01f 	.word	0x0000f01f
 8002c18:	0028      	movs	r0, r5
 8002c1a:	f7fe ff37 	bl	8001a8c <PE_SubStateMachine_ExtendedMessages>
 8002c1e:	e63b      	b.n	8002898 <__iar_annotation$$branch+0x4d0>
 8002c20:	a903      	add	r1, sp, #12
 8002c22:	0028      	movs	r0, r5
 8002c24:	f7fe f9d4 	bl	8000fd0 <PE_SubStateMachine_Generic>
 8002c28:	e636      	b.n	8002898 <__iar_annotation$$branch+0x4d0>
 8002c2a:	a903      	add	r1, sp, #12
 8002c2c:	0028      	movs	r0, r5
 8002c2e:	f001 f9ef 	bl	8004010 <PE_SubStateMachine_VconnSwap>
 8002c32:	0004      	movs	r4, r0
 8002c34:	6868      	ldr	r0, [r5, #4]
 8002c36:	6800      	ldr	r0, [r0, #0]
 8002c38:	0401      	lsls	r1, r0, #16
 8002c3a:	0fc9      	lsrs	r1, r1, #31
 8002c3c:	d006      	beq.n	8002c4c <__iar_annotation$$branch+0x884>
 8002c3e:	6828      	ldr	r0, [r5, #0]
 8002c40:	6801      	ldr	r1, [r0, #0]
 8002c42:	4668      	mov	r0, sp
 8002c44:	7b40      	ldrb	r0, [r0, #13]
 8002c46:	f002 fee1 	bl	8005a0c <USBPD_PRL_SOPCapability>
 8002c4a:	e751      	b.n	8002af0 <__iar_annotation$$branch+0x728>
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	e7f8      	b.n	8002c42 <__iar_annotation$$branch+0x87a>
 8002c50:	4668      	mov	r0, sp
 8002c52:	7b01      	ldrb	r1, [r0, #12]
 8002c54:	0028      	movs	r0, r5
 8002c56:	f002 fc3b 	bl	80054d0 <PE_StateMachine_UVDM>
 8002c5a:	e749      	b.n	8002af0 <__iar_annotation$$branch+0x728>
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	9000      	str	r0, [sp, #0]
 8002c60:	2358      	movs	r3, #88	@ 0x58
 8002c62:	2213      	movs	r2, #19
 8002c64:	2100      	movs	r1, #0
 8002c66:	0028      	movs	r0, r5
 8002c68:	f7fe fd86 	bl	8001778 <PE_Send_CtrlMessage>
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d1f4      	bne.n	8002c5a <__iar_annotation$$branch+0x892>
 8002c70:	2009      	movs	r0, #9
 8002c72:	7728      	strb	r0, [r5, #28]
 8002c74:	e455      	b.n	8002522 <__iar_annotation$$branch+0x15a>
 8002c76:	6968      	ldr	r0, [r5, #20]
 8002c78:	2701      	movs	r7, #1
 8002c7a:	0b41      	lsrs	r1, r0, #13
 8002c7c:	4039      	ands	r1, r7
 8002c7e:	d019      	beq.n	8002cb4 <__iar_annotation$$branch+0x8ec>
 8002c80:	0b80      	lsrs	r0, r0, #14
 8002c82:	4038      	ands	r0, r7
 8002c84:	d007      	beq.n	8002c96 <__iar_annotation$$branch+0x8ce>
 8002c86:	215b      	movs	r1, #91	@ 0x5b
 8002c88:	7c28      	ldrb	r0, [r5, #16]
 8002c8a:	f7fd fd2d 	bl	80006e8 <USBPD_PE_Notification>
 8002c8e:	6968      	ldr	r0, [r5, #20]
 8002c90:	4955      	ldr	r1, [pc, #340]	@ (8002de8 <.text_6>)
 8002c92:	4001      	ands	r1, r0
 8002c94:	6169      	str	r1, [r5, #20]
 8002c96:	2003      	movs	r0, #3
 8002c98:	7468      	strb	r0, [r5, #17]
 8002c9a:	7ca9      	ldrb	r1, [r5, #18]
 8002c9c:	2903      	cmp	r1, #3
 8002c9e:	d008      	beq.n	8002cb2 <__iar_annotation$$branch+0x8ea>
 8002ca0:	74a8      	strb	r0, [r5, #18]
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	9000      	str	r0, [sp, #0]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2203      	movs	r2, #3
 8002caa:	7c29      	ldrb	r1, [r5, #16]
 8002cac:	2004      	movs	r0, #4
 8002cae:	6834      	ldr	r4, [r6, #0]
 8002cb0:	47a0      	blx	r4
 8002cb2:	2401      	movs	r4, #1
 8002cb4:	6968      	ldr	r0, [r5, #20]
 8002cb6:	494d      	ldr	r1, [pc, #308]	@ (8002dec <.text_7>)
 8002cb8:	4001      	ands	r1, r0
 8002cba:	6169      	str	r1, [r5, #20]
 8002cbc:	2c00      	cmp	r4, #0
 8002cbe:	d101      	bne.n	8002cc4 <__iar_annotation$$branch>

08002cc0 <__iar_annotation$$branch>:
 8002cc0:	f7ff fa3e 	bl	8002140 <USBPD_PE_StateMachine_SNK+0xb0>

08002cc4 <__iar_annotation$$branch>:
 8002cc4:	f7ff fb8e 	bl	80023e4 <__iar_annotation$$branch+0x1c>

08002cc8 <.text_3>:
 8002cc8:	00008014 	.word	0x00008014

08002ccc <PE_StateMachine_SNK_ReadyWait>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	0004      	movs	r4, r0
 8002cd0:	000e      	movs	r6, r1
 8002cd2:	2702      	movs	r7, #2
 8002cd4:	7830      	ldrb	r0, [r6, #0]
 8002cd6:	2814      	cmp	r0, #20
 8002cd8:	d00b      	beq.n	8002cf2 <PE_StateMachine_SNK_ReadyWait+0x26>
 8002cda:	0020      	movs	r0, r4
 8002cdc:	f7fe fffc 	bl	8001cd8 <PE_ManageRXEvent>
 8002ce0:	7830      	ldrb	r0, [r6, #0]
 8002ce2:	2814      	cmp	r0, #20
 8002ce4:	d07b      	beq.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ce6:	2014      	movs	r0, #20
 8002ce8:	7030      	strb	r0, [r6, #0]
 8002cea:	0020      	movs	r0, r4
 8002cec:	f7fd ff67 	bl	8000bbe <PE_Clear_RxEvent>
 8002cf0:	e075      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002cf2:	6961      	ldr	r1, [r4, #20]
 8002cf4:	0cc8      	lsrs	r0, r1, #19
 8002cf6:	03be      	lsls	r6, r7, #14
 8002cf8:	2700      	movs	r7, #0
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	d021      	beq.n	8002d42 <PE_StateMachine_SNK_ReadyWait+0x76>
 8002cfe:	8c21      	ldrh	r1, [r4, #32]
 8002d00:	42b1      	cmp	r1, r6
 8002d02:	d111      	bne.n	8002d28 <PE_StateMachine_SNK_ReadyWait+0x5c>
 8002d04:	200f      	movs	r0, #15
 8002d06:	7460      	strb	r0, [r4, #17]
 8002d08:	9700      	str	r7, [sp, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2270      	movs	r2, #112	@ 0x70
 8002d0e:	7c21      	ldrb	r1, [r4, #16]
 8002d10:	2009      	movs	r0, #9
 8002d12:	4d37      	ldr	r5, [pc, #220]	@ (8002df0 <.text_8>)
 8002d14:	682d      	ldr	r5, [r5, #0]
 8002d16:	47a8      	blx	r5
 8002d18:	2098      	movs	r0, #152	@ 0x98
 8002d1a:	0080      	lsls	r0, r0, #2
 8002d1c:	5c20      	ldrb	r0, [r4, r0]
 8002d1e:	1c40      	adds	r0, r0, #1
 8002d20:	2198      	movs	r1, #152	@ 0x98
 8002d22:	0089      	lsls	r1, r1, #2
 8002d24:	5460      	strb	r0, [r4, r1]
 8002d26:	e05a      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002d28:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8002d2a:	0509      	lsls	r1, r1, #20
 8002d2c:	0f49      	lsrs	r1, r1, #29
 8002d2e:	180a      	adds	r2, r1, r0
 8002d30:	2333      	movs	r3, #51	@ 0x33
 8002d32:	435a      	muls	r2, r3
 8002d34:	4316      	orrs	r6, r2
 8002d36:	8426      	strh	r6, [r4, #32]
 8002d38:	180f      	adds	r7, r1, r0
 8002d3a:	2033      	movs	r0, #51	@ 0x33
 8002d3c:	4347      	muls	r7, r0
 8002d3e:	b2bf      	uxth	r7, r7
 8002d40:	e04d      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002d42:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8002d44:	42b0      	cmp	r0, r6
 8002d46:	d104      	bne.n	8002d52 <PE_StateMachine_SNK_ReadyWait+0x86>
 8002d48:	2045      	movs	r0, #69	@ 0x45
 8002d4a:	7460      	strb	r0, [r4, #17]
 8002d4c:	430e      	orrs	r6, r1
 8002d4e:	6166      	str	r6, [r4, #20]
 8002d50:	e045      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002d52:	7c20      	ldrb	r0, [r4, #16]
 8002d54:	f7fd ff58 	bl	8000c08 <PE_PRL_Control_RxEvent>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d128      	bne.n	8002dae <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002d5c:	2032      	movs	r0, #50	@ 0x32
 8002d5e:	5c20      	ldrb	r0, [r4, r0]
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d024      	beq.n	8002dae <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002d64:	6860      	ldr	r0, [r4, #4]
 8002d66:	6800      	ldr	r0, [r0, #0]
 8002d68:	2103      	movs	r1, #3
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	4002      	ands	r2, r0
 8002d6e:	2a01      	cmp	r2, #1
 8002d70:	d007      	beq.n	8002d82 <PE_StateMachine_SNK_ReadyWait+0xb6>
 8002d72:	4001      	ands	r1, r0
 8002d74:	2902      	cmp	r1, #2
 8002d76:	d11a      	bne.n	8002dae <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002d78:	7c20      	ldrb	r0, [r4, #16]
 8002d7a:	f002 fe3b 	bl	80059f4 <USBPD_PRL_IsResistor_SinkTxOK>
 8002d7e:	2801      	cmp	r0, #1
 8002d80:	d115      	bne.n	8002dae <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002d82:	2033      	movs	r0, #51	@ 0x33
 8002d84:	5c20      	ldrb	r0, [r4, r0]
 8002d86:	2131      	movs	r1, #49	@ 0x31
 8002d88:	5460      	strb	r0, [r4, r1]
 8002d8a:	2032      	movs	r0, #50	@ 0x32
 8002d8c:	5c20      	ldrb	r0, [r4, r0]
 8002d8e:	7460      	strb	r0, [r4, #17]
 8002d90:	2845      	cmp	r0, #69	@ 0x45
 8002d92:	d102      	bne.n	8002d9a <PE_StateMachine_SNK_ReadyWait+0xce>
 8002d94:	6960      	ldr	r0, [r4, #20]
 8002d96:	4306      	orrs	r6, r0
 8002d98:	6166      	str	r6, [r4, #20]
 8002d9a:	2132      	movs	r1, #50	@ 0x32
 8002d9c:	5467      	strb	r7, [r4, r1]
 8002d9e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002da0:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8002da2:	6960      	ldr	r0, [r4, #20]
 8002da4:	2180      	movs	r1, #128	@ 0x80
 8002da6:	01c9      	lsls	r1, r1, #7
 8002da8:	4301      	orrs	r1, r0
 8002daa:	6161      	str	r1, [r4, #20]
 8002dac:	e017      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002dae:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8002db0:	42b0      	cmp	r0, r6
 8002db2:	d109      	bne.n	8002dc8 <PE_StateMachine_SNK_ReadyWait+0xfc>
 8002db4:	8467      	strh	r7, [r4, #34]	@ 0x22
 8002db6:	2098      	movs	r0, #152	@ 0x98
 8002db8:	0080      	lsls	r0, r0, #2
 8002dba:	1820      	adds	r0, r4, r0
 8002dbc:	7881      	ldrb	r1, [r0, #2]
 8002dbe:	1c49      	adds	r1, r1, #1
 8002dc0:	7081      	strb	r1, [r0, #2]
 8002dc2:	2005      	movs	r0, #5
 8002dc4:	7460      	strb	r0, [r4, #17]
 8002dc6:	e00a      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002dc8:	0020      	movs	r0, r4
 8002dca:	f7fe fc47 	bl	800165c <PE_CalculateMinTiming>
 8002dce:	2132      	movs	r1, #50	@ 0x32
 8002dd0:	5c61      	ldrb	r1, [r4, r1]
 8002dd2:	2900      	cmp	r1, #0
 8002dd4:	d002      	beq.n	8002ddc <PE_StateMachine_SNK_ReadyWait+0x110>
 8002dd6:	2802      	cmp	r0, #2
 8002dd8:	d300      	bcc.n	8002ddc <PE_StateMachine_SNK_ReadyWait+0x110>
 8002dda:	2002      	movs	r0, #2
 8002ddc:	0007      	movs	r7, r0
 8002dde:	0038      	movs	r0, r7
 8002de0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08002de4 <.text_5>:
 8002de4:	0000025e 	.word	0x0000025e

08002de8 <.text_6>:
 8002de8:	ffffbfff 	.word	0xffffbfff

08002dec <.text_7>:
 8002dec:	ffffdfff 	.word	0xffffdfff

08002df0 <.text_8>:
 8002df0:	20000000 	.word	0x20000000

08002df4 <USBPD_PE_StateMachine_SRC>:
 8002df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	0005      	movs	r5, r0
 8002dfa:	4829      	ldr	r0, [pc, #164]	@ (8002ea0 <USBPD_PE_StateMachine_SRC+0xac>)
 8002dfc:	00a9      	lsls	r1, r5, #2
 8002dfe:	5844      	ldr	r4, [r0, r1]
 8002e00:	7c60      	ldrb	r0, [r4, #17]
 8002e02:	2848      	cmp	r0, #72	@ 0x48
 8002e04:	d134      	bne.n	8002e70 <USBPD_PE_StateMachine_SRC+0x7c>
 8002e06:	0020      	movs	r0, r4
 8002e08:	f7fd ffc0 	bl	8000d8c <PE_Reset_ZI>
 8002e0c:	0020      	movs	r0, r4
 8002e0e:	f7fd fff3 	bl	8000df8 <PE_Reset_Counter>
 8002e12:	6820      	ldr	r0, [r4, #0]
 8002e14:	7900      	ldrb	r0, [r0, #4]
 8002e16:	0783      	lsls	r3, r0, #30
 8002e18:	0f9b      	lsrs	r3, r3, #30
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	7c20      	ldrb	r0, [r4, #16]
 8002e20:	f002 fd83 	bl	800592a <USBPD_PRL_SetHeader>
 8002e24:	6860      	ldr	r0, [r4, #4]
 8002e26:	6801      	ldr	r1, [r0, #0]
 8002e28:	2208      	movs	r2, #8
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	6002      	str	r2, [r0, #0]
 8002e2e:	6860      	ldr	r0, [r4, #4]
 8002e30:	6801      	ldr	r1, [r0, #0]
 8002e32:	2203      	movs	r2, #3
 8002e34:	4391      	bics	r1, r2
 8002e36:	6822      	ldr	r2, [r4, #0]
 8002e38:	7912      	ldrb	r2, [r2, #4]
 8002e3a:	0792      	lsls	r2, r2, #30
 8002e3c:	0f92      	lsrs	r2, r2, #30
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	6002      	str	r2, [r0, #0]
 8002e42:	2101      	movs	r1, #1
 8002e44:	7c20      	ldrb	r0, [r4, #16]
 8002e46:	f002 fde1 	bl	8005a0c <USBPD_PRL_SOPCapability>
 8002e4a:	7c20      	ldrb	r0, [r4, #16]
 8002e4c:	f003 f84a 	bl	8005ee4 <USBPD_PRL_Reset>
 8002e50:	2002      	movs	r0, #2
 8002e52:	7460      	strb	r0, [r4, #17]
 8002e54:	7ca0      	ldrb	r0, [r4, #18]
 8002e56:	2802      	cmp	r0, #2
 8002e58:	d00a      	beq.n	8002e70 <USBPD_PE_StateMachine_SRC+0x7c>
 8002e5a:	2002      	movs	r0, #2
 8002e5c:	74a0      	strb	r0, [r4, #18]
 8002e5e:	2000      	movs	r0, #0
 8002e60:	9000      	str	r0, [sp, #0]
 8002e62:	2300      	movs	r3, #0
 8002e64:	2202      	movs	r2, #2
 8002e66:	7c21      	ldrb	r1, [r4, #16]
 8002e68:	2004      	movs	r0, #4
 8002e6a:	4eca      	ldr	r6, [pc, #808]	@ (8003194 <__iar_annotation$$branch+0x6c>)
 8002e6c:	6836      	ldr	r6, [r6, #0]
 8002e6e:	47b0      	blx	r6
 8002e70:	6960      	ldr	r0, [r4, #20]
 8002e72:	0341      	lsls	r1, r0, #13
 8002e74:	0fc9      	lsrs	r1, r1, #31
 8002e76:	d006      	beq.n	8002e86 <USBPD_PE_StateMachine_SRC+0x92>
 8002e78:	49c7      	ldr	r1, [pc, #796]	@ (8003198 <__iar_annotation$$branch+0x70>)
 8002e7a:	4001      	ands	r1, r0
 8002e7c:	6161      	str	r1, [r4, #20]
 8002e7e:	2164      	movs	r1, #100	@ 0x64
 8002e80:	7c20      	ldrb	r0, [r4, #16]
 8002e82:	f7fd fc31 	bl	80006e8 <USBPD_PE_Notification>
 8002e86:	0020      	movs	r0, r4
 8002e88:	f7fd fe62 	bl	8000b50 <PE_Get_RxEvent>
 8002e8c:	4669      	mov	r1, sp
 8002e8e:	7308      	strb	r0, [r1, #12]
 8002e90:	4668      	mov	r0, sp
 8002e92:	7b00      	ldrb	r0, [r0, #12]
 8002e94:	2803      	cmp	r0, #3
 8002e96:	d105      	bne.n	8002ea4 <USBPD_PE_StateMachine_SRC+0xb0>
 8002e98:	2001      	movs	r0, #1
 8002e9a:	b007      	add	sp, #28
 8002e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	2000027c 	.word	0x2000027c
 8002ea4:	4668      	mov	r0, sp
 8002ea6:	7345      	strb	r5, [r0, #13]
 8002ea8:	6860      	ldr	r0, [r4, #4]
 8002eaa:	6800      	ldr	r0, [r0, #0]
 8002eac:	04c1      	lsls	r1, r0, #19
 8002eae:	0fc9      	lsrs	r1, r1, #31
 8002eb0:	d100      	bne.n	8002eb4 <USBPD_PE_StateMachine_SRC+0xc0>
 8002eb2:	e13b      	b.n	800312c <__iar_annotation$$branch+0x4>
 8002eb4:	6960      	ldr	r0, [r4, #20]
 8002eb6:	0381      	lsls	r1, r0, #14
 8002eb8:	0fc9      	lsrs	r1, r1, #31
 8002eba:	d100      	bne.n	8002ebe <USBPD_PE_StateMachine_SRC+0xca>
 8002ebc:	e144      	b.n	8003148 <__iar_annotation$$branch+0x20>
 8002ebe:	4668      	mov	r0, sp
 8002ec0:	7b40      	ldrb	r0, [r0, #13]
 8002ec2:	f002 fd9b 	bl	80059fc <USBPD_PRL_FastRoleSwapSignalling>
 8002ec6:	20a6      	movs	r0, #166	@ 0xa6
 8002ec8:	7460      	strb	r0, [r4, #17]
 8002eca:	2109      	movs	r1, #9
 8002ecc:	7721      	strb	r1, [r4, #28]
 8002ece:	2100      	movs	r1, #0
 8002ed0:	2232      	movs	r2, #50	@ 0x32
 8002ed2:	54a1      	strb	r1, [r4, r2]
 8002ed4:	6961      	ldr	r1, [r4, #20]
 8002ed6:	4ab1      	ldr	r2, [pc, #708]	@ (800319c <__iar_annotation$$branch+0x74>)
 8002ed8:	400a      	ands	r2, r1
 8002eda:	6162      	str	r2, [r4, #20]
 8002edc:	49b0      	ldr	r1, [pc, #704]	@ (80031a0 <__iar_annotation$$branch+0x78>)
 8002ede:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8002ee0:	7ca1      	ldrb	r1, [r4, #18]
 8002ee2:	29a6      	cmp	r1, #166	@ 0xa6
 8002ee4:	d000      	beq.n	8002ee8 <USBPD_PE_StateMachine_SRC+0xf4>
 8002ee6:	e125      	b.n	8003134 <__iar_annotation$$branch+0xc>
 8002ee8:	2502      	movs	r5, #2
 8002eea:	4668      	mov	r0, sp
 8002eec:	7b00      	ldrb	r0, [r0, #12]
 8002eee:	2811      	cmp	r0, #17
 8002ef0:	d11f      	bne.n	8002f32 <USBPD_PE_StateMachine_SRC+0x13e>
 8002ef2:	6860      	ldr	r0, [r4, #4]
 8002ef4:	6800      	ldr	r0, [r0, #0]
 8002ef6:	0701      	lsls	r1, r0, #28
 8002ef8:	0fc9      	lsrs	r1, r1, #31
 8002efa:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8002efc:	0680      	lsls	r0, r0, #26
 8002efe:	0fc2      	lsrs	r2, r0, #31
 8002f00:	4291      	cmp	r1, r2
 8002f02:	d116      	bne.n	8002f32 <USBPD_PE_StateMachine_SRC+0x13e>
 8002f04:	2014      	movs	r0, #20
 8002f06:	4669      	mov	r1, sp
 8002f08:	7308      	strb	r0, [r1, #12]
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	f7fd fe57 	bl	8000bbe <PE_Clear_RxEvent>
 8002f10:	2092      	movs	r0, #146	@ 0x92
 8002f12:	7460      	strb	r0, [r4, #17]
 8002f14:	7ca0      	ldrb	r0, [r4, #18]
 8002f16:	2892      	cmp	r0, #146	@ 0x92
 8002f18:	d100      	bne.n	8002f1c <USBPD_PE_StateMachine_SRC+0x128>
 8002f1a:	e155      	b.n	80031c8 <__iar_annotation$$branch+0xa0>
 8002f1c:	2092      	movs	r0, #146	@ 0x92
 8002f1e:	74a0      	strb	r0, [r4, #18]
 8002f20:	2000      	movs	r0, #0
 8002f22:	9000      	str	r0, [sp, #0]
 8002f24:	2300      	movs	r3, #0
 8002f26:	2292      	movs	r2, #146	@ 0x92
 8002f28:	7c21      	ldrb	r1, [r4, #16]
 8002f2a:	2004      	movs	r0, #4
 8002f2c:	4e99      	ldr	r6, [pc, #612]	@ (8003194 <__iar_annotation$$branch+0x6c>)
 8002f2e:	6836      	ldr	r6, [r6, #0]
 8002f30:	47b0      	blx	r6
 8002f32:	7c60      	ldrb	r0, [r4, #17]
 8002f34:	499b      	ldr	r1, [pc, #620]	@ (80031a4 <__iar_annotation$$branch+0x7c>)
 8002f36:	1866      	adds	r6, r4, r1
 8002f38:	4f9b      	ldr	r7, [pc, #620]	@ (80031a8 <__iar_annotation$$branch+0x80>)
 8002f3a:	499c      	ldr	r1, [pc, #624]	@ (80031ac <__iar_annotation$$branch+0x84>)
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	d100      	bne.n	8002f42 <USBPD_PE_StateMachine_SRC+0x14e>
 8002f40:	e136      	b.n	80031b0 <__iar_annotation$$branch+0x88>
 8002f42:	1e42      	subs	r2, r0, #1
 8002f44:	d067      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 8002f46:	1e52      	subs	r2, r2, #1
 8002f48:	d100      	bne.n	8002f4c <USBPD_PE_StateMachine_SRC+0x158>
 8002f4a:	e149      	b.n	80031e0 <__iar_annotation$$branch+0xb8>
 8002f4c:	1e52      	subs	r2, r2, #1
 8002f4e:	2a01      	cmp	r2, #1
 8002f50:	d801      	bhi.n	8002f56 <__iar_annotation$$branch+0x4>

08002f52 <__iar_annotation$$branch>:
 8002f52:	f000 fd90 	bl	8003a76 <__iar_annotation$$branch+0x94e>
 8002f56:	1e92      	subs	r2, r2, #2
 8002f58:	d100      	bne.n	8002f5c <__iar_annotation$$branch+0xa>
 8002f5a:	e189      	b.n	8003270 <__iar_annotation$$branch+0x148>
 8002f5c:	1e52      	subs	r2, r2, #1
 8002f5e:	d100      	bne.n	8002f62 <__iar_annotation$$branch+0x10>
 8002f60:	e18b      	b.n	800327a <__iar_annotation$$branch+0x152>
 8002f62:	1e52      	subs	r2, r2, #1
 8002f64:	d100      	bne.n	8002f68 <__iar_annotation$$branch+0x16>
 8002f66:	e190      	b.n	800328a <__iar_annotation$$branch+0x162>
 8002f68:	1e52      	subs	r2, r2, #1
 8002f6a:	d100      	bne.n	8002f6e <__iar_annotation$$branch+0x1c>
 8002f6c:	e1e1      	b.n	8003332 <__iar_annotation$$branch+0x20a>
 8002f6e:	1e52      	subs	r2, r2, #1
 8002f70:	d100      	bne.n	8002f74 <__iar_annotation$$branch+0x22>
 8002f72:	e223      	b.n	80033bc <__iar_annotation$$branch+0x294>
 8002f74:	1ed2      	subs	r2, r2, #3
 8002f76:	d100      	bne.n	8002f7a <__iar_annotation$$branch+0x28>
 8002f78:	e276      	b.n	8003468 <__iar_annotation$$branch+0x340>
 8002f7a:	1e52      	subs	r2, r2, #1
 8002f7c:	d100      	bne.n	8002f80 <__iar_annotation$$branch+0x2e>
 8002f7e:	e286      	b.n	800348e <__iar_annotation$$branch+0x366>
 8002f80:	1e52      	subs	r2, r2, #1
 8002f82:	d100      	bne.n	8002f86 <__iar_annotation$$branch+0x34>
 8002f84:	e11d      	b.n	80031c2 <__iar_annotation$$branch+0x9a>
 8002f86:	1e52      	subs	r2, r2, #1
 8002f88:	d100      	bne.n	8002f8c <__iar_annotation$$branch+0x3a>
 8002f8a:	e30d      	b.n	80035a8 <__iar_annotation$$branch+0x480>
 8002f8c:	1e52      	subs	r2, r2, #1
 8002f8e:	d100      	bne.n	8002f92 <__iar_annotation$$branch+0x40>
 8002f90:	e2c6      	b.n	8003520 <__iar_annotation$$branch+0x3f8>
 8002f92:	1e52      	subs	r2, r2, #1
 8002f94:	d100      	bne.n	8002f98 <__iar_annotation$$branch+0x46>
 8002f96:	e2cc      	b.n	8003532 <__iar_annotation$$branch+0x40a>
 8002f98:	1e52      	subs	r2, r2, #1
 8002f9a:	d100      	bne.n	8002f9e <__iar_annotation$$branch+0x4c>
 8002f9c:	e2d8      	b.n	8003550 <__iar_annotation$$branch+0x428>
 8002f9e:	1e52      	subs	r2, r2, #1
 8002fa0:	d100      	bne.n	8002fa4 <__iar_annotation$$branch+0x52>
 8002fa2:	e389      	b.n	80036b8 <__iar_annotation$$branch+0x590>
 8002fa4:	1e52      	subs	r2, r2, #1
 8002fa6:	d100      	bne.n	8002faa <__iar_annotation$$branch+0x58>
 8002fa8:	e32b      	b.n	8003602 <__iar_annotation$$branch+0x4da>
 8002faa:	1e52      	subs	r2, r2, #1
 8002fac:	d100      	bne.n	8002fb0 <__iar_annotation$$branch+0x5e>
 8002fae:	e332      	b.n	8003616 <__iar_annotation$$branch+0x4ee>
 8002fb0:	1e52      	subs	r2, r2, #1
 8002fb2:	d100      	bne.n	8002fb6 <__iar_annotation$$branch+0x64>
 8002fb4:	e1d5      	b.n	8003362 <__iar_annotation$$branch+0x23a>
 8002fb6:	1e52      	subs	r2, r2, #1
 8002fb8:	d100      	bne.n	8002fbc <__iar_annotation$$branch+0x6a>
 8002fba:	e34c      	b.n	8003656 <__iar_annotation$$branch+0x52e>
 8002fbc:	1e52      	subs	r2, r2, #1
 8002fbe:	2a01      	cmp	r2, #1
 8002fc0:	d929      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 8002fc2:	1e92      	subs	r2, r2, #2
 8002fc4:	d100      	bne.n	8002fc8 <__iar_annotation$$branch+0x76>
 8002fc6:	e3a3      	b.n	8003710 <__iar_annotation$$branch+0x5e8>
 8002fc8:	1e52      	subs	r2, r2, #1
 8002fca:	d100      	bne.n	8002fce <__iar_annotation$$branch+0x7c>
 8002fcc:	e3b0      	b.n	8003730 <__iar_annotation$$branch+0x608>
 8002fce:	1e92      	subs	r2, r2, #2
 8002fd0:	d021      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 8002fd2:	1e52      	subs	r2, r2, #1
 8002fd4:	d101      	bne.n	8002fda <__iar_annotation$$branch+0x4>

08002fd6 <__iar_annotation$$branch>:
 8002fd6:	f000 fc88 	bl	80038ea <__iar_annotation$$branch+0x7c2>
 8002fda:	1e52      	subs	r2, r2, #1
 8002fdc:	d101      	bne.n	8002fe2 <__iar_annotation$$branch+0x4>

08002fde <__iar_annotation$$branch>:
 8002fde:	f000 fc9a 	bl	8003916 <__iar_annotation$$branch+0x7ee>
 8002fe2:	1e52      	subs	r2, r2, #1
 8002fe4:	d101      	bne.n	8002fea <__iar_annotation$$branch+0x4>

08002fe6 <__iar_annotation$$branch>:
 8002fe6:	f000 fce6 	bl	80039b6 <__iar_annotation$$branch+0x88e>
 8002fea:	1e52      	subs	r2, r2, #1
 8002fec:	d101      	bne.n	8002ff2 <__iar_annotation$$branch+0x4>

08002fee <__iar_annotation$$branch>:
 8002fee:	f000 fd0f 	bl	8003a10 <__iar_annotation$$branch+0x8e8>
 8002ff2:	1e52      	subs	r2, r2, #1
 8002ff4:	d101      	bne.n	8002ffa <__iar_annotation$$branch+0x4>

08002ff6 <__iar_annotation$$branch>:
 8002ff6:	f000 fbe5 	bl	80037c4 <__iar_annotation$$branch+0x69c>
 8002ffa:	1e92      	subs	r2, r2, #2
 8002ffc:	d101      	bne.n	8003002 <__iar_annotation$$branch+0x4>

08002ffe <__iar_annotation$$branch>:
 8002ffe:	f000 fc0a 	bl	8003816 <__iar_annotation$$branch+0x6ee>
 8003002:	1e52      	subs	r2, r2, #1
 8003004:	d101      	bne.n	800300a <__iar_annotation$$branch+0x4>

08003006 <__iar_annotation$$branch>:
 8003006:	f000 fc2e 	bl	8003866 <__iar_annotation$$branch+0x73e>
 800300a:	1e52      	subs	r2, r2, #1
 800300c:	d101      	bne.n	8003012 <__iar_annotation$$branch+0x4>

0800300e <__iar_annotation$$branch>:
 800300e:	f000 fc49 	bl	80038a4 <__iar_annotation$$branch+0x77c>
 8003012:	1e52      	subs	r2, r2, #1
 8003014:	2a02      	cmp	r2, #2
 8003016:	d801      	bhi.n	800301c <__iar_annotation$$branch+0x4>

08003018 <__iar_annotation$$branch>:
 8003018:	f000 fe1b 	bl	8003c52 <__iar_annotation$$branch+0x106>
 800301c:	1ed2      	subs	r2, r2, #3
 800301e:	d101      	bne.n	8003024 <__iar_annotation$$branch+0x4>

08003020 <__iar_annotation$$branch>:
 8003020:	f000 fbf4 	bl	800380c <__iar_annotation$$branch+0x6e4>
 8003024:	1e52      	subs	r2, r2, #1
 8003026:	d101      	bne.n	800302c <__iar_annotation$$branch+0x4>

08003028 <__iar_annotation$$branch>:
 8003028:	f000 fd96 	bl	8003b58 <__iar_annotation$$branch+0xc>
 800302c:	1e52      	subs	r2, r2, #1
 800302e:	d0f2      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 8003030:	1e52      	subs	r2, r2, #1
 8003032:	d101      	bne.n	8003038 <__iar_annotation$$branch+0x4>

08003034 <__iar_annotation$$branch>:
 8003034:	f000 fda1 	bl	8003b7a <__iar_annotation$$branch+0x2e>
 8003038:	1e52      	subs	r2, r2, #1
 800303a:	d101      	bne.n	8003040 <__iar_annotation$$branch+0x4>

0800303c <__iar_annotation$$branch>:
 800303c:	f000 fdcf 	bl	8003bde <__iar_annotation$$branch+0x92>
 8003040:	1e52      	subs	r2, r2, #1
 8003042:	2a01      	cmp	r2, #1
 8003044:	d9e7      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 8003046:	1e92      	subs	r2, r2, #2
 8003048:	d001      	beq.n	800304e <__iar_annotation$$branch+0x12>
 800304a:	1e92      	subs	r2, r2, #2
 800304c:	2a05      	cmp	r2, #5
 800304e:	d801      	bhi.n	8003054 <__iar_annotation$$branch+0x4>

08003050 <__iar_annotation$$branch>:
 8003050:	f000 fdfb 	bl	8003c4a <__iar_annotation$$branch+0xfe>
 8003054:	1f92      	subs	r2, r2, #6
 8003056:	d101      	bne.n	800305c <__iar_annotation$$branch+0x4>

08003058 <__iar_annotation$$branch>:
 8003058:	f000 fdd2 	bl	8003c00 <__iar_annotation$$branch+0xb4>
 800305c:	1e52      	subs	r2, r2, #1
 800305e:	2a03      	cmp	r2, #3
 8003060:	d9d9      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 8003062:	3a11      	subs	r2, #17
 8003064:	d0d7      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 8003066:	1e52      	subs	r2, r2, #1
 8003068:	d100      	bne.n	800306c <__iar_annotation$$branch+0x14>
 800306a:	e150      	b.n	800330e <__iar_annotation$$branch+0x1e6>
 800306c:	3a0f      	subs	r2, #15
 800306e:	d101      	bne.n	8003074 <__iar_annotation$$branch+0x4>

08003070 <__iar_annotation$$branch>:
 8003070:	f000 fce9 	bl	8003a46 <__iar_annotation$$branch+0x91e>
 8003074:	1fd2      	subs	r2, r2, #7
 8003076:	2a01      	cmp	r2, #1
 8003078:	d9cd      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 800307a:	1f52      	subs	r2, r2, #5
 800307c:	2a01      	cmp	r2, #1
 800307e:	d9ca      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 8003080:	3a0d      	subs	r2, #13
 8003082:	d0c8      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 8003084:	3a12      	subs	r2, #18
 8003086:	d101      	bne.n	800308c <__iar_annotation$$branch+0x4>

08003088 <__iar_annotation$$branch>:
 8003088:	f000 fe18 	bl	8003cbc <__iar_annotation$$branch+0x62>
 800308c:	3a0c      	subs	r2, #12
 800308e:	d100      	bne.n	8003092 <__iar_annotation$$branch+0xa>
 8003090:	e09a      	b.n	80031c8 <__iar_annotation$$branch+0xa0>
 8003092:	1e52      	subs	r2, r2, #1
 8003094:	2a02      	cmp	r2, #2
 8003096:	d9be      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 8003098:	1ed2      	subs	r2, r2, #3
 800309a:	d100      	bne.n	800309e <__iar_annotation$$branch+0x16>
 800309c:	e213      	b.n	80034c6 <__iar_annotation$$branch+0x39e>
 800309e:	1e52      	subs	r2, r2, #1
 80030a0:	d100      	bne.n	80030a4 <__iar_annotation$$branch+0x1c>
 80030a2:	e229      	b.n	80034f8 <__iar_annotation$$branch+0x3d0>
 80030a4:	1e92      	subs	r2, r2, #2
 80030a6:	d0b6      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 80030a8:	1e52      	subs	r2, r2, #1
 80030aa:	d100      	bne.n	80030ae <__iar_annotation$$branch+0x26>
 80030ac:	e0e0      	b.n	8003270 <__iar_annotation$$branch+0x148>
 80030ae:	1e92      	subs	r2, r2, #2
 80030b0:	2a08      	cmp	r2, #8
 80030b2:	d801      	bhi.n	80030b8 <__iar_annotation$$branch+0x4>

080030b4 <__iar_annotation$$branch>:
 80030b4:	f000 fdd3 	bl	8003c5e <__iar_annotation$$branch+0x4>
 80030b8:	3a0a      	subs	r2, #10
 80030ba:	d101      	bne.n	80030c0 <__iar_annotation$$branch+0x4>

080030bc <__iar_annotation$$branch>:
 80030bc:	f000 fde2 	bl	8003c84 <__iar_annotation$$branch+0x2a>
 80030c0:	a903      	add	r1, sp, #12
 80030c2:	0020      	movs	r0, r4
 80030c4:	f001 fb32 	bl	800472c <PE_StateMachine_VDM>
 80030c8:	0005      	movs	r5, r0
 80030ca:	7c62      	ldrb	r2, [r4, #17]
 80030cc:	4e31      	ldr	r6, [pc, #196]	@ (8003194 <__iar_annotation$$branch+0x6c>)
 80030ce:	7ca0      	ldrb	r0, [r4, #18]
 80030d0:	4290      	cmp	r0, r2
 80030d2:	d007      	beq.n	80030e4 <__iar_annotation$$branch+0x28>
 80030d4:	74a2      	strb	r2, [r4, #18]
 80030d6:	2000      	movs	r0, #0
 80030d8:	9000      	str	r0, [sp, #0]
 80030da:	2300      	movs	r3, #0
 80030dc:	7c21      	ldrb	r1, [r4, #16]
 80030de:	2004      	movs	r0, #4
 80030e0:	6837      	ldr	r7, [r6, #0]
 80030e2:	47b8      	blx	r7
 80030e4:	4668      	mov	r0, sp
 80030e6:	7b00      	ldrb	r0, [r0, #12]
 80030e8:	2814      	cmp	r0, #20
 80030ea:	d101      	bne.n	80030f0 <__iar_annotation$$branch+0x4>

080030ec <__iar_annotation$$branch>:
 80030ec:	f000 fdec 	bl	8003cc8 <__iar_annotation$$branch+0x6e>
 80030f0:	0020      	movs	r0, r4
 80030f2:	f7fd fdab 	bl	8000c4c <PE_Check_AMSConflict>
 80030f6:	2815      	cmp	r0, #21
 80030f8:	d109      	bne.n	800310e <__iar_annotation$$branch+0x22>
 80030fa:	4668      	mov	r0, sp
 80030fc:	7b00      	ldrb	r0, [r0, #12]
 80030fe:	2814      	cmp	r0, #20
 8003100:	d005      	beq.n	800310e <__iar_annotation$$branch+0x22>
 8003102:	2014      	movs	r0, #20
 8003104:	4669      	mov	r1, sp
 8003106:	7308      	strb	r0, [r1, #12]
 8003108:	0020      	movs	r0, r4
 800310a:	f7fd fd58 	bl	8000bbe <PE_Clear_RxEvent>
 800310e:	7c62      	ldrb	r2, [r4, #17]
 8003110:	7ca0      	ldrb	r0, [r4, #18]
 8003112:	4290      	cmp	r0, r2
 8003114:	d007      	beq.n	8003126 <__iar_annotation$$branch+0x3a>
 8003116:	74a2      	strb	r2, [r4, #18]
 8003118:	2000      	movs	r0, #0
 800311a:	9000      	str	r0, [sp, #0]
 800311c:	2300      	movs	r3, #0
 800311e:	7c21      	ldrb	r1, [r4, #16]
 8003120:	2004      	movs	r0, #4
 8003122:	6835      	ldr	r5, [r6, #0]
 8003124:	47a8      	blx	r5
 8003126:	2500      	movs	r5, #0

08003128 <__iar_annotation$$branch>:
 8003128:	f000 fded 	bl	8003d06 <__iar_annotation$$branch+0xac>
 800312c:	2500      	movs	r5, #0
 800312e:	43ed      	mvns	r5, r5
 8003130:	0028      	movs	r0, r5
 8003132:	e6b2      	b.n	8002e9a <USBPD_PE_StateMachine_SRC+0xa6>
 8003134:	74a0      	strb	r0, [r4, #18]
 8003136:	2000      	movs	r0, #0
 8003138:	9000      	str	r0, [sp, #0]
 800313a:	2300      	movs	r3, #0
 800313c:	22a6      	movs	r2, #166	@ 0xa6
 800313e:	7c21      	ldrb	r1, [r4, #16]
 8003140:	2004      	movs	r0, #4
 8003142:	4d14      	ldr	r5, [pc, #80]	@ (8003194 <__iar_annotation$$branch+0x6c>)
 8003144:	682d      	ldr	r5, [r5, #0]
 8003146:	47a8      	blx	r5
 8003148:	2502      	movs	r5, #2
 800314a:	2032      	movs	r0, #50	@ 0x32
 800314c:	5c20      	ldrb	r0, [r4, r0]
 800314e:	280f      	cmp	r0, #15
 8003150:	d001      	beq.n	8003156 <__iar_annotation$$branch+0x2e>
 8003152:	2814      	cmp	r0, #20
 8003154:	d11c      	bne.n	8003190 <__iar_annotation$$branch+0x68>
 8003156:	4668      	mov	r0, sp
 8003158:	7b00      	ldrb	r0, [r0, #12]
 800315a:	2814      	cmp	r0, #20
 800315c:	d005      	beq.n	800316a <__iar_annotation$$branch+0x42>
 800315e:	2014      	movs	r0, #20
 8003160:	4669      	mov	r1, sp
 8003162:	7308      	strb	r0, [r1, #12]
 8003164:	0020      	movs	r0, r4
 8003166:	f7fd fd2a 	bl	8000bbe <PE_Clear_RxEvent>
 800316a:	2032      	movs	r0, #50	@ 0x32
 800316c:	5c22      	ldrb	r2, [r4, r0]
 800316e:	7462      	strb	r2, [r4, #17]
 8003170:	2000      	movs	r0, #0
 8003172:	2332      	movs	r3, #50	@ 0x32
 8003174:	54e0      	strb	r0, [r4, r3]
 8003176:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8003178:	7ca0      	ldrb	r0, [r4, #18]
 800317a:	4290      	cmp	r0, r2
 800317c:	d008      	beq.n	8003190 <__iar_annotation$$branch+0x68>
 800317e:	74a2      	strb	r2, [r4, #18]
 8003180:	2000      	movs	r0, #0
 8003182:	9000      	str	r0, [sp, #0]
 8003184:	2300      	movs	r3, #0
 8003186:	7c21      	ldrb	r1, [r4, #16]
 8003188:	2004      	movs	r0, #4
 800318a:	4e02      	ldr	r6, [pc, #8]	@ (8003194 <__iar_annotation$$branch+0x6c>)
 800318c:	6836      	ldr	r6, [r6, #0]
 800318e:	47b0      	blx	r6
 8003190:	e6ab      	b.n	8002eea <USBPD_PE_StateMachine_SRC+0xf6>
 8003192:	bf00      	nop
 8003194:	20000000 	.word	0x20000000
 8003198:	fffbffff 	.word	0xfffbffff
 800319c:	fffdffff 	.word	0xfffdffff
 80031a0:	00008011 	.word	0x00008011
 80031a4:	0000025e 	.word	0x0000025e
 80031a8:	0000801b 	.word	0x0000801b
 80031ac:	0000f01f 	.word	0x0000f01f
 80031b0:	6860      	ldr	r0, [r4, #4]
 80031b2:	6801      	ldr	r1, [r0, #0]
 80031b4:	2210      	movs	r2, #16
 80031b6:	4391      	bics	r1, r2
 80031b8:	6001      	str	r1, [r0, #0]
 80031ba:	215f      	movs	r1, #95	@ 0x5f
 80031bc:	7c20      	ldrb	r0, [r4, #16]
 80031be:	f7fd fa93 	bl	80006e8 <USBPD_PE_Notification>
 80031c2:	2500      	movs	r5, #0
 80031c4:	43ed      	mvns	r5, r5
 80031c6:	e780      	b.n	80030ca <__iar_annotation$$branch+0xe>
 80031c8:	6860      	ldr	r0, [r4, #4]
 80031ca:	6801      	ldr	r1, [r0, #0]
 80031cc:	2210      	movs	r2, #16
 80031ce:	4391      	bics	r1, r2
 80031d0:	6001      	str	r1, [r0, #0]
 80031d2:	68a0      	ldr	r0, [r4, #8]
 80031d4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80031d6:	2900      	cmp	r1, #0
 80031d8:	d0f3      	beq.n	80031c2 <__iar_annotation$$branch+0x9a>
 80031da:	7c20      	ldrb	r0, [r4, #16]
 80031dc:	4788      	blx	r1
 80031de:	e7f0      	b.n	80031c2 <__iar_annotation$$branch+0x9a>
 80031e0:	2701      	movs	r7, #1
 80031e2:	6860      	ldr	r0, [r4, #4]
 80031e4:	6800      	ldr	r0, [r0, #0]
 80031e6:	0bc0      	lsrs	r0, r0, #15
 80031e8:	4038      	ands	r0, r7
 80031ea:	d002      	beq.n	80031f2 <__iar_annotation$$branch+0xca>
 80031ec:	6820      	ldr	r0, [r4, #0]
 80031ee:	6801      	ldr	r1, [r0, #0]
 80031f0:	e000      	b.n	80031f4 <__iar_annotation$$branch+0xcc>
 80031f2:	2101      	movs	r1, #1
 80031f4:	4668      	mov	r0, sp
 80031f6:	7b40      	ldrb	r0, [r0, #13]
 80031f8:	f002 fc08 	bl	8005a0c <USBPD_PRL_SOPCapability>
 80031fc:	6860      	ldr	r0, [r4, #4]
 80031fe:	6801      	ldr	r1, [r0, #0]
 8003200:	0b0a      	lsrs	r2, r1, #12
 8003202:	403a      	ands	r2, r7
 8003204:	d02f      	beq.n	8003266 <__iar_annotation$$branch+0x13e>
 8003206:	078a      	lsls	r2, r1, #30
 8003208:	0f92      	lsrs	r2, r2, #30
 800320a:	2a01      	cmp	r2, #1
 800320c:	d101      	bne.n	8003212 <__iar_annotation$$branch+0xea>
 800320e:	2200      	movs	r2, #0
 8003210:	e000      	b.n	8003214 <__iar_annotation$$branch+0xec>
 8003212:	2220      	movs	r2, #32
 8003214:	2320      	movs	r3, #32
 8003216:	4399      	bics	r1, r3
 8003218:	430a      	orrs	r2, r1
 800321a:	6002      	str	r2, [r0, #0]
 800321c:	2000      	movs	r0, #0
 800321e:	70f0      	strb	r0, [r6, #3]
 8003220:	2101      	movs	r1, #1
 8003222:	0020      	movs	r0, r4
 8003224:	f7fe f9f3 	bl	800160e <PE_SetPowerNegotiation>
 8003228:	6860      	ldr	r0, [r4, #4]
 800322a:	6800      	ldr	r0, [r0, #0]
 800322c:	0901      	lsrs	r1, r0, #4
 800322e:	4039      	ands	r1, r7
 8003230:	d005      	beq.n	800323e <__iar_annotation$$branch+0x116>
 8003232:	48ae      	ldr	r0, [pc, #696]	@ (80034ec <__iar_annotation$$branch+0x3c4>)
 8003234:	83e0      	strh	r0, [r4, #30]
 8003236:	2514      	movs	r5, #20
 8003238:	2006      	movs	r0, #6
 800323a:	7460      	strb	r0, [r4, #17]
 800323c:	e745      	b.n	80030ca <__iar_annotation$$branch+0xe>
 800323e:	0bc0      	lsrs	r0, r0, #15
 8003240:	4007      	ands	r7, r0
 8003242:	d00a      	beq.n	800325a <__iar_annotation$$branch+0x132>
 8003244:	6820      	ldr	r0, [r4, #0]
 8003246:	7800      	ldrb	r0, [r0, #0]
 8003248:	0780      	lsls	r0, r0, #30
 800324a:	d400      	bmi.n	800324e <__iar_annotation$$branch+0x126>
 800324c:	e087      	b.n	800335e <__iar_annotation$$branch+0x236>
 800324e:	7930      	ldrb	r0, [r6, #4]
 8003250:	2814      	cmp	r0, #20
 8003252:	d300      	bcc.n	8003256 <__iar_annotation$$branch+0x12e>
 8003254:	e083      	b.n	800335e <__iar_annotation$$branch+0x236>
 8003256:	68e1      	ldr	r1, [r4, #12]
 8003258:	2900      	cmp	r1, #0
 800325a:	d100      	bne.n	800325e <__iar_annotation$$branch+0x136>
 800325c:	e07f      	b.n	800335e <__iar_annotation$$branch+0x236>
 800325e:	1c40      	adds	r0, r0, #1
 8003260:	7130      	strb	r0, [r6, #4]
 8003262:	2005      	movs	r0, #5
 8003264:	e7e9      	b.n	800323a <__iar_annotation$$branch+0x112>
 8003266:	2121      	movs	r1, #33	@ 0x21
 8003268:	7c20      	ldrb	r0, [r4, #16]
 800326a:	f7fd fa3d 	bl	80006e8 <USBPD_PE_Notification>
 800326e:	e04c      	b.n	800330a <__iar_annotation$$branch+0x1e2>
 8003270:	a903      	add	r1, sp, #12
 8003272:	0020      	movs	r0, r4
 8003274:	f000 fd8c 	bl	8003d90 <PE_StateMachine_VDMCable>
 8003278:	e726      	b.n	80030c8 <__iar_annotation$$branch+0xc>
 800327a:	8be0      	ldrh	r0, [r4, #30]
 800327c:	03a9      	lsls	r1, r5, #14
 800327e:	4288      	cmp	r0, r1
 8003280:	d102      	bne.n	8003288 <__iar_annotation$$branch+0x160>
 8003282:	2007      	movs	r0, #7
 8003284:	7460      	strb	r0, [r4, #17]
 8003286:	2500      	movs	r5, #0
 8003288:	e71f      	b.n	80030ca <__iar_annotation$$branch+0xe>
 800328a:	6960      	ldr	r0, [r4, #20]
 800328c:	0740      	lsls	r0, r0, #29
 800328e:	0fc1      	lsrs	r1, r0, #31
 8003290:	0020      	movs	r0, r4
 8003292:	f000 fd45 	bl	8003d20 <PE_Send_SRCCapabilities>
 8003296:	2805      	cmp	r0, #5
 8003298:	d002      	beq.n	80032a0 <__iar_annotation$$branch+0x178>
 800329a:	2809      	cmp	r0, #9
 800329c:	d0f4      	beq.n	8003288 <__iar_annotation$$branch+0x160>
 800329e:	e011      	b.n	80032c4 <__iar_annotation$$branch+0x19c>
 80032a0:	2001      	movs	r0, #1
 80032a2:	7720      	strb	r0, [r4, #28]
 80032a4:	6960      	ldr	r0, [r4, #20]
 80032a6:	2104      	movs	r1, #4
 80032a8:	4301      	orrs	r1, r0
 80032aa:	6161      	str	r1, [r4, #20]
 80032ac:	2000      	movs	r0, #0
 80032ae:	70f0      	strb	r0, [r6, #3]
 80032b0:	70b0      	strb	r0, [r6, #2]
 80032b2:	83e7      	strh	r7, [r4, #30]
 80032b4:	251b      	movs	r5, #27
 80032b6:	2016      	movs	r0, #22
 80032b8:	7460      	strb	r0, [r4, #17]
 80032ba:	210f      	movs	r1, #15
 80032bc:	7c20      	ldrb	r0, [r4, #16]
 80032be:	f7fd fa13 	bl	80006e8 <USBPD_PE_Notification>
 80032c2:	e702      	b.n	80030ca <__iar_annotation$$branch+0xe>
 80032c4:	6960      	ldr	r0, [r4, #20]
 80032c6:	0741      	lsls	r1, r0, #29
 80032c8:	0fc9      	lsrs	r1, r1, #31
 80032ca:	d10f      	bne.n	80032ec <__iar_annotation$$branch+0x1c4>
 80032cc:	78f0      	ldrb	r0, [r6, #3]
 80032ce:	2833      	cmp	r0, #51	@ 0x33
 80032d0:	d217      	bcs.n	8003302 <__iar_annotation$$branch+0x1da>
 80032d2:	4887      	ldr	r0, [pc, #540]	@ (80034f0 <__iar_annotation$$branch+0x3c8>)
 80032d4:	83e0      	strh	r0, [r4, #30]
 80032d6:	2596      	movs	r5, #150	@ 0x96
 80032d8:	2008      	movs	r0, #8
 80032da:	7460      	strb	r0, [r4, #17]
 80032dc:	4885      	ldr	r0, [pc, #532]	@ (80034f4 <__iar_annotation$$branch+0x3cc>)
 80032de:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 80032e0:	4201      	tst	r1, r0
 80032e2:	d002      	beq.n	80032ea <__iar_annotation$$branch+0x1c2>
 80032e4:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 80032e6:	0005      	movs	r5, r0
 80032e8:	400d      	ands	r5, r1
 80032ea:	e6ee      	b.n	80030ca <__iar_annotation$$branch+0xe>
 80032ec:	6860      	ldr	r0, [r4, #4]
 80032ee:	7800      	ldrb	r0, [r0, #0]
 80032f0:	0780      	lsls	r0, r0, #30
 80032f2:	0f80      	lsrs	r0, r0, #30
 80032f4:	2802      	cmp	r0, #2
 80032f6:	d102      	bne.n	80032fe <__iar_annotation$$branch+0x1d6>
 80032f8:	7c20      	ldrb	r0, [r4, #16]
 80032fa:	f002 fb68 	bl	80059ce <USBPD_PRL_SRCReleaseSinkNG>
 80032fe:	2011      	movs	r0, #17
 8003300:	e7c0      	b.n	8003284 <__iar_annotation$$branch+0x15c>
 8003302:	2121      	movs	r1, #33	@ 0x21
 8003304:	7c20      	ldrb	r0, [r4, #16]
 8003306:	f7fd f9ef 	bl	80006e8 <USBPD_PE_Notification>
 800330a:	2000      	movs	r0, #0
 800330c:	e795      	b.n	800323a <__iar_annotation$$branch+0x112>
 800330e:	2100      	movs	r1, #0
 8003310:	0020      	movs	r0, r4
 8003312:	f000 fd05 	bl	8003d20 <PE_Send_SRCCapabilities>
 8003316:	2805      	cmp	r0, #5
 8003318:	d107      	bne.n	800332a <__iar_annotation$$branch+0x202>
 800331a:	2104      	movs	r1, #4
 800331c:	0020      	movs	r0, r4
 800331e:	f7fe f976 	bl	800160e <PE_SetPowerNegotiation>
 8003322:	2001      	movs	r0, #1
 8003324:	7720      	strb	r0, [r4, #28]
 8003326:	83e7      	strh	r7, [r4, #30]
 8003328:	e7c5      	b.n	80032b6 <__iar_annotation$$branch+0x18e>
 800332a:	2000      	movs	r0, #0
 800332c:	7720      	strb	r0, [r4, #28]
 800332e:	2011      	movs	r0, #17
 8003330:	e783      	b.n	800323a <__iar_annotation$$branch+0x112>
 8003332:	03a8      	lsls	r0, r5, #14
 8003334:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8003336:	4281      	cmp	r1, r0
 8003338:	d106      	bne.n	8003348 <__iar_annotation$$branch+0x220>
 800333a:	2100      	movs	r1, #0
 800333c:	8461      	strh	r1, [r4, #34]	@ 0x22
 800333e:	7931      	ldrb	r1, [r6, #4]
 8003340:	1c49      	adds	r1, r1, #1
 8003342:	7131      	strb	r1, [r6, #4]
 8003344:	2105      	movs	r1, #5
 8003346:	7461      	strb	r1, [r4, #17]
 8003348:	8be1      	ldrh	r1, [r4, #30]
 800334a:	4281      	cmp	r1, r0
 800334c:	d1cd      	bne.n	80032ea <__iar_annotation$$branch+0x1c2>
 800334e:	6820      	ldr	r0, [r4, #0]
 8003350:	6840      	ldr	r0, [r0, #4]
 8003352:	0601      	lsls	r1, r0, #24
 8003354:	0fc9      	lsrs	r1, r1, #31
 8003356:	d002      	beq.n	800335e <__iar_annotation$$branch+0x236>
 8003358:	78f0      	ldrb	r0, [r6, #3]
 800335a:	1c40      	adds	r0, r0, #1
 800335c:	70f0      	strb	r0, [r6, #3]
 800335e:	2007      	movs	r0, #7
 8003360:	e76b      	b.n	800323a <__iar_annotation$$branch+0x112>
 8003362:	4668      	mov	r0, sp
 8003364:	7b00      	ldrb	r0, [r0, #12]
 8003366:	2811      	cmp	r0, #17
 8003368:	d109      	bne.n	800337e <__iar_annotation$$branch+0x256>
 800336a:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800336c:	0bc1      	lsrs	r1, r0, #15
 800336e:	d106      	bne.n	800337e <__iar_annotation$$branch+0x256>
 8003370:	0b01      	lsrs	r1, r0, #12
 8003372:	0749      	lsls	r1, r1, #29
 8003374:	d100      	bne.n	8003378 <__iar_annotation$$branch+0x250>
 8003376:	e111      	b.n	800359c <__iar_annotation$$branch+0x474>
 8003378:	06c0      	lsls	r0, r0, #27
 800337a:	0ec0      	lsrs	r0, r0, #27
 800337c:	2802      	cmp	r0, #2
 800337e:	d000      	beq.n	8003382 <__iar_annotation$$branch+0x25a>
 8003380:	e10c      	b.n	800359c <__iar_annotation$$branch+0x474>
 8003382:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003384:	7881      	ldrb	r1, [r0, #2]
 8003386:	78c2      	ldrb	r2, [r0, #3]
 8003388:	0212      	lsls	r2, r2, #8
 800338a:	1889      	adds	r1, r1, r2
 800338c:	7902      	ldrb	r2, [r0, #4]
 800338e:	0412      	lsls	r2, r2, #16
 8003390:	1889      	adds	r1, r1, r2
 8003392:	7940      	ldrb	r0, [r0, #5]
 8003394:	0600      	lsls	r0, r0, #24
 8003396:	1808      	adds	r0, r1, r0
 8003398:	9000      	str	r0, [sp, #0]
 800339a:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800339c:	0600      	lsls	r0, r0, #24
 800339e:	0f81      	lsrs	r1, r0, #30
 80033a0:	7c20      	ldrb	r0, [r4, #16]
 80033a2:	f7fd fd5b 	bl	8000e5c <PE_ExtRevisionInteroperability>
 80033a6:	2304      	movs	r3, #4
 80033a8:	466a      	mov	r2, sp
 80033aa:	2106      	movs	r1, #6
 80033ac:	7c20      	ldrb	r0, [r4, #16]
 80033ae:	68a5      	ldr	r5, [r4, #8]
 80033b0:	69ad      	ldr	r5, [r5, #24]
 80033b2:	47a8      	blx	r5
 80033b4:	2009      	movs	r0, #9
 80033b6:	7460      	strb	r0, [r4, #17]
 80033b8:	2500      	movs	r5, #0
 80033ba:	e0e5      	b.n	8003588 <__iar_annotation$$branch+0x460>
 80033bc:	2702      	movs	r7, #2
 80033be:	2507      	movs	r5, #7
 80033c0:	a901      	add	r1, sp, #4
 80033c2:	7c20      	ldrb	r0, [r4, #16]
 80033c4:	68a2      	ldr	r2, [r4, #8]
 80033c6:	69d2      	ldr	r2, [r2, #28]
 80033c8:	4790      	blx	r2
 80033ca:	280a      	cmp	r0, #10
 80033cc:	d010      	beq.n	80033f0 <__iar_annotation$$branch+0x2c8>
 80033ce:	280b      	cmp	r0, #11
 80033d0:	d035      	beq.n	800343e <__iar_annotation$$branch+0x316>
 80033d2:	280d      	cmp	r0, #13
 80033d4:	6860      	ldr	r0, [r4, #4]
 80033d6:	6800      	ldr	r0, [r0, #0]
 80033d8:	d136      	bne.n	8003448 <__iar_annotation$$branch+0x320>
 80033da:	0a00      	lsrs	r0, r0, #8
 80033dc:	4005      	ands	r5, r0
 80033de:	2d03      	cmp	r5, #3
 80033e0:	d101      	bne.n	80033e6 <__iar_annotation$$branch+0x2be>
 80033e2:	2303      	movs	r3, #3
 80033e4:	e000      	b.n	80033e8 <__iar_annotation$$branch+0x2c0>
 80033e6:	230e      	movs	r3, #14
 80033e8:	2000      	movs	r0, #0
 80033ea:	9000      	str	r0, [sp, #0]
 80033ec:	220c      	movs	r2, #12
 80033ee:	e035      	b.n	800345c <__iar_annotation$$branch+0x334>
 80033f0:	48a9      	ldr	r0, [pc, #676]	@ (8003698 <__iar_annotation$$branch+0x570>)
 80033f2:	83e0      	strh	r0, [r4, #30]
 80033f4:	271e      	movs	r7, #30
 80033f6:	6860      	ldr	r0, [r4, #4]
 80033f8:	6800      	ldr	r0, [r0, #0]
 80033fa:	0a00      	lsrs	r0, r0, #8
 80033fc:	4005      	ands	r5, r0
 80033fe:	2d01      	cmp	r5, #1
 8003400:	d00b      	beq.n	800341a <__iar_annotation$$branch+0x2f2>
 8003402:	9801      	ldr	r0, [sp, #4]
 8003404:	2803      	cmp	r0, #3
 8003406:	d108      	bne.n	800341a <__iar_annotation$$branch+0x2f2>
 8003408:	6960      	ldr	r0, [r4, #20]
 800340a:	06c0      	lsls	r0, r0, #27
 800340c:	0f80      	lsrs	r0, r0, #30
 800340e:	2803      	cmp	r0, #3
 8003410:	d103      	bne.n	800341a <__iar_annotation$$branch+0x2f2>
 8003412:	2080      	movs	r0, #128	@ 0x80
 8003414:	0200      	lsls	r0, r0, #8
 8003416:	83e0      	strh	r0, [r4, #30]
 8003418:	2700      	movs	r7, #0
 800341a:	2000      	movs	r0, #0
 800341c:	9000      	str	r0, [sp, #0]
 800341e:	230c      	movs	r3, #12
 8003420:	2203      	movs	r2, #3
 8003422:	2100      	movs	r1, #0
 8003424:	0020      	movs	r0, r4
 8003426:	f7fe f9a7 	bl	8001778 <PE_Send_CtrlMessage>
 800342a:	6960      	ldr	r0, [r4, #20]
 800342c:	2118      	movs	r1, #24
 800342e:	4388      	bics	r0, r1
 8003430:	9901      	ldr	r1, [sp, #4]
 8003432:	00c9      	lsls	r1, r1, #3
 8003434:	2218      	movs	r2, #24
 8003436:	400a      	ands	r2, r1
 8003438:	4302      	orrs	r2, r0
 800343a:	6162      	str	r2, [r4, #20]
 800343c:	e012      	b.n	8003464 <__iar_annotation$$branch+0x33c>
 800343e:	2000      	movs	r0, #0
 8003440:	9000      	str	r0, [sp, #0]
 8003442:	230c      	movs	r3, #12
 8003444:	2202      	movs	r2, #2
 8003446:	e009      	b.n	800345c <__iar_annotation$$branch+0x334>
 8003448:	0a00      	lsrs	r0, r0, #8
 800344a:	4005      	ands	r5, r0
 800344c:	2d03      	cmp	r5, #3
 800344e:	d101      	bne.n	8003454 <__iar_annotation$$branch+0x32c>
 8003450:	2303      	movs	r3, #3
 8003452:	e000      	b.n	8003456 <__iar_annotation$$branch+0x32e>
 8003454:	230e      	movs	r3, #14
 8003456:	2000      	movs	r0, #0
 8003458:	9000      	str	r0, [sp, #0]
 800345a:	2204      	movs	r2, #4
 800345c:	2100      	movs	r1, #0
 800345e:	0020      	movs	r0, r4
 8003460:	f7fe f98a 	bl	8001778 <PE_Send_CtrlMessage>
 8003464:	003d      	movs	r5, r7
 8003466:	e630      	b.n	80030ca <__iar_annotation$$branch+0xe>
 8003468:	8be0      	ldrh	r0, [r4, #30]
 800346a:	03a9      	lsls	r1, r5, #14
 800346c:	4288      	cmp	r0, r1
 800346e:	d1fa      	bne.n	8003466 <__iar_annotation$$branch+0x33e>
 8003470:	2104      	movs	r1, #4
 8003472:	0020      	movs	r0, r4
 8003474:	f7fe f8cb 	bl	800160e <PE_SetPowerNegotiation>
 8003478:	68a0      	ldr	r0, [r4, #8]
 800347a:	6801      	ldr	r1, [r0, #0]
 800347c:	2900      	cmp	r1, #0
 800347e:	d0f2      	beq.n	8003466 <__iar_annotation$$branch+0x33e>
 8003480:	7c20      	ldrb	r0, [r4, #16]
 8003482:	4788      	blx	r1
 8003484:	2800      	cmp	r0, #0
 8003486:	d000      	beq.n	800348a <__iar_annotation$$branch+0x362>
 8003488:	e2db      	b.n	8003a42 <__iar_annotation$$branch+0x91a>
 800348a:	200d      	movs	r0, #13
 800348c:	e6d5      	b.n	800323a <__iar_annotation$$branch+0x112>
 800348e:	2000      	movs	r0, #0
 8003490:	9000      	str	r0, [sp, #0]
 8003492:	2303      	movs	r3, #3
 8003494:	2206      	movs	r2, #6
 8003496:	2100      	movs	r1, #0
 8003498:	0020      	movs	r0, r4
 800349a:	f7fe f96d 	bl	8001778 <PE_Send_CtrlMessage>
 800349e:	2800      	cmp	r0, #0
 80034a0:	d110      	bne.n	80034c4 <__iar_annotation$$branch+0x39c>
 80034a2:	2103      	movs	r1, #3
 80034a4:	0020      	movs	r0, r4
 80034a6:	f7fe f8b2 	bl	800160e <PE_SetPowerNegotiation>
 80034aa:	2110      	movs	r1, #16
 80034ac:	7c20      	ldrb	r0, [r4, #16]
 80034ae:	f7fd f91b 	bl	80006e8 <USBPD_PE_Notification>
 80034b2:	2000      	movs	r0, #0
 80034b4:	84a0      	strh	r0, [r4, #36]	@ 0x24
 80034b6:	6960      	ldr	r0, [r4, #20]
 80034b8:	06c0      	lsls	r0, r0, #27
 80034ba:	0f80      	lsrs	r0, r0, #30
 80034bc:	2803      	cmp	r0, #3
 80034be:	d101      	bne.n	80034c4 <__iar_annotation$$branch+0x39c>
 80034c0:	4876      	ldr	r0, [pc, #472]	@ (800369c <__iar_annotation$$branch+0x574>)
 80034c2:	84a0      	strh	r0, [r4, #36]	@ 0x24
 80034c4:	e601      	b.n	80030ca <__iar_annotation$$branch+0xe>
 80034c6:	2001      	movs	r0, #1
 80034c8:	9000      	str	r0, [sp, #0]
 80034ca:	2397      	movs	r3, #151	@ 0x97
 80034cc:	2202      	movs	r2, #2
 80034ce:	2100      	movs	r1, #0
 80034d0:	0020      	movs	r0, r4
 80034d2:	f7fe f951 	bl	8001778 <PE_Send_CtrlMessage>
 80034d6:	2800      	cmp	r0, #0
 80034d8:	d1f4      	bne.n	80034c4 <__iar_annotation$$branch+0x39c>
 80034da:	7725      	strb	r5, [r4, #28]
 80034dc:	2129      	movs	r1, #41	@ 0x29
 80034de:	7c20      	ldrb	r0, [r4, #16]
 80034e0:	f7fd f902 	bl	80006e8 <USBPD_PE_Notification>
 80034e4:	486e      	ldr	r0, [pc, #440]	@ (80036a0 <__iar_annotation$$branch+0x578>)
 80034e6:	83e0      	strh	r0, [r4, #30]
 80034e8:	4d6e      	ldr	r5, [pc, #440]	@ (80036a4 <__iar_annotation$$branch+0x57c>)
 80034ea:	e5ee      	b.n	80030ca <__iar_annotation$$branch+0xe>
 80034ec:	00008014 	.word	0x00008014
 80034f0:	00008096 	.word	0x00008096
 80034f4:	00007fff 	.word	0x00007fff
 80034f8:	8be0      	ldrh	r0, [r4, #30]
 80034fa:	03a9      	lsls	r1, r5, #14
 80034fc:	4288      	cmp	r0, r1
 80034fe:	d1f4      	bne.n	80034ea <__iar_annotation$$branch+0x3c2>
 8003500:	212a      	movs	r1, #42	@ 0x2a
 8003502:	7c20      	ldrb	r0, [r4, #16]
 8003504:	f7fd f8f0 	bl	80006e8 <USBPD_PE_Notification>
 8003508:	2000      	movs	r0, #0
 800350a:	9000      	str	r0, [sp, #0]
 800350c:	2303      	movs	r3, #3
 800350e:	2206      	movs	r2, #6
 8003510:	2100      	movs	r1, #0
 8003512:	0020      	movs	r0, r4
 8003514:	f7fe f930 	bl	8001778 <PE_Send_CtrlMessage>
 8003518:	2800      	cmp	r0, #0
 800351a:	d109      	bne.n	8003530 <__iar_annotation$$branch+0x408>
 800351c:	212e      	movs	r1, #46	@ 0x2e
 800351e:	e6cd      	b.n	80032bc <__iar_annotation$$branch+0x194>
 8003520:	2000      	movs	r0, #0
 8003522:	9000      	str	r0, [sp, #0]
 8003524:	2307      	movs	r3, #7
 8003526:	2203      	movs	r2, #3
 8003528:	2100      	movs	r1, #0
 800352a:	0020      	movs	r0, r4
 800352c:	f7fe f924 	bl	8001778 <PE_Send_CtrlMessage>
 8003530:	e5cb      	b.n	80030ca <__iar_annotation$$branch+0xe>
 8003532:	2000      	movs	r0, #0
 8003534:	9000      	str	r0, [sp, #0]
 8003536:	2312      	movs	r3, #18
 8003538:	220d      	movs	r2, #13
 800353a:	2031      	movs	r0, #49	@ 0x31
 800353c:	5c21      	ldrb	r1, [r4, r0]
 800353e:	0020      	movs	r0, r4
 8003540:	f7fe f91a 	bl	8001778 <PE_Send_CtrlMessage>
 8003544:	2800      	cmp	r0, #0
 8003546:	d1f3      	bne.n	8003530 <__iar_annotation$$branch+0x408>
 8003548:	83e7      	strh	r7, [r4, #30]
 800354a:	251b      	movs	r5, #27
 800354c:	2130      	movs	r1, #48	@ 0x30
 800354e:	e6b5      	b.n	80032bc <__iar_annotation$$branch+0x194>
 8003550:	4668      	mov	r0, sp
 8003552:	7b00      	ldrb	r0, [r0, #12]
 8003554:	2814      	cmp	r0, #20
 8003556:	d021      	beq.n	800359c <__iar_annotation$$branch+0x474>
 8003558:	2030      	movs	r0, #48	@ 0x30
 800355a:	5c20      	ldrb	r0, [r4, r0]
 800355c:	2231      	movs	r2, #49	@ 0x31
 800355e:	5ca2      	ldrb	r2, [r4, r2]
 8003560:	4290      	cmp	r0, r2
 8003562:	d11b      	bne.n	800359c <__iar_annotation$$branch+0x474>
 8003564:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003566:	4001      	ands	r1, r0
 8003568:	2903      	cmp	r1, #3
 800356a:	d117      	bne.n	800359c <__iar_annotation$$branch+0x474>
 800356c:	2131      	movs	r1, #49	@ 0x31
 800356e:	7c20      	ldrb	r0, [r4, #16]
 8003570:	f7fd f8ba 	bl	80006e8 <USBPD_PE_Notification>
 8003574:	2030      	movs	r0, #48	@ 0x30
 8003576:	5c20      	ldrb	r0, [r4, r0]
 8003578:	2800      	cmp	r0, #0
 800357a:	d102      	bne.n	8003582 <__iar_annotation$$branch+0x45a>
 800357c:	2007      	movs	r0, #7
 800357e:	7460      	strb	r0, [r4, #17]
 8003580:	e002      	b.n	8003588 <__iar_annotation$$branch+0x460>
 8003582:	2003      	movs	r0, #3
 8003584:	7460      	strb	r0, [r4, #17]
 8003586:	2500      	movs	r5, #0
 8003588:	4668      	mov	r0, sp
 800358a:	7b00      	ldrb	r0, [r0, #12]
 800358c:	2814      	cmp	r0, #20
 800358e:	d005      	beq.n	800359c <__iar_annotation$$branch+0x474>
 8003590:	2014      	movs	r0, #20
 8003592:	4669      	mov	r1, sp
 8003594:	7308      	strb	r0, [r1, #12]
 8003596:	0020      	movs	r0, r4
 8003598:	f7fd fb11 	bl	8000bbe <PE_Clear_RxEvent>
 800359c:	8be0      	ldrh	r0, [r4, #30]
 800359e:	2180      	movs	r1, #128	@ 0x80
 80035a0:	0209      	lsls	r1, r1, #8
 80035a2:	4288      	cmp	r0, r1
 80035a4:	d1c4      	bne.n	8003530 <__iar_annotation$$branch+0x408>
 80035a6:	e24c      	b.n	8003a42 <__iar_annotation$$branch+0x91a>
 80035a8:	6860      	ldr	r0, [r4, #4]
 80035aa:	7800      	ldrb	r0, [r0, #0]
 80035ac:	0780      	lsls	r0, r0, #30
 80035ae:	0f80      	lsrs	r0, r0, #30
 80035b0:	2802      	cmp	r0, #2
 80035b2:	d102      	bne.n	80035ba <__iar_annotation$$branch+0x492>
 80035b4:	7c20      	ldrb	r0, [r4, #16]
 80035b6:	f002 fa0a 	bl	80059ce <USBPD_PRL_SRCReleaseSinkNG>
 80035ba:	2105      	movs	r1, #5
 80035bc:	0020      	movs	r0, r4
 80035be:	f7fd fa99 	bl	8000af4 <PE_Send_RESET>
 80035c2:	6860      	ldr	r0, [r4, #4]
 80035c4:	6801      	ldr	r1, [r0, #0]
 80035c6:	2210      	movs	r2, #16
 80035c8:	4391      	bics	r1, r2
 80035ca:	6001      	str	r1, [r0, #0]
 80035cc:	78b0      	ldrb	r0, [r6, #2]
 80035ce:	1c40      	adds	r0, r0, #1
 80035d0:	70b0      	strb	r0, [r6, #2]
 80035d2:	6961      	ldr	r1, [r4, #20]
 80035d4:	4834      	ldr	r0, [pc, #208]	@ (80036a8 <__iar_annotation$$branch+0x580>)
 80035d6:	4008      	ands	r0, r1
 80035d8:	6160      	str	r0, [r4, #20]
 80035da:	2100      	movs	r1, #0
 80035dc:	2232      	movs	r2, #50	@ 0x32
 80035de:	54a1      	strb	r1, [r4, r2]
 80035e0:	4932      	ldr	r1, [pc, #200]	@ (80036ac <__iar_annotation$$branch+0x584>)
 80035e2:	4001      	ands	r1, r0
 80035e4:	6161      	str	r1, [r4, #20]
 80035e6:	2202      	movs	r2, #2
 80035e8:	2101      	movs	r1, #1
 80035ea:	0020      	movs	r0, r4
 80035ec:	f7fe f806 	bl	80015fc <PE_CallHardResetCallback>
 80035f0:	2169      	movs	r1, #105	@ 0x69
 80035f2:	4668      	mov	r0, sp
 80035f4:	7b40      	ldrb	r0, [r0, #13]
 80035f6:	f7fd f877 	bl	80006e8 <USBPD_PE_Notification>
 80035fa:	83e7      	strh	r7, [r4, #30]
 80035fc:	251b      	movs	r5, #27
 80035fe:	2015      	movs	r0, #21
 8003600:	e61b      	b.n	800323a <__iar_annotation$$branch+0x112>
 8003602:	6860      	ldr	r0, [r4, #4]
 8003604:	7800      	ldrb	r0, [r0, #0]
 8003606:	0780      	lsls	r0, r0, #30
 8003608:	0f80      	lsrs	r0, r0, #30
 800360a:	2802      	cmp	r0, #2
 800360c:	d1f0      	bne.n	80035f0 <__iar_annotation$$branch+0x4c8>
 800360e:	7c20      	ldrb	r0, [r4, #16]
 8003610:	f002 f9dd 	bl	80059ce <USBPD_PRL_SRCReleaseSinkNG>
 8003614:	e7ec      	b.n	80035f0 <__iar_annotation$$branch+0x4c8>
 8003616:	8be0      	ldrh	r0, [r4, #30]
 8003618:	03a9      	lsls	r1, r5, #14
 800361a:	4288      	cmp	r0, r1
 800361c:	d11a      	bne.n	8003654 <__iar_annotation$$branch+0x52c>
 800361e:	6960      	ldr	r0, [r4, #20]
 8003620:	78b1      	ldrb	r1, [r6, #2]
 8003622:	2903      	cmp	r1, #3
 8003624:	d303      	bcc.n	800362e <__iar_annotation$$branch+0x506>
 8003626:	0741      	lsls	r1, r0, #29
 8003628:	0fc9      	lsrs	r1, r1, #31
 800362a:	d130      	bne.n	800368e <__iar_annotation$$branch+0x566>
 800362c:	e66d      	b.n	800330a <__iar_annotation$$branch+0x1e2>
 800362e:	4920      	ldr	r1, [pc, #128]	@ (80036b0 <__iar_annotation$$branch+0x588>)
 8003630:	83e1      	strh	r1, [r4, #30]
 8003632:	2117      	movs	r1, #23
 8003634:	7461      	strb	r1, [r4, #17]
 8003636:	2500      	movs	r5, #0
 8003638:	0540      	lsls	r0, r0, #21
 800363a:	0f80      	lsrs	r0, r0, #30
 800363c:	1e42      	subs	r2, r0, #1
 800363e:	4192      	sbcs	r2, r2
 8003640:	0fd2      	lsrs	r2, r2, #31
 8003642:	2101      	movs	r1, #1
 8003644:	0020      	movs	r0, r4
 8003646:	f7fd ffd9 	bl	80015fc <PE_CallHardResetCallback>
 800364a:	2203      	movs	r2, #3
 800364c:	2101      	movs	r1, #1
 800364e:	0020      	movs	r0, r4
 8003650:	f7fd ffd4 	bl	80015fc <PE_CallHardResetCallback>
 8003654:	e539      	b.n	80030ca <__iar_annotation$$branch+0xe>
 8003656:	2100      	movs	r1, #0
 8003658:	4668      	mov	r0, sp
 800365a:	7b40      	ldrb	r0, [r0, #13]
 800365c:	68a2      	ldr	r2, [r4, #8]
 800365e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003660:	4790      	blx	r2
 8003662:	2801      	cmp	r0, #1
 8003664:	d105      	bne.n	8003672 <__iar_annotation$$branch+0x54a>
 8003666:	4813      	ldr	r0, [pc, #76]	@ (80036b4 <__iar_annotation$$branch+0x58c>)
 8003668:	83e0      	strh	r0, [r4, #30]
 800366a:	25c8      	movs	r5, #200	@ 0xc8
 800366c:	00ad      	lsls	r5, r5, #2
 800366e:	2013      	movs	r0, #19
 8003670:	7460      	strb	r0, [r4, #17]
 8003672:	8be0      	ldrh	r0, [r4, #30]
 8003674:	2180      	movs	r1, #128	@ 0x80
 8003676:	0209      	lsls	r1, r1, #8
 8003678:	4288      	cmp	r0, r1
 800367a:	d1eb      	bne.n	8003654 <__iar_annotation$$branch+0x52c>
 800367c:	2206      	movs	r2, #6
 800367e:	2101      	movs	r1, #1
 8003680:	0020      	movs	r0, r4
 8003682:	f7fd ffbb 	bl	80015fc <PE_CallHardResetCallback>
 8003686:	6960      	ldr	r0, [r4, #20]
 8003688:	0741      	lsls	r1, r0, #29
 800368a:	0fc9      	lsrs	r1, r1, #31
 800368c:	d003      	beq.n	8003696 <__iar_annotation$$branch+0x56e>
 800368e:	68a0      	ldr	r0, [r4, #8]
 8003690:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8003692:	2800      	cmp	r0, #0
 8003694:	d137      	bne.n	8003706 <__iar_annotation$$branch+0x5de>
 8003696:	e638      	b.n	800330a <__iar_annotation$$branch+0x1e2>
 8003698:	0000801e 	.word	0x0000801e
 800369c:	0000b6b0 	.word	0x0000b6b0
 80036a0:	00008226 	.word	0x00008226
 80036a4:	00000226 	.word	0x00000226
 80036a8:	fffff9ff 	.word	0xfffff9ff
 80036ac:	fffffe3f 	.word	0xfffffe3f
 80036b0:	0000828a 	.word	0x0000828a
 80036b4:	00008320 	.word	0x00008320
 80036b8:	8be0      	ldrh	r0, [r4, #30]
 80036ba:	03a9      	lsls	r1, r5, #14
 80036bc:	4288      	cmp	r0, r1
 80036be:	d126      	bne.n	800370e <__iar_annotation$$branch+0x5e6>
 80036c0:	2204      	movs	r2, #4
 80036c2:	2101      	movs	r1, #1
 80036c4:	0020      	movs	r0, r4
 80036c6:	f7fd ff99 	bl	80015fc <PE_CallHardResetCallback>
 80036ca:	2101      	movs	r1, #1
 80036cc:	4668      	mov	r0, sp
 80036ce:	7b40      	ldrb	r0, [r0, #13]
 80036d0:	68a2      	ldr	r2, [r4, #8]
 80036d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036d4:	4790      	blx	r2
 80036d6:	2801      	cmp	r0, #1
 80036d8:	d10d      	bne.n	80036f6 <__iar_annotation$$branch+0x5ce>
 80036da:	0020      	movs	r0, r4
 80036dc:	f7fd fb1d 	bl	8000d1a <PE_Reset_HardReset>
 80036e0:	2168      	movs	r1, #104	@ 0x68
 80036e2:	4668      	mov	r0, sp
 80036e4:	7b40      	ldrb	r0, [r0, #13]
 80036e6:	f7fc ffff 	bl	80006e8 <USBPD_PE_Notification>
 80036ea:	2205      	movs	r2, #5
 80036ec:	2101      	movs	r1, #1
 80036ee:	0020      	movs	r0, r4
 80036f0:	f7fd ff84 	bl	80015fc <PE_CallHardResetCallback>
 80036f4:	e633      	b.n	800335e <__iar_annotation$$branch+0x236>
 80036f6:	2206      	movs	r2, #6
 80036f8:	2101      	movs	r1, #1
 80036fa:	0020      	movs	r0, r4
 80036fc:	f7fd ff7e 	bl	80015fc <PE_CallHardResetCallback>
 8003700:	68a0      	ldr	r0, [r4, #8]
 8003702:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8003704:	2800      	cmp	r0, #0
 8003706:	d000      	beq.n	800370a <__iar_annotation$$branch+0x5e2>
 8003708:	e2d6      	b.n	8003cb8 <__iar_annotation$$branch+0x5e>
 800370a:	2500      	movs	r5, #0
 800370c:	7465      	strb	r5, [r4, #17]
 800370e:	e4dc      	b.n	80030ca <__iar_annotation$$branch+0xe>
 8003710:	2001      	movs	r0, #1
 8003712:	9000      	str	r0, [sp, #0]
 8003714:	231b      	movs	r3, #27
 8003716:	2207      	movs	r2, #7
 8003718:	2100      	movs	r1, #0
 800371a:	0020      	movs	r0, r4
 800371c:	f7fe f82c 	bl	8001778 <PE_Send_CtrlMessage>
 8003720:	2800      	cmp	r0, #0
 8003722:	d1f4      	bne.n	800370e <__iar_annotation$$branch+0x5e6>
 8003724:	2006      	movs	r0, #6
 8003726:	7720      	strb	r0, [r4, #28]
 8003728:	83e7      	strh	r7, [r4, #30]
 800372a:	251b      	movs	r5, #27
 800372c:	210b      	movs	r1, #11
 800372e:	e5c5      	b.n	80032bc <__iar_annotation$$branch+0x194>
 8003730:	4668      	mov	r0, sp
 8003732:	7b00      	ldrb	r0, [r0, #12]
 8003734:	2811      	cmp	r0, #17
 8003736:	d13e      	bne.n	80037b6 <__iar_annotation$$branch+0x68e>
 8003738:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800373a:	0bc1      	lsrs	r1, r0, #15
 800373c:	d11f      	bne.n	800377e <__iar_annotation$$branch+0x656>
 800373e:	0441      	lsls	r1, r0, #17
 8003740:	0f49      	lsrs	r1, r1, #29
 8003742:	d01c      	beq.n	800377e <__iar_annotation$$branch+0x656>
 8003744:	06c0      	lsls	r0, r0, #27
 8003746:	0ec0      	lsrs	r0, r0, #27
 8003748:	2801      	cmp	r0, #1
 800374a:	d118      	bne.n	800377e <__iar_annotation$$branch+0x656>
 800374c:	008b      	lsls	r3, r1, #2
 800374e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003750:	1c82      	adds	r2, r0, #2
 8003752:	2104      	movs	r1, #4
 8003754:	7c20      	ldrb	r0, [r4, #16]
 8003756:	68a5      	ldr	r5, [r4, #8]
 8003758:	69ad      	ldr	r5, [r5, #24]
 800375a:	47a8      	blx	r5
 800375c:	2003      	movs	r0, #3
 800375e:	7460      	strb	r0, [r4, #17]
 8003760:	2500      	movs	r5, #0
 8003762:	4668      	mov	r0, sp
 8003764:	7b00      	ldrb	r0, [r0, #12]
 8003766:	2814      	cmp	r0, #20
 8003768:	d005      	beq.n	8003776 <__iar_annotation$$branch+0x64e>
 800376a:	2014      	movs	r0, #20
 800376c:	4669      	mov	r1, sp
 800376e:	7308      	strb	r0, [r1, #12]
 8003770:	0020      	movs	r0, r4
 8003772:	f7fd fa24 	bl	8000bbe <PE_Clear_RxEvent>
 8003776:	210d      	movs	r1, #13
 8003778:	7c20      	ldrb	r0, [r4, #16]
 800377a:	f7fc ffb5 	bl	80006e8 <USBPD_PE_Notification>
 800377e:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003780:	21f0      	movs	r1, #240	@ 0xf0
 8003782:	0209      	lsls	r1, r1, #8
 8003784:	4001      	ands	r1, r0
 8003786:	d116      	bne.n	80037b6 <__iar_annotation$$branch+0x68e>
 8003788:	06c0      	lsls	r0, r0, #27
 800378a:	0ec0      	lsrs	r0, r0, #27
 800378c:	2804      	cmp	r0, #4
 800378e:	d001      	beq.n	8003794 <__iar_annotation$$branch+0x66c>
 8003790:	2810      	cmp	r0, #16
 8003792:	d110      	bne.n	80037b6 <__iar_annotation$$branch+0x68e>
 8003794:	2003      	movs	r0, #3
 8003796:	7460      	strb	r0, [r4, #17]
 8003798:	2500      	movs	r5, #0
 800379a:	4668      	mov	r0, sp
 800379c:	7b00      	ldrb	r0, [r0, #12]
 800379e:	2814      	cmp	r0, #20
 80037a0:	d005      	beq.n	80037ae <__iar_annotation$$branch+0x686>
 80037a2:	2014      	movs	r0, #20
 80037a4:	4669      	mov	r1, sp
 80037a6:	7308      	strb	r0, [r1, #12]
 80037a8:	0020      	movs	r0, r4
 80037aa:	f7fd fa08 	bl	8000bbe <PE_Clear_RxEvent>
 80037ae:	210e      	movs	r1, #14
 80037b0:	7c20      	ldrb	r0, [r4, #16]
 80037b2:	f7fc ff99 	bl	80006e8 <USBPD_PE_Notification>
 80037b6:	8be0      	ldrh	r0, [r4, #30]
 80037b8:	2180      	movs	r1, #128	@ 0x80
 80037ba:	0209      	lsls	r1, r1, #8
 80037bc:	4288      	cmp	r0, r1
 80037be:	d11f      	bne.n	8003800 <__iar_annotation$$branch+0x6d8>
 80037c0:	2003      	movs	r0, #3
 80037c2:	e55f      	b.n	8003284 <__iar_annotation$$branch+0x15c>
 80037c4:	68a0      	ldr	r0, [r4, #8]
 80037c6:	6881      	ldr	r1, [r0, #8]
 80037c8:	2900      	cmp	r1, #0
 80037ca:	d01f      	beq.n	800380c <__iar_annotation$$branch+0x6e4>
 80037cc:	7c20      	ldrb	r0, [r4, #16]
 80037ce:	4788      	blx	r1
 80037d0:	280a      	cmp	r0, #10
 80037d2:	d002      	beq.n	80037da <__iar_annotation$$branch+0x6b2>
 80037d4:	280d      	cmp	r0, #13
 80037d6:	d014      	beq.n	8003802 <__iar_annotation$$branch+0x6da>
 80037d8:	e018      	b.n	800380c <__iar_annotation$$branch+0x6e4>
 80037da:	1cf8      	adds	r0, r7, #3
 80037dc:	83e0      	strh	r0, [r4, #30]
 80037de:	251e      	movs	r5, #30
 80037e0:	2000      	movs	r0, #0
 80037e2:	9000      	str	r0, [sp, #0]
 80037e4:	2324      	movs	r3, #36	@ 0x24
 80037e6:	2203      	movs	r2, #3
 80037e8:	2100      	movs	r1, #0
 80037ea:	0020      	movs	r0, r4
 80037ec:	f7fd ffc4 	bl	8001778 <PE_Send_CtrlMessage>
 80037f0:	2800      	cmp	r0, #0
 80037f2:	d105      	bne.n	8003800 <__iar_annotation$$branch+0x6d8>
 80037f4:	2201      	movs	r2, #1
 80037f6:	2101      	movs	r1, #1
 80037f8:	7c20      	ldrb	r0, [r4, #16]
 80037fa:	68a3      	ldr	r3, [r4, #8]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	4798      	blx	r3
 8003800:	e463      	b.n	80030ca <__iar_annotation$$branch+0xe>
 8003802:	2000      	movs	r0, #0
 8003804:	9000      	str	r0, [sp, #0]
 8003806:	2303      	movs	r3, #3
 8003808:	220c      	movs	r2, #12
 800380a:	e68d      	b.n	8003528 <__iar_annotation$$branch+0x400>
 800380c:	2000      	movs	r0, #0
 800380e:	9000      	str	r0, [sp, #0]
 8003810:	2303      	movs	r3, #3
 8003812:	2204      	movs	r2, #4
 8003814:	e688      	b.n	8003528 <__iar_annotation$$branch+0x400>
 8003816:	8be0      	ldrh	r0, [r4, #30]
 8003818:	03a9      	lsls	r1, r5, #14
 800381a:	4288      	cmp	r0, r1
 800381c:	d1f0      	bne.n	8003800 <__iar_annotation$$branch+0x6d8>
 800381e:	2104      	movs	r1, #4
 8003820:	0020      	movs	r0, r4
 8003822:	f7fd fef4 	bl	800160e <PE_SetPowerNegotiation>
 8003826:	6860      	ldr	r0, [r4, #4]
 8003828:	6801      	ldr	r1, [r0, #0]
 800382a:	2210      	movs	r2, #16
 800382c:	430a      	orrs	r2, r1
 800382e:	6002      	str	r2, [r0, #0]
 8003830:	2206      	movs	r2, #6
 8003832:	2101      	movs	r1, #1
 8003834:	7c20      	ldrb	r0, [r4, #16]
 8003836:	68a3      	ldr	r3, [r4, #8]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	4798      	blx	r3
 800383c:	2207      	movs	r2, #7
 800383e:	2101      	movs	r1, #1
 8003840:	7c20      	ldrb	r0, [r4, #16]
 8003842:	68a3      	ldr	r3, [r4, #8]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	4798      	blx	r3
 8003848:	2100      	movs	r1, #0
 800384a:	7c20      	ldrb	r0, [r4, #16]
 800384c:	f002 f889 	bl	8005962 <USBPD_PRL_SetHeaderPowerRole>
 8003850:	2000      	movs	r0, #0
 8003852:	9000      	str	r0, [sp, #0]
 8003854:	2325      	movs	r3, #37	@ 0x25
 8003856:	2206      	movs	r2, #6
 8003858:	2100      	movs	r1, #0
 800385a:	0020      	movs	r0, r4
 800385c:	f7fd ff8c 	bl	8001778 <PE_Send_CtrlMessage>
 8003860:	2800      	cmp	r0, #0
 8003862:	d1cd      	bne.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003864:	e0c9      	b.n	80039fa <__iar_annotation$$branch+0x8d2>
 8003866:	4668      	mov	r0, sp
 8003868:	7b00      	ldrb	r0, [r0, #12]
 800386a:	2811      	cmp	r0, #17
 800386c:	d10b      	bne.n	8003886 <__iar_annotation$$branch+0x75e>
 800386e:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003870:	4001      	ands	r1, r0
 8003872:	2906      	cmp	r1, #6
 8003874:	d107      	bne.n	8003886 <__iar_annotation$$branch+0x75e>
 8003876:	2014      	movs	r0, #20
 8003878:	4669      	mov	r1, sp
 800387a:	7308      	strb	r0, [r1, #12]
 800387c:	0020      	movs	r0, r4
 800387e:	f7fd f99e 	bl	8000bbe <PE_Clear_RxEvent>
 8003882:	2026      	movs	r0, #38	@ 0x26
 8003884:	7460      	strb	r0, [r4, #17]
 8003886:	8be0      	ldrh	r0, [r4, #30]
 8003888:	03a9      	lsls	r1, r5, #14
 800388a:	4288      	cmp	r0, r1
 800388c:	d1b8      	bne.n	8003800 <__iar_annotation$$branch+0x6d8>
 800388e:	68a3      	ldr	r3, [r4, #8]
 8003890:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003892:	2800      	cmp	r0, #0
 8003894:	d000      	beq.n	8003898 <__iar_annotation$$branch+0x770>
 8003896:	e20f      	b.n	8003cb8 <__iar_annotation$$branch+0x5e>
 8003898:	220a      	movs	r2, #10
 800389a:	2101      	movs	r1, #1
 800389c:	7c20      	ldrb	r0, [r4, #16]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	4798      	blx	r3
 80038a2:	e0ce      	b.n	8003a42 <__iar_annotation$$branch+0x91a>
 80038a4:	2100      	movs	r1, #0
 80038a6:	0020      	movs	r0, r4
 80038a8:	f7fd f944 	bl	8000b34 <PE_ChangePowerRole>
 80038ac:	220d      	movs	r2, #13
 80038ae:	2100      	movs	r1, #0
 80038b0:	7c20      	ldrb	r0, [r4, #16]
 80038b2:	68a3      	ldr	r3, [r4, #8]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	4798      	blx	r3
 80038b8:	2114      	movs	r1, #20
 80038ba:	7c20      	ldrb	r0, [r4, #16]
 80038bc:	f7fc ff14 	bl	80006e8 <USBPD_PE_Notification>
 80038c0:	220e      	movs	r2, #14
 80038c2:	2100      	movs	r1, #0
 80038c4:	7c20      	ldrb	r0, [r4, #16]
 80038c6:	68a3      	ldr	r3, [r4, #8]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	4798      	blx	r3
 80038cc:	6860      	ldr	r0, [r4, #4]
 80038ce:	7800      	ldrb	r0, [r0, #0]
 80038d0:	0780      	lsls	r0, r0, #30
 80038d2:	0f80      	lsrs	r0, r0, #30
 80038d4:	2801      	cmp	r0, #1
 80038d6:	d104      	bne.n	80038e2 <__iar_annotation$$branch+0x7ba>
 80038d8:	2101      	movs	r1, #1
 80038da:	4668      	mov	r0, sp
 80038dc:	7b40      	ldrb	r0, [r0, #13]
 80038de:	f002 f895 	bl	8005a0c <USBPD_PRL_SOPCapability>
 80038e2:	0020      	movs	r0, r4
 80038e4:	f7fd fa90 	bl	8000e08 <PE_Reset_StateMachine>
 80038e8:	e4cd      	b.n	8003286 <__iar_annotation$$branch+0x15e>
 80038ea:	2001      	movs	r0, #1
 80038ec:	9000      	str	r0, [sp, #0]
 80038ee:	231f      	movs	r3, #31
 80038f0:	220a      	movs	r2, #10
 80038f2:	2100      	movs	r1, #0
 80038f4:	0020      	movs	r0, r4
 80038f6:	f7fd ff3f 	bl	8001778 <PE_Send_CtrlMessage>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d1c6      	bne.n	800388c <__iar_annotation$$branch+0x764>
 80038fe:	2008      	movs	r0, #8
 8003900:	7720      	strb	r0, [r4, #28]
 8003902:	83e7      	strh	r7, [r4, #30]
 8003904:	251b      	movs	r5, #27
 8003906:	2202      	movs	r2, #2
 8003908:	2101      	movs	r1, #1
 800390a:	7c20      	ldrb	r0, [r4, #16]
 800390c:	68a3      	ldr	r3, [r4, #8]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	4798      	blx	r3
 8003912:	2139      	movs	r1, #57	@ 0x39
 8003914:	e4d2      	b.n	80032bc <__iar_annotation$$branch+0x194>
 8003916:	4668      	mov	r0, sp
 8003918:	7b00      	ldrb	r0, [r0, #12]
 800391a:	2811      	cmp	r0, #17
 800391c:	d145      	bne.n	80039aa <__iar_annotation$$branch+0x882>
 800391e:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003920:	391f      	subs	r1, #31
 8003922:	4001      	ands	r1, r0
 8003924:	d141      	bne.n	80039aa <__iar_annotation$$branch+0x882>
 8003926:	06c0      	lsls	r0, r0, #27
 8003928:	0ec0      	lsrs	r0, r0, #27
 800392a:	2803      	cmp	r0, #3
 800392c:	d006      	beq.n	800393c <__iar_annotation$$branch+0x814>
 800392e:	2804      	cmp	r0, #4
 8003930:	d012      	beq.n	8003958 <__iar_annotation$$branch+0x830>
 8003932:	280c      	cmp	r0, #12
 8003934:	d008      	beq.n	8003948 <__iar_annotation$$branch+0x820>
 8003936:	2810      	cmp	r0, #16
 8003938:	d020      	beq.n	800397c <__iar_annotation$$branch+0x854>
 800393a:	e036      	b.n	80039aa <__iar_annotation$$branch+0x882>
 800393c:	213a      	movs	r1, #58	@ 0x3a
 800393e:	7c20      	ldrb	r0, [r4, #16]
 8003940:	f7fc fed2 	bl	80006e8 <USBPD_PE_Notification>
 8003944:	2020      	movs	r0, #32
 8003946:	e012      	b.n	800396e <__iar_annotation$$branch+0x846>
 8003948:	2205      	movs	r2, #5
 800394a:	2101      	movs	r1, #1
 800394c:	7c20      	ldrb	r0, [r4, #16]
 800394e:	68a3      	ldr	r3, [r4, #8]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	4798      	blx	r3
 8003954:	213b      	movs	r1, #59	@ 0x3b
 8003956:	e006      	b.n	8003966 <__iar_annotation$$branch+0x83e>
 8003958:	2204      	movs	r2, #4
 800395a:	2101      	movs	r1, #1
 800395c:	7c20      	ldrb	r0, [r4, #16]
 800395e:	68a3      	ldr	r3, [r4, #8]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	4798      	blx	r3
 8003964:	2116      	movs	r1, #22
 8003966:	7c20      	ldrb	r0, [r4, #16]
 8003968:	f7fc febe 	bl	80006e8 <USBPD_PE_Notification>
 800396c:	2003      	movs	r0, #3
 800396e:	7460      	strb	r0, [r4, #17]
 8003970:	2500      	movs	r5, #0
 8003972:	4668      	mov	r0, sp
 8003974:	7b00      	ldrb	r0, [r0, #12]
 8003976:	2814      	cmp	r0, #20
 8003978:	d111      	bne.n	800399e <__iar_annotation$$branch+0x876>
 800397a:	e016      	b.n	80039aa <__iar_annotation$$branch+0x882>
 800397c:	2204      	movs	r2, #4
 800397e:	2101      	movs	r1, #1
 8003980:	7c20      	ldrb	r0, [r4, #16]
 8003982:	68a3      	ldr	r3, [r4, #8]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	4798      	blx	r3
 8003988:	2117      	movs	r1, #23
 800398a:	7c20      	ldrb	r0, [r4, #16]
 800398c:	f7fc feac 	bl	80006e8 <USBPD_PE_Notification>
 8003990:	2003      	movs	r0, #3
 8003992:	7460      	strb	r0, [r4, #17]
 8003994:	2500      	movs	r5, #0
 8003996:	4668      	mov	r0, sp
 8003998:	7b00      	ldrb	r0, [r0, #12]
 800399a:	2814      	cmp	r0, #20
 800399c:	d005      	beq.n	80039aa <__iar_annotation$$branch+0x882>
 800399e:	2014      	movs	r0, #20
 80039a0:	4669      	mov	r1, sp
 80039a2:	7308      	strb	r0, [r1, #12]
 80039a4:	0020      	movs	r0, r4
 80039a6:	f7fd f90a 	bl	8000bbe <PE_Clear_RxEvent>
 80039aa:	8be0      	ldrh	r0, [r4, #30]
 80039ac:	2180      	movs	r1, #128	@ 0x80
 80039ae:	0209      	lsls	r1, r1, #8
 80039b0:	4288      	cmp	r0, r1
 80039b2:	d12c      	bne.n	8003a0e <__iar_annotation$$branch+0x8e6>
 80039b4:	e704      	b.n	80037c0 <__iar_annotation$$branch+0x698>
 80039b6:	6860      	ldr	r0, [r4, #4]
 80039b8:	6801      	ldr	r1, [r0, #0]
 80039ba:	2210      	movs	r2, #16
 80039bc:	430a      	orrs	r2, r1
 80039be:	6002      	str	r2, [r0, #0]
 80039c0:	7f20      	ldrb	r0, [r4, #28]
 80039c2:	2809      	cmp	r0, #9
 80039c4:	d005      	beq.n	80039d2 <__iar_annotation$$branch+0x8aa>
 80039c6:	2206      	movs	r2, #6
 80039c8:	2101      	movs	r1, #1
 80039ca:	7c20      	ldrb	r0, [r4, #16]
 80039cc:	68a3      	ldr	r3, [r4, #8]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	4798      	blx	r3
 80039d2:	2207      	movs	r2, #7
 80039d4:	2101      	movs	r1, #1
 80039d6:	7c20      	ldrb	r0, [r4, #16]
 80039d8:	68a3      	ldr	r3, [r4, #8]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	4798      	blx	r3
 80039de:	2100      	movs	r1, #0
 80039e0:	7c20      	ldrb	r0, [r4, #16]
 80039e2:	f001 ffbe 	bl	8005962 <USBPD_PRL_SetHeaderPowerRole>
 80039e6:	2000      	movs	r0, #0
 80039e8:	9000      	str	r0, [sp, #0]
 80039ea:	2321      	movs	r3, #33	@ 0x21
 80039ec:	2206      	movs	r2, #6
 80039ee:	2100      	movs	r1, #0
 80039f0:	0020      	movs	r0, r4
 80039f2:	f7fd fec1 	bl	8001778 <PE_Send_CtrlMessage>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d109      	bne.n	8003a0e <__iar_annotation$$branch+0x8e6>
 80039fa:	2208      	movs	r2, #8
 80039fc:	2101      	movs	r1, #1
 80039fe:	7c20      	ldrb	r0, [r4, #16]
 8003a00:	68a3      	ldr	r3, [r4, #8]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	4798      	blx	r3
 8003a06:	48c5      	ldr	r0, [pc, #788]	@ (8003d1c <.text_3>)
 8003a08:	83e0      	strh	r0, [r4, #30]
 8003a0a:	25eb      	movs	r5, #235	@ 0xeb
 8003a0c:	006d      	lsls	r5, r5, #1
 8003a0e:	e6f7      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003a10:	4668      	mov	r0, sp
 8003a12:	7b00      	ldrb	r0, [r0, #12]
 8003a14:	2811      	cmp	r0, #17
 8003a16:	d10b      	bne.n	8003a30 <__iar_annotation$$branch+0x908>
 8003a18:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003a1a:	4001      	ands	r1, r0
 8003a1c:	2906      	cmp	r1, #6
 8003a1e:	d107      	bne.n	8003a30 <__iar_annotation$$branch+0x908>
 8003a20:	2026      	movs	r0, #38	@ 0x26
 8003a22:	7460      	strb	r0, [r4, #17]
 8003a24:	2014      	movs	r0, #20
 8003a26:	4669      	mov	r1, sp
 8003a28:	7308      	strb	r0, [r1, #12]
 8003a2a:	0020      	movs	r0, r4
 8003a2c:	f7fd f8c7 	bl	8000bbe <PE_Clear_RxEvent>
 8003a30:	8be0      	ldrh	r0, [r4, #30]
 8003a32:	03a9      	lsls	r1, r5, #14
 8003a34:	4288      	cmp	r0, r1
 8003a36:	d1ea      	bne.n	8003a0e <__iar_annotation$$branch+0x8e6>
 8003a38:	68a0      	ldr	r0, [r4, #8]
 8003a3a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d000      	beq.n	8003a42 <__iar_annotation$$branch+0x91a>
 8003a40:	e13a      	b.n	8003cb8 <__iar_annotation$$branch+0x5e>
 8003a42:	200f      	movs	r0, #15
 8003a44:	e6bd      	b.n	80037c2 <__iar_annotation$$branch+0x69a>
 8003a46:	8be0      	ldrh	r0, [r4, #30]
 8003a48:	03a9      	lsls	r1, r5, #14
 8003a4a:	4288      	cmp	r0, r1
 8003a4c:	d1df      	bne.n	8003a0e <__iar_annotation$$branch+0x8e6>
 8003a4e:	220e      	movs	r2, #14
 8003a50:	2101      	movs	r1, #1
 8003a52:	7c20      	ldrb	r0, [r4, #16]
 8003a54:	68a3      	ldr	r3, [r4, #8]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a58:	4798      	blx	r3
 8003a5a:	6860      	ldr	r0, [r4, #4]
 8003a5c:	7800      	ldrb	r0, [r0, #0]
 8003a5e:	0780      	lsls	r0, r0, #30
 8003a60:	0f80      	lsrs	r0, r0, #30
 8003a62:	2802      	cmp	r0, #2
 8003a64:	d102      	bne.n	8003a6c <__iar_annotation$$branch+0x944>
 8003a66:	7c20      	ldrb	r0, [r4, #16]
 8003a68:	f001 ffb1 	bl	80059ce <USBPD_PRL_SRCReleaseSinkNG>
 8003a6c:	0020      	movs	r0, r4
 8003a6e:	f7fd f9cb 	bl	8000e08 <PE_Reset_StateMachine>
 8003a72:	2115      	movs	r1, #21
 8003a74:	e74e      	b.n	8003914 <__iar_annotation$$branch+0x7ec>
 8003a76:	2803      	cmp	r0, #3
 8003a78:	d110      	bne.n	8003a9c <__iar_annotation$$branch+0x974>
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	7720      	strb	r0, [r4, #28]
 8003a7e:	6860      	ldr	r0, [r4, #4]
 8003a80:	7800      	ldrb	r0, [r0, #0]
 8003a82:	0780      	lsls	r0, r0, #30
 8003a84:	0f80      	lsrs	r0, r0, #30
 8003a86:	2802      	cmp	r0, #2
 8003a88:	d102      	bne.n	8003a90 <__iar_annotation$$branch+0x968>
 8003a8a:	7c20      	ldrb	r0, [r4, #16]
 8003a8c:	f001 ff9f 	bl	80059ce <USBPD_PRL_SRCReleaseSinkNG>
 8003a90:	2004      	movs	r0, #4
 8003a92:	7460      	strb	r0, [r4, #17]
 8003a94:	2167      	movs	r1, #103	@ 0x67
 8003a96:	7c20      	ldrb	r0, [r4, #16]
 8003a98:	f7fc fe26 	bl	80006e8 <USBPD_PE_Notification>
 8003a9c:	4668      	mov	r0, sp
 8003a9e:	7b00      	ldrb	r0, [r0, #12]
 8003aa0:	2814      	cmp	r0, #20
 8003aa2:	d00d      	beq.n	8003ac0 <__iar_annotation$$branch+0x998>
 8003aa4:	0020      	movs	r0, r4
 8003aa6:	f7fe f917 	bl	8001cd8 <PE_ManageRXEvent>
 8003aaa:	4668      	mov	r0, sp
 8003aac:	7b00      	ldrb	r0, [r0, #12]
 8003aae:	2814      	cmp	r0, #20
 8003ab0:	d005      	beq.n	8003abe <__iar_annotation$$branch+0x996>
 8003ab2:	2014      	movs	r0, #20
 8003ab4:	4669      	mov	r1, sp
 8003ab6:	7308      	strb	r0, [r1, #12]
 8003ab8:	0020      	movs	r0, r4
 8003aba:	f7fd f880 	bl	8000bbe <PE_Clear_RxEvent>
 8003abe:	e69f      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003ac0:	6960      	ldr	r0, [r4, #20]
 8003ac2:	0cc0      	lsrs	r0, r0, #19
 8003ac4:	03ad      	lsls	r5, r5, #14
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d01e      	beq.n	8003b08 <__iar_annotation$$branch+0x9e0>
 8003aca:	8c21      	ldrh	r1, [r4, #32]
 8003acc:	42a9      	cmp	r1, r5
 8003ace:	d10e      	bne.n	8003aee <__iar_annotation$$branch+0x9c6>
 8003ad0:	200f      	movs	r0, #15
 8003ad2:	7460      	strb	r0, [r4, #17]
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	9000      	str	r0, [sp, #0]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	2270      	movs	r2, #112	@ 0x70
 8003adc:	7c21      	ldrb	r1, [r4, #16]
 8003ade:	2009      	movs	r0, #9
 8003ae0:	4da5      	ldr	r5, [pc, #660]	@ (8003d78 <.text_5>)
 8003ae2:	682d      	ldr	r5, [r5, #0]
 8003ae4:	47a8      	blx	r5
 8003ae6:	78b0      	ldrb	r0, [r6, #2]
 8003ae8:	1c40      	adds	r0, r0, #1
 8003aea:	70b0      	strb	r0, [r6, #2]
 8003aec:	e6fc      	b.n	80038e8 <__iar_annotation$$branch+0x7c0>
 8003aee:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8003af0:	0509      	lsls	r1, r1, #20
 8003af2:	0f49      	lsrs	r1, r1, #29
 8003af4:	180a      	adds	r2, r1, r0
 8003af6:	2333      	movs	r3, #51	@ 0x33
 8003af8:	435a      	muls	r2, r3
 8003afa:	4315      	orrs	r5, r2
 8003afc:	8425      	strh	r5, [r4, #32]
 8003afe:	180d      	adds	r5, r1, r0
 8003b00:	2033      	movs	r0, #51	@ 0x33
 8003b02:	4345      	muls	r5, r0
 8003b04:	b2ad      	uxth	r5, r5
 8003b06:	e67b      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003b08:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8003b0a:	42a8      	cmp	r0, r5
 8003b0c:	d099      	beq.n	8003a42 <__iar_annotation$$branch+0x91a>
 8003b0e:	7c20      	ldrb	r0, [r4, #16]
 8003b10:	f7fd f87a 	bl	8000c08 <PE_PRL_Control_RxEvent>
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d113      	bne.n	8003b40 <__iar_annotation$$branch+0xa18>
 8003b18:	2032      	movs	r0, #50	@ 0x32
 8003b1a:	5c20      	ldrb	r0, [r4, r0]
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	d00f      	beq.n	8003b40 <__iar_annotation$$branch+0xa18>
 8003b20:	2133      	movs	r1, #51	@ 0x33
 8003b22:	5c61      	ldrb	r1, [r4, r1]
 8003b24:	2231      	movs	r2, #49	@ 0x31
 8003b26:	54a1      	strb	r1, [r4, r2]
 8003b28:	7460      	strb	r0, [r4, #17]
 8003b2a:	2500      	movs	r5, #0
 8003b2c:	2132      	movs	r1, #50	@ 0x32
 8003b2e:	5465      	strb	r5, [r4, r1]
 8003b30:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003b32:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8003b34:	6960      	ldr	r0, [r4, #20]
 8003b36:	2180      	movs	r1, #128	@ 0x80
 8003b38:	01c9      	lsls	r1, r1, #7
 8003b3a:	4301      	orrs	r1, r0
 8003b3c:	6161      	str	r1, [r4, #20]
 8003b3e:	e65f      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003b40:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8003b42:	42a8      	cmp	r0, r5
 8003b44:	d104      	bne.n	8003b50 <__iar_annotation$$branch+0x4>
 8003b46:	2500      	movs	r5, #0
 8003b48:	8465      	strh	r5, [r4, #34]	@ 0x22
 8003b4a:	7930      	ldrb	r0, [r6, #4]

08003b4c <__iar_annotation$$branch>:
 8003b4c:	f7ff fb87 	bl	800325e <__iar_annotation$$branch+0x136>
 8003b50:	0020      	movs	r0, r4
 8003b52:	f7fd fd83 	bl	800165c <PE_CalculateMinTiming>
 8003b56:	e080      	b.n	8003c5a <__iar_annotation$$branch>
 8003b58:	2000      	movs	r0, #0
 8003b5a:	9002      	str	r0, [sp, #8]
 8003b5c:	2003      	movs	r0, #3
 8003b5e:	9001      	str	r0, [sp, #4]
 8003b60:	2001      	movs	r0, #1
 8003b62:	9000      	str	r0, [sp, #0]
 8003b64:	0023      	movs	r3, r4
 8003b66:	332c      	adds	r3, #44	@ 0x2c
 8003b68:	2206      	movs	r2, #6
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	0020      	movs	r0, r4
 8003b6e:	f7fd fe2e 	bl	80017ce <PE_Send_DataMessage>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d1e3      	bne.n	8003b3e <__iar_annotation$$branch+0xa16>
 8003b76:	215d      	movs	r1, #93	@ 0x5d
 8003b78:	e6cc      	b.n	8003914 <__iar_annotation$$branch+0x7ec>
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	9004      	str	r0, [sp, #16]
 8003b7e:	ab04      	add	r3, sp, #16
 8003b80:	aa05      	add	r2, sp, #20
 8003b82:	210a      	movs	r1, #10
 8003b84:	4668      	mov	r0, sp
 8003b86:	7b40      	ldrb	r0, [r0, #13]
 8003b88:	68a7      	ldr	r7, [r4, #8]
 8003b8a:	697f      	ldr	r7, [r7, #20]
 8003b8c:	47b8      	blx	r7
 8003b8e:	2104      	movs	r1, #4
 8003b90:	9804      	ldr	r0, [sp, #16]
 8003b92:	f7fd fd8f 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d11f      	bne.n	8003bda <__iar_annotation$$branch+0x8e>
 8003b9a:	71f0      	strb	r0, [r6, #7]
 8003b9c:	7230      	strb	r0, [r6, #8]
 8003b9e:	7c20      	ldrb	r0, [r4, #16]
 8003ba0:	f7fd fa04 	bl	8000fac <PE_Get_UnchunkedSupport>
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d103      	bne.n	8003bb0 <__iar_annotation$$branch+0x64>
 8003ba8:	7a30      	ldrb	r0, [r6, #8]
 8003baa:	2180      	movs	r1, #128	@ 0x80
 8003bac:	4301      	orrs	r1, r0
 8003bae:	7231      	strb	r1, [r6, #8]
 8003bb0:	9a04      	ldr	r2, [sp, #16]
 8003bb2:	a905      	add	r1, sp, #20
 8003bb4:	4871      	ldr	r0, [pc, #452]	@ (8003d7c <.text_6>)
 8003bb6:	1820      	adds	r0, r4, r0
 8003bb8:	f01b f97e 	bl	801eeb8 <__aeabi_memcpy>
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	9002      	str	r0, [sp, #8]
 8003bc0:	2003      	movs	r0, #3
 8003bc2:	9001      	str	r0, [sp, #4]
 8003bc4:	2008      	movs	r0, #8
 8003bc6:	9000      	str	r0, [sp, #0]
 8003bc8:	486d      	ldr	r0, [pc, #436]	@ (8003d80 <.text_7>)
 8003bca:	1823      	adds	r3, r4, r0
 8003bcc:	220c      	movs	r2, #12
 8003bce:	2100      	movs	r1, #0
 8003bd0:	0020      	movs	r0, r4
 8003bd2:	f7fd ff2f 	bl	8001a34 <PE_Send_ExtendedMessage>
 8003bd6:	214c      	movs	r1, #76	@ 0x4c
 8003bd8:	e69c      	b.n	8003914 <__iar_annotation$$branch+0x7ec>
 8003bda:	2001      	movs	r0, #1
 8003bdc:	e510      	b.n	8003600 <__iar_annotation$$branch+0x4d8>
 8003bde:	2001      	movs	r0, #1
 8003be0:	9000      	str	r0, [sp, #0]
 8003be2:	2339      	movs	r3, #57	@ 0x39
 8003be4:	7832      	ldrb	r2, [r6, #0]
 8003be6:	2033      	movs	r0, #51	@ 0x33
 8003be8:	5c21      	ldrb	r1, [r4, r0]
 8003bea:	0020      	movs	r0, r4
 8003bec:	f7fd fdc4 	bl	8001778 <PE_Send_CtrlMessage>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d144      	bne.n	8003c7e <__iar_annotation$$branch+0x24>
 8003bf4:	7870      	ldrb	r0, [r6, #1]
 8003bf6:	7720      	strb	r0, [r4, #28]
 8003bf8:	83e7      	strh	r7, [r4, #30]
 8003bfa:	251b      	movs	r5, #27
 8003bfc:	2144      	movs	r1, #68	@ 0x44
 8003bfe:	e689      	b.n	8003914 <__iar_annotation$$branch+0x7ec>
 8003c00:	8be0      	ldrh	r0, [r4, #30]
 8003c02:	03a9      	lsls	r1, r5, #14
 8003c04:	4288      	cmp	r0, r1
 8003c06:	d104      	bne.n	8003c12 <__iar_annotation$$branch+0xc6>
 8003c08:	4668      	mov	r0, sp
 8003c0a:	7b00      	ldrb	r0, [r0, #12]
 8003c0c:	2814      	cmp	r0, #20
 8003c0e:	d100      	bne.n	8003c12 <__iar_annotation$$branch+0xc6>
 8003c10:	e5d6      	b.n	80037c0 <__iar_annotation$$branch+0x698>
 8003c12:	4668      	mov	r0, sp
 8003c14:	7b00      	ldrb	r0, [r0, #12]
 8003c16:	2814      	cmp	r0, #20
 8003c18:	d031      	beq.n	8003c7e <__iar_annotation$$branch+0x24>
 8003c1a:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003c1c:	0bc1      	lsrs	r1, r0, #15
 8003c1e:	d003      	beq.n	8003c28 <__iar_annotation$$branch+0xdc>
 8003c20:	0020      	movs	r0, r4
 8003c22:	f7fd fe11 	bl	8001848 <PE_Check_ExtendedMessage>
 8003c26:	e740      	b.n	8003aaa <__iar_annotation$$branch+0x982>
 8003c28:	06c0      	lsls	r0, r0, #27
 8003c2a:	0ec0      	lsrs	r0, r0, #27
 8003c2c:	2810      	cmp	r0, #16
 8003c2e:	d000      	beq.n	8003c32 <__iar_annotation$$branch+0xe6>
 8003c30:	e5c6      	b.n	80037c0 <__iar_annotation$$branch+0x698>
 8003c32:	2014      	movs	r0, #20
 8003c34:	4669      	mov	r1, sp
 8003c36:	7308      	strb	r0, [r1, #12]
 8003c38:	0020      	movs	r0, r4
 8003c3a:	f7fc ffc0 	bl	8000bbe <PE_Clear_RxEvent>
 8003c3e:	2500      	movs	r5, #0
 8003c40:	83e5      	strh	r5, [r4, #30]
 8003c42:	2003      	movs	r0, #3
 8003c44:	7460      	strb	r0, [r4, #17]
 8003c46:	2159      	movs	r1, #89	@ 0x59
 8003c48:	e664      	b.n	8003914 <__iar_annotation$$branch+0x7ec>
 8003c4a:	0020      	movs	r0, r4
 8003c4c:	f7fd ff1e 	bl	8001a8c <PE_SubStateMachine_ExtendedMessages>
 8003c50:	e003      	b.n	8003c5a <__iar_annotation$$branch>
 8003c52:	a903      	add	r1, sp, #12
 8003c54:	0020      	movs	r0, r4
 8003c56:	f7fd f9bb 	bl	8000fd0 <PE_SubStateMachine_Generic>

08003c5a <__iar_annotation$$branch>:
 8003c5a:	f7ff fa35 	bl	80030c8 <__iar_annotation$$branch+0xc>
 8003c5e:	a903      	add	r1, sp, #12
 8003c60:	0020      	movs	r0, r4
 8003c62:	f000 f9d5 	bl	8004010 <PE_SubStateMachine_VconnSwap>
 8003c66:	0005      	movs	r5, r0
 8003c68:	6860      	ldr	r0, [r4, #4]
 8003c6a:	6800      	ldr	r0, [r0, #0]
 8003c6c:	0401      	lsls	r1, r0, #16
 8003c6e:	0fc9      	lsrs	r1, r1, #31
 8003c70:	d006      	beq.n	8003c80 <__iar_annotation$$branch+0x26>
 8003c72:	6820      	ldr	r0, [r4, #0]
 8003c74:	6801      	ldr	r1, [r0, #0]
 8003c76:	4668      	mov	r0, sp
 8003c78:	7b40      	ldrb	r0, [r0, #13]
 8003c7a:	f001 fec7 	bl	8005a0c <USBPD_PRL_SOPCapability>
 8003c7e:	e5bf      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003c80:	2101      	movs	r1, #1
 8003c82:	e7f8      	b.n	8003c76 <__iar_annotation$$branch+0x1c>
 8003c84:	4668      	mov	r0, sp
 8003c86:	7b00      	ldrb	r0, [r0, #12]
 8003c88:	2811      	cmp	r0, #17
 8003c8a:	d111      	bne.n	8003cb0 <__iar_annotation$$branch+0x56>
 8003c8c:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003c8e:	4001      	ands	r1, r0
 8003c90:	2913      	cmp	r1, #19
 8003c92:	d10d      	bne.n	8003cb0 <__iar_annotation$$branch+0x56>
 8003c94:	2014      	movs	r0, #20
 8003c96:	4669      	mov	r1, sp
 8003c98:	7308      	strb	r0, [r1, #12]
 8003c9a:	0020      	movs	r0, r4
 8003c9c:	f7fc ff8f 	bl	8000bbe <PE_Clear_RxEvent>
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	9000      	str	r0, [sp, #0]
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	2100      	movs	r1, #0
 8003caa:	0020      	movs	r0, r4
 8003cac:	f7fd fd64 	bl	8001778 <PE_Send_CtrlMessage>
 8003cb0:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8003cb2:	03a9      	lsls	r1, r5, #14
 8003cb4:	4288      	cmp	r0, r1
 8003cb6:	d106      	bne.n	8003cc6 <__iar_annotation$$branch+0x6c>
 8003cb8:	2092      	movs	r0, #146	@ 0x92
 8003cba:	e582      	b.n	80037c2 <__iar_annotation$$branch+0x69a>
 8003cbc:	4668      	mov	r0, sp
 8003cbe:	7b01      	ldrb	r1, [r0, #12]
 8003cc0:	0020      	movs	r0, r4
 8003cc2:	f001 fc05 	bl	80054d0 <PE_StateMachine_UVDM>
 8003cc6:	e59b      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003cc8:	6960      	ldr	r0, [r4, #20]
 8003cca:	2701      	movs	r7, #1
 8003ccc:	0b41      	lsrs	r1, r0, #13
 8003cce:	4039      	ands	r1, r7
 8003cd0:	d019      	beq.n	8003d06 <__iar_annotation$$branch+0xac>
 8003cd2:	0b80      	lsrs	r0, r0, #14
 8003cd4:	4038      	ands	r0, r7
 8003cd6:	d007      	beq.n	8003ce8 <__iar_annotation$$branch+0x8e>
 8003cd8:	215b      	movs	r1, #91	@ 0x5b
 8003cda:	7c20      	ldrb	r0, [r4, #16]
 8003cdc:	f7fc fd04 	bl	80006e8 <USBPD_PE_Notification>
 8003ce0:	6960      	ldr	r0, [r4, #20]
 8003ce2:	4928      	ldr	r1, [pc, #160]	@ (8003d84 <.text_8>)
 8003ce4:	4001      	ands	r1, r0
 8003ce6:	6161      	str	r1, [r4, #20]
 8003ce8:	2003      	movs	r0, #3
 8003cea:	7460      	strb	r0, [r4, #17]
 8003cec:	7ca1      	ldrb	r1, [r4, #18]
 8003cee:	2903      	cmp	r1, #3
 8003cf0:	d008      	beq.n	8003d04 <__iar_annotation$$branch+0xaa>
 8003cf2:	74a0      	strb	r0, [r4, #18]
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	9000      	str	r0, [sp, #0]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	7c21      	ldrb	r1, [r4, #16]
 8003cfe:	2004      	movs	r0, #4
 8003d00:	6835      	ldr	r5, [r6, #0]
 8003d02:	47a8      	blx	r5
 8003d04:	2501      	movs	r5, #1
 8003d06:	6960      	ldr	r0, [r4, #20]
 8003d08:	491f      	ldr	r1, [pc, #124]	@ (8003d88 <.text_9>)
 8003d0a:	4001      	ands	r1, r0
 8003d0c:	6161      	str	r1, [r4, #20]
 8003d0e:	2d00      	cmp	r5, #0
 8003d10:	d101      	bne.n	8003d16 <__iar_annotation$$branch>

08003d12 <__iar_annotation$$branch>:
 8003d12:	f7ff f8c9 	bl	8002ea8 <USBPD_PE_StateMachine_SRC+0xb4>

08003d16 <__iar_annotation$$branch>:
 8003d16:	f7ff fa0b 	bl	8003130 <__iar_annotation$$branch+0x8>
	...

08003d1c <.text_3>:
 8003d1c:	000081d6 	.word	0x000081d6

08003d20 <PE_Send_SRCCapabilities>:
 8003d20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003d22:	0004      	movs	r4, r0
 8003d24:	000d      	movs	r5, r1
 8003d26:	2000      	movs	r0, #0
 8003d28:	9002      	str	r0, [sp, #8]
 8003d2a:	ab02      	add	r3, sp, #8
 8003d2c:	4817      	ldr	r0, [pc, #92]	@ (8003d8c <.text_10>)
 8003d2e:	1822      	adds	r2, r4, r0
 8003d30:	2100      	movs	r1, #0
 8003d32:	7c20      	ldrb	r0, [r4, #16]
 8003d34:	68a6      	ldr	r6, [r4, #8]
 8003d36:	6976      	ldr	r6, [r6, #20]
 8003d38:	47b0      	blx	r6
 8003d3a:	9802      	ldr	r0, [sp, #8]
 8003d3c:	1c80      	adds	r0, r0, #2
 8003d3e:	9002      	str	r0, [sp, #8]
 8003d40:	2104      	movs	r1, #4
 8003d42:	9802      	ldr	r0, [sp, #8]
 8003d44:	f7fd fcb6 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	d113      	bne.n	8003d74 <PE_Send_SRCCapabilities+0x54>
 8003d4c:	6860      	ldr	r0, [r4, #4]
 8003d4e:	6800      	ldr	r0, [r0, #0]
 8003d50:	04c1      	lsls	r1, r0, #19
 8003d52:	0fc9      	lsrs	r1, r1, #31
 8003d54:	d00e      	beq.n	8003d74 <PE_Send_SRCCapabilities+0x54>
 8003d56:	9501      	str	r5, [sp, #4]
 8003d58:	9802      	ldr	r0, [sp, #8]
 8003d5a:	b280      	uxth	r0, r0
 8003d5c:	9000      	str	r0, [sp, #0]
 8003d5e:	4808      	ldr	r0, [pc, #32]	@ (8003d80 <.text_7>)
 8003d60:	1823      	adds	r3, r4, r0
 8003d62:	2201      	movs	r2, #1
 8003d64:	2100      	movs	r1, #0
 8003d66:	7c20      	ldrb	r0, [r4, #16]
 8003d68:	f001 fe54 	bl	8005a14 <USBPD_PRL_SendMessage>
 8003d6c:	2803      	cmp	r0, #3
 8003d6e:	d0e7      	beq.n	8003d40 <PE_Send_SRCCapabilities+0x20>
 8003d70:	b004      	add	sp, #16
 8003d72:	bd70      	pop	{r4, r5, r6, pc}
 8003d74:	2010      	movs	r0, #16
 8003d76:	e7fb      	b.n	8003d70 <PE_Send_SRCCapabilities+0x50>

08003d78 <.text_5>:
 8003d78:	20000000 	.word	0x20000000

08003d7c <.text_6>:
 8003d7c:	00000267 	.word	0x00000267

08003d80 <.text_7>:
 8003d80:	00000263 	.word	0x00000263

08003d84 <.text_8>:
 8003d84:	ffffbfff 	.word	0xffffbfff

08003d88 <.text_9>:
 8003d88:	ffffdfff 	.word	0xffffdfff

08003d8c <.text_10>:
 8003d8c:	00000265 	.word	0x00000265

08003d90 <PE_StateMachine_VDMCable>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	b08c      	sub	sp, #48	@ 0x30
 8003d94:	0004      	movs	r4, r0
 8003d96:	2502      	movs	r5, #2
 8003d98:	2607      	movs	r6, #7
 8003d9a:	7c60      	ldrb	r0, [r4, #17]
 8003d9c:	2805      	cmp	r0, #5
 8003d9e:	d002      	beq.n	8003da6 <PE_StateMachine_VDMCable+0x16>
 8003da0:	289a      	cmp	r0, #154	@ 0x9a
 8003da2:	d072      	beq.n	8003e8a <PE_StateMachine_VDMCable+0xfa>
 8003da4:	e127      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003da6:	6860      	ldr	r0, [r4, #4]
 8003da8:	7800      	ldrb	r0, [r0, #0]
 8003daa:	0781      	lsls	r1, r0, #30
 8003dac:	0f89      	lsrs	r1, r1, #30
 8003dae:	0020      	movs	r0, r4
 8003db0:	f000 fa5e 	bl	8004270 <PE_ExtRevisionInteroperability_Cable>
 8003db4:	2094      	movs	r0, #148	@ 0x94
 8003db6:	0080      	lsls	r0, r0, #2
 8003db8:	5821      	ldr	r1, [r4, r0]
 8003dba:	201f      	movs	r0, #31
 8003dbc:	4381      	bics	r1, r0
 8003dbe:	488f      	ldr	r0, [pc, #572]	@ (8003ffc <.text_3>)
 8003dc0:	4308      	orrs	r0, r1
 8003dc2:	2194      	movs	r1, #148	@ 0x94
 8003dc4:	0089      	lsls	r1, r1, #2
 8003dc6:	5060      	str	r0, [r4, r1]
 8003dc8:	6861      	ldr	r1, [r4, #4]
 8003dca:	9100      	str	r1, [sp, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	9a00      	ldr	r2, [sp, #0]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	0953      	lsrs	r3, r2, #5
 8003dd4:	400b      	ands	r3, r1
 8003dd6:	4a8a      	ldr	r2, [pc, #552]	@ (8004000 <.text_4>)
 8003dd8:	4002      	ands	r2, r0
 8003dda:	0358      	lsls	r0, r3, #13
 8003ddc:	4310      	orrs	r0, r2
 8003dde:	22ff      	movs	r2, #255	@ 0xff
 8003de0:	0612      	lsls	r2, r2, #24
 8003de2:	4302      	orrs	r2, r0
 8003de4:	2094      	movs	r0, #148	@ 0x94
 8003de6:	0080      	lsls	r0, r0, #2
 8003de8:	5022      	str	r2, [r4, r0]
 8003dea:	9800      	ldr	r0, [sp, #0]
 8003dec:	6800      	ldr	r0, [r0, #0]
 8003dee:	0880      	lsrs	r0, r0, #2
 8003df0:	4001      	ands	r1, r0
 8003df2:	d003      	beq.n	8003dfc <PE_StateMachine_VDMCable+0x6c>
 8003df4:	6960      	ldr	r0, [r4, #20]
 8003df6:	0741      	lsls	r1, r0, #29
 8003df8:	0fc8      	lsrs	r0, r1, #31
 8003dfa:	e000      	b.n	8003dfe <PE_StateMachine_VDMCable+0x6e>
 8003dfc:	2002      	movs	r0, #2
 8003dfe:	2194      	movs	r1, #148	@ 0x94
 8003e00:	0089      	lsls	r1, r1, #2
 8003e02:	1867      	adds	r7, r4, r1
 8003e04:	9002      	str	r0, [sp, #8]
 8003e06:	209a      	movs	r0, #154	@ 0x9a
 8003e08:	9001      	str	r0, [sp, #4]
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	9000      	str	r0, [sp, #0]
 8003e0e:	003b      	movs	r3, r7
 8003e10:	220f      	movs	r2, #15
 8003e12:	2101      	movs	r1, #1
 8003e14:	0020      	movs	r0, r4
 8003e16:	f7fd fcda 	bl	80017ce <PE_Send_DataMessage>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d109      	bne.n	8003e32 <PE_StateMachine_VDMCable+0xa2>
 8003e1e:	6960      	ldr	r0, [r4, #20]
 8003e20:	03e9      	lsls	r1, r5, #15
 8003e22:	4301      	orrs	r1, r0
 8003e24:	6161      	str	r1, [r4, #20]
 8003e26:	2051      	movs	r0, #81	@ 0x51
 8003e28:	7720      	strb	r0, [r4, #28]
 8003e2a:	4876      	ldr	r0, [pc, #472]	@ (8004004 <.text_5>)
 8003e2c:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003e2e:	251e      	movs	r5, #30
 8003e30:	e0e1      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003e32:	2809      	cmp	r0, #9
 8003e34:	d0fc      	beq.n	8003e30 <PE_StateMachine_VDMCable+0xa0>
 8003e36:	7cb8      	ldrb	r0, [r7, #18]
 8003e38:	2815      	cmp	r0, #21
 8003e3a:	d202      	bcs.n	8003e42 <PE_StateMachine_VDMCable+0xb2>
 8003e3c:	4872      	ldr	r0, [pc, #456]	@ (8004008 <.text_6>)
 8003e3e:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003e40:	e00a      	b.n	8003e58 <PE_StateMachine_VDMCable+0xc8>
 8003e42:	68e0      	ldr	r0, [r4, #12]
 8003e44:	6940      	ldr	r0, [r0, #20]
 8003e46:	9000      	str	r0, [sp, #0]
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	d005      	beq.n	8003e58 <PE_StateMachine_VDMCable+0xc8>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	2205      	movs	r2, #5
 8003e50:	2101      	movs	r1, #1
 8003e52:	7c20      	ldrb	r0, [r4, #16]
 8003e54:	9f00      	ldr	r7, [sp, #0]
 8003e56:	47b8      	blx	r7
 8003e58:	6860      	ldr	r0, [r4, #4]
 8003e5a:	6800      	ldr	r0, [r0, #0]
 8003e5c:	0a00      	lsrs	r0, r0, #8
 8003e5e:	4030      	ands	r0, r6
 8003e60:	2803      	cmp	r0, #3
 8003e62:	d100      	bne.n	8003e66 <PE_StateMachine_VDMCable+0xd6>
 8003e64:	e0a4      	b.n	8003fb0 <PE_StateMachine_VDMCable+0x220>
 8003e66:	4869      	ldr	r0, [pc, #420]	@ (800400c <.text_7>)
 8003e68:	8be1      	ldrh	r1, [r4, #30]
 8003e6a:	4201      	tst	r1, r0
 8003e6c:	d00b      	beq.n	8003e86 <PE_StateMachine_VDMCable+0xf6>
 8003e6e:	2108      	movs	r1, #8
 8003e70:	7461      	strb	r1, [r4, #17]
 8003e72:	8be1      	ldrh	r1, [r4, #30]
 8003e74:	4001      	ands	r1, r0
 8003e76:	292d      	cmp	r1, #45	@ 0x2d
 8003e78:	d203      	bcs.n	8003e82 <PE_StateMachine_VDMCable+0xf2>
 8003e7a:	8be1      	ldrh	r1, [r4, #30]
 8003e7c:	0005      	movs	r5, r0
 8003e7e:	400d      	ands	r5, r1
 8003e80:	e0b9      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003e82:	252d      	movs	r5, #45	@ 0x2d
 8003e84:	e0b7      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003e86:	7466      	strb	r6, [r4, #17]
 8003e88:	e0b5      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003e8a:	9101      	str	r1, [sp, #4]
 8003e8c:	2001      	movs	r0, #1
 8003e8e:	f7fc fecf 	bl	8000c30 <PE_Convert_SOPRxEvent>
 8003e92:	4669      	mov	r1, sp
 8003e94:	7008      	strb	r0, [r1, #0]
 8003e96:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8003e98:	2700      	movs	r7, #0
 8003e9a:	221f      	movs	r2, #31
 8003e9c:	9801      	ldr	r0, [sp, #4]
 8003e9e:	7800      	ldrb	r0, [r0, #0]
 8003ea0:	466b      	mov	r3, sp
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	4298      	cmp	r0, r3
 8003ea6:	d14f      	bne.n	8003f48 <PE_StateMachine_VDMCable+0x1b8>
 8003ea8:	0bc8      	lsrs	r0, r1, #15
 8003eaa:	d14d      	bne.n	8003f48 <PE_StateMachine_VDMCable+0x1b8>
 8003eac:	0b08      	lsrs	r0, r1, #12
 8003eae:	4230      	tst	r0, r6
 8003eb0:	d04a      	beq.n	8003f48 <PE_StateMachine_VDMCable+0x1b8>
 8003eb2:	201f      	movs	r0, #31
 8003eb4:	4008      	ands	r0, r1
 8003eb6:	280f      	cmp	r0, #15
 8003eb8:	d146      	bne.n	8003f48 <PE_StateMachine_VDMCable+0x1b8>
 8003eba:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003ebc:	7880      	ldrb	r0, [r0, #2]
 8003ebe:	9000      	str	r0, [sp, #0]
 8003ec0:	4002      	ands	r2, r0
 8003ec2:	2a01      	cmp	r2, #1
 8003ec4:	d13b      	bne.n	8003f3e <PE_StateMachine_VDMCable+0x1ae>
 8003ec6:	0980      	lsrs	r0, r0, #6
 8003ec8:	d039      	beq.n	8003f3e <PE_StateMachine_VDMCable+0x1ae>
 8003eca:	0608      	lsls	r0, r1, #24
 8003ecc:	0f81      	lsrs	r1, r0, #30
 8003ece:	0020      	movs	r0, r4
 8003ed0:	f000 f9ce 	bl	8004270 <PE_ExtRevisionInteroperability_Cable>
 8003ed4:	68e0      	ldr	r0, [r4, #12]
 8003ed6:	6940      	ldr	r0, [r0, #20]
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	d023      	beq.n	8003f24 <PE_StateMachine_VDMCable+0x194>
 8003edc:	9800      	ldr	r0, [sp, #0]
 8003ede:	0985      	lsrs	r5, r0, #6
 8003ee0:	07a8      	lsls	r0, r5, #30
 8003ee2:	0f80      	lsrs	r0, r0, #30
 8003ee4:	2801      	cmp	r0, #1
 8003ee6:	d11d      	bne.n	8003f24 <PE_StateMachine_VDMCable+0x194>
 8003ee8:	aa03      	add	r2, sp, #12
 8003eea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003eec:	1d81      	adds	r1, r0, #6
 8003eee:	7c20      	ldrb	r0, [r4, #16]
 8003ef0:	f001 fb9a 	bl	8005628 <PE_SVDM_CheckIdentity>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d111      	bne.n	8003f1c <PE_StateMachine_VDMCable+0x18c>
 8003ef8:	ab03      	add	r3, sp, #12
 8003efa:	07aa      	lsls	r2, r5, #30
 8003efc:	0f92      	lsrs	r2, r2, #30
 8003efe:	2101      	movs	r1, #1
 8003f00:	7c20      	ldrb	r0, [r4, #16]
 8003f02:	68e5      	ldr	r5, [r4, #12]
 8003f04:	696d      	ldr	r5, [r5, #20]
 8003f06:	47a8      	blx	r5
 8003f08:	2152      	movs	r1, #82	@ 0x52
 8003f0a:	7c20      	ldrb	r0, [r4, #16]
 8003f0c:	f7fc fbec 	bl	80006e8 <USBPD_PE_Notification>
 8003f10:	2014      	movs	r0, #20
 8003f12:	2194      	movs	r1, #148	@ 0x94
 8003f14:	0089      	lsls	r1, r1, #2
 8003f16:	1861      	adds	r1, r4, r1
 8003f18:	7488      	strb	r0, [r1, #18]
 8003f1a:	e003      	b.n	8003f24 <PE_StateMachine_VDMCable+0x194>
 8003f1c:	211b      	movs	r1, #27
 8003f1e:	7c20      	ldrb	r0, [r4, #16]
 8003f20:	f7fc fbe2 	bl	80006e8 <USBPD_PE_Notification>
 8003f24:	8467      	strh	r7, [r4, #34]	@ 0x22
 8003f26:	6860      	ldr	r0, [r4, #4]
 8003f28:	6800      	ldr	r0, [r0, #0]
 8003f2a:	0a00      	lsrs	r0, r0, #8
 8003f2c:	4030      	ands	r0, r6
 8003f2e:	2803      	cmp	r0, #3
 8003f30:	d102      	bne.n	8003f38 <PE_StateMachine_VDMCable+0x1a8>
 8003f32:	7460      	strb	r0, [r4, #17]
 8003f34:	2500      	movs	r5, #0
 8003f36:	e002      	b.n	8003f3e <PE_StateMachine_VDMCable+0x1ae>
 8003f38:	7466      	strb	r6, [r4, #17]
 8003f3a:	2500      	movs	r5, #0
 8003f3c:	7727      	strb	r7, [r4, #28]
 8003f3e:	9801      	ldr	r0, [sp, #4]
 8003f40:	7800      	ldrb	r0, [r0, #0]
 8003f42:	2814      	cmp	r0, #20
 8003f44:	d119      	bne.n	8003f7a <PE_StateMachine_VDMCable+0x1ea>
 8003f46:	e056      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003f48:	2003      	movs	r0, #3
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	2a10      	cmp	r2, #16
 8003f4e:	d11b      	bne.n	8003f88 <PE_StateMachine_VDMCable+0x1f8>
 8003f50:	8467      	strh	r7, [r4, #34]	@ 0x22
 8003f52:	6861      	ldr	r1, [r4, #4]
 8003f54:	6809      	ldr	r1, [r1, #0]
 8003f56:	0a09      	lsrs	r1, r1, #8
 8003f58:	4031      	ands	r1, r6
 8003f5a:	2903      	cmp	r1, #3
 8003f5c:	d102      	bne.n	8003f64 <PE_StateMachine_VDMCable+0x1d4>
 8003f5e:	7460      	strb	r0, [r4, #17]
 8003f60:	2500      	movs	r5, #0
 8003f62:	e002      	b.n	8003f6a <PE_StateMachine_VDMCable+0x1da>
 8003f64:	7466      	strb	r6, [r4, #17]
 8003f66:	2500      	movs	r5, #0
 8003f68:	7727      	strb	r7, [r4, #28]
 8003f6a:	2159      	movs	r1, #89	@ 0x59
 8003f6c:	7c20      	ldrb	r0, [r4, #16]
 8003f6e:	f7fc fbbb 	bl	80006e8 <USBPD_PE_Notification>
 8003f72:	9801      	ldr	r0, [sp, #4]
 8003f74:	7800      	ldrb	r0, [r0, #0]
 8003f76:	2814      	cmp	r0, #20
 8003f78:	d03d      	beq.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003f7a:	2014      	movs	r0, #20
 8003f7c:	9901      	ldr	r1, [sp, #4]
 8003f7e:	7008      	strb	r0, [r1, #0]
 8003f80:	0020      	movs	r0, r4
 8003f82:	f7fc fe1c 	bl	8000bbe <PE_Clear_RxEvent>
 8003f86:	e036      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003f88:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8003f8a:	03aa      	lsls	r2, r5, #14
 8003f8c:	4291      	cmp	r1, r2
 8003f8e:	d132      	bne.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003f90:	8467      	strh	r7, [r4, #34]	@ 0x22
 8003f92:	6861      	ldr	r1, [r4, #4]
 8003f94:	680a      	ldr	r2, [r1, #0]
 8003f96:	0a13      	lsrs	r3, r2, #8
 8003f98:	4033      	ands	r3, r6
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d10c      	bne.n	8003fb8 <PE_StateMachine_VDMCable+0x228>
 8003f9e:	68e0      	ldr	r0, [r4, #12]
 8003fa0:	6945      	ldr	r5, [r0, #20]
 8003fa2:	2d00      	cmp	r5, #0
 8003fa4:	d004      	beq.n	8003fb0 <PE_StateMachine_VDMCable+0x220>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	2204      	movs	r2, #4
 8003faa:	2101      	movs	r1, #1
 8003fac:	7c20      	ldrb	r0, [r4, #16]
 8003fae:	47a8      	blx	r5
 8003fb0:	2003      	movs	r0, #3
 8003fb2:	7460      	strb	r0, [r4, #17]
 8003fb4:	2500      	movs	r5, #0
 8003fb6:	e01e      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003fb8:	0e93      	lsrs	r3, r2, #26
 8003fba:	4018      	ands	r0, r3
 8003fbc:	2802      	cmp	r0, #2
 8003fbe:	d10e      	bne.n	8003fde <PE_StateMachine_VDMCable+0x24e>
 8003fc0:	48b7      	ldr	r0, [pc, #732]	@ (80042a0 <.text_10>)
 8003fc2:	4010      	ands	r0, r2
 8003fc4:	066a      	lsls	r2, r5, #25
 8003fc6:	4302      	orrs	r2, r0
 8003fc8:	600a      	str	r2, [r1, #0]
 8003fca:	2101      	movs	r1, #1
 8003fcc:	7c20      	ldrb	r0, [r4, #16]
 8003fce:	f001 fcea 	bl	80059a6 <USBPD_PRL_CBL_SetHeaderSpecification>
 8003fd2:	480d      	ldr	r0, [pc, #52]	@ (8004008 <.text_6>)
 8003fd4:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003fd6:	252d      	movs	r5, #45	@ 0x2d
 8003fd8:	2008      	movs	r0, #8
 8003fda:	7460      	strb	r0, [r4, #17]
 8003fdc:	e00a      	b.n	8003ff4 <PE_StateMachine_VDMCable+0x264>
 8003fde:	68e0      	ldr	r0, [r4, #12]
 8003fe0:	6945      	ldr	r5, [r0, #20]
 8003fe2:	2d00      	cmp	r5, #0
 8003fe4:	d004      	beq.n	8003ff0 <PE_StateMachine_VDMCable+0x260>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2204      	movs	r2, #4
 8003fea:	2101      	movs	r1, #1
 8003fec:	7c20      	ldrb	r0, [r4, #16]
 8003fee:	47a8      	blx	r5
 8003ff0:	7466      	strb	r6, [r4, #17]
 8003ff2:	2500      	movs	r5, #0
 8003ff4:	7727      	strb	r7, [r4, #28]
 8003ff6:	0028      	movs	r0, r5
 8003ff8:	b00d      	add	sp, #52	@ 0x34
 8003ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ffc <.text_3>:
 8003ffc:	00008001 	.word	0x00008001

08004000 <.text_4>:
 8004000:	0000983f 	.word	0x0000983f

08004004 <.text_5>:
 8004004:	0000801e 	.word	0x0000801e

08004008 <.text_6>:
 8004008:	0000802d 	.word	0x0000802d

0800400c <.text_7>:
 800400c:	00007fff 	.word	0x00007fff

08004010 <PE_SubStateMachine_VconnSwap>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	0004      	movs	r4, r0
 8004014:	2502      	movs	r5, #2
 8004016:	2703      	movs	r7, #3
 8004018:	4ea2      	ldr	r6, [pc, #648]	@ (80042a4 <.text_11>)
 800401a:	2014      	movs	r0, #20
 800401c:	7c62      	ldrb	r2, [r4, #17]
 800401e:	2a9d      	cmp	r2, #157	@ 0x9d
 8004020:	d010      	beq.n	8004044 <PE_SubStateMachine_VconnSwap+0x34>
 8004022:	d30e      	bcc.n	8004042 <PE_SubStateMachine_VconnSwap+0x32>
 8004024:	2a9f      	cmp	r2, #159	@ 0x9f
 8004026:	d057      	beq.n	80040d8 <PE_SubStateMachine_VconnSwap+0xc8>
 8004028:	d33d      	bcc.n	80040a6 <PE_SubStateMachine_VconnSwap+0x96>
 800402a:	2aa1      	cmp	r2, #161	@ 0xa1
 800402c:	d100      	bne.n	8004030 <PE_SubStateMachine_VconnSwap+0x20>
 800402e:	e085      	b.n	800413c <PE_SubStateMachine_VconnSwap+0x12c>
 8004030:	d377      	bcc.n	8004122 <PE_SubStateMachine_VconnSwap+0x112>
 8004032:	2aa3      	cmp	r2, #163	@ 0xa3
 8004034:	d100      	bne.n	8004038 <PE_SubStateMachine_VconnSwap+0x28>
 8004036:	e0a3      	b.n	8004180 <PE_SubStateMachine_VconnSwap+0x170>
 8004038:	d200      	bcs.n	800403c <PE_SubStateMachine_VconnSwap+0x2c>
 800403a:	e08e      	b.n	800415a <PE_SubStateMachine_VconnSwap+0x14a>
 800403c:	2aa4      	cmp	r2, #164	@ 0xa4
 800403e:	d100      	bne.n	8004042 <PE_SubStateMachine_VconnSwap+0x32>
 8004040:	e106      	b.n	8004250 <PE_SubStateMachine_VconnSwap+0x240>
 8004042:	e113      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 8004044:	6860      	ldr	r0, [r4, #4]
 8004046:	6800      	ldr	r0, [r0, #0]
 8004048:	21b8      	movs	r1, #184	@ 0xb8
 800404a:	0149      	lsls	r1, r1, #5
 800404c:	4001      	ands	r1, r0
 800404e:	2098      	movs	r0, #152	@ 0x98
 8004050:	0140      	lsls	r0, r0, #5
 8004052:	4281      	cmp	r1, r0
 8004054:	d121      	bne.n	800409a <PE_SubStateMachine_VconnSwap+0x8a>
 8004056:	7c20      	ldrb	r0, [r4, #16]
 8004058:	68a1      	ldr	r1, [r4, #8]
 800405a:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 800405c:	4788      	blx	r1
 800405e:	280a      	cmp	r0, #10
 8004060:	d002      	beq.n	8004068 <PE_SubStateMachine_VconnSwap+0x58>
 8004062:	280d      	cmp	r0, #13
 8004064:	d007      	beq.n	8004076 <PE_SubStateMachine_VconnSwap+0x66>
 8004066:	e00f      	b.n	8004088 <PE_SubStateMachine_VconnSwap+0x78>
 8004068:	209e      	movs	r0, #158	@ 0x9e
 800406a:	7460      	strb	r0, [r4, #17]
 800406c:	6960      	ldr	r0, [r4, #20]
 800406e:	02e9      	lsls	r1, r5, #11
 8004070:	4301      	orrs	r1, r0
 8004072:	6161      	str	r1, [r4, #20]
 8004074:	e0fa      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 8004076:	2000      	movs	r0, #0
 8004078:	9000      	str	r0, [sp, #0]
 800407a:	2303      	movs	r3, #3
 800407c:	220c      	movs	r2, #12
 800407e:	2100      	movs	r1, #0
 8004080:	0020      	movs	r0, r4
 8004082:	f7fd fb79 	bl	8001778 <PE_Send_CtrlMessage>
 8004086:	e0f1      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 8004088:	2000      	movs	r0, #0
 800408a:	9000      	str	r0, [sp, #0]
 800408c:	2303      	movs	r3, #3
 800408e:	2204      	movs	r2, #4
 8004090:	2100      	movs	r1, #0
 8004092:	0020      	movs	r0, r4
 8004094:	f7fd fb70 	bl	8001778 <PE_Send_CtrlMessage>
 8004098:	e002      	b.n	80040a0 <PE_SubStateMachine_VconnSwap+0x90>
 800409a:	6960      	ldr	r0, [r4, #20]
 800409c:	4006      	ands	r6, r0
 800409e:	6166      	str	r6, [r4, #20]
 80040a0:	7467      	strb	r7, [r4, #17]
 80040a2:	2500      	movs	r5, #0
 80040a4:	e0e2      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 80040a6:	2000      	movs	r0, #0
 80040a8:	9000      	str	r0, [sp, #0]
 80040aa:	239e      	movs	r3, #158	@ 0x9e
 80040ac:	2203      	movs	r2, #3
 80040ae:	2100      	movs	r1, #0
 80040b0:	0020      	movs	r0, r4
 80040b2:	f7fd fb61 	bl	8001778 <PE_Send_CtrlMessage>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d1f4      	bne.n	80040a4 <PE_SubStateMachine_VconnSwap+0x94>
 80040ba:	6860      	ldr	r0, [r4, #4]
 80040bc:	6800      	ldr	r0, [r0, #0]
 80040be:	0401      	lsls	r1, r0, #16
 80040c0:	0fc9      	lsrs	r1, r1, #31
 80040c2:	d005      	beq.n	80040d0 <PE_SubStateMachine_VconnSwap+0xc0>
 80040c4:	209f      	movs	r0, #159	@ 0x9f
 80040c6:	7460      	strb	r0, [r4, #17]
 80040c8:	4877      	ldr	r0, [pc, #476]	@ (80042a8 <.text_12>)
 80040ca:	83e0      	strh	r0, [r4, #30]
 80040cc:	2596      	movs	r5, #150	@ 0x96
 80040ce:	e001      	b.n	80040d4 <PE_SubStateMachine_VconnSwap+0xc4>
 80040d0:	20a0      	movs	r0, #160	@ 0xa0
 80040d2:	7460      	strb	r0, [r4, #17]
 80040d4:	213f      	movs	r1, #63	@ 0x3f
 80040d6:	e0b7      	b.n	8004248 <PE_SubStateMachine_VconnSwap+0x238>
 80040d8:	8be2      	ldrh	r2, [r4, #30]
 80040da:	03ab      	lsls	r3, r5, #14
 80040dc:	429a      	cmp	r2, r3
 80040de:	d100      	bne.n	80040e2 <PE_SubStateMachine_VconnSwap+0xd2>
 80040e0:	e0ac      	b.n	800423c <PE_SubStateMachine_VconnSwap+0x22c>
 80040e2:	780a      	ldrb	r2, [r1, #0]
 80040e4:	2a11      	cmp	r2, #17
 80040e6:	d11b      	bne.n	8004120 <PE_SubStateMachine_VconnSwap+0x110>
 80040e8:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 80040ea:	4b70      	ldr	r3, [pc, #448]	@ (80042ac <.text_13>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d116      	bne.n	8004120 <PE_SubStateMachine_VconnSwap+0x110>
 80040f2:	7008      	strb	r0, [r1, #0]
 80040f4:	0020      	movs	r0, r4
 80040f6:	f7fc fd62 	bl	8000bbe <PE_Clear_RxEvent>
 80040fa:	68a0      	ldr	r0, [r4, #8]
 80040fc:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80040fe:	2a00      	cmp	r2, #0
 8004100:	d002      	beq.n	8004108 <PE_SubStateMachine_VconnSwap+0xf8>
 8004102:	2100      	movs	r1, #0
 8004104:	7c20      	ldrb	r0, [r4, #16]
 8004106:	4790      	blx	r2
 8004108:	6960      	ldr	r0, [r4, #20]
 800410a:	4006      	ands	r6, r0
 800410c:	6166      	str	r6, [r4, #20]
 800410e:	7467      	strb	r7, [r4, #17]
 8004110:	2500      	movs	r5, #0
 8004112:	2142      	movs	r1, #66	@ 0x42
 8004114:	7c20      	ldrb	r0, [r4, #16]
 8004116:	f7fc fae7 	bl	80006e8 <USBPD_PE_Notification>
 800411a:	8465      	strh	r5, [r4, #34]	@ 0x22
 800411c:	4964      	ldr	r1, [pc, #400]	@ (80042b0 <.text_14>)
 800411e:	5465      	strb	r5, [r4, r1]
 8004120:	e0a4      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 8004122:	68a0      	ldr	r0, [r4, #8]
 8004124:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8004126:	2a00      	cmp	r2, #0
 8004128:	d002      	beq.n	8004130 <PE_SubStateMachine_VconnSwap+0x120>
 800412a:	2101      	movs	r1, #1
 800412c:	7c20      	ldrb	r0, [r4, #16]
 800412e:	4790      	blx	r2
 8004130:	20a1      	movs	r0, #161	@ 0xa1
 8004132:	7460      	strb	r0, [r4, #17]
 8004134:	2000      	movs	r0, #0
 8004136:	495e      	ldr	r1, [pc, #376]	@ (80042b0 <.text_14>)
 8004138:	5460      	strb	r0, [r4, r1]
 800413a:	e097      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 800413c:	2000      	movs	r0, #0
 800413e:	9000      	str	r0, [sp, #0]
 8004140:	2303      	movs	r3, #3
 8004142:	2206      	movs	r2, #6
 8004144:	2100      	movs	r1, #0
 8004146:	0020      	movs	r0, r4
 8004148:	f7fd fb16 	bl	8001778 <PE_Send_CtrlMessage>
 800414c:	2800      	cmp	r0, #0
 800414e:	d1f4      	bne.n	800413a <PE_SubStateMachine_VconnSwap+0x12a>
 8004150:	6960      	ldr	r0, [r4, #20]
 8004152:	4006      	ands	r6, r0
 8004154:	6166      	str	r6, [r4, #20]
 8004156:	2142      	movs	r1, #66	@ 0x42
 8004158:	e076      	b.n	8004248 <PE_SubStateMachine_VconnSwap+0x238>
 800415a:	2000      	movs	r0, #0
 800415c:	9000      	str	r0, [sp, #0]
 800415e:	23a3      	movs	r3, #163	@ 0xa3
 8004160:	220b      	movs	r2, #11
 8004162:	2100      	movs	r1, #0
 8004164:	0020      	movs	r0, r4
 8004166:	f7fd fb07 	bl	8001778 <PE_Send_CtrlMessage>
 800416a:	2800      	cmp	r0, #0
 800416c:	d1e5      	bne.n	800413a <PE_SubStateMachine_VconnSwap+0x12a>
 800416e:	6960      	ldr	r0, [r4, #20]
 8004170:	02e9      	lsls	r1, r5, #11
 8004172:	4301      	orrs	r1, r0
 8004174:	6161      	str	r1, [r4, #20]
 8004176:	484f      	ldr	r0, [pc, #316]	@ (80042b4 <.text_15>)
 8004178:	83e0      	strh	r0, [r4, #30]
 800417a:	251b      	movs	r5, #27
 800417c:	213e      	movs	r1, #62	@ 0x3e
 800417e:	e063      	b.n	8004248 <PE_SubStateMachine_VconnSwap+0x238>
 8004180:	780a      	ldrb	r2, [r1, #0]
 8004182:	2a11      	cmp	r2, #17
 8004184:	d155      	bne.n	8004232 <PE_SubStateMachine_VconnSwap+0x222>
 8004186:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8004188:	23f0      	movs	r3, #240	@ 0xf0
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	4013      	ands	r3, r2
 800418e:	d150      	bne.n	8004232 <PE_SubStateMachine_VconnSwap+0x222>
 8004190:	06d2      	lsls	r2, r2, #27
 8004192:	0ed2      	lsrs	r2, r2, #27
 8004194:	2a03      	cmp	r2, #3
 8004196:	d006      	beq.n	80041a6 <PE_SubStateMachine_VconnSwap+0x196>
 8004198:	2a04      	cmp	r2, #4
 800419a:	d024      	beq.n	80041e6 <PE_SubStateMachine_VconnSwap+0x1d6>
 800419c:	2a0c      	cmp	r2, #12
 800419e:	d014      	beq.n	80041ca <PE_SubStateMachine_VconnSwap+0x1ba>
 80041a0:	2a10      	cmp	r2, #16
 80041a2:	d02e      	beq.n	8004202 <PE_SubStateMachine_VconnSwap+0x1f2>
 80041a4:	e045      	b.n	8004232 <PE_SubStateMachine_VconnSwap+0x222>
 80041a6:	6862      	ldr	r2, [r4, #4]
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	0413      	lsls	r3, r2, #16
 80041ac:	0fdb      	lsrs	r3, r3, #31
 80041ae:	d001      	beq.n	80041b4 <PE_SubStateMachine_VconnSwap+0x1a4>
 80041b0:	229f      	movs	r2, #159	@ 0x9f
 80041b2:	e000      	b.n	80041b6 <PE_SubStateMachine_VconnSwap+0x1a6>
 80041b4:	22a0      	movs	r2, #160	@ 0xa0
 80041b6:	7462      	strb	r2, [r4, #17]
 80041b8:	780a      	ldrb	r2, [r1, #0]
 80041ba:	2a14      	cmp	r2, #20
 80041bc:	d003      	beq.n	80041c6 <PE_SubStateMachine_VconnSwap+0x1b6>
 80041be:	7008      	strb	r0, [r1, #0]
 80041c0:	0020      	movs	r0, r4
 80041c2:	f7fc fcfc 	bl	8000bbe <PE_Clear_RxEvent>
 80041c6:	213f      	movs	r1, #63	@ 0x3f
 80041c8:	e030      	b.n	800422c <PE_SubStateMachine_VconnSwap+0x21c>
 80041ca:	6962      	ldr	r2, [r4, #20]
 80041cc:	4032      	ands	r2, r6
 80041ce:	6162      	str	r2, [r4, #20]
 80041d0:	7467      	strb	r7, [r4, #17]
 80041d2:	2500      	movs	r5, #0
 80041d4:	780a      	ldrb	r2, [r1, #0]
 80041d6:	2a14      	cmp	r2, #20
 80041d8:	d003      	beq.n	80041e2 <PE_SubStateMachine_VconnSwap+0x1d2>
 80041da:	7008      	strb	r0, [r1, #0]
 80041dc:	0020      	movs	r0, r4
 80041de:	f7fc fcee 	bl	8000bbe <PE_Clear_RxEvent>
 80041e2:	2140      	movs	r1, #64	@ 0x40
 80041e4:	e022      	b.n	800422c <PE_SubStateMachine_VconnSwap+0x21c>
 80041e6:	6962      	ldr	r2, [r4, #20]
 80041e8:	4032      	ands	r2, r6
 80041ea:	6162      	str	r2, [r4, #20]
 80041ec:	7467      	strb	r7, [r4, #17]
 80041ee:	2500      	movs	r5, #0
 80041f0:	780a      	ldrb	r2, [r1, #0]
 80041f2:	2a14      	cmp	r2, #20
 80041f4:	d003      	beq.n	80041fe <PE_SubStateMachine_VconnSwap+0x1ee>
 80041f6:	7008      	strb	r0, [r1, #0]
 80041f8:	0020      	movs	r0, r4
 80041fa:	f7fc fce0 	bl	8000bbe <PE_Clear_RxEvent>
 80041fe:	2141      	movs	r1, #65	@ 0x41
 8004200:	e014      	b.n	800422c <PE_SubStateMachine_VconnSwap+0x21c>
 8004202:	6862      	ldr	r2, [r4, #4]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	0413      	lsls	r3, r2, #16
 8004208:	0fdb      	lsrs	r3, r3, #31
 800420a:	d102      	bne.n	8004212 <PE_SubStateMachine_VconnSwap+0x202>
 800420c:	22a4      	movs	r2, #164	@ 0xa4
 800420e:	7462      	strb	r2, [r4, #17]
 8004210:	e004      	b.n	800421c <PE_SubStateMachine_VconnSwap+0x20c>
 8004212:	6962      	ldr	r2, [r4, #20]
 8004214:	4032      	ands	r2, r6
 8004216:	6162      	str	r2, [r4, #20]
 8004218:	7467      	strb	r7, [r4, #17]
 800421a:	2500      	movs	r5, #0
 800421c:	780a      	ldrb	r2, [r1, #0]
 800421e:	2a14      	cmp	r2, #20
 8004220:	d003      	beq.n	800422a <PE_SubStateMachine_VconnSwap+0x21a>
 8004222:	7008      	strb	r0, [r1, #0]
 8004224:	0020      	movs	r0, r4
 8004226:	f7fc fcca 	bl	8000bbe <PE_Clear_RxEvent>
 800422a:	2143      	movs	r1, #67	@ 0x43
 800422c:	7c20      	ldrb	r0, [r4, #16]
 800422e:	f7fc fa5b 	bl	80006e8 <USBPD_PE_Notification>
 8004232:	8be0      	ldrh	r0, [r4, #30]
 8004234:	2180      	movs	r1, #128	@ 0x80
 8004236:	0209      	lsls	r1, r1, #8
 8004238:	4288      	cmp	r0, r1
 800423a:	d117      	bne.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 800423c:	6960      	ldr	r0, [r4, #20]
 800423e:	4006      	ands	r6, r0
 8004240:	6166      	str	r6, [r4, #20]
 8004242:	7467      	strb	r7, [r4, #17]
 8004244:	2500      	movs	r5, #0
 8004246:	211c      	movs	r1, #28
 8004248:	7c20      	ldrb	r0, [r4, #16]
 800424a:	f7fc fa4d 	bl	80006e8 <USBPD_PE_Notification>
 800424e:	e00d      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 8004250:	68a0      	ldr	r0, [r4, #8]
 8004252:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8004254:	2a00      	cmp	r2, #0
 8004256:	d002      	beq.n	800425e <PE_SubStateMachine_VconnSwap+0x24e>
 8004258:	2101      	movs	r1, #1
 800425a:	7c20      	ldrb	r0, [r4, #16]
 800425c:	4790      	blx	r2
 800425e:	6960      	ldr	r0, [r4, #20]
 8004260:	4006      	ands	r6, r0
 8004262:	6166      	str	r6, [r4, #20]
 8004264:	7467      	strb	r7, [r4, #17]
 8004266:	2500      	movs	r5, #0
 8004268:	4813      	ldr	r0, [pc, #76]	@ (80042b8 <.text_16>)
 800426a:	8460      	strh	r0, [r4, #34]	@ 0x22
 800426c:	0028      	movs	r0, r5
 800426e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004270 <PE_ExtRevisionInteroperability_Cable>:
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	000a      	movs	r2, r1
 8004274:	6843      	ldr	r3, [r0, #4]
 8004276:	681c      	ldr	r4, [r3, #0]
 8004278:	2103      	movs	r1, #3
 800427a:	2503      	movs	r5, #3
 800427c:	4025      	ands	r5, r4
 800427e:	42aa      	cmp	r2, r5
 8004280:	d300      	bcc.n	8004284 <PE_ExtRevisionInteroperability_Cable+0x14>
 8004282:	002a      	movs	r2, r5
 8004284:	4d06      	ldr	r5, [pc, #24]	@ (80042a0 <.text_10>)
 8004286:	4025      	ands	r5, r4
 8004288:	0694      	lsls	r4, r2, #26
 800428a:	068a      	lsls	r2, r1, #26
 800428c:	4022      	ands	r2, r4
 800428e:	432a      	orrs	r2, r5
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	0e92      	lsrs	r2, r2, #26
 8004294:	4011      	ands	r1, r2
 8004296:	7c00      	ldrb	r0, [r0, #16]
 8004298:	f001 fb85 	bl	80059a6 <USBPD_PRL_CBL_SetHeaderSpecification>
 800429c:	bd31      	pop	{r0, r4, r5, pc}
	...

080042a0 <.text_10>:
 80042a0:	f3ffffff 	.word	0xf3ffffff

080042a4 <.text_11>:
 80042a4:	ffffefff 	.word	0xffffefff

080042a8 <.text_12>:
 80042a8:	00008096 	.word	0x00008096

080042ac <.text_13>:
 80042ac:	0000f01f 	.word	0x0000f01f

080042b0 <.text_14>:
 80042b0:	00000262 	.word	0x00000262

080042b4 <.text_15>:
 80042b4:	0000801b 	.word	0x0000801b

080042b8 <.text_16>:
 80042b8:	0000802d 	.word	0x0000802d

080042bc <USBPD_PE_SVDM_RequestIdentity>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	000a      	movs	r2, r1
 80042c0:	49aa      	ldr	r1, [pc, #680]	@ (800456c <.text_8>)
 80042c2:	0083      	lsls	r3, r0, #2
 80042c4:	58cb      	ldr	r3, [r1, r3]
 80042c6:	2110      	movs	r1, #16
 80042c8:	2401      	movs	r4, #1
 80042ca:	681d      	ldr	r5, [r3, #0]
 80042cc:	686d      	ldr	r5, [r5, #4]
 80042ce:	0a6d      	lsrs	r5, r5, #9
 80042d0:	4025      	ands	r5, r4
 80042d2:	d004      	beq.n	80042de <USBPD_PE_SVDM_RequestIdentity+0x22>
 80042d4:	68dd      	ldr	r5, [r3, #12]
 80042d6:	2d00      	cmp	r5, #0
 80042d8:	d001      	beq.n	80042de <USBPD_PE_SVDM_RequestIdentity+0x22>
 80042da:	2a02      	cmp	r2, #2
 80042dc:	d101      	bne.n	80042e2 <USBPD_PE_SVDM_RequestIdentity+0x26>
 80042de:	2102      	movs	r1, #2
 80042e0:	e02d      	b.n	800433e <USBPD_PE_SVDM_RequestIdentity+0x82>
 80042e2:	2532      	movs	r5, #50	@ 0x32
 80042e4:	5d5d      	ldrb	r5, [r3, r5]
 80042e6:	2d00      	cmp	r5, #0
 80042e8:	d104      	bne.n	80042f4 <USBPD_PE_SVDM_RequestIdentity+0x38>
 80042ea:	685d      	ldr	r5, [r3, #4]
 80042ec:	682d      	ldr	r5, [r5, #0]
 80042ee:	0b2d      	lsrs	r5, r5, #12
 80042f0:	402c      	ands	r4, r5
 80042f2:	d101      	bne.n	80042f8 <USBPD_PE_SVDM_RequestIdentity+0x3c>
 80042f4:	2103      	movs	r1, #3
 80042f6:	e022      	b.n	800433e <USBPD_PE_SVDM_RequestIdentity+0x82>
 80042f8:	2433      	movs	r4, #51	@ 0x33
 80042fa:	551a      	strb	r2, [r3, r4]
 80042fc:	2507      	movs	r5, #7
 80042fe:	2a00      	cmp	r2, #0
 8004300:	d002      	beq.n	8004308 <USBPD_PE_SVDM_RequestIdentity+0x4c>
 8004302:	2a01      	cmp	r2, #1
 8004304:	d008      	beq.n	8004318 <USBPD_PE_SVDM_RequestIdentity+0x5c>
 8004306:	e01a      	b.n	800433e <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	0a12      	lsrs	r2, r2, #8
 800430e:	4015      	ands	r5, r2
 8004310:	2d03      	cmp	r5, #3
 8004312:	d114      	bne.n	800433e <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004314:	217d      	movs	r1, #125	@ 0x7d
 8004316:	e00c      	b.n	8004332 <USBPD_PE_SVDM_RequestIdentity+0x76>
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	4eab      	ldr	r6, [pc, #684]	@ (80045cc <.text_10>)
 800431e:	4016      	ands	r6, r2
 8004320:	2782      	movs	r7, #130	@ 0x82
 8004322:	007f      	lsls	r7, r7, #1
 8004324:	42be      	cmp	r6, r7
 8004326:	d003      	beq.n	8004330 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8004328:	0a12      	lsrs	r2, r2, #8
 800432a:	4015      	ands	r5, r2
 800432c:	2d03      	cmp	r5, #3
 800432e:	d106      	bne.n	800433e <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004330:	2105      	movs	r1, #5
 8004332:	2232      	movs	r2, #50	@ 0x32
 8004334:	5499      	strb	r1, [r3, r2]
 8004336:	6899      	ldr	r1, [r3, #8]
 8004338:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800433a:	4788      	blx	r1
 800433c:	2100      	movs	r1, #0
 800433e:	0008      	movs	r0, r1
 8004340:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004342 <USBPD_PE_SVDM_RequestSVID>:
 8004342:	b570      	push	{r4, r5, r6, lr}
 8004344:	000a      	movs	r2, r1
 8004346:	4989      	ldr	r1, [pc, #548]	@ (800456c <.text_8>)
 8004348:	0083      	lsls	r3, r0, #2
 800434a:	58cb      	ldr	r3, [r1, r3]
 800434c:	2110      	movs	r1, #16
 800434e:	68dc      	ldr	r4, [r3, #12]
 8004350:	2c00      	cmp	r4, #0
 8004352:	d001      	beq.n	8004358 <USBPD_PE_SVDM_RequestSVID+0x16>
 8004354:	2a02      	cmp	r2, #2
 8004356:	d101      	bne.n	800435c <USBPD_PE_SVDM_RequestSVID+0x1a>
 8004358:	2102      	movs	r1, #2
 800435a:	e020      	b.n	800439e <USBPD_PE_SVDM_RequestSVID+0x5c>
 800435c:	2432      	movs	r4, #50	@ 0x32
 800435e:	5d1c      	ldrb	r4, [r3, r4]
 8004360:	2c00      	cmp	r4, #0
 8004362:	d105      	bne.n	8004370 <USBPD_PE_SVDM_RequestSVID+0x2e>
 8004364:	685c      	ldr	r4, [r3, #4]
 8004366:	6825      	ldr	r5, [r4, #0]
 8004368:	2401      	movs	r4, #1
 800436a:	0b2e      	lsrs	r6, r5, #12
 800436c:	4026      	ands	r6, r4
 800436e:	d101      	bne.n	8004374 <USBPD_PE_SVDM_RequestSVID+0x32>
 8004370:	2103      	movs	r1, #3
 8004372:	e014      	b.n	800439e <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004374:	056d      	lsls	r5, r5, #21
 8004376:	0f6d      	lsrs	r5, r5, #29
 8004378:	2d03      	cmp	r5, #3
 800437a:	d110      	bne.n	800439e <USBPD_PE_SVDM_RequestSVID+0x5c>
 800437c:	2533      	movs	r5, #51	@ 0x33
 800437e:	555a      	strb	r2, [r3, r5]
 8004380:	257f      	movs	r5, #127	@ 0x7f
 8004382:	2632      	movs	r6, #50	@ 0x32
 8004384:	559d      	strb	r5, [r3, r6]
 8004386:	2a00      	cmp	r2, #0
 8004388:	d005      	beq.n	8004396 <USBPD_PE_SVDM_RequestSVID+0x54>
 800438a:	2a01      	cmp	r2, #1
 800438c:	d107      	bne.n	800439e <USBPD_PE_SVDM_RequestSVID+0x5c>
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	0c12      	lsrs	r2, r2, #16
 8004392:	4014      	ands	r4, r2
 8004394:	d003      	beq.n	800439e <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004396:	6899      	ldr	r1, [r3, #8]
 8004398:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800439a:	4788      	blx	r1
 800439c:	2100      	movs	r1, #0
 800439e:	0008      	movs	r0, r1
 80043a0:	bd70      	pop	{r4, r5, r6, pc}

080043a2 <USBPD_PE_SVDM_RequestMode>:
 80043a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a4:	000b      	movs	r3, r1
 80043a6:	4971      	ldr	r1, [pc, #452]	@ (800456c <.text_8>)
 80043a8:	0084      	lsls	r4, r0, #2
 80043aa:	590c      	ldr	r4, [r1, r4]
 80043ac:	2110      	movs	r1, #16
 80043ae:	68e5      	ldr	r5, [r4, #12]
 80043b0:	2d00      	cmp	r5, #0
 80043b2:	d001      	beq.n	80043b8 <USBPD_PE_SVDM_RequestMode+0x16>
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d101      	bne.n	80043bc <USBPD_PE_SVDM_RequestMode+0x1a>
 80043b8:	2102      	movs	r1, #2
 80043ba:	e023      	b.n	8004404 <USBPD_PE_SVDM_RequestMode+0x62>
 80043bc:	2532      	movs	r5, #50	@ 0x32
 80043be:	5d65      	ldrb	r5, [r4, r5]
 80043c0:	2d00      	cmp	r5, #0
 80043c2:	d105      	bne.n	80043d0 <USBPD_PE_SVDM_RequestMode+0x2e>
 80043c4:	6865      	ldr	r5, [r4, #4]
 80043c6:	682e      	ldr	r6, [r5, #0]
 80043c8:	2501      	movs	r5, #1
 80043ca:	0b37      	lsrs	r7, r6, #12
 80043cc:	402f      	ands	r7, r5
 80043ce:	d101      	bne.n	80043d4 <USBPD_PE_SVDM_RequestMode+0x32>
 80043d0:	2103      	movs	r1, #3
 80043d2:	e017      	b.n	8004404 <USBPD_PE_SVDM_RequestMode+0x62>
 80043d4:	0576      	lsls	r6, r6, #21
 80043d6:	0f76      	lsrs	r6, r6, #29
 80043d8:	2e03      	cmp	r6, #3
 80043da:	d113      	bne.n	8004404 <USBPD_PE_SVDM_RequestMode+0x62>
 80043dc:	2633      	movs	r6, #51	@ 0x33
 80043de:	55a3      	strb	r3, [r4, r6]
 80043e0:	2681      	movs	r6, #129	@ 0x81
 80043e2:	2732      	movs	r7, #50	@ 0x32
 80043e4:	55e6      	strb	r6, [r4, r7]
 80043e6:	2696      	movs	r6, #150	@ 0x96
 80043e8:	00b6      	lsls	r6, r6, #2
 80043ea:	53a2      	strh	r2, [r4, r6]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <USBPD_PE_SVDM_RequestMode+0x5a>
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d107      	bne.n	8004404 <USBPD_PE_SVDM_RequestMode+0x62>
 80043f4:	6962      	ldr	r2, [r4, #20]
 80043f6:	0c12      	lsrs	r2, r2, #16
 80043f8:	4015      	ands	r5, r2
 80043fa:	d003      	beq.n	8004404 <USBPD_PE_SVDM_RequestMode+0x62>
 80043fc:	68a1      	ldr	r1, [r4, #8]
 80043fe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004400:	4788      	blx	r1
 8004402:	2100      	movs	r1, #0
 8004404:	0008      	movs	r0, r1
 8004406:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004408 <USBPD_PE_SVDM_RequestModeEnter>:
 8004408:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800440a:	4858      	ldr	r0, [pc, #352]	@ (800456c <.text_8>)
 800440c:	466c      	mov	r4, sp
 800440e:	7824      	ldrb	r4, [r4, #0]
 8004410:	00a4      	lsls	r4, r4, #2
 8004412:	5904      	ldr	r4, [r0, r4]
 8004414:	2010      	movs	r0, #16
 8004416:	68e5      	ldr	r5, [r4, #12]
 8004418:	2d00      	cmp	r5, #0
 800441a:	d101      	bne.n	8004420 <USBPD_PE_SVDM_RequestModeEnter+0x18>
 800441c:	2002      	movs	r0, #2
 800441e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004420:	2532      	movs	r5, #50	@ 0x32
 8004422:	5d65      	ldrb	r5, [r4, r5]
 8004424:	2d00      	cmp	r5, #0
 8004426:	d105      	bne.n	8004434 <USBPD_PE_SVDM_RequestModeEnter+0x2c>
 8004428:	6865      	ldr	r5, [r4, #4]
 800442a:	682e      	ldr	r6, [r5, #0]
 800442c:	2501      	movs	r5, #1
 800442e:	0b37      	lsrs	r7, r6, #12
 8004430:	402f      	ands	r7, r5
 8004432:	d101      	bne.n	8004438 <USBPD_PE_SVDM_RequestModeEnter+0x30>
 8004434:	2003      	movs	r0, #3
 8004436:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004438:	27e1      	movs	r7, #225	@ 0xe1
 800443a:	00ff      	lsls	r7, r7, #3
 800443c:	4037      	ands	r7, r6
 800443e:	26c2      	movs	r6, #194	@ 0xc2
 8004440:	00b6      	lsls	r6, r6, #2
 8004442:	42b7      	cmp	r7, r6
 8004444:	d11e      	bne.n	8004484 <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004446:	2633      	movs	r6, #51	@ 0x33
 8004448:	55a1      	strb	r1, [r4, r6]
 800444a:	2682      	movs	r6, #130	@ 0x82
 800444c:	2732      	movs	r7, #50	@ 0x32
 800444e:	55e6      	strb	r6, [r4, r7]
 8004450:	2696      	movs	r6, #150	@ 0x96
 8004452:	00b6      	lsls	r6, r6, #2
 8004454:	53a2      	strh	r2, [r4, r6]
 8004456:	6966      	ldr	r6, [r4, #20]
 8004458:	4aaf      	ldr	r2, [pc, #700]	@ (8004718 <.text_13>)
 800445a:	4032      	ands	r2, r6
 800445c:	019e      	lsls	r6, r3, #6
 800445e:	23e0      	movs	r3, #224	@ 0xe0
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	4033      	ands	r3, r6
 8004464:	4313      	orrs	r3, r2
 8004466:	6163      	str	r3, [r4, #20]
 8004468:	2900      	cmp	r1, #0
 800446a:	d005      	beq.n	8004478 <USBPD_PE_SVDM_RequestModeEnter+0x70>
 800446c:	2902      	cmp	r1, #2
 800446e:	d000      	beq.n	8004472 <USBPD_PE_SVDM_RequestModeEnter+0x6a>
 8004470:	d208      	bcs.n	8004484 <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004472:	0c19      	lsrs	r1, r3, #16
 8004474:	400d      	ands	r5, r1
 8004476:	d005      	beq.n	8004484 <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004478:	4668      	mov	r0, sp
 800447a:	7800      	ldrb	r0, [r0, #0]
 800447c:	68a1      	ldr	r1, [r4, #8]
 800447e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004480:	4788      	blx	r1
 8004482:	2000      	movs	r0, #0
 8004484:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004486 <USBPD_PE_SVDM_RequestModeExit>:
 8004486:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004488:	4838      	ldr	r0, [pc, #224]	@ (800456c <.text_8>)
 800448a:	466c      	mov	r4, sp
 800448c:	7824      	ldrb	r4, [r4, #0]
 800448e:	00a4      	lsls	r4, r4, #2
 8004490:	5904      	ldr	r4, [r0, r4]
 8004492:	2010      	movs	r0, #16
 8004494:	68e5      	ldr	r5, [r4, #12]
 8004496:	2d00      	cmp	r5, #0
 8004498:	d101      	bne.n	800449e <USBPD_PE_SVDM_RequestModeExit+0x18>
 800449a:	2002      	movs	r0, #2
 800449c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800449e:	2532      	movs	r5, #50	@ 0x32
 80044a0:	5d65      	ldrb	r5, [r4, r5]
 80044a2:	2d00      	cmp	r5, #0
 80044a4:	d105      	bne.n	80044b2 <USBPD_PE_SVDM_RequestModeExit+0x2c>
 80044a6:	6865      	ldr	r5, [r4, #4]
 80044a8:	682e      	ldr	r6, [r5, #0]
 80044aa:	2501      	movs	r5, #1
 80044ac:	0b37      	lsrs	r7, r6, #12
 80044ae:	402f      	ands	r7, r5
 80044b0:	d101      	bne.n	80044b6 <USBPD_PE_SVDM_RequestModeExit+0x30>
 80044b2:	2003      	movs	r0, #3
 80044b4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80044b6:	27e1      	movs	r7, #225	@ 0xe1
 80044b8:	00ff      	lsls	r7, r7, #3
 80044ba:	4037      	ands	r7, r6
 80044bc:	26c2      	movs	r6, #194	@ 0xc2
 80044be:	00b6      	lsls	r6, r6, #2
 80044c0:	42b7      	cmp	r7, r6
 80044c2:	d11e      	bne.n	8004502 <USBPD_PE_SVDM_RequestModeExit+0x7c>
 80044c4:	2633      	movs	r6, #51	@ 0x33
 80044c6:	55a1      	strb	r1, [r4, r6]
 80044c8:	2683      	movs	r6, #131	@ 0x83
 80044ca:	2732      	movs	r7, #50	@ 0x32
 80044cc:	55e6      	strb	r6, [r4, r7]
 80044ce:	2696      	movs	r6, #150	@ 0x96
 80044d0:	00b6      	lsls	r6, r6, #2
 80044d2:	53a2      	strh	r2, [r4, r6]
 80044d4:	6966      	ldr	r6, [r4, #20]
 80044d6:	4a90      	ldr	r2, [pc, #576]	@ (8004718 <.text_13>)
 80044d8:	4032      	ands	r2, r6
 80044da:	019e      	lsls	r6, r3, #6
 80044dc:	23e0      	movs	r3, #224	@ 0xe0
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	4033      	ands	r3, r6
 80044e2:	4313      	orrs	r3, r2
 80044e4:	6163      	str	r3, [r4, #20]
 80044e6:	2900      	cmp	r1, #0
 80044e8:	d005      	beq.n	80044f6 <USBPD_PE_SVDM_RequestModeExit+0x70>
 80044ea:	2902      	cmp	r1, #2
 80044ec:	d000      	beq.n	80044f0 <USBPD_PE_SVDM_RequestModeExit+0x6a>
 80044ee:	d208      	bcs.n	8004502 <USBPD_PE_SVDM_RequestModeExit+0x7c>
 80044f0:	0c19      	lsrs	r1, r3, #16
 80044f2:	400d      	ands	r5, r1
 80044f4:	d005      	beq.n	8004502 <USBPD_PE_SVDM_RequestModeExit+0x7c>
 80044f6:	4668      	mov	r0, sp
 80044f8:	7800      	ldrb	r0, [r0, #0]
 80044fa:	68a1      	ldr	r1, [r4, #8]
 80044fc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80044fe:	4788      	blx	r1
 8004500:	2000      	movs	r0, #0
 8004502:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004504 <USBPD_PE_SVDM_RequestSpecific>:
 8004504:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004506:	4819      	ldr	r0, [pc, #100]	@ (800456c <.text_8>)
 8004508:	466c      	mov	r4, sp
 800450a:	7824      	ldrb	r4, [r4, #0]
 800450c:	00a4      	lsls	r4, r4, #2
 800450e:	5904      	ldr	r4, [r0, r4]
 8004510:	2010      	movs	r0, #16
 8004512:	68e5      	ldr	r5, [r4, #12]
 8004514:	2d00      	cmp	r5, #0
 8004516:	d101      	bne.n	800451c <USBPD_PE_SVDM_RequestSpecific+0x18>
 8004518:	2002      	movs	r0, #2
 800451a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800451c:	2532      	movs	r5, #50	@ 0x32
 800451e:	5d65      	ldrb	r5, [r4, r5]
 8004520:	2d00      	cmp	r5, #0
 8004522:	d105      	bne.n	8004530 <USBPD_PE_SVDM_RequestSpecific+0x2c>
 8004524:	6865      	ldr	r5, [r4, #4]
 8004526:	682d      	ldr	r5, [r5, #0]
 8004528:	2601      	movs	r6, #1
 800452a:	0b2f      	lsrs	r7, r5, #12
 800452c:	4037      	ands	r7, r6
 800452e:	d101      	bne.n	8004534 <USBPD_PE_SVDM_RequestSpecific+0x30>
 8004530:	2003      	movs	r0, #3
 8004532:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004534:	6967      	ldr	r7, [r4, #20]
 8004536:	0c3f      	lsrs	r7, r7, #16
 8004538:	403e      	ands	r6, r7
 800453a:	d101      	bne.n	8004540 <USBPD_PE_SVDM_RequestSpecific+0x3c>
 800453c:	000e      	movs	r6, r1
 800453e:	d113      	bne.n	8004568 <USBPD_PE_SVDM_RequestSpecific+0x64>
 8004540:	056d      	lsls	r5, r5, #21
 8004542:	0f6d      	lsrs	r5, r5, #29
 8004544:	2d03      	cmp	r5, #3
 8004546:	d10f      	bne.n	8004568 <USBPD_PE_SVDM_RequestSpecific+0x64>
 8004548:	2033      	movs	r0, #51	@ 0x33
 800454a:	5421      	strb	r1, [r4, r0]
 800454c:	2085      	movs	r0, #133	@ 0x85
 800454e:	2132      	movs	r1, #50	@ 0x32
 8004550:	5460      	strb	r0, [r4, r1]
 8004552:	2095      	movs	r0, #149	@ 0x95
 8004554:	0080      	lsls	r0, r0, #2
 8004556:	1820      	adds	r0, r4, r0
 8004558:	6002      	str	r2, [r0, #0]
 800455a:	8083      	strh	r3, [r0, #4]
 800455c:	4668      	mov	r0, sp
 800455e:	7800      	ldrb	r0, [r0, #0]
 8004560:	68a1      	ldr	r1, [r4, #8]
 8004562:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004564:	4788      	blx	r1
 8004566:	2000      	movs	r0, #0
 8004568:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

0800456c <.text_8>:
 800456c:	2000027c 	.word	0x2000027c

08004570 <USBPD_PE_SVDM_RequestAttention>:
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	000b      	movs	r3, r1
 8004574:	4969      	ldr	r1, [pc, #420]	@ (800471c <.text_14>)
 8004576:	0084      	lsls	r4, r0, #2
 8004578:	590d      	ldr	r5, [r1, r4]
 800457a:	2110      	movs	r1, #16
 800457c:	68ec      	ldr	r4, [r5, #12]
 800457e:	2c00      	cmp	r4, #0
 8004580:	d001      	beq.n	8004586 <USBPD_PE_SVDM_RequestAttention+0x16>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <USBPD_PE_SVDM_RequestAttention+0x1a>
 8004586:	2102      	movs	r1, #2
 8004588:	e01e      	b.n	80045c8 <USBPD_PE_SVDM_RequestAttention+0x58>
 800458a:	2332      	movs	r3, #50	@ 0x32
 800458c:	5ceb      	ldrb	r3, [r5, r3]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d104      	bne.n	800459c <USBPD_PE_SVDM_RequestAttention+0x2c>
 8004592:	686b      	ldr	r3, [r5, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	04dc      	lsls	r4, r3, #19
 8004598:	0fe4      	lsrs	r4, r4, #31
 800459a:	d101      	bne.n	80045a0 <USBPD_PE_SVDM_RequestAttention+0x30>
 800459c:	2103      	movs	r1, #3
 800459e:	e013      	b.n	80045c8 <USBPD_PE_SVDM_RequestAttention+0x58>
 80045a0:	055b      	lsls	r3, r3, #21
 80045a2:	0f5b      	lsrs	r3, r3, #29
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d10f      	bne.n	80045c8 <USBPD_PE_SVDM_RequestAttention+0x58>
 80045a8:	2400      	movs	r4, #0
 80045aa:	2333      	movs	r3, #51	@ 0x33
 80045ac:	54ec      	strb	r4, [r5, r3]
 80045ae:	2184      	movs	r1, #132	@ 0x84
 80045b0:	2332      	movs	r3, #50	@ 0x32
 80045b2:	54e9      	strb	r1, [r5, r3]
 80045b4:	2195      	movs	r1, #149	@ 0x95
 80045b6:	0089      	lsls	r1, r1, #2
 80045b8:	1869      	adds	r1, r5, r1
 80045ba:	2306      	movs	r3, #6
 80045bc:	600b      	str	r3, [r1, #0]
 80045be:	808a      	strh	r2, [r1, #4]
 80045c0:	68a9      	ldr	r1, [r5, #8]
 80045c2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80045c4:	4788      	blx	r1
 80045c6:	2100      	movs	r1, #0
 80045c8:	0008      	movs	r0, r1
 80045ca:	bd32      	pop	{r1, r4, r5, pc}

080045cc <.text_10>:
 80045cc:	00000704 	.word	0x00000704

080045d0 <USBPD_PE_UVDM_RequestMessage>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	000a      	movs	r2, r1
 80045d4:	4951      	ldr	r1, [pc, #324]	@ (800471c <.text_14>)
 80045d6:	0083      	lsls	r3, r0, #2
 80045d8:	58cb      	ldr	r3, [r1, r3]
 80045da:	2110      	movs	r1, #16
 80045dc:	68dc      	ldr	r4, [r3, #12]
 80045de:	2c00      	cmp	r4, #0
 80045e0:	d101      	bne.n	80045e6 <USBPD_PE_UVDM_RequestMessage+0x16>
 80045e2:	2102      	movs	r1, #2
 80045e4:	e01d      	b.n	8004622 <USBPD_PE_UVDM_RequestMessage+0x52>
 80045e6:	2432      	movs	r4, #50	@ 0x32
 80045e8:	5d1c      	ldrb	r4, [r3, r4]
 80045ea:	2c00      	cmp	r4, #0
 80045ec:	d105      	bne.n	80045fa <USBPD_PE_UVDM_RequestMessage+0x2a>
 80045ee:	685c      	ldr	r4, [r3, #4]
 80045f0:	6824      	ldr	r4, [r4, #0]
 80045f2:	2501      	movs	r5, #1
 80045f4:	0b26      	lsrs	r6, r4, #12
 80045f6:	402e      	ands	r6, r5
 80045f8:	d101      	bne.n	80045fe <USBPD_PE_UVDM_RequestMessage+0x2e>
 80045fa:	2103      	movs	r1, #3
 80045fc:	e011      	b.n	8004622 <USBPD_PE_UVDM_RequestMessage+0x52>
 80045fe:	0be6      	lsrs	r6, r4, #15
 8004600:	4035      	ands	r5, r6
 8004602:	d101      	bne.n	8004608 <USBPD_PE_UVDM_RequestMessage+0x38>
 8004604:	0015      	movs	r5, r2
 8004606:	d10c      	bne.n	8004622 <USBPD_PE_UVDM_RequestMessage+0x52>
 8004608:	0564      	lsls	r4, r4, #21
 800460a:	0f64      	lsrs	r4, r4, #29
 800460c:	2c03      	cmp	r4, #3
 800460e:	d108      	bne.n	8004622 <USBPD_PE_UVDM_RequestMessage+0x52>
 8004610:	2133      	movs	r1, #51	@ 0x33
 8004612:	545a      	strb	r2, [r3, r1]
 8004614:	2186      	movs	r1, #134	@ 0x86
 8004616:	2232      	movs	r2, #50	@ 0x32
 8004618:	5499      	strb	r1, [r3, r2]
 800461a:	6899      	ldr	r1, [r3, #8]
 800461c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800461e:	4788      	blx	r1
 8004620:	2100      	movs	r1, #0
 8004622:	0008      	movs	r0, r1
 8004624:	bd70      	pop	{r4, r5, r6, pc}

08004626 <PE_Receive_SVDM>:
 8004626:	493e      	ldr	r1, [pc, #248]	@ (8004720 <.text_15>)
 8004628:	1842      	adds	r2, r0, r1
 800462a:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 800462c:	0449      	lsls	r1, r1, #17
 800462e:	0f49      	lsrs	r1, r1, #29
 8004630:	1e49      	subs	r1, r1, #1
 8004632:	7611      	strb	r1, [r2, #24]
 8004634:	2131      	movs	r1, #49	@ 0x31
 8004636:	5c41      	ldrb	r1, [r0, r1]
 8004638:	2900      	cmp	r1, #0
 800463a:	d000      	beq.n	800463e <PE_Receive_SVDM+0x18>
 800463c:	4770      	bx	lr
 800463e:	b570      	push	{r4, r5, r6, lr}
 8004640:	2300      	movs	r3, #0
 8004642:	e010      	b.n	8004666 <PE_Receive_SVDM+0x40>
 8004644:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8004646:	009c      	lsls	r4, r3, #2
 8004648:	1909      	adds	r1, r1, r4
 800464a:	798c      	ldrb	r4, [r1, #6]
 800464c:	79cd      	ldrb	r5, [r1, #7]
 800464e:	022d      	lsls	r5, r5, #8
 8004650:	1964      	adds	r4, r4, r5
 8004652:	7a0d      	ldrb	r5, [r1, #8]
 8004654:	042d      	lsls	r5, r5, #16
 8004656:	1964      	adds	r4, r4, r5
 8004658:	7a49      	ldrb	r1, [r1, #9]
 800465a:	0609      	lsls	r1, r1, #24
 800465c:	1861      	adds	r1, r4, r1
 800465e:	009c      	lsls	r4, r3, #2
 8004660:	5111      	str	r1, [r2, r4]
 8004662:	1c5b      	adds	r3, r3, #1
 8004664:	b2db      	uxtb	r3, r3
 8004666:	7e11      	ldrb	r1, [r2, #24]
 8004668:	428b      	cmp	r3, r1
 800466a:	dbeb      	blt.n	8004644 <PE_Receive_SVDM+0x1e>
 800466c:	0004      	movs	r4, r0
 800466e:	2503      	movs	r5, #3
 8004670:	4b2c      	ldr	r3, [pc, #176]	@ (8004724 <.text_16>)
 8004672:	482d      	ldr	r0, [pc, #180]	@ (8004728 <.text_17>)
 8004674:	2694      	movs	r6, #148	@ 0x94
 8004676:	00b6      	lsls	r6, r6, #2
 8004678:	5da6      	ldrb	r6, [r4, r6]
 800467a:	06f6      	lsls	r6, r6, #27
 800467c:	0ef6      	lsrs	r6, r6, #27
 800467e:	1e76      	subs	r6, r6, #1
 8004680:	d00d      	beq.n	800469e <PE_Receive_SVDM+0x78>
 8004682:	1e76      	subs	r6, r6, #1
 8004684:	d022      	beq.n	80046cc <PE_Receive_SVDM+0xa6>
 8004686:	1e76      	subs	r6, r6, #1
 8004688:	d025      	beq.n	80046d6 <PE_Receive_SVDM+0xb0>
 800468a:	1e76      	subs	r6, r6, #1
 800468c:	d028      	beq.n	80046e0 <PE_Receive_SVDM+0xba>
 800468e:	1e76      	subs	r6, r6, #1
 8004690:	d02b      	beq.n	80046ea <PE_Receive_SVDM+0xc4>
 8004692:	1e76      	subs	r6, r6, #1
 8004694:	d02e      	beq.n	80046f4 <PE_Receive_SVDM+0xce>
 8004696:	3e0a      	subs	r6, #10
 8004698:	2e0f      	cmp	r6, #15
 800469a:	d937      	bls.n	800470c <PE_Receive_SVDM+0xe6>
 800469c:	bd70      	pop	{r4, r5, r6, pc}
 800469e:	2150      	movs	r1, #80	@ 0x50
 80046a0:	7721      	strb	r1, [r4, #28]
 80046a2:	6861      	ldr	r1, [r4, #4]
 80046a4:	680a      	ldr	r2, [r1, #0]
 80046a6:	0693      	lsls	r3, r2, #26
 80046a8:	0fdb      	lsrs	r3, r3, #31
 80046aa:	2694      	movs	r6, #148	@ 0x94
 80046ac:	00b6      	lsls	r6, r6, #2
 80046ae:	59a6      	ldr	r6, [r4, r6]
 80046b0:	0b76      	lsrs	r6, r6, #13
 80046b2:	4035      	ands	r5, r6
 80046b4:	429d      	cmp	r5, r3
 80046b6:	da00      	bge.n	80046ba <PE_Receive_SVDM+0x94>
 80046b8:	002b      	movs	r3, r5
 80046ba:	2520      	movs	r5, #32
 80046bc:	43aa      	bics	r2, r5
 80046be:	015b      	lsls	r3, r3, #5
 80046c0:	402b      	ands	r3, r5
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
 80046c6:	83e0      	strh	r0, [r4, #30]
 80046c8:	2075      	movs	r0, #117	@ 0x75
 80046ca:	e023      	b.n	8004714 <PE_Receive_SVDM+0xee>
 80046cc:	2152      	movs	r1, #82	@ 0x52
 80046ce:	7721      	strb	r1, [r4, #28]
 80046d0:	83e0      	strh	r0, [r4, #30]
 80046d2:	2076      	movs	r0, #118	@ 0x76
 80046d4:	e01e      	b.n	8004714 <PE_Receive_SVDM+0xee>
 80046d6:	2153      	movs	r1, #83	@ 0x53
 80046d8:	7721      	strb	r1, [r4, #28]
 80046da:	83e0      	strh	r0, [r4, #30]
 80046dc:	2078      	movs	r0, #120	@ 0x78
 80046de:	e019      	b.n	8004714 <PE_Receive_SVDM+0xee>
 80046e0:	2054      	movs	r0, #84	@ 0x54
 80046e2:	7720      	strb	r0, [r4, #28]
 80046e4:	83e3      	strh	r3, [r4, #30]
 80046e6:	2079      	movs	r0, #121	@ 0x79
 80046e8:	e014      	b.n	8004714 <PE_Receive_SVDM+0xee>
 80046ea:	2055      	movs	r0, #85	@ 0x55
 80046ec:	7720      	strb	r0, [r4, #28]
 80046ee:	83e3      	strh	r3, [r4, #30]
 80046f0:	207a      	movs	r0, #122	@ 0x7a
 80046f2:	e00f      	b.n	8004714 <PE_Receive_SVDM+0xee>
 80046f4:	68e0      	ldr	r0, [r4, #12]
 80046f6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <PE_Receive_SVDM+0xe2>
 80046fc:	2900      	cmp	r1, #0
 80046fe:	d000      	beq.n	8004702 <PE_Receive_SVDM+0xdc>
 8004700:	2101      	movs	r1, #1
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	7c20      	ldrb	r0, [r4, #16]
 8004706:	4798      	blx	r3
 8004708:	7465      	strb	r5, [r4, #17]
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	215a      	movs	r1, #90	@ 0x5a
 800470e:	7721      	strb	r1, [r4, #28]
 8004710:	83e0      	strh	r0, [r4, #30]
 8004712:	207b      	movs	r0, #123	@ 0x7b
 8004714:	7460      	strb	r0, [r4, #17]
 8004716:	bd70      	pop	{r4, r5, r6, pc}

08004718 <.text_13>:
 8004718:	fffffe3f 	.word	0xfffffe3f

0800471c <.text_14>:
 800471c:	2000027c 	.word	0x2000027c

08004720 <.text_15>:
 8004720:	00000494 	.word	0x00000494

08004724 <.text_16>:
 8004724:	00008019 	.word	0x00008019

08004728 <.text_17>:
 8004728:	0000800f 	.word	0x0000800f

0800472c <PE_StateMachine_VDM>:
 800472c:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 800472e:	b09c      	sub	sp, #112	@ 0x70
 8004730:	0005      	movs	r5, r0
 8004732:	2002      	movs	r0, #2
 8004734:	9004      	str	r0, [sp, #16]
 8004736:	7c6a      	ldrb	r2, [r5, #17]
 8004738:	0010      	movs	r0, r2
 800473a:	3875      	subs	r0, #117	@ 0x75
 800473c:	2807      	cmp	r0, #7
 800473e:	d206      	bcs.n	800474e <__iar_annotation$$branch+0x4>
 8004740:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8004742:	7800      	ldrb	r0, [r0, #0]
 8004744:	2814      	cmp	r0, #20
 8004746:	d002      	beq.n	800474e <__iar_annotation$$branch+0x4>
 8004748:	2002      	movs	r0, #2

0800474a <__iar_annotation$$branch>:
 800474a:	f000 febc 	bl	80054c6 <__iar_annotation$$branch+0xce4>
 800474e:	2094      	movs	r0, #148	@ 0x94
 8004750:	0080      	lsls	r0, r0, #2
 8004752:	182c      	adds	r4, r5, r0
 8004754:	210b      	movs	r1, #11
 8004756:	271e      	movs	r7, #30
 8004758:	201f      	movs	r0, #31
 800475a:	43c0      	mvns	r0, r0
 800475c:	26c0      	movs	r6, #192	@ 0xc0
 800475e:	43f6      	mvns	r6, r6
 8004760:	2a75      	cmp	r2, #117	@ 0x75
 8004762:	d041      	beq.n	80047e8 <__iar_annotation$$branch+0x6>
 8004764:	2a76      	cmp	r2, #118	@ 0x76
 8004766:	d100      	bne.n	800476a <__iar_annotation$$branch+0x20>
 8004768:	e0bb      	b.n	80048e2 <__iar_annotation$$branch+0x100>
 800476a:	2a77      	cmp	r2, #119	@ 0x77
 800476c:	d100      	bne.n	8004770 <__iar_annotation$$branch+0x26>
 800476e:	e144      	b.n	80049fa <__iar_annotation$$branch+0x218>
 8004770:	2a78      	cmp	r2, #120	@ 0x78
 8004772:	d100      	bne.n	8004776 <__iar_annotation$$branch+0x2c>
 8004774:	e1b4      	b.n	8004ae0 <__iar_annotation$$branch+0x2fe>
 8004776:	2a79      	cmp	r2, #121	@ 0x79
 8004778:	d100      	bne.n	800477c <__iar_annotation$$branch+0x32>
 800477a:	e216      	b.n	8004baa <__iar_annotation$$branch+0x3c8>
 800477c:	2a7a      	cmp	r2, #122	@ 0x7a
 800477e:	d100      	bne.n	8004782 <__iar_annotation$$branch+0x38>
 8004780:	e24b      	b.n	8004c1a <__iar_annotation$$branch+0x438>
 8004782:	2a7b      	cmp	r2, #123	@ 0x7b
 8004784:	d100      	bne.n	8004788 <__iar_annotation$$branch+0x3e>
 8004786:	e292      	b.n	8004cae <__iar_annotation$$branch+0x4cc>
 8004788:	2a7d      	cmp	r2, #125	@ 0x7d
 800478a:	d100      	bne.n	800478e <__iar_annotation$$branch+0x44>
 800478c:	e2e0      	b.n	8004d50 <__iar_annotation$$branch+0x56e>
 800478e:	2a7f      	cmp	r2, #127	@ 0x7f
 8004790:	d100      	bne.n	8004794 <__iar_annotation$$branch+0x4a>
 8004792:	e352      	b.n	8004e3a <__iar_annotation$$branch+0x658>
 8004794:	2a81      	cmp	r2, #129	@ 0x81
 8004796:	d100      	bne.n	800479a <__iar_annotation$$branch+0x50>
 8004798:	e3c2      	b.n	8004f20 <__iar_annotation$$branch+0x73e>
 800479a:	2a82      	cmp	r2, #130	@ 0x82
 800479c:	d101      	bne.n	80047a2 <__iar_annotation$$branch+0x4>

0800479e <__iar_annotation$$branch>:
 800479e:	f000 fc3b 	bl	8005018 <__iar_annotation$$branch+0x836>
 80047a2:	2a83      	cmp	r2, #131	@ 0x83
 80047a4:	d101      	bne.n	80047aa <__iar_annotation$$branch+0x4>

080047a6 <__iar_annotation$$branch>:
 80047a6:	f000 fcc9 	bl	800513c <__iar_annotation$$branch+0x95a>
 80047aa:	2a84      	cmp	r2, #132	@ 0x84
 80047ac:	d101      	bne.n	80047b2 <__iar_annotation$$branch+0x4>

080047ae <__iar_annotation$$branch>:
 80047ae:	f000 fe38 	bl	8005422 <__iar_annotation$$branch+0xc40>
 80047b2:	2a85      	cmp	r2, #133	@ 0x85
 80047b4:	d101      	bne.n	80047ba <__iar_annotation$$branch+0x4>

080047b6 <__iar_annotation$$branch>:
 80047b6:	f000 fd5d 	bl	8005274 <__iar_annotation$$branch+0xa92>
 80047ba:	2a87      	cmp	r2, #135	@ 0x87
 80047bc:	d100      	bne.n	80047c0 <__iar_annotation$$branch+0xa>
 80047be:	e2fc      	b.n	8004dba <__iar_annotation$$branch+0x5d8>
 80047c0:	2a89      	cmp	r2, #137	@ 0x89
 80047c2:	d100      	bne.n	80047c6 <__iar_annotation$$branch+0x10>
 80047c4:	e375      	b.n	8004eb2 <__iar_annotation$$branch+0x6d0>
 80047c6:	2a8b      	cmp	r2, #139	@ 0x8b
 80047c8:	d101      	bne.n	80047ce <__iar_annotation$$branch+0x4>

080047ca <__iar_annotation$$branch>:
 80047ca:	f000 fbe4 	bl	8004f96 <__iar_annotation$$branch+0x7b4>
 80047ce:	2a8c      	cmp	r2, #140	@ 0x8c
 80047d0:	d101      	bne.n	80047d6 <__iar_annotation$$branch+0x4>

080047d2 <__iar_annotation$$branch>:
 80047d2:	f000 fc63 	bl	800509c <__iar_annotation$$branch+0x8ba>
 80047d6:	2a8d      	cmp	r2, #141	@ 0x8d
 80047d8:	d101      	bne.n	80047de <__iar_annotation$$branch+0x4>

080047da <__iar_annotation$$branch>:
 80047da:	f000 fcf7 	bl	80051cc <__iar_annotation$$branch+0x9ea>
 80047de:	2a8f      	cmp	r2, #143	@ 0x8f
 80047e0:	d101      	bne.n	80047e6 <__iar_annotation$$branch+0x4>

080047e2 <__iar_annotation$$branch>:
 80047e2:	f000 fda5 	bl	8005330 <__iar_annotation$$branch+0xb4e>
 80047e6:	e2b2      	b.n	8004d4e <__iar_annotation$$branch+0x56c>
 80047e8:	2201      	movs	r2, #1
 80047ea:	9203      	str	r2, [sp, #12]
 80047ec:	03d3      	lsls	r3, r2, #15
 80047ee:	8bea      	ldrh	r2, [r5, #30]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d100      	bne.n	80047f6 <__iar_annotation$$branch+0x14>
 80047f4:	e262      	b.n	8004cbc <__iar_annotation$$branch+0x4da>
 80047f6:	2701      	movs	r7, #1
 80047f8:	6822      	ldr	r2, [r4, #0]
 80047fa:	4010      	ands	r0, r2
 80047fc:	4338      	orrs	r0, r7
 80047fe:	6020      	str	r0, [r4, #0]
 8004800:	4303      	orrs	r3, r0
 8004802:	6023      	str	r3, [r4, #0]
 8004804:	6868      	ldr	r0, [r5, #4]
 8004806:	6800      	ldr	r0, [r0, #0]
 8004808:	0942      	lsrs	r2, r0, #5
 800480a:	403a      	ands	r2, r7
 800480c:	48c9      	ldr	r0, [pc, #804]	@ (8004b34 <__iar_annotation$$branch+0x352>)
 800480e:	4018      	ands	r0, r3
 8004810:	0352      	lsls	r2, r2, #13
 8004812:	4302      	orrs	r2, r0
 8004814:	6022      	str	r2, [r4, #0]
 8004816:	6868      	ldr	r0, [r5, #4]
 8004818:	6800      	ldr	r0, [r0, #0]
 800481a:	4001      	ands	r1, r0
 800481c:	2909      	cmp	r1, #9
 800481e:	d051      	beq.n	80048c4 <__iar_annotation$$branch+0xe2>
 8004820:	68e8      	ldr	r0, [r5, #12]
 8004822:	2800      	cmp	r0, #0
 8004824:	d04e      	beq.n	80048c4 <__iar_annotation$$branch+0xe2>
 8004826:	6803      	ldr	r3, [r0, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d04b      	beq.n	80048c4 <__iar_annotation$$branch+0xe2>
 800482c:	0c10      	lsrs	r0, r2, #16
 800482e:	21ff      	movs	r1, #255	@ 0xff
 8004830:	0209      	lsls	r1, r1, #8
 8004832:	4288      	cmp	r0, r1
 8004834:	d146      	bne.n	80048c4 <__iar_annotation$$branch+0xe2>
 8004836:	a90b      	add	r1, sp, #44	@ 0x2c
 8004838:	7c28      	ldrb	r0, [r5, #16]
 800483a:	4798      	blx	r3
 800483c:	2803      	cmp	r0, #3
 800483e:	d002      	beq.n	8004846 <__iar_annotation$$branch+0x64>
 8004840:	280f      	cmp	r0, #15
 8004842:	d005      	beq.n	8004850 <__iar_annotation$$branch+0x6e>
 8004844:	e03e      	b.n	80048c4 <__iar_annotation$$branch+0xe2>
 8004846:	6820      	ldr	r0, [r4, #0]
 8004848:	21c0      	movs	r1, #192	@ 0xc0
 800484a:	4301      	orrs	r1, r0
 800484c:	6021      	str	r1, [r4, #0]
 800484e:	e03e      	b.n	80048ce <__iar_annotation$$branch+0xec>
 8004850:	6820      	ldr	r0, [r4, #0]
 8004852:	4006      	ands	r6, r0
 8004854:	2040      	movs	r0, #64	@ 0x40
 8004856:	4330      	orrs	r0, r6
 8004858:	6020      	str	r0, [r4, #0]
 800485a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800485c:	9015      	str	r0, [sp, #84]	@ 0x54
 800485e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004860:	9016      	str	r0, [sp, #88]	@ 0x58
 8004862:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004864:	9017      	str	r0, [sp, #92]	@ 0x5c
 8004866:	2004      	movs	r0, #4
 8004868:	9003      	str	r0, [sp, #12]
 800486a:	a80b      	add	r0, sp, #44	@ 0x2c
 800486c:	2120      	movs	r1, #32
 800486e:	5c40      	ldrb	r0, [r0, r1]
 8004870:	0841      	lsrs	r1, r0, #1
 8004872:	4239      	tst	r1, r7
 8004874:	d003      	beq.n	800487e <__iar_annotation$$branch+0x9c>
 8004876:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004878:	9118      	str	r1, [sp, #96]	@ 0x60
 800487a:	2105      	movs	r1, #5
 800487c:	9103      	str	r1, [sp, #12]
 800487e:	08c2      	lsrs	r2, r0, #3
 8004880:	2101      	movs	r1, #1
 8004882:	4011      	ands	r1, r2
 8004884:	d008      	beq.n	8004898 <__iar_annotation$$branch+0xb6>
 8004886:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8004888:	aa14      	add	r2, sp, #80	@ 0x50
 800488a:	9b03      	ldr	r3, [sp, #12]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	50d6      	str	r6, [r2, r3]
 8004890:	9a03      	ldr	r2, [sp, #12]
 8004892:	1c52      	adds	r2, r2, #1
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	9203      	str	r2, [sp, #12]
 8004898:	0900      	lsrs	r0, r0, #4
 800489a:	4238      	tst	r0, r7
 800489c:	d017      	beq.n	80048ce <__iar_annotation$$branch+0xec>
 800489e:	2900      	cmp	r1, #0
 80048a0:	d007      	beq.n	80048b2 <__iar_annotation$$branch+0xd0>
 80048a2:	2000      	movs	r0, #0
 80048a4:	a914      	add	r1, sp, #80	@ 0x50
 80048a6:	9a03      	ldr	r2, [sp, #12]
 80048a8:	0092      	lsls	r2, r2, #2
 80048aa:	5088      	str	r0, [r1, r2]
 80048ac:	9803      	ldr	r0, [sp, #12]
 80048ae:	1c40      	adds	r0, r0, #1
 80048b0:	9003      	str	r0, [sp, #12]
 80048b2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80048b4:	a914      	add	r1, sp, #80	@ 0x50
 80048b6:	9a03      	ldr	r2, [sp, #12]
 80048b8:	0092      	lsls	r2, r2, #2
 80048ba:	5088      	str	r0, [r1, r2]
 80048bc:	9803      	ldr	r0, [sp, #12]
 80048be:	1c40      	adds	r0, r0, #1
 80048c0:	9003      	str	r0, [sp, #12]
 80048c2:	e004      	b.n	80048ce <__iar_annotation$$branch+0xec>
 80048c4:	6820      	ldr	r0, [r4, #0]
 80048c6:	4006      	ands	r6, r0
 80048c8:	2080      	movs	r0, #128	@ 0x80
 80048ca:	4330      	orrs	r0, r6
 80048cc:	6020      	str	r0, [r4, #0]
 80048ce:	6820      	ldr	r0, [r4, #0]
 80048d0:	9014      	str	r0, [sp, #80]	@ 0x50
 80048d2:	2000      	movs	r0, #0
 80048d4:	9002      	str	r0, [sp, #8]
 80048d6:	2003      	movs	r0, #3
 80048d8:	9001      	str	r0, [sp, #4]
 80048da:	9803      	ldr	r0, [sp, #12]
 80048dc:	9000      	str	r0, [sp, #0]
 80048de:	ab14      	add	r3, sp, #80	@ 0x50
 80048e0:	e22f      	b.n	8004d42 <__iar_annotation$$branch+0x560>
 80048e2:	2201      	movs	r2, #1
 80048e4:	466b      	mov	r3, sp
 80048e6:	731a      	strb	r2, [r3, #12]
 80048e8:	03d2      	lsls	r2, r2, #15
 80048ea:	8beb      	ldrh	r3, [r5, #30]
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d100      	bne.n	80048f2 <__iar_annotation$$branch+0x110>
 80048f0:	e1e4      	b.n	8004cbc <__iar_annotation$$branch+0x4da>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	4018      	ands	r0, r3
 80048f6:	2302      	movs	r3, #2
 80048f8:	4303      	orrs	r3, r0
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	431a      	orrs	r2, r3
 80048fe:	6022      	str	r2, [r4, #0]
 8004900:	6868      	ldr	r0, [r5, #4]
 8004902:	6803      	ldr	r3, [r0, #0]
 8004904:	0698      	lsls	r0, r3, #26
 8004906:	0fc0      	lsrs	r0, r0, #31
 8004908:	4b8a      	ldr	r3, [pc, #552]	@ (8004b34 <__iar_annotation$$branch+0x352>)
 800490a:	4013      	ands	r3, r2
 800490c:	0340      	lsls	r0, r0, #13
 800490e:	4318      	orrs	r0, r3
 8004910:	6020      	str	r0, [r4, #0]
 8004912:	686a      	ldr	r2, [r5, #4]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	4011      	ands	r1, r2
 8004918:	2909      	cmp	r1, #9
 800491a:	d05f      	beq.n	80049dc <__iar_annotation$$branch+0x1fa>
 800491c:	68e9      	ldr	r1, [r5, #12]
 800491e:	684b      	ldr	r3, [r1, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d05b      	beq.n	80049dc <__iar_annotation$$branch+0x1fa>
 8004924:	0c00      	lsrs	r0, r0, #16
 8004926:	21ff      	movs	r1, #255	@ 0xff
 8004928:	0209      	lsls	r1, r1, #8
 800492a:	4288      	cmp	r0, r1
 800492c:	d156      	bne.n	80049dc <__iar_annotation$$branch+0x1fa>
 800492e:	4882      	ldr	r0, [pc, #520]	@ (8004b38 <__iar_annotation$$branch+0x356>)
 8004930:	182a      	adds	r2, r5, r0
 8004932:	a905      	add	r1, sp, #20
 8004934:	7c28      	ldrb	r0, [r5, #16]
 8004936:	4798      	blx	r3
 8004938:	2803      	cmp	r0, #3
 800493a:	d04b      	beq.n	80049d4 <__iar_annotation$$branch+0x1f2>
 800493c:	280f      	cmp	r0, #15
 800493e:	d14d      	bne.n	80049dc <__iar_annotation$$branch+0x1fa>
 8004940:	6820      	ldr	r0, [r4, #0]
 8004942:	4006      	ands	r6, r0
 8004944:	2040      	movs	r0, #64	@ 0x40
 8004946:	4330      	orrs	r0, r6
 8004948:	6020      	str	r0, [r4, #0]
 800494a:	211c      	movs	r1, #28
 800494c:	a806      	add	r0, sp, #24
 800494e:	f01a fabe 	bl	801eece <__aeabi_memclr>
 8004952:	2300      	movs	r3, #0
 8004954:	2200      	movs	r2, #0
 8004956:	a806      	add	r0, sp, #24
 8004958:	9000      	str	r0, [sp, #0]
 800495a:	e014      	b.n	8004986 <__iar_annotation$$branch+0x1a4>
 800495c:	005f      	lsls	r7, r3, #1
 800495e:	5bf6      	ldrh	r6, [r6, r7]
 8004960:	0436      	lsls	r6, r6, #16
 8004962:	430e      	orrs	r6, r1
 8004964:	6006      	str	r6, [r0, #0]
 8004966:	e00d      	b.n	8004984 <__iar_annotation$$branch+0x1a2>
 8004968:	1c52      	adds	r2, r2, #1
 800496a:	9800      	ldr	r0, [sp, #0]
 800496c:	1d00      	adds	r0, r0, #4
 800496e:	0859      	lsrs	r1, r3, #1
 8004970:	0089      	lsls	r1, r1, #2
 8004972:	1840      	adds	r0, r0, r1
 8004974:	07d9      	lsls	r1, r3, #31
 8004976:	6801      	ldr	r1, [r0, #0]
 8004978:	9e05      	ldr	r6, [sp, #20]
 800497a:	d5ef      	bpl.n	800495c <__iar_annotation$$branch+0x17a>
 800497c:	005f      	lsls	r7, r3, #1
 800497e:	5bf6      	ldrh	r6, [r6, r7]
 8004980:	4331      	orrs	r1, r6
 8004982:	6001      	str	r1, [r0, #0]
 8004984:	1c5b      	adds	r3, r3, #1
 8004986:	486d      	ldr	r0, [pc, #436]	@ (8004b3c <__iar_annotation$$branch+0x35a>)
 8004988:	1828      	adds	r0, r5, r0
 800498a:	7840      	ldrb	r0, [r0, #1]
 800498c:	4283      	cmp	r3, r0
 800498e:	d201      	bcs.n	8004994 <__iar_annotation$$branch+0x1b2>
 8004990:	2b0c      	cmp	r3, #12
 8004992:	d3e9      	bcc.n	8004968 <__iar_annotation$$branch+0x186>
 8004994:	1a80      	subs	r0, r0, r2
 8004996:	4969      	ldr	r1, [pc, #420]	@ (8004b3c <__iar_annotation$$branch+0x35a>)
 8004998:	1869      	adds	r1, r5, r1
 800499a:	7048      	strb	r0, [r1, #1]
 800499c:	b2d0      	uxtb	r0, r2
 800499e:	280c      	cmp	r0, #12
 80049a0:	d111      	bne.n	80049c6 <__iar_annotation$$branch+0x1e4>
 80049a2:	6820      	ldr	r0, [r4, #0]
 80049a4:	9006      	str	r0, [sp, #24]
 80049a6:	2000      	movs	r0, #0
 80049a8:	9002      	str	r0, [sp, #8]
 80049aa:	2077      	movs	r0, #119	@ 0x77
 80049ac:	9001      	str	r0, [sp, #4]
 80049ae:	2007      	movs	r0, #7
 80049b0:	9000      	str	r0, [sp, #0]
 80049b2:	ab06      	add	r3, sp, #24
 80049b4:	220f      	movs	r2, #15
 80049b6:	2031      	movs	r0, #49	@ 0x31
 80049b8:	5c29      	ldrb	r1, [r5, r0]
 80049ba:	0028      	movs	r0, r5
 80049bc:	f7fc ff07 	bl	80017ce <PE_Send_DataMessage>
 80049c0:	485f      	ldr	r0, [pc, #380]	@ (8004b40 <__iar_annotation$$branch+0x35e>)
 80049c2:	83e8      	strh	r0, [r5, #30]
 80049c4:	e1c3      	b.n	8004d4e <__iar_annotation$$branch+0x56c>
 80049c6:	0612      	lsls	r2, r2, #24
 80049c8:	0e50      	lsrs	r0, r2, #25
 80049ca:	1c80      	adds	r0, r0, #2
 80049cc:	4669      	mov	r1, sp
 80049ce:	7308      	strb	r0, [r1, #12]
 80049d0:	6820      	ldr	r0, [r4, #0]
 80049d2:	e008      	b.n	80049e6 <__iar_annotation$$branch+0x204>
 80049d4:	6821      	ldr	r1, [r4, #0]
 80049d6:	20c0      	movs	r0, #192	@ 0xc0
 80049d8:	4308      	orrs	r0, r1
 80049da:	e003      	b.n	80049e4 <__iar_annotation$$branch+0x202>
 80049dc:	6820      	ldr	r0, [r4, #0]
 80049de:	4006      	ands	r6, r0
 80049e0:	2080      	movs	r0, #128	@ 0x80
 80049e2:	4330      	orrs	r0, r6
 80049e4:	6020      	str	r0, [r4, #0]
 80049e6:	9006      	str	r0, [sp, #24]
 80049e8:	2000      	movs	r0, #0
 80049ea:	9002      	str	r0, [sp, #8]
 80049ec:	2003      	movs	r0, #3
 80049ee:	9001      	str	r0, [sp, #4]
 80049f0:	4668      	mov	r0, sp
 80049f2:	7b00      	ldrb	r0, [r0, #12]
 80049f4:	9000      	str	r0, [sp, #0]
 80049f6:	ab06      	add	r3, sp, #24
 80049f8:	e1a3      	b.n	8004d42 <__iar_annotation$$branch+0x560>
 80049fa:	2180      	movs	r1, #128	@ 0x80
 80049fc:	0209      	lsls	r1, r1, #8
 80049fe:	8bea      	ldrh	r2, [r5, #30]
 8004a00:	428a      	cmp	r2, r1
 8004a02:	d100      	bne.n	8004a06 <__iar_annotation$$branch+0x224>
 8004a04:	e15a      	b.n	8004cbc <__iar_annotation$$branch+0x4da>
 8004a06:	6822      	ldr	r2, [r4, #0]
 8004a08:	4010      	ands	r0, r2
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	4302      	orrs	r2, r0
 8004a0e:	6022      	str	r2, [r4, #0]
 8004a10:	b292      	uxth	r2, r2
 8004a12:	20ff      	movs	r0, #255	@ 0xff
 8004a14:	0600      	lsls	r0, r0, #24
 8004a16:	4310      	orrs	r0, r2
 8004a18:	6020      	str	r0, [r4, #0]
 8004a1a:	4301      	orrs	r1, r0
 8004a1c:	6021      	str	r1, [r4, #0]
 8004a1e:	2701      	movs	r7, #1
 8004a20:	6868      	ldr	r0, [r5, #4]
 8004a22:	6800      	ldr	r0, [r0, #0]
 8004a24:	0940      	lsrs	r0, r0, #5
 8004a26:	4038      	ands	r0, r7
 8004a28:	4a42      	ldr	r2, [pc, #264]	@ (8004b34 <__iar_annotation$$branch+0x352>)
 8004a2a:	400a      	ands	r2, r1
 8004a2c:	0340      	lsls	r0, r0, #13
 8004a2e:	4310      	orrs	r0, r2
 8004a30:	6020      	str	r0, [r4, #0]
 8004a32:	4006      	ands	r6, r0
 8004a34:	2040      	movs	r0, #64	@ 0x40
 8004a36:	4330      	orrs	r0, r6
 8004a38:	6020      	str	r0, [r4, #0]
 8004a3a:	aa03      	add	r2, sp, #12
 8004a3c:	a905      	add	r1, sp, #20
 8004a3e:	7c28      	ldrb	r0, [r5, #16]
 8004a40:	68eb      	ldr	r3, [r5, #12]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	4798      	blx	r3
 8004a46:	211c      	movs	r1, #28
 8004a48:	a806      	add	r0, sp, #24
 8004a4a:	f01a fa40 	bl	801eece <__aeabi_memclr>
 8004a4e:	2100      	movs	r1, #0
 8004a50:	2200      	movs	r2, #0
 8004a52:	a806      	add	r0, sp, #24
 8004a54:	002c      	movs	r4, r5
 8004a56:	e016      	b.n	8004a86 <__iar_annotation$$branch+0x2a4>
 8004a58:	004d      	lsls	r5, r1, #1
 8004a5a:	5b75      	ldrh	r5, [r6, r5]
 8004a5c:	042d      	lsls	r5, r5, #16
 8004a5e:	4666      	mov	r6, ip
 8004a60:	4335      	orrs	r5, r6
 8004a62:	601d      	str	r5, [r3, #0]
 8004a64:	e00e      	b.n	8004a84 <__iar_annotation$$branch+0x2a2>
 8004a66:	1c52      	adds	r2, r2, #1
 8004a68:	1d03      	adds	r3, r0, #4
 8004a6a:	084d      	lsrs	r5, r1, #1
 8004a6c:	00ad      	lsls	r5, r5, #2
 8004a6e:	195b      	adds	r3, r3, r5
 8004a70:	4239      	tst	r1, r7
 8004a72:	681e      	ldr	r6, [r3, #0]
 8004a74:	46b4      	mov	ip, r6
 8004a76:	9e05      	ldr	r6, [sp, #20]
 8004a78:	d0ee      	beq.n	8004a58 <__iar_annotation$$branch+0x276>
 8004a7a:	004d      	lsls	r5, r1, #1
 8004a7c:	5b75      	ldrh	r5, [r6, r5]
 8004a7e:	4666      	mov	r6, ip
 8004a80:	432e      	orrs	r6, r5
 8004a82:	601e      	str	r6, [r3, #0]
 8004a84:	1c49      	adds	r1, r1, #1
 8004a86:	4b2d      	ldr	r3, [pc, #180]	@ (8004b3c <__iar_annotation$$branch+0x35a>)
 8004a88:	18e3      	adds	r3, r4, r3
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	4299      	cmp	r1, r3
 8004a8e:	d201      	bcs.n	8004a94 <__iar_annotation$$branch+0x2b2>
 8004a90:	290c      	cmp	r1, #12
 8004a92:	d3e8      	bcc.n	8004a66 <__iar_annotation$$branch+0x284>
 8004a94:	1a98      	subs	r0, r3, r2
 8004a96:	4929      	ldr	r1, [pc, #164]	@ (8004b3c <__iar_annotation$$branch+0x35a>)
 8004a98:	1861      	adds	r1, r4, r1
 8004a9a:	7048      	strb	r0, [r1, #1]
 8004a9c:	b2d0      	uxtb	r0, r2
 8004a9e:	280c      	cmp	r0, #12
 8004aa0:	d10f      	bne.n	8004ac2 <__iar_annotation$$branch+0x2e0>
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	9002      	str	r0, [sp, #8]
 8004aa6:	2077      	movs	r0, #119	@ 0x77
 8004aa8:	9001      	str	r0, [sp, #4]
 8004aaa:	2007      	movs	r0, #7
 8004aac:	9000      	str	r0, [sp, #0]
 8004aae:	ab06      	add	r3, sp, #24
 8004ab0:	220f      	movs	r2, #15
 8004ab2:	2031      	movs	r0, #49	@ 0x31
 8004ab4:	5c21      	ldrb	r1, [r4, r0]
 8004ab6:	0020      	movs	r0, r4
 8004ab8:	f7fc fe89 	bl	80017ce <PE_Send_DataMessage>
 8004abc:	4820      	ldr	r0, [pc, #128]	@ (8004b40 <__iar_annotation$$branch+0x35e>)
 8004abe:	83e0      	strh	r0, [r4, #30]
 8004ac0:	e145      	b.n	8004d4e <__iar_annotation$$branch+0x56c>
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	9002      	str	r0, [sp, #8]
 8004ac6:	2003      	movs	r0, #3
 8004ac8:	9001      	str	r0, [sp, #4]
 8004aca:	0610      	lsls	r0, r2, #24
 8004acc:	0e40      	lsrs	r0, r0, #25
 8004ace:	1c80      	adds	r0, r0, #2
 8004ad0:	b2c0      	uxtb	r0, r0
 8004ad2:	9000      	str	r0, [sp, #0]
 8004ad4:	ab06      	add	r3, sp, #24
 8004ad6:	220f      	movs	r2, #15
 8004ad8:	2031      	movs	r0, #49	@ 0x31
 8004ada:	5c21      	ldrb	r1, [r4, r0]
 8004adc:	0020      	movs	r0, r4
 8004ade:	e134      	b.n	8004d4a <__iar_annotation$$branch+0x568>
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	9206      	str	r2, [sp, #24]
 8004ae4:	03d2      	lsls	r2, r2, #15
 8004ae6:	8beb      	ldrh	r3, [r5, #30]
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d100      	bne.n	8004aee <__iar_annotation$$branch+0x30c>
 8004aec:	e3c1      	b.n	8005272 <__iar_annotation$$branch+0xa90>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	4018      	ands	r0, r3
 8004af2:	2303      	movs	r3, #3
 8004af4:	4303      	orrs	r3, r0
 8004af6:	6023      	str	r3, [r4, #0]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	6022      	str	r2, [r4, #0]
 8004afc:	6868      	ldr	r0, [r5, #4]
 8004afe:	6803      	ldr	r3, [r0, #0]
 8004b00:	0698      	lsls	r0, r3, #26
 8004b02:	0fc0      	lsrs	r0, r0, #31
 8004b04:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <__iar_annotation$$branch+0x352>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	0340      	lsls	r0, r0, #13
 8004b0a:	4318      	orrs	r0, r3
 8004b0c:	6020      	str	r0, [r4, #0]
 8004b0e:	686a      	ldr	r2, [r5, #4]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	4011      	ands	r1, r2
 8004b14:	2909      	cmp	r1, #9
 8004b16:	d037      	beq.n	8004b88 <__iar_annotation$$branch+0x3a6>
 8004b18:	68e9      	ldr	r1, [r5, #12]
 8004b1a:	688f      	ldr	r7, [r1, #8]
 8004b1c:	2f00      	cmp	r7, #0
 8004b1e:	d033      	beq.n	8004b88 <__iar_annotation$$branch+0x3a6>
 8004b20:	ab03      	add	r3, sp, #12
 8004b22:	aa05      	add	r2, sp, #20
 8004b24:	0c01      	lsrs	r1, r0, #16
 8004b26:	7c28      	ldrb	r0, [r5, #16]
 8004b28:	47b8      	blx	r7
 8004b2a:	2803      	cmp	r0, #3
 8004b2c:	d00a      	beq.n	8004b44 <__iar_annotation$$branch+0x362>
 8004b2e:	280f      	cmp	r0, #15
 8004b30:	d00d      	beq.n	8004b4e <__iar_annotation$$branch+0x36c>
 8004b32:	e029      	b.n	8004b88 <__iar_annotation$$branch+0x3a6>
 8004b34:	ffff9fff 	.word	0xffff9fff
 8004b38:	000004ad 	.word	0x000004ad
 8004b3c:	000004ac 	.word	0x000004ac
 8004b40:	0000800f 	.word	0x0000800f
 8004b44:	6820      	ldr	r0, [r4, #0]
 8004b46:	21c0      	movs	r1, #192	@ 0xc0
 8004b48:	4301      	orrs	r1, r0
 8004b4a:	6021      	str	r1, [r4, #0]
 8004b4c:	e023      	b.n	8004b96 <__iar_annotation$$branch+0x3b4>
 8004b4e:	4668      	mov	r0, sp
 8004b50:	7b00      	ldrb	r0, [r0, #12]
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d018      	beq.n	8004b88 <__iar_annotation$$branch+0x3a6>
 8004b56:	4668      	mov	r0, sp
 8004b58:	7b02      	ldrb	r2, [r0, #12]
 8004b5a:	2a07      	cmp	r2, #7
 8004b5c:	d214      	bcs.n	8004b88 <__iar_annotation$$branch+0x3a6>
 8004b5e:	6820      	ldr	r0, [r4, #0]
 8004b60:	4006      	ands	r6, r0
 8004b62:	2040      	movs	r0, #64	@ 0x40
 8004b64:	4330      	orrs	r0, r6
 8004b66:	6020      	str	r0, [r4, #0]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	9806      	ldr	r0, [sp, #24]
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d211      	bcs.n	8004b94 <__iar_annotation$$branch+0x3b2>
 8004b70:	9905      	ldr	r1, [sp, #20]
 8004b72:	6809      	ldr	r1, [r1, #0]
 8004b74:	ae07      	add	r6, sp, #28
 8004b76:	1d36      	adds	r6, r6, #4
 8004b78:	009f      	lsls	r7, r3, #2
 8004b7a:	51f1      	str	r1, [r6, r7]
 8004b7c:	9905      	ldr	r1, [sp, #20]
 8004b7e:	1d09      	adds	r1, r1, #4
 8004b80:	9105      	str	r1, [sp, #20]
 8004b82:	1c40      	adds	r0, r0, #1
 8004b84:	1c5b      	adds	r3, r3, #1
 8004b86:	e7f1      	b.n	8004b6c <__iar_annotation$$branch+0x38a>
 8004b88:	6820      	ldr	r0, [r4, #0]
 8004b8a:	4006      	ands	r6, r0
 8004b8c:	2080      	movs	r0, #128	@ 0x80
 8004b8e:	4330      	orrs	r0, r6
 8004b90:	6020      	str	r0, [r4, #0]
 8004b92:	e000      	b.n	8004b96 <__iar_annotation$$branch+0x3b4>
 8004b94:	9006      	str	r0, [sp, #24]
 8004b96:	6820      	ldr	r0, [r4, #0]
 8004b98:	9007      	str	r0, [sp, #28]
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	9002      	str	r0, [sp, #8]
 8004b9e:	2003      	movs	r0, #3
 8004ba0:	9001      	str	r0, [sp, #4]
 8004ba2:	9806      	ldr	r0, [sp, #24]
 8004ba4:	9000      	str	r0, [sp, #0]
 8004ba6:	ab07      	add	r3, sp, #28
 8004ba8:	e0cb      	b.n	8004d42 <__iar_annotation$$branch+0x560>
 8004baa:	2180      	movs	r1, #128	@ 0x80
 8004bac:	0209      	lsls	r1, r1, #8
 8004bae:	8bea      	ldrh	r2, [r5, #30]
 8004bb0:	428a      	cmp	r2, r1
 8004bb2:	d100      	bne.n	8004bb6 <__iar_annotation$$branch+0x3d4>
 8004bb4:	e35d      	b.n	8005272 <__iar_annotation$$branch+0xa90>
 8004bb6:	6822      	ldr	r2, [r4, #0]
 8004bb8:	4010      	ands	r0, r2
 8004bba:	2204      	movs	r2, #4
 8004bbc:	4302      	orrs	r2, r0
 8004bbe:	6022      	str	r2, [r4, #0]
 8004bc0:	4311      	orrs	r1, r2
 8004bc2:	6021      	str	r1, [r4, #0]
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	686a      	ldr	r2, [r5, #4]
 8004bc8:	6812      	ldr	r2, [r2, #0]
 8004bca:	0952      	lsrs	r2, r2, #5
 8004bcc:	4002      	ands	r2, r0
 8004bce:	4ba6      	ldr	r3, [pc, #664]	@ (8004e68 <__iar_annotation$$branch+0x686>)
 8004bd0:	400b      	ands	r3, r1
 8004bd2:	0351      	lsls	r1, r2, #13
 8004bd4:	4319      	orrs	r1, r3
 8004bd6:	6021      	str	r1, [r4, #0]
 8004bd8:	686a      	ldr	r2, [r5, #4]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	08d2      	lsrs	r2, r2, #3
 8004bde:	4010      	ands	r0, r2
 8004be0:	d152      	bne.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004be2:	68e8      	ldr	r0, [r5, #12]
 8004be4:	68c3      	ldr	r3, [r0, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d04e      	beq.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004bea:	2707      	movs	r7, #7
 8004bec:	0a0a      	lsrs	r2, r1, #8
 8004bee:	403a      	ands	r2, r7
 8004bf0:	0c09      	lsrs	r1, r1, #16
 8004bf2:	7c28      	ldrb	r0, [r5, #16]
 8004bf4:	4798      	blx	r3
 8004bf6:	2803      	cmp	r0, #3
 8004bf8:	d041      	beq.n	8004c7e <__iar_annotation$$branch+0x49c>
 8004bfa:	280f      	cmp	r0, #15
 8004bfc:	d144      	bne.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004bfe:	6820      	ldr	r0, [r4, #0]
 8004c00:	4006      	ands	r6, r0
 8004c02:	2040      	movs	r0, #64	@ 0x40
 8004c04:	4330      	orrs	r0, r6
 8004c06:	6020      	str	r0, [r4, #0]
 8004c08:	0a00      	lsrs	r0, r0, #8
 8004c0a:	4007      	ands	r7, r0
 8004c0c:	6968      	ldr	r0, [r5, #20]
 8004c0e:	4940      	ldr	r1, [pc, #256]	@ (8004d10 <__iar_annotation$$branch+0x52e>)
 8004c10:	4001      	ands	r1, r0
 8004c12:	01b8      	lsls	r0, r7, #6
 8004c14:	4308      	orrs	r0, r1
 8004c16:	6168      	str	r0, [r5, #20]
 8004c18:	e03b      	b.n	8004c92 <__iar_annotation$$branch+0x4b0>
 8004c1a:	2180      	movs	r1, #128	@ 0x80
 8004c1c:	0209      	lsls	r1, r1, #8
 8004c1e:	8bea      	ldrh	r2, [r5, #30]
 8004c20:	428a      	cmp	r2, r1
 8004c22:	d04b      	beq.n	8004cbc <__iar_annotation$$branch+0x4da>
 8004c24:	6822      	ldr	r2, [r4, #0]
 8004c26:	4010      	ands	r0, r2
 8004c28:	2205      	movs	r2, #5
 8004c2a:	4302      	orrs	r2, r0
 8004c2c:	6022      	str	r2, [r4, #0]
 8004c2e:	4311      	orrs	r1, r2
 8004c30:	6021      	str	r1, [r4, #0]
 8004c32:	2001      	movs	r0, #1
 8004c34:	686a      	ldr	r2, [r5, #4]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	0952      	lsrs	r2, r2, #5
 8004c3a:	4002      	ands	r2, r0
 8004c3c:	4b8a      	ldr	r3, [pc, #552]	@ (8004e68 <__iar_annotation$$branch+0x686>)
 8004c3e:	400b      	ands	r3, r1
 8004c40:	0351      	lsls	r1, r2, #13
 8004c42:	4319      	orrs	r1, r3
 8004c44:	6021      	str	r1, [r4, #0]
 8004c46:	686a      	ldr	r2, [r5, #4]
 8004c48:	6812      	ldr	r2, [r2, #0]
 8004c4a:	08d2      	lsrs	r2, r2, #3
 8004c4c:	4010      	ands	r0, r2
 8004c4e:	d11b      	bne.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004c50:	68e8      	ldr	r0, [r5, #12]
 8004c52:	6903      	ldr	r3, [r0, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d017      	beq.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004c58:	0548      	lsls	r0, r1, #21
 8004c5a:	0f42      	lsrs	r2, r0, #29
 8004c5c:	0c09      	lsrs	r1, r1, #16
 8004c5e:	7c28      	ldrb	r0, [r5, #16]
 8004c60:	4798      	blx	r3
 8004c62:	2803      	cmp	r0, #3
 8004c64:	d00b      	beq.n	8004c7e <__iar_annotation$$branch+0x49c>
 8004c66:	280f      	cmp	r0, #15
 8004c68:	d10e      	bne.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004c6a:	6820      	ldr	r0, [r4, #0]
 8004c6c:	4006      	ands	r6, r0
 8004c6e:	2040      	movs	r0, #64	@ 0x40
 8004c70:	4330      	orrs	r0, r6
 8004c72:	6020      	str	r0, [r4, #0]
 8004c74:	6968      	ldr	r0, [r5, #20]
 8004c76:	4926      	ldr	r1, [pc, #152]	@ (8004d10 <__iar_annotation$$branch+0x52e>)
 8004c78:	4001      	ands	r1, r0
 8004c7a:	6169      	str	r1, [r5, #20]
 8004c7c:	e009      	b.n	8004c92 <__iar_annotation$$branch+0x4b0>
 8004c7e:	6820      	ldr	r0, [r4, #0]
 8004c80:	21c0      	movs	r1, #192	@ 0xc0
 8004c82:	4301      	orrs	r1, r0
 8004c84:	6021      	str	r1, [r4, #0]
 8004c86:	e004      	b.n	8004c92 <__iar_annotation$$branch+0x4b0>
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	4006      	ands	r6, r0
 8004c8c:	2080      	movs	r0, #128	@ 0x80
 8004c8e:	4330      	orrs	r0, r6
 8004c90:	6020      	str	r0, [r4, #0]
 8004c92:	2000      	movs	r0, #0
 8004c94:	9002      	str	r0, [sp, #8]
 8004c96:	2003      	movs	r0, #3
 8004c98:	9001      	str	r0, [sp, #4]
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	9000      	str	r0, [sp, #0]
 8004c9e:	0023      	movs	r3, r4
 8004ca0:	220f      	movs	r2, #15
 8004ca2:	2031      	movs	r0, #49	@ 0x31
 8004ca4:	5c29      	ldrb	r1, [r5, r0]
 8004ca6:	0028      	movs	r0, r5
 8004ca8:	f7fc fd91 	bl	80017ce <PE_Send_DataMessage>
 8004cac:	e04f      	b.n	8004d4e <__iar_annotation$$branch+0x56c>
 8004cae:	2001      	movs	r0, #1
 8004cb0:	4669      	mov	r1, sp
 8004cb2:	7308      	strb	r0, [r1, #12]
 8004cb4:	8be8      	ldrh	r0, [r5, #30]
 8004cb6:	2180      	movs	r1, #128	@ 0x80
 8004cb8:	0209      	lsls	r1, r1, #8
 8004cba:	4288      	cmp	r0, r1
 8004cbc:	d100      	bne.n	8004cc0 <__iar_annotation$$branch+0x4de>
 8004cbe:	e3ab      	b.n	8005418 <__iar_annotation$$branch+0xc36>
 8004cc0:	68e8      	ldr	r0, [r5, #12]
 8004cc2:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8004cc4:	2f00      	cmp	r7, #0
 8004cc6:	d02a      	beq.n	8004d1e <__iar_annotation$$branch+0x53c>
 8004cc8:	4868      	ldr	r0, [pc, #416]	@ (8004e6c <__iar_annotation$$branch+0x68a>)
 8004cca:	182b      	adds	r3, r5, r0
 8004ccc:	3018      	adds	r0, #24
 8004cce:	182a      	adds	r2, r5, r0
 8004cd0:	7820      	ldrb	r0, [r4, #0]
 8004cd2:	06c1      	lsls	r1, r0, #27
 8004cd4:	0ec9      	lsrs	r1, r1, #27
 8004cd6:	7c28      	ldrb	r0, [r5, #16]
 8004cd8:	47b8      	blx	r7
 8004cda:	2803      	cmp	r0, #3
 8004cdc:	d01a      	beq.n	8004d14 <__iar_annotation$$branch+0x532>
 8004cde:	280f      	cmp	r0, #15
 8004ce0:	d11d      	bne.n	8004d1e <__iar_annotation$$branch+0x53c>
 8004ce2:	6820      	ldr	r0, [r4, #0]
 8004ce4:	4006      	ands	r6, r0
 8004ce6:	2040      	movs	r0, #64	@ 0x40
 8004ce8:	4330      	orrs	r0, r6
 8004cea:	6020      	str	r0, [r4, #0]
 8004cec:	2200      	movs	r2, #0
 8004cee:	4668      	mov	r0, sp
 8004cf0:	7b00      	ldrb	r0, [r0, #12]
 8004cf2:	495f      	ldr	r1, [pc, #380]	@ (8004e70 <__iar_annotation$$branch+0x68e>)
 8004cf4:	5c69      	ldrb	r1, [r5, r1]
 8004cf6:	428a      	cmp	r2, r1
 8004cf8:	d217      	bcs.n	8004d2a <__iar_annotation$$branch+0x548>
 8004cfa:	0091      	lsls	r1, r2, #2
 8004cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8004e6c <__iar_annotation$$branch+0x68a>)
 8004cfe:	18eb      	adds	r3, r5, r3
 8004d00:	585b      	ldr	r3, [r3, r1]
 8004d02:	ae05      	add	r6, sp, #20
 8004d04:	1d36      	adds	r6, r6, #4
 8004d06:	5073      	str	r3, [r6, r1]
 8004d08:	1c40      	adds	r0, r0, #1
 8004d0a:	1c52      	adds	r2, r2, #1
 8004d0c:	e7f1      	b.n	8004cf2 <__iar_annotation$$branch+0x510>
 8004d0e:	bf00      	nop
 8004d10:	fffffe3f 	.word	0xfffffe3f
 8004d14:	6820      	ldr	r0, [r4, #0]
 8004d16:	21c0      	movs	r1, #192	@ 0xc0
 8004d18:	4301      	orrs	r1, r0
 8004d1a:	6021      	str	r1, [r4, #0]
 8004d1c:	e007      	b.n	8004d2e <__iar_annotation$$branch+0x54c>
 8004d1e:	6820      	ldr	r0, [r4, #0]
 8004d20:	4006      	ands	r6, r0
 8004d22:	2080      	movs	r0, #128	@ 0x80
 8004d24:	4330      	orrs	r0, r6
 8004d26:	6020      	str	r0, [r4, #0]
 8004d28:	e001      	b.n	8004d2e <__iar_annotation$$branch+0x54c>
 8004d2a:	4669      	mov	r1, sp
 8004d2c:	7308      	strb	r0, [r1, #12]
 8004d2e:	6820      	ldr	r0, [r4, #0]
 8004d30:	9005      	str	r0, [sp, #20]
 8004d32:	2000      	movs	r0, #0
 8004d34:	9002      	str	r0, [sp, #8]
 8004d36:	2003      	movs	r0, #3
 8004d38:	9001      	str	r0, [sp, #4]
 8004d3a:	4668      	mov	r0, sp
 8004d3c:	7b00      	ldrb	r0, [r0, #12]
 8004d3e:	9000      	str	r0, [sp, #0]
 8004d40:	ab05      	add	r3, sp, #20
 8004d42:	220f      	movs	r2, #15
 8004d44:	2031      	movs	r0, #49	@ 0x31
 8004d46:	5c29      	ldrb	r1, [r5, r0]
 8004d48:	0028      	movs	r0, r5
 8004d4a:	f7fc fd40 	bl	80017ce <PE_Send_DataMessage>
 8004d4e:	e3b9      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 8004d50:	2101      	movs	r1, #1
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	4010      	ands	r0, r2
 8004d56:	4308      	orrs	r0, r1
 8004d58:	6020      	str	r0, [r4, #0]
 8004d5a:	03ca      	lsls	r2, r1, #15
 8004d5c:	4302      	orrs	r2, r0
 8004d5e:	6022      	str	r2, [r4, #0]
 8004d60:	6868      	ldr	r0, [r5, #4]
 8004d62:	6800      	ldr	r0, [r0, #0]
 8004d64:	0943      	lsrs	r3, r0, #5
 8004d66:	400b      	ands	r3, r1
 8004d68:	483f      	ldr	r0, [pc, #252]	@ (8004e68 <__iar_annotation$$branch+0x686>)
 8004d6a:	4010      	ands	r0, r2
 8004d6c:	035a      	lsls	r2, r3, #13
 8004d6e:	4302      	orrs	r2, r0
 8004d70:	6022      	str	r2, [r4, #0]
 8004d72:	48bf      	ldr	r0, [pc, #764]	@ (8005070 <__iar_annotation$$branch+0x88e>)
 8004d74:	4010      	ands	r0, r2
 8004d76:	6020      	str	r0, [r4, #0]
 8004d78:	4006      	ands	r6, r0
 8004d7a:	6026      	str	r6, [r4, #0]
 8004d7c:	b2b0      	uxth	r0, r6
 8004d7e:	22ff      	movs	r2, #255	@ 0xff
 8004d80:	0612      	lsls	r2, r2, #24
 8004d82:	4302      	orrs	r2, r0
 8004d84:	6022      	str	r2, [r4, #0]
 8004d86:	6868      	ldr	r0, [r5, #4]
 8004d88:	6800      	ldr	r0, [r0, #0]
 8004d8a:	0880      	lsrs	r0, r0, #2
 8004d8c:	4001      	ands	r1, r0
 8004d8e:	d003      	beq.n	8004d98 <__iar_annotation$$branch+0x5b6>
 8004d90:	6968      	ldr	r0, [r5, #20]
 8004d92:	0741      	lsls	r1, r0, #29
 8004d94:	0fc8      	lsrs	r0, r1, #31
 8004d96:	e000      	b.n	8004d9a <__iar_annotation$$branch+0x5b8>
 8004d98:	2002      	movs	r0, #2
 8004d9a:	9002      	str	r0, [sp, #8]
 8004d9c:	2087      	movs	r0, #135	@ 0x87
 8004d9e:	9001      	str	r0, [sp, #4]
 8004da0:	2001      	movs	r0, #1
 8004da2:	9000      	str	r0, [sp, #0]
 8004da4:	0023      	movs	r3, r4
 8004da6:	220f      	movs	r2, #15
 8004da8:	2031      	movs	r0, #49	@ 0x31
 8004daa:	5c29      	ldrb	r1, [r5, r0]
 8004dac:	0028      	movs	r0, r5
 8004dae:	f7fc fd0e 	bl	80017ce <PE_Send_DataMessage>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d1cb      	bne.n	8004d4e <__iar_annotation$$branch+0x56c>
 8004db6:	2050      	movs	r0, #80	@ 0x50
 8004db8:	e0e8      	b.n	8004f8c <__iar_annotation$$branch+0x7aa>
 8004dba:	2031      	movs	r0, #49	@ 0x31
 8004dbc:	5c28      	ldrb	r0, [r5, r0]
 8004dbe:	f7fb ff37 	bl	8000c30 <PE_Convert_SOPRxEvent>
 8004dc2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004dc4:	7809      	ldrb	r1, [r1, #0]
 8004dc6:	4281      	cmp	r1, r0
 8004dc8:	d000      	beq.n	8004dcc <__iar_annotation$$branch+0x5ea>
 8004dca:	e245      	b.n	8005258 <__iar_annotation$$branch+0xa76>
 8004dcc:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004dce:	0bc2      	lsrs	r2, r0, #15
 8004dd0:	d176      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004dd2:	0b02      	lsrs	r2, r0, #12
 8004dd4:	0752      	lsls	r2, r2, #29
 8004dd6:	d012      	beq.n	8004dfe <__iar_annotation$$branch+0x61c>
 8004dd8:	06c0      	lsls	r0, r0, #27
 8004dda:	0ec0      	lsrs	r0, r0, #27
 8004ddc:	280f      	cmp	r0, #15
 8004dde:	d16f      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004de0:	2914      	cmp	r1, #20
 8004de2:	d005      	beq.n	8004df0 <__iar_annotation$$branch+0x60e>
 8004de4:	2014      	movs	r0, #20
 8004de6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004de8:	7008      	strb	r0, [r1, #0]
 8004dea:	0028      	movs	r0, r5
 8004dec:	f7fb fee7 	bl	8000bbe <PE_Clear_RxEvent>
 8004df0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004df2:	7881      	ldrb	r1, [r0, #2]
 8004df4:	06ca      	lsls	r2, r1, #27
 8004df6:	0ed2      	lsrs	r2, r2, #27
 8004df8:	2a01      	cmp	r2, #1
 8004dfa:	d161      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004dfc:	098c      	lsrs	r4, r1, #6
 8004dfe:	d100      	bne.n	8004e02 <__iar_annotation$$branch+0x620>
 8004e00:	e22a      	b.n	8005258 <__iar_annotation$$branch+0xa76>
 8004e02:	68e9      	ldr	r1, [r5, #12]
 8004e04:	6949      	ldr	r1, [r1, #20]
 8004e06:	2900      	cmp	r1, #0
 8004e08:	d100      	bne.n	8004e0c <__iar_annotation$$branch+0x62a>
 8004e0a:	e2e3      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8004e0c:	2103      	movs	r1, #3
 8004e0e:	4021      	ands	r1, r4
 8004e10:	2901      	cmp	r1, #1
 8004e12:	d000      	beq.n	8004e16 <__iar_annotation$$branch+0x634>
 8004e14:	e2de      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8004e16:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004e18:	1d81      	adds	r1, r0, #6
 8004e1a:	7c28      	ldrb	r0, [r5, #16]
 8004e1c:	f000 fc04 	bl	8005628 <PE_SVDM_CheckIdentity>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d108      	bne.n	8004e36 <__iar_annotation$$branch+0x654>
 8004e24:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004e26:	2201      	movs	r2, #1
 8004e28:	2100      	movs	r1, #0
 8004e2a:	7c28      	ldrb	r0, [r5, #16]
 8004e2c:	68ec      	ldr	r4, [r5, #12]
 8004e2e:	6964      	ldr	r4, [r4, #20]
 8004e30:	47a0      	blx	r4
 8004e32:	2151      	movs	r1, #81	@ 0x51
 8004e34:	e0ec      	b.n	8005010 <__iar_annotation$$branch+0x82e>
 8004e36:	211b      	movs	r1, #27
 8004e38:	e0ea      	b.n	8005010 <__iar_annotation$$branch+0x82e>
 8004e3a:	6821      	ldr	r1, [r4, #0]
 8004e3c:	400e      	ands	r6, r1
 8004e3e:	6026      	str	r6, [r4, #0]
 8004e40:	2102      	movs	r1, #2
 8004e42:	4030      	ands	r0, r6
 8004e44:	4308      	orrs	r0, r1
 8004e46:	6020      	str	r0, [r4, #0]
 8004e48:	b280      	uxth	r0, r0
 8004e4a:	22ff      	movs	r2, #255	@ 0xff
 8004e4c:	0612      	lsls	r2, r2, #24
 8004e4e:	4302      	orrs	r2, r0
 8004e50:	6022      	str	r2, [r4, #0]
 8004e52:	0388      	lsls	r0, r1, #14
 8004e54:	4310      	orrs	r0, r2
 8004e56:	6020      	str	r0, [r4, #0]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	686b      	ldr	r3, [r5, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	095e      	lsrs	r6, r3, #5
 8004e60:	4016      	ands	r6, r2
 8004e62:	4b01      	ldr	r3, [pc, #4]	@ (8004e68 <__iar_annotation$$branch+0x686>)
 8004e64:	e006      	b.n	8004e74 <__iar_annotation$$branch+0x692>
 8004e66:	bf00      	nop
 8004e68:	ffff9fff 	.word	0xffff9fff
 8004e6c:	00000494 	.word	0x00000494
 8004e70:	000004ac 	.word	0x000004ac
 8004e74:	4003      	ands	r3, r0
 8004e76:	0370      	lsls	r0, r6, #13
 8004e78:	4318      	orrs	r0, r3
 8004e7a:	6020      	str	r0, [r4, #0]
 8004e7c:	4b7c      	ldr	r3, [pc, #496]	@ (8005070 <__iar_annotation$$branch+0x88e>)
 8004e7e:	4003      	ands	r3, r0
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	6868      	ldr	r0, [r5, #4]
 8004e84:	6800      	ldr	r0, [r0, #0]
 8004e86:	0880      	lsrs	r0, r0, #2
 8004e88:	4002      	ands	r2, r0
 8004e8a:	d002      	beq.n	8004e92 <__iar_annotation$$branch+0x6b0>
 8004e8c:	6968      	ldr	r0, [r5, #20]
 8004e8e:	0740      	lsls	r0, r0, #29
 8004e90:	0fc1      	lsrs	r1, r0, #31
 8004e92:	9102      	str	r1, [sp, #8]
 8004e94:	2089      	movs	r0, #137	@ 0x89
 8004e96:	9001      	str	r0, [sp, #4]
 8004e98:	2001      	movs	r0, #1
 8004e9a:	9000      	str	r0, [sp, #0]
 8004e9c:	0023      	movs	r3, r4
 8004e9e:	220f      	movs	r2, #15
 8004ea0:	2031      	movs	r0, #49	@ 0x31
 8004ea2:	5c29      	ldrb	r1, [r5, r0]
 8004ea4:	0028      	movs	r0, r5
 8004ea6:	f7fc fc92 	bl	80017ce <PE_Send_DataMessage>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d172      	bne.n	8004f94 <__iar_annotation$$branch+0x7b2>
 8004eae:	2052      	movs	r0, #82	@ 0x52
 8004eb0:	e06c      	b.n	8004f8c <__iar_annotation$$branch+0x7aa>
 8004eb2:	2031      	movs	r0, #49	@ 0x31
 8004eb4:	5c28      	ldrb	r0, [r5, r0]
 8004eb6:	f7fb febb 	bl	8000c30 <PE_Convert_SOPRxEvent>
 8004eba:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004ebc:	7809      	ldrb	r1, [r1, #0]
 8004ebe:	4281      	cmp	r1, r0
 8004ec0:	d000      	beq.n	8004ec4 <__iar_annotation$$branch+0x6e2>
 8004ec2:	e1c9      	b.n	8005258 <__iar_annotation$$branch+0xa76>
 8004ec4:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004ec6:	0bc2      	lsrs	r2, r0, #15
 8004ec8:	d1fa      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004eca:	0b02      	lsrs	r2, r0, #12
 8004ecc:	0752      	lsls	r2, r2, #29
 8004ece:	d06f      	beq.n	8004fb0 <__iar_annotation$$branch+0x7ce>
 8004ed0:	06c0      	lsls	r0, r0, #27
 8004ed2:	0ec0      	lsrs	r0, r0, #27
 8004ed4:	280f      	cmp	r0, #15
 8004ed6:	d1f3      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004ed8:	2914      	cmp	r1, #20
 8004eda:	d005      	beq.n	8004ee8 <__iar_annotation$$branch+0x706>
 8004edc:	2014      	movs	r0, #20
 8004ede:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004ee0:	7008      	strb	r0, [r1, #0]
 8004ee2:	0028      	movs	r0, r5
 8004ee4:	f7fb fe6b 	bl	8000bbe <PE_Clear_RxEvent>
 8004ee8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004eea:	7881      	ldrb	r1, [r0, #2]
 8004eec:	06ca      	lsls	r2, r1, #27
 8004eee:	0ed2      	lsrs	r2, r2, #27
 8004ef0:	2a02      	cmp	r2, #2
 8004ef2:	d1e5      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004ef4:	060c      	lsls	r4, r1, #24
 8004ef6:	d05b      	beq.n	8004fb0 <__iar_annotation$$branch+0x7ce>
 8004ef8:	68e9      	ldr	r1, [r5, #12]
 8004efa:	6989      	ldr	r1, [r1, #24]
 8004efc:	2900      	cmp	r1, #0
 8004efe:	d100      	bne.n	8004f02 <__iar_annotation$$branch+0x720>
 8004f00:	e268      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8004f02:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004f04:	1d81      	adds	r1, r0, #6
 8004f06:	7c28      	ldrb	r0, [r5, #16]
 8004f08:	f000 fc55 	bl	80057b6 <PE_SVDM_CheckSVIDs>
 8004f0c:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004f0e:	0fa2      	lsrs	r2, r4, #30
 8004f10:	2031      	movs	r0, #49	@ 0x31
 8004f12:	5c29      	ldrb	r1, [r5, r0]
 8004f14:	7c28      	ldrb	r0, [r5, #16]
 8004f16:	68ec      	ldr	r4, [r5, #12]
 8004f18:	69a4      	ldr	r4, [r4, #24]
 8004f1a:	47a0      	blx	r4
 8004f1c:	2153      	movs	r1, #83	@ 0x53
 8004f1e:	e077      	b.n	8005010 <__iar_annotation$$branch+0x82e>
 8004f20:	6821      	ldr	r1, [r4, #0]
 8004f22:	400e      	ands	r6, r1
 8004f24:	6026      	str	r6, [r4, #0]
 8004f26:	4030      	ands	r0, r6
 8004f28:	2103      	movs	r1, #3
 8004f2a:	4301      	orrs	r1, r0
 8004f2c:	6021      	str	r1, [r4, #0]
 8004f2e:	8920      	ldrh	r0, [r4, #8]
 8004f30:	b28a      	uxth	r2, r1
 8004f32:	0401      	lsls	r1, r0, #16
 8004f34:	4311      	orrs	r1, r2
 8004f36:	6021      	str	r1, [r4, #0]
 8004f38:	2080      	movs	r0, #128	@ 0x80
 8004f3a:	0200      	lsls	r0, r0, #8
 8004f3c:	4308      	orrs	r0, r1
 8004f3e:	6020      	str	r0, [r4, #0]
 8004f40:	2101      	movs	r1, #1
 8004f42:	686a      	ldr	r2, [r5, #4]
 8004f44:	6812      	ldr	r2, [r2, #0]
 8004f46:	0952      	lsrs	r2, r2, #5
 8004f48:	400a      	ands	r2, r1
 8004f4a:	4b9e      	ldr	r3, [pc, #632]	@ (80051c4 <__iar_annotation$$branch+0x9e2>)
 8004f4c:	4003      	ands	r3, r0
 8004f4e:	0350      	lsls	r0, r2, #13
 8004f50:	4318      	orrs	r0, r3
 8004f52:	6020      	str	r0, [r4, #0]
 8004f54:	4a46      	ldr	r2, [pc, #280]	@ (8005070 <__iar_annotation$$branch+0x88e>)
 8004f56:	4002      	ands	r2, r0
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	6868      	ldr	r0, [r5, #4]
 8004f5c:	6800      	ldr	r0, [r0, #0]
 8004f5e:	0880      	lsrs	r0, r0, #2
 8004f60:	4001      	ands	r1, r0
 8004f62:	d003      	beq.n	8004f6c <__iar_annotation$$branch+0x78a>
 8004f64:	6968      	ldr	r0, [r5, #20]
 8004f66:	0741      	lsls	r1, r0, #29
 8004f68:	0fc8      	lsrs	r0, r1, #31
 8004f6a:	e000      	b.n	8004f6e <__iar_annotation$$branch+0x78c>
 8004f6c:	2002      	movs	r0, #2
 8004f6e:	9002      	str	r0, [sp, #8]
 8004f70:	208b      	movs	r0, #139	@ 0x8b
 8004f72:	9001      	str	r0, [sp, #4]
 8004f74:	2001      	movs	r0, #1
 8004f76:	9000      	str	r0, [sp, #0]
 8004f78:	0023      	movs	r3, r4
 8004f7a:	220f      	movs	r2, #15
 8004f7c:	2031      	movs	r0, #49	@ 0x31
 8004f7e:	5c29      	ldrb	r1, [r5, r0]
 8004f80:	0028      	movs	r0, r5
 8004f82:	f7fc fc24 	bl	80017ce <PE_Send_DataMessage>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d104      	bne.n	8004f94 <__iar_annotation$$branch+0x7b2>
 8004f8a:	2053      	movs	r0, #83	@ 0x53
 8004f8c:	7728      	strb	r0, [r5, #28]
 8004f8e:	488e      	ldr	r0, [pc, #568]	@ (80051c8 <__iar_annotation$$branch+0x9e6>)
 8004f90:	83e8      	strh	r0, [r5, #30]
 8004f92:	9704      	str	r7, [sp, #16]
 8004f94:	e296      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 8004f96:	2031      	movs	r0, #49	@ 0x31
 8004f98:	5c28      	ldrb	r0, [r5, r0]
 8004f9a:	f7fb fe49 	bl	8000c30 <PE_Convert_SOPRxEvent>
 8004f9e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004fa0:	7809      	ldrb	r1, [r1, #0]
 8004fa2:	4281      	cmp	r1, r0
 8004fa4:	d18c      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004fa6:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004fa8:	0bc2      	lsrs	r2, r0, #15
 8004faa:	d189      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004fac:	0b02      	lsrs	r2, r0, #12
 8004fae:	0752      	lsls	r2, r2, #29
 8004fb0:	d100      	bne.n	8004fb4 <__iar_annotation$$branch+0x7d2>
 8004fb2:	e151      	b.n	8005258 <__iar_annotation$$branch+0xa76>
 8004fb4:	06c0      	lsls	r0, r0, #27
 8004fb6:	0ec0      	lsrs	r0, r0, #27
 8004fb8:	280f      	cmp	r0, #15
 8004fba:	d000      	beq.n	8004fbe <__iar_annotation$$branch+0x7dc>
 8004fbc:	e14c      	b.n	8005258 <__iar_annotation$$branch+0xa76>
 8004fbe:	2914      	cmp	r1, #20
 8004fc0:	d005      	beq.n	8004fce <__iar_annotation$$branch+0x7ec>
 8004fc2:	2014      	movs	r0, #20
 8004fc4:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004fc6:	7008      	strb	r0, [r1, #0]
 8004fc8:	0028      	movs	r0, r5
 8004fca:	f7fb fdf8 	bl	8000bbe <PE_Clear_RxEvent>
 8004fce:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004fd0:	7881      	ldrb	r1, [r0, #2]
 8004fd2:	06ca      	lsls	r2, r1, #27
 8004fd4:	0ed2      	lsrs	r2, r2, #27
 8004fd6:	2a03      	cmp	r2, #3
 8004fd8:	d1ef      	bne.n	8004fba <__iar_annotation$$branch+0x7d8>
 8004fda:	098e      	lsrs	r6, r1, #6
 8004fdc:	d0e8      	beq.n	8004fb0 <__iar_annotation$$branch+0x7ce>
 8004fde:	68e9      	ldr	r1, [r5, #12]
 8004fe0:	69c9      	ldr	r1, [r1, #28]
 8004fe2:	2900      	cmp	r1, #0
 8004fe4:	d017      	beq.n	8005016 <__iar_annotation$$branch+0x834>
 8004fe6:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004fe8:	1d82      	adds	r2, r0, #6
 8004fea:	6820      	ldr	r0, [r4, #0]
 8004fec:	0c01      	lsrs	r1, r0, #16
 8004fee:	7c28      	ldrb	r0, [r5, #16]
 8004ff0:	f000 fc22 	bl	8005838 <PE_SVDM_CheckModes>
 8004ff4:	2403      	movs	r4, #3
 8004ff6:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	4032      	ands	r2, r6
 8004ffc:	2031      	movs	r0, #49	@ 0x31
 8004ffe:	5c29      	ldrb	r1, [r5, r0]
 8005000:	7c28      	ldrb	r0, [r5, #16]
 8005002:	68ef      	ldr	r7, [r5, #12]
 8005004:	69ff      	ldr	r7, [r7, #28]
 8005006:	47b8      	blx	r7
 8005008:	4034      	ands	r4, r6
 800500a:	2c01      	cmp	r4, #1
 800500c:	d103      	bne.n	8005016 <__iar_annotation$$branch+0x834>
 800500e:	2154      	movs	r1, #84	@ 0x54
 8005010:	7c28      	ldrb	r0, [r5, #16]
 8005012:	f7fb fb69 	bl	80006e8 <USBPD_PE_Notification>
 8005016:	e1dd      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8005018:	6821      	ldr	r1, [r4, #0]
 800501a:	400e      	ands	r6, r1
 800501c:	6026      	str	r6, [r4, #0]
 800501e:	4030      	ands	r0, r6
 8005020:	2104      	movs	r1, #4
 8005022:	4301      	orrs	r1, r0
 8005024:	6021      	str	r1, [r4, #0]
 8005026:	8920      	ldrh	r0, [r4, #8]
 8005028:	b289      	uxth	r1, r1
 800502a:	0400      	lsls	r0, r0, #16
 800502c:	4308      	orrs	r0, r1
 800502e:	6020      	str	r0, [r4, #0]
 8005030:	2180      	movs	r1, #128	@ 0x80
 8005032:	0209      	lsls	r1, r1, #8
 8005034:	4301      	orrs	r1, r0
 8005036:	6021      	str	r1, [r4, #0]
 8005038:	2001      	movs	r0, #1
 800503a:	686a      	ldr	r2, [r5, #4]
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	0952      	lsrs	r2, r2, #5
 8005040:	4002      	ands	r2, r0
 8005042:	4b60      	ldr	r3, [pc, #384]	@ (80051c4 <__iar_annotation$$branch+0x9e2>)
 8005044:	400b      	ands	r3, r1
 8005046:	0351      	lsls	r1, r2, #13
 8005048:	4319      	orrs	r1, r3
 800504a:	6021      	str	r1, [r4, #0]
 800504c:	696a      	ldr	r2, [r5, #20]
 800504e:	05d2      	lsls	r2, r2, #23
 8005050:	0f52      	lsrs	r2, r2, #29
 8005052:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <__iar_annotation$$branch+0x88e>)
 8005054:	400b      	ands	r3, r1
 8005056:	0211      	lsls	r1, r2, #8
 8005058:	4319      	orrs	r1, r3
 800505a:	6021      	str	r1, [r4, #0]
 800505c:	6869      	ldr	r1, [r5, #4]
 800505e:	6809      	ldr	r1, [r1, #0]
 8005060:	0889      	lsrs	r1, r1, #2
 8005062:	4008      	ands	r0, r1
 8005064:	d006      	beq.n	8005074 <__iar_annotation$$branch+0x892>
 8005066:	6968      	ldr	r0, [r5, #20]
 8005068:	0741      	lsls	r1, r0, #29
 800506a:	0fc8      	lsrs	r0, r1, #31
 800506c:	e003      	b.n	8005076 <__iar_annotation$$branch+0x894>
 800506e:	bf00      	nop
 8005070:	fffff8ff 	.word	0xfffff8ff
 8005074:	2002      	movs	r0, #2
 8005076:	9002      	str	r0, [sp, #8]
 8005078:	208c      	movs	r0, #140	@ 0x8c
 800507a:	9001      	str	r0, [sp, #4]
 800507c:	2001      	movs	r0, #1
 800507e:	9000      	str	r0, [sp, #0]
 8005080:	0023      	movs	r3, r4
 8005082:	220f      	movs	r2, #15
 8005084:	2031      	movs	r0, #49	@ 0x31
 8005086:	5c29      	ldrb	r1, [r5, r0]
 8005088:	0028      	movs	r0, r5
 800508a:	f7fc fba0 	bl	80017ce <PE_Send_DataMessage>
 800508e:	2800      	cmp	r0, #0
 8005090:	d000      	beq.n	8005094 <__iar_annotation$$branch+0x8b2>
 8005092:	e217      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 8005094:	2054      	movs	r0, #84	@ 0x54
 8005096:	7728      	strb	r0, [r5, #28]
 8005098:	2134      	movs	r1, #52	@ 0x34
 800509a:	e08c      	b.n	80051b6 <__iar_annotation$$branch+0x9d4>
 800509c:	2634      	movs	r6, #52	@ 0x34
 800509e:	2031      	movs	r0, #49	@ 0x31
 80050a0:	5c28      	ldrb	r0, [r5, r0]
 80050a2:	f7fb fdc5 	bl	8000c30 <PE_Convert_SOPRxEvent>
 80050a6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80050a8:	7809      	ldrb	r1, [r1, #0]
 80050aa:	4281      	cmp	r1, r0
 80050ac:	d144      	bne.n	8005138 <__iar_annotation$$branch+0x956>
 80050ae:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80050b0:	0bc2      	lsrs	r2, r0, #15
 80050b2:	d141      	bne.n	8005138 <__iar_annotation$$branch+0x956>
 80050b4:	2707      	movs	r7, #7
 80050b6:	0b02      	lsrs	r2, r0, #12
 80050b8:	423a      	tst	r2, r7
 80050ba:	d03d      	beq.n	8005138 <__iar_annotation$$branch+0x956>
 80050bc:	06c0      	lsls	r0, r0, #27
 80050be:	0ec0      	lsrs	r0, r0, #27
 80050c0:	280f      	cmp	r0, #15
 80050c2:	d139      	bne.n	8005138 <__iar_annotation$$branch+0x956>
 80050c4:	2914      	cmp	r1, #20
 80050c6:	d005      	beq.n	80050d4 <__iar_annotation$$branch+0x8f2>
 80050c8:	2014      	movs	r0, #20
 80050ca:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80050cc:	7008      	strb	r0, [r1, #0]
 80050ce:	0028      	movs	r0, r5
 80050d0:	f7fb fd75 	bl	8000bbe <PE_Clear_RxEvent>
 80050d4:	2000      	movs	r0, #0
 80050d6:	7728      	strb	r0, [r5, #28]
 80050d8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80050da:	7880      	ldrb	r0, [r0, #2]
 80050dc:	06c1      	lsls	r1, r0, #27
 80050de:	0ec9      	lsrs	r1, r1, #27
 80050e0:	2904      	cmp	r1, #4
 80050e2:	d129      	bne.n	8005138 <__iar_annotation$$branch+0x956>
 80050e4:	0980      	lsrs	r0, r0, #6
 80050e6:	d027      	beq.n	8005138 <__iar_annotation$$branch+0x956>
 80050e8:	9001      	str	r0, [sp, #4]
 80050ea:	488f      	ldr	r0, [pc, #572]	@ (8005328 <__iar_annotation$$branch+0xb46>)
 80050ec:	9901      	ldr	r1, [sp, #4]
 80050ee:	2901      	cmp	r1, #1
 80050f0:	d004      	beq.n	80050fc <__iar_annotation$$branch+0x91a>
 80050f2:	d30e      	bcc.n	8005112 <__iar_annotation$$branch+0x930>
 80050f4:	2903      	cmp	r1, #3
 80050f6:	d008      	beq.n	800510a <__iar_annotation$$branch+0x928>
 80050f8:	d302      	bcc.n	8005100 <__iar_annotation$$branch+0x91e>
 80050fa:	e00a      	b.n	8005112 <__iar_annotation$$branch+0x930>
 80050fc:	2635      	movs	r6, #53	@ 0x35
 80050fe:	e008      	b.n	8005112 <__iar_annotation$$branch+0x930>
 8005100:	6969      	ldr	r1, [r5, #20]
 8005102:	4008      	ands	r0, r1
 8005104:	6168      	str	r0, [r5, #20]
 8005106:	2636      	movs	r6, #54	@ 0x36
 8005108:	e003      	b.n	8005112 <__iar_annotation$$branch+0x930>
 800510a:	6969      	ldr	r1, [r5, #20]
 800510c:	4008      	ands	r0, r1
 800510e:	6168      	str	r0, [r5, #20]
 8005110:	2637      	movs	r6, #55	@ 0x37
 8005112:	0031      	movs	r1, r6
 8005114:	7c28      	ldrb	r0, [r5, #16]
 8005116:	f7fb fae7 	bl	80006e8 <USBPD_PE_Notification>
 800511a:	68e8      	ldr	r0, [r5, #12]
 800511c:	6a06      	ldr	r6, [r0, #32]
 800511e:	2e00      	cmp	r6, #0
 8005120:	d009      	beq.n	8005136 <__iar_annotation$$branch+0x954>
 8005122:	6820      	ldr	r0, [r4, #0]
 8005124:	0a01      	lsrs	r1, r0, #8
 8005126:	400f      	ands	r7, r1
 8005128:	9700      	str	r7, [sp, #0]
 800512a:	0c03      	lsrs	r3, r0, #16
 800512c:	9a01      	ldr	r2, [sp, #4]
 800512e:	2031      	movs	r0, #49	@ 0x31
 8005130:	5c29      	ldrb	r1, [r5, r0]
 8005132:	7c28      	ldrb	r0, [r5, #16]
 8005134:	47b0      	blx	r6
 8005136:	e14d      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8005138:	5da8      	ldrb	r0, [r5, r6]
 800513a:	e08f      	b.n	800525c <__iar_annotation$$branch+0xa7a>
 800513c:	6821      	ldr	r1, [r4, #0]
 800513e:	400e      	ands	r6, r1
 8005140:	6026      	str	r6, [r4, #0]
 8005142:	4030      	ands	r0, r6
 8005144:	2105      	movs	r1, #5
 8005146:	4301      	orrs	r1, r0
 8005148:	6021      	str	r1, [r4, #0]
 800514a:	8920      	ldrh	r0, [r4, #8]
 800514c:	b289      	uxth	r1, r1
 800514e:	0400      	lsls	r0, r0, #16
 8005150:	4308      	orrs	r0, r1
 8005152:	6020      	str	r0, [r4, #0]
 8005154:	2180      	movs	r1, #128	@ 0x80
 8005156:	0209      	lsls	r1, r1, #8
 8005158:	4301      	orrs	r1, r0
 800515a:	6021      	str	r1, [r4, #0]
 800515c:	2001      	movs	r0, #1
 800515e:	686a      	ldr	r2, [r5, #4]
 8005160:	6812      	ldr	r2, [r2, #0]
 8005162:	0952      	lsrs	r2, r2, #5
 8005164:	4002      	ands	r2, r0
 8005166:	4b17      	ldr	r3, [pc, #92]	@ (80051c4 <__iar_annotation$$branch+0x9e2>)
 8005168:	400b      	ands	r3, r1
 800516a:	0351      	lsls	r1, r2, #13
 800516c:	4319      	orrs	r1, r3
 800516e:	6021      	str	r1, [r4, #0]
 8005170:	696a      	ldr	r2, [r5, #20]
 8005172:	05d2      	lsls	r2, r2, #23
 8005174:	0f52      	lsrs	r2, r2, #29
 8005176:	4b6d      	ldr	r3, [pc, #436]	@ (800532c <__iar_annotation$$branch+0xb4a>)
 8005178:	400b      	ands	r3, r1
 800517a:	0211      	lsls	r1, r2, #8
 800517c:	4319      	orrs	r1, r3
 800517e:	6021      	str	r1, [r4, #0]
 8005180:	6869      	ldr	r1, [r5, #4]
 8005182:	6809      	ldr	r1, [r1, #0]
 8005184:	0889      	lsrs	r1, r1, #2
 8005186:	4008      	ands	r0, r1
 8005188:	d003      	beq.n	8005192 <__iar_annotation$$branch+0x9b0>
 800518a:	6968      	ldr	r0, [r5, #20]
 800518c:	0741      	lsls	r1, r0, #29
 800518e:	0fc8      	lsrs	r0, r1, #31
 8005190:	e000      	b.n	8005194 <__iar_annotation$$branch+0x9b2>
 8005192:	2002      	movs	r0, #2
 8005194:	9002      	str	r0, [sp, #8]
 8005196:	208d      	movs	r0, #141	@ 0x8d
 8005198:	9001      	str	r0, [sp, #4]
 800519a:	2001      	movs	r0, #1
 800519c:	9000      	str	r0, [sp, #0]
 800519e:	0023      	movs	r3, r4
 80051a0:	220f      	movs	r2, #15
 80051a2:	2031      	movs	r0, #49	@ 0x31
 80051a4:	5c29      	ldrb	r1, [r5, r0]
 80051a6:	0028      	movs	r0, r5
 80051a8:	f7fc fb11 	bl	80017ce <PE_Send_DataMessage>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	d15e      	bne.n	800526e <__iar_annotation$$branch+0xa8c>
 80051b0:	2055      	movs	r0, #85	@ 0x55
 80051b2:	7728      	strb	r0, [r5, #28]
 80051b4:	2155      	movs	r1, #85	@ 0x55
 80051b6:	7c28      	ldrb	r0, [r5, #16]
 80051b8:	f7fb fa96 	bl	80006e8 <USBPD_PE_Notification>
 80051bc:	48c3      	ldr	r0, [pc, #780]	@ (80054cc <.text_19>)
 80051be:	83e8      	strh	r0, [r5, #30]
 80051c0:	2032      	movs	r0, #50	@ 0x32
 80051c2:	e12c      	b.n	800541e <__iar_annotation$$branch+0xc3c>
 80051c4:	ffff9fff 	.word	0xffff9fff
 80051c8:	0000801e 	.word	0x0000801e
 80051cc:	2031      	movs	r0, #49	@ 0x31
 80051ce:	5c28      	ldrb	r0, [r5, r0]
 80051d0:	f7fb fd2e 	bl	8000c30 <PE_Convert_SOPRxEvent>
 80051d4:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80051d6:	7809      	ldrb	r1, [r1, #0]
 80051d8:	4281      	cmp	r1, r0
 80051da:	d13d      	bne.n	8005258 <__iar_annotation$$branch+0xa76>
 80051dc:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80051de:	0bc2      	lsrs	r2, r0, #15
 80051e0:	d13a      	bne.n	8005258 <__iar_annotation$$branch+0xa76>
 80051e2:	2607      	movs	r6, #7
 80051e4:	0b02      	lsrs	r2, r0, #12
 80051e6:	4232      	tst	r2, r6
 80051e8:	d036      	beq.n	8005258 <__iar_annotation$$branch+0xa76>
 80051ea:	06c0      	lsls	r0, r0, #27
 80051ec:	0ec0      	lsrs	r0, r0, #27
 80051ee:	280f      	cmp	r0, #15
 80051f0:	d132      	bne.n	8005258 <__iar_annotation$$branch+0xa76>
 80051f2:	2914      	cmp	r1, #20
 80051f4:	d005      	beq.n	8005202 <__iar_annotation$$branch+0xa20>
 80051f6:	2014      	movs	r0, #20
 80051f8:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80051fa:	7008      	strb	r0, [r1, #0]
 80051fc:	0028      	movs	r0, r5
 80051fe:	f7fb fcde 	bl	8000bbe <PE_Clear_RxEvent>
 8005202:	2000      	movs	r0, #0
 8005204:	7728      	strb	r0, [r5, #28]
 8005206:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8005208:	7880      	ldrb	r0, [r0, #2]
 800520a:	06c1      	lsls	r1, r0, #27
 800520c:	0ec9      	lsrs	r1, r1, #27
 800520e:	2905      	cmp	r1, #5
 8005210:	d122      	bne.n	8005258 <__iar_annotation$$branch+0xa76>
 8005212:	0980      	lsrs	r0, r0, #6
 8005214:	d020      	beq.n	8005258 <__iar_annotation$$branch+0xa76>
 8005216:	9001      	str	r0, [sp, #4]
 8005218:	2801      	cmp	r0, #1
 800521a:	d004      	beq.n	8005226 <__iar_annotation$$branch+0xa44>
 800521c:	d309      	bcc.n	8005232 <__iar_annotation$$branch+0xa50>
 800521e:	2803      	cmp	r0, #3
 8005220:	d005      	beq.n	800522e <__iar_annotation$$branch+0xa4c>
 8005222:	d302      	bcc.n	800522a <__iar_annotation$$branch+0xa48>
 8005224:	e005      	b.n	8005232 <__iar_annotation$$branch+0xa50>
 8005226:	2156      	movs	r1, #86	@ 0x56
 8005228:	e004      	b.n	8005234 <__iar_annotation$$branch+0xa52>
 800522a:	2157      	movs	r1, #87	@ 0x57
 800522c:	e002      	b.n	8005234 <__iar_annotation$$branch+0xa52>
 800522e:	2158      	movs	r1, #88	@ 0x58
 8005230:	e000      	b.n	8005234 <__iar_annotation$$branch+0xa52>
 8005232:	2155      	movs	r1, #85	@ 0x55
 8005234:	7c28      	ldrb	r0, [r5, #16]
 8005236:	f7fb fa57 	bl	80006e8 <USBPD_PE_Notification>
 800523a:	68e8      	ldr	r0, [r5, #12]
 800523c:	6a47      	ldr	r7, [r0, #36]	@ 0x24
 800523e:	2f00      	cmp	r7, #0
 8005240:	d009      	beq.n	8005256 <__iar_annotation$$branch+0xa74>
 8005242:	6820      	ldr	r0, [r4, #0]
 8005244:	0a01      	lsrs	r1, r0, #8
 8005246:	400e      	ands	r6, r1
 8005248:	9600      	str	r6, [sp, #0]
 800524a:	0c03      	lsrs	r3, r0, #16
 800524c:	9a01      	ldr	r2, [sp, #4]
 800524e:	2031      	movs	r0, #49	@ 0x31
 8005250:	5c29      	ldrb	r1, [r5, r0]
 8005252:	7c28      	ldrb	r0, [r5, #16]
 8005254:	47b8      	blx	r7
 8005256:	e0bd      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8005258:	2034      	movs	r0, #52	@ 0x34
 800525a:	5c28      	ldrb	r0, [r5, r0]
 800525c:	06c0      	lsls	r0, r0, #27
 800525e:	0ec0      	lsrs	r0, r0, #27
 8005260:	2810      	cmp	r0, #16
 8005262:	d100      	bne.n	8005266 <__iar_annotation$$branch+0xa84>
 8005264:	e0bf      	b.n	80053e6 <__iar_annotation$$branch+0xc04>
 8005266:	8be8      	ldrh	r0, [r5, #30]
 8005268:	2180      	movs	r1, #128	@ 0x80
 800526a:	0209      	lsls	r1, r1, #8
 800526c:	4288      	cmp	r0, r1
 800526e:	d000      	beq.n	8005272 <__iar_annotation$$branch+0xa90>
 8005270:	e128      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 8005272:	e0d1      	b.n	8005418 <__iar_annotation$$branch+0xc36>
 8005274:	2100      	movs	r1, #0
 8005276:	466a      	mov	r2, sp
 8005278:	7311      	strb	r1, [r2, #12]
 800527a:	6821      	ldr	r1, [r4, #0]
 800527c:	400e      	ands	r6, r1
 800527e:	6026      	str	r6, [r4, #0]
 8005280:	6861      	ldr	r1, [r4, #4]
 8005282:	4030      	ands	r0, r6
 8005284:	06c9      	lsls	r1, r1, #27
 8005286:	0ec9      	lsrs	r1, r1, #27
 8005288:	4301      	orrs	r1, r0
 800528a:	6021      	str	r1, [r4, #0]
 800528c:	8920      	ldrh	r0, [r4, #8]
 800528e:	b28a      	uxth	r2, r1
 8005290:	0401      	lsls	r1, r0, #16
 8005292:	4311      	orrs	r1, r2
 8005294:	6021      	str	r1, [r4, #0]
 8005296:	2080      	movs	r0, #128	@ 0x80
 8005298:	0200      	lsls	r0, r0, #8
 800529a:	4308      	orrs	r0, r1
 800529c:	6020      	str	r0, [r4, #0]
 800529e:	2601      	movs	r6, #1
 80052a0:	6869      	ldr	r1, [r5, #4]
 80052a2:	6809      	ldr	r1, [r1, #0]
 80052a4:	0949      	lsrs	r1, r1, #5
 80052a6:	4031      	ands	r1, r6
 80052a8:	4aaa      	ldr	r2, [pc, #680]	@ (8005554 <.text_21>)
 80052aa:	4002      	ands	r2, r0
 80052ac:	0348      	lsls	r0, r1, #13
 80052ae:	4310      	orrs	r0, r2
 80052b0:	6020      	str	r0, [r4, #0]
 80052b2:	491e      	ldr	r1, [pc, #120]	@ (800532c <__iar_annotation$$branch+0xb4a>)
 80052b4:	4001      	ands	r1, r0
 80052b6:	0230      	lsls	r0, r6, #8
 80052b8:	4308      	orrs	r0, r1
 80052ba:	6020      	str	r0, [r4, #0]
 80052bc:	9005      	str	r0, [sp, #20]
 80052be:	68e8      	ldr	r0, [r5, #12]
 80052c0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80052c2:	9001      	str	r0, [sp, #4]
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d00b      	beq.n	80052e0 <__iar_annotation$$branch+0xafe>
 80052c8:	a805      	add	r0, sp, #20
 80052ca:	1d00      	adds	r0, r0, #4
 80052cc:	9000      	str	r0, [sp, #0]
 80052ce:	ab03      	add	r3, sp, #12
 80052d0:	7820      	ldrb	r0, [r4, #0]
 80052d2:	06c2      	lsls	r2, r0, #27
 80052d4:	0ed2      	lsrs	r2, r2, #27
 80052d6:	2031      	movs	r0, #49	@ 0x31
 80052d8:	5c29      	ldrb	r1, [r5, r0]
 80052da:	7c28      	ldrb	r0, [r5, #16]
 80052dc:	9c01      	ldr	r4, [sp, #4]
 80052de:	47a0      	blx	r4
 80052e0:	4668      	mov	r0, sp
 80052e2:	7b00      	ldrb	r0, [r0, #12]
 80052e4:	1c40      	adds	r0, r0, #1
 80052e6:	4669      	mov	r1, sp
 80052e8:	7308      	strb	r0, [r1, #12]
 80052ea:	6868      	ldr	r0, [r5, #4]
 80052ec:	6800      	ldr	r0, [r0, #0]
 80052ee:	0880      	lsrs	r0, r0, #2
 80052f0:	4006      	ands	r6, r0
 80052f2:	d003      	beq.n	80052fc <__iar_annotation$$branch+0xb1a>
 80052f4:	6968      	ldr	r0, [r5, #20]
 80052f6:	0741      	lsls	r1, r0, #29
 80052f8:	0fc8      	lsrs	r0, r1, #31
 80052fa:	e000      	b.n	80052fe <__iar_annotation$$branch+0xb1c>
 80052fc:	2002      	movs	r0, #2
 80052fe:	9002      	str	r0, [sp, #8]
 8005300:	208f      	movs	r0, #143	@ 0x8f
 8005302:	9001      	str	r0, [sp, #4]
 8005304:	4668      	mov	r0, sp
 8005306:	7b00      	ldrb	r0, [r0, #12]
 8005308:	9000      	str	r0, [sp, #0]
 800530a:	ab05      	add	r3, sp, #20
 800530c:	220f      	movs	r2, #15
 800530e:	2031      	movs	r0, #49	@ 0x31
 8005310:	5c29      	ldrb	r1, [r5, r0]
 8005312:	0028      	movs	r0, r5
 8005314:	f7fc fa5b 	bl	80017ce <PE_Send_DataMessage>
 8005318:	2800      	cmp	r0, #0
 800531a:	d104      	bne.n	8005326 <__iar_annotation$$branch+0xb44>
 800531c:	205a      	movs	r0, #90	@ 0x5a
 800531e:	7728      	strb	r0, [r5, #28]
 8005320:	48bf      	ldr	r0, [pc, #764]	@ (8005620 <.text_23>)
 8005322:	83e8      	strh	r0, [r5, #30]
 8005324:	9704      	str	r7, [sp, #16]
 8005326:	e0ca      	b.n	80054be <__iar_annotation$$branch+0xcdc>
 8005328:	fffffe3f 	.word	0xfffffe3f
 800532c:	fffff8ff 	.word	0xfffff8ff
 8005330:	2607      	movs	r6, #7
 8005332:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8005334:	0b00      	lsrs	r0, r0, #12
 8005336:	2107      	movs	r1, #7
 8005338:	4001      	ands	r1, r0
 800533a:	1e48      	subs	r0, r1, #1
 800533c:	4669      	mov	r1, sp
 800533e:	7108      	strb	r0, [r1, #4]
 8005340:	2031      	movs	r0, #49	@ 0x31
 8005342:	5c28      	ldrb	r0, [r5, r0]
 8005344:	f7fb fc74 	bl	8000c30 <PE_Convert_SOPRxEvent>
 8005348:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800534a:	7809      	ldrb	r1, [r1, #0]
 800534c:	4281      	cmp	r1, r0
 800534e:	d144      	bne.n	80053da <__iar_annotation$$branch+0xbf8>
 8005350:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8005352:	0bc2      	lsrs	r2, r0, #15
 8005354:	d141      	bne.n	80053da <__iar_annotation$$branch+0xbf8>
 8005356:	0b02      	lsrs	r2, r0, #12
 8005358:	4232      	tst	r2, r6
 800535a:	d03e      	beq.n	80053da <__iar_annotation$$branch+0xbf8>
 800535c:	06c0      	lsls	r0, r0, #27
 800535e:	0ec0      	lsrs	r0, r0, #27
 8005360:	280f      	cmp	r0, #15
 8005362:	d13a      	bne.n	80053da <__iar_annotation$$branch+0xbf8>
 8005364:	2914      	cmp	r1, #20
 8005366:	d005      	beq.n	8005374 <__iar_annotation$$branch+0xb92>
 8005368:	2014      	movs	r0, #20
 800536a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800536c:	7008      	strb	r0, [r1, #0]
 800536e:	0028      	movs	r0, r5
 8005370:	f7fb fc25 	bl	8000bbe <PE_Clear_RxEvent>
 8005374:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8005376:	7880      	ldrb	r0, [r0, #2]
 8005378:	06c1      	lsls	r1, r0, #27
 800537a:	0ec9      	lsrs	r1, r1, #27
 800537c:	6862      	ldr	r2, [r4, #4]
 800537e:	4291      	cmp	r1, r2
 8005380:	d12b      	bne.n	80053da <__iar_annotation$$branch+0xbf8>
 8005382:	0981      	lsrs	r1, r0, #6
 8005384:	d029      	beq.n	80053da <__iar_annotation$$branch+0xbf8>
 8005386:	68e9      	ldr	r1, [r5, #12]
 8005388:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 800538a:	2900      	cmp	r1, #0
 800538c:	d022      	beq.n	80053d4 <__iar_annotation$$branch+0xbf2>
 800538e:	2600      	movs	r6, #0
 8005390:	e011      	b.n	80053b6 <__iar_annotation$$branch+0xbd4>
 8005392:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8005394:	00b2      	lsls	r2, r6, #2
 8005396:	188b      	adds	r3, r1, r2
 8005398:	799c      	ldrb	r4, [r3, #6]
 800539a:	79df      	ldrb	r7, [r3, #7]
 800539c:	023f      	lsls	r7, r7, #8
 800539e:	19e4      	adds	r4, r4, r7
 80053a0:	3108      	adds	r1, #8
 80053a2:	5c89      	ldrb	r1, [r1, r2]
 80053a4:	0409      	lsls	r1, r1, #16
 80053a6:	1861      	adds	r1, r4, r1
 80053a8:	7a5a      	ldrb	r2, [r3, #9]
 80053aa:	0612      	lsls	r2, r2, #24
 80053ac:	1889      	adds	r1, r1, r2
 80053ae:	aa05      	add	r2, sp, #20
 80053b0:	00b3      	lsls	r3, r6, #2
 80053b2:	50d1      	str	r1, [r2, r3]
 80053b4:	1c76      	adds	r6, r6, #1
 80053b6:	4669      	mov	r1, sp
 80053b8:	7909      	ldrb	r1, [r1, #4]
 80053ba:	428e      	cmp	r6, r1
 80053bc:	d3e9      	bcc.n	8005392 <__iar_annotation$$branch+0xbb0>
 80053be:	a905      	add	r1, sp, #20
 80053c0:	9100      	str	r1, [sp, #0]
 80053c2:	ab01      	add	r3, sp, #4
 80053c4:	06c2      	lsls	r2, r0, #27
 80053c6:	0ed2      	lsrs	r2, r2, #27
 80053c8:	2031      	movs	r0, #49	@ 0x31
 80053ca:	5c29      	ldrb	r1, [r5, r0]
 80053cc:	7c28      	ldrb	r0, [r5, #16]
 80053ce:	68ec      	ldr	r4, [r5, #12]
 80053d0:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
 80053d2:	47a0      	blx	r4
 80053d4:	2000      	movs	r0, #0
 80053d6:	83e8      	strh	r0, [r5, #30]
 80053d8:	e01e      	b.n	8005418 <__iar_annotation$$branch+0xc36>
 80053da:	2034      	movs	r0, #52	@ 0x34
 80053dc:	5c28      	ldrb	r0, [r5, r0]
 80053de:	06c0      	lsls	r0, r0, #27
 80053e0:	0ec0      	lsrs	r0, r0, #27
 80053e2:	2810      	cmp	r0, #16
 80053e4:	d113      	bne.n	800540e <__iar_annotation$$branch+0xc2c>
 80053e6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80053e8:	7800      	ldrb	r0, [r0, #0]
 80053ea:	2814      	cmp	r0, #20
 80053ec:	d005      	beq.n	80053fa <__iar_annotation$$branch+0xc18>
 80053ee:	2014      	movs	r0, #20
 80053f0:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80053f2:	7008      	strb	r0, [r1, #0]
 80053f4:	0028      	movs	r0, r5
 80053f6:	f7fb fbe2 	bl	8000bbe <PE_Clear_RxEvent>
 80053fa:	2000      	movs	r0, #0
 80053fc:	83e8      	strh	r0, [r5, #30]
 80053fe:	2103      	movs	r1, #3
 8005400:	7469      	strb	r1, [r5, #17]
 8005402:	9004      	str	r0, [sp, #16]
 8005404:	2159      	movs	r1, #89	@ 0x59
 8005406:	7c28      	ldrb	r0, [r5, #16]
 8005408:	f7fb f96e 	bl	80006e8 <USBPD_PE_Notification>
 800540c:	e05a      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 800540e:	8be8      	ldrh	r0, [r5, #30]
 8005410:	2180      	movs	r1, #128	@ 0x80
 8005412:	0209      	lsls	r1, r1, #8
 8005414:	4288      	cmp	r0, r1
 8005416:	d155      	bne.n	80054c4 <__iar_annotation$$branch+0xce2>
 8005418:	2003      	movs	r0, #3
 800541a:	7468      	strb	r0, [r5, #17]
 800541c:	2000      	movs	r0, #0
 800541e:	9004      	str	r0, [sp, #16]
 8005420:	e050      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 8005422:	2100      	movs	r1, #0
 8005424:	466a      	mov	r2, sp
 8005426:	7311      	strb	r1, [r2, #12]
 8005428:	6821      	ldr	r1, [r4, #0]
 800542a:	400e      	ands	r6, r1
 800542c:	6026      	str	r6, [r4, #0]
 800542e:	6861      	ldr	r1, [r4, #4]
 8005430:	4030      	ands	r0, r6
 8005432:	06c9      	lsls	r1, r1, #27
 8005434:	0ec9      	lsrs	r1, r1, #27
 8005436:	4301      	orrs	r1, r0
 8005438:	6021      	str	r1, [r4, #0]
 800543a:	8920      	ldrh	r0, [r4, #8]
 800543c:	b28a      	uxth	r2, r1
 800543e:	0401      	lsls	r1, r0, #16
 8005440:	4311      	orrs	r1, r2
 8005442:	6021      	str	r1, [r4, #0]
 8005444:	2080      	movs	r0, #128	@ 0x80
 8005446:	0200      	lsls	r0, r0, #8
 8005448:	4308      	orrs	r0, r1
 800544a:	6020      	str	r0, [r4, #0]
 800544c:	2601      	movs	r6, #1
 800544e:	6869      	ldr	r1, [r5, #4]
 8005450:	6809      	ldr	r1, [r1, #0]
 8005452:	0949      	lsrs	r1, r1, #5
 8005454:	4031      	ands	r1, r6
 8005456:	4a3f      	ldr	r2, [pc, #252]	@ (8005554 <.text_21>)
 8005458:	4002      	ands	r2, r0
 800545a:	0348      	lsls	r0, r1, #13
 800545c:	4310      	orrs	r0, r2
 800545e:	6020      	str	r0, [r4, #0]
 8005460:	4970      	ldr	r1, [pc, #448]	@ (8005624 <.text_24>)
 8005462:	4001      	ands	r1, r0
 8005464:	0230      	lsls	r0, r6, #8
 8005466:	4308      	orrs	r0, r1
 8005468:	6020      	str	r0, [r4, #0]
 800546a:	9005      	str	r0, [sp, #20]
 800546c:	68e8      	ldr	r0, [r5, #12]
 800546e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005470:	2b00      	cmp	r3, #0
 8005472:	d004      	beq.n	800547e <__iar_annotation$$branch+0xc9c>
 8005474:	a805      	add	r0, sp, #20
 8005476:	1d02      	adds	r2, r0, #4
 8005478:	a903      	add	r1, sp, #12
 800547a:	7c28      	ldrb	r0, [r5, #16]
 800547c:	4798      	blx	r3
 800547e:	4668      	mov	r0, sp
 8005480:	7b00      	ldrb	r0, [r0, #12]
 8005482:	1c40      	adds	r0, r0, #1
 8005484:	4669      	mov	r1, sp
 8005486:	7308      	strb	r0, [r1, #12]
 8005488:	6868      	ldr	r0, [r5, #4]
 800548a:	6800      	ldr	r0, [r0, #0]
 800548c:	0880      	lsrs	r0, r0, #2
 800548e:	4006      	ands	r6, r0
 8005490:	d003      	beq.n	800549a <__iar_annotation$$branch+0xcb8>
 8005492:	6968      	ldr	r0, [r5, #20]
 8005494:	0741      	lsls	r1, r0, #29
 8005496:	0fc8      	lsrs	r0, r1, #31
 8005498:	e000      	b.n	800549c <__iar_annotation$$branch+0xcba>
 800549a:	2002      	movs	r0, #2
 800549c:	9002      	str	r0, [sp, #8]
 800549e:	2003      	movs	r0, #3
 80054a0:	9001      	str	r0, [sp, #4]
 80054a2:	4668      	mov	r0, sp
 80054a4:	7b00      	ldrb	r0, [r0, #12]
 80054a6:	9000      	str	r0, [sp, #0]
 80054a8:	ab05      	add	r3, sp, #20
 80054aa:	220f      	movs	r2, #15
 80054ac:	2031      	movs	r0, #49	@ 0x31
 80054ae:	5c29      	ldrb	r1, [r5, r0]
 80054b0:	0028      	movs	r0, r5
 80054b2:	f7fc f98c 	bl	80017ce <PE_Send_DataMessage>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d101      	bne.n	80054be <__iar_annotation$$branch+0xcdc>
 80054ba:	205a      	movs	r0, #90	@ 0x5a
 80054bc:	7728      	strb	r0, [r5, #28]
 80054be:	2000      	movs	r0, #0
 80054c0:	2132      	movs	r1, #50	@ 0x32
 80054c2:	5468      	strb	r0, [r5, r1]
 80054c4:	9804      	ldr	r0, [sp, #16]
 80054c6:	b01d      	add	sp, #116	@ 0x74
 80054c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080054cc <.text_19>:
 80054cc:	00008032 	.word	0x00008032

080054d0 <PE_StateMachine_UVDM>:
 80054d0:	2914      	cmp	r1, #20
 80054d2:	d000      	beq.n	80054d6 <PE_StateMachine_UVDM+0x6>
 80054d4:	4770      	bx	lr
 80054d6:	b570      	push	{r4, r5, r6, lr}
 80054d8:	b08c      	sub	sp, #48	@ 0x30
 80054da:	0004      	movs	r4, r0
 80054dc:	68e0      	ldr	r0, [r4, #12]
 80054de:	2800      	cmp	r0, #0
 80054e0:	d035      	beq.n	800554e <PE_StateMachine_UVDM+0x7e>
 80054e2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d032      	beq.n	800554e <PE_StateMachine_UVDM+0x7e>
 80054e8:	2500      	movs	r5, #0
 80054ea:	4669      	mov	r1, sp
 80054ec:	730d      	strb	r5, [r1, #12]
 80054ee:	a805      	add	r0, sp, #20
 80054f0:	1d03      	adds	r3, r0, #4
 80054f2:	aa03      	add	r2, sp, #12
 80054f4:	a904      	add	r1, sp, #16
 80054f6:	7c20      	ldrb	r0, [r4, #16]
 80054f8:	68e6      	ldr	r6, [r4, #12]
 80054fa:	6bf6      	ldr	r6, [r6, #60]	@ 0x3c
 80054fc:	47b0      	blx	r6
 80054fe:	9804      	ldr	r0, [sp, #16]
 8005500:	49cc      	ldr	r1, [pc, #816]	@ (8005834 <.text_27>)
 8005502:	4001      	ands	r1, r0
 8005504:	9104      	str	r1, [sp, #16]
 8005506:	4668      	mov	r0, sp
 8005508:	7b00      	ldrb	r0, [r0, #12]
 800550a:	1c40      	adds	r0, r0, #1
 800550c:	4669      	mov	r1, sp
 800550e:	7308      	strb	r0, [r1, #12]
 8005510:	9804      	ldr	r0, [sp, #16]
 8005512:	9005      	str	r0, [sp, #20]
 8005514:	6860      	ldr	r0, [r4, #4]
 8005516:	6800      	ldr	r0, [r0, #0]
 8005518:	0741      	lsls	r1, r0, #29
 800551a:	0fc9      	lsrs	r1, r1, #31
 800551c:	d003      	beq.n	8005526 <PE_StateMachine_UVDM+0x56>
 800551e:	6960      	ldr	r0, [r4, #20]
 8005520:	0741      	lsls	r1, r0, #29
 8005522:	0fc8      	lsrs	r0, r1, #31
 8005524:	e000      	b.n	8005528 <PE_StateMachine_UVDM+0x58>
 8005526:	2002      	movs	r0, #2
 8005528:	9002      	str	r0, [sp, #8]
 800552a:	2003      	movs	r0, #3
 800552c:	9001      	str	r0, [sp, #4]
 800552e:	4668      	mov	r0, sp
 8005530:	7b00      	ldrb	r0, [r0, #12]
 8005532:	9000      	str	r0, [sp, #0]
 8005534:	ab05      	add	r3, sp, #20
 8005536:	220f      	movs	r2, #15
 8005538:	2031      	movs	r0, #49	@ 0x31
 800553a:	5c21      	ldrb	r1, [r4, r0]
 800553c:	0020      	movs	r0, r4
 800553e:	f7fc f946 	bl	80017ce <PE_Send_DataMessage>
 8005542:	2800      	cmp	r0, #0
 8005544:	d101      	bne.n	800554a <PE_StateMachine_UVDM+0x7a>
 8005546:	2059      	movs	r0, #89	@ 0x59
 8005548:	7720      	strb	r0, [r4, #28]
 800554a:	2032      	movs	r0, #50	@ 0x32
 800554c:	5425      	strb	r5, [r4, r0]
 800554e:	b00c      	add	sp, #48	@ 0x30
 8005550:	bd70      	pop	{r4, r5, r6, pc}
	...

08005554 <.text_21>:
 8005554:	ffff9fff 	.word	0xffff9fff

08005558 <PE_Check_DataMessageVDM>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	2403      	movs	r4, #3
 800555c:	2501      	movs	r5, #1
 800555e:	6801      	ldr	r1, [r0, #0]
 8005560:	6849      	ldr	r1, [r1, #4]
 8005562:	0949      	lsrs	r1, r1, #5
 8005564:	4029      	ands	r1, r5
 8005566:	d01f      	beq.n	80055a8 <PE_Check_DataMessageVDM+0x50>
 8005568:	68c1      	ldr	r1, [r0, #12]
 800556a:	2900      	cmp	r1, #0
 800556c:	d01c      	beq.n	80055a8 <PE_Check_DataMessageVDM+0x50>
 800556e:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8005570:	788a      	ldrb	r2, [r1, #2]
 8005572:	78cb      	ldrb	r3, [r1, #3]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	18d2      	adds	r2, r2, r3
 8005578:	790b      	ldrb	r3, [r1, #4]
 800557a:	041b      	lsls	r3, r3, #16
 800557c:	18d2      	adds	r2, r2, r3
 800557e:	7949      	ldrb	r1, [r1, #5]
 8005580:	0609      	lsls	r1, r1, #24
 8005582:	1851      	adds	r1, r2, r1
 8005584:	9100      	str	r1, [sp, #0]
 8005586:	0bca      	lsrs	r2, r1, #15
 8005588:	402a      	ands	r2, r5
 800558a:	d014      	beq.n	80055b6 <PE_Check_DataMessageVDM+0x5e>
 800558c:	2394      	movs	r3, #148	@ 0x94
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	50c1      	str	r1, [r0, r3]
 8005592:	0989      	lsrs	r1, r1, #6
 8005594:	4021      	ands	r1, r4
 8005596:	d107      	bne.n	80055a8 <PE_Check_DataMessageVDM+0x50>
 8005598:	6801      	ldr	r1, [r0, #0]
 800559a:	6849      	ldr	r1, [r1, #4]
 800559c:	0a09      	lsrs	r1, r1, #8
 800559e:	4029      	ands	r1, r5
 80055a0:	d002      	beq.n	80055a8 <PE_Check_DataMessageVDM+0x50>
 80055a2:	f7ff f840 	bl	8004626 <PE_Receive_SVDM>
 80055a6:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80055a8:	6841      	ldr	r1, [r0, #4]
 80055aa:	6809      	ldr	r1, [r1, #0]
 80055ac:	400c      	ands	r4, r1
 80055ae:	2c02      	cmp	r4, #2
 80055b0:	d134      	bne.n	800561c <PE_Check_DataMessageVDM+0xc4>
 80055b2:	7445      	strb	r5, [r0, #17]
 80055b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80055b6:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 80055b8:	0449      	lsls	r1, r1, #17
 80055ba:	0f49      	lsrs	r1, r1, #29
 80055bc:	1e49      	subs	r1, r1, #1
 80055be:	4ab1      	ldr	r2, [pc, #708]	@ (8005884 <.text_29>)
 80055c0:	5481      	strb	r1, [r0, r2]
 80055c2:	0006      	movs	r6, r0
 80055c4:	2000      	movs	r0, #0
 80055c6:	e00f      	b.n	80055e8 <PE_Check_DataMessageVDM+0x90>
 80055c8:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 80055ca:	0082      	lsls	r2, r0, #2
 80055cc:	1889      	adds	r1, r1, r2
 80055ce:	798a      	ldrb	r2, [r1, #6]
 80055d0:	79cf      	ldrb	r7, [r1, #7]
 80055d2:	023f      	lsls	r7, r7, #8
 80055d4:	19d2      	adds	r2, r2, r7
 80055d6:	7a0f      	ldrb	r7, [r1, #8]
 80055d8:	043f      	lsls	r7, r7, #16
 80055da:	19d2      	adds	r2, r2, r7
 80055dc:	7a49      	ldrb	r1, [r1, #9]
 80055de:	0609      	lsls	r1, r1, #24
 80055e0:	1851      	adds	r1, r2, r1
 80055e2:	0082      	lsls	r2, r0, #2
 80055e4:	5099      	str	r1, [r3, r2]
 80055e6:	1c40      	adds	r0, r0, #1
 80055e8:	49a7      	ldr	r1, [pc, #668]	@ (8005888 <.text_30>)
 80055ea:	1873      	adds	r3, r6, r1
 80055ec:	3118      	adds	r1, #24
 80055ee:	1872      	adds	r2, r6, r1
 80055f0:	7811      	ldrb	r1, [r2, #0]
 80055f2:	4288      	cmp	r0, r1
 80055f4:	d3e8      	bcc.n	80055c8 <PE_Check_DataMessageVDM+0x70>
 80055f6:	9900      	ldr	r1, [sp, #0]
 80055f8:	68f0      	ldr	r0, [r6, #12]
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d008      	beq.n	8005610 <PE_Check_DataMessageVDM+0xb8>
 80055fe:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8005600:	2f00      	cmp	r7, #0
 8005602:	d005      	beq.n	8005610 <PE_Check_DataMessageVDM+0xb8>
 8005604:	7c30      	ldrb	r0, [r6, #16]
 8005606:	47b8      	blx	r7
 8005608:	2800      	cmp	r0, #0
 800560a:	d101      	bne.n	8005610 <PE_Check_DataMessageVDM+0xb8>
 800560c:	7474      	strb	r4, [r6, #17]
 800560e:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8005610:	6870      	ldr	r0, [r6, #4]
 8005612:	6800      	ldr	r0, [r0, #0]
 8005614:	4004      	ands	r4, r0
 8005616:	2c02      	cmp	r4, #2
 8005618:	d100      	bne.n	800561c <PE_Check_DataMessageVDM+0xc4>
 800561a:	7475      	strb	r5, [r6, #17]
 800561c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

08005620 <.text_23>:
 8005620:	0000801e 	.word	0x0000801e

08005624 <.text_24>:
 8005624:	fffff8ff 	.word	0xfffff8ff

08005628 <PE_SVDM_CheckIdentity>:
 8005628:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 800562a:	0003      	movs	r3, r0
 800562c:	2000      	movs	r0, #0
 800562e:	4c97      	ldr	r4, [pc, #604]	@ (800588c <.text_31>)
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	58e3      	ldr	r3, [r4, r3]
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005638:	045b      	lsls	r3, r3, #17
 800563a:	0f5b      	lsrs	r3, r3, #29
 800563c:	1e5c      	subs	r4, r3, #1
 800563e:	b2e3      	uxtb	r3, r4
 8005640:	2b03      	cmp	r3, #3
 8005642:	d200      	bcs.n	8005646 <PE_SVDM_CheckIdentity+0x1e>
 8005644:	e0b5      	b.n	80057b2 <PE_SVDM_CheckIdentity+0x18a>
 8005646:	000b      	movs	r3, r1
 8005648:	7819      	ldrb	r1, [r3, #0]
 800564a:	785d      	ldrb	r5, [r3, #1]
 800564c:	022d      	lsls	r5, r5, #8
 800564e:	1949      	adds	r1, r1, r5
 8005650:	789d      	ldrb	r5, [r3, #2]
 8005652:	042d      	lsls	r5, r5, #16
 8005654:	1949      	adds	r1, r1, r5
 8005656:	78dd      	ldrb	r5, [r3, #3]
 8005658:	062d      	lsls	r5, r5, #24
 800565a:	194d      	adds	r5, r1, r5
 800565c:	6015      	str	r5, [r2, #0]
 800565e:	7919      	ldrb	r1, [r3, #4]
 8005660:	795e      	ldrb	r6, [r3, #5]
 8005662:	0236      	lsls	r6, r6, #8
 8005664:	1989      	adds	r1, r1, r6
 8005666:	799e      	ldrb	r6, [r3, #6]
 8005668:	0436      	lsls	r6, r6, #16
 800566a:	1989      	adds	r1, r1, r6
 800566c:	79de      	ldrb	r6, [r3, #7]
 800566e:	0636      	lsls	r6, r6, #24
 8005670:	1989      	adds	r1, r1, r6
 8005672:	6051      	str	r1, [r2, #4]
 8005674:	2108      	movs	r1, #8
 8005676:	7a1e      	ldrb	r6, [r3, #8]
 8005678:	7a5f      	ldrb	r7, [r3, #9]
 800567a:	023f      	lsls	r7, r7, #8
 800567c:	19f6      	adds	r6, r6, r7
 800567e:	7a9f      	ldrb	r7, [r3, #10]
 8005680:	043f      	lsls	r7, r7, #16
 8005682:	19f6      	adds	r6, r6, r7
 8005684:	7adf      	ldrb	r7, [r3, #11]
 8005686:	063f      	lsls	r7, r7, #24
 8005688:	19f6      	adds	r6, r6, r7
 800568a:	6096      	str	r6, [r2, #8]
 800568c:	1ee4      	subs	r4, r4, #3
 800568e:	2620      	movs	r6, #32
 8005690:	5d97      	ldrb	r7, [r2, r6]
 8005692:	26e0      	movs	r6, #224	@ 0xe0
 8005694:	403e      	ands	r6, r7
 8005696:	466f      	mov	r7, sp
 8005698:	703e      	strb	r6, [r7, #0]
 800569a:	466e      	mov	r6, sp
 800569c:	7836      	ldrb	r6, [r6, #0]
 800569e:	2720      	movs	r7, #32
 80056a0:	55d6      	strb	r6, [r2, r7]
 80056a2:	0626      	lsls	r6, r4, #24
 80056a4:	d022      	beq.n	80056ec <PE_SVDM_CheckIdentity+0xc4>
 80056a6:	1e66      	subs	r6, r4, #1
 80056a8:	466f      	mov	r7, sp
 80056aa:	707e      	strb	r6, [r7, #1]
 80056ac:	00ae      	lsls	r6, r5, #2
 80056ae:	0f76      	lsrs	r6, r6, #29
 80056b0:	2e05      	cmp	r6, #5
 80056b2:	d827      	bhi.n	8005704 <PE_SVDM_CheckIdentity+0xdc>
 80056b4:	a701      	add	r7, pc, #4	@ (adr r7, 80056bc <PE_SVDM_CheckIdentity+0x94>)
 80056b6:	5dbf      	ldrb	r7, [r7, r6]
 80056b8:	44bf      	add	pc, r7
 80056ba:	bf00      	nop
 80056bc:	5a060632 	.word	0x5a060632
 80056c0:	a680      	.short	0xa680
 80056c2:	210c      	movs	r1, #12
 80056c4:	466c      	mov	r4, sp
 80056c6:	7824      	ldrb	r4, [r4, #0]
 80056c8:	2608      	movs	r6, #8
 80056ca:	4326      	orrs	r6, r4
 80056cc:	2420      	movs	r4, #32
 80056ce:	5516      	strb	r6, [r2, r4]
 80056d0:	7b1c      	ldrb	r4, [r3, #12]
 80056d2:	7b5e      	ldrb	r6, [r3, #13]
 80056d4:	0236      	lsls	r6, r6, #8
 80056d6:	19a4      	adds	r4, r4, r6
 80056d8:	7b9e      	ldrb	r6, [r3, #14]
 80056da:	0436      	lsls	r6, r6, #16
 80056dc:	19a4      	adds	r4, r4, r6
 80056de:	7bde      	ldrb	r6, [r3, #15]
 80056e0:	0636      	lsls	r6, r6, #24
 80056e2:	19a4      	adds	r4, r4, r6
 80056e4:	6194      	str	r4, [r2, #24]
 80056e6:	466c      	mov	r4, sp
 80056e8:	7864      	ldrb	r4, [r4, #1]
 80056ea:	0026      	movs	r6, r4
 80056ec:	d062      	beq.n	80057b4 <PE_SVDM_CheckIdentity+0x18c>
 80056ee:	9e01      	ldr	r6, [sp, #4]
 80056f0:	8eb6      	ldrh	r6, [r6, #52]	@ 0x34
 80056f2:	0636      	lsls	r6, r6, #24
 80056f4:	0fb6      	lsrs	r6, r6, #30
 80056f6:	2e02      	cmp	r6, #2
 80056f8:	d35c      	bcc.n	80057b4 <PE_SVDM_CheckIdentity+0x18c>
 80056fa:	01ad      	lsls	r5, r5, #6
 80056fc:	0f6d      	lsrs	r5, r5, #29
 80056fe:	d059      	beq.n	80057b4 <PE_SVDM_CheckIdentity+0x18c>
 8005700:	1e6d      	subs	r5, r5, #1
 8005702:	2d02      	cmp	r5, #2
 8005704:	d855      	bhi.n	80057b2 <PE_SVDM_CheckIdentity+0x18a>
 8005706:	2520      	movs	r5, #32
 8005708:	5d55      	ldrb	r5, [r2, r5]
 800570a:	08ef      	lsrs	r7, r5, #3
 800570c:	07ff      	lsls	r7, r7, #31
 800570e:	d53b      	bpl.n	8005788 <PE_SVDM_CheckIdentity+0x160>
 8005710:	3108      	adds	r1, #8
 8005712:	1e64      	subs	r4, r4, #1
 8005714:	e039      	b.n	800578a <PE_SVDM_CheckIdentity+0x162>
 8005716:	210c      	movs	r1, #12
 8005718:	466c      	mov	r4, sp
 800571a:	7824      	ldrb	r4, [r4, #0]
 800571c:	2601      	movs	r6, #1
 800571e:	4326      	orrs	r6, r4
 8005720:	2420      	movs	r4, #32
 8005722:	5516      	strb	r6, [r2, r4]
 8005724:	7b1c      	ldrb	r4, [r3, #12]
 8005726:	7b5e      	ldrb	r6, [r3, #13]
 8005728:	0236      	lsls	r6, r6, #8
 800572a:	19a4      	adds	r4, r4, r6
 800572c:	7b9e      	ldrb	r6, [r3, #14]
 800572e:	0436      	lsls	r6, r6, #16
 8005730:	19a4      	adds	r4, r4, r6
 8005732:	7bde      	ldrb	r6, [r3, #15]
 8005734:	0636      	lsls	r6, r6, #24
 8005736:	19a4      	adds	r4, r4, r6
 8005738:	60d4      	str	r4, [r2, #12]
 800573a:	e7d4      	b.n	80056e6 <PE_SVDM_CheckIdentity+0xbe>
 800573c:	210c      	movs	r1, #12
 800573e:	466c      	mov	r4, sp
 8005740:	7824      	ldrb	r4, [r4, #0]
 8005742:	2604      	movs	r6, #4
 8005744:	4326      	orrs	r6, r4
 8005746:	2420      	movs	r4, #32
 8005748:	5516      	strb	r6, [r2, r4]
 800574a:	7b1c      	ldrb	r4, [r3, #12]
 800574c:	7b5e      	ldrb	r6, [r3, #13]
 800574e:	0236      	lsls	r6, r6, #8
 8005750:	19a4      	adds	r4, r4, r6
 8005752:	7b9e      	ldrb	r6, [r3, #14]
 8005754:	0436      	lsls	r6, r6, #16
 8005756:	19a4      	adds	r4, r4, r6
 8005758:	7bde      	ldrb	r6, [r3, #15]
 800575a:	0636      	lsls	r6, r6, #24
 800575c:	19a4      	adds	r4, r4, r6
 800575e:	6154      	str	r4, [r2, #20]
 8005760:	e7c1      	b.n	80056e6 <PE_SVDM_CheckIdentity+0xbe>
 8005762:	210c      	movs	r1, #12
 8005764:	466c      	mov	r4, sp
 8005766:	7824      	ldrb	r4, [r4, #0]
 8005768:	2602      	movs	r6, #2
 800576a:	4326      	orrs	r6, r4
 800576c:	2420      	movs	r4, #32
 800576e:	5516      	strb	r6, [r2, r4]
 8005770:	7b1c      	ldrb	r4, [r3, #12]
 8005772:	7b5e      	ldrb	r6, [r3, #13]
 8005774:	0236      	lsls	r6, r6, #8
 8005776:	19a4      	adds	r4, r4, r6
 8005778:	7b9e      	ldrb	r6, [r3, #14]
 800577a:	0436      	lsls	r6, r6, #16
 800577c:	19a4      	adds	r4, r4, r6
 800577e:	7bde      	ldrb	r6, [r3, #15]
 8005780:	0636      	lsls	r6, r6, #24
 8005782:	19a4      	adds	r4, r4, r6
 8005784:	6114      	str	r4, [r2, #16]
 8005786:	e7ae      	b.n	80056e6 <PE_SVDM_CheckIdentity+0xbe>
 8005788:	1d09      	adds	r1, r1, #4
 800578a:	b2e4      	uxtb	r4, r4
 800578c:	2c01      	cmp	r4, #1
 800578e:	d110      	bne.n	80057b2 <PE_SVDM_CheckIdentity+0x18a>
 8005790:	2410      	movs	r4, #16
 8005792:	432c      	orrs	r4, r5
 8005794:	2520      	movs	r5, #32
 8005796:	5554      	strb	r4, [r2, r5]
 8005798:	1859      	adds	r1, r3, r1
 800579a:	780b      	ldrb	r3, [r1, #0]
 800579c:	784c      	ldrb	r4, [r1, #1]
 800579e:	0224      	lsls	r4, r4, #8
 80057a0:	191b      	adds	r3, r3, r4
 80057a2:	788c      	ldrb	r4, [r1, #2]
 80057a4:	0424      	lsls	r4, r4, #16
 80057a6:	191b      	adds	r3, r3, r4
 80057a8:	78c9      	ldrb	r1, [r1, #3]
 80057aa:	0609      	lsls	r1, r1, #24
 80057ac:	1859      	adds	r1, r3, r1
 80057ae:	61d1      	str	r1, [r2, #28]
 80057b0:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}
 80057b2:	2002      	movs	r0, #2
 80057b4:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}

080057b6 <PE_SVDM_CheckSVIDs>:
 80057b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057b8:	4b34      	ldr	r3, [pc, #208]	@ (800588c <.text_31>)
 80057ba:	0080      	lsls	r0, r0, #2
 80057bc:	5818      	ldr	r0, [r3, r0]
 80057be:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 80057c0:	0440      	lsls	r0, r0, #17
 80057c2:	0f40      	lsrs	r0, r0, #29
 80057c4:	1e46      	subs	r6, r0, #1
 80057c6:	b2f6      	uxtb	r6, r6
 80057c8:	2000      	movs	r0, #0
 80057ca:	2500      	movs	r5, #0
 80057cc:	7610      	strb	r0, [r2, #24]
 80057ce:	7650      	strb	r0, [r2, #25]
 80057d0:	000b      	movs	r3, r1
 80057d2:	0014      	movs	r4, r2
 80057d4:	0031      	movs	r1, r6
 80057d6:	5c1a      	ldrb	r2, [r3, r0]
 80057d8:	1c5e      	adds	r6, r3, #1
 80057da:	5c36      	ldrb	r6, [r6, r0]
 80057dc:	0236      	lsls	r6, r6, #8
 80057de:	1992      	adds	r2, r2, r6
 80057e0:	7e26      	ldrb	r6, [r4, #24]
 80057e2:	0076      	lsls	r6, r6, #1
 80057e4:	53a2      	strh	r2, [r4, r6]
 80057e6:	7e26      	ldrb	r6, [r4, #24]
 80057e8:	2201      	movs	r2, #1
 80057ea:	0077      	lsls	r7, r6, #1
 80057ec:	5be7      	ldrh	r7, [r4, r7]
 80057ee:	2f00      	cmp	r7, #0
 80057f0:	d002      	beq.n	80057f8 <PE_SVDM_CheckSVIDs+0x42>
 80057f2:	1c76      	adds	r6, r6, #1
 80057f4:	7626      	strb	r6, [r4, #24]
 80057f6:	e001      	b.n	80057fc <PE_SVDM_CheckSVIDs+0x46>
 80057f8:	2501      	movs	r5, #1
 80057fa:	7662      	strb	r2, [r4, #25]
 80057fc:	1c80      	adds	r0, r0, #2
 80057fe:	b2c0      	uxtb	r0, r0
 8005800:	5c1e      	ldrb	r6, [r3, r0]
 8005802:	1c5f      	adds	r7, r3, #1
 8005804:	5c3f      	ldrb	r7, [r7, r0]
 8005806:	023f      	lsls	r7, r7, #8
 8005808:	19f6      	adds	r6, r6, r7
 800580a:	7e27      	ldrb	r7, [r4, #24]
 800580c:	007f      	lsls	r7, r7, #1
 800580e:	53e6      	strh	r6, [r4, r7]
 8005810:	7e26      	ldrb	r6, [r4, #24]
 8005812:	0077      	lsls	r7, r6, #1
 8005814:	5be7      	ldrh	r7, [r4, r7]
 8005816:	2f00      	cmp	r7, #0
 8005818:	d002      	beq.n	8005820 <PE_SVDM_CheckSVIDs+0x6a>
 800581a:	1c76      	adds	r6, r6, #1
 800581c:	7626      	strb	r6, [r4, #24]
 800581e:	e001      	b.n	8005824 <PE_SVDM_CheckSVIDs+0x6e>
 8005820:	2501      	movs	r5, #1
 8005822:	7662      	strb	r2, [r4, #25]
 8005824:	1c80      	adds	r0, r0, #2
 8005826:	b2c0      	uxtb	r0, r0
 8005828:	008a      	lsls	r2, r1, #2
 800582a:	4290      	cmp	r0, r2
 800582c:	d201      	bcs.n	8005832 <PE_SVDM_CheckSVIDs+0x7c>
 800582e:	002a      	movs	r2, r5
 8005830:	d0d1      	beq.n	80057d6 <PE_SVDM_CheckSVIDs+0x20>
 8005832:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005834 <.text_27>:
 8005834:	ffff7fff 	.word	0xffff7fff

08005838 <PE_SVDM_CheckModes>:
 8005838:	b530      	push	{r4, r5, lr}
 800583a:	4c14      	ldr	r4, [pc, #80]	@ (800588c <.text_31>)
 800583c:	0080      	lsls	r0, r0, #2
 800583e:	5820      	ldr	r0, [r4, r0]
 8005840:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 8005842:	0440      	lsls	r0, r0, #17
 8005844:	0f40      	lsrs	r0, r0, #29
 8005846:	1e40      	subs	r0, r0, #1
 8005848:	b2c0      	uxtb	r0, r0
 800584a:	2400      	movs	r4, #0
 800584c:	8399      	strh	r1, [r3, #28]
 800584e:	601c      	str	r4, [r3, #0]
 8005850:	5d11      	ldrb	r1, [r2, r4]
 8005852:	1915      	adds	r5, r2, r4
 8005854:	786d      	ldrb	r5, [r5, #1]
 8005856:	022d      	lsls	r5, r5, #8
 8005858:	1949      	adds	r1, r1, r5
 800585a:	1915      	adds	r5, r2, r4
 800585c:	78ad      	ldrb	r5, [r5, #2]
 800585e:	042d      	lsls	r5, r5, #16
 8005860:	1949      	adds	r1, r1, r5
 8005862:	1915      	adds	r5, r2, r4
 8005864:	78ed      	ldrb	r5, [r5, #3]
 8005866:	062d      	lsls	r5, r5, #24
 8005868:	1949      	adds	r1, r1, r5
 800586a:	681d      	ldr	r5, [r3, #0]
 800586c:	00ad      	lsls	r5, r5, #2
 800586e:	195d      	adds	r5, r3, r5
 8005870:	6069      	str	r1, [r5, #4]
 8005872:	6819      	ldr	r1, [r3, #0]
 8005874:	1c49      	adds	r1, r1, #1
 8005876:	6019      	str	r1, [r3, #0]
 8005878:	1d24      	adds	r4, r4, #4
 800587a:	b2e4      	uxtb	r4, r4
 800587c:	0081      	lsls	r1, r0, #2
 800587e:	428c      	cmp	r4, r1
 8005880:	d3e6      	bcc.n	8005850 <PE_SVDM_CheckModes+0x18>
 8005882:	bd30      	pop	{r4, r5, pc}

08005884 <.text_29>:
 8005884:	000004ac 	.word	0x000004ac

08005888 <.text_30>:
 8005888:	00000494 	.word	0x00000494

0800588c <.text_31>:
 800588c:	2000027c 	.word	0x2000027c

08005890 <USBPD_PRL_TimerCounter>:
 8005890:	4954      	ldr	r1, [pc, #336]	@ (80059e4 <.text_15>)
 8005892:	0080      	lsls	r0, r0, #2
 8005894:	1808      	adds	r0, r1, r0
 8005896:	6801      	ldr	r1, [r0, #0]
 8005898:	790a      	ldrb	r2, [r1, #4]
 800589a:	2a00      	cmp	r2, #0
 800589c:	d002      	beq.n	80058a4 <USBPD_PRL_TimerCounter+0x14>
 800589e:	790a      	ldrb	r2, [r1, #4]
 80058a0:	1e52      	subs	r2, r2, #1
 80058a2:	710a      	strb	r2, [r1, #4]
 80058a4:	6800      	ldr	r0, [r0, #0]
 80058a6:	7841      	ldrb	r1, [r0, #1]
 80058a8:	2900      	cmp	r1, #0
 80058aa:	d001      	beq.n	80058b0 <USBPD_PRL_TimerCounter+0x20>
 80058ac:	1e49      	subs	r1, r1, #1
 80058ae:	7041      	strb	r1, [r0, #1]
 80058b0:	4770      	bx	lr
	...

080058b4 <USBPD_PRL_Init>:
 80058b4:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 80058b6:	b081      	sub	sp, #4
 80058b8:	0014      	movs	r4, r2
 80058ba:	001d      	movs	r5, r3
 80058bc:	2616      	movs	r6, #22
 80058be:	209c      	movs	r0, #156	@ 0x9c
 80058c0:	0040      	lsls	r0, r0, #1
 80058c2:	f019 f9f7 	bl	801ecb4 <malloc>
 80058c6:	0007      	movs	r7, r0
 80058c8:	d01e      	beq.n	8005908 <USBPD_PRL_Init+0x54>
 80058ca:	9e02      	ldr	r6, [sp, #8]
 80058cc:	219c      	movs	r1, #156	@ 0x9c
 80058ce:	0049      	lsls	r1, r1, #1
 80058d0:	f019 fafd 	bl	801eece <__aeabi_memclr>
 80058d4:	220f      	movs	r2, #15
 80058d6:	2103      	movs	r1, #3
 80058d8:	1db8      	adds	r0, r7, #6
 80058da:	f019 faf1 	bl	801eec0 <__aeabi_memset>
 80058de:	4841      	ldr	r0, [pc, #260]	@ (80059e4 <.text_15>)
 80058e0:	4669      	mov	r1, sp
 80058e2:	7909      	ldrb	r1, [r1, #4]
 80058e4:	0089      	lsls	r1, r1, #2
 80058e6:	5047      	str	r7, [r0, r1]
 80058e8:	62bc      	str	r4, [r7, #40]	@ 0x28
 80058ea:	62fd      	str	r5, [r7, #44]	@ 0x2c
 80058ec:	2001      	movs	r0, #1
 80058ee:	9000      	str	r0, [sp, #0]
 80058f0:	6870      	ldr	r0, [r6, #4]
 80058f2:	0743      	lsls	r3, r0, #29
 80058f4:	0fdb      	lsrs	r3, r3, #31
 80058f6:	003a      	movs	r2, r7
 80058f8:	3230      	adds	r2, #48	@ 0x30
 80058fa:	bf00      	nop
 80058fc:	a103      	add	r1, pc, #12	@ (adr r1, 800590c <USBPD_PRL_Init::PRL_PhyCallbacks>)
 80058fe:	4668      	mov	r0, sp
 8005900:	7900      	ldrb	r0, [r0, #4]
 8005902:	f010 fbcd 	bl	80160a0 <USBPD_PHY_Init>
 8005906:	0006      	movs	r6, r0
 8005908:	0030      	movs	r0, r6
 800590a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800590c <USBPD_PRL_Init::PRL_PhyCallbacks>:
 800590c:	5f45 0800 629d 0800 62f7 0800 6311 0800     E_...b...b...c..
 800591c:	6319 0800 5a05 0800                         .c...Z..

08005924 <USBPD_PRL_GetMemoryConsumption>:
 8005924:	20ea      	movs	r0, #234	@ 0xea
 8005926:	0080      	lsls	r0, r0, #2
 8005928:	4770      	bx	lr

0800592a <USBPD_PRL_SetHeader>:
 800592a:	b530      	push	{r4, r5, lr}
 800592c:	4c2d      	ldr	r4, [pc, #180]	@ (80059e4 <.text_15>)
 800592e:	0080      	lsls	r0, r0, #2
 8005930:	5820      	ldr	r0, [r4, r0]
 8005932:	8a44      	ldrh	r4, [r0, #18]
 8005934:	4d2c      	ldr	r5, [pc, #176]	@ (80059e8 <.text_16>)
 8005936:	4025      	ands	r5, r4
 8005938:	0209      	lsls	r1, r1, #8
 800593a:	2480      	movs	r4, #128	@ 0x80
 800593c:	0064      	lsls	r4, r4, #1
 800593e:	4021      	ands	r1, r4
 8005940:	4329      	orrs	r1, r5
 8005942:	8241      	strh	r1, [r0, #18]
 8005944:	4c29      	ldr	r4, [pc, #164]	@ (80059ec <.text_17>)
 8005946:	400c      	ands	r4, r1
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	2220      	movs	r2, #32
 800594c:	4011      	ands	r1, r2
 800594e:	4321      	orrs	r1, r4
 8005950:	8241      	strh	r1, [r0, #18]
 8005952:	4a27      	ldr	r2, [pc, #156]	@ (80059f0 <.text_18>)
 8005954:	400a      	ands	r2, r1
 8005956:	0199      	lsls	r1, r3, #6
 8005958:	23c0      	movs	r3, #192	@ 0xc0
 800595a:	400b      	ands	r3, r1
 800595c:	4313      	orrs	r3, r2
 800595e:	8243      	strh	r3, [r0, #18]
 8005960:	bd30      	pop	{r4, r5, pc}

08005962 <USBPD_PRL_SetHeaderPowerRole>:
 8005962:	4a20      	ldr	r2, [pc, #128]	@ (80059e4 <.text_15>)
 8005964:	0080      	lsls	r0, r0, #2
 8005966:	5810      	ldr	r0, [r2, r0]
 8005968:	8a42      	ldrh	r2, [r0, #18]
 800596a:	4b1f      	ldr	r3, [pc, #124]	@ (80059e8 <.text_16>)
 800596c:	4013      	ands	r3, r2
 800596e:	0209      	lsls	r1, r1, #8
 8005970:	2280      	movs	r2, #128	@ 0x80
 8005972:	0052      	lsls	r2, r2, #1
 8005974:	e007      	b.n	8005986 <.text_10>

08005976 <USBPD_PRL_SetHeaderDataRole>:
 8005976:	4a1b      	ldr	r2, [pc, #108]	@ (80059e4 <.text_15>)
 8005978:	0080      	lsls	r0, r0, #2
 800597a:	5810      	ldr	r0, [r2, r0]
 800597c:	8a42      	ldrh	r2, [r0, #18]
 800597e:	4b1b      	ldr	r3, [pc, #108]	@ (80059ec <.text_17>)
 8005980:	4013      	ands	r3, r2
 8005982:	0149      	lsls	r1, r1, #5
 8005984:	2220      	movs	r2, #32

08005986 <.text_10>:
 8005986:	4011      	ands	r1, r2
 8005988:	4319      	orrs	r1, r3
 800598a:	8241      	strh	r1, [r0, #18]
 800598c:	4770      	bx	lr

0800598e <USBPD_PRL_SetHeaderSpecification>:
 800598e:	4a15      	ldr	r2, [pc, #84]	@ (80059e4 <.text_15>)
 8005990:	0080      	lsls	r0, r0, #2
 8005992:	5810      	ldr	r0, [r2, r0]
 8005994:	8a42      	ldrh	r2, [r0, #18]
 8005996:	4b16      	ldr	r3, [pc, #88]	@ (80059f0 <.text_18>)
 8005998:	4013      	ands	r3, r2
 800599a:	0189      	lsls	r1, r1, #6
 800599c:	22c0      	movs	r2, #192	@ 0xc0
 800599e:	400a      	ands	r2, r1
 80059a0:	431a      	orrs	r2, r3
 80059a2:	8242      	strh	r2, [r0, #18]
 80059a4:	4770      	bx	lr

080059a6 <USBPD_PRL_CBL_SetHeaderSpecification>:
 80059a6:	4a0f      	ldr	r2, [pc, #60]	@ (80059e4 <.text_15>)
 80059a8:	0080      	lsls	r0, r0, #2
 80059aa:	5810      	ldr	r0, [r2, r0]
 80059ac:	018a      	lsls	r2, r1, #6
 80059ae:	21c0      	movs	r1, #192	@ 0xc0
 80059b0:	4011      	ands	r1, r2
 80059b2:	4a0f      	ldr	r2, [pc, #60]	@ (80059f0 <.text_18>)
 80059b4:	8a83      	ldrh	r3, [r0, #20]
 80059b6:	4013      	ands	r3, r2
 80059b8:	430b      	orrs	r3, r1
 80059ba:	8283      	strh	r3, [r0, #20]
 80059bc:	8ac3      	ldrh	r3, [r0, #22]
 80059be:	401a      	ands	r2, r3
 80059c0:	4311      	orrs	r1, r2
 80059c2:	82c1      	strh	r1, [r0, #22]
 80059c4:	4770      	bx	lr

080059c6 <USBPD_PRL_SRCSetSinkNG>:
 80059c6:	b580      	push	{r7, lr}
 80059c8:	f010 fc5f 	bl	801628a <USBPD_PHY_SetResistor_SinkTxNG>
 80059cc:	bd01      	pop	{r0, pc}

080059ce <USBPD_PRL_SRCReleaseSinkNG>:
 80059ce:	b510      	push	{r4, lr}
 80059d0:	0004      	movs	r4, r0
 80059d2:	f010 fc69 	bl	80162a8 <USBPD_PHY_SetResistor_SinkTxOK>
 80059d6:	2000      	movs	r0, #0
 80059d8:	4902      	ldr	r1, [pc, #8]	@ (80059e4 <.text_15>)
 80059da:	00a2      	lsls	r2, r4, #2
 80059dc:	5889      	ldr	r1, [r1, r2]
 80059de:	7148      	strb	r0, [r1, #5]
 80059e0:	bd10      	pop	{r4, pc}
	...

080059e4 <.text_15>:
 80059e4:	20000288 	.word	0x20000288

080059e8 <.text_16>:
 80059e8:	0000feff 	.word	0x0000feff

080059ec <.text_17>:
 80059ec:	0000ffdf 	.word	0x0000ffdf

080059f0 <.text_18>:
 80059f0:	0000ff3f 	.word	0x0000ff3f

080059f4 <USBPD_PRL_IsResistor_SinkTxOK>:
 80059f4:	b580      	push	{r7, lr}
 80059f6:	f010 fc7d 	bl	80162f4 <USBPD_PHY_IsResistor_SinkTxOk>
 80059fa:	bd02      	pop	{r1, pc}

080059fc <USBPD_PRL_FastRoleSwapSignalling>:
 80059fc:	b580      	push	{r7, lr}
 80059fe:	f010 fc89 	bl	8016314 <USBPD_PHY_FastRoleSwapSignalling>
 8005a02:	bd01      	pop	{r0, pc}

08005a04 <PRL_FastRoleSwapReception>:
 8005a04:	b580      	push	{r7, lr}
 8005a06:	f7fb fa4d 	bl	8000ea4 <PE_PRL_FastRoleSwapReception>
 8005a0a:	bd01      	pop	{r0, pc}

08005a0c <USBPD_PRL_SOPCapability>:
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	f010 fc5b 	bl	80162c8 <USBPD_PHY_SOPSupported>
 8005a12:	bd01      	pop	{r0, pc}

08005a14 <USBPD_PRL_SendMessage>:
 8005a14:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 8005a16:	b087      	sub	sp, #28
 8005a18:	2503      	movs	r5, #3
 8005a1a:	4668      	mov	r0, sp
 8005a1c:	7f00      	ldrb	r0, [r0, #28]
 8005a1e:	9005      	str	r0, [sp, #20]
 8005a20:	48ca      	ldr	r0, [pc, #808]	@ (8005d4c <USBPD_PRL_SendMessage+0x338>)
 8005a22:	9a05      	ldr	r2, [sp, #20]
 8005a24:	0092      	lsls	r2, r2, #2
 8005a26:	1880      	adds	r0, r0, r2
 8005a28:	9000      	str	r0, [sp, #0]
 8005a2a:	6800      	ldr	r0, [r0, #0]
 8005a2c:	0004      	movs	r4, r0
 8005a2e:	7962      	ldrb	r2, [r4, #5]
 8005a30:	2a00      	cmp	r2, #0
 8005a32:	d004      	beq.n	8005a3e <USBPD_PRL_SendMessage+0x2a>
 8005a34:	7a62      	ldrb	r2, [r4, #9]
 8005a36:	2a00      	cmp	r2, #0
 8005a38:	d101      	bne.n	8005a3e <USBPD_PRL_SendMessage+0x2a>
 8005a3a:	220f      	movs	r2, #15
 8005a3c:	7142      	strb	r2, [r0, #5]
 8005a3e:	466a      	mov	r2, sp
 8005a40:	7111      	strb	r1, [r2, #4]
 8005a42:	4669      	mov	r1, sp
 8005a44:	7909      	ldrb	r1, [r1, #4]
 8005a46:	9104      	str	r1, [sp, #16]
 8005a48:	1861      	adds	r1, r4, r1
 8005a4a:	9a05      	ldr	r2, [sp, #20]
 8005a4c:	0052      	lsls	r2, r2, #1
 8005a4e:	1c52      	adds	r2, r2, #1
 8005a50:	466e      	mov	r6, sp
 8005a52:	7172      	strb	r2, [r6, #5]
 8005a54:	9a04      	ldr	r2, [sp, #16]
 8005a56:	0052      	lsls	r2, r2, #1
 8005a58:	9203      	str	r2, [sp, #12]
 8005a5a:	2600      	movs	r6, #0
 8005a5c:	9302      	str	r3, [sp, #8]
 8005a5e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005a60:	7963      	ldrb	r3, [r4, #5]
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d900      	bls.n	8005a68 <USBPD_PRL_SendMessage+0x54>
 8005a66:	e1f6      	b.n	8005e56 <USBPD_PRL_SendMessage+0x442>
 8005a68:	a701      	add	r7, pc, #4	@ (adr r7, 8005a70 <USBPD_PRL_SendMessage+0x5c>)
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	5aff      	ldrh	r7, [r7, r3]
 8005a6e:	44bf      	add	pc, r7
 8005a70:	00480020 	.word	0x00480020
 8005a74:	03e4005e 	.word	0x03e4005e
 8005a78:	00a8006a 	.word	0x00a8006a
 8005a7c:	015a0086 	.word	0x015a0086
 8005a80:	03e403e4 	.word	0x03e403e4
 8005a84:	030802de 	.word	0x030802de
 8005a88:	03560334 	.word	0x03560334
 8005a8c:	03de03e4 	.word	0x03de03e4
 8005a90:	03a6      	.short	0x03a6
 8005a92:	f3ef 8710 	mrs	r7, PRIMASK
 8005a96:	b672      	cpsid	i
 8005a98:	4668      	mov	r0, sp
 8005a9a:	7f00      	ldrb	r0, [r0, #28]
 8005a9c:	f7fb f8b4 	bl	8000c08 <PE_PRL_Control_RxEvent>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d105      	bne.n	8005ab0 <USBPD_PRL_SendMessage+0x9c>
 8005aa4:	7aa0      	ldrb	r0, [r4, #10]
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d102      	bne.n	8005ab0 <USBPD_PRL_SendMessage+0x9c>
 8005aaa:	20ff      	movs	r0, #255	@ 0xff
 8005aac:	7260      	strb	r0, [r4, #9]
 8005aae:	e000      	b.n	8005ab2 <USBPD_PRL_SendMessage+0x9e>
 8005ab0:	7266      	strb	r6, [r4, #9]
 8005ab2:	f387 8810 	msr	PRIMASK, r7
 8005ab6:	2006      	movs	r0, #6
 8005ab8:	e1a0      	b.n	8005dfc <USBPD_PRL_SendMessage+0x3e8>
 8005aba:	4668      	mov	r0, sp
 8005abc:	7f00      	ldrb	r0, [r0, #28]
 8005abe:	f010 fbe4 	bl	801628a <USBPD_PHY_SetResistor_SinkTxNG>
 8005ac2:	2002      	movs	r0, #2
 8005ac4:	9900      	ldr	r1, [sp, #0]
 8005ac6:	6809      	ldr	r1, [r1, #0]
 8005ac8:	7148      	strb	r0, [r1, #5]
 8005aca:	2013      	movs	r0, #19
 8005acc:	7060      	strb	r0, [r4, #1]
 8005ace:	e1c4      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005ad0:	2a01      	cmp	r2, #1
 8005ad2:	d10f      	bne.n	8005af4 <USBPD_PRL_SendMessage+0xe0>
 8005ad4:	7861      	ldrb	r1, [r4, #1]
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	d10a      	bne.n	8005af0 <USBPD_PRL_SendMessage+0xdc>
 8005ada:	e01c      	b.n	8005b16 <USBPD_PRL_SendMessage+0x102>
 8005adc:	2a02      	cmp	r2, #2
 8005ade:	d109      	bne.n	8005af4 <USBPD_PRL_SendMessage+0xe0>
 8005ae0:	4668      	mov	r0, sp
 8005ae2:	7f00      	ldrb	r0, [r0, #28]
 8005ae4:	f010 fc06 	bl	80162f4 <USBPD_PHY_IsResistor_SinkTxOk>
 8005ae8:	2801      	cmp	r0, #1
 8005aea:	d101      	bne.n	8005af0 <USBPD_PRL_SendMessage+0xdc>
 8005aec:	2005      	movs	r0, #5
 8005aee:	e185      	b.n	8005dfc <USBPD_PRL_SendMessage+0x3e8>
 8005af0:	2509      	movs	r5, #9
 8005af2:	e1b2      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005af4:	2106      	movs	r1, #6
 8005af6:	e154      	b.n	8005da2 <USBPD_PRL_SendMessage+0x38e>
 8005af8:	9903      	ldr	r1, [sp, #12]
 8005afa:	1861      	adds	r1, r4, r1
 8005afc:	8a49      	ldrh	r1, [r1, #18]
 8005afe:	0609      	lsls	r1, r1, #24
 8005b00:	0f89      	lsrs	r1, r1, #30
 8005b02:	2902      	cmp	r1, #2
 8005b04:	d107      	bne.n	8005b16 <USBPD_PRL_SendMessage+0x102>
 8005b06:	2a01      	cmp	r2, #1
 8005b08:	d101      	bne.n	8005b0e <USBPD_PRL_SendMessage+0xfa>
 8005b0a:	7142      	strb	r2, [r0, #5]
 8005b0c:	e1a5      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005b0e:	2a02      	cmp	r2, #2
 8005b10:	d101      	bne.n	8005b16 <USBPD_PRL_SendMessage+0x102>
 8005b12:	2104      	movs	r1, #4
 8005b14:	e145      	b.n	8005da2 <USBPD_PRL_SendMessage+0x38e>
 8005b16:	2105      	movs	r1, #5
 8005b18:	e143      	b.n	8005da2 <USBPD_PRL_SendMessage+0x38e>
 8005b1a:	9803      	ldr	r0, [sp, #12]
 8005b1c:	1820      	adds	r0, r4, r0
 8005b1e:	8a43      	ldrh	r3, [r0, #18]
 8005b20:	4acf      	ldr	r2, [pc, #828]	@ (8005e60 <.text_24>)
 8005b22:	401a      	ands	r2, r3
 8005b24:	ab08      	add	r3, sp, #32
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	06db      	lsls	r3, r3, #27
 8005b2a:	0edb      	lsrs	r3, r3, #27
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	8243      	strh	r3, [r0, #18]
 8005b30:	045a      	lsls	r2, r3, #17
 8005b32:	0c52      	lsrs	r2, r2, #17
 8005b34:	ab08      	add	r3, sp, #32
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	09db      	lsrs	r3, r3, #7
 8005b3a:	03db      	lsls	r3, r3, #15
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	8243      	strh	r3, [r0, #18]
 8005b40:	70a6      	strb	r6, [r4, #2]
 8005b42:	8a43      	ldrh	r3, [r0, #18]
 8005b44:	0bda      	lsrs	r2, r3, #15
 8005b46:	d023      	beq.n	8005b90 <USBPD_PRL_SendMessage+0x17c>
 8005b48:	9a02      	ldr	r2, [sp, #8]
 8005b4a:	7892      	ldrb	r2, [r2, #2]
 8005b4c:	9b02      	ldr	r3, [sp, #8]
 8005b4e:	78db      	ldrb	r3, [r3, #3]
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	18d2      	adds	r2, r2, r3
 8005b54:	83a2      	strh	r2, [r4, #28]
 8005b56:	8ba2      	ldrh	r2, [r4, #28]
 8005b58:	0a93      	lsrs	r3, r2, #10
 8005b5a:	07db      	lsls	r3, r3, #31
 8005b5c:	d40f      	bmi.n	8005b7e <USBPD_PRL_SendMessage+0x16a>
 8005b5e:	0ad2      	lsrs	r2, r2, #11
 8005b60:	0712      	lsls	r2, r2, #28
 8005b62:	d122      	bne.n	8005baa <USBPD_PRL_SendMessage+0x196>
 8005b64:	466a      	mov	r2, sp
 8005b66:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 8005b68:	1f12      	subs	r2, r2, #4
 8005b6a:	8462      	strh	r2, [r4, #34]	@ 0x22
 8005b6c:	05d2      	lsls	r2, r2, #23
 8005b6e:	0dd2      	lsrs	r2, r2, #23
 8005b70:	8ba3      	ldrh	r3, [r4, #28]
 8005b72:	27fe      	movs	r7, #254	@ 0xfe
 8005b74:	023f      	lsls	r7, r7, #8
 8005b76:	401f      	ands	r7, r3
 8005b78:	433a      	orrs	r2, r7
 8005b7a:	83a2      	strh	r2, [r4, #28]
 8005b7c:	e015      	b.n	8005baa <USBPD_PRL_SendMessage+0x196>
 8005b7e:	8466      	strh	r6, [r4, #34]	@ 0x22
 8005b80:	8a42      	ldrh	r2, [r0, #18]
 8005b82:	4bb8      	ldr	r3, [pc, #736]	@ (8005e64 <.text_25>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	2280      	movs	r2, #128	@ 0x80
 8005b88:	0152      	lsls	r2, r2, #5
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	8242      	strh	r2, [r0, #18]
 8005b8e:	e00c      	b.n	8005baa <USBPD_PRL_SendMessage+0x196>
 8005b90:	4ab4      	ldr	r2, [pc, #720]	@ (8005e64 <.text_25>)
 8005b92:	401a      	ands	r2, r3
 8005b94:	466b      	mov	r3, sp
 8005b96:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005b98:	1e9b      	subs	r3, r3, #2
 8005b9a:	089b      	lsrs	r3, r3, #2
 8005b9c:	031b      	lsls	r3, r3, #12
 8005b9e:	27e0      	movs	r7, #224	@ 0xe0
 8005ba0:	01ff      	lsls	r7, r7, #7
 8005ba2:	401f      	ands	r7, r3
 8005ba4:	4317      	orrs	r7, r2
 8005ba6:	8247      	strh	r7, [r0, #18]
 8005ba8:	8466      	strh	r6, [r4, #34]	@ 0x22
 8005baa:	aa08      	add	r2, sp, #32
 8005bac:	7812      	ldrb	r2, [r2, #0]
 8005bae:	2a0d      	cmp	r2, #13
 8005bb0:	d10a      	bne.n	8005bc8 <USBPD_PRL_SendMessage+0x1b4>
 8005bb2:	8a40      	ldrh	r0, [r0, #18]
 8005bb4:	22f0      	movs	r2, #240	@ 0xf0
 8005bb6:	0212      	lsls	r2, r2, #8
 8005bb8:	4002      	ands	r2, r0
 8005bba:	d105      	bne.n	8005bc8 <USBPD_PRL_SendMessage+0x1b4>
 8005bbc:	72ce      	strb	r6, [r1, #11]
 8005bbe:	220f      	movs	r2, #15
 8005bc0:	2103      	movs	r1, #3
 8005bc2:	1da0      	adds	r0, r4, #6
 8005bc4:	f019 f97c 	bl	801eec0 <__aeabi_memset>
 8005bc8:	2007      	movs	r0, #7
 8005bca:	e117      	b.n	8005dfc <USBPD_PRL_SendMessage+0x3e8>
 8005bcc:	4669      	mov	r1, sp
 8005bce:	8f0c      	ldrh	r4, [r1, #56]	@ 0x38
 8005bd0:	9903      	ldr	r1, [sp, #12]
 8005bd2:	1841      	adds	r1, r0, r1
 8005bd4:	4a5d      	ldr	r2, [pc, #372]	@ (8005d4c <USBPD_PRL_SendMessage+0x338>)
 8005bd6:	466b      	mov	r3, sp
 8005bd8:	7f1b      	ldrb	r3, [r3, #28]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	58d2      	ldr	r2, [r2, r3]
 8005bde:	466b      	mov	r3, sp
 8005be0:	791b      	ldrb	r3, [r3, #4]
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	18d2      	adds	r2, r2, r3
 8005be6:	8a52      	ldrh	r2, [r2, #18]
 8005be8:	0bd3      	lsrs	r3, r2, #15
 8005bea:	d074      	beq.n	8005cd6 <USBPD_PRL_SendMessage+0x2c2>
 8005bec:	8b83      	ldrh	r3, [r0, #28]
 8005bee:	0a9b      	lsrs	r3, r3, #10
 8005bf0:	07db      	lsls	r3, r3, #31
 8005bf2:	d465      	bmi.n	8005cc0 <USBPD_PRL_SendMessage+0x2ac>
 8005bf4:	4b55      	ldr	r3, [pc, #340]	@ (8005d4c <USBPD_PRL_SendMessage+0x338>)
 8005bf6:	466f      	mov	r7, sp
 8005bf8:	7f3f      	ldrb	r7, [r7, #28]
 8005bfa:	00bf      	lsls	r7, r7, #2
 8005bfc:	59db      	ldr	r3, [r3, r7]
 8005bfe:	8b9b      	ldrh	r3, [r3, #28]
 8005c00:	8c47      	ldrh	r7, [r0, #34]	@ 0x22
 8005c02:	2f1b      	cmp	r7, #27
 8005c04:	d30a      	bcc.n	8005c1c <USBPD_PRL_SendMessage+0x208>
 8005c06:	0bdf      	lsrs	r7, r3, #15
 8005c08:	d008      	beq.n	8005c1c <USBPD_PRL_SendMessage+0x208>
 8005c0a:	23e0      	movs	r3, #224	@ 0xe0
 8005c0c:	01db      	lsls	r3, r3, #7
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	824b      	strh	r3, [r1, #18]
 8005c12:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 8005c14:	391a      	subs	r1, #26
 8005c16:	8441      	strh	r1, [r0, #34]	@ 0x22
 8005c18:	241e      	movs	r4, #30
 8005c1a:	e051      	b.n	8005cc0 <USBPD_PRL_SendMessage+0x2ac>
 8005c1c:	0ada      	lsrs	r2, r3, #11
 8005c1e:	0712      	lsls	r2, r2, #28
 8005c20:	d107      	bne.n	8005c32 <USBPD_PRL_SendMessage+0x21e>
 8005c22:	22fe      	movs	r2, #254	@ 0xfe
 8005c24:	0212      	lsls	r2, r2, #8
 8005c26:	401a      	ands	r2, r3
 8005c28:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005c2a:	05db      	lsls	r3, r3, #23
 8005c2c:	0ddb      	lsrs	r3, r3, #23
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	8383      	strh	r3, [r0, #28]
 8005c32:	8a4b      	ldrh	r3, [r1, #18]
 8005c34:	4a8b      	ldr	r2, [pc, #556]	@ (8005e64 <.text_25>)
 8005c36:	401a      	ands	r2, r3
 8005c38:	824a      	strh	r2, [r1, #18]
 8005c3a:	8b83      	ldrh	r3, [r0, #28]
 8005c3c:	0bdb      	lsrs	r3, r3, #15
 8005c3e:	d03c      	beq.n	8005cba <USBPD_PRL_SendMessage+0x2a6>
 8005c40:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005c42:	1c9b      	adds	r3, r3, #2
 8005c44:	089b      	lsrs	r3, r3, #2
 8005c46:	031b      	lsls	r3, r3, #12
 8005c48:	24e0      	movs	r4, #224	@ 0xe0
 8005c4a:	01e4      	lsls	r4, r4, #7
 8005c4c:	401c      	ands	r4, r3
 8005c4e:	4314      	orrs	r4, r2
 8005c50:	824c      	strh	r4, [r1, #18]
 8005c52:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8005c54:	1c80      	adds	r0, r0, #2
 8005c56:	0781      	lsls	r1, r0, #30
 8005c58:	0f89      	lsrs	r1, r1, #30
 8005c5a:	d025      	beq.n	8005ca8 <USBPD_PRL_SendMessage+0x294>
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	483b      	ldr	r0, [pc, #236]	@ (8005d4c <USBPD_PRL_SendMessage+0x338>)
 8005c60:	9b05      	ldr	r3, [sp, #20]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	18c0      	adds	r0, r0, r3
 8005c66:	9000      	str	r0, [sp, #0]
 8005c68:	9802      	ldr	r0, [sp, #8]
 8005c6a:	9102      	str	r1, [sp, #8]
 8005c6c:	e004      	b.n	8005c78 <USBPD_PRL_SendMessage+0x264>
 8005c6e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005c70:	1859      	adds	r1, r3, r1
 8005c72:	1841      	adds	r1, r0, r1
 8005c74:	710e      	strb	r6, [r1, #4]
 8005c76:	1c52      	adds	r2, r2, #1
 8005c78:	9900      	ldr	r1, [sp, #0]
 8005c7a:	680b      	ldr	r3, [r1, #0]
 8005c7c:	b2d1      	uxtb	r1, r2
 8005c7e:	2404      	movs	r4, #4
 8005c80:	9f02      	ldr	r7, [sp, #8]
 8005c82:	1be4      	subs	r4, r4, r7
 8005c84:	42a1      	cmp	r1, r4
 8005c86:	d3f2      	bcc.n	8005c6e <USBPD_PRL_SendMessage+0x25a>
 8005c88:	9002      	str	r0, [sp, #8]
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	3012      	adds	r0, #18
 8005c8e:	9903      	ldr	r1, [sp, #12]
 8005c90:	1840      	adds	r0, r0, r1
 8005c92:	8801      	ldrh	r1, [r0, #0]
 8005c94:	4a73      	ldr	r2, [pc, #460]	@ (8005e64 <.text_25>)
 8005c96:	400a      	ands	r2, r1
 8005c98:	0b09      	lsrs	r1, r1, #12
 8005c9a:	1c49      	adds	r1, r1, #1
 8005c9c:	0309      	lsls	r1, r1, #12
 8005c9e:	23e0      	movs	r3, #224	@ 0xe0
 8005ca0:	01db      	lsls	r3, r3, #7
 8005ca2:	400b      	ands	r3, r1
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	8003      	strh	r3, [r0, #0]
 8005ca8:	9800      	ldr	r0, [sp, #0]
 8005caa:	6800      	ldr	r0, [r0, #0]
 8005cac:	3012      	adds	r0, #18
 8005cae:	9903      	ldr	r1, [sp, #12]
 8005cb0:	5a40      	ldrh	r0, [r0, r1]
 8005cb2:	0440      	lsls	r0, r0, #17
 8005cb4:	0f40      	lsrs	r0, r0, #29
 8005cb6:	0084      	lsls	r4, r0, #2
 8005cb8:	1ca4      	adds	r4, r4, #2
 8005cba:	9800      	ldr	r0, [sp, #0]
 8005cbc:	6800      	ldr	r0, [r0, #0]
 8005cbe:	8446      	strh	r6, [r0, #34]	@ 0x22
 8005cc0:	9800      	ldr	r0, [sp, #0]
 8005cc2:	6800      	ldr	r0, [r0, #0]
 8005cc4:	8b80      	ldrh	r0, [r0, #28]
 8005cc6:	9902      	ldr	r1, [sp, #8]
 8005cc8:	7088      	strb	r0, [r1, #2]
 8005cca:	9800      	ldr	r0, [sp, #0]
 8005ccc:	6800      	ldr	r0, [r0, #0]
 8005cce:	8b80      	ldrh	r0, [r0, #28]
 8005cd0:	0a00      	lsrs	r0, r0, #8
 8005cd2:	9902      	ldr	r1, [sp, #8]
 8005cd4:	70c8      	strb	r0, [r1, #3]
 8005cd6:	9800      	ldr	r0, [sp, #0]
 8005cd8:	6802      	ldr	r2, [r0, #0]
 8005cda:	0010      	movs	r0, r2
 8005cdc:	3012      	adds	r0, #18
 8005cde:	9903      	ldr	r1, [sp, #12]
 8005ce0:	1840      	adds	r0, r0, r1
 8005ce2:	8803      	ldrh	r3, [r0, #0]
 8005ce4:	498c      	ldr	r1, [pc, #560]	@ (8005f18 <.text_30>)
 8005ce6:	4019      	ands	r1, r3
 8005ce8:	320b      	adds	r2, #11
 8005cea:	9b04      	ldr	r3, [sp, #16]
 8005cec:	5cd2      	ldrb	r2, [r2, r3]
 8005cee:	0253      	lsls	r3, r2, #9
 8005cf0:	22e0      	movs	r2, #224	@ 0xe0
 8005cf2:	0112      	lsls	r2, r2, #4
 8005cf4:	401a      	ands	r2, r3
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	8002      	strh	r2, [r0, #0]
 8005cfa:	9802      	ldr	r0, [sp, #8]
 8005cfc:	7002      	strb	r2, [r0, #0]
 8005cfe:	9800      	ldr	r0, [sp, #0]
 8005d00:	6800      	ldr	r0, [r0, #0]
 8005d02:	3012      	adds	r0, #18
 8005d04:	9903      	ldr	r1, [sp, #12]
 8005d06:	5a40      	ldrh	r0, [r0, r1]
 8005d08:	0a00      	lsrs	r0, r0, #8
 8005d0a:	9902      	ldr	r1, [sp, #8]
 8005d0c:	7048      	strb	r0, [r1, #1]
 8005d0e:	9800      	ldr	r0, [sp, #0]
 8005d10:	6800      	ldr	r0, [r0, #0]
 8005d12:	81c4      	strh	r4, [r0, #14]
 8005d14:	210a      	movs	r1, #10
 8005d16:	7141      	strb	r1, [r0, #5]
 8005d18:	2102      	movs	r1, #2
 8005d1a:	7401      	strb	r1, [r0, #16]
 8005d1c:	b2a0      	uxth	r0, r4
 8005d1e:	9000      	str	r0, [sp, #0]
 8005d20:	9b02      	ldr	r3, [sp, #8]
 8005d22:	4668      	mov	r0, sp
 8005d24:	7902      	ldrb	r2, [r0, #4]
 8005d26:	7f01      	ldrb	r1, [r0, #28]
 8005d28:	2002      	movs	r0, #2
 8005d2a:	4e7c      	ldr	r6, [pc, #496]	@ (8005f1c <.text_31>)
 8005d2c:	6836      	ldr	r6, [r6, #0]
 8005d2e:	47b0      	blx	r6
 8005d30:	497b      	ldr	r1, [pc, #492]	@ (8005f20 <.text_32>)
 8005d32:	4668      	mov	r0, sp
 8005d34:	7940      	ldrb	r0, [r0, #5]
 8005d36:	f011 fe51 	bl	80179dc <USBPD_TIM_Start>
 8005d3a:	b2a3      	uxth	r3, r4
 8005d3c:	9a02      	ldr	r2, [sp, #8]
 8005d3e:	4668      	mov	r0, sp
 8005d40:	7901      	ldrb	r1, [r0, #4]
 8005d42:	7f00      	ldrb	r0, [r0, #28]
 8005d44:	f010 fa5b 	bl	80161fe <USBPD_PHY_SendMessage>
 8005d48:	e087      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005d4a:	bf00      	nop
 8005d4c:	20000288 	.word	0x20000288
 8005d50:	f3ef 8410 	mrs	r4, PRIMASK
 8005d54:	b672      	cpsid	i
 8005d56:	9800      	ldr	r0, [sp, #0]
 8005d58:	6800      	ldr	r0, [r0, #0]
 8005d5a:	7940      	ldrb	r0, [r0, #5]
 8005d5c:	280a      	cmp	r0, #10
 8005d5e:	d109      	bne.n	8005d74 <USBPD_PRL_SendMessage+0x360>
 8005d60:	4668      	mov	r0, sp
 8005d62:	7940      	ldrb	r0, [r0, #5]
 8005d64:	f011 fea8 	bl	8017ab8 <USBPD_TIM_IsExpired>
 8005d68:	2801      	cmp	r0, #1
 8005d6a:	d103      	bne.n	8005d74 <USBPD_PRL_SendMessage+0x360>
 8005d6c:	200d      	movs	r0, #13
 8005d6e:	9900      	ldr	r1, [sp, #0]
 8005d70:	6809      	ldr	r1, [r1, #0]
 8005d72:	7148      	strb	r0, [r1, #5]
 8005d74:	f384 8810 	msr	PRIMASK, r4
 8005d78:	e06f      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005d7a:	7aca      	ldrb	r2, [r1, #11]
 8005d7c:	8b67      	ldrh	r7, [r4, #26]
 8005d7e:	053f      	lsls	r7, r7, #20
 8005d80:	0f7f      	lsrs	r7, r7, #29
 8005d82:	42ba      	cmp	r2, r7
 8005d84:	d10c      	bne.n	8005da0 <USBPD_PRL_SendMessage+0x38c>
 8005d86:	7ea3      	ldrb	r3, [r4, #26]
 8005d88:	06db      	lsls	r3, r3, #27
 8005d8a:	0edb      	lsrs	r3, r3, #27
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d107      	bne.n	8005da0 <USBPD_PRL_SendMessage+0x38c>
 8005d90:	1c52      	adds	r2, r2, #1
 8005d92:	0750      	lsls	r0, r2, #29
 8005d94:	0f40      	lsrs	r0, r0, #29
 8005d96:	72c8      	strb	r0, [r1, #11]
 8005d98:	9800      	ldr	r0, [sp, #0]
 8005d9a:	6800      	ldr	r0, [r0, #0]
 8005d9c:	7146      	strb	r6, [r0, #5]
 8005d9e:	e011      	b.n	8005dc4 <USBPD_PRL_SendMessage+0x3b0>
 8005da0:	210d      	movs	r1, #13
 8005da2:	7141      	strb	r1, [r0, #5]
 8005da4:	e059      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005da6:	7ac8      	ldrb	r0, [r1, #11]
 8005da8:	1c40      	adds	r0, r0, #1
 8005daa:	0740      	lsls	r0, r0, #29
 8005dac:	0f40      	lsrs	r0, r0, #29
 8005dae:	72c8      	strb	r0, [r1, #11]
 8005db0:	9800      	ldr	r0, [sp, #0]
 8005db2:	6800      	ldr	r0, [r0, #0]
 8005db4:	7146      	strb	r6, [r0, #5]
 8005db6:	8ba1      	ldrh	r1, [r4, #28]
 8005db8:	485a      	ldr	r0, [pc, #360]	@ (8005f24 <.text_33>)
 8005dba:	4008      	ands	r0, r1
 8005dbc:	83a0      	strh	r0, [r4, #28]
 8005dbe:	495a      	ldr	r1, [pc, #360]	@ (8005f28 <.text_34>)
 8005dc0:	4001      	ands	r1, r0
 8005dc2:	83a1      	strh	r1, [r4, #28]
 8005dc4:	2505      	movs	r5, #5
 8005dc6:	e048      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005dc8:	78a0      	ldrb	r0, [r4, #2]
 8005dca:	1c40      	adds	r0, r0, #1
 8005dcc:	70a0      	strb	r0, [r4, #2]
 8005dce:	9a03      	ldr	r2, [sp, #12]
 8005dd0:	18a2      	adds	r2, r4, r2
 8005dd2:	8a52      	ldrh	r2, [r2, #18]
 8005dd4:	0613      	lsls	r3, r2, #24
 8005dd6:	0f9b      	lsrs	r3, r3, #30
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <USBPD_PRL_SendMessage+0x3cc>
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e000      	b.n	8005de2 <USBPD_PRL_SendMessage+0x3ce>
 8005de0:	2302      	movs	r3, #2
 8005de2:	0bd2      	lsrs	r2, r2, #15
 8005de4:	d006      	beq.n	8005df4 <USBPD_PRL_SendMessage+0x3e0>
 8005de6:	8ba2      	ldrh	r2, [r4, #28]
 8005de8:	0bd4      	lsrs	r4, r2, #15
 8005dea:	d103      	bne.n	8005df4 <USBPD_PRL_SendMessage+0x3e0>
 8005dec:	05d2      	lsls	r2, r2, #23
 8005dee:	0dd2      	lsrs	r2, r2, #23
 8005df0:	2a1b      	cmp	r2, #27
 8005df2:	d207      	bcs.n	8005e04 <USBPD_PRL_SendMessage+0x3f0>
 8005df4:	b2c0      	uxtb	r0, r0
 8005df6:	4283      	cmp	r3, r0
 8005df8:	d304      	bcc.n	8005e04 <USBPD_PRL_SendMessage+0x3f0>
 8005dfa:	2010      	movs	r0, #16
 8005dfc:	9900      	ldr	r1, [sp, #0]
 8005dfe:	6809      	ldr	r1, [r1, #0]
 8005e00:	7148      	strb	r0, [r1, #5]
 8005e02:	e02a      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005e04:	9800      	ldr	r0, [sp, #0]
 8005e06:	6800      	ldr	r0, [r0, #0]
 8005e08:	7146      	strb	r6, [r0, #5]
 8005e0a:	2507      	movs	r5, #7
 8005e0c:	7ac8      	ldrb	r0, [r1, #11]
 8005e0e:	1c40      	adds	r0, r0, #1
 8005e10:	2207      	movs	r2, #7
 8005e12:	4002      	ands	r2, r0
 8005e14:	72ca      	strb	r2, [r1, #11]
 8005e16:	e020      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005e18:	210a      	movs	r1, #10
 8005e1a:	7141      	strb	r1, [r0, #5]
 8005e1c:	2002      	movs	r0, #2
 8005e1e:	7420      	strb	r0, [r4, #16]
 8005e20:	493f      	ldr	r1, [pc, #252]	@ (8005f20 <.text_32>)
 8005e22:	4668      	mov	r0, sp
 8005e24:	7940      	ldrb	r0, [r0, #5]
 8005e26:	f011 fdd9 	bl	80179dc <USBPD_TIM_Start>
 8005e2a:	89e3      	ldrh	r3, [r4, #14]
 8005e2c:	9a02      	ldr	r2, [sp, #8]
 8005e2e:	4668      	mov	r0, sp
 8005e30:	7901      	ldrb	r1, [r0, #4]
 8005e32:	7f00      	ldrb	r0, [r0, #28]
 8005e34:	f010 f9e3 	bl	80161fe <USBPD_PHY_SendMessage>
 8005e38:	4668      	mov	r0, sp
 8005e3a:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
 8005e3c:	9000      	str	r0, [sp, #0]
 8005e3e:	9b02      	ldr	r3, [sp, #8]
 8005e40:	4668      	mov	r0, sp
 8005e42:	7902      	ldrb	r2, [r0, #4]
 8005e44:	7f01      	ldrb	r1, [r0, #28]
 8005e46:	2002      	movs	r0, #2
 8005e48:	4c34      	ldr	r4, [pc, #208]	@ (8005f1c <.text_31>)
 8005e4a:	6824      	ldr	r4, [r4, #0]
 8005e4c:	47a0      	blx	r4
 8005e4e:	e004      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005e50:	7146      	strb	r6, [r0, #5]
 8005e52:	2506      	movs	r5, #6
 8005e54:	e001      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005e56:	7146      	strb	r6, [r0, #5]
 8005e58:	2510      	movs	r5, #16
 8005e5a:	0028      	movs	r0, r5
 8005e5c:	b009      	add	sp, #36	@ 0x24
 8005e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e60 <.text_24>:
 8005e60:	0000ffe0 	.word	0x0000ffe0

08005e64 <.text_25>:
 8005e64:	00008fff 	.word	0x00008fff

08005e68 <USBPD_PRL_ResetRequestProcess>:
 8005e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6a:	0005      	movs	r5, r0
 8005e6c:	000e      	movs	r6, r1
 8005e6e:	482f      	ldr	r0, [pc, #188]	@ (8005f2c <.text_35>)
 8005e70:	00a9      	lsls	r1, r5, #2
 8005e72:	1840      	adds	r0, r0, r1
 8005e74:	9000      	str	r0, [sp, #0]
 8005e76:	6804      	ldr	r4, [r0, #0]
 8005e78:	2700      	movs	r7, #0
 8005e7a:	70e7      	strb	r7, [r4, #3]
 8005e7c:	72e7      	strb	r7, [r4, #11]
 8005e7e:	7327      	strb	r7, [r4, #12]
 8005e80:	7367      	strb	r7, [r4, #13]
 8005e82:	220f      	movs	r2, #15
 8005e84:	2103      	movs	r1, #3
 8005e86:	1da0      	adds	r0, r4, #6
 8005e88:	f019 f81a 	bl	801eec0 <__aeabi_memset>
 8005e8c:	9800      	ldr	r0, [sp, #0]
 8005e8e:	6800      	ldr	r0, [r0, #0]
 8005e90:	7147      	strb	r7, [r0, #5]
 8005e92:	9700      	str	r7, [sp, #0]
 8005e94:	2300      	movs	r3, #0
 8005e96:	0032      	movs	r2, r6
 8005e98:	0029      	movs	r1, r5
 8005e9a:	2002      	movs	r0, #2
 8005e9c:	4f1f      	ldr	r7, [pc, #124]	@ (8005f1c <.text_31>)
 8005e9e:	683f      	ldr	r7, [r7, #0]
 8005ea0:	47b8      	blx	r7
 8005ea2:	0028      	movs	r0, r5
 8005ea4:	f000 f849 	bl	8005f3a <PRL_DisableRX>
 8005ea8:	0031      	movs	r1, r6
 8005eaa:	0028      	movs	r0, r5
 8005eac:	f010 f991 	bl	80161d2 <USBPD_PHY_ResetRequest>
 8005eb0:	2005      	movs	r0, #5
 8005eb2:	7120      	strb	r0, [r4, #4]
 8005eb4:	78e0      	ldrb	r0, [r4, #3]
 8005eb6:	2801      	cmp	r0, #1
 8005eb8:	d002      	beq.n	8005ec0 <USBPD_PRL_ResetRequestProcess+0x58>
 8005eba:	7920      	ldrb	r0, [r4, #4]
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d1f9      	bne.n	8005eb4 <USBPD_PRL_ResetRequestProcess+0x4c>
 8005ec0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08005ec2 <USBDPD_PRL_BistCarrierEyeMode>:
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	2905      	cmp	r1, #5
 8005ec6:	d102      	bne.n	8005ece <USBDPD_PRL_BistCarrierEyeMode+0xc>
 8005ec8:	f010 f9b8 	bl	801623c <USBPD_PHY_Send_BIST_Pattern>
 8005ecc:	bd02      	pop	{r1, pc}
 8005ece:	2010      	movs	r0, #16
 8005ed0:	bd02      	pop	{r1, pc}

08005ed2 <USBDPD_PRL_BistCarrierEyeModeExit>:
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	2905      	cmp	r1, #5
 8005ed6:	d103      	bne.n	8005ee0 <USBDPD_PRL_BistCarrierEyeModeExit+0xe>
 8005ed8:	2107      	movs	r1, #7
 8005eda:	f010 f9bf 	bl	801625c <USBPD_PHY_ExitTransmit>
 8005ede:	bd02      	pop	{r1, pc}
 8005ee0:	2010      	movs	r0, #16
 8005ee2:	bd02      	pop	{r1, pc}

08005ee4 <USBPD_PRL_Reset>:
 8005ee4:	b570      	push	{r4, r5, r6, lr}
 8005ee6:	0004      	movs	r4, r0
 8005ee8:	4810      	ldr	r0, [pc, #64]	@ (8005f2c <.text_35>)
 8005eea:	00a1      	lsls	r1, r4, #2
 8005eec:	5845      	ldr	r5, [r0, r1]
 8005eee:	2600      	movs	r6, #0
 8005ef0:	716e      	strb	r6, [r5, #5]
 8005ef2:	702e      	strb	r6, [r5, #0]
 8005ef4:	712e      	strb	r6, [r5, #4]
 8005ef6:	72ee      	strb	r6, [r5, #11]
 8005ef8:	732e      	strb	r6, [r5, #12]
 8005efa:	736e      	strb	r6, [r5, #13]
 8005efc:	220f      	movs	r2, #15
 8005efe:	2103      	movs	r1, #3
 8005f00:	1da8      	adds	r0, r5, #6
 8005f02:	f018 ffdd 	bl	801eec0 <__aeabi_memset>
 8005f06:	2025      	movs	r0, #37	@ 0x25
 8005f08:	542e      	strb	r6, [r5, r0]
 8005f0a:	0020      	movs	r0, r4
 8005f0c:	f010 f957 	bl	80161be <USBPD_PHY_Reset>
 8005f10:	0020      	movs	r0, r4
 8005f12:	f010 fa0e 	bl	8016332 <USBPD_PHY_EnableRX>
 8005f16:	bd70      	pop	{r4, r5, r6, pc}

08005f18 <.text_30>:
 8005f18:	0000f1ff 	.word	0x0000f1ff

08005f1c <.text_31>:
 8005f1c:	20000000 	.word	0x20000000

08005f20 <.text_32>:
 8005f20:	00002710 	.word	0x00002710

08005f24 <.text_33>:
 8005f24:	000087ff 	.word	0x000087ff

08005f28 <.text_34>:
 8005f28:	0000fbff 	.word	0x0000fbff

08005f2c <.text_35>:
 8005f2c:	20000288 	.word	0x20000288

08005f30 <USBPD_PRL_Stop>:
 8005f30:	b580      	push	{r7, lr}
 8005f32:	f010 fa0d 	bl	8016350 <USBPD_PHY_DisableRX>
 8005f36:	bd01      	pop	{r0, pc}

08005f38 <USBPD_PRL_DeInit>:
 8005f38:	4770      	bx	lr

08005f3a <PRL_DisableRX>:
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	f010 fa08 	bl	8016350 <USBPD_PHY_DisableRX>
 8005f40:	bd01      	pop	{r0, pc}
	...

08005f44 <PRL_Received>:
 8005f44:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8005f46:	b089      	sub	sp, #36	@ 0x24
 8005f48:	a809      	add	r0, sp, #36	@ 0x24
 8005f4a:	7805      	ldrb	r5, [r0, #0]
 8005f4c:	48d0      	ldr	r0, [pc, #832]	@ (8006290 <PRL_Received+0x34c>)
 8005f4e:	00a9      	lsls	r1, r5, #2
 8005f50:	1846      	adds	r6, r0, r1
 8005f52:	6834      	ldr	r4, [r6, #0]
 8005f54:	4628      	mov	r0, r5
 8005f56:	f010 f927 	bl	80161a8 <USBPD_PHY_GetMinGOODCRCTimerValue>
 8005f5a:	a909      	add	r1, sp, #36	@ 0x24
 8005f5c:	7809      	ldrb	r1, [r1, #0]
 8005f5e:	0049      	lsls	r1, r1, #1
 8005f60:	466a      	mov	r2, sp
 8005f62:	7011      	strb	r1, [r2, #0]
 8005f64:	0001      	movs	r1, r0
 8005f66:	4668      	mov	r0, sp
 8005f68:	7800      	ldrb	r0, [r0, #0]
 8005f6a:	f011 fd37 	bl	80179dc <USBPD_TIM_Start>
 8005f6e:	2030      	movs	r0, #48	@ 0x30
 8005f70:	5c20      	ldrb	r0, [r4, r0]
 8005f72:	2131      	movs	r1, #49	@ 0x31
 8005f74:	5c61      	ldrb	r1, [r4, r1]
 8005f76:	0209      	lsls	r1, r1, #8
 8005f78:	1840      	adds	r0, r0, r1
 8005f7a:	4669      	mov	r1, sp
 8005f7c:	8088      	strh	r0, [r1, #4]
 8005f7e:	4668      	mov	r0, sp
 8005f80:	8880      	ldrh	r0, [r0, #4]
 8005f82:	0440      	lsls	r0, r0, #17
 8005f84:	0f40      	lsrs	r0, r0, #29
 8005f86:	0080      	lsls	r0, r0, #2
 8005f88:	9005      	str	r0, [sp, #20]
 8005f8a:	1c80      	adds	r0, r0, #2
 8005f8c:	9007      	str	r0, [sp, #28]
 8005f8e:	48c1      	ldr	r0, [pc, #772]	@ (8006294 <.text_40>)
 8005f90:	8889      	ldrh	r1, [r1, #4]
 8005f92:	4001      	ands	r1, r0
 8005f94:	2901      	cmp	r1, #1
 8005f96:	d116      	bne.n	8005fc6 <PRL_Received+0x82>
 8005f98:	0068      	lsls	r0, r5, #1
 8005f9a:	1c40      	adds	r0, r0, #1
 8005f9c:	b2c0      	uxtb	r0, r0
 8005f9e:	f011 fd8b 	bl	8017ab8 <USBPD_TIM_IsExpired>
 8005fa2:	2801      	cmp	r0, #1
 8005fa4:	d04c      	beq.n	8006040 <PRL_Received+0xfc>
 8005fa6:	200b      	movs	r0, #11
 8005fa8:	6831      	ldr	r1, [r6, #0]
 8005faa:	7148      	strb	r0, [r1, #5]
 8005fac:	4668      	mov	r0, sp
 8005fae:	8880      	ldrh	r0, [r0, #4]
 8005fb0:	8360      	strh	r0, [r4, #26]
 8005fb2:	9807      	ldr	r0, [sp, #28]
 8005fb4:	9000      	str	r0, [sp, #0]
 8005fb6:	0023      	movs	r3, r4
 8005fb8:	3330      	adds	r3, #48	@ 0x30
 8005fba:	a80a      	add	r0, sp, #40	@ 0x28
 8005fbc:	7802      	ldrb	r2, [r0, #0]
 8005fbe:	a809      	add	r0, sp, #36	@ 0x24
 8005fc0:	7801      	ldrb	r1, [r0, #0]
 8005fc2:	2001      	movs	r0, #1
 8005fc4:	e15f      	b.n	8006286 <PRL_Received+0x342>
 8005fc6:	49b4      	ldr	r1, [pc, #720]	@ (8006298 <.text_41>)
 8005fc8:	880f      	ldrh	r7, [r1, #0]
 8005fca:	2601      	movs	r6, #1
 8005fcc:	72a6      	strb	r6, [r4, #10]
 8005fce:	a90a      	add	r1, sp, #40	@ 0x28
 8005fd0:	7809      	ldrb	r1, [r1, #0]
 8005fd2:	1861      	adds	r1, r4, r1
 8005fd4:	9104      	str	r1, [sp, #16]
 8005fd6:	2500      	movs	r5, #0
 8005fd8:	4669      	mov	r1, sp
 8005fda:	8889      	ldrh	r1, [r1, #4]
 8005fdc:	4008      	ands	r0, r1
 8005fde:	280d      	cmp	r0, #13
 8005fe0:	d106      	bne.n	8005ff0 <PRL_Received+0xac>
 8005fe2:	9904      	ldr	r1, [sp, #16]
 8005fe4:	72cd      	strb	r5, [r1, #11]
 8005fe6:	220f      	movs	r2, #15
 8005fe8:	2103      	movs	r1, #3
 8005fea:	1da0      	adds	r0, r4, #6
 8005fec:	f018 ff68 	bl	801eec0 <__aeabi_memset>
 8005ff0:	a80a      	add	r0, sp, #40	@ 0x28
 8005ff2:	7800      	ldrb	r0, [r0, #0]
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d10d      	bne.n	8006014 <PRL_Received+0xd0>
 8005ff8:	8a61      	ldrh	r1, [r4, #18]
 8005ffa:	094a      	lsrs	r2, r1, #5
 8005ffc:	2001      	movs	r0, #1
 8005ffe:	4010      	ands	r0, r2
 8006000:	0a0a      	lsrs	r2, r1, #8
 8006002:	2101      	movs	r1, #1
 8006004:	4011      	ands	r1, r2
 8006006:	4abf      	ldr	r2, [pc, #764]	@ (8006304 <.text_44>)
 8006008:	403a      	ands	r2, r7
 800600a:	0143      	lsls	r3, r0, #5
 800600c:	4313      	orrs	r3, r2
 800600e:	0208      	lsls	r0, r1, #8
 8006010:	4318      	orrs	r0, r3
 8006012:	e001      	b.n	8006018 <PRL_Received+0xd4>
 8006014:	48bc      	ldr	r0, [pc, #752]	@ (8006308 <.text_45>)
 8006016:	4038      	ands	r0, r7
 8006018:	49bc      	ldr	r1, [pc, #752]	@ (800630c <.text_46>)
 800601a:	4001      	ands	r1, r0
 800601c:	4668      	mov	r0, sp
 800601e:	8880      	ldrh	r0, [r0, #4]
 8006020:	22e0      	movs	r2, #224	@ 0xe0
 8006022:	0112      	lsls	r2, r2, #4
 8006024:	4002      	ands	r2, r0
 8006026:	430a      	orrs	r2, r1
 8006028:	2040      	movs	r0, #64	@ 0x40
 800602a:	4310      	orrs	r0, r2
 800602c:	7620      	strb	r0, [r4, #24]
 800602e:	0a00      	lsrs	r0, r0, #8
 8006030:	7660      	strb	r0, [r4, #25]
 8006032:	a80a      	add	r0, sp, #40	@ 0x28
 8006034:	7801      	ldrb	r1, [r0, #0]
 8006036:	a809      	add	r0, sp, #36	@ 0x24
 8006038:	7800      	ldrb	r0, [r0, #0]
 800603a:	f7fa ff49 	bl	8000ed0 <PE_PRL_PostReceiveEvent>
 800603e:	2800      	cmp	r0, #0
 8006040:	d100      	bne.n	8006044 <PRL_Received+0x100>
 8006042:	e123      	b.n	800628c <PRL_Received+0x348>
 8006044:	7426      	strb	r6, [r4, #16]
 8006046:	4668      	mov	r0, sp
 8006048:	7800      	ldrb	r0, [r0, #0]
 800604a:	f011 fd35 	bl	8017ab8 <USBPD_TIM_IsExpired>
 800604e:	2800      	cmp	r0, #0
 8006050:	d0f9      	beq.n	8006046 <PRL_Received+0x102>
 8006052:	2302      	movs	r3, #2
 8006054:	0022      	movs	r2, r4
 8006056:	3218      	adds	r2, #24
 8006058:	a80a      	add	r0, sp, #40	@ 0x28
 800605a:	7801      	ldrb	r1, [r0, #0]
 800605c:	a809      	add	r0, sp, #36	@ 0x24
 800605e:	7800      	ldrb	r0, [r0, #0]
 8006060:	f010 f8cd 	bl	80161fe <USBPD_PHY_SendMessage>
 8006064:	9006      	str	r0, [sp, #24]
 8006066:	a80a      	add	r0, sp, #40	@ 0x28
 8006068:	7800      	ldrb	r0, [r0, #0]
 800606a:	7260      	strb	r0, [r4, #9]
 800606c:	0021      	movs	r1, r4
 800606e:	3130      	adds	r1, #48	@ 0x30
 8006070:	a809      	add	r0, sp, #36	@ 0x24
 8006072:	7800      	ldrb	r0, [r0, #0]
 8006074:	f7fa ff60 	bl	8000f38 <PE_PRL_PostReceiveEventCopy>
 8006078:	2033      	movs	r0, #51	@ 0x33
 800607a:	5c20      	ldrb	r0, [r4, r0]
 800607c:	2132      	movs	r1, #50	@ 0x32
 800607e:	5c61      	ldrb	r1, [r4, r1]
 8006080:	0203      	lsls	r3, r0, #8
 8006082:	18ca      	adds	r2, r1, r3
 8006084:	466b      	mov	r3, sp
 8006086:	80da      	strh	r2, [r3, #6]
 8006088:	466a      	mov	r2, sp
 800608a:	8892      	ldrh	r2, [r2, #4]
 800608c:	0452      	lsls	r2, r2, #17
 800608e:	0f52      	lsrs	r2, r2, #29
 8006090:	81da      	strh	r2, [r3, #14]
 8006092:	466a      	mov	r2, sp
 8006094:	88d2      	ldrh	r2, [r2, #6]
 8006096:	05d2      	lsls	r2, r2, #23
 8006098:	0dd2      	lsrs	r2, r2, #23
 800609a:	811a      	strh	r2, [r3, #8]
 800609c:	466a      	mov	r2, sp
 800609e:	88d2      	ldrh	r2, [r2, #6]
 80060a0:	0bd2      	lsrs	r2, r2, #15
 80060a2:	819a      	strh	r2, [r3, #12]
 80060a4:	466a      	mov	r2, sp
 80060a6:	8892      	ldrh	r2, [r2, #4]
 80060a8:	0bd2      	lsrs	r2, r2, #15
 80060aa:	815a      	strh	r2, [r3, #10]
 80060ac:	d007      	beq.n	80060be <PRL_Received+0x17a>
 80060ae:	466a      	mov	r2, sp
 80060b0:	8992      	ldrh	r2, [r2, #12]
 80060b2:	2a00      	cmp	r2, #0
 80060b4:	d103      	bne.n	80060be <PRL_Received+0x17a>
 80060b6:	4668      	mov	r0, sp
 80060b8:	8900      	ldrh	r0, [r0, #8]
 80060ba:	1d00      	adds	r0, r0, #4
 80060bc:	e01b      	b.n	80060f6 <PRL_Received+0x1b2>
 80060be:	7822      	ldrb	r2, [r4, #0]
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	d117      	bne.n	80060f4 <PRL_Received+0x1b0>
 80060c4:	466a      	mov	r2, sp
 80060c6:	89d2      	ldrh	r2, [r2, #14]
 80060c8:	2a00      	cmp	r2, #0
 80060ca:	d013      	beq.n	80060f4 <PRL_Received+0x1b0>
 80060cc:	466a      	mov	r2, sp
 80060ce:	8892      	ldrh	r2, [r2, #4]
 80060d0:	06d2      	lsls	r2, r2, #27
 80060d2:	0ed2      	lsrs	r2, r2, #27
 80060d4:	2a03      	cmp	r2, #3
 80060d6:	d10d      	bne.n	80060f4 <PRL_Received+0x1b0>
 80060d8:	0200      	lsls	r0, r0, #8
 80060da:	1808      	adds	r0, r1, r0
 80060dc:	2134      	movs	r1, #52	@ 0x34
 80060de:	5c61      	ldrb	r1, [r4, r1]
 80060e0:	0409      	lsls	r1, r1, #16
 80060e2:	1840      	adds	r0, r0, r1
 80060e4:	2135      	movs	r1, #53	@ 0x35
 80060e6:	5c61      	ldrb	r1, [r4, r1]
 80060e8:	0609      	lsls	r1, r1, #24
 80060ea:	1840      	adds	r0, r0, r1
 80060ec:	0f00      	lsrs	r0, r0, #28
 80060ee:	2808      	cmp	r0, #8
 80060f0:	d100      	bne.n	80060f4 <PRL_Received+0x1b0>
 80060f2:	7026      	strb	r6, [r4, #0]
 80060f4:	9807      	ldr	r0, [sp, #28]
 80060f6:	9000      	str	r0, [sp, #0]
 80060f8:	0023      	movs	r3, r4
 80060fa:	3330      	adds	r3, #48	@ 0x30
 80060fc:	a80a      	add	r0, sp, #40	@ 0x28
 80060fe:	7802      	ldrb	r2, [r0, #0]
 8006100:	a809      	add	r0, sp, #36	@ 0x24
 8006102:	7801      	ldrb	r1, [r0, #0]
 8006104:	2001      	movs	r0, #1
 8006106:	4fc1      	ldr	r7, [pc, #772]	@ (800640c <.text_51>)
 8006108:	683f      	ldr	r7, [r7, #0]
 800610a:	47b8      	blx	r7
 800610c:	9806      	ldr	r0, [sp, #24]
 800610e:	2800      	cmp	r0, #0
 8006110:	d10b      	bne.n	800612a <PRL_Received+0x1e6>
 8006112:	2002      	movs	r0, #2
 8006114:	9000      	str	r0, [sp, #0]
 8006116:	0023      	movs	r3, r4
 8006118:	3318      	adds	r3, #24
 800611a:	a80a      	add	r0, sp, #40	@ 0x28
 800611c:	7802      	ldrb	r2, [r0, #0]
 800611e:	a809      	add	r0, sp, #36	@ 0x24
 8006120:	7801      	ldrb	r1, [r0, #0]
 8006122:	2002      	movs	r0, #2
 8006124:	4fb9      	ldr	r7, [pc, #740]	@ (800640c <.text_51>)
 8006126:	683f      	ldr	r7, [r7, #0]
 8006128:	47b8      	blx	r7
 800612a:	4668      	mov	r0, sp
 800612c:	8880      	ldrh	r0, [r0, #4]
 800612e:	0a40      	lsrs	r0, r0, #9
 8006130:	2107      	movs	r1, #7
 8006132:	9a04      	ldr	r2, [sp, #16]
 8006134:	7992      	ldrb	r2, [r2, #6]
 8006136:	2307      	movs	r3, #7
 8006138:	4003      	ands	r3, r0
 800613a:	429a      	cmp	r2, r3
 800613c:	d103      	bne.n	8006146 <PRL_Received+0x202>
 800613e:	9a06      	ldr	r2, [sp, #24]
 8006140:	2a00      	cmp	r2, #0
 8006142:	d100      	bne.n	8006146 <PRL_Received+0x202>
 8006144:	e08f      	b.n	8006266 <PRL_Received+0x322>
 8006146:	4001      	ands	r1, r0
 8006148:	9804      	ldr	r0, [sp, #16]
 800614a:	7181      	strb	r1, [r0, #6]
 800614c:	4668      	mov	r0, sp
 800614e:	8880      	ldrh	r0, [r0, #4]
 8006150:	8420      	strh	r0, [r4, #32]
 8006152:	4668      	mov	r0, sp
 8006154:	8940      	ldrh	r0, [r0, #10]
 8006156:	2800      	cmp	r0, #0
 8006158:	d043      	beq.n	80061e2 <PRL_Received+0x29e>
 800615a:	4668      	mov	r0, sp
 800615c:	8980      	ldrh	r0, [r0, #12]
 800615e:	2800      	cmp	r0, #0
 8006160:	d03f      	beq.n	80061e2 <PRL_Received+0x29e>
 8006162:	4668      	mov	r0, sp
 8006164:	88c0      	ldrh	r0, [r0, #6]
 8006166:	83e0      	strh	r0, [r4, #30]
 8006168:	4668      	mov	r0, sp
 800616a:	88c0      	ldrh	r0, [r0, #6]
 800616c:	0440      	lsls	r0, r0, #17
 800616e:	0f01      	lsrs	r1, r0, #28
 8006170:	201a      	movs	r0, #26
 8006172:	4348      	muls	r0, r1
 8006174:	9905      	ldr	r1, [sp, #20]
 8006176:	1e89      	subs	r1, r1, #2
 8006178:	466a      	mov	r2, sp
 800617a:	88d2      	ldrh	r2, [r2, #6]
 800617c:	23f8      	movs	r3, #248	@ 0xf8
 800617e:	01db      	lsls	r3, r3, #7
 8006180:	4013      	ands	r3, r2
 8006182:	d12f      	bne.n	80061e4 <PRL_Received+0x2a0>
 8006184:	466a      	mov	r2, sp
 8006186:	88d2      	ldrh	r2, [r2, #6]
 8006188:	05d2      	lsls	r2, r2, #23
 800618a:	0dd2      	lsrs	r2, r2, #23
 800618c:	466b      	mov	r3, sp
 800618e:	89db      	ldrh	r3, [r3, #14]
 8006190:	2b07      	cmp	r3, #7
 8006192:	d30a      	bcc.n	80061aa <PRL_Received+0x266>
 8006194:	2a1a      	cmp	r2, #26
 8006196:	d811      	bhi.n	80061bc <PRL_Received+0x278>
 8006198:	e007      	b.n	80061aa <PRL_Received+0x266>
 800619a:	0023      	movs	r3, r4
 800619c:	3334      	adds	r3, #52	@ 0x34
 800619e:	5d5b      	ldrb	r3, [r3, r5]
 80061a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80061a2:	182f      	adds	r7, r5, r0
 80061a4:	55f3      	strb	r3, [r6, r7]
 80061a6:	1c6d      	adds	r5, r5, #1
 80061a8:	b2ad      	uxth	r5, r5
 80061aa:	428d      	cmp	r5, r1
 80061ac:	d3f5      	bcc.n	800619a <PRL_Received+0x256>
 80061ae:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80061b0:	4291      	cmp	r1, r2
 80061b2:	d301      	bcc.n	80061b8 <PRL_Received+0x274>
 80061b4:	4669      	mov	r1, sp
 80061b6:	8909      	ldrh	r1, [r1, #8]
 80061b8:	8001      	strh	r1, [r0, #0]
 80061ba:	e00c      	b.n	80061d6 <PRL_Received+0x292>
 80061bc:	2025      	movs	r0, #37	@ 0x25
 80061be:	5426      	strb	r6, [r4, r0]
 80061c0:	0020      	movs	r0, r4
 80061c2:	3034      	adds	r0, #52	@ 0x34
 80061c4:	5d40      	ldrb	r0, [r0, r5]
 80061c6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80061c8:	5548      	strb	r0, [r1, r5]
 80061ca:	1c6d      	adds	r5, r5, #1
 80061cc:	2d1a      	cmp	r5, #26
 80061ce:	d3f7      	bcc.n	80061c0 <PRL_Received+0x27c>
 80061d0:	201a      	movs	r0, #26
 80061d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80061d4:	8008      	strh	r0, [r1, #0]
 80061d6:	a80a      	add	r0, sp, #40	@ 0x28
 80061d8:	7801      	ldrb	r1, [r0, #0]
 80061da:	a809      	add	r0, sp, #36	@ 0x24
 80061dc:	7800      	ldrb	r0, [r0, #0]
 80061de:	f7fa fe77 	bl	8000ed0 <PE_PRL_PostReceiveEvent>
 80061e2:	e053      	b.n	800628c <PRL_Received+0x348>
 80061e4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80061e6:	8812      	ldrh	r2, [r2, #0]
 80061e8:	9b05      	ldr	r3, [sp, #20]
 80061ea:	18d3      	adds	r3, r2, r3
 80061ec:	1e9b      	subs	r3, r3, #2
 80061ee:	27ff      	movs	r7, #255	@ 0xff
 80061f0:	1dbf      	adds	r7, r7, #6
 80061f2:	321a      	adds	r2, #26
 80061f4:	42ba      	cmp	r2, r7
 80061f6:	d21b      	bcs.n	8006230 <PRL_Received+0x2ec>
 80061f8:	466a      	mov	r2, sp
 80061fa:	8912      	ldrh	r2, [r2, #8]
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d217      	bcs.n	8006230 <PRL_Received+0x2ec>
 8006200:	2225      	movs	r2, #37	@ 0x25
 8006202:	54a6      	strb	r6, [r4, r2]
 8006204:	e007      	b.n	8006216 <PRL_Received+0x2d2>
 8006206:	0022      	movs	r2, r4
 8006208:	3234      	adds	r2, #52	@ 0x34
 800620a:	5d52      	ldrb	r2, [r2, r5]
 800620c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800620e:	182e      	adds	r6, r5, r0
 8006210:	559a      	strb	r2, [r3, r6]
 8006212:	1c6d      	adds	r5, r5, #1
 8006214:	b2ad      	uxth	r5, r5
 8006216:	428d      	cmp	r5, r1
 8006218:	d3f5      	bcc.n	8006206 <PRL_Received+0x2c2>
 800621a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800621c:	8801      	ldrh	r1, [r0, #0]
 800621e:	466a      	mov	r2, sp
 8006220:	8892      	ldrh	r2, [r2, #4]
 8006222:	0a92      	lsrs	r2, r2, #10
 8006224:	231c      	movs	r3, #28
 8006226:	4013      	ands	r3, r2
 8006228:	1e9a      	subs	r2, r3, #2
 800622a:	1889      	adds	r1, r1, r2
 800622c:	8001      	strh	r1, [r0, #0]
 800622e:	e02d      	b.n	800628c <PRL_Received+0x348>
 8006230:	42bb      	cmp	r3, r7
 8006232:	d215      	bcs.n	8006260 <PRL_Received+0x31c>
 8006234:	466a      	mov	r2, sp
 8006236:	8912      	ldrh	r2, [r2, #8]
 8006238:	4293      	cmp	r3, r2
 800623a:	d311      	bcc.n	8006260 <PRL_Received+0x31c>
 800623c:	2225      	movs	r2, #37	@ 0x25
 800623e:	54a6      	strb	r6, [r4, r2]
 8006240:	e007      	b.n	8006252 <PRL_Received+0x30e>
 8006242:	0022      	movs	r2, r4
 8006244:	3234      	adds	r2, #52	@ 0x34
 8006246:	5d52      	ldrb	r2, [r2, r5]
 8006248:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800624a:	182e      	adds	r6, r5, r0
 800624c:	559a      	strb	r2, [r3, r6]
 800624e:	1c6d      	adds	r5, r5, #1
 8006250:	b2ad      	uxth	r5, r5
 8006252:	428d      	cmp	r5, r1
 8006254:	d3f5      	bcc.n	8006242 <PRL_Received+0x2fe>
 8006256:	4668      	mov	r0, sp
 8006258:	8900      	ldrh	r0, [r0, #8]
 800625a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800625c:	8008      	strh	r0, [r1, #0]
 800625e:	e015      	b.n	800628c <PRL_Received+0x348>
 8006260:	2025      	movs	r0, #37	@ 0x25
 8006262:	5425      	strb	r5, [r4, r0]
 8006264:	e012      	b.n	800628c <PRL_Received+0x348>
 8006266:	20ff      	movs	r0, #255	@ 0xff
 8006268:	7260      	strb	r0, [r4, #9]
 800626a:	7425      	strb	r5, [r4, #16]
 800626c:	a809      	add	r0, sp, #36	@ 0x24
 800626e:	7800      	ldrb	r0, [r0, #0]
 8006270:	f7fa fe4a 	bl	8000f08 <PE_PRL_PostReceiveEventError>
 8006274:	72a5      	strb	r5, [r4, #10]
 8006276:	2017      	movs	r0, #23
 8006278:	9000      	str	r0, [sp, #0]
 800627a:	bf00      	nop
 800627c:	a367      	add	r3, pc, #412	@ (adr r3, 800641c <.text_55>)
 800627e:	2200      	movs	r2, #0
 8006280:	a809      	add	r0, sp, #36	@ 0x24
 8006282:	7801      	ldrb	r1, [r0, #0]
 8006284:	2006      	movs	r0, #6
 8006286:	4c61      	ldr	r4, [pc, #388]	@ (800640c <.text_51>)
 8006288:	6824      	ldr	r4, [r4, #0]
 800628a:	47a0      	blx	r4
 800628c:	b00b      	add	sp, #44	@ 0x2c
 800628e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006290:	20000288 	.word	0x20000288

08006294 <.text_40>:
 8006294:	0000f01f 	.word	0x0000f01f

08006298 <.text_41>:
 8006298:	0801f0c0 	.word	0x0801f0c0

0800629c <PRL_ResetIndicate>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	0004      	movs	r4, r0
 80062a0:	000d      	movs	r5, r1
 80062a2:	2d05      	cmp	r5, #5
 80062a4:	d119      	bne.n	80062da <PRL_ResetIndicate+0x3e>
 80062a6:	485a      	ldr	r0, [pc, #360]	@ (8006410 <.text_52>)
 80062a8:	00a1      	lsls	r1, r4, #2
 80062aa:	1840      	adds	r0, r0, r1
 80062ac:	9000      	str	r0, [sp, #0]
 80062ae:	6807      	ldr	r7, [r0, #0]
 80062b0:	2600      	movs	r6, #0
 80062b2:	2000      	movs	r0, #0
 80062b4:	b2c2      	uxtb	r2, r0
 80062b6:	18ba      	adds	r2, r7, r2
 80062b8:	72d6      	strb	r6, [r2, #11]
 80062ba:	1c40      	adds	r0, r0, #1
 80062bc:	b2c1      	uxtb	r1, r0
 80062be:	2903      	cmp	r1, #3
 80062c0:	d3f8      	bcc.n	80062b4 <PRL_ResetIndicate+0x18>
 80062c2:	220f      	movs	r2, #15
 80062c4:	2103      	movs	r1, #3
 80062c6:	1db8      	adds	r0, r7, #6
 80062c8:	f018 fdfa 	bl	801eec0 <__aeabi_memset>
 80062cc:	9900      	ldr	r1, [sp, #0]
 80062ce:	6809      	ldr	r1, [r1, #0]
 80062d0:	714e      	strb	r6, [r1, #5]
 80062d2:	703e      	strb	r6, [r7, #0]
 80062d4:	0020      	movs	r0, r4
 80062d6:	f7ff fe30 	bl	8005f3a <PRL_DisableRX>
 80062da:	2000      	movs	r0, #0
 80062dc:	9000      	str	r0, [sp, #0]
 80062de:	2300      	movs	r3, #0
 80062e0:	002a      	movs	r2, r5
 80062e2:	0021      	movs	r1, r4
 80062e4:	2001      	movs	r0, #1
 80062e6:	4e49      	ldr	r6, [pc, #292]	@ (800640c <.text_51>)
 80062e8:	6836      	ldr	r6, [r6, #0]
 80062ea:	47b0      	blx	r6
 80062ec:	0029      	movs	r1, r5
 80062ee:	0020      	movs	r0, r4
 80062f0:	f7fa fce6 	bl	8000cc0 <PE_PRL_ResetReceived>
 80062f4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080062f6 <PRL_ResetCompleted>:
 80062f6:	2101      	movs	r1, #1
 80062f8:	4a45      	ldr	r2, [pc, #276]	@ (8006410 <.text_52>)
 80062fa:	0080      	lsls	r0, r0, #2
 80062fc:	5810      	ldr	r0, [r2, r0]
 80062fe:	70c1      	strb	r1, [r0, #3]
 8006300:	4770      	bx	lr
	...

08006304 <.text_44>:
 8006304:	0000fedf 	.word	0x0000fedf

08006308 <.text_45>:
 8006308:	0000feff 	.word	0x0000feff

0800630c <.text_46>:
 800630c:	0000f13f 	.word	0x0000f13f

08006310 <PRL_BistCompleted>:
 8006310:	b580      	push	{r7, lr}
 8006312:	f7fa fd01 	bl	8000d18 <PE_PRL_BistCompleted>
 8006316:	bd01      	pop	{r0, pc}

08006318 <PRL_TxCompleted>:
 8006318:	b570      	push	{r4, r5, r6, lr}
 800631a:	0004      	movs	r4, r0
 800631c:	4a3c      	ldr	r2, [pc, #240]	@ (8006410 <.text_52>)
 800631e:	00a3      	lsls	r3, r4, #2
 8006320:	58d6      	ldr	r6, [r2, r3]
 8006322:	2500      	movs	r5, #0
 8006324:	7c32      	ldrb	r2, [r6, #16]
 8006326:	2a01      	cmp	r2, #1
 8006328:	d002      	beq.n	8006330 <PRL_TxCompleted+0x18>
 800632a:	2a02      	cmp	r2, #2
 800632c:	d009      	beq.n	8006342 <PRL_TxCompleted+0x2a>
 800632e:	e010      	b.n	8006352 <PRL_TxCompleted+0x3a>
 8006330:	2900      	cmp	r1, #0
 8006332:	d102      	bne.n	800633a <PRL_TxCompleted+0x22>
 8006334:	f7fa fe1a 	bl	8000f6c <PE_PRL_PostReceiveEventComplete>
 8006338:	e001      	b.n	800633e <PRL_TxCompleted+0x26>
 800633a:	f7fa fde5 	bl	8000f08 <PE_PRL_PostReceiveEventError>
 800633e:	72b5      	strb	r5, [r6, #10]
 8006340:	e007      	b.n	8006352 <PRL_TxCompleted+0x3a>
 8006342:	f00f ff23 	bl	801618c <USBPD_PHY_GetRetryTimerValue>
 8006346:	0001      	movs	r1, r0
 8006348:	0060      	lsls	r0, r4, #1
 800634a:	1c40      	adds	r0, r0, #1
 800634c:	b2c0      	uxtb	r0, r0
 800634e:	f011 fb45 	bl	80179dc <USBPD_TIM_Start>
 8006352:	7435      	strb	r5, [r6, #16]
 8006354:	bd70      	pop	{r4, r5, r6, pc}

08006356 <USBPD_PRL_PrepareExtendedTxChunkSending>:
 8006356:	b570      	push	{r4, r5, r6, lr}
 8006358:	4c2d      	ldr	r4, [pc, #180]	@ (8006410 <.text_52>)
 800635a:	0080      	lsls	r0, r0, #2
 800635c:	5820      	ldr	r0, [r4, r0]
 800635e:	2480      	movs	r4, #128	@ 0x80
 8006360:	0224      	lsls	r4, r4, #8
 8006362:	8b85      	ldrh	r5, [r0, #28]
 8006364:	4e2b      	ldr	r6, [pc, #172]	@ (8006414 <.text_53>)
 8006366:	402e      	ands	r6, r5
 8006368:	02c9      	lsls	r1, r1, #11
 800636a:	4331      	orrs	r1, r6
 800636c:	25fe      	movs	r5, #254	@ 0xfe
 800636e:	022d      	lsls	r5, r5, #8
 8006370:	400d      	ands	r5, r1
 8006372:	05d1      	lsls	r1, r2, #23
 8006374:	0dc9      	lsrs	r1, r1, #23
 8006376:	4329      	orrs	r1, r5
 8006378:	4321      	orrs	r1, r4
 800637a:	8381      	strh	r1, [r0, #28]
 800637c:	8a41      	ldrh	r1, [r0, #18]
 800637e:	430c      	orrs	r4, r1
 8006380:	8244      	strh	r4, [r0, #18]
 8006382:	4a25      	ldr	r2, [pc, #148]	@ (8006418 <.text_54>)
 8006384:	4022      	ands	r2, r4
 8006386:	2120      	movs	r1, #32
 8006388:	5c41      	ldrb	r1, [r0, r1]
 800638a:	06c9      	lsls	r1, r1, #27
 800638c:	0ec9      	lsrs	r1, r1, #27
 800638e:	4311      	orrs	r1, r2
 8006390:	8241      	strh	r1, [r0, #18]
 8006392:	7019      	strb	r1, [r3, #0]
 8006394:	8a41      	ldrh	r1, [r0, #18]
 8006396:	0a09      	lsrs	r1, r1, #8
 8006398:	7059      	strb	r1, [r3, #1]
 800639a:	8b81      	ldrh	r1, [r0, #28]
 800639c:	7099      	strb	r1, [r3, #2]
 800639e:	8b80      	ldrh	r0, [r0, #28]
 80063a0:	0a00      	lsrs	r0, r0, #8
 80063a2:	70d8      	strb	r0, [r3, #3]
 80063a4:	bd70      	pop	{r4, r5, r6, pc}

080063a6 <USBPD_PRL_PrepareChunkRequest>:
 80063a6:	b510      	push	{r4, lr}
 80063a8:	4a19      	ldr	r2, [pc, #100]	@ (8006410 <.text_52>)
 80063aa:	0080      	lsls	r0, r0, #2
 80063ac:	5810      	ldr	r0, [r2, r0]
 80063ae:	8b83      	ldrh	r3, [r0, #28]
 80063b0:	2284      	movs	r2, #132	@ 0x84
 80063b2:	0212      	lsls	r2, r2, #8
 80063b4:	431a      	orrs	r2, r3
 80063b6:	8382      	strh	r2, [r0, #28]
 80063b8:	2386      	movs	r3, #134	@ 0x86
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	4013      	ands	r3, r2
 80063be:	8bc2      	ldrh	r2, [r0, #30]
 80063c0:	0ad2      	lsrs	r2, r2, #11
 80063c2:	1c52      	adds	r2, r2, #1
 80063c4:	02d2      	lsls	r2, r2, #11
 80063c6:	24f0      	movs	r4, #240	@ 0xf0
 80063c8:	01e4      	lsls	r4, r4, #7
 80063ca:	4014      	ands	r4, r2
 80063cc:	431c      	orrs	r4, r3
 80063ce:	8384      	strh	r4, [r0, #28]
 80063d0:	8a43      	ldrh	r3, [r0, #18]
 80063d2:	2280      	movs	r2, #128	@ 0x80
 80063d4:	0212      	lsls	r2, r2, #8
 80063d6:	431a      	orrs	r2, r3
 80063d8:	0003      	movs	r3, r0
 80063da:	3312      	adds	r3, #18
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	4c0e      	ldr	r4, [pc, #56]	@ (8006418 <.text_54>)
 80063e0:	4014      	ands	r4, r2
 80063e2:	2220      	movs	r2, #32
 80063e4:	5c82      	ldrb	r2, [r0, r2]
 80063e6:	06d2      	lsls	r2, r2, #27
 80063e8:	0ed2      	lsrs	r2, r2, #27
 80063ea:	4322      	orrs	r2, r4
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	7142      	strb	r2, [r0, #5]
 80063f2:	8a43      	ldrh	r3, [r0, #18]
 80063f4:	700b      	strb	r3, [r1, #0]
 80063f6:	8a43      	ldrh	r3, [r0, #18]
 80063f8:	0a1b      	lsrs	r3, r3, #8
 80063fa:	704b      	strb	r3, [r1, #1]
 80063fc:	8b83      	ldrh	r3, [r0, #28]
 80063fe:	708b      	strb	r3, [r1, #2]
 8006400:	8b80      	ldrh	r0, [r0, #28]
 8006402:	0a00      	lsrs	r0, r0, #8
 8006404:	70c8      	strb	r0, [r1, #3]
 8006406:	710a      	strb	r2, [r1, #4]
 8006408:	714a      	strb	r2, [r1, #5]
 800640a:	bd10      	pop	{r4, pc}

0800640c <.text_51>:
 800640c:	20000000 	.word	0x20000000

08006410 <.text_52>:
 8006410:	20000288 	.word	0x20000288

08006414 <.text_53>:
 8006414:	000083ff 	.word	0x000083ff

08006418 <.text_54>:
 8006418:	0000ffe0 	.word	0x0000ffe0

0800641c <.text_55>:
 800641c:	5f4c5250 	.word	0x5f4c5250
 8006420:	4e455645 	.word	0x4e455645
 8006424:	58525f54 	.word	0x58525f54
 8006428:	5349445f 	.word	0x5349445f
 800642c:	44524143 	.word	0x44524143
 8006430:	00004445 	.word	0x00004445

08006434 <strlen>:
 8006434:	2300      	movs	r3, #0
 8006436:	5cc2      	ldrb	r2, [r0, r3]
 8006438:	3301      	adds	r3, #1
 800643a:	2a00      	cmp	r2, #0
 800643c:	d1fb      	bne.n	8006436 <strlen+0x2>
 800643e:	1e58      	subs	r0, r3, #1
 8006440:	4770      	bx	lr
	...

08006444 <__udivsi3>:
 8006444:	2200      	movs	r2, #0
 8006446:	0843      	lsrs	r3, r0, #1
 8006448:	428b      	cmp	r3, r1
 800644a:	d374      	bcc.n	8006536 <__udivsi3+0xf2>
 800644c:	0903      	lsrs	r3, r0, #4
 800644e:	428b      	cmp	r3, r1
 8006450:	d35f      	bcc.n	8006512 <__udivsi3+0xce>
 8006452:	0a03      	lsrs	r3, r0, #8
 8006454:	428b      	cmp	r3, r1
 8006456:	d344      	bcc.n	80064e2 <__udivsi3+0x9e>
 8006458:	0b03      	lsrs	r3, r0, #12
 800645a:	428b      	cmp	r3, r1
 800645c:	d328      	bcc.n	80064b0 <__udivsi3+0x6c>
 800645e:	0c03      	lsrs	r3, r0, #16
 8006460:	428b      	cmp	r3, r1
 8006462:	d30d      	bcc.n	8006480 <__udivsi3+0x3c>
 8006464:	22ff      	movs	r2, #255	@ 0xff
 8006466:	0209      	lsls	r1, r1, #8
 8006468:	ba12      	rev	r2, r2
 800646a:	0c03      	lsrs	r3, r0, #16
 800646c:	428b      	cmp	r3, r1
 800646e:	d302      	bcc.n	8006476 <__udivsi3+0x32>
 8006470:	1212      	asrs	r2, r2, #8
 8006472:	0209      	lsls	r1, r1, #8
 8006474:	d065      	beq.n	8006542 <__udivsi3+0xfe>
 8006476:	0b03      	lsrs	r3, r0, #12
 8006478:	428b      	cmp	r3, r1
 800647a:	d319      	bcc.n	80064b0 <__udivsi3+0x6c>
 800647c:	e000      	b.n	8006480 <__udivsi3+0x3c>
 800647e:	0a09      	lsrs	r1, r1, #8
 8006480:	0bc3      	lsrs	r3, r0, #15
 8006482:	428b      	cmp	r3, r1
 8006484:	d301      	bcc.n	800648a <__udivsi3+0x46>
 8006486:	03cb      	lsls	r3, r1, #15
 8006488:	1ac0      	subs	r0, r0, r3
 800648a:	4152      	adcs	r2, r2
 800648c:	0b83      	lsrs	r3, r0, #14
 800648e:	428b      	cmp	r3, r1
 8006490:	d301      	bcc.n	8006496 <__udivsi3+0x52>
 8006492:	038b      	lsls	r3, r1, #14
 8006494:	1ac0      	subs	r0, r0, r3
 8006496:	4152      	adcs	r2, r2
 8006498:	0b43      	lsrs	r3, r0, #13
 800649a:	428b      	cmp	r3, r1
 800649c:	d301      	bcc.n	80064a2 <__udivsi3+0x5e>
 800649e:	034b      	lsls	r3, r1, #13
 80064a0:	1ac0      	subs	r0, r0, r3
 80064a2:	4152      	adcs	r2, r2
 80064a4:	0b03      	lsrs	r3, r0, #12
 80064a6:	428b      	cmp	r3, r1
 80064a8:	d301      	bcc.n	80064ae <__udivsi3+0x6a>
 80064aa:	030b      	lsls	r3, r1, #12
 80064ac:	1ac0      	subs	r0, r0, r3
 80064ae:	4152      	adcs	r2, r2
 80064b0:	0ac3      	lsrs	r3, r0, #11
 80064b2:	428b      	cmp	r3, r1
 80064b4:	d301      	bcc.n	80064ba <__udivsi3+0x76>
 80064b6:	02cb      	lsls	r3, r1, #11
 80064b8:	1ac0      	subs	r0, r0, r3
 80064ba:	4152      	adcs	r2, r2
 80064bc:	0a83      	lsrs	r3, r0, #10
 80064be:	428b      	cmp	r3, r1
 80064c0:	d301      	bcc.n	80064c6 <__udivsi3+0x82>
 80064c2:	028b      	lsls	r3, r1, #10
 80064c4:	1ac0      	subs	r0, r0, r3
 80064c6:	4152      	adcs	r2, r2
 80064c8:	0a43      	lsrs	r3, r0, #9
 80064ca:	428b      	cmp	r3, r1
 80064cc:	d301      	bcc.n	80064d2 <__udivsi3+0x8e>
 80064ce:	024b      	lsls	r3, r1, #9
 80064d0:	1ac0      	subs	r0, r0, r3
 80064d2:	4152      	adcs	r2, r2
 80064d4:	0a03      	lsrs	r3, r0, #8
 80064d6:	428b      	cmp	r3, r1
 80064d8:	d301      	bcc.n	80064de <__udivsi3+0x9a>
 80064da:	020b      	lsls	r3, r1, #8
 80064dc:	1ac0      	subs	r0, r0, r3
 80064de:	4152      	adcs	r2, r2
 80064e0:	d2cd      	bcs.n	800647e <__udivsi3+0x3a>
 80064e2:	09c3      	lsrs	r3, r0, #7
 80064e4:	428b      	cmp	r3, r1
 80064e6:	d301      	bcc.n	80064ec <__udivsi3+0xa8>
 80064e8:	01cb      	lsls	r3, r1, #7
 80064ea:	1ac0      	subs	r0, r0, r3
 80064ec:	4152      	adcs	r2, r2
 80064ee:	0983      	lsrs	r3, r0, #6
 80064f0:	428b      	cmp	r3, r1
 80064f2:	d301      	bcc.n	80064f8 <__udivsi3+0xb4>
 80064f4:	018b      	lsls	r3, r1, #6
 80064f6:	1ac0      	subs	r0, r0, r3
 80064f8:	4152      	adcs	r2, r2
 80064fa:	0943      	lsrs	r3, r0, #5
 80064fc:	428b      	cmp	r3, r1
 80064fe:	d301      	bcc.n	8006504 <__udivsi3+0xc0>
 8006500:	014b      	lsls	r3, r1, #5
 8006502:	1ac0      	subs	r0, r0, r3
 8006504:	4152      	adcs	r2, r2
 8006506:	0903      	lsrs	r3, r0, #4
 8006508:	428b      	cmp	r3, r1
 800650a:	d301      	bcc.n	8006510 <__udivsi3+0xcc>
 800650c:	010b      	lsls	r3, r1, #4
 800650e:	1ac0      	subs	r0, r0, r3
 8006510:	4152      	adcs	r2, r2
 8006512:	08c3      	lsrs	r3, r0, #3
 8006514:	428b      	cmp	r3, r1
 8006516:	d301      	bcc.n	800651c <__udivsi3+0xd8>
 8006518:	00cb      	lsls	r3, r1, #3
 800651a:	1ac0      	subs	r0, r0, r3
 800651c:	4152      	adcs	r2, r2
 800651e:	0883      	lsrs	r3, r0, #2
 8006520:	428b      	cmp	r3, r1
 8006522:	d301      	bcc.n	8006528 <__udivsi3+0xe4>
 8006524:	008b      	lsls	r3, r1, #2
 8006526:	1ac0      	subs	r0, r0, r3
 8006528:	4152      	adcs	r2, r2
 800652a:	0843      	lsrs	r3, r0, #1
 800652c:	428b      	cmp	r3, r1
 800652e:	d301      	bcc.n	8006534 <__udivsi3+0xf0>
 8006530:	004b      	lsls	r3, r1, #1
 8006532:	1ac0      	subs	r0, r0, r3
 8006534:	4152      	adcs	r2, r2
 8006536:	1a41      	subs	r1, r0, r1
 8006538:	d200      	bcs.n	800653c <__udivsi3+0xf8>
 800653a:	4601      	mov	r1, r0
 800653c:	4152      	adcs	r2, r2
 800653e:	4610      	mov	r0, r2
 8006540:	4770      	bx	lr
 8006542:	e7ff      	b.n	8006544 <__udivsi3+0x100>
 8006544:	b501      	push	{r0, lr}
 8006546:	2000      	movs	r0, #0
 8006548:	f000 f806 	bl	8006558 <__aeabi_idiv0>
 800654c:	bd02      	pop	{r1, pc}
 800654e:	46c0      	nop			@ (mov r8, r8)

08006550 <__aeabi_uidivmod>:
 8006550:	2900      	cmp	r1, #0
 8006552:	d0f7      	beq.n	8006544 <__udivsi3+0x100>
 8006554:	e776      	b.n	8006444 <__udivsi3>
 8006556:	4770      	bx	lr

08006558 <__aeabi_idiv0>:
 8006558:	4770      	bx	lr
 800655a:	46c0      	nop			@ (mov r8, r8)

0800655c <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 800655c:	b590      	push	{r4, r7, lr}
 800655e:	b087      	sub	sp, #28
 8006560:	af02      	add	r7, sp, #8
 8006562:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8006564:	2380      	movs	r3, #128	@ 0x80
 8006566:	021b      	lsls	r3, r3, #8
 8006568:	4a11      	ldr	r2, [pc, #68]	@ (80065b0 <tx_application_define+0x54>)
 800656a:	4912      	ldr	r1, [pc, #72]	@ (80065b4 <tx_application_define+0x58>)
 800656c:	4812      	ldr	r0, [pc, #72]	@ (80065b8 <tx_application_define+0x5c>)
 800656e:	2434      	movs	r4, #52	@ 0x34
 8006570:	9400      	str	r4, [sp, #0]
 8006572:	f00c ff71 	bl	8013458 <_txe_byte_pool_create>
 8006576:	1e03      	subs	r3, r0, #0
 8006578:	d105      	bne.n	8006586 <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800657a:	4b0f      	ldr	r3, [pc, #60]	@ (80065b8 <tx_application_define+0x5c>)
 800657c:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	0018      	movs	r0, r3
 8006582:	f000 fe07 	bl	8007194 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8006586:	2380      	movs	r3, #128	@ 0x80
 8006588:	021b      	lsls	r3, r3, #8
 800658a:	4a0c      	ldr	r2, [pc, #48]	@ (80065bc <tx_application_define+0x60>)
 800658c:	490c      	ldr	r1, [pc, #48]	@ (80065c0 <tx_application_define+0x64>)
 800658e:	480d      	ldr	r0, [pc, #52]	@ (80065c4 <tx_application_define+0x68>)
 8006590:	2434      	movs	r4, #52	@ 0x34
 8006592:	9400      	str	r4, [sp, #0]
 8006594:	f00c ff60 	bl	8013458 <_txe_byte_pool_create>
 8006598:	1e03      	subs	r3, r0, #0
 800659a:	d105      	bne.n	80065a8 <tx_application_define+0x4c>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 800659c:	4b09      	ldr	r3, [pc, #36]	@ (80065c4 <tx_application_define+0x68>)
 800659e:	60fb      	str	r3, [r7, #12]

    if (MX_USBX_Device_Init(memory_ptr) != UX_SUCCESS)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	0018      	movs	r0, r3
 80065a4:	f017 fa59 	bl	801da5a <MX_USBX_Device_Init>

    /* USER CODE BEGIN MX_USBX_Device_Init_Success */

    /* USER CODE END MX_USBX_Device_Init_Success */
  }
}
 80065a8:	46c0      	nop			@ (mov r8, r8)
 80065aa:	46bd      	mov	sp, r7
 80065ac:	b005      	add	sp, #20
 80065ae:	bd90      	pop	{r4, r7, pc}
 80065b0:	20000294 	.word	0x20000294
 80065b4:	0801ef04 	.word	0x0801ef04
 80065b8:	20008294 	.word	0x20008294
 80065bc:	200082c8 	.word	0x200082c8
 80065c0:	0801ef18 	.word	0x0801ef18
 80065c4:	200102c8 	.word	0x200102c8

080065c8 <USB2533_Init>:

#include "USB2533.h"
#include "i2c.h"


USB2533_StatusTypeDef USB2533_Init(USB2533_HandleTypeDef *dev, I2C_HandleTypeDef *i2cHandle){
 80065c8:	b5b0      	push	{r4, r5, r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]

    USB2533_StatusTypeDef status = USB2533_OK;
 80065d2:	210f      	movs	r1, #15
 80065d4:	187b      	adds	r3, r7, r1
 80065d6:	2200      	movs	r2, #0
 80065d8:	701a      	strb	r2, [r3, #0]
//    uint8_t regData;

    dev->i2cHandle = i2cHandle;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	601a      	str	r2, [r3, #0]

    dev->current_page = 1;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	711a      	strb	r2, [r3, #4]


    /* TODO: config here */

    /* USB Attach. Exit SOC_CONFIG and Enter HUB_CONFIG Stage. */
    status = USB2533_WriteCommand(dev, USB2533_COMMAND_USB_ATTACH);
 80065e6:	000d      	movs	r5, r1
 80065e8:	187c      	adds	r4, r7, r1
 80065ea:	4a0b      	ldr	r2, [pc, #44]	@ (8006618 <USB2533_Init+0x50>)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	0011      	movs	r1, r2
 80065f0:	0018      	movs	r0, r3
 80065f2:	f000 f813 	bl	800661c <USB2533_WriteCommand>
 80065f6:	0003      	movs	r3, r0
 80065f8:	7023      	strb	r3, [r4, #0]
    if (status != USB2533_OK){
 80065fa:	197b      	adds	r3, r7, r5
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <USB2533_Init+0x40>
    	return status;
 8006602:	197b      	adds	r3, r7, r5
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	e002      	b.n	800660e <USB2533_Init+0x46>
    }

    return status;
 8006608:	230f      	movs	r3, #15
 800660a:	18fb      	adds	r3, r7, r3
 800660c:	781b      	ldrb	r3, [r3, #0]
}
 800660e:	0018      	movs	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	b004      	add	sp, #16
 8006614:	bdb0      	pop	{r4, r5, r7, pc}
 8006616:	46c0      	nop			@ (mov r8, r8)
 8006618:	0000aa55 	.word	0x0000aa55

0800661c <USB2533_WriteCommand>:


//USB2533_StatusTypeDef USB2533_ReadRegister(USB2533_HandleTypeDef *dev, uint8_t reg, uint8_t *data);
//USB2533_StatusTypeDef USB2533_WriteRegister(USB2533_HandleTypeDef *dev, uint8_t reg, uint8_t *data);

USB2533_StatusTypeDef USB2533_WriteCommand(USB2533_HandleTypeDef *dev, uint16_t command){
 800661c:	b5b0      	push	{r4, r5, r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af02      	add	r7, sp, #8
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	000a      	movs	r2, r1
 8006626:	1cbb      	adds	r3, r7, #2
 8006628:	801a      	strh	r2, [r3, #0]

    USB2533_StatusTypeDef status = USB2533_OK;
 800662a:	240f      	movs	r4, #15
 800662c:	193b      	adds	r3, r7, r4
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
	uint8_t regData[3];

	regData[0] = command >> 8; 				   /* Command MSB */
 8006632:	1cbb      	adds	r3, r7, #2
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	0a1b      	lsrs	r3, r3, #8
 8006638:	b29b      	uxth	r3, r3
 800663a:	b2da      	uxtb	r2, r3
 800663c:	210c      	movs	r1, #12
 800663e:	187b      	adds	r3, r7, r1
 8006640:	701a      	strb	r2, [r3, #0]
	regData[1] = (uint8_t) (command & 0x00FF); /* Command LSB */
 8006642:	1cbb      	adds	r3, r7, #2
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b2da      	uxtb	r2, r3
 8006648:	187b      	adds	r3, r7, r1
 800664a:	705a      	strb	r2, [r3, #1]
	regData[2] = 0x00; 						   /* Command complete */
 800664c:	187b      	adds	r3, r7, r1
 800664e:	2200      	movs	r2, #0
 8006650:	709a      	strb	r2, [r3, #2]

    status = HAL_I2C_Master_Transmit(dev->i2cHandle, USB2533_I2C_CONFIG_ADDR, regData, 3, 100);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	0025      	movs	r5, r4
 8006658:	193c      	adds	r4, r7, r4
 800665a:	187a      	adds	r2, r7, r1
 800665c:	2364      	movs	r3, #100	@ 0x64
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	2303      	movs	r3, #3
 8006662:	215a      	movs	r1, #90	@ 0x5a
 8006664:	f002 fb5e 	bl	8008d24 <HAL_I2C_Master_Transmit>
 8006668:	0003      	movs	r3, r0
 800666a:	7023      	strb	r3, [r4, #0]

    return status;
 800666c:	197b      	adds	r3, r7, r5
 800666e:	781b      	ldrb	r3, [r3, #0]
}
 8006670:	0018      	movs	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	b004      	add	sp, #16
 8006676:	bdb0      	pop	{r4, r5, r7, pc}

08006678 <create_threads>:

/* Create queue pointers */
TX_QUEUE keyboard_queue_ptr;

/* Place this function under "USER CODE BEGIN App_ThreadX_Init" */
void create_threads(){
 8006678:	b590      	push	{r4, r7, lr}
 800667a:	b089      	sub	sp, #36	@ 0x24
 800667c:	af08      	add	r7, sp, #32
	tx_thread_create(&scan_keys_thread_ptr, SCAN_KEYS_THREAD_NAME, scan_keys_thread, 0x1234, scan_keys_thread_stack, SCAN_KEYS_THREAD_STACK_SIZE, SCAN_KEYS_THREAD_PRIORITY, SCAN_KEYS_THREAD_PRIORITY, 1, TX_AUTO_START);
 800667e:	4c0d      	ldr	r4, [pc, #52]	@ (80066b4 <create_threads+0x3c>)
 8006680:	4a0d      	ldr	r2, [pc, #52]	@ (80066b8 <create_threads+0x40>)
 8006682:	490e      	ldr	r1, [pc, #56]	@ (80066bc <create_threads+0x44>)
 8006684:	480e      	ldr	r0, [pc, #56]	@ (80066c0 <create_threads+0x48>)
 8006686:	23b0      	movs	r3, #176	@ 0xb0
 8006688:	9306      	str	r3, [sp, #24]
 800668a:	2301      	movs	r3, #1
 800668c:	9305      	str	r3, [sp, #20]
 800668e:	2301      	movs	r3, #1
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	230f      	movs	r3, #15
 8006694:	9303      	str	r3, [sp, #12]
 8006696:	230f      	movs	r3, #15
 8006698:	9302      	str	r3, [sp, #8]
 800669a:	2380      	movs	r3, #128	@ 0x80
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	4b08      	ldr	r3, [pc, #32]	@ (80066c4 <create_threads+0x4c>)
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	0023      	movs	r3, r4
 80066a6:	f00d fc85 	bl	8013fb4 <_txe_thread_create>
}
 80066aa:	46c0      	nop			@ (mov r8, r8)
 80066ac:	46bd      	mov	sp, r7
 80066ae:	b001      	add	sp, #4
 80066b0:	bd90      	pop	{r4, r7, pc}
 80066b2:	46c0      	nop			@ (mov r8, r8)
 80066b4:	00001234 	.word	0x00001234
 80066b8:	08006b11 	.word	0x08006b11
 80066bc:	0801ef2c 	.word	0x0801ef2c
 80066c0:	200106fc 	.word	0x200106fc
 80066c4:	200102fc 	.word	0x200102fc

080066c8 <create_queues>:

void create_queues(){
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af02      	add	r7, sp, #8
	tx_queue_create(&keyboard_queue_ptr, KEYBOARD_QUEUE_NAME, 1, keyboard_queue_stack, 128);
 80066ce:	4b06      	ldr	r3, [pc, #24]	@ (80066e8 <create_queues+0x20>)
 80066d0:	4906      	ldr	r1, [pc, #24]	@ (80066ec <create_queues+0x24>)
 80066d2:	4807      	ldr	r0, [pc, #28]	@ (80066f0 <create_queues+0x28>)
 80066d4:	2238      	movs	r2, #56	@ 0x38
 80066d6:	9201      	str	r2, [sp, #4]
 80066d8:	2280      	movs	r2, #128	@ 0x80
 80066da:	9200      	str	r2, [sp, #0]
 80066dc:	2201      	movs	r2, #1
 80066de:	f00d f9e9 	bl	8013ab4 <_txe_queue_create>
}
 80066e2:	46c0      	nop			@ (mov r8, r8)
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	200107ac 	.word	0x200107ac
 80066ec:	0801ef38 	.word	0x0801ef38
 80066f0:	2001082c 	.word	0x2001082c

080066f4 <USBD_HID_Keyboard_Activate>:
 *         This function is called when insertion of a HID Keyboard device.
 * @param  hid_instance: Pointer to the hid class instance.
 * @retval none
 */
VOID USBD_HID_Keyboard_Activate(VOID *hid_instance)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN USBD_HID_Keyboard_Activate */

	/* Save the HID keyboard instance */
	hid_keyboard = (UX_SLAVE_CLASS_HID*) hid_instance;
 80066fc:	4b03      	ldr	r3, [pc, #12]	@ (800670c <USBD_HID_Keyboard_Activate+0x18>)
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	601a      	str	r2, [r3, #0]

	/* USER CODE END USBD_HID_Keyboard_Activate */

	return;
 8006702:	46c0      	nop			@ (mov r8, r8)
}
 8006704:	46bd      	mov	sp, r7
 8006706:	b002      	add	sp, #8
 8006708:	bd80      	pop	{r7, pc}
 800670a:	46c0      	nop			@ (mov r8, r8)
 800670c:	20010864 	.word	0x20010864

08006710 <USBD_HID_Keyboard_Deactivate>:
 *         This function is called when extraction of a HID Keyboard device.
 * @param  hid_instance: Pointer to the hid class instance.
 * @retval none
 */
VOID USBD_HID_Keyboard_Deactivate(VOID *hid_instance)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN USBD_HID_Keyboard_Deactivate */
	UX_PARAMETER_NOT_USED(hid_instance);

	/* Reset the HID mouse instance */
	hid_keyboard = UX_NULL;
 8006718:	4b03      	ldr	r3, [pc, #12]	@ (8006728 <USBD_HID_Keyboard_Deactivate+0x18>)
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]

	/* USER CODE END USBD_HID_Keyboard_Deactivate */

	return;
 800671e:	46c0      	nop			@ (mov r8, r8)
}
 8006720:	46bd      	mov	sp, r7
 8006722:	b002      	add	sp, #8
 8006724:	bd80      	pop	{r7, pc}
 8006726:	46c0      	nop			@ (mov r8, r8)
 8006728:	20010864 	.word	0x20010864

0800672c <USBD_HID_Keyboard_SetReport>:
 * @param  hid_event: Pointer to structure of the hid event.
 * @retval status
 */
UINT USBD_HID_Keyboard_SetReport(UX_SLAVE_CLASS_HID *hid_instance,
		UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
	UINT status = UX_SUCCESS;
 8006736:	2300      	movs	r3, #0
 8006738:	60fb      	str	r3, [r7, #12]
	/* USER CODE BEGIN USBD_HID_Keyboard_SetReport */
	UX_PARAMETER_NOT_USED(hid_instance);
	UX_PARAMETER_NOT_USED(hid_event);
	/* USER CODE END USBD_HID_Keyboard_SetReport */

	return status;
 800673a:	68fb      	ldr	r3, [r7, #12]
}
 800673c:	0018      	movs	r0, r3
 800673e:	46bd      	mov	sp, r7
 8006740:	b004      	add	sp, #16
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBD_HID_Keyboard_GetReport>:
 * @param  hid_event: Pointer to structure of the hid event.
 * @retval status
 */
UINT USBD_HID_Keyboard_GetReport(UX_SLAVE_CLASS_HID *hid_instance,
		UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
	UINT status = UX_SUCCESS;
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]
	/* USER CODE BEGIN USBD_HID_Keyboard_GetReport */
	UX_PARAMETER_NOT_USED(hid_instance);
	UX_PARAMETER_NOT_USED(hid_event);
	/* USER CODE END USBD_HID_Keyboard_GetReport */

	return status;
 8006752:	68fb      	ldr	r3, [r7, #12]
}
 8006754:	0018      	movs	r0, r3
 8006756:	46bd      	mov	sp, r7
 8006758:	b004      	add	sp, #16
 800675a:	bd80      	pop	{r7, pc}

0800675c <hid_keyboard_thread>:
/**
 * @brief  Function implementing usbx_hid_keyboard_thread_entry.
 * @param  thread_input: not used
 * @retval none
 */
void hid_keyboard_thread(uint32_t thread_input){
 800675c:	b590      	push	{r4, r7, lr}
 800675e:	b091      	sub	sp, #68	@ 0x44
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
	UX_SLAVE_DEVICE *device;
	UX_SLAVE_CLASS_HID_EVENT hid_event;

	uint8_t modifier = 0;
 8006764:	233f      	movs	r3, #63	@ 0x3f
 8006766:	18fb      	adds	r3, r7, r3
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]


	TX_PARAMETER_NOT_USED(thread_input);

	/* Get the pointer to the device */
	device = &_ux_system_slave -> ux_system_slave_device;
 800676c:	4b3f      	ldr	r3, [pc, #252]	@ (800686c <hid_keyboard_thread+0x110>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3320      	adds	r3, #32
 8006772:	63bb      	str	r3, [r7, #56]	@ 0x38

	/* Reset the HID event structure */
	ux_utility_memory_set(&hid_event, 0, sizeof(UX_SLAVE_CLASS_HID_EVENT));
 8006774:	230c      	movs	r3, #12
 8006776:	18fb      	adds	r3, r7, r3
 8006778:	222c      	movs	r2, #44	@ 0x2c
 800677a:	2100      	movs	r1, #0
 800677c:	0018      	movs	r0, r3
 800677e:	f011 fe2b 	bl	80183d8 <_ux_utility_memory_set>
	while (1)
	{
		/* Check if the device state already configured */


		if ((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (hid_keyboard != UX_NULL))
 8006782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b03      	cmp	r3, #3
 8006788:	d169      	bne.n	800685e <hid_keyboard_thread+0x102>
 800678a:	4b39      	ldr	r3, [pc, #228]	@ (8006870 <hid_keyboard_thread+0x114>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d065      	beq.n	800685e <hid_keyboard_thread+0x102>
		{

			tx_queue_receive(&keyboard_queue_ptr, &key_event, TX_WAIT_FOREVER);
 8006792:	2301      	movs	r3, #1
 8006794:	425a      	negs	r2, r3
 8006796:	2408      	movs	r4, #8
 8006798:	1939      	adds	r1, r7, r4
 800679a:	4b36      	ldr	r3, [pc, #216]	@ (8006874 <hid_keyboard_thread+0x118>)
 800679c:	0018      	movs	r0, r3
 800679e:	f00d fa39 	bl	8013c14 <_txe_queue_receive>

			if (key_event.key > 0x00FF){
 80067a2:	0022      	movs	r2, r4
 80067a4:	18bb      	adds	r3, r7, r2
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	2bff      	cmp	r3, #255	@ 0xff
 80067aa:	d91e      	bls.n	80067ea <hid_keyboard_thread+0x8e>

				if (key_event.state == KEY_PRESSED){
 80067ac:	18bb      	adds	r3, r7, r2
 80067ae:	789b      	ldrb	r3, [r3, #2]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d109      	bne.n	80067c8 <hid_keyboard_thread+0x6c>
					modifier |= (uint8_t) (key_event.key & 0xff);
 80067b4:	18bb      	adds	r3, r7, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b2d9      	uxtb	r1, r3
 80067ba:	223f      	movs	r2, #63	@ 0x3f
 80067bc:	18bb      	adds	r3, r7, r2
 80067be:	18ba      	adds	r2, r7, r2
 80067c0:	7812      	ldrb	r2, [r2, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	701a      	strb	r2, [r3, #0]
			if (key_event.key > 0x00FF){
 80067c6:	e04e      	b.n	8006866 <hid_keyboard_thread+0x10a>
				}

				else if (key_event.state == KEY_RELEASED){
 80067c8:	2208      	movs	r2, #8
 80067ca:	18bb      	adds	r3, r7, r2
 80067cc:	789b      	ldrb	r3, [r3, #2]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d149      	bne.n	8006866 <hid_keyboard_thread+0x10a>
					modifier &= (uint8_t) ~(key_event.key & 0xff);
 80067d2:	18bb      	adds	r3, r7, r2
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	43db      	mvns	r3, r3
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	213f      	movs	r1, #63	@ 0x3f
 80067de:	187b      	adds	r3, r7, r1
 80067e0:	1879      	adds	r1, r7, r1
 80067e2:	7809      	ldrb	r1, [r1, #0]
 80067e4:	400a      	ands	r2, r1
 80067e6:	701a      	strb	r2, [r3, #0]
			if (key_event.key > 0x00FF){
 80067e8:	e03d      	b.n	8006866 <hid_keyboard_thread+0x10a>
				}

			}
			else{
			if (key_event.state == KEY_PRESSED){
 80067ea:	2008      	movs	r0, #8
 80067ec:	183b      	adds	r3, r7, r0
 80067ee:	789b      	ldrb	r3, [r3, #2]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d118      	bne.n	8006826 <hid_keyboard_thread+0xca>

				hid_event.ux_device_class_hid_event_length = 8;
 80067f4:	210c      	movs	r1, #12
 80067f6:	187b      	adds	r3, r7, r1
 80067f8:	2208      	movs	r2, #8
 80067fa:	629a      	str	r2, [r3, #40]	@ 0x28

				/* This byte is a modifier byte */
				hid_event.ux_device_class_hid_event_buffer[0] = modifier;
 80067fc:	187b      	adds	r3, r7, r1
 80067fe:	223f      	movs	r2, #63	@ 0x3f
 8006800:	18ba      	adds	r2, r7, r2
 8006802:	7812      	ldrb	r2, [r2, #0]
 8006804:	721a      	strb	r2, [r3, #8]

				/* This byte is reserved */
				hid_event.ux_device_class_hid_event_buffer[1] = 0;
 8006806:	187b      	adds	r3, r7, r1
 8006808:	2200      	movs	r2, #0
 800680a:	725a      	strb	r2, [r3, #9]

				/* Update key button byte */
				hid_event.ux_device_class_hid_event_buffer[2] = key_event.key;
 800680c:	183b      	adds	r3, r7, r0
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b2da      	uxtb	r2, r3
 8006812:	187b      	adds	r3, r7, r1
 8006814:	729a      	strb	r2, [r3, #10]

				/* Send keyboard event */
				ux_device_class_hid_event_set(hid_keyboard, &hid_event);
 8006816:	4b16      	ldr	r3, [pc, #88]	@ (8006870 <hid_keyboard_thread+0x114>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	187a      	adds	r2, r7, r1
 800681c:	0011      	movs	r1, r2
 800681e:	0018      	movs	r0, r3
 8006820:	f012 fa28 	bl	8018c74 <_ux_device_class_hid_event_set>
			if (key_event.key > 0x00FF){
 8006824:	e01f      	b.n	8006866 <hid_keyboard_thread+0x10a>
			}


			else if (key_event.state == KEY_RELEASED){
 8006826:	2308      	movs	r3, #8
 8006828:	18fb      	adds	r3, r7, r3
 800682a:	789b      	ldrb	r3, [r3, #2]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d11a      	bne.n	8006866 <hid_keyboard_thread+0x10a>

				hid_event.ux_device_class_hid_event_length = 8;
 8006830:	210c      	movs	r1, #12
 8006832:	187b      	adds	r3, r7, r1
 8006834:	2208      	movs	r2, #8
 8006836:	629a      	str	r2, [r3, #40]	@ 0x28

				/* This byte is a modifier byte */
				hid_event.ux_device_class_hid_event_buffer[0] = modifier;
 8006838:	187b      	adds	r3, r7, r1
 800683a:	223f      	movs	r2, #63	@ 0x3f
 800683c:	18ba      	adds	r2, r7, r2
 800683e:	7812      	ldrb	r2, [r2, #0]
 8006840:	721a      	strb	r2, [r3, #8]

				/* This byte is reserved */
				hid_event.ux_device_class_hid_event_buffer[1] = 0;
 8006842:	187b      	adds	r3, r7, r1
 8006844:	2200      	movs	r2, #0
 8006846:	725a      	strb	r2, [r3, #9]

				/* Update key button byte */
				hid_event.ux_device_class_hid_event_buffer[2] = 0;
 8006848:	187b      	adds	r3, r7, r1
 800684a:	2200      	movs	r2, #0
 800684c:	729a      	strb	r2, [r3, #10]

				/* Send keyboard event */
				ux_device_class_hid_event_set(hid_keyboard, &hid_event);
 800684e:	4b08      	ldr	r3, [pc, #32]	@ (8006870 <hid_keyboard_thread+0x114>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	187a      	adds	r2, r7, r1
 8006854:	0011      	movs	r1, r2
 8006856:	0018      	movs	r0, r3
 8006858:	f012 fa0c 	bl	8018c74 <_ux_device_class_hid_event_set>
			if (key_event.key > 0x00FF){
 800685c:	e003      	b.n	8006866 <hid_keyboard_thread+0x10a>
		}
		}
		else
		{
			/* Sleep thread for 10ms */
			tx_thread_sleep(MS_TO_TICK(10));
 800685e:	2001      	movs	r0, #1
 8006860:	f00b fe54 	bl	801250c <_tx_thread_sleep>
 8006864:	e78d      	b.n	8006782 <hid_keyboard_thread+0x26>
			if (key_event.key > 0x00FF){
 8006866:	46c0      	nop			@ (mov r8, r8)
		if ((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (hid_keyboard != UX_NULL))
 8006868:	e78b      	b.n	8006782 <hid_keyboard_thread+0x26>
 800686a:	46c0      	nop			@ (mov r8, r8)
 800686c:	20011854 	.word	0x20011854
 8006870:	20010864 	.word	0x20010864
 8006874:	2001082c 	.word	0x2001082c

08006878 <USBD_HID_Mouse_Activate>:
  *         This function is called when insertion of a HID Mouse device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_HID_Mouse_Activate(VOID *hid_instance)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_HID_Mouse_Activate */

  /* Save the HID mouse instance */
  hid_mouse = (UX_SLAVE_CLASS_HID*) hid_instance;
 8006880:	4b03      	ldr	r3, [pc, #12]	@ (8006890 <USBD_HID_Mouse_Activate+0x18>)
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	601a      	str	r2, [r3, #0]

  /* USER CODE END USBD_HID_Mouse_Activate */

  return;
 8006886:	46c0      	nop			@ (mov r8, r8)
}
 8006888:	46bd      	mov	sp, r7
 800688a:	b002      	add	sp, #8
 800688c:	bd80      	pop	{r7, pc}
 800688e:	46c0      	nop			@ (mov r8, r8)
 8006890:	20010868 	.word	0x20010868

08006894 <USBD_HID_Mouse_Deactivate>:
  *         This function is called when extraction of a HID Mouse device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_HID_Mouse_Deactivate(VOID *hid_instance)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_HID_Mouse_Deactivate */
  UX_PARAMETER_NOT_USED(hid_instance);

  /* Reset the HID mouse instance */
  hid_mouse = UX_NULL;
 800689c:	4b03      	ldr	r3, [pc, #12]	@ (80068ac <USBD_HID_Mouse_Deactivate+0x18>)
 800689e:	2200      	movs	r2, #0
 80068a0:	601a      	str	r2, [r3, #0]

  /* USER CODE END USBD_HID_Mouse_Deactivate */

  return;
 80068a2:	46c0      	nop			@ (mov r8, r8)
}
 80068a4:	46bd      	mov	sp, r7
 80068a6:	b002      	add	sp, #8
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	46c0      	nop			@ (mov r8, r8)
 80068ac:	20010868 	.word	0x20010868

080068b0 <USBD_HID_Mouse_SetReport>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_HID_Mouse_SetReport(UX_SLAVE_CLASS_HID *hid_instance,
                              UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  UINT status = UX_SUCCESS;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN USBD_HID_Mouse_SetReport */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  /* USER CODE END USBD_HID_Mouse_SetReport */

  return status;
 80068be:	68fb      	ldr	r3, [r7, #12]
}
 80068c0:	0018      	movs	r0, r3
 80068c2:	46bd      	mov	sp, r7
 80068c4:	b004      	add	sp, #16
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USBD_HID_Mouse_GetReport>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_HID_Mouse_GetReport(UX_SLAVE_CLASS_HID *hid_instance,
                              UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  UINT status = UX_SUCCESS;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN USBD_HID_Mouse_GetReport */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  /* USER CODE END USBD_HID_Mouse_GetReport */

  return status;
 80068d6:	68fb      	ldr	r3, [r7, #12]
}
 80068d8:	0018      	movs	r0, r3
 80068da:	46bd      	mov	sp, r7
 80068dc:	b004      	add	sp, #16
 80068de:	bd80      	pop	{r7, pc}

080068e0 <hid_mouse_thread>:
  * @brief  Function implementing usbx_hid_mouse_thread_entry.
  * @param  thread_input: not used
  * @retval none
  */
void hid_mouse_thread(uint32_t thread_input)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08e      	sub	sp, #56	@ 0x38
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UX_SLAVE_CLASS_HID_EVENT hid_event;

  TX_PARAMETER_NOT_USED(thread_input);

  /* Get the pointer to the device */
  device = &_ux_system_slave -> ux_system_slave_device;
 80068e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006920 <hid_mouse_thread+0x40>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3320      	adds	r3, #32
 80068ee:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Reset the HID event structure */
  ux_utility_memory_set(&hid_event, 0, sizeof(UX_SLAVE_CLASS_HID_EVENT));
 80068f0:	2308      	movs	r3, #8
 80068f2:	18fb      	adds	r3, r7, r3
 80068f4:	222c      	movs	r2, #44	@ 0x2c
 80068f6:	2100      	movs	r1, #0
 80068f8:	0018      	movs	r0, r3
 80068fa:	f011 fd6d 	bl	80183d8 <_ux_utility_memory_set>

  while (1)
  {
    /* Check if the device state already configured */
    if ((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (hid_mouse != UX_NULL))
 80068fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b03      	cmp	r3, #3
 8006904:	d107      	bne.n	8006916 <hid_mouse_thread+0x36>
 8006906:	4b07      	ldr	r3, [pc, #28]	@ (8006924 <hid_mouse_thread+0x44>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <hid_mouse_thread+0x36>
    {
      /* Sleep for 10ms */
      tx_thread_sleep(MS_TO_TICK(10));
 800690e:	2001      	movs	r0, #1
 8006910:	f00b fdfc 	bl	801250c <_tx_thread_sleep>
 8006914:	e002      	b.n	800691c <hid_mouse_thread+0x3c>
//      JoyState = JOY_NONE;
    }
    else
    {
      /* Sleep thread for 10ms */
      tx_thread_sleep(MS_TO_TICK(10));
 8006916:	2001      	movs	r0, #1
 8006918:	f00b fdf8 	bl	801250c <_tx_thread_sleep>
    if ((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (hid_mouse != UX_NULL))
 800691c:	e7ef      	b.n	80068fe <hid_mouse_thread+0x1e>
 800691e:	46c0      	nop			@ (mov r8, r8)
 8006920:	20011854 	.word	0x20011854
 8006924:	20010868 	.word	0x20010868

08006928 <key_init>:
 *      Author: bens1
 */

#include "keys.h"

void key_init(key_HandleTypeDef *key, keyName_TypeDef key_name, GPIO_TypeDef *port, uint16_t pin, TX_QUEUE *queue){
 8006928:	b590      	push	{r4, r7, lr}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	0008      	movs	r0, r1
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	0019      	movs	r1, r3
 8006936:	240a      	movs	r4, #10
 8006938:	193b      	adds	r3, r7, r4
 800693a:	1c02      	adds	r2, r0, #0
 800693c:	801a      	strh	r2, [r3, #0]
 800693e:	2008      	movs	r0, #8
 8006940:	183b      	adds	r3, r7, r0
 8006942:	1c0a      	adds	r2, r1, #0
 8006944:	801a      	strh	r2, [r3, #0]

	key->key_name = key_name;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	193a      	adds	r2, r7, r4
 800694a:	8812      	ldrh	r2, [r2, #0]
 800694c:	815a      	strh	r2, [r3, #10]
	key->port = port;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	605a      	str	r2, [r3, #4]
	key->pin = pin;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	183a      	adds	r2, r7, r0
 8006958:	8812      	ldrh	r2, [r2, #0]
 800695a:	801a      	strh	r2, [r3, #0]
	key->queue = queue;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a3a      	ldr	r2, [r7, #32]
 8006960:	60da      	str	r2, [r3, #12]

	key->current_state = HAL_GPIO_ReadPin(key->port, key->pin);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	0019      	movs	r1, r3
 800696c:	0010      	movs	r0, r2
 800696e:	f002 f8f9 	bl	8008b64 <HAL_GPIO_ReadPin>
 8006972:	0003      	movs	r3, r0
 8006974:	001a      	movs	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	721a      	strb	r2, [r3, #8]
	key->previous_state = key->current_state;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	7a1a      	ldrb	r2, [r3, #8]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	725a      	strb	r2, [r3, #9]
}
 8006982:	46c0      	nop			@ (mov r8, r8)
 8006984:	46bd      	mov	sp, r7
 8006986:	b005      	add	sp, #20
 8006988:	bd90      	pop	{r4, r7, pc}

0800698a <key_update>:

void key_update(key_HandleTypeDef *key){
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]

	key->current_state = HAL_GPIO_ReadPin(key->port, key->pin);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	0019      	movs	r1, r3
 800699c:	0010      	movs	r0, r2
 800699e:	f002 f8e1 	bl	8008b64 <HAL_GPIO_ReadPin>
 80069a2:	0003      	movs	r3, r0
 80069a4:	001a      	movs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	721a      	strb	r2, [r3, #8]

	/* Key pressed */
	if (key->current_state == GPIO_PIN_RESET && key->previous_state == GPIO_PIN_SET){
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	7a1b      	ldrb	r3, [r3, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d113      	bne.n	80069da <key_update+0x50>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	7a5b      	ldrb	r3, [r3, #9]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d10f      	bne.n	80069da <key_update+0x50>

		key->event.key = key->key_name;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	895a      	ldrh	r2, [r3, #10]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	821a      	strh	r2, [r3, #16]
		key->event.state = KEY_PRESSED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	749a      	strb	r2, [r3, #18]

		tx_queue_send(key->queue, &key->event, TX_NO_WAIT);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68d8      	ldr	r0, [r3, #12]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3310      	adds	r3, #16
 80069d0:	2200      	movs	r2, #0
 80069d2:	0019      	movs	r1, r3
 80069d4:	f00d f96a 	bl	8013cac <_txe_queue_send>
 80069d8:	e016      	b.n	8006a08 <key_update+0x7e>
	}

	/* Key released */
	else if (key->current_state == GPIO_PIN_SET && key->previous_state == GPIO_PIN_RESET){
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	7a1b      	ldrb	r3, [r3, #8]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d112      	bne.n	8006a08 <key_update+0x7e>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	7a5b      	ldrb	r3, [r3, #9]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10e      	bne.n	8006a08 <key_update+0x7e>

		key->event.key = key->key_name;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	895a      	ldrh	r2, [r3, #10]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	821a      	strh	r2, [r3, #16]
		key->event.state = KEY_RELEASED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	749a      	strb	r2, [r3, #18]

		tx_queue_send(key->queue, &key->event, TX_NO_WAIT);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68d8      	ldr	r0, [r3, #12]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3310      	adds	r3, #16
 8006a00:	2200      	movs	r2, #0
 8006a02:	0019      	movs	r1, r3
 8006a04:	f00d f952 	bl	8013cac <_txe_queue_send>
	}

	key->previous_state = key->current_state;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	7a1a      	ldrb	r2, [r3, #8]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	725a      	strb	r2, [r3, #9]
}
 8006a10:	46c0      	nop			@ (mov r8, r8)
 8006a12:	46bd      	mov	sp, r7
 8006a14:	b002      	add	sp, #8
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_STORAGE_Activate>:
  *         This function is called when insertion of a storage device.
  * @param  storage_instance: Pointer to the storage class instance.
  * @retval none
  */
VOID USBD_STORAGE_Activate(VOID *storage_instance)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_STORAGE_Activate */
  UX_PARAMETER_NOT_USED(storage_instance);
  /* USER CODE END USBD_STORAGE_Activate */

  return;
 8006a20:	46c0      	nop			@ (mov r8, r8)
}
 8006a22:	46bd      	mov	sp, r7
 8006a24:	b002      	add	sp, #8
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USBD_STORAGE_Deactivate>:
  *         This function is called when extraction of a storage device.
  * @param  storage_instance: Pointer to the storage class instance.
  * @retval none
  */
VOID USBD_STORAGE_Deactivate(VOID *storage_instance)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_STORAGE_Activate */
  UX_PARAMETER_NOT_USED(storage_instance);
  /* USER CODE END USBD_STORAGE_Activate */

  return;
 8006a30:	46c0      	nop			@ (mov r8, r8)
}
 8006a32:	46bd      	mov	sp, r7
 8006a34:	b002      	add	sp, #8
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <USBD_STORAGE_Read>:
  *                       callback return value.
  * @retval status
  */
UINT USBD_STORAGE_Read(VOID *storage_instance, ULONG lun, UCHAR *data_pointer,
                       ULONG number_blocks, ULONG lba, ULONG *media_status)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
  UINT status = UX_SUCCESS;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN USBD_STORAGE_Read */
  UX_PARAMETER_NOT_USED(storage_instance);
  UX_PARAMETER_NOT_USED(lun);
  UX_PARAMETER_NOT_USED(media_status);

  ULONG ReadFlags = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	613b      	str	r3, [r7, #16]

  /* USER CODE END USBD_STORAGE_Read */

  return status;
 8006a4e:	697b      	ldr	r3, [r7, #20]
}
 8006a50:	0018      	movs	r0, r3
 8006a52:	46bd      	mov	sp, r7
 8006a54:	b006      	add	sp, #24
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBD_STORAGE_Write>:
  *                       callback return value.
  * @retval status
  */
UINT USBD_STORAGE_Write(VOID *storage_instance, ULONG lun, UCHAR *data_pointer,
                        ULONG number_blocks, ULONG lba, ULONG *media_status)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
  UINT status = UX_SUCCESS;
 8006a66:	2300      	movs	r3, #0
 8006a68:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN USBD_STORAGE_Write */
  UX_PARAMETER_NOT_USED(storage_instance);
  UX_PARAMETER_NOT_USED(lun);
  UX_PARAMETER_NOT_USED(media_status);

  ULONG WriteFlags = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	613b      	str	r3, [r7, #16]



  return status;
 8006a6e:	697b      	ldr	r3, [r7, #20]
}
 8006a70:	0018      	movs	r0, r3
 8006a72:	46bd      	mov	sp, r7
 8006a74:	b006      	add	sp, #24
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USBD_STORAGE_Flush>:
  *                       callback return value.
  * @retval status
  */
UINT USBD_STORAGE_Flush(VOID *storage_instance, ULONG lun, ULONG number_blocks,
                        ULONG lba, ULONG *media_status)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	603b      	str	r3, [r7, #0]
  UINT status = UX_SUCCESS;
 8006a86:	2300      	movs	r3, #0
 8006a88:	617b      	str	r3, [r7, #20]
  UX_PARAMETER_NOT_USED(number_blocks);
  UX_PARAMETER_NOT_USED(lba);
  UX_PARAMETER_NOT_USED(media_status);
  /* USER CODE END USBD_STORAGE_Flush */

  return status;
 8006a8a:	697b      	ldr	r3, [r7, #20]
}
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	b006      	add	sp, #24
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USBD_STORAGE_Status>:
  *                       callback return value.
  * @retval status
  */
UINT USBD_STORAGE_Status(VOID *storage_instance, ULONG lun, ULONG media_id,
                         ULONG *media_status)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
  UINT status = UX_SUCCESS;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
  UX_PARAMETER_NOT_USED(lun);
  UX_PARAMETER_NOT_USED(media_id);
  UX_PARAMETER_NOT_USED(media_status);
  /* USER CODE END USBD_STORAGE_Status */

  return status;
 8006aa6:	697b      	ldr	r3, [r7, #20]
}
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	b006      	add	sp, #24
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_STORAGE_Notification>:
  * @retval status
  */
UINT USBD_STORAGE_Notification(VOID *storage_instance, ULONG lun, ULONG media_id,
                               ULONG notification_class, UCHAR **media_notification,
                               ULONG *media_notification_length)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	603b      	str	r3, [r7, #0]
  UINT status = UX_SUCCESS;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	617b      	str	r3, [r7, #20]
  UX_PARAMETER_NOT_USED(notification_class);
  UX_PARAMETER_NOT_USED(media_notification);
  UX_PARAMETER_NOT_USED(media_notification_length);
  /* USER CODE END USBD_STORAGE_Notification */

  return status;
 8006ac2:	697b      	ldr	r3, [r7, #20]
}
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	b006      	add	sp, #24
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USBD_STORAGE_GetMediaLastLba>:
  *         Get Media last LBA.
  * @param  none
  * @retval last lba
  */
ULONG USBD_STORAGE_GetMediaLastLba(VOID)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
  ULONG LastLba = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN USBD_STORAGE_GetMediaLastLba */

  LastLba = (ULONG) 1; // TODO: get better value
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	607b      	str	r3, [r7, #4]

  /* USER CODE END USBD_STORAGE_GetMediaLastLba */

  return LastLba;
 8006ada:	687b      	ldr	r3, [r7, #4]
}
 8006adc:	0018      	movs	r0, r3
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	b002      	add	sp, #8
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_STORAGE_GetMediaBlocklength>:
  *         Get Media block length.
  * @param  none.
  * @retval block length.
  */
ULONG USBD_STORAGE_GetMediaBlocklength(VOID)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
  ULONG MediaBlockLen = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN USBD_STORAGE_GetMediaBlocklength */

  MediaBlockLen = (ULONG) 512; // TODO: get better value
 8006aee:	2380      	movs	r3, #128	@ 0x80
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	607b      	str	r3, [r7, #4]

  /* USER CODE END USBD_STORAGE_GetMediaBlocklength */

  return MediaBlockLen;
 8006af4:	687b      	ldr	r3, [r7, #4]
}
 8006af6:	0018      	movs	r0, r3
 8006af8:	46bd      	mov	sp, r7
 8006afa:	b002      	add	sp, #8
 8006afc:	bd80      	pop	{r7, pc}

08006afe <msc_thread>:




void msc_thread(uint32_t thread_input){
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b082      	sub	sp, #8
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]

}
 8006b06:	46c0      	nop			@ (mov r8, r8)
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	b002      	add	sp, #8
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <scan_keys_thread>:
#include "threads.h"
#include "keys.h"

key_HandleTypeDef keys[NUMBER_OF_KEYS];

void scan_keys_thread(uint32_t initial_input){
 8006b10:	b590      	push	{r4, r7, lr}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	6078      	str	r0, [r7, #4]

	key_init(&keys[0], KEY_NAME_6, KEY_A7_GPIO_Port, KEY_A7_Pin, &keyboard_queue_ptr);
 8006b18:	4a61      	ldr	r2, [pc, #388]	@ (8006ca0 <scan_keys_thread+0x190>)
 8006b1a:	4862      	ldr	r0, [pc, #392]	@ (8006ca4 <scan_keys_thread+0x194>)
 8006b1c:	4b62      	ldr	r3, [pc, #392]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	2340      	movs	r3, #64	@ 0x40
 8006b22:	2123      	movs	r1, #35	@ 0x23
 8006b24:	f7ff ff00 	bl	8006928 <key_init>
	key_init(&keys[1], KEY_NAME_7, KEY_A8_GPIO_Port, KEY_A8_Pin, &keyboard_queue_ptr);
 8006b28:	4a5d      	ldr	r2, [pc, #372]	@ (8006ca0 <scan_keys_thread+0x190>)
 8006b2a:	4860      	ldr	r0, [pc, #384]	@ (8006cac <scan_keys_thread+0x19c>)
 8006b2c:	4b5e      	ldr	r3, [pc, #376]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	2380      	movs	r3, #128	@ 0x80
 8006b32:	2124      	movs	r1, #36	@ 0x24
 8006b34:	f7ff fef8 	bl	8006928 <key_init>
	key_init(&keys[2], KEY_NAME_8, KEY_A9_GPIO_Port, KEY_A9_Pin, &keyboard_queue_ptr);
 8006b38:	2380      	movs	r3, #128	@ 0x80
 8006b3a:	021a      	lsls	r2, r3, #8
 8006b3c:	495c      	ldr	r1, [pc, #368]	@ (8006cb0 <scan_keys_thread+0x1a0>)
 8006b3e:	485d      	ldr	r0, [pc, #372]	@ (8006cb4 <scan_keys_thread+0x1a4>)
 8006b40:	4b59      	ldr	r3, [pc, #356]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	0013      	movs	r3, r2
 8006b46:	000a      	movs	r2, r1
 8006b48:	2125      	movs	r1, #37	@ 0x25
 8006b4a:	f7ff feed 	bl	8006928 <key_init>
	key_init(&keys[3], KEY_NAME_9, KEY_A10_GPIO_Port, KEY_A10_Pin, &keyboard_queue_ptr);
 8006b4e:	4a5a      	ldr	r2, [pc, #360]	@ (8006cb8 <scan_keys_thread+0x1a8>)
 8006b50:	485a      	ldr	r0, [pc, #360]	@ (8006cbc <scan_keys_thread+0x1ac>)
 8006b52:	4b55      	ldr	r3, [pc, #340]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	2301      	movs	r3, #1
 8006b58:	2126      	movs	r1, #38	@ 0x26
 8006b5a:	f7ff fee5 	bl	8006928 <key_init>
	key_init(&keys[4], KEY_NAME_0, KEY_A11_GPIO_Port, KEY_A11_Pin, &keyboard_queue_ptr);
 8006b5e:	4a56      	ldr	r2, [pc, #344]	@ (8006cb8 <scan_keys_thread+0x1a8>)
 8006b60:	4857      	ldr	r0, [pc, #348]	@ (8006cc0 <scan_keys_thread+0x1b0>)
 8006b62:	4b51      	ldr	r3, [pc, #324]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	2302      	movs	r3, #2
 8006b68:	2127      	movs	r1, #39	@ 0x27
 8006b6a:	f7ff fedd 	bl	8006928 <key_init>
	key_init(&keys[5], KEY_NAME_Y, KEY_B7_GPIO_Port, KEY_B7_Pin, &keyboard_queue_ptr);
 8006b6e:	4a4c      	ldr	r2, [pc, #304]	@ (8006ca0 <scan_keys_thread+0x190>)
 8006b70:	4854      	ldr	r0, [pc, #336]	@ (8006cc4 <scan_keys_thread+0x1b4>)
 8006b72:	4b4d      	ldr	r3, [pc, #308]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	2320      	movs	r3, #32
 8006b78:	211c      	movs	r1, #28
 8006b7a:	f7ff fed5 	bl	8006928 <key_init>
	key_init(&keys[6], KEY_NAME_U, KEY_B8_GPIO_Port, KEY_B8_Pin, &keyboard_queue_ptr);
 8006b7e:	2380      	movs	r3, #128	@ 0x80
 8006b80:	01da      	lsls	r2, r3, #7
 8006b82:	494b      	ldr	r1, [pc, #300]	@ (8006cb0 <scan_keys_thread+0x1a0>)
 8006b84:	4850      	ldr	r0, [pc, #320]	@ (8006cc8 <scan_keys_thread+0x1b8>)
 8006b86:	4b48      	ldr	r3, [pc, #288]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	0013      	movs	r3, r2
 8006b8c:	000a      	movs	r2, r1
 8006b8e:	2118      	movs	r1, #24
 8006b90:	f7ff feca 	bl	8006928 <key_init>
	key_init(&keys[7], KEY_NAME_I, KEY_B9_GPIO_Port, KEY_B9_Pin, &keyboard_queue_ptr);
 8006b94:	23a0      	movs	r3, #160	@ 0xa0
 8006b96:	05da      	lsls	r2, r3, #23
 8006b98:	484c      	ldr	r0, [pc, #304]	@ (8006ccc <scan_keys_thread+0x1bc>)
 8006b9a:	4b43      	ldr	r3, [pc, #268]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	210c      	movs	r1, #12
 8006ba2:	f7ff fec1 	bl	8006928 <key_init>
	key_init(&keys[8], KEY_NAME_O, KEY_B10_GPIO_Port, KEY_B10_Pin, &keyboard_queue_ptr);
 8006ba6:	23a0      	movs	r3, #160	@ 0xa0
 8006ba8:	05da      	lsls	r2, r3, #23
 8006baa:	4849      	ldr	r0, [pc, #292]	@ (8006cd0 <scan_keys_thread+0x1c0>)
 8006bac:	4b3e      	ldr	r3, [pc, #248]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	2112      	movs	r1, #18
 8006bb4:	f7ff feb8 	bl	8006928 <key_init>
	key_init(&keys[9], KEY_NAME_P, KEY_B11_GPIO_Port, KEY_B11_Pin, &keyboard_queue_ptr);
 8006bb8:	23a0      	movs	r3, #160	@ 0xa0
 8006bba:	05da      	lsls	r2, r3, #23
 8006bbc:	4845      	ldr	r0, [pc, #276]	@ (8006cd4 <scan_keys_thread+0x1c4>)
 8006bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	2320      	movs	r3, #32
 8006bc4:	2113      	movs	r1, #19
 8006bc6:	f7ff feaf 	bl	8006928 <key_init>
	key_init(&keys[10], KEY_NAME_H, KEY_C7_GPIO_Port, KEY_C7_Pin, &keyboard_queue_ptr);
 8006bca:	2380      	movs	r3, #128	@ 0x80
 8006bcc:	019a      	lsls	r2, r3, #6
 8006bce:	4938      	ldr	r1, [pc, #224]	@ (8006cb0 <scan_keys_thread+0x1a0>)
 8006bd0:	4841      	ldr	r0, [pc, #260]	@ (8006cd8 <scan_keys_thread+0x1c8>)
 8006bd2:	4b35      	ldr	r3, [pc, #212]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	0013      	movs	r3, r2
 8006bd8:	000a      	movs	r2, r1
 8006bda:	210b      	movs	r1, #11
 8006bdc:	f7ff fea4 	bl	8006928 <key_init>
	key_init(&keys[11], KEY_NAME_J, KEY_C8_GPIO_Port, KEY_C8_Pin, &keyboard_queue_ptr);
 8006be0:	23a0      	movs	r3, #160	@ 0xa0
 8006be2:	05da      	lsls	r2, r3, #23
 8006be4:	483d      	ldr	r0, [pc, #244]	@ (8006cdc <scan_keys_thread+0x1cc>)
 8006be6:	4b30      	ldr	r3, [pc, #192]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	2304      	movs	r3, #4
 8006bec:	210d      	movs	r1, #13
 8006bee:	f7ff fe9b 	bl	8006928 <key_init>
	key_init(&keys[12], KEY_NAME_K, KEY_C9_GPIO_Port, KEY_C9_Pin, &keyboard_queue_ptr);
 8006bf2:	23a0      	movs	r3, #160	@ 0xa0
 8006bf4:	05da      	lsls	r2, r3, #23
 8006bf6:	483a      	ldr	r0, [pc, #232]	@ (8006ce0 <scan_keys_thread+0x1d0>)
 8006bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	2380      	movs	r3, #128	@ 0x80
 8006bfe:	210e      	movs	r1, #14
 8006c00:	f7ff fe92 	bl	8006928 <key_init>
	key_init(&keys[13], KEY_NAME_L, KEY_C10_GPIO_Port, KEY_C10_Pin, &keyboard_queue_ptr);
 8006c04:	4a26      	ldr	r2, [pc, #152]	@ (8006ca0 <scan_keys_thread+0x190>)
 8006c06:	4837      	ldr	r0, [pc, #220]	@ (8006ce4 <scan_keys_thread+0x1d4>)
 8006c08:	4b27      	ldr	r3, [pc, #156]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	210f      	movs	r1, #15
 8006c10:	f7ff fe8a 	bl	8006928 <key_init>
	key_init(&keys[14], KEY_NAME_N, KEY_D7_GPIO_Port, KEY_D7_Pin, &keyboard_queue_ptr);
 8006c14:	23a0      	movs	r3, #160	@ 0xa0
 8006c16:	05da      	lsls	r2, r3, #23
 8006c18:	4833      	ldr	r0, [pc, #204]	@ (8006ce8 <scan_keys_thread+0x1d8>)
 8006c1a:	4b23      	ldr	r3, [pc, #140]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	2308      	movs	r3, #8
 8006c20:	2111      	movs	r1, #17
 8006c22:	f7ff fe81 	bl	8006928 <key_init>
	key_init(&keys[15], KEY_NAME_M, KEY_D8_GPIO_Port, KEY_D8_Pin, &keyboard_queue_ptr);
 8006c26:	2380      	movs	r3, #128	@ 0x80
 8006c28:	00da      	lsls	r2, r3, #3
 8006c2a:	491d      	ldr	r1, [pc, #116]	@ (8006ca0 <scan_keys_thread+0x190>)
 8006c2c:	482f      	ldr	r0, [pc, #188]	@ (8006cec <scan_keys_thread+0x1dc>)
 8006c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	0013      	movs	r3, r2
 8006c34:	000a      	movs	r2, r1
 8006c36:	2110      	movs	r1, #16
 8006c38:	f7ff fe76 	bl	8006928 <key_init>
	key_init(&keys[16], KEY_MOD_LCTRL, KEY_E4_GPIO_Port, KEY_E4_Pin, &keyboard_queue_ptr);
 8006c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8006cb0 <scan_keys_thread+0x1a0>)
 8006c3e:	2302      	movs	r3, #2
 8006c40:	33ff      	adds	r3, #255	@ 0xff
 8006c42:	0019      	movs	r1, r3
 8006c44:	482a      	ldr	r0, [pc, #168]	@ (8006cf0 <scan_keys_thread+0x1e0>)
 8006c46:	4b18      	ldr	r3, [pc, #96]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	2380      	movs	r3, #128	@ 0x80
 8006c4c:	f7ff fe6c 	bl	8006928 <key_init>
	key_init(&keys[17], KEY_NAME_ENTER, KEY_E5_GPIO_Port, KEY_E5_Pin, &keyboard_queue_ptr);
 8006c50:	4a17      	ldr	r2, [pc, #92]	@ (8006cb0 <scan_keys_thread+0x1a0>)
 8006c52:	4828      	ldr	r0, [pc, #160]	@ (8006cf4 <scan_keys_thread+0x1e4>)
 8006c54:	4b14      	ldr	r3, [pc, #80]	@ (8006ca8 <scan_keys_thread+0x198>)
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	2340      	movs	r3, #64	@ 0x40
 8006c5a:	2128      	movs	r1, #40	@ 0x28
 8006c5c:	f7ff fe64 	bl	8006928 <key_init>


	while (1){

		for (uint8_t i = 0; i < NUMBER_OF_KEYS; i++){
 8006c60:	230f      	movs	r3, #15
 8006c62:	18fb      	adds	r3, r7, r3
 8006c64:	2200      	movs	r2, #0
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	e010      	b.n	8006c8c <scan_keys_thread+0x17c>
			key_update(&keys[i]);
 8006c6a:	240f      	movs	r4, #15
 8006c6c:	193b      	adds	r3, r7, r4
 8006c6e:	781a      	ldrb	r2, [r3, #0]
 8006c70:	0013      	movs	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	189b      	adds	r3, r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4a0a      	ldr	r2, [pc, #40]	@ (8006ca4 <scan_keys_thread+0x194>)
 8006c7a:	189b      	adds	r3, r3, r2
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f7ff fe84 	bl	800698a <key_update>
		for (uint8_t i = 0; i < NUMBER_OF_KEYS; i++){
 8006c82:	193b      	adds	r3, r7, r4
 8006c84:	781a      	ldrb	r2, [r3, #0]
 8006c86:	193b      	adds	r3, r7, r4
 8006c88:	3201      	adds	r2, #1
 8006c8a:	701a      	strb	r2, [r3, #0]
 8006c8c:	230f      	movs	r3, #15
 8006c8e:	18fb      	adds	r3, r7, r3
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b11      	cmp	r3, #17
 8006c94:	d9e9      	bls.n	8006c6a <scan_keys_thread+0x15a>
		}


		tx_thread_sleep(10); // TODO: Remove sleep and do proper timing
 8006c96:	200a      	movs	r0, #10
 8006c98:	f00b fc38 	bl	801250c <_tx_thread_sleep>
		for (uint8_t i = 0; i < NUMBER_OF_KEYS; i++){
 8006c9c:	e7e0      	b.n	8006c60 <scan_keys_thread+0x150>
 8006c9e:	46c0      	nop			@ (mov r8, r8)
 8006ca0:	50000400 	.word	0x50000400
 8006ca4:	2001086c 	.word	0x2001086c
 8006ca8:	2001082c 	.word	0x2001082c
 8006cac:	20010880 	.word	0x20010880
 8006cb0:	50000800 	.word	0x50000800
 8006cb4:	20010894 	.word	0x20010894
 8006cb8:	50001400 	.word	0x50001400
 8006cbc:	200108a8 	.word	0x200108a8
 8006cc0:	200108bc 	.word	0x200108bc
 8006cc4:	200108d0 	.word	0x200108d0
 8006cc8:	200108e4 	.word	0x200108e4
 8006ccc:	200108f8 	.word	0x200108f8
 8006cd0:	2001090c 	.word	0x2001090c
 8006cd4:	20010920 	.word	0x20010920
 8006cd8:	20010934 	.word	0x20010934
 8006cdc:	20010948 	.word	0x20010948
 8006ce0:	2001095c 	.word	0x2001095c
 8006ce4:	20010970 	.word	0x20010970
 8006ce8:	20010984 	.word	0x20010984
 8006cec:	20010998 	.word	0x20010998
 8006cf0:	200109ac 	.word	0x200109ac
 8006cf4:	200109c0 	.word	0x200109c0

08006cf8 <usb_init>:
ULONG storage_interface_number;
ULONG storage_configuration_number;
UX_SLAVE_CLASS_STORAGE_PARAMETER storage_parameter;

UINT usb_init(VOID *memory_ptr)
{
 8006cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cfa:	b097      	sub	sp, #92	@ 0x5c
 8006cfc:	af08      	add	r7, sp, #32
 8006cfe:	6078      	str	r0, [r7, #4]
	UINT ret = UX_SUCCESS;
 8006d00:	2300      	movs	r3, #0
 8006d02:	637b      	str	r3, [r7, #52]	@ 0x34
	TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	633b      	str	r3, [r7, #48]	@ 0x30
	UCHAR *pointer;

	(void)byte_pool;

	/* Allocate the stack for USBX Memory */
	if (tx_byte_allocate(byte_pool, (VOID **) &pointer, USBX_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8006d08:	23ec      	movs	r3, #236	@ 0xec
 8006d0a:	019a      	lsls	r2, r3, #6
 8006d0c:	230c      	movs	r3, #12
 8006d0e:	18f9      	adds	r1, r7, r3
 8006d10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d12:	2300      	movs	r3, #0
 8006d14:	f00c fb2a 	bl	801336c <_txe_byte_allocate>
 8006d18:	1e03      	subs	r3, r0, #0
 8006d1a:	d001      	beq.n	8006d20 <usb_init+0x28>
	{
		/* USER CODE BEGIN USBX_ALLOCATE_STACK_ERORR */
		return TX_POOL_ERROR;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e197      	b.n	8007050 <usb_init+0x358>
		/* USER CODE END USBX_ALLOCATE_STACK_ERORR */
	}

	/* Initialise USBX Memory */
	if (ux_system_initialize(pointer, USBX_MEMORY_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	23ec      	movs	r3, #236	@ 0xec
 8006d24:	0199      	lsls	r1, r3, #6
 8006d26:	2300      	movs	r3, #0
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f010 ff21 	bl	8017b70 <_ux_system_initialize>
 8006d2e:	1e03      	subs	r3, r0, #0
 8006d30:	d001      	beq.n	8006d36 <usb_init+0x3e>
	{
		/* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERORR */
		return UX_ERROR;
 8006d32:	23ff      	movs	r3, #255	@ 0xff
 8006d34:	e18c      	b.n	8007050 <usb_init+0x358>
		/* USER CODE END USBX_SYSTEM_INITIALIZE_ERORR */
	}

	/* Get Device Framework High Speed and get the length */
	device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED, &device_framework_hs_length);
 8006d36:	231c      	movs	r3, #28
 8006d38:	18fb      	adds	r3, r7, r3
 8006d3a:	0019      	movs	r1, r3
 8006d3c:	2001      	movs	r0, #1
 8006d3e:	f016 fe9d 	bl	801da7c <USBD_Get_Device_Framework_Speed>
 8006d42:	0003      	movs	r3, r0
 8006d44:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Get Device Framework Full Speed and get the length */
	device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED, &device_framework_fs_length);
 8006d46:	2318      	movs	r3, #24
 8006d48:	18fb      	adds	r3, r7, r3
 8006d4a:	0019      	movs	r1, r3
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	f016 fe95 	bl	801da7c <USBD_Get_Device_Framework_Speed>
 8006d52:	0003      	movs	r3, r0
 8006d54:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Get String Framework and get the length */
	string_framework = USBD_Get_String_Framework(&string_framework_length);
 8006d56:	2314      	movs	r3, #20
 8006d58:	18fb      	adds	r3, r7, r3
 8006d5a:	0018      	movs	r0, r3
 8006d5c:	f016 fed8 	bl	801db10 <USBD_Get_String_Framework>
 8006d60:	0003      	movs	r3, r0
 8006d62:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Get Language Id Framework and get the length */
	language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 8006d64:	2310      	movs	r3, #16
 8006d66:	18fb      	adds	r3, r7, r3
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f016 ff73 	bl	801dc54 <USBD_Get_Language_Id_Framework>
 8006d6e:	0003      	movs	r3, r0
 8006d70:	623b      	str	r3, [r7, #32]

	/* Install the device portion of USBX */
	if (ux_device_stack_initialize(device_framework_high_speed,
 8006d72:	69f9      	ldr	r1, [r7, #28]
 8006d74:	69bd      	ldr	r5, [r7, #24]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8006d7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d7e:	2600      	movs	r6, #0
 8006d80:	9604      	str	r6, [sp, #16]
 8006d82:	9203      	str	r2, [sp, #12]
 8006d84:	6a3a      	ldr	r2, [r7, #32]
 8006d86:	9202      	str	r2, [sp, #8]
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	002b      	movs	r3, r5
 8006d90:	0022      	movs	r2, r4
 8006d92:	f015 fdbd 	bl	801c910 <_ux_device_stack_initialize>
 8006d96:	1e03      	subs	r3, r0, #0
 8006d98:	d001      	beq.n	8006d9e <usb_init+0xa6>
			string_framework_length,
			language_id_framework,
			language_id_framework_length,
			UX_NULL) != UX_SUCCESS)
	{
		return UX_ERROR;
 8006d9a:	23ff      	movs	r3, #255	@ 0xff
 8006d9c:	e158      	b.n	8007050 <usb_init+0x358>
	}

	/* Initialize the hid mouse class parameters for the device */
	hid_mouse_parameter.ux_slave_class_hid_instance_activate         = USBD_HID_Mouse_Activate;
 8006d9e:	4bae      	ldr	r3, [pc, #696]	@ (8007058 <usb_init+0x360>)
 8006da0:	4aae      	ldr	r2, [pc, #696]	@ (800705c <usb_init+0x364>)
 8006da2:	601a      	str	r2, [r3, #0]
	hid_mouse_parameter.ux_slave_class_hid_instance_deactivate       = USBD_HID_Mouse_Deactivate;
 8006da4:	4bac      	ldr	r3, [pc, #688]	@ (8007058 <usb_init+0x360>)
 8006da6:	4aae      	ldr	r2, [pc, #696]	@ (8007060 <usb_init+0x368>)
 8006da8:	605a      	str	r2, [r3, #4]
	hid_mouse_parameter.ux_device_class_hid_parameter_report_address = USBD_HID_ReportDesc(INTERFACE_HID_MOUSE);
 8006daa:	2002      	movs	r0, #2
 8006dac:	f016 ffde 	bl	801dd6c <USBD_HID_ReportDesc>
 8006db0:	0002      	movs	r2, r0
 8006db2:	4ba9      	ldr	r3, [pc, #676]	@ (8007058 <usb_init+0x360>)
 8006db4:	609a      	str	r2, [r3, #8]
	hid_mouse_parameter.ux_device_class_hid_parameter_report_length  = USBD_HID_ReportDesc_length(INTERFACE_HID_MOUSE);
 8006db6:	2002      	movs	r0, #2
 8006db8:	f016 fff6 	bl	801dda8 <USBD_HID_ReportDesc_length>
 8006dbc:	0003      	movs	r3, r0
 8006dbe:	001a      	movs	r2, r3
 8006dc0:	4ba5      	ldr	r3, [pc, #660]	@ (8007058 <usb_init+0x360>)
 8006dc2:	611a      	str	r2, [r3, #16]
	hid_mouse_parameter.ux_device_class_hid_parameter_report_id      = UX_FALSE;
 8006dc4:	4ba4      	ldr	r3, [pc, #656]	@ (8007058 <usb_init+0x360>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	60da      	str	r2, [r3, #12]
	hid_mouse_parameter.ux_device_class_hid_parameter_callback       = USBD_HID_Mouse_SetReport;
 8006dca:	4ba3      	ldr	r3, [pc, #652]	@ (8007058 <usb_init+0x360>)
 8006dcc:	4aa5      	ldr	r2, [pc, #660]	@ (8007064 <usb_init+0x36c>)
 8006dce:	615a      	str	r2, [r3, #20]
	hid_mouse_parameter.ux_device_class_hid_parameter_get_callback   = USBD_HID_Mouse_GetReport;
 8006dd0:	4ba1      	ldr	r3, [pc, #644]	@ (8007058 <usb_init+0x360>)
 8006dd2:	4aa5      	ldr	r2, [pc, #660]	@ (8007068 <usb_init+0x370>)
 8006dd4:	619a      	str	r2, [r3, #24]

	/* Get hid mouse configuration number */
	hid_mouse_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_MOUSE);
 8006dd6:	2102      	movs	r1, #2
 8006dd8:	2001      	movs	r0, #1
 8006dda:	f016 ffb3 	bl	801dd44 <USBD_Get_Configuration_Number>
 8006dde:	0003      	movs	r3, r0
 8006de0:	001a      	movs	r2, r3
 8006de2:	4ba2      	ldr	r3, [pc, #648]	@ (800706c <usb_init+0x374>)
 8006de4:	601a      	str	r2, [r3, #0]

	/* Find hid mouse interface number */
	hid_mouse_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_MOUSE);
 8006de6:	2102      	movs	r1, #2
 8006de8:	2001      	movs	r0, #1
 8006dea:	f016 ff5b 	bl	801dca4 <USBD_Get_Interface_Number>
 8006dee:	0003      	movs	r3, r0
 8006df0:	001a      	movs	r2, r3
 8006df2:	4b9f      	ldr	r3, [pc, #636]	@ (8007070 <usb_init+0x378>)
 8006df4:	601a      	str	r2, [r3, #0]

	/* Initialize the device hid Mouse class */
	if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 8006df6:	4b9d      	ldr	r3, [pc, #628]	@ (800706c <usb_init+0x374>)
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	4b9d      	ldr	r3, [pc, #628]	@ (8007070 <usb_init+0x378>)
 8006dfc:	681c      	ldr	r4, [r3, #0]
 8006dfe:	499d      	ldr	r1, [pc, #628]	@ (8007074 <usb_init+0x37c>)
 8006e00:	489d      	ldr	r0, [pc, #628]	@ (8007078 <usb_init+0x380>)
 8006e02:	4b95      	ldr	r3, [pc, #596]	@ (8007058 <usb_init+0x360>)
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	0023      	movs	r3, r4
 8006e08:	f014 fda2 	bl	801b950 <_ux_device_stack_class_register>
 8006e0c:	1e03      	subs	r3, r0, #0
 8006e0e:	d001      	beq.n	8006e14 <usb_init+0x11c>
			hid_mouse_configuration_number,
			hid_mouse_interface_number,
			&hid_mouse_parameter) != UX_SUCCESS)
	{
		/* USER CODE BEGIN USBX_DEVICE_HID_MOUSE_REGISTER_ERORR */
		return UX_ERROR;
 8006e10:	23ff      	movs	r3, #255	@ 0xff
 8006e12:	e11d      	b.n	8007050 <usb_init+0x358>
		/* USER CODE END USBX_DEVICE_HID_MOUSE_REGISTER_ERORR */
	}

	/* Initialize the hid keyboard class parameters for the device */
	hid_keyboard_parameter.ux_slave_class_hid_instance_activate         = USBD_HID_Keyboard_Activate;
 8006e14:	4b99      	ldr	r3, [pc, #612]	@ (800707c <usb_init+0x384>)
 8006e16:	4a9a      	ldr	r2, [pc, #616]	@ (8007080 <usb_init+0x388>)
 8006e18:	601a      	str	r2, [r3, #0]
	hid_keyboard_parameter.ux_slave_class_hid_instance_deactivate       = USBD_HID_Keyboard_Deactivate;
 8006e1a:	4b98      	ldr	r3, [pc, #608]	@ (800707c <usb_init+0x384>)
 8006e1c:	4a99      	ldr	r2, [pc, #612]	@ (8007084 <usb_init+0x38c>)
 8006e1e:	605a      	str	r2, [r3, #4]
	hid_keyboard_parameter.ux_device_class_hid_parameter_report_address = USBD_HID_ReportDesc(INTERFACE_HID_KEYBOARD);
 8006e20:	2001      	movs	r0, #1
 8006e22:	f016 ffa3 	bl	801dd6c <USBD_HID_ReportDesc>
 8006e26:	0002      	movs	r2, r0
 8006e28:	4b94      	ldr	r3, [pc, #592]	@ (800707c <usb_init+0x384>)
 8006e2a:	609a      	str	r2, [r3, #8]
	hid_keyboard_parameter.ux_device_class_hid_parameter_report_length  = USBD_HID_ReportDesc_length(INTERFACE_HID_KEYBOARD);
 8006e2c:	2001      	movs	r0, #1
 8006e2e:	f016 ffbb 	bl	801dda8 <USBD_HID_ReportDesc_length>
 8006e32:	0003      	movs	r3, r0
 8006e34:	001a      	movs	r2, r3
 8006e36:	4b91      	ldr	r3, [pc, #580]	@ (800707c <usb_init+0x384>)
 8006e38:	611a      	str	r2, [r3, #16]
	hid_keyboard_parameter.ux_device_class_hid_parameter_report_id      = UX_FALSE;
 8006e3a:	4b90      	ldr	r3, [pc, #576]	@ (800707c <usb_init+0x384>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	60da      	str	r2, [r3, #12]
	hid_keyboard_parameter.ux_device_class_hid_parameter_callback       = USBD_HID_Keyboard_SetReport;
 8006e40:	4b8e      	ldr	r3, [pc, #568]	@ (800707c <usb_init+0x384>)
 8006e42:	4a91      	ldr	r2, [pc, #580]	@ (8007088 <usb_init+0x390>)
 8006e44:	615a      	str	r2, [r3, #20]
	hid_keyboard_parameter.ux_device_class_hid_parameter_get_callback   = USBD_HID_Keyboard_GetReport;
 8006e46:	4b8d      	ldr	r3, [pc, #564]	@ (800707c <usb_init+0x384>)
 8006e48:	4a90      	ldr	r2, [pc, #576]	@ (800708c <usb_init+0x394>)
 8006e4a:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN HID_KEYBOARD_PARAMETER */

	/* USER CODE END HID_KEYBOARD_PARAMETER */

	/* Get hid keyboard configuration number */
	hid_keyboard_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_KEYBOARD);
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	2001      	movs	r0, #1
 8006e50:	f016 ff78 	bl	801dd44 <USBD_Get_Configuration_Number>
 8006e54:	0003      	movs	r3, r0
 8006e56:	001a      	movs	r2, r3
 8006e58:	4b8d      	ldr	r3, [pc, #564]	@ (8007090 <usb_init+0x398>)
 8006e5a:	601a      	str	r2, [r3, #0]

	/* Find hid keyboard interface number */
	hid_keyboard_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_KEYBOARD);
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	2001      	movs	r0, #1
 8006e60:	f016 ff20 	bl	801dca4 <USBD_Get_Interface_Number>
 8006e64:	0003      	movs	r3, r0
 8006e66:	001a      	movs	r2, r3
 8006e68:	4b8a      	ldr	r3, [pc, #552]	@ (8007094 <usb_init+0x39c>)
 8006e6a:	601a      	str	r2, [r3, #0]

	/* Initialize the device hid keyboard class */
	if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 8006e6c:	4b88      	ldr	r3, [pc, #544]	@ (8007090 <usb_init+0x398>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	4b88      	ldr	r3, [pc, #544]	@ (8007094 <usb_init+0x39c>)
 8006e72:	681c      	ldr	r4, [r3, #0]
 8006e74:	497f      	ldr	r1, [pc, #508]	@ (8007074 <usb_init+0x37c>)
 8006e76:	4880      	ldr	r0, [pc, #512]	@ (8007078 <usb_init+0x380>)
 8006e78:	4b80      	ldr	r3, [pc, #512]	@ (800707c <usb_init+0x384>)
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	0023      	movs	r3, r4
 8006e7e:	f014 fd67 	bl	801b950 <_ux_device_stack_class_register>
 8006e82:	1e03      	subs	r3, r0, #0
 8006e84:	d001      	beq.n	8006e8a <usb_init+0x192>
			ux_device_class_hid_entry,
			hid_keyboard_configuration_number,
			hid_keyboard_interface_number,
			&hid_keyboard_parameter) != UX_SUCCESS)
	{
		return UX_ERROR;
 8006e86:	23ff      	movs	r3, #255	@ 0xff
 8006e88:	e0e2      	b.n	8007050 <usb_init+0x358>
	}

	/* Initialise the storage class parameters for the device */
	storage_parameter.ux_slave_class_storage_instance_activate   = USBD_STORAGE_Activate;
 8006e8a:	4b83      	ldr	r3, [pc, #524]	@ (8007098 <usb_init+0x3a0>)
 8006e8c:	4a83      	ldr	r2, [pc, #524]	@ (800709c <usb_init+0x3a4>)
 8006e8e:	601a      	str	r2, [r3, #0]
	storage_parameter.ux_slave_class_storage_instance_deactivate = USBD_STORAGE_Deactivate;
 8006e90:	4b81      	ldr	r3, [pc, #516]	@ (8007098 <usb_init+0x3a0>)
 8006e92:	4a83      	ldr	r2, [pc, #524]	@ (80070a0 <usb_init+0x3a8>)
 8006e94:	605a      	str	r2, [r3, #4]

	/* Store the number of LUN in this device storage instance */
	storage_parameter.ux_slave_class_storage_parameter_number_lun = STORAGE_NUMBER_LUN;
 8006e96:	4b80      	ldr	r3, [pc, #512]	@ (8007098 <usb_init+0x3a0>)
 8006e98:	2201      	movs	r2, #1
 8006e9a:	609a      	str	r2, [r3, #8]

	/* Initialise the storage class parameters for reading/writing to the Flash Disk */
	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_last_lba = USBD_STORAGE_GetMediaLastLba();
 8006e9c:	f7ff fe16 	bl	8006acc <USBD_STORAGE_GetMediaLastLba>
 8006ea0:	0002      	movs	r2, r0
 8006ea2:	4b7d      	ldr	r3, [pc, #500]	@ (8007098 <usb_init+0x3a0>)
 8006ea4:	60da      	str	r2, [r3, #12]

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_block_length = USBD_STORAGE_GetMediaBlocklength();
 8006ea6:	f7ff fe1d 	bl	8006ae4 <USBD_STORAGE_GetMediaBlocklength>
 8006eaa:	0002      	movs	r2, r0
 8006eac:	4b7a      	ldr	r3, [pc, #488]	@ (8007098 <usb_init+0x3a0>)
 8006eae:	611a      	str	r2, [r3, #16]

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_type = 0;
 8006eb0:	4b79      	ldr	r3, [pc, #484]	@ (8007098 <usb_init+0x3a0>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	615a      	str	r2, [r3, #20]

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_removable_flag = STORAGE_REMOVABLE_FLAG;
 8006eb6:	4b78      	ldr	r3, [pc, #480]	@ (8007098 <usb_init+0x3a0>)
 8006eb8:	2280      	movs	r2, #128	@ 0x80
 8006eba:	619a      	str	r2, [r3, #24]

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_read_only_flag = STORAGE_READ_ONLY;
 8006ebc:	4b76      	ldr	r3, [pc, #472]	@ (8007098 <usb_init+0x3a0>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	61da      	str	r2, [r3, #28]

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_read = USBD_STORAGE_Read;
 8006ec2:	4b75      	ldr	r3, [pc, #468]	@ (8007098 <usb_init+0x3a0>)
 8006ec4:	4a77      	ldr	r2, [pc, #476]	@ (80070a4 <usb_init+0x3ac>)
 8006ec6:	631a      	str	r2, [r3, #48]	@ 0x30

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_write = USBD_STORAGE_Write;
 8006ec8:	4b73      	ldr	r3, [pc, #460]	@ (8007098 <usb_init+0x3a0>)
 8006eca:	4a77      	ldr	r2, [pc, #476]	@ (80070a8 <usb_init+0x3b0>)
 8006ecc:	635a      	str	r2, [r3, #52]	@ 0x34

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_flush = USBD_STORAGE_Flush;
 8006ece:	4b72      	ldr	r3, [pc, #456]	@ (8007098 <usb_init+0x3a0>)
 8006ed0:	4a76      	ldr	r2, [pc, #472]	@ (80070ac <usb_init+0x3b4>)
 8006ed2:	639a      	str	r2, [r3, #56]	@ 0x38

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_status = USBD_STORAGE_Status;
 8006ed4:	4b70      	ldr	r3, [pc, #448]	@ (8007098 <usb_init+0x3a0>)
 8006ed6:	4a76      	ldr	r2, [pc, #472]	@ (80070b0 <usb_init+0x3b8>)
 8006ed8:	63da      	str	r2, [r3, #60]	@ 0x3c

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_notification = USBD_STORAGE_Notification;
 8006eda:	4b6f      	ldr	r3, [pc, #444]	@ (8007098 <usb_init+0x3a0>)
 8006edc:	4a75      	ldr	r2, [pc, #468]	@ (80070b4 <usb_init+0x3bc>)
 8006ede:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Get storage configuration number */
	storage_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_MSC, 0);
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	2003      	movs	r0, #3
 8006ee4:	f016 ff2e 	bl	801dd44 <USBD_Get_Configuration_Number>
 8006ee8:	0003      	movs	r3, r0
 8006eea:	001a      	movs	r2, r3
 8006eec:	4b72      	ldr	r3, [pc, #456]	@ (80070b8 <usb_init+0x3c0>)
 8006eee:	601a      	str	r2, [r3, #0]

	/* Find storage interface number */
	storage_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_MSC, 0);
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	2003      	movs	r0, #3
 8006ef4:	f016 fed6 	bl	801dca4 <USBD_Get_Interface_Number>
 8006ef8:	0003      	movs	r3, r0
 8006efa:	001a      	movs	r2, r3
 8006efc:	4b6f      	ldr	r3, [pc, #444]	@ (80070bc <usb_init+0x3c4>)
 8006efe:	601a      	str	r2, [r3, #0]

	/* Initialise the device storage class */
	if (ux_device_stack_class_register(_ux_system_slave_class_storage_name,
 8006f00:	4b6d      	ldr	r3, [pc, #436]	@ (80070b8 <usb_init+0x3c0>)
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	4b6d      	ldr	r3, [pc, #436]	@ (80070bc <usb_init+0x3c4>)
 8006f06:	681c      	ldr	r4, [r3, #0]
 8006f08:	496d      	ldr	r1, [pc, #436]	@ (80070c0 <usb_init+0x3c8>)
 8006f0a:	486e      	ldr	r0, [pc, #440]	@ (80070c4 <usb_init+0x3cc>)
 8006f0c:	4b62      	ldr	r3, [pc, #392]	@ (8007098 <usb_init+0x3a0>)
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	0023      	movs	r3, r4
 8006f12:	f014 fd1d 	bl	801b950 <_ux_device_stack_class_register>
 8006f16:	1e03      	subs	r3, r0, #0
 8006f18:	d001      	beq.n	8006f1e <usb_init+0x226>
			ux_device_class_storage_entry,
			storage_configuration_number,
			storage_interface_number,
			&storage_parameter) != UX_SUCCESS)
	{
		return UX_ERROR;
 8006f1a:	23ff      	movs	r3, #255	@ 0xff
 8006f1c:	e098      	b.n	8007050 <usb_init+0x358>
	}

	/* Allocate the stack for device application main thread */
	if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_THREAD_STACK_SIZE,
 8006f1e:	2380      	movs	r3, #128	@ 0x80
 8006f20:	00da      	lsls	r2, r3, #3
 8006f22:	230c      	movs	r3, #12
 8006f24:	18f9      	adds	r1, r7, r3
 8006f26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f00c fa1f 	bl	801336c <_txe_byte_allocate>
 8006f2e:	1e03      	subs	r3, r0, #0
 8006f30:	d001      	beq.n	8006f36 <usb_init+0x23e>
			TX_NO_WAIT) != TX_SUCCESS)
	{
		return TX_POOL_ERROR;
 8006f32:	2302      	movs	r3, #2
 8006f34:	e08c      	b.n	8007050 <usb_init+0x358>
	}

	/* Create the device application main thread */
	if (tx_thread_create(&usb_thread_ptr, USB_THREAD_NAME, usb_thread,
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4c63      	ldr	r4, [pc, #396]	@ (80070c8 <usb_init+0x3d0>)
 8006f3a:	4964      	ldr	r1, [pc, #400]	@ (80070cc <usb_init+0x3d4>)
 8006f3c:	4864      	ldr	r0, [pc, #400]	@ (80070d0 <usb_init+0x3d8>)
 8006f3e:	22b0      	movs	r2, #176	@ 0xb0
 8006f40:	9206      	str	r2, [sp, #24]
 8006f42:	2201      	movs	r2, #1
 8006f44:	9205      	str	r2, [sp, #20]
 8006f46:	2201      	movs	r2, #1
 8006f48:	9204      	str	r2, [sp, #16]
 8006f4a:	220a      	movs	r2, #10
 8006f4c:	9203      	str	r2, [sp, #12]
 8006f4e:	220a      	movs	r2, #10
 8006f50:	9202      	str	r2, [sp, #8]
 8006f52:	2280      	movs	r2, #128	@ 0x80
 8006f54:	00d2      	lsls	r2, r2, #3
 8006f56:	9201      	str	r2, [sp, #4]
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	0022      	movs	r2, r4
 8006f5e:	f00d f829 	bl	8013fb4 <_txe_thread_create>
 8006f62:	1e03      	subs	r3, r0, #0
 8006f64:	d001      	beq.n	8006f6a <usb_init+0x272>
			0, pointer, UX_THREAD_STACK_SIZE, USB_THREAD_PRIORITY,
			USB_THREAD_PRIORITY, 1,
			TX_AUTO_START) != TX_SUCCESS)
	{
		return TX_THREAD_ERROR;
 8006f66:	230e      	movs	r3, #14
 8006f68:	e072      	b.n	8007050 <usb_init+0x358>
	}

	/* Allocate the stack for usbx hid mouse thread */
	if (tx_byte_allocate(byte_pool, (VOID **) &pointer, USBX_HID_MOUSE_THREAD_STACK_SIZE, TX_NO_WAIT) != UX_SUCCESS)
 8006f6a:	2380      	movs	r3, #128	@ 0x80
 8006f6c:	00da      	lsls	r2, r3, #3
 8006f6e:	230c      	movs	r3, #12
 8006f70:	18f9      	adds	r1, r7, r3
 8006f72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f74:	2300      	movs	r3, #0
 8006f76:	f00c f9f9 	bl	801336c <_txe_byte_allocate>
 8006f7a:	1e03      	subs	r3, r0, #0
 8006f7c:	d001      	beq.n	8006f82 <usb_init+0x28a>
	{
		return TX_POOL_ERROR;
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e066      	b.n	8007050 <usb_init+0x358>
	}

	/* Create the usbx hid mouse thread */
	if (tx_thread_create(&hid_mouse_thread_ptr, USBX_HID_MOUSE_THREAD_NAME,
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4c53      	ldr	r4, [pc, #332]	@ (80070d4 <usb_init+0x3dc>)
 8006f86:	4954      	ldr	r1, [pc, #336]	@ (80070d8 <usb_init+0x3e0>)
 8006f88:	4854      	ldr	r0, [pc, #336]	@ (80070dc <usb_init+0x3e4>)
 8006f8a:	22b0      	movs	r2, #176	@ 0xb0
 8006f8c:	9206      	str	r2, [sp, #24]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	9205      	str	r2, [sp, #20]
 8006f92:	2201      	movs	r2, #1
 8006f94:	9204      	str	r2, [sp, #16]
 8006f96:	2214      	movs	r2, #20
 8006f98:	9203      	str	r2, [sp, #12]
 8006f9a:	2214      	movs	r2, #20
 8006f9c:	9202      	str	r2, [sp, #8]
 8006f9e:	2280      	movs	r2, #128	@ 0x80
 8006fa0:	00d2      	lsls	r2, r2, #3
 8006fa2:	9201      	str	r2, [sp, #4]
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	0022      	movs	r2, r4
 8006faa:	f00d f803 	bl	8013fb4 <_txe_thread_create>
 8006fae:	1e03      	subs	r3, r0, #0
 8006fb0:	d001      	beq.n	8006fb6 <usb_init+0x2be>
			hid_mouse_thread, 0, pointer, USBX_HID_MOUSE_THREAD_STACK_SIZE,
			USBX_HID_MOUSE_THREAD_PRIORITY, USBX_HID_MOUSE_THREAD_PRIORITY, 1, TX_AUTO_START) != UX_SUCCESS)
	{
		return TX_THREAD_ERROR;
 8006fb2:	230e      	movs	r3, #14
 8006fb4:	e04c      	b.n	8007050 <usb_init+0x358>
	}

	/* Allocate the stack for usbx hid keyboard thread */
	if (tx_byte_allocate(byte_pool, (VOID **) &pointer, USBX_HID_KEYBOARD_THREAD_STACK_SIZE, TX_NO_WAIT) != UX_SUCCESS)
 8006fb6:	2380      	movs	r3, #128	@ 0x80
 8006fb8:	00da      	lsls	r2, r3, #3
 8006fba:	230c      	movs	r3, #12
 8006fbc:	18f9      	adds	r1, r7, r3
 8006fbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f00c f9d3 	bl	801336c <_txe_byte_allocate>
 8006fc6:	1e03      	subs	r3, r0, #0
 8006fc8:	d001      	beq.n	8006fce <usb_init+0x2d6>
	{
		return TX_POOL_ERROR;
 8006fca:	2302      	movs	r3, #2
 8006fcc:	e040      	b.n	8007050 <usb_init+0x358>
	}

	/* Create the usbx hid keyboard thread */
	if (tx_thread_create(&hid_keyboard_thread_ptr, USBX_HID_KEYBOARD_THREAD_NAME,
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4c43      	ldr	r4, [pc, #268]	@ (80070e0 <usb_init+0x3e8>)
 8006fd2:	4944      	ldr	r1, [pc, #272]	@ (80070e4 <usb_init+0x3ec>)
 8006fd4:	4844      	ldr	r0, [pc, #272]	@ (80070e8 <usb_init+0x3f0>)
 8006fd6:	22b0      	movs	r2, #176	@ 0xb0
 8006fd8:	9206      	str	r2, [sp, #24]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	9205      	str	r2, [sp, #20]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	9204      	str	r2, [sp, #16]
 8006fe2:	2214      	movs	r2, #20
 8006fe4:	9203      	str	r2, [sp, #12]
 8006fe6:	2214      	movs	r2, #20
 8006fe8:	9202      	str	r2, [sp, #8]
 8006fea:	2280      	movs	r2, #128	@ 0x80
 8006fec:	00d2      	lsls	r2, r2, #3
 8006fee:	9201      	str	r2, [sp, #4]
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	0022      	movs	r2, r4
 8006ff6:	f00c ffdd 	bl	8013fb4 <_txe_thread_create>
 8006ffa:	1e03      	subs	r3, r0, #0
 8006ffc:	d001      	beq.n	8007002 <usb_init+0x30a>
			hid_keyboard_thread, 0, pointer, USBX_HID_KEYBOARD_THREAD_STACK_SIZE,
			USBX_HID_KEYBOARD_THREAD_PRIORITY, USBX_HID_KEYBOARD_THREAD_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START) != UX_SUCCESS)
	{
		return TX_THREAD_ERROR;
 8006ffe:	230e      	movs	r3, #14
 8007000:	e026      	b.n	8007050 <usb_init+0x358>
	}

	/* Allocate the stack for usbx msc thread */
	if (tx_byte_allocate(byte_pool, (VOID **) &pointer, USBX_MSC_THREAD_STACK_SIZE, TX_NO_WAIT) != UX_SUCCESS)
 8007002:	2380      	movs	r3, #128	@ 0x80
 8007004:	00da      	lsls	r2, r3, #3
 8007006:	230c      	movs	r3, #12
 8007008:	18f9      	adds	r1, r7, r3
 800700a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800700c:	2300      	movs	r3, #0
 800700e:	f00c f9ad 	bl	801336c <_txe_byte_allocate>
 8007012:	1e03      	subs	r3, r0, #0
 8007014:	d001      	beq.n	800701a <usb_init+0x322>
	{
		return TX_POOL_ERROR;
 8007016:	2302      	movs	r3, #2
 8007018:	e01a      	b.n	8007050 <usb_init+0x358>
	}

	/* Create the usbx msc thread */
	if (tx_thread_create(&msc_thread_ptr, USBX_MSC_THREAD_NAME,
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	4c33      	ldr	r4, [pc, #204]	@ (80070ec <usb_init+0x3f4>)
 800701e:	4931      	ldr	r1, [pc, #196]	@ (80070e4 <usb_init+0x3ec>)
 8007020:	4833      	ldr	r0, [pc, #204]	@ (80070f0 <usb_init+0x3f8>)
 8007022:	22b0      	movs	r2, #176	@ 0xb0
 8007024:	9206      	str	r2, [sp, #24]
 8007026:	2201      	movs	r2, #1
 8007028:	9205      	str	r2, [sp, #20]
 800702a:	2200      	movs	r2, #0
 800702c:	9204      	str	r2, [sp, #16]
 800702e:	2214      	movs	r2, #20
 8007030:	9203      	str	r2, [sp, #12]
 8007032:	2214      	movs	r2, #20
 8007034:	9202      	str	r2, [sp, #8]
 8007036:	2280      	movs	r2, #128	@ 0x80
 8007038:	00d2      	lsls	r2, r2, #3
 800703a:	9201      	str	r2, [sp, #4]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	2300      	movs	r3, #0
 8007040:	0022      	movs	r2, r4
 8007042:	f00c ffb7 	bl	8013fb4 <_txe_thread_create>
 8007046:	1e03      	subs	r3, r0, #0
 8007048:	d001      	beq.n	800704e <usb_init+0x356>
			msc_thread, 0, pointer, USBX_MSC_THREAD_STACK_SIZE,
			USBX_MSC_THREAD_PRIORITY, USBX_MSC_THREAD_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START) != UX_SUCCESS)
	{
		return TX_THREAD_ERROR;
 800704a:	230e      	movs	r3, #14
 800704c:	e000      	b.n	8007050 <usb_init+0x358>
	}

	return ret;
 800704e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007050:	0018      	movs	r0, r3
 8007052:	46bd      	mov	sp, r7
 8007054:	b00f      	add	sp, #60	@ 0x3c
 8007056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007058:	20010c9c 	.word	0x20010c9c
 800705c:	08006879 	.word	0x08006879
 8007060:	08006895 	.word	0x08006895
 8007064:	080068b1 	.word	0x080068b1
 8007068:	080068c9 	.word	0x080068c9
 800706c:	20010c98 	.word	0x20010c98
 8007070:	20010c94 	.word	0x20010c94
 8007074:	08018b59 	.word	0x08018b59
 8007078:	2000009c 	.word	0x2000009c
 800707c:	20010cc0 	.word	0x20010cc0
 8007080:	080066f5 	.word	0x080066f5
 8007084:	08006711 	.word	0x08006711
 8007088:	0800672d 	.word	0x0800672d
 800708c:	08006745 	.word	0x08006745
 8007090:	20010cbc 	.word	0x20010cbc
 8007094:	20010cb8 	.word	0x20010cb8
 8007098:	20010ce4 	.word	0x20010ce4
 800709c:	08006a19 	.word	0x08006a19
 80070a0:	08006a29 	.word	0x08006a29
 80070a4:	08006a39 	.word	0x08006a39
 80070a8:	08006a59 	.word	0x08006a59
 80070ac:	08006a79 	.word	0x08006a79
 80070b0:	08006a95 	.word	0x08006a95
 80070b4:	08006ab1 	.word	0x08006ab1
 80070b8:	20010ce0 	.word	0x20010ce0
 80070bc:	20010cdc 	.word	0x20010cdc
 80070c0:	08019479 	.word	0x08019479
 80070c4:	20000084 	.word	0x20000084
 80070c8:	080070f5 	.word	0x080070f5
 80070cc:	0801ef48 	.word	0x0801ef48
 80070d0:	200109d4 	.word	0x200109d4
 80070d4:	080068e1 	.word	0x080068e1
 80070d8:	0801ef54 	.word	0x0801ef54
 80070dc:	20010a84 	.word	0x20010a84
 80070e0:	0800675d 	.word	0x0800675d
 80070e4:	0801ef64 	.word	0x0801ef64
 80070e8:	20010b34 	.word	0x20010b34
 80070ec:	08006aff 	.word	0x08006aff
 80070f0:	20010be4 	.word	0x20010be4

080070f4 <usb_thread>:

/* PFP */
void STM32_USB_Init(void);


void usb_thread(uint32_t thread_input){
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;

	USB2533_Init(&usb2533, &hi2c1);
 80070fc:	4a05      	ldr	r2, [pc, #20]	@ (8007114 <usb_thread+0x20>)
 80070fe:	4b06      	ldr	r3, [pc, #24]	@ (8007118 <usb_thread+0x24>)
 8007100:	0011      	movs	r1, r2
 8007102:	0018      	movs	r0, r3
 8007104:	f7ff fa60 	bl	80065c8 <USB2533_Init>
	STM32_USB_Init();
 8007108:	f000 f808 	bl	800711c <STM32_USB_Init>

	while (1){
		tx_thread_sleep(100);
 800710c:	2064      	movs	r0, #100	@ 0x64
 800710e:	f00b f9fd 	bl	801250c <_tx_thread_sleep>
 8007112:	e7fb      	b.n	800710c <usb_thread+0x18>
 8007114:	20010d40 	.word	0x20010d40
 8007118:	20010d38 	.word	0x20010d38

0800711c <STM32_USB_Init>:

	}
}


void STM32_USB_Init(){
 800711c:	b580      	push	{r7, lr}
 800711e:	af00      	add	r7, sp, #0

	MX_USB_DRD_FS_PCD_Init();
 8007120:	f001 f984 	bl	800842c <MX_USB_DRD_FS_PCD_Init>
	 * BTABLE uses the first 20 bytes of the PMA when the USB peripheral is configured
	 * for 3 end points (EP0, EP1, EP2). For more info, see RM0440 p1268.
	 */

	/* Configure control endpoints */
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x00, PCD_SNG_BUF, 0x40);
 8007124:	4819      	ldr	r0, [pc, #100]	@ (800718c <STM32_USB_Init+0x70>)
 8007126:	2340      	movs	r3, #64	@ 0x40
 8007128:	2200      	movs	r2, #0
 800712a:	2100      	movs	r1, #0
 800712c:	f003 ff94 	bl	800b058 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x80, PCD_SNG_BUF, 0x80);
 8007130:	4816      	ldr	r0, [pc, #88]	@ (800718c <STM32_USB_Init+0x70>)
 8007132:	2380      	movs	r3, #128	@ 0x80
 8007134:	2200      	movs	r2, #0
 8007136:	2180      	movs	r1, #128	@ 0x80
 8007138:	f003 ff8e 	bl	800b058 <HAL_PCDEx_PMAConfig>

	/* Configure class endpoints */
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, USBD_MSC_EPOUT_ADDR, PCD_SNG_BUF, 0xC0);
 800713c:	4813      	ldr	r0, [pc, #76]	@ (800718c <STM32_USB_Init+0x70>)
 800713e:	23c0      	movs	r3, #192	@ 0xc0
 8007140:	2200      	movs	r2, #0
 8007142:	2102      	movs	r1, #2
 8007144:	f003 ff88 	bl	800b058 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, USBD_MSC_EPIN_ADDR, PCD_SNG_BUF, 0x100);
 8007148:	2380      	movs	r3, #128	@ 0x80
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	480f      	ldr	r0, [pc, #60]	@ (800718c <STM32_USB_Init+0x70>)
 800714e:	2200      	movs	r2, #0
 8007150:	2181      	movs	r1, #129	@ 0x81
 8007152:	f003 ff81 	bl	800b058 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, USBD_HID_MOUSE_EPIN_ADDR, PCD_SNG_BUF, 0x140);
 8007156:	23a0      	movs	r3, #160	@ 0xa0
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	480c      	ldr	r0, [pc, #48]	@ (800718c <STM32_USB_Init+0x70>)
 800715c:	2200      	movs	r2, #0
 800715e:	2183      	movs	r1, #131	@ 0x83
 8007160:	f003 ff7a 	bl	800b058 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, USBD_HID_KEYBOARD_EPIN_ADDR, PCD_SNG_BUF, 0x180);
 8007164:	23c0      	movs	r3, #192	@ 0xc0
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	4808      	ldr	r0, [pc, #32]	@ (800718c <STM32_USB_Init+0x70>)
 800716a:	2200      	movs	r2, #0
 800716c:	2184      	movs	r1, #132	@ 0x84
 800716e:	f003 ff73 	bl	800b058 <HAL_PCDEx_PMAConfig>

	ux_dcd_stm32_initialize((ULONG)USB_DRD_FS, (ULONG)&hpcd_USB_DRD_FS);
 8007172:	4b06      	ldr	r3, [pc, #24]	@ (800718c <STM32_USB_Init+0x70>)
 8007174:	4a06      	ldr	r2, [pc, #24]	@ (8007190 <STM32_USB_Init+0x74>)
 8007176:	0019      	movs	r1, r3
 8007178:	0010      	movs	r0, r2
 800717a:	f013 ff93 	bl	801b0a4 <_ux_dcd_stm32_initialize>

	HAL_PCD_Start(&hpcd_USB_DRD_FS);
 800717e:	4b03      	ldr	r3, [pc, #12]	@ (800718c <STM32_USB_Init+0x70>)
 8007180:	0018      	movs	r0, r3
 8007182:	f002 fb27 	bl	80097d4 <HAL_PCD_Start>
}
 8007186:	46c0      	nop			@ (mov r8, r8)
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20010e7c 	.word	0x20010e7c
 8007190:	40005c00 	.word	0x40005c00

08007194 <App_ThreadX_Init>:
 * @brief  Application ThreadX Initialization.
 * @param memory_ptr: memory pointer
 * @retval int
 */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
	UINT ret = TX_SUCCESS;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]
	TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	60bb      	str	r3, [r7, #8]
	/* USER CODE BEGIN App_ThreadX_MEM_POOL */
	(void)byte_pool;
	/* USER CODE END App_ThreadX_MEM_POOL */

	/* USER CODE BEGIN App_ThreadX_Init */
	create_queues();
 80071a4:	f7ff fa90 	bl	80066c8 <create_queues>
create_threads();
 80071a8:	f7ff fa66 	bl	8006678 <create_threads>
create_queues();
 80071ac:	f7ff fa8c 	bl	80066c8 <create_queues>
	create_threads();
 80071b0:	f7ff fa62 	bl	8006678 <create_threads>
/* USER CODE END App_ThreadX_Init */

	return ret;
 80071b4:	68fb      	ldr	r3, [r7, #12]
}
 80071b6:	0018      	movs	r0, r3
 80071b8:	46bd      	mov	sp, r7
 80071ba:	b004      	add	sp, #16
 80071bc:	bd80      	pop	{r7, pc}

080071be <MX_ThreadX_Init>:
 * @brief  MX_ThreadX_Init
 * @param  None
 * @retval None
 */
void MX_ThreadX_Init(void)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN  Before_Kernel_Start */

	/* USER CODE END  Before_Kernel_Start */

	tx_kernel_enter();
 80071c2:	f009 fa5d 	bl	8010680 <_tx_initialize_kernel_enter>

	/* USER CODE BEGIN  Kernel_Start_Error */

	/* USER CODE END  Kernel_Start_Error */
}
 80071c6:	46c0      	nop			@ (mov r8, r8)
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	0002      	movs	r2, r0
 80071d4:	1dfb      	adds	r3, r7, #7
 80071d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80071d8:	1dfb      	adds	r3, r7, #7
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80071de:	d809      	bhi.n	80071f4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071e0:	1dfb      	adds	r3, r7, #7
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	001a      	movs	r2, r3
 80071e6:	231f      	movs	r3, #31
 80071e8:	401a      	ands	r2, r3
 80071ea:	4b04      	ldr	r3, [pc, #16]	@ (80071fc <__NVIC_EnableIRQ+0x30>)
 80071ec:	2101      	movs	r1, #1
 80071ee:	4091      	lsls	r1, r2
 80071f0:	000a      	movs	r2, r1
 80071f2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80071f4:	46c0      	nop			@ (mov r8, r8)
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b002      	add	sp, #8
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	e000e100 	.word	0xe000e100

08007200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007200:	b590      	push	{r4, r7, lr}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	0002      	movs	r2, r0
 8007208:	6039      	str	r1, [r7, #0]
 800720a:	1dfb      	adds	r3, r7, #7
 800720c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800720e:	1dfb      	adds	r3, r7, #7
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b7f      	cmp	r3, #127	@ 0x7f
 8007214:	d828      	bhi.n	8007268 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007216:	4a2f      	ldr	r2, [pc, #188]	@ (80072d4 <__NVIC_SetPriority+0xd4>)
 8007218:	1dfb      	adds	r3, r7, #7
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	b25b      	sxtb	r3, r3
 800721e:	089b      	lsrs	r3, r3, #2
 8007220:	33c0      	adds	r3, #192	@ 0xc0
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	589b      	ldr	r3, [r3, r2]
 8007226:	1dfa      	adds	r2, r7, #7
 8007228:	7812      	ldrb	r2, [r2, #0]
 800722a:	0011      	movs	r1, r2
 800722c:	2203      	movs	r2, #3
 800722e:	400a      	ands	r2, r1
 8007230:	00d2      	lsls	r2, r2, #3
 8007232:	21ff      	movs	r1, #255	@ 0xff
 8007234:	4091      	lsls	r1, r2
 8007236:	000a      	movs	r2, r1
 8007238:	43d2      	mvns	r2, r2
 800723a:	401a      	ands	r2, r3
 800723c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	019b      	lsls	r3, r3, #6
 8007242:	22ff      	movs	r2, #255	@ 0xff
 8007244:	401a      	ands	r2, r3
 8007246:	1dfb      	adds	r3, r7, #7
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	0018      	movs	r0, r3
 800724c:	2303      	movs	r3, #3
 800724e:	4003      	ands	r3, r0
 8007250:	00db      	lsls	r3, r3, #3
 8007252:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007254:	481f      	ldr	r0, [pc, #124]	@ (80072d4 <__NVIC_SetPriority+0xd4>)
 8007256:	1dfb      	adds	r3, r7, #7
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	b25b      	sxtb	r3, r3
 800725c:	089b      	lsrs	r3, r3, #2
 800725e:	430a      	orrs	r2, r1
 8007260:	33c0      	adds	r3, #192	@ 0xc0
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007266:	e031      	b.n	80072cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007268:	4a1b      	ldr	r2, [pc, #108]	@ (80072d8 <__NVIC_SetPriority+0xd8>)
 800726a:	1dfb      	adds	r3, r7, #7
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	0019      	movs	r1, r3
 8007270:	230f      	movs	r3, #15
 8007272:	400b      	ands	r3, r1
 8007274:	3b08      	subs	r3, #8
 8007276:	089b      	lsrs	r3, r3, #2
 8007278:	3306      	adds	r3, #6
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	18d3      	adds	r3, r2, r3
 800727e:	3304      	adds	r3, #4
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	1dfa      	adds	r2, r7, #7
 8007284:	7812      	ldrb	r2, [r2, #0]
 8007286:	0011      	movs	r1, r2
 8007288:	2203      	movs	r2, #3
 800728a:	400a      	ands	r2, r1
 800728c:	00d2      	lsls	r2, r2, #3
 800728e:	21ff      	movs	r1, #255	@ 0xff
 8007290:	4091      	lsls	r1, r2
 8007292:	000a      	movs	r2, r1
 8007294:	43d2      	mvns	r2, r2
 8007296:	401a      	ands	r2, r3
 8007298:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	019b      	lsls	r3, r3, #6
 800729e:	22ff      	movs	r2, #255	@ 0xff
 80072a0:	401a      	ands	r2, r3
 80072a2:	1dfb      	adds	r3, r7, #7
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	0018      	movs	r0, r3
 80072a8:	2303      	movs	r3, #3
 80072aa:	4003      	ands	r3, r0
 80072ac:	00db      	lsls	r3, r3, #3
 80072ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80072b0:	4809      	ldr	r0, [pc, #36]	@ (80072d8 <__NVIC_SetPriority+0xd8>)
 80072b2:	1dfb      	adds	r3, r7, #7
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	001c      	movs	r4, r3
 80072b8:	230f      	movs	r3, #15
 80072ba:	4023      	ands	r3, r4
 80072bc:	3b08      	subs	r3, #8
 80072be:	089b      	lsrs	r3, r3, #2
 80072c0:	430a      	orrs	r2, r1
 80072c2:	3306      	adds	r3, #6
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	18c3      	adds	r3, r0, r3
 80072c8:	3304      	adds	r3, #4
 80072ca:	601a      	str	r2, [r3, #0]
}
 80072cc:	46c0      	nop			@ (mov r8, r8)
 80072ce:	46bd      	mov	sp, r7
 80072d0:	b003      	add	sp, #12
 80072d2:	bd90      	pop	{r4, r7, pc}
 80072d4:	e000e100 	.word	0xe000e100
 80072d8:	e000ed00 	.word	0xe000ed00

080072dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80072e2:	4b13      	ldr	r3, [pc, #76]	@ (8007330 <MX_DMA_Init+0x54>)
 80072e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072e6:	4b12      	ldr	r3, [pc, #72]	@ (8007330 <MX_DMA_Init+0x54>)
 80072e8:	2101      	movs	r1, #1
 80072ea:	430a      	orrs	r2, r1
 80072ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80072ee:	4b10      	ldr	r3, [pc, #64]	@ (8007330 <MX_DMA_Init+0x54>)
 80072f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f2:	2201      	movs	r2, #1
 80072f4:	4013      	ands	r3, r2
 80072f6:	607b      	str	r3, [r7, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 80072fa:	2100      	movs	r1, #0
 80072fc:	2009      	movs	r0, #9
 80072fe:	f7ff ff7f 	bl	8007200 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007302:	2009      	movs	r0, #9
 8007304:	f7ff ff62 	bl	80071cc <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 8007308:	2100      	movs	r1, #0
 800730a:	200a      	movs	r0, #10
 800730c:	f7ff ff78 	bl	8007200 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007310:	200a      	movs	r0, #10
 8007312:	f7ff ff5b 	bl	80071cc <__NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 0, 0);
 8007316:	2200      	movs	r2, #0
 8007318:	2100      	movs	r1, #0
 800731a:	200b      	movs	r0, #11
 800731c:	f001 fa90 	bl	8008840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 8007320:	200b      	movs	r0, #11
 8007322:	f001 faa2 	bl	800886a <HAL_NVIC_EnableIRQ>

}
 8007326:	46c0      	nop			@ (mov r8, r8)
 8007328:	46bd      	mov	sp, r7
 800732a:	b002      	add	sp, #8
 800732c:	bd80      	pop	{r7, pc}
 800732e:	46c0      	nop			@ (mov r8, r8)
 8007330:	40021000 	.word	0x40021000

08007334 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007334:	b590      	push	{r4, r7, lr}
 8007336:	b08b      	sub	sp, #44	@ 0x2c
 8007338:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800733a:	2414      	movs	r4, #20
 800733c:	193b      	adds	r3, r7, r4
 800733e:	0018      	movs	r0, r3
 8007340:	2314      	movs	r3, #20
 8007342:	001a      	movs	r2, r3
 8007344:	2100      	movs	r1, #0
 8007346:	f017 fd71 	bl	801ee2c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800734a:	4b5e      	ldr	r3, [pc, #376]	@ (80074c4 <MX_GPIO_Init+0x190>)
 800734c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800734e:	4b5d      	ldr	r3, [pc, #372]	@ (80074c4 <MX_GPIO_Init+0x190>)
 8007350:	2104      	movs	r1, #4
 8007352:	430a      	orrs	r2, r1
 8007354:	635a      	str	r2, [r3, #52]	@ 0x34
 8007356:	4b5b      	ldr	r3, [pc, #364]	@ (80074c4 <MX_GPIO_Init+0x190>)
 8007358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800735a:	2204      	movs	r2, #4
 800735c:	4013      	ands	r3, r2
 800735e:	613b      	str	r3, [r7, #16]
 8007360:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007362:	4b58      	ldr	r3, [pc, #352]	@ (80074c4 <MX_GPIO_Init+0x190>)
 8007364:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007366:	4b57      	ldr	r3, [pc, #348]	@ (80074c4 <MX_GPIO_Init+0x190>)
 8007368:	2120      	movs	r1, #32
 800736a:	430a      	orrs	r2, r1
 800736c:	635a      	str	r2, [r3, #52]	@ 0x34
 800736e:	4b55      	ldr	r3, [pc, #340]	@ (80074c4 <MX_GPIO_Init+0x190>)
 8007370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007372:	2220      	movs	r2, #32
 8007374:	4013      	ands	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800737a:	4b52      	ldr	r3, [pc, #328]	@ (80074c4 <MX_GPIO_Init+0x190>)
 800737c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800737e:	4b51      	ldr	r3, [pc, #324]	@ (80074c4 <MX_GPIO_Init+0x190>)
 8007380:	2101      	movs	r1, #1
 8007382:	430a      	orrs	r2, r1
 8007384:	635a      	str	r2, [r3, #52]	@ 0x34
 8007386:	4b4f      	ldr	r3, [pc, #316]	@ (80074c4 <MX_GPIO_Init+0x190>)
 8007388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800738a:	2201      	movs	r2, #1
 800738c:	4013      	ands	r3, r2
 800738e:	60bb      	str	r3, [r7, #8]
 8007390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007392:	4b4c      	ldr	r3, [pc, #304]	@ (80074c4 <MX_GPIO_Init+0x190>)
 8007394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007396:	4b4b      	ldr	r3, [pc, #300]	@ (80074c4 <MX_GPIO_Init+0x190>)
 8007398:	2102      	movs	r1, #2
 800739a:	430a      	orrs	r2, r1
 800739c:	635a      	str	r2, [r3, #52]	@ 0x34
 800739e:	4b49      	ldr	r3, [pc, #292]	@ (80074c4 <MX_GPIO_Init+0x190>)
 80073a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a2:	2202      	movs	r2, #2
 80073a4:	4013      	ands	r3, r2
 80073a6:	607b      	str	r3, [r7, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80073aa:	4b46      	ldr	r3, [pc, #280]	@ (80074c4 <MX_GPIO_Init+0x190>)
 80073ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073ae:	4b45      	ldr	r3, [pc, #276]	@ (80074c4 <MX_GPIO_Init+0x190>)
 80073b0:	2108      	movs	r1, #8
 80073b2:	430a      	orrs	r2, r1
 80073b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80073b6:	4b43      	ldr	r3, [pc, #268]	@ (80074c4 <MX_GPIO_Init+0x190>)
 80073b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ba:	2208      	movs	r2, #8
 80073bc:	4013      	ands	r3, r2
 80073be:	603b      	str	r3, [r7, #0]
 80073c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT2_LED_GPIO_Port, STAT2_LED_Pin, GPIO_PIN_RESET);
 80073c2:	4b41      	ldr	r3, [pc, #260]	@ (80074c8 <MX_GPIO_Init+0x194>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	2108      	movs	r1, #8
 80073c8:	0018      	movs	r0, r3
 80073ca:	f001 fbe8 	bl	8008b9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT1_LED_GPIO_Port, STAT1_LED_Pin, GPIO_PIN_RESET);
 80073ce:	4b3f      	ldr	r3, [pc, #252]	@ (80074cc <MX_GPIO_Init+0x198>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	2110      	movs	r1, #16
 80073d4:	0018      	movs	r0, r3
 80073d6:	f001 fbe2 	bl	8008b9e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = KEY_C7_Pin|KEY_B8_Pin|KEY_A9_Pin|KEY_E5_Pin
 80073da:	193b      	adds	r3, r7, r4
 80073dc:	4a3c      	ldr	r2, [pc, #240]	@ (80074d0 <MX_GPIO_Init+0x19c>)
 80073de:	601a      	str	r2, [r3, #0]
                          |KEY_E4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073e0:	193b      	adds	r3, r7, r4
 80073e2:	2200      	movs	r2, #0
 80073e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073e6:	193b      	adds	r3, r7, r4
 80073e8:	2201      	movs	r2, #1
 80073ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073ec:	193b      	adds	r3, r7, r4
 80073ee:	4a39      	ldr	r2, [pc, #228]	@ (80074d4 <MX_GPIO_Init+0x1a0>)
 80073f0:	0019      	movs	r1, r3
 80073f2:	0010      	movs	r0, r2
 80073f4:	f001 fa4a 	bl	800888c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = KEY_A10_Pin|KEY_A11_Pin;
 80073f8:	193b      	adds	r3, r7, r4
 80073fa:	2203      	movs	r2, #3
 80073fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073fe:	193b      	adds	r3, r7, r4
 8007400:	2200      	movs	r2, #0
 8007402:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007404:	193b      	adds	r3, r7, r4
 8007406:	2201      	movs	r2, #1
 8007408:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800740a:	193b      	adds	r3, r7, r4
 800740c:	4a32      	ldr	r2, [pc, #200]	@ (80074d8 <MX_GPIO_Init+0x1a4>)
 800740e:	0019      	movs	r1, r3
 8007410:	0010      	movs	r0, r2
 8007412:	f001 fa3b 	bl	800888c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = KEY_A12_Pin|KEY_B9_Pin|KEY_C8_Pin|KEY_D7_Pin
 8007416:	193b      	adds	r3, r7, r4
 8007418:	4a30      	ldr	r2, [pc, #192]	@ (80074dc <MX_GPIO_Init+0x1a8>)
 800741a:	601a      	str	r2, [r3, #0]
                          |KEY_B10_Pin|KEY_B11_Pin|KEY_B12_Pin|KEY_C9_Pin
                          |KEY_E6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800741c:	193b      	adds	r3, r7, r4
 800741e:	2200      	movs	r2, #0
 8007420:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007422:	193b      	adds	r3, r7, r4
 8007424:	2201      	movs	r2, #1
 8007426:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007428:	193a      	adds	r2, r7, r4
 800742a:	23a0      	movs	r3, #160	@ 0xa0
 800742c:	05db      	lsls	r3, r3, #23
 800742e:	0011      	movs	r1, r2
 8007430:	0018      	movs	r0, r3
 8007432:	f001 fa2b 	bl	800888c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = KEY_C10_Pin|KEY_C11_Pin|KEY_C12_Pin|KEY_D8_Pin
 8007436:	193b      	adds	r3, r7, r4
 8007438:	4a29      	ldr	r2, [pc, #164]	@ (80074e0 <MX_GPIO_Init+0x1ac>)
 800743a:	601a      	str	r2, [r3, #0]
                          |KEY_D9_Pin|KEY_D10_Pin|KEY_D12_Pin|KEY_D11_Pin
                          |KEY_B7_Pin|KEY_A7_Pin|KEY_A8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800743c:	193b      	adds	r3, r7, r4
 800743e:	2200      	movs	r2, #0
 8007440:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007442:	193b      	adds	r3, r7, r4
 8007444:	2201      	movs	r2, #1
 8007446:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007448:	193b      	adds	r3, r7, r4
 800744a:	4a20      	ldr	r2, [pc, #128]	@ (80074cc <MX_GPIO_Init+0x198>)
 800744c:	0019      	movs	r1, r3
 800744e:	0010      	movs	r0, r2
 8007450:	f001 fa1c 	bl	800888c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8007454:	193b      	adds	r3, r7, r4
 8007456:	2202      	movs	r2, #2
 8007458:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800745a:	193b      	adds	r3, r7, r4
 800745c:	2200      	movs	r2, #0
 800745e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007460:	193b      	adds	r3, r7, r4
 8007462:	2201      	movs	r2, #1
 8007464:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8007466:	193b      	adds	r3, r7, r4
 8007468:	4a17      	ldr	r2, [pc, #92]	@ (80074c8 <MX_GPIO_Init+0x194>)
 800746a:	0019      	movs	r1, r3
 800746c:	0010      	movs	r0, r2
 800746e:	f001 fa0d 	bl	800888c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STAT2_LED_Pin;
 8007472:	193b      	adds	r3, r7, r4
 8007474:	2208      	movs	r2, #8
 8007476:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007478:	193b      	adds	r3, r7, r4
 800747a:	2201      	movs	r2, #1
 800747c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800747e:	193b      	adds	r3, r7, r4
 8007480:	2200      	movs	r2, #0
 8007482:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007484:	193b      	adds	r3, r7, r4
 8007486:	2200      	movs	r2, #0
 8007488:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STAT2_LED_GPIO_Port, &GPIO_InitStruct);
 800748a:	193b      	adds	r3, r7, r4
 800748c:	4a0e      	ldr	r2, [pc, #56]	@ (80074c8 <MX_GPIO_Init+0x194>)
 800748e:	0019      	movs	r1, r3
 8007490:	0010      	movs	r0, r2
 8007492:	f001 f9fb 	bl	800888c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STAT1_LED_Pin;
 8007496:	0021      	movs	r1, r4
 8007498:	187b      	adds	r3, r7, r1
 800749a:	2210      	movs	r2, #16
 800749c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800749e:	187b      	adds	r3, r7, r1
 80074a0:	2201      	movs	r2, #1
 80074a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074a4:	187b      	adds	r3, r7, r1
 80074a6:	2200      	movs	r2, #0
 80074a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074aa:	187b      	adds	r3, r7, r1
 80074ac:	2200      	movs	r2, #0
 80074ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STAT1_LED_GPIO_Port, &GPIO_InitStruct);
 80074b0:	187b      	adds	r3, r7, r1
 80074b2:	4a06      	ldr	r2, [pc, #24]	@ (80074cc <MX_GPIO_Init+0x198>)
 80074b4:	0019      	movs	r1, r3
 80074b6:	0010      	movs	r0, r2
 80074b8:	f001 f9e8 	bl	800888c <HAL_GPIO_Init>

}
 80074bc:	46c0      	nop			@ (mov r8, r8)
 80074be:	46bd      	mov	sp, r7
 80074c0:	b00b      	add	sp, #44	@ 0x2c
 80074c2:	bd90      	pop	{r4, r7, pc}
 80074c4:	40021000 	.word	0x40021000
 80074c8:	50000c00 	.word	0x50000c00
 80074cc:	50000400 	.word	0x50000400
 80074d0:	0000e0c0 	.word	0x0000e0c0
 80074d4:	50000800 	.word	0x50000800
 80074d8:	50001400 	.word	0x50001400
 80074dc:	000002ff 	.word	0x000002ff
 80074e0:	00007ce7 	.word	0x00007ce7

080074e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80074e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007558 <MX_I2C1_Init+0x74>)
 80074ea:	4a1c      	ldr	r2, [pc, #112]	@ (800755c <MX_I2C1_Init+0x78>)
 80074ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80074ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007558 <MX_I2C1_Init+0x74>)
 80074f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007560 <MX_I2C1_Init+0x7c>)
 80074f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80074f4:	4b18      	ldr	r3, [pc, #96]	@ (8007558 <MX_I2C1_Init+0x74>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80074fa:	4b17      	ldr	r3, [pc, #92]	@ (8007558 <MX_I2C1_Init+0x74>)
 80074fc:	2201      	movs	r2, #1
 80074fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007500:	4b15      	ldr	r3, [pc, #84]	@ (8007558 <MX_I2C1_Init+0x74>)
 8007502:	2200      	movs	r2, #0
 8007504:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007506:	4b14      	ldr	r3, [pc, #80]	@ (8007558 <MX_I2C1_Init+0x74>)
 8007508:	2200      	movs	r2, #0
 800750a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800750c:	4b12      	ldr	r3, [pc, #72]	@ (8007558 <MX_I2C1_Init+0x74>)
 800750e:	2200      	movs	r2, #0
 8007510:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007512:	4b11      	ldr	r3, [pc, #68]	@ (8007558 <MX_I2C1_Init+0x74>)
 8007514:	2200      	movs	r2, #0
 8007516:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007518:	4b0f      	ldr	r3, [pc, #60]	@ (8007558 <MX_I2C1_Init+0x74>)
 800751a:	2200      	movs	r2, #0
 800751c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800751e:	4b0e      	ldr	r3, [pc, #56]	@ (8007558 <MX_I2C1_Init+0x74>)
 8007520:	0018      	movs	r0, r3
 8007522:	f001 fb59 	bl	8008bd8 <HAL_I2C_Init>
 8007526:	1e03      	subs	r3, r0, #0
 8007528:	d001      	beq.n	800752e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800752a:	f000 f93d 	bl	80077a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800752e:	4b0a      	ldr	r3, [pc, #40]	@ (8007558 <MX_I2C1_Init+0x74>)
 8007530:	2100      	movs	r1, #0
 8007532:	0018      	movs	r0, r3
 8007534:	f001 ff56 	bl	80093e4 <HAL_I2CEx_ConfigAnalogFilter>
 8007538:	1e03      	subs	r3, r0, #0
 800753a:	d001      	beq.n	8007540 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800753c:	f000 f934 	bl	80077a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007540:	4b05      	ldr	r3, [pc, #20]	@ (8007558 <MX_I2C1_Init+0x74>)
 8007542:	2100      	movs	r1, #0
 8007544:	0018      	movs	r0, r3
 8007546:	f001 ff99 	bl	800947c <HAL_I2CEx_ConfigDigitalFilter>
 800754a:	1e03      	subs	r3, r0, #0
 800754c:	d001      	beq.n	8007552 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800754e:	f000 f92b 	bl	80077a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007552:	46c0      	nop			@ (mov r8, r8)
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20010d40 	.word	0x20010d40
 800755c:	40005400 	.word	0x40005400
 8007560:	10707dbc 	.word	0x10707dbc

08007564 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007564:	b590      	push	{r4, r7, lr}
 8007566:	b09f      	sub	sp, #124	@ 0x7c
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800756c:	2364      	movs	r3, #100	@ 0x64
 800756e:	18fb      	adds	r3, r7, r3
 8007570:	0018      	movs	r0, r3
 8007572:	2314      	movs	r3, #20
 8007574:	001a      	movs	r2, r3
 8007576:	2100      	movs	r1, #0
 8007578:	f017 fc58 	bl	801ee2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800757c:	2414      	movs	r4, #20
 800757e:	193b      	adds	r3, r7, r4
 8007580:	0018      	movs	r0, r3
 8007582:	2350      	movs	r3, #80	@ 0x50
 8007584:	001a      	movs	r2, r3
 8007586:	2100      	movs	r1, #0
 8007588:	f017 fc50 	bl	801ee2c <memset>
  if(i2cHandle->Instance==I2C1)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a22      	ldr	r2, [pc, #136]	@ (800761c <HAL_I2C_MspInit+0xb8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d13e      	bne.n	8007614 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007596:	193b      	adds	r3, r7, r4
 8007598:	2220      	movs	r2, #32
 800759a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800759c:	193b      	adds	r3, r7, r4
 800759e:	2200      	movs	r2, #0
 80075a0:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80075a2:	193b      	adds	r3, r7, r4
 80075a4:	0018      	movs	r0, r3
 80075a6:	f004 fb63 	bl	800bc70 <HAL_RCCEx_PeriphCLKConfig>
 80075aa:	1e03      	subs	r3, r0, #0
 80075ac:	d001      	beq.n	80075b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80075ae:	f000 f8fb 	bl	80077a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007620 <HAL_I2C_MspInit+0xbc>)
 80075b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075b6:	4b1a      	ldr	r3, [pc, #104]	@ (8007620 <HAL_I2C_MspInit+0xbc>)
 80075b8:	2102      	movs	r1, #2
 80075ba:	430a      	orrs	r2, r1
 80075bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80075be:	4b18      	ldr	r3, [pc, #96]	@ (8007620 <HAL_I2C_MspInit+0xbc>)
 80075c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075c2:	2202      	movs	r2, #2
 80075c4:	4013      	ands	r3, r2
 80075c6:	613b      	str	r3, [r7, #16]
 80075c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80075ca:	2164      	movs	r1, #100	@ 0x64
 80075cc:	187b      	adds	r3, r7, r1
 80075ce:	22c0      	movs	r2, #192	@ 0xc0
 80075d0:	0092      	lsls	r2, r2, #2
 80075d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075d4:	187b      	adds	r3, r7, r1
 80075d6:	2212      	movs	r2, #18
 80075d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075da:	187b      	adds	r3, r7, r1
 80075dc:	2200      	movs	r2, #0
 80075de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075e0:	187b      	adds	r3, r7, r1
 80075e2:	2200      	movs	r2, #0
 80075e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80075e6:	187b      	adds	r3, r7, r1
 80075e8:	2206      	movs	r2, #6
 80075ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075ec:	187b      	adds	r3, r7, r1
 80075ee:	4a0d      	ldr	r2, [pc, #52]	@ (8007624 <HAL_I2C_MspInit+0xc0>)
 80075f0:	0019      	movs	r1, r3
 80075f2:	0010      	movs	r0, r2
 80075f4:	f001 f94a 	bl	800888c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80075f8:	4b09      	ldr	r3, [pc, #36]	@ (8007620 <HAL_I2C_MspInit+0xbc>)
 80075fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075fc:	4b08      	ldr	r3, [pc, #32]	@ (8007620 <HAL_I2C_MspInit+0xbc>)
 80075fe:	2180      	movs	r1, #128	@ 0x80
 8007600:	0389      	lsls	r1, r1, #14
 8007602:	430a      	orrs	r2, r1
 8007604:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007606:	4b06      	ldr	r3, [pc, #24]	@ (8007620 <HAL_I2C_MspInit+0xbc>)
 8007608:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800760a:	2380      	movs	r3, #128	@ 0x80
 800760c:	039b      	lsls	r3, r3, #14
 800760e:	4013      	ands	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]
 8007612:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007614:	46c0      	nop			@ (mov r8, r8)
 8007616:	46bd      	mov	sp, r7
 8007618:	b01f      	add	sp, #124	@ 0x7c
 800761a:	bd90      	pop	{r4, r7, pc}
 800761c:	40005400 	.word	0x40005400
 8007620:	40021000 	.word	0x40021000
 8007624:	50000400 	.word	0x50000400

08007628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800762c:	f000 ffbe 	bl	80085ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007630:	f000 f814 	bl	800765c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007634:	f7ff fe7e 	bl	8007334 <MX_GPIO_Init>
  MX_DMA_Init();
 8007638:	f7ff fe50 	bl	80072dc <MX_DMA_Init>
  MX_I2C1_Init();
 800763c:	f7ff ff52 	bl	80074e4 <MX_I2C1_Init>
  MX_UCPD1_Init();
 8007640:	f000 fdae 	bl	80081a0 <MX_UCPD1_Init>
  MX_UCPD2_Init();
 8007644:	f000 fe52 	bl	80082ec <MX_UCPD2_Init>
  MX_TIM1_Init();
 8007648:	f000 f9d8 	bl	80079fc <MX_TIM1_Init>
  MX_TIM2_Init();
 800764c:	f000 fa82 	bl	8007b54 <MX_TIM2_Init>
  /* Call PreOsInit function */
  USBPD_PreInitOs();
 8007650:	f015 fe16 	bl	801d280 <USBPD_PreInitOs>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8007654:	f7ff fdb3 	bl	80071be <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007658:	46c0      	nop			@ (mov r8, r8)
 800765a:	e7fd      	b.n	8007658 <main+0x30>

0800765c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800765c:	b590      	push	{r4, r7, lr}
 800765e:	b09b      	sub	sp, #108	@ 0x6c
 8007660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007662:	242c      	movs	r4, #44	@ 0x2c
 8007664:	193b      	adds	r3, r7, r4
 8007666:	0018      	movs	r0, r3
 8007668:	233c      	movs	r3, #60	@ 0x3c
 800766a:	001a      	movs	r2, r3
 800766c:	2100      	movs	r1, #0
 800766e:	f017 fbdd 	bl	801ee2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007672:	231c      	movs	r3, #28
 8007674:	18fb      	adds	r3, r7, r3
 8007676:	0018      	movs	r0, r3
 8007678:	2310      	movs	r3, #16
 800767a:	001a      	movs	r2, r3
 800767c:	2100      	movs	r1, #0
 800767e:	f017 fbd5 	bl	801ee2c <memset>
  RCC_CRSInitTypeDef pInit = {0};
 8007682:	1d3b      	adds	r3, r7, #4
 8007684:	0018      	movs	r0, r3
 8007686:	2318      	movs	r3, #24
 8007688:	001a      	movs	r2, r3
 800768a:	2100      	movs	r1, #0
 800768c:	f017 fbce 	bl	801ee2c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007690:	2380      	movs	r3, #128	@ 0x80
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	0018      	movs	r0, r3
 8007696:	f003 fd6b 	bl	800b170 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800769a:	193b      	adds	r3, r7, r4
 800769c:	2222      	movs	r2, #34	@ 0x22
 800769e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80076a0:	193b      	adds	r3, r7, r4
 80076a2:	2280      	movs	r2, #128	@ 0x80
 80076a4:	0052      	lsls	r2, r2, #1
 80076a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80076a8:	193b      	adds	r3, r7, r4
 80076aa:	2280      	movs	r2, #128	@ 0x80
 80076ac:	03d2      	lsls	r2, r2, #15
 80076ae:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80076b0:	0021      	movs	r1, r4
 80076b2:	187b      	adds	r3, r7, r1
 80076b4:	2200      	movs	r2, #0
 80076b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80076b8:	187b      	adds	r3, r7, r1
 80076ba:	2240      	movs	r2, #64	@ 0x40
 80076bc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80076be:	187b      	adds	r3, r7, r1
 80076c0:	2202      	movs	r2, #2
 80076c2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80076c4:	187b      	adds	r3, r7, r1
 80076c6:	2202      	movs	r2, #2
 80076c8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80076ca:	187b      	adds	r3, r7, r1
 80076cc:	2200      	movs	r2, #0
 80076ce:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80076d0:	187b      	adds	r3, r7, r1
 80076d2:	2208      	movs	r2, #8
 80076d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80076d6:	187b      	adds	r3, r7, r1
 80076d8:	2280      	movs	r2, #128	@ 0x80
 80076da:	0292      	lsls	r2, r2, #10
 80076dc:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80076de:	187b      	adds	r3, r7, r1
 80076e0:	22c0      	movs	r2, #192	@ 0xc0
 80076e2:	04d2      	lsls	r2, r2, #19
 80076e4:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80076e6:	187b      	adds	r3, r7, r1
 80076e8:	2280      	movs	r2, #128	@ 0x80
 80076ea:	0592      	lsls	r2, r2, #22
 80076ec:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80076ee:	187b      	adds	r3, r7, r1
 80076f0:	0018      	movs	r0, r3
 80076f2:	f003 fd89 	bl	800b208 <HAL_RCC_OscConfig>
 80076f6:	1e03      	subs	r3, r0, #0
 80076f8:	d001      	beq.n	80076fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80076fa:	f000 f855 	bl	80077a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80076fe:	211c      	movs	r1, #28
 8007700:	187b      	adds	r3, r7, r1
 8007702:	2207      	movs	r2, #7
 8007704:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007706:	187b      	adds	r3, r7, r1
 8007708:	2202      	movs	r2, #2
 800770a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800770c:	187b      	adds	r3, r7, r1
 800770e:	2200      	movs	r2, #0
 8007710:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007712:	187b      	adds	r3, r7, r1
 8007714:	2200      	movs	r2, #0
 8007716:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007718:	187b      	adds	r3, r7, r1
 800771a:	2102      	movs	r1, #2
 800771c:	0018      	movs	r0, r3
 800771e:	f004 f8d3 	bl	800b8c8 <HAL_RCC_ClockConfig>
 8007722:	1e03      	subs	r3, r0, #0
 8007724:	d001      	beq.n	800772a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8007726:	f000 f83f 	bl	80077a8 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800772a:	4b14      	ldr	r3, [pc, #80]	@ (800777c <SystemClock_Config+0x120>)
 800772c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800772e:	4b13      	ldr	r3, [pc, #76]	@ (800777c <SystemClock_Config+0x120>)
 8007730:	2180      	movs	r1, #128	@ 0x80
 8007732:	0249      	lsls	r1, r1, #9
 8007734:	430a      	orrs	r2, r1
 8007736:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007738:	4b10      	ldr	r3, [pc, #64]	@ (800777c <SystemClock_Config+0x120>)
 800773a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800773c:	2380      	movs	r3, #128	@ 0x80
 800773e:	025b      	lsls	r3, r3, #9
 8007740:	4013      	ands	r3, r2
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
  */
  pInit.Prescaler = RCC_CRS_SYNC_DIV1;
 8007746:	1d3b      	adds	r3, r7, #4
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
  pInit.Source = RCC_CRS_SYNC_SOURCE_USB;
 800774c:	1d3b      	adds	r3, r7, #4
 800774e:	2280      	movs	r2, #128	@ 0x80
 8007750:	0592      	lsls	r2, r2, #22
 8007752:	605a      	str	r2, [r3, #4]
  pInit.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8007754:	1d3b      	adds	r3, r7, #4
 8007756:	2200      	movs	r2, #0
 8007758:	609a      	str	r2, [r3, #8]
  pInit.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 800775a:	1d3b      	adds	r3, r7, #4
 800775c:	4a08      	ldr	r2, [pc, #32]	@ (8007780 <SystemClock_Config+0x124>)
 800775e:	60da      	str	r2, [r3, #12]
  pInit.ErrorLimitValue = 34;
 8007760:	1d3b      	adds	r3, r7, #4
 8007762:	2222      	movs	r2, #34	@ 0x22
 8007764:	611a      	str	r2, [r3, #16]
  pInit.HSI48CalibrationValue = 32;
 8007766:	1d3b      	adds	r3, r7, #4
 8007768:	2220      	movs	r2, #32
 800776a:	615a      	str	r2, [r3, #20]

  HAL_RCCEx_CRSConfig(&pInit);
 800776c:	1d3b      	adds	r3, r7, #4
 800776e:	0018      	movs	r0, r3
 8007770:	f004 fcda 	bl	800c128 <HAL_RCCEx_CRSConfig>
}
 8007774:	46c0      	nop			@ (mov r8, r8)
 8007776:	46bd      	mov	sp, r7
 8007778:	b01b      	add	sp, #108	@ 0x6c
 800777a:	bd90      	pop	{r4, r7, pc}
 800777c:	40021000 	.word	0x40021000
 8007780:	0000bb7f 	.word	0x0000bb7f

08007784 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a04      	ldr	r2, [pc, #16]	@ (80077a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d101      	bne.n	800779a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007796:	f000 ff29 	bl	80085ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800779a:	46c0      	nop			@ (mov r8, r8)
 800779c:	46bd      	mov	sp, r7
 800779e:	b002      	add	sp, #8
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	46c0      	nop			@ (mov r8, r8)
 80077a4:	40001000 	.word	0x40001000

080077a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80077ac:	b672      	cpsid	i
}
 80077ae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80077b0:	46c0      	nop			@ (mov r8, r8)
 80077b2:	e7fd      	b.n	80077b0 <Error_Handler+0x8>

080077b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077ba:	4b15      	ldr	r3, [pc, #84]	@ (8007810 <HAL_MspInit+0x5c>)
 80077bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077be:	4b14      	ldr	r3, [pc, #80]	@ (8007810 <HAL_MspInit+0x5c>)
 80077c0:	2101      	movs	r1, #1
 80077c2:	430a      	orrs	r2, r1
 80077c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80077c6:	4b12      	ldr	r3, [pc, #72]	@ (8007810 <HAL_MspInit+0x5c>)
 80077c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ca:	2201      	movs	r2, #1
 80077cc:	4013      	ands	r3, r2
 80077ce:	607b      	str	r3, [r7, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007810 <HAL_MspInit+0x5c>)
 80077d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007810 <HAL_MspInit+0x5c>)
 80077d8:	2180      	movs	r1, #128	@ 0x80
 80077da:	0549      	lsls	r1, r1, #21
 80077dc:	430a      	orrs	r2, r1
 80077de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80077e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007810 <HAL_MspInit+0x5c>)
 80077e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077e4:	2380      	movs	r3, #128	@ 0x80
 80077e6:	055b      	lsls	r3, r3, #21
 80077e8:	4013      	ands	r3, r2
 80077ea:	603b      	str	r3, [r7, #0]
 80077ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 80077ee:	2004      	movs	r0, #4
 80077f0:	f000 ff3c 	bl	800866c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80077f4:	f000 ff62 	bl	80086bc <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80077f8:	2000      	movs	r0, #0
 80077fa:	f000 ff4b 	bl	8008694 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80077fe:	23c0      	movs	r3, #192	@ 0xc0
 8007800:	00db      	lsls	r3, r3, #3
 8007802:	0018      	movs	r0, r3
 8007804:	f000 ff7e 	bl	8008704 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007808:	46c0      	nop			@ (mov r8, r8)
 800780a:	46bd      	mov	sp, r7
 800780c:	b002      	add	sp, #8
 800780e:	bd80      	pop	{r7, pc}
 8007810:	40021000 	.word	0x40021000

08007814 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007814:	b5b0      	push	{r4, r5, r7, lr}
 8007816:	b08c      	sub	sp, #48	@ 0x30
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800781c:	232b      	movs	r3, #43	@ 0x2b
 800781e:	18fb      	adds	r3, r7, r3
 8007820:	2200      	movs	r2, #0
 8007822:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007824:	4b37      	ldr	r3, [pc, #220]	@ (8007904 <HAL_InitTick+0xf0>)
 8007826:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007828:	4b36      	ldr	r3, [pc, #216]	@ (8007904 <HAL_InitTick+0xf0>)
 800782a:	2110      	movs	r1, #16
 800782c:	430a      	orrs	r2, r1
 800782e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007830:	4b34      	ldr	r3, [pc, #208]	@ (8007904 <HAL_InitTick+0xf0>)
 8007832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007834:	2210      	movs	r2, #16
 8007836:	4013      	ands	r3, r2
 8007838:	60bb      	str	r3, [r7, #8]
 800783a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800783c:	230c      	movs	r3, #12
 800783e:	18fa      	adds	r2, r7, r3
 8007840:	2410      	movs	r4, #16
 8007842:	193b      	adds	r3, r7, r4
 8007844:	0011      	movs	r1, r2
 8007846:	0018      	movs	r0, r3
 8007848:	f004 f9e8 	bl	800bc1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800784c:	193b      	adds	r3, r7, r4
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8007852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007854:	2b00      	cmp	r3, #0
 8007856:	d104      	bne.n	8007862 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007858:	f004 f9ca 	bl	800bbf0 <HAL_RCC_GetPCLK1Freq>
 800785c:	0003      	movs	r3, r0
 800785e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007860:	e004      	b.n	800786c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8007862:	f004 f9c5 	bl	800bbf0 <HAL_RCC_GetPCLK1Freq>
 8007866:	0003      	movs	r3, r0
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800786c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786e:	4926      	ldr	r1, [pc, #152]	@ (8007908 <HAL_InitTick+0xf4>)
 8007870:	0018      	movs	r0, r3
 8007872:	f7fe fde7 	bl	8006444 <__udivsi3>
 8007876:	0003      	movs	r3, r0
 8007878:	3b01      	subs	r3, #1
 800787a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800787c:	4b23      	ldr	r3, [pc, #140]	@ (800790c <HAL_InitTick+0xf8>)
 800787e:	4a24      	ldr	r2, [pc, #144]	@ (8007910 <HAL_InitTick+0xfc>)
 8007880:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8007882:	4b22      	ldr	r3, [pc, #136]	@ (800790c <HAL_InitTick+0xf8>)
 8007884:	4a23      	ldr	r2, [pc, #140]	@ (8007914 <HAL_InitTick+0x100>)
 8007886:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8007888:	4b20      	ldr	r3, [pc, #128]	@ (800790c <HAL_InitTick+0xf8>)
 800788a:	6a3a      	ldr	r2, [r7, #32]
 800788c:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 800788e:	4b1f      	ldr	r3, [pc, #124]	@ (800790c <HAL_InitTick+0xf8>)
 8007890:	2200      	movs	r2, #0
 8007892:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007894:	4b1d      	ldr	r3, [pc, #116]	@ (800790c <HAL_InitTick+0xf8>)
 8007896:	2200      	movs	r2, #0
 8007898:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800789a:	4b1c      	ldr	r3, [pc, #112]	@ (800790c <HAL_InitTick+0xf8>)
 800789c:	2200      	movs	r2, #0
 800789e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80078a0:	252b      	movs	r5, #43	@ 0x2b
 80078a2:	197c      	adds	r4, r7, r5
 80078a4:	4b19      	ldr	r3, [pc, #100]	@ (800790c <HAL_InitTick+0xf8>)
 80078a6:	0018      	movs	r0, r3
 80078a8:	f004 fc84 	bl	800c1b4 <HAL_TIM_Base_Init>
 80078ac:	0003      	movs	r3, r0
 80078ae:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80078b0:	197b      	adds	r3, r7, r5
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d11e      	bne.n	80078f6 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80078b8:	197c      	adds	r4, r7, r5
 80078ba:	4b14      	ldr	r3, [pc, #80]	@ (800790c <HAL_InitTick+0xf8>)
 80078bc:	0018      	movs	r0, r3
 80078be:	f004 fcd9 	bl	800c274 <HAL_TIM_Base_Start_IT>
 80078c2:	0003      	movs	r3, r0
 80078c4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80078c6:	197b      	adds	r3, r7, r5
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d113      	bne.n	80078f6 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80078ce:	2011      	movs	r0, #17
 80078d0:	f000 ffcb 	bl	800886a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d809      	bhi.n	80078ee <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	0019      	movs	r1, r3
 80078e0:	2011      	movs	r0, #17
 80078e2:	f000 ffad 	bl	8008840 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80078e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007918 <HAL_InitTick+0x104>)
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	e003      	b.n	80078f6 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80078ee:	232b      	movs	r3, #43	@ 0x2b
 80078f0:	18fb      	adds	r3, r7, r3
 80078f2:	2201      	movs	r2, #1
 80078f4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80078f6:	232b      	movs	r3, #43	@ 0x2b
 80078f8:	18fb      	adds	r3, r7, r3
 80078fa:	781b      	ldrb	r3, [r3, #0]
}
 80078fc:	0018      	movs	r0, r3
 80078fe:	46bd      	mov	sp, r7
 8007900:	b00c      	add	sp, #48	@ 0x30
 8007902:	bdb0      	pop	{r4, r5, r7, pc}
 8007904:	40021000 	.word	0x40021000
 8007908:	000f4240 	.word	0x000f4240
 800790c:	20010d94 	.word	0x20010d94
 8007910:	40001000 	.word	0x40001000
 8007914:	000003e7 	.word	0x000003e7
 8007918:	20000008 	.word	0x20000008

0800791c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007920:	46c0      	nop			@ (mov r8, r8)
 8007922:	e7fd      	b.n	8007920 <NMI_Handler+0x4>

08007924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007928:	46c0      	nop			@ (mov r8, r8)
 800792a:	e7fd      	b.n	8007928 <HardFault_Handler+0x4>

0800792c <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8007930:	4b05      	ldr	r3, [pc, #20]	@ (8007948 <USB_UCPD1_2_IRQHandler+0x1c>)
 8007932:	0018      	movs	r0, r3
 8007934:	f001 ff98 	bl	8009868 <HAL_PCD_IRQHandler>
  USBPD_PORT0_IRQHandler();
 8007938:	f00e f985 	bl	8015c46 <USBPD_PORT0_IRQHandler>
  USBPD_PORT1_IRQHandler();
 800793c:	f00e f98b 	bl	8015c56 <USBPD_PORT1_IRQHandler>

  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 8007940:	46c0      	nop			@ (mov r8, r8)
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	46c0      	nop			@ (mov r8, r8)
 8007948:	20010e7c 	.word	0x20010e7c

0800794c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007950:	46c0      	nop			@ (mov r8, r8)
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800795a:	46c0      	nop			@ (mov r8, r8)
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 8007964:	46c0      	nop			@ (mov r8, r8)
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007970:	4b03      	ldr	r3, [pc, #12]	@ (8007980 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8007972:	0018      	movs	r0, r3
 8007974:	f004 fde0 	bl	800c538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8007978:	46c0      	nop			@ (mov r8, r8)
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	46c0      	nop			@ (mov r8, r8)
 8007980:	20010d94 	.word	0x20010d94

08007984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800798c:	4a14      	ldr	r2, [pc, #80]	@ (80079e0 <_sbrk+0x5c>)
 800798e:	4b15      	ldr	r3, [pc, #84]	@ (80079e4 <_sbrk+0x60>)
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007998:	4b13      	ldr	r3, [pc, #76]	@ (80079e8 <_sbrk+0x64>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d102      	bne.n	80079a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80079a0:	4b11      	ldr	r3, [pc, #68]	@ (80079e8 <_sbrk+0x64>)
 80079a2:	4a12      	ldr	r2, [pc, #72]	@ (80079ec <_sbrk+0x68>)
 80079a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80079a6:	4b10      	ldr	r3, [pc, #64]	@ (80079e8 <_sbrk+0x64>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	18d3      	adds	r3, r2, r3
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d207      	bcs.n	80079c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80079b4:	f017 fa54 	bl	801ee60 <__errno>
 80079b8:	0003      	movs	r3, r0
 80079ba:	220c      	movs	r2, #12
 80079bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80079be:	2301      	movs	r3, #1
 80079c0:	425b      	negs	r3, r3
 80079c2:	e009      	b.n	80079d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80079c4:	4b08      	ldr	r3, [pc, #32]	@ (80079e8 <_sbrk+0x64>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80079ca:	4b07      	ldr	r3, [pc, #28]	@ (80079e8 <_sbrk+0x64>)
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	18d2      	adds	r2, r2, r3
 80079d2:	4b05      	ldr	r3, [pc, #20]	@ (80079e8 <_sbrk+0x64>)
 80079d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80079d6:	68fb      	ldr	r3, [r7, #12]
}
 80079d8:	0018      	movs	r0, r3
 80079da:	46bd      	mov	sp, r7
 80079dc:	b006      	add	sp, #24
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20024000 	.word	0x20024000
 80079e4:	00000400 	.word	0x00000400
 80079e8:	20010de0 	.word	0x20010de0
 80079ec:	200120b0 	.word	0x200120b0

080079f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80079f4:	46c0      	nop			@ (mov r8, r8)
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b098      	sub	sp, #96	@ 0x60
 8007a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a02:	2354      	movs	r3, #84	@ 0x54
 8007a04:	18fb      	adds	r3, r7, r3
 8007a06:	0018      	movs	r0, r3
 8007a08:	230c      	movs	r3, #12
 8007a0a:	001a      	movs	r2, r3
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	f017 fa0d 	bl	801ee2c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007a12:	2338      	movs	r3, #56	@ 0x38
 8007a14:	18fb      	adds	r3, r7, r3
 8007a16:	0018      	movs	r0, r3
 8007a18:	231c      	movs	r3, #28
 8007a1a:	001a      	movs	r2, r3
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	f017 fa05 	bl	801ee2c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007a22:	1d3b      	adds	r3, r7, #4
 8007a24:	0018      	movs	r0, r3
 8007a26:	2334      	movs	r3, #52	@ 0x34
 8007a28:	001a      	movs	r2, r3
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	f017 f9fe 	bl	801ee2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007a30:	4b45      	ldr	r3, [pc, #276]	@ (8007b48 <MX_TIM1_Init+0x14c>)
 8007a32:	4a46      	ldr	r2, [pc, #280]	@ (8007b4c <MX_TIM1_Init+0x150>)
 8007a34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007a36:	4b44      	ldr	r3, [pc, #272]	@ (8007b48 <MX_TIM1_Init+0x14c>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a3c:	4b42      	ldr	r3, [pc, #264]	@ (8007b48 <MX_TIM1_Init+0x14c>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8007a42:	4b41      	ldr	r3, [pc, #260]	@ (8007b48 <MX_TIM1_Init+0x14c>)
 8007a44:	4a42      	ldr	r2, [pc, #264]	@ (8007b50 <MX_TIM1_Init+0x154>)
 8007a46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a48:	4b3f      	ldr	r3, [pc, #252]	@ (8007b48 <MX_TIM1_Init+0x14c>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b48 <MX_TIM1_Init+0x14c>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a54:	4b3c      	ldr	r3, [pc, #240]	@ (8007b48 <MX_TIM1_Init+0x14c>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8007b48 <MX_TIM1_Init+0x14c>)
 8007a5c:	0018      	movs	r0, r3
 8007a5e:	f004 fc6b 	bl	800c338 <HAL_TIM_PWM_Init>
 8007a62:	1e03      	subs	r3, r0, #0
 8007a64:	d001      	beq.n	8007a6a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8007a66:	f7ff fe9f 	bl	80077a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a6a:	2154      	movs	r1, #84	@ 0x54
 8007a6c:	187b      	adds	r3, r7, r1
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007a72:	187b      	adds	r3, r7, r1
 8007a74:	2200      	movs	r2, #0
 8007a76:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a78:	187b      	adds	r3, r7, r1
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007a7e:	187a      	adds	r2, r7, r1
 8007a80:	4b31      	ldr	r3, [pc, #196]	@ (8007b48 <MX_TIM1_Init+0x14c>)
 8007a82:	0011      	movs	r1, r2
 8007a84:	0018      	movs	r0, r3
 8007a86:	f005 fadb 	bl	800d040 <HAL_TIMEx_MasterConfigSynchronization>
 8007a8a:	1e03      	subs	r3, r0, #0
 8007a8c:	d001      	beq.n	8007a92 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8007a8e:	f7ff fe8b 	bl	80077a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007a92:	2138      	movs	r1, #56	@ 0x38
 8007a94:	187b      	adds	r3, r7, r1
 8007a96:	2260      	movs	r2, #96	@ 0x60
 8007a98:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8007a9a:	187b      	adds	r3, r7, r1
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007aa0:	187b      	adds	r3, r7, r1
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007aa6:	187b      	adds	r3, r7, r1
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007aac:	187b      	adds	r3, r7, r1
 8007aae:	2200      	movs	r2, #0
 8007ab0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007ab2:	187b      	adds	r3, r7, r1
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007ab8:	187b      	adds	r3, r7, r1
 8007aba:	2200      	movs	r2, #0
 8007abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007abe:	1879      	adds	r1, r7, r1
 8007ac0:	4b21      	ldr	r3, [pc, #132]	@ (8007b48 <MX_TIM1_Init+0x14c>)
 8007ac2:	2208      	movs	r2, #8
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	f004 fe3f 	bl	800c748 <HAL_TIM_PWM_ConfigChannel>
 8007aca:	1e03      	subs	r3, r0, #0
 8007acc:	d001      	beq.n	8007ad2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8007ace:	f7ff fe6b 	bl	80077a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007ad2:	1d3b      	adds	r3, r7, #4
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007ad8:	1d3b      	adds	r3, r7, #4
 8007ada:	2200      	movs	r2, #0
 8007adc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007ade:	1d3b      	adds	r3, r7, #4
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007ae4:	1d3b      	adds	r3, r7, #4
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007aea:	1d3b      	adds	r3, r7, #4
 8007aec:	2200      	movs	r2, #0
 8007aee:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007af0:	1d3b      	adds	r3, r7, #4
 8007af2:	2280      	movs	r2, #128	@ 0x80
 8007af4:	0192      	lsls	r2, r2, #6
 8007af6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007af8:	1d3b      	adds	r3, r7, #4
 8007afa:	2200      	movs	r2, #0
 8007afc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007afe:	1d3b      	adds	r3, r7, #4
 8007b00:	2200      	movs	r2, #0
 8007b02:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8007b04:	1d3b      	adds	r3, r7, #4
 8007b06:	2200      	movs	r2, #0
 8007b08:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8007b0a:	1d3b      	adds	r3, r7, #4
 8007b0c:	2280      	movs	r2, #128	@ 0x80
 8007b0e:	0492      	lsls	r2, r2, #18
 8007b10:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8007b12:	1d3b      	adds	r3, r7, #4
 8007b14:	2200      	movs	r2, #0
 8007b16:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007b18:	1d3b      	adds	r3, r7, #4
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007b1e:	1d3b      	adds	r3, r7, #4
 8007b20:	2200      	movs	r2, #0
 8007b22:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007b24:	1d3a      	adds	r2, r7, #4
 8007b26:	4b08      	ldr	r3, [pc, #32]	@ (8007b48 <MX_TIM1_Init+0x14c>)
 8007b28:	0011      	movs	r1, r2
 8007b2a:	0018      	movs	r0, r3
 8007b2c:	f005 fafe 	bl	800d12c <HAL_TIMEx_ConfigBreakDeadTime>
 8007b30:	1e03      	subs	r3, r0, #0
 8007b32:	d001      	beq.n	8007b38 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8007b34:	f7ff fe38 	bl	80077a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007b38:	4b03      	ldr	r3, [pc, #12]	@ (8007b48 <MX_TIM1_Init+0x14c>)
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	f000 f90e 	bl	8007d5c <HAL_TIM_MspPostInit>

}
 8007b40:	46c0      	nop			@ (mov r8, r8)
 8007b42:	46bd      	mov	sp, r7
 8007b44:	b018      	add	sp, #96	@ 0x60
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	20010de4 	.word	0x20010de4
 8007b4c:	40012c00 	.word	0x40012c00
 8007b50:	0000ffff 	.word	0x0000ffff

08007b54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007b54:	b590      	push	{r4, r7, lr}
 8007b56:	b08d      	sub	sp, #52	@ 0x34
 8007b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007b5a:	240c      	movs	r4, #12
 8007b5c:	193b      	adds	r3, r7, r4
 8007b5e:	0018      	movs	r0, r3
 8007b60:	2324      	movs	r3, #36	@ 0x24
 8007b62:	001a      	movs	r2, r3
 8007b64:	2100      	movs	r1, #0
 8007b66:	f017 f961 	bl	801ee2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b6a:	003b      	movs	r3, r7
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	230c      	movs	r3, #12
 8007b70:	001a      	movs	r2, r3
 8007b72:	2100      	movs	r1, #0
 8007b74:	f017 f95a 	bl	801ee2c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007b78:	4b26      	ldr	r3, [pc, #152]	@ (8007c14 <MX_TIM2_Init+0xc0>)
 8007b7a:	2280      	movs	r2, #128	@ 0x80
 8007b7c:	05d2      	lsls	r2, r2, #23
 8007b7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007b80:	4b24      	ldr	r3, [pc, #144]	@ (8007c14 <MX_TIM2_Init+0xc0>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b86:	4b23      	ldr	r3, [pc, #140]	@ (8007c14 <MX_TIM2_Init+0xc0>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8007b8c:	4b21      	ldr	r3, [pc, #132]	@ (8007c14 <MX_TIM2_Init+0xc0>)
 8007b8e:	2201      	movs	r2, #1
 8007b90:	4252      	negs	r2, r2
 8007b92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b94:	4b1f      	ldr	r3, [pc, #124]	@ (8007c14 <MX_TIM2_Init+0xc0>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8007c14 <MX_TIM2_Init+0xc0>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007ba0:	0021      	movs	r1, r4
 8007ba2:	187b      	adds	r3, r7, r1
 8007ba4:	2203      	movs	r2, #3
 8007ba6:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007ba8:	187b      	adds	r3, r7, r1
 8007baa:	2200      	movs	r2, #0
 8007bac:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007bae:	187b      	adds	r3, r7, r1
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007bb4:	187b      	adds	r3, r7, r1
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8007bba:	187b      	adds	r3, r7, r1
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007bc0:	187b      	adds	r3, r7, r1
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007bc6:	187b      	adds	r3, r7, r1
 8007bc8:	2201      	movs	r2, #1
 8007bca:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007bcc:	187b      	adds	r3, r7, r1
 8007bce:	2200      	movs	r2, #0
 8007bd0:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8007bd2:	187b      	adds	r3, r7, r1
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8007bd8:	187a      	adds	r2, r7, r1
 8007bda:	4b0e      	ldr	r3, [pc, #56]	@ (8007c14 <MX_TIM2_Init+0xc0>)
 8007bdc:	0011      	movs	r1, r2
 8007bde:	0018      	movs	r0, r3
 8007be0:	f004 fc02 	bl	800c3e8 <HAL_TIM_Encoder_Init>
 8007be4:	1e03      	subs	r3, r0, #0
 8007be6:	d001      	beq.n	8007bec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8007be8:	f7ff fdde 	bl	80077a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007bec:	003b      	movs	r3, r7
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007bf2:	003b      	movs	r3, r7
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007bf8:	003a      	movs	r2, r7
 8007bfa:	4b06      	ldr	r3, [pc, #24]	@ (8007c14 <MX_TIM2_Init+0xc0>)
 8007bfc:	0011      	movs	r1, r2
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f005 fa1e 	bl	800d040 <HAL_TIMEx_MasterConfigSynchronization>
 8007c04:	1e03      	subs	r3, r0, #0
 8007c06:	d001      	beq.n	8007c0c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8007c08:	f7ff fdce 	bl	80077a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007c0c:	46c0      	nop			@ (mov r8, r8)
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	b00d      	add	sp, #52	@ 0x34
 8007c12:	bd90      	pop	{r4, r7, pc}
 8007c14:	20010e30 	.word	0x20010e30

08007c18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007c18:	b590      	push	{r4, r7, lr}
 8007c1a:	b099      	sub	sp, #100	@ 0x64
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007c20:	2410      	movs	r4, #16
 8007c22:	193b      	adds	r3, r7, r4
 8007c24:	0018      	movs	r0, r3
 8007c26:	2350      	movs	r3, #80	@ 0x50
 8007c28:	001a      	movs	r2, r3
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	f017 f8fe 	bl	801ee2c <memset>
  if(tim_pwmHandle->Instance==TIM1)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a11      	ldr	r2, [pc, #68]	@ (8007c7c <HAL_TIM_PWM_MspInit+0x64>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d11c      	bne.n	8007c74 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8007c3a:	193b      	adds	r3, r7, r4
 8007c3c:	2280      	movs	r2, #128	@ 0x80
 8007c3e:	0392      	lsls	r2, r2, #14
 8007c40:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8007c42:	193b      	adds	r3, r7, r4
 8007c44:	2200      	movs	r2, #0
 8007c46:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007c48:	193b      	adds	r3, r7, r4
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	f004 f810 	bl	800bc70 <HAL_RCCEx_PeriphCLKConfig>
 8007c50:	1e03      	subs	r3, r0, #0
 8007c52:	d001      	beq.n	8007c58 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8007c54:	f7ff fda8 	bl	80077a8 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007c58:	4b09      	ldr	r3, [pc, #36]	@ (8007c80 <HAL_TIM_PWM_MspInit+0x68>)
 8007c5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c5c:	4b08      	ldr	r3, [pc, #32]	@ (8007c80 <HAL_TIM_PWM_MspInit+0x68>)
 8007c5e:	2180      	movs	r1, #128	@ 0x80
 8007c60:	0109      	lsls	r1, r1, #4
 8007c62:	430a      	orrs	r2, r1
 8007c64:	641a      	str	r2, [r3, #64]	@ 0x40
 8007c66:	4b06      	ldr	r3, [pc, #24]	@ (8007c80 <HAL_TIM_PWM_MspInit+0x68>)
 8007c68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c6a:	2380      	movs	r3, #128	@ 0x80
 8007c6c:	011b      	lsls	r3, r3, #4
 8007c6e:	4013      	ands	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8007c74:	46c0      	nop			@ (mov r8, r8)
 8007c76:	46bd      	mov	sp, r7
 8007c78:	b019      	add	sp, #100	@ 0x64
 8007c7a:	bd90      	pop	{r4, r7, pc}
 8007c7c:	40012c00 	.word	0x40012c00
 8007c80:	40021000 	.word	0x40021000

08007c84 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007c84:	b590      	push	{r4, r7, lr}
 8007c86:	b08b      	sub	sp, #44	@ 0x2c
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c8c:	2414      	movs	r4, #20
 8007c8e:	193b      	adds	r3, r7, r4
 8007c90:	0018      	movs	r0, r3
 8007c92:	2314      	movs	r3, #20
 8007c94:	001a      	movs	r2, r3
 8007c96:	2100      	movs	r1, #0
 8007c98:	f017 f8c8 	bl	801ee2c <memset>
  if(tim_encoderHandle->Instance==TIM2)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	2380      	movs	r3, #128	@ 0x80
 8007ca2:	05db      	lsls	r3, r3, #23
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d150      	bne.n	8007d4a <HAL_TIM_Encoder_MspInit+0xc6>
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */

    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8007d54 <HAL_TIM_Encoder_MspInit+0xd0>)
 8007caa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cac:	4b29      	ldr	r3, [pc, #164]	@ (8007d54 <HAL_TIM_Encoder_MspInit+0xd0>)
 8007cae:	2101      	movs	r1, #1
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007cb4:	4b27      	ldr	r3, [pc, #156]	@ (8007d54 <HAL_TIM_Encoder_MspInit+0xd0>)
 8007cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb8:	2201      	movs	r2, #1
 8007cba:	4013      	ands	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]
 8007cbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cc0:	4b24      	ldr	r3, [pc, #144]	@ (8007d54 <HAL_TIM_Encoder_MspInit+0xd0>)
 8007cc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cc4:	4b23      	ldr	r3, [pc, #140]	@ (8007d54 <HAL_TIM_Encoder_MspInit+0xd0>)
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	635a      	str	r2, [r3, #52]	@ 0x34
 8007ccc:	4b21      	ldr	r3, [pc, #132]	@ (8007d54 <HAL_TIM_Encoder_MspInit+0xd0>)
 8007cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8007d54 <HAL_TIM_Encoder_MspInit+0xd0>)
 8007cda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8007d54 <HAL_TIM_Encoder_MspInit+0xd0>)
 8007cde:	2102      	movs	r1, #2
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	635a      	str	r2, [r3, #52]	@ 0x34
 8007ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8007d54 <HAL_TIM_Encoder_MspInit+0xd0>)
 8007ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce8:	2202      	movs	r2, #2
 8007cea:	4013      	ands	r3, r2
 8007cec:	60bb      	str	r3, [r7, #8]
 8007cee:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007cf0:	193b      	adds	r3, r7, r4
 8007cf2:	2280      	movs	r2, #128	@ 0x80
 8007cf4:	0212      	lsls	r2, r2, #8
 8007cf6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cf8:	193b      	adds	r3, r7, r4
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cfe:	193b      	adds	r3, r7, r4
 8007d00:	2200      	movs	r2, #0
 8007d02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d04:	193b      	adds	r3, r7, r4
 8007d06:	2200      	movs	r2, #0
 8007d08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8007d0a:	193b      	adds	r3, r7, r4
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d10:	193a      	adds	r2, r7, r4
 8007d12:	23a0      	movs	r3, #160	@ 0xa0
 8007d14:	05db      	lsls	r3, r3, #23
 8007d16:	0011      	movs	r1, r2
 8007d18:	0018      	movs	r0, r3
 8007d1a:	f000 fdb7 	bl	800888c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007d1e:	0021      	movs	r1, r4
 8007d20:	187b      	adds	r3, r7, r1
 8007d22:	2208      	movs	r2, #8
 8007d24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d26:	187b      	adds	r3, r7, r1
 8007d28:	2202      	movs	r2, #2
 8007d2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d2c:	187b      	adds	r3, r7, r1
 8007d2e:	2200      	movs	r2, #0
 8007d30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d32:	187b      	adds	r3, r7, r1
 8007d34:	2200      	movs	r2, #0
 8007d36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8007d38:	187b      	adds	r3, r7, r1
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d3e:	187b      	adds	r3, r7, r1
 8007d40:	4a05      	ldr	r2, [pc, #20]	@ (8007d58 <HAL_TIM_Encoder_MspInit+0xd4>)
 8007d42:	0019      	movs	r1, r3
 8007d44:	0010      	movs	r0, r2
 8007d46:	f000 fda1 	bl	800888c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8007d4a:	46c0      	nop			@ (mov r8, r8)
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	b00b      	add	sp, #44	@ 0x2c
 8007d50:	bd90      	pop	{r4, r7, pc}
 8007d52:	46c0      	nop			@ (mov r8, r8)
 8007d54:	40021000 	.word	0x40021000
 8007d58:	50000400 	.word	0x50000400

08007d5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007d5c:	b590      	push	{r4, r7, lr}
 8007d5e:	b089      	sub	sp, #36	@ 0x24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d64:	240c      	movs	r4, #12
 8007d66:	193b      	adds	r3, r7, r4
 8007d68:	0018      	movs	r0, r3
 8007d6a:	2314      	movs	r3, #20
 8007d6c:	001a      	movs	r2, r3
 8007d6e:	2100      	movs	r1, #0
 8007d70:	f017 f85c 	bl	801ee2c <memset>
  if(timHandle->Instance==TIM1)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a15      	ldr	r2, [pc, #84]	@ (8007dd0 <HAL_TIM_MspPostInit+0x74>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d123      	bne.n	8007dc6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d7e:	4b15      	ldr	r3, [pc, #84]	@ (8007dd4 <HAL_TIM_MspPostInit+0x78>)
 8007d80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d82:	4b14      	ldr	r3, [pc, #80]	@ (8007dd4 <HAL_TIM_MspPostInit+0x78>)
 8007d84:	2101      	movs	r1, #1
 8007d86:	430a      	orrs	r2, r1
 8007d88:	635a      	str	r2, [r3, #52]	@ 0x34
 8007d8a:	4b12      	ldr	r3, [pc, #72]	@ (8007dd4 <HAL_TIM_MspPostInit+0x78>)
 8007d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d8e:	2201      	movs	r2, #1
 8007d90:	4013      	ands	r3, r2
 8007d92:	60bb      	str	r3, [r7, #8]
 8007d94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = NEOPIXEL_Pin;
 8007d96:	193b      	adds	r3, r7, r4
 8007d98:	2280      	movs	r2, #128	@ 0x80
 8007d9a:	00d2      	lsls	r2, r2, #3
 8007d9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d9e:	0021      	movs	r1, r4
 8007da0:	187b      	adds	r3, r7, r1
 8007da2:	2202      	movs	r2, #2
 8007da4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007da6:	187b      	adds	r3, r7, r1
 8007da8:	2200      	movs	r2, #0
 8007daa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dac:	187b      	adds	r3, r7, r1
 8007dae:	2200      	movs	r2, #0
 8007db0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8007db2:	187b      	adds	r3, r7, r1
 8007db4:	2202      	movs	r2, #2
 8007db6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(NEOPIXEL_GPIO_Port, &GPIO_InitStruct);
 8007db8:	187a      	adds	r2, r7, r1
 8007dba:	23a0      	movs	r3, #160	@ 0xa0
 8007dbc:	05db      	lsls	r3, r3, #23
 8007dbe:	0011      	movs	r1, r2
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	f000 fd63 	bl	800888c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8007dc6:	46c0      	nop			@ (mov r8, r8)
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	b009      	add	sp, #36	@ 0x24
 8007dcc:	bd90      	pop	{r4, r7, pc}
 8007dce:	46c0      	nop			@ (mov r8, r8)
 8007dd0:	40012c00 	.word	0x40012c00
 8007dd4:	40021000 	.word	0x40021000

08007dd8 <__NVIC_EnableIRQ>:
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	0002      	movs	r2, r0
 8007de0:	1dfb      	adds	r3, r7, #7
 8007de2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007de4:	1dfb      	adds	r3, r7, #7
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b7f      	cmp	r3, #127	@ 0x7f
 8007dea:	d809      	bhi.n	8007e00 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007dec:	1dfb      	adds	r3, r7, #7
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	001a      	movs	r2, r3
 8007df2:	231f      	movs	r3, #31
 8007df4:	401a      	ands	r2, r3
 8007df6:	4b04      	ldr	r3, [pc, #16]	@ (8007e08 <__NVIC_EnableIRQ+0x30>)
 8007df8:	2101      	movs	r1, #1
 8007dfa:	4091      	lsls	r1, r2
 8007dfc:	000a      	movs	r2, r1
 8007dfe:	601a      	str	r2, [r3, #0]
}
 8007e00:	46c0      	nop			@ (mov r8, r8)
 8007e02:	46bd      	mov	sp, r7
 8007e04:	b002      	add	sp, #8
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	e000e100 	.word	0xe000e100

08007e0c <__NVIC_SetPriority>:
{
 8007e0c:	b590      	push	{r4, r7, lr}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	0002      	movs	r2, r0
 8007e14:	6039      	str	r1, [r7, #0]
 8007e16:	1dfb      	adds	r3, r7, #7
 8007e18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007e1a:	1dfb      	adds	r3, r7, #7
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e20:	d828      	bhi.n	8007e74 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007e22:	4a2f      	ldr	r2, [pc, #188]	@ (8007ee0 <__NVIC_SetPriority+0xd4>)
 8007e24:	1dfb      	adds	r3, r7, #7
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	b25b      	sxtb	r3, r3
 8007e2a:	089b      	lsrs	r3, r3, #2
 8007e2c:	33c0      	adds	r3, #192	@ 0xc0
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	589b      	ldr	r3, [r3, r2]
 8007e32:	1dfa      	adds	r2, r7, #7
 8007e34:	7812      	ldrb	r2, [r2, #0]
 8007e36:	0011      	movs	r1, r2
 8007e38:	2203      	movs	r2, #3
 8007e3a:	400a      	ands	r2, r1
 8007e3c:	00d2      	lsls	r2, r2, #3
 8007e3e:	21ff      	movs	r1, #255	@ 0xff
 8007e40:	4091      	lsls	r1, r2
 8007e42:	000a      	movs	r2, r1
 8007e44:	43d2      	mvns	r2, r2
 8007e46:	401a      	ands	r2, r3
 8007e48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	019b      	lsls	r3, r3, #6
 8007e4e:	22ff      	movs	r2, #255	@ 0xff
 8007e50:	401a      	ands	r2, r3
 8007e52:	1dfb      	adds	r3, r7, #7
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	0018      	movs	r0, r3
 8007e58:	2303      	movs	r3, #3
 8007e5a:	4003      	ands	r3, r0
 8007e5c:	00db      	lsls	r3, r3, #3
 8007e5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007e60:	481f      	ldr	r0, [pc, #124]	@ (8007ee0 <__NVIC_SetPriority+0xd4>)
 8007e62:	1dfb      	adds	r3, r7, #7
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	b25b      	sxtb	r3, r3
 8007e68:	089b      	lsrs	r3, r3, #2
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	33c0      	adds	r3, #192	@ 0xc0
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	501a      	str	r2, [r3, r0]
}
 8007e72:	e031      	b.n	8007ed8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007e74:	4a1b      	ldr	r2, [pc, #108]	@ (8007ee4 <__NVIC_SetPriority+0xd8>)
 8007e76:	1dfb      	adds	r3, r7, #7
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	0019      	movs	r1, r3
 8007e7c:	230f      	movs	r3, #15
 8007e7e:	400b      	ands	r3, r1
 8007e80:	3b08      	subs	r3, #8
 8007e82:	089b      	lsrs	r3, r3, #2
 8007e84:	3306      	adds	r3, #6
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	18d3      	adds	r3, r2, r3
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	1dfa      	adds	r2, r7, #7
 8007e90:	7812      	ldrb	r2, [r2, #0]
 8007e92:	0011      	movs	r1, r2
 8007e94:	2203      	movs	r2, #3
 8007e96:	400a      	ands	r2, r1
 8007e98:	00d2      	lsls	r2, r2, #3
 8007e9a:	21ff      	movs	r1, #255	@ 0xff
 8007e9c:	4091      	lsls	r1, r2
 8007e9e:	000a      	movs	r2, r1
 8007ea0:	43d2      	mvns	r2, r2
 8007ea2:	401a      	ands	r2, r3
 8007ea4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	019b      	lsls	r3, r3, #6
 8007eaa:	22ff      	movs	r2, #255	@ 0xff
 8007eac:	401a      	ands	r2, r3
 8007eae:	1dfb      	adds	r3, r7, #7
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	4003      	ands	r3, r0
 8007eb8:	00db      	lsls	r3, r3, #3
 8007eba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007ebc:	4809      	ldr	r0, [pc, #36]	@ (8007ee4 <__NVIC_SetPriority+0xd8>)
 8007ebe:	1dfb      	adds	r3, r7, #7
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	001c      	movs	r4, r3
 8007ec4:	230f      	movs	r3, #15
 8007ec6:	4023      	ands	r3, r4
 8007ec8:	3b08      	subs	r3, #8
 8007eca:	089b      	lsrs	r3, r3, #2
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	3306      	adds	r3, #6
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	18c3      	adds	r3, r0, r3
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	601a      	str	r2, [r3, #0]
}
 8007ed8:	46c0      	nop			@ (mov r8, r8)
 8007eda:	46bd      	mov	sp, r7
 8007edc:	b003      	add	sp, #12
 8007ede:	bd90      	pop	{r4, r7, pc}
 8007ee0:	e000e100 	.word	0xe000e100
 8007ee4:	e000ed00 	.word	0xe000ed00

08007ee8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8007ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8007f2c <LL_DMA_SetDataTransferDirection+0x44>)
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	18d3      	adds	r3, r2, r3
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	001a      	movs	r2, r3
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	18d3      	adds	r3, r2, r3
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a09      	ldr	r2, [pc, #36]	@ (8007f30 <LL_DMA_SetDataTransferDirection+0x48>)
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	0019      	movs	r1, r3
 8007f0e:	4a07      	ldr	r2, [pc, #28]	@ (8007f2c <LL_DMA_SetDataTransferDirection+0x44>)
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	18d3      	adds	r3, r2, r3
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	001a      	movs	r2, r3
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	18d3      	adds	r3, r2, r3
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8007f22:	46c0      	nop			@ (mov r8, r8)
 8007f24:	46bd      	mov	sp, r7
 8007f26:	b006      	add	sp, #24
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	46c0      	nop			@ (mov r8, r8)
 8007f2c:	0801f124 	.word	0x0801f124
 8007f30:	ffffbfef 	.word	0xffffbfef

08007f34 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8007f44:	4a0c      	ldr	r2, [pc, #48]	@ (8007f78 <LL_DMA_SetMode+0x44>)
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	18d3      	adds	r3, r2, r3
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	001a      	movs	r2, r3
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	18d3      	adds	r3, r2, r3
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2220      	movs	r2, #32
 8007f56:	4393      	bics	r3, r2
 8007f58:	0019      	movs	r1, r3
 8007f5a:	4a07      	ldr	r2, [pc, #28]	@ (8007f78 <LL_DMA_SetMode+0x44>)
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	18d3      	adds	r3, r2, r3
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	001a      	movs	r2, r3
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	18d3      	adds	r3, r2, r3
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	601a      	str	r2, [r3, #0]
             Mode);
}
 8007f6e:	46c0      	nop			@ (mov r8, r8)
 8007f70:	46bd      	mov	sp, r7
 8007f72:	b006      	add	sp, #24
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	46c0      	nop			@ (mov r8, r8)
 8007f78:	0801f124 	.word	0x0801f124

08007f7c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8007f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8007fc0 <LL_DMA_SetPeriphIncMode+0x44>)
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	18d3      	adds	r3, r2, r3
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	001a      	movs	r2, r3
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	18d3      	adds	r3, r2, r3
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2240      	movs	r2, #64	@ 0x40
 8007f9e:	4393      	bics	r3, r2
 8007fa0:	0019      	movs	r1, r3
 8007fa2:	4a07      	ldr	r2, [pc, #28]	@ (8007fc0 <LL_DMA_SetPeriphIncMode+0x44>)
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	18d3      	adds	r3, r2, r3
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	001a      	movs	r2, r3
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	18d3      	adds	r3, r2, r3
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8007fb6:	46c0      	nop			@ (mov r8, r8)
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	b006      	add	sp, #24
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	46c0      	nop			@ (mov r8, r8)
 8007fc0:	0801f124 	.word	0x0801f124

08007fc4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8007fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8008008 <LL_DMA_SetMemoryIncMode+0x44>)
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	18d3      	adds	r3, r2, r3
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	001a      	movs	r2, r3
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	18d3      	adds	r3, r2, r3
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2280      	movs	r2, #128	@ 0x80
 8007fe6:	4393      	bics	r3, r2
 8007fe8:	0019      	movs	r1, r3
 8007fea:	4a07      	ldr	r2, [pc, #28]	@ (8008008 <LL_DMA_SetMemoryIncMode+0x44>)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	18d3      	adds	r3, r2, r3
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	001a      	movs	r2, r3
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	18d3      	adds	r3, r2, r3
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8007ffe:	46c0      	nop			@ (mov r8, r8)
 8008000:	46bd      	mov	sp, r7
 8008002:	b006      	add	sp, #24
 8008004:	bd80      	pop	{r7, pc}
 8008006:	46c0      	nop			@ (mov r8, r8)
 8008008:	0801f124 	.word	0x0801f124

0800800c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 800801c:	4a0c      	ldr	r2, [pc, #48]	@ (8008050 <LL_DMA_SetPeriphSize+0x44>)
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	18d3      	adds	r3, r2, r3
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	001a      	movs	r2, r3
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	18d3      	adds	r3, r2, r3
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a09      	ldr	r2, [pc, #36]	@ (8008054 <LL_DMA_SetPeriphSize+0x48>)
 800802e:	4013      	ands	r3, r2
 8008030:	0019      	movs	r1, r3
 8008032:	4a07      	ldr	r2, [pc, #28]	@ (8008050 <LL_DMA_SetPeriphSize+0x44>)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	18d3      	adds	r3, r2, r3
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	001a      	movs	r2, r3
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	18d3      	adds	r3, r2, r3
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	430a      	orrs	r2, r1
 8008044:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8008046:	46c0      	nop			@ (mov r8, r8)
 8008048:	46bd      	mov	sp, r7
 800804a:	b006      	add	sp, #24
 800804c:	bd80      	pop	{r7, pc}
 800804e:	46c0      	nop			@ (mov r8, r8)
 8008050:	0801f124 	.word	0x0801f124
 8008054:	fffffcff 	.word	0xfffffcff

08008058 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8008068:	4a0c      	ldr	r2, [pc, #48]	@ (800809c <LL_DMA_SetMemorySize+0x44>)
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	18d3      	adds	r3, r2, r3
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	001a      	movs	r2, r3
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	18d3      	adds	r3, r2, r3
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a09      	ldr	r2, [pc, #36]	@ (80080a0 <LL_DMA_SetMemorySize+0x48>)
 800807a:	4013      	ands	r3, r2
 800807c:	0019      	movs	r1, r3
 800807e:	4a07      	ldr	r2, [pc, #28]	@ (800809c <LL_DMA_SetMemorySize+0x44>)
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	18d3      	adds	r3, r2, r3
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	001a      	movs	r2, r3
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	18d3      	adds	r3, r2, r3
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	430a      	orrs	r2, r1
 8008090:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8008092:	46c0      	nop			@ (mov r8, r8)
 8008094:	46bd      	mov	sp, r7
 8008096:	b006      	add	sp, #24
 8008098:	bd80      	pop	{r7, pc}
 800809a:	46c0      	nop			@ (mov r8, r8)
 800809c:	0801f124 	.word	0x0801f124
 80080a0:	fffff3ff 	.word	0xfffff3ff

080080a4 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80080b4:	4a0c      	ldr	r2, [pc, #48]	@ (80080e8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	18d3      	adds	r3, r2, r3
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	001a      	movs	r2, r3
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	18d3      	adds	r3, r2, r3
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a09      	ldr	r2, [pc, #36]	@ (80080ec <LL_DMA_SetChannelPriorityLevel+0x48>)
 80080c6:	4013      	ands	r3, r2
 80080c8:	0019      	movs	r1, r3
 80080ca:	4a07      	ldr	r2, [pc, #28]	@ (80080e8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	18d3      	adds	r3, r2, r3
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	001a      	movs	r2, r3
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	18d3      	adds	r3, r2, r3
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	430a      	orrs	r2, r1
 80080dc:	601a      	str	r2, [r3, #0]
             Priority);
}
 80080de:	46c0      	nop			@ (mov r8, r8)
 80080e0:	46bd      	mov	sp, r7
 80080e2:	b006      	add	sp, #24
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	46c0      	nop			@ (mov r8, r8)
 80080e8:	0801f124 	.word	0x0801f124
 80080ec:	ffffcfff 	.word	0xffffcfff

080080f0 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	0a9b      	lsrs	r3, r3, #10
 8008100:	4a0f      	ldr	r2, [pc, #60]	@ (8008140 <LL_DMA_SetPeriphRequest+0x50>)
 8008102:	405a      	eors	r2, r3
 8008104:	0013      	movs	r3, r2
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	1a9b      	subs	r3, r3, r2
 800810a:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	18d3      	adds	r3, r2, r3
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4a0b      	ldr	r2, [pc, #44]	@ (8008144 <LL_DMA_SetPeriphRequest+0x54>)
 8008116:	4694      	mov	ip, r2
 8008118:	4463      	add	r3, ip
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	227f      	movs	r2, #127	@ 0x7f
 800811e:	4393      	bics	r3, r2
 8008120:	0019      	movs	r1, r3
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	18d3      	adds	r3, r2, r3
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4a06      	ldr	r2, [pc, #24]	@ (8008144 <LL_DMA_SetPeriphRequest+0x54>)
 800812c:	4694      	mov	ip, r2
 800812e:	4463      	add	r3, ip
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	430a      	orrs	r2, r1
 8008134:	601a      	str	r2, [r3, #0]
}
 8008136:	46c0      	nop			@ (mov r8, r8)
 8008138:	46bd      	mov	sp, r7
 800813a:	b006      	add	sp, #24
 800813c:	bd80      	pop	{r7, pc}
 800813e:	46c0      	nop			@ (mov r8, r8)
 8008140:	00100080 	.word	0x00100080
 8008144:	40020800 	.word	0x40020800

08008148 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8008150:	4b07      	ldr	r3, [pc, #28]	@ (8008170 <LL_APB1_GRP1_EnableClock+0x28>)
 8008152:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008154:	4b06      	ldr	r3, [pc, #24]	@ (8008170 <LL_APB1_GRP1_EnableClock+0x28>)
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	430a      	orrs	r2, r1
 800815a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800815c:	4b04      	ldr	r3, [pc, #16]	@ (8008170 <LL_APB1_GRP1_EnableClock+0x28>)
 800815e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	4013      	ands	r3, r2
 8008164:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008166:	68fb      	ldr	r3, [r7, #12]
}
 8008168:	46c0      	nop			@ (mov r8, r8)
 800816a:	46bd      	mov	sp, r7
 800816c:	b004      	add	sp, #16
 800816e:	bd80      	pop	{r7, pc}
 8008170:	40021000 	.word	0x40021000

08008174 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800817c:	4b07      	ldr	r3, [pc, #28]	@ (800819c <LL_IOP_GRP1_EnableClock+0x28>)
 800817e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008180:	4b06      	ldr	r3, [pc, #24]	@ (800819c <LL_IOP_GRP1_EnableClock+0x28>)
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	430a      	orrs	r2, r1
 8008186:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8008188:	4b04      	ldr	r3, [pc, #16]	@ (800819c <LL_IOP_GRP1_EnableClock+0x28>)
 800818a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	4013      	ands	r3, r2
 8008190:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008192:	68fb      	ldr	r3, [r7, #12]
}
 8008194:	46c0      	nop			@ (mov r8, r8)
 8008196:	46bd      	mov	sp, r7
 8008198:	b004      	add	sp, #16
 800819a:	bd80      	pop	{r7, pc}
 800819c:	40021000 	.word	0x40021000

080081a0 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081a6:	003b      	movs	r3, r7
 80081a8:	0018      	movs	r0, r3
 80081aa:	2318      	movs	r3, #24
 80081ac:	001a      	movs	r2, r3
 80081ae:	2100      	movs	r1, #0
 80081b0:	f016 fe3c 	bl	801ee2c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 80081b4:	2380      	movs	r3, #128	@ 0x80
 80081b6:	049b      	lsls	r3, r3, #18
 80081b8:	0018      	movs	r0, r3
 80081ba:	f7ff ffc5 	bl	8008148 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80081be:	2002      	movs	r0, #2
 80081c0:	f7ff ffd8 	bl	8008174 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80081c4:	2001      	movs	r0, #1
 80081c6:	f7ff ffd5 	bl	8008174 <LL_IOP_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA8   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80081ca:	003b      	movs	r3, r7
 80081cc:	2280      	movs	r2, #128	@ 0x80
 80081ce:	0212      	lsls	r2, r2, #8
 80081d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80081d2:	003b      	movs	r3, r7
 80081d4:	2203      	movs	r2, #3
 80081d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80081d8:	003b      	movs	r3, r7
 80081da:	2200      	movs	r2, #0
 80081dc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081de:	003b      	movs	r3, r7
 80081e0:	4a40      	ldr	r2, [pc, #256]	@ (80082e4 <MX_UCPD1_Init+0x144>)
 80081e2:	0019      	movs	r1, r3
 80081e4:	0010      	movs	r0, r2
 80081e6:	f005 fa1b 	bl	800d620 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80081ea:	003b      	movs	r3, r7
 80081ec:	2280      	movs	r2, #128	@ 0x80
 80081ee:	0052      	lsls	r2, r2, #1
 80081f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80081f2:	003b      	movs	r3, r7
 80081f4:	2203      	movs	r2, #3
 80081f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80081f8:	003b      	movs	r3, r7
 80081fa:	2200      	movs	r2, #0
 80081fc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081fe:	003a      	movs	r2, r7
 8008200:	23a0      	movs	r3, #160	@ 0xa0
 8008202:	05db      	lsls	r3, r3, #23
 8008204:	0011      	movs	r1, r2
 8008206:	0018      	movs	r0, r3
 8008208:	f005 fa0a 	bl	800d620 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 800820c:	4b36      	ldr	r3, [pc, #216]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 800820e:	223a      	movs	r2, #58	@ 0x3a
 8008210:	2100      	movs	r1, #0
 8008212:	0018      	movs	r0, r3
 8008214:	f7ff ff6c 	bl	80080f0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8008218:	4b33      	ldr	r3, [pc, #204]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 800821a:	2200      	movs	r2, #0
 800821c:	2100      	movs	r1, #0
 800821e:	0018      	movs	r0, r3
 8008220:	f7ff fe62 	bl	8007ee8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8008224:	4b30      	ldr	r3, [pc, #192]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 8008226:	2200      	movs	r2, #0
 8008228:	2100      	movs	r1, #0
 800822a:	0018      	movs	r0, r3
 800822c:	f7ff ff3a 	bl	80080a4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8008230:	4b2d      	ldr	r3, [pc, #180]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 8008232:	2200      	movs	r2, #0
 8008234:	2100      	movs	r1, #0
 8008236:	0018      	movs	r0, r3
 8008238:	f7ff fe7c 	bl	8007f34 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800823c:	4b2a      	ldr	r3, [pc, #168]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 800823e:	2200      	movs	r2, #0
 8008240:	2100      	movs	r1, #0
 8008242:	0018      	movs	r0, r3
 8008244:	f7ff fe9a 	bl	8007f7c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8008248:	4b27      	ldr	r3, [pc, #156]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 800824a:	2280      	movs	r2, #128	@ 0x80
 800824c:	2100      	movs	r1, #0
 800824e:	0018      	movs	r0, r3
 8008250:	f7ff feb8 	bl	8007fc4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8008254:	4b24      	ldr	r3, [pc, #144]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 8008256:	2200      	movs	r2, #0
 8008258:	2100      	movs	r1, #0
 800825a:	0018      	movs	r0, r3
 800825c:	f7ff fed6 	bl	800800c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8008260:	4b21      	ldr	r3, [pc, #132]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 8008262:	2200      	movs	r2, #0
 8008264:	2100      	movs	r1, #0
 8008266:	0018      	movs	r0, r3
 8008268:	f7ff fef6 	bl	8008058 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 800826c:	4b1e      	ldr	r3, [pc, #120]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 800826e:	223b      	movs	r2, #59	@ 0x3b
 8008270:	2101      	movs	r1, #1
 8008272:	0018      	movs	r0, r3
 8008274:	f7ff ff3c 	bl	80080f0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8008278:	4b1b      	ldr	r3, [pc, #108]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 800827a:	2210      	movs	r2, #16
 800827c:	2101      	movs	r1, #1
 800827e:	0018      	movs	r0, r3
 8008280:	f7ff fe32 	bl	8007ee8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8008284:	4b18      	ldr	r3, [pc, #96]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 8008286:	2200      	movs	r2, #0
 8008288:	2101      	movs	r1, #1
 800828a:	0018      	movs	r0, r3
 800828c:	f7ff ff0a 	bl	80080a4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8008290:	4b15      	ldr	r3, [pc, #84]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 8008292:	2200      	movs	r2, #0
 8008294:	2101      	movs	r1, #1
 8008296:	0018      	movs	r0, r3
 8008298:	f7ff fe4c 	bl	8007f34 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 800829c:	4b12      	ldr	r3, [pc, #72]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 800829e:	2200      	movs	r2, #0
 80082a0:	2101      	movs	r1, #1
 80082a2:	0018      	movs	r0, r3
 80082a4:	f7ff fe6a 	bl	8007f7c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 80082a8:	4b0f      	ldr	r3, [pc, #60]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 80082aa:	2280      	movs	r2, #128	@ 0x80
 80082ac:	2101      	movs	r1, #1
 80082ae:	0018      	movs	r0, r3
 80082b0:	f7ff fe88 	bl	8007fc4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 80082b4:	4b0c      	ldr	r3, [pc, #48]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	2101      	movs	r1, #1
 80082ba:	0018      	movs	r0, r3
 80082bc:	f7ff fea6 	bl	800800c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 80082c0:	4b09      	ldr	r3, [pc, #36]	@ (80082e8 <MX_UCPD1_Init+0x148>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	2101      	movs	r1, #1
 80082c6:	0018      	movs	r0, r3
 80082c8:	f7ff fec6 	bl	8008058 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 0);
 80082cc:	2100      	movs	r1, #0
 80082ce:	2008      	movs	r0, #8
 80082d0:	f7ff fd9c 	bl	8007e0c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80082d4:	2008      	movs	r0, #8
 80082d6:	f7ff fd7f 	bl	8007dd8 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80082da:	46c0      	nop			@ (mov r8, r8)
 80082dc:	46bd      	mov	sp, r7
 80082de:	b006      	add	sp, #24
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	46c0      	nop			@ (mov r8, r8)
 80082e4:	50000400 	.word	0x50000400
 80082e8:	40020000 	.word	0x40020000

080082ec <MX_UCPD2_Init>:
/* UCPD2 init function */
void MX_UCPD2_Init(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD2_Init 0 */

  /* USER CODE END UCPD2_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082f2:	003b      	movs	r3, r7
 80082f4:	0018      	movs	r0, r3
 80082f6:	2318      	movs	r3, #24
 80082f8:	001a      	movs	r2, r3
 80082fa:	2100      	movs	r1, #0
 80082fc:	f016 fd96 	bl	801ee2c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 8008300:	2380      	movs	r3, #128	@ 0x80
 8008302:	04db      	lsls	r3, r3, #19
 8008304:	0018      	movs	r0, r3
 8008306:	f7ff ff1f 	bl	8008148 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOD);
 800830a:	2008      	movs	r0, #8
 800830c:	f7ff ff32 	bl	8008174 <LL_IOP_GRP1_EnableClock>
  /**UCPD2 GPIO Configuration
  PD0   ------> UCPD2_CC1
  PD2   ------> UCPD2_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8008310:	003b      	movs	r3, r7
 8008312:	2201      	movs	r2, #1
 8008314:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008316:	003b      	movs	r3, r7
 8008318:	2203      	movs	r2, #3
 800831a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800831c:	003b      	movs	r3, r7
 800831e:	2200      	movs	r2, #0
 8008320:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008322:	003b      	movs	r3, r7
 8008324:	4a3f      	ldr	r2, [pc, #252]	@ (8008424 <MX_UCPD2_Init+0x138>)
 8008326:	0019      	movs	r1, r3
 8008328:	0010      	movs	r0, r2
 800832a:	f005 f979 	bl	800d620 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800832e:	003b      	movs	r3, r7
 8008330:	2204      	movs	r2, #4
 8008332:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008334:	003b      	movs	r3, r7
 8008336:	2203      	movs	r2, #3
 8008338:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800833a:	003b      	movs	r3, r7
 800833c:	2200      	movs	r2, #0
 800833e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008340:	003b      	movs	r3, r7
 8008342:	4a38      	ldr	r2, [pc, #224]	@ (8008424 <MX_UCPD2_Init+0x138>)
 8008344:	0019      	movs	r1, r3
 8008346:	0010      	movs	r0, r2
 8008348:	f005 f96a 	bl	800d620 <LL_GPIO_Init>

  /* UCPD2 DMA Init */

  /* UCPD2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_UCPD2_RX);
 800834c:	4b36      	ldr	r3, [pc, #216]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 800834e:	223c      	movs	r2, #60	@ 0x3c
 8008350:	2102      	movs	r1, #2
 8008352:	0018      	movs	r0, r3
 8008354:	f7ff fecc 	bl	80080f0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8008358:	4b33      	ldr	r3, [pc, #204]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 800835a:	2200      	movs	r2, #0
 800835c:	2102      	movs	r1, #2
 800835e:	0018      	movs	r0, r3
 8008360:	f7ff fdc2 	bl	8007ee8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8008364:	4b30      	ldr	r3, [pc, #192]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 8008366:	2200      	movs	r2, #0
 8008368:	2102      	movs	r1, #2
 800836a:	0018      	movs	r0, r3
 800836c:	f7ff fe9a 	bl	80080a4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8008370:	4b2d      	ldr	r3, [pc, #180]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 8008372:	2200      	movs	r2, #0
 8008374:	2102      	movs	r1, #2
 8008376:	0018      	movs	r0, r3
 8008378:	f7ff fddc 	bl	8007f34 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 800837c:	4b2a      	ldr	r3, [pc, #168]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 800837e:	2200      	movs	r2, #0
 8008380:	2102      	movs	r1, #2
 8008382:	0018      	movs	r0, r3
 8008384:	f7ff fdfa 	bl	8007f7c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8008388:	4b27      	ldr	r3, [pc, #156]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 800838a:	2280      	movs	r2, #128	@ 0x80
 800838c:	2102      	movs	r1, #2
 800838e:	0018      	movs	r0, r3
 8008390:	f7ff fe18 	bl	8007fc4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8008394:	4b24      	ldr	r3, [pc, #144]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 8008396:	2200      	movs	r2, #0
 8008398:	2102      	movs	r1, #2
 800839a:	0018      	movs	r0, r3
 800839c:	f7ff fe36 	bl	800800c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 80083a0:	4b21      	ldr	r3, [pc, #132]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	2102      	movs	r1, #2
 80083a6:	0018      	movs	r0, r3
 80083a8:	f7ff fe56 	bl	8008058 <LL_DMA_SetMemorySize>

  /* UCPD2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_UCPD2_TX);
 80083ac:	4b1e      	ldr	r3, [pc, #120]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 80083ae:	223d      	movs	r2, #61	@ 0x3d
 80083b0:	2103      	movs	r1, #3
 80083b2:	0018      	movs	r0, r3
 80083b4:	f7ff fe9c 	bl	80080f0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80083b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 80083ba:	2210      	movs	r2, #16
 80083bc:	2103      	movs	r1, #3
 80083be:	0018      	movs	r0, r3
 80083c0:	f7ff fd92 	bl	8007ee8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 80083c4:	4b18      	ldr	r3, [pc, #96]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	2103      	movs	r1, #3
 80083ca:	0018      	movs	r0, r3
 80083cc:	f7ff fe6a 	bl	80080a4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 80083d0:	4b15      	ldr	r3, [pc, #84]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	2103      	movs	r1, #3
 80083d6:	0018      	movs	r0, r3
 80083d8:	f7ff fdac 	bl	8007f34 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 80083dc:	4b12      	ldr	r3, [pc, #72]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 80083de:	2200      	movs	r2, #0
 80083e0:	2103      	movs	r1, #3
 80083e2:	0018      	movs	r0, r3
 80083e4:	f7ff fdca 	bl	8007f7c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 80083e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 80083ea:	2280      	movs	r2, #128	@ 0x80
 80083ec:	2103      	movs	r1, #3
 80083ee:	0018      	movs	r0, r3
 80083f0:	f7ff fde8 	bl	8007fc4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 80083f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	2103      	movs	r1, #3
 80083fa:	0018      	movs	r0, r3
 80083fc:	f7ff fe06 	bl	800800c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8008400:	4b09      	ldr	r3, [pc, #36]	@ (8008428 <MX_UCPD2_Init+0x13c>)
 8008402:	2200      	movs	r2, #0
 8008404:	2103      	movs	r1, #3
 8008406:	0018      	movs	r0, r3
 8008408:	f7ff fe26 	bl	8008058 <LL_DMA_SetMemorySize>

  /* UCPD2 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 0);
 800840c:	2100      	movs	r1, #0
 800840e:	2008      	movs	r0, #8
 8008410:	f7ff fcfc 	bl	8007e0c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 8008414:	2008      	movs	r0, #8
 8008416:	f7ff fcdf 	bl	8007dd8 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD2_Init 1 */
  /* USER CODE BEGIN UCPD2_Init 2 */

  /* USER CODE END UCPD2_Init 2 */

}
 800841a:	46c0      	nop			@ (mov r8, r8)
 800841c:	46bd      	mov	sp, r7
 800841e:	b006      	add	sp, #24
 8008420:	bd80      	pop	{r7, pc}
 8008422:	46c0      	nop			@ (mov r8, r8)
 8008424:	50000c00 	.word	0x50000c00
 8008428:	40020000 	.word	0x40020000

0800842c <MX_USB_DRD_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_DRD_FS;

/* USB_DRD_FS init function */

void MX_USB_DRD_FS_PCD_Init(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_DRD_FS_Init 0 */

  /* USER CODE BEGIN USB_DRD_FS_Init 1 */

  /* USER CODE END USB_DRD_FS_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8008430:	4b17      	ldr	r3, [pc, #92]	@ (8008490 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008432:	4a18      	ldr	r2, [pc, #96]	@ (8008494 <MX_USB_DRD_FS_PCD_Init+0x68>)
 8008434:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8008436:	4b16      	ldr	r3, [pc, #88]	@ (8008490 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008438:	2208      	movs	r2, #8
 800843a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 800843c:	4b14      	ldr	r3, [pc, #80]	@ (8008490 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800843e:	2208      	movs	r2, #8
 8008440:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 8008442:	4b13      	ldr	r3, [pc, #76]	@ (8008490 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008444:	2202      	movs	r2, #2
 8008446:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008448:	4b11      	ldr	r3, [pc, #68]	@ (8008490 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800844a:	2202      	movs	r2, #2
 800844c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800844e:	4b10      	ldr	r3, [pc, #64]	@ (8008490 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008450:	2200      	movs	r2, #0
 8008452:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8008454:	4b0e      	ldr	r3, [pc, #56]	@ (8008490 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008456:	2200      	movs	r2, #0
 8008458:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800845a:	4b0d      	ldr	r3, [pc, #52]	@ (8008490 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800845c:	2200      	movs	r2, #0
 800845e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8008460:	4b0b      	ldr	r3, [pc, #44]	@ (8008490 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008462:	2200      	movs	r2, #0
 8008464:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8008466:	4b0a      	ldr	r3, [pc, #40]	@ (8008490 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008468:	2200      	movs	r2, #0
 800846a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800846c:	4b08      	ldr	r3, [pc, #32]	@ (8008490 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800846e:	2200      	movs	r2, #0
 8008470:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8008472:	4b07      	ldr	r3, [pc, #28]	@ (8008490 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008474:	2200      	movs	r2, #0
 8008476:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8008478:	4b05      	ldr	r3, [pc, #20]	@ (8008490 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800847a:	0018      	movs	r0, r3
 800847c:	f001 f8b0 	bl	80095e0 <HAL_PCD_Init>
 8008480:	1e03      	subs	r3, r0, #0
 8008482:	d001      	beq.n	8008488 <MX_USB_DRD_FS_PCD_Init+0x5c>
  {
    Error_Handler();
 8008484:	f7ff f990 	bl	80077a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DRD_FS_Init 2 */

  /* USER CODE END USB_DRD_FS_Init 2 */

}
 8008488:	46c0      	nop			@ (mov r8, r8)
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	46c0      	nop			@ (mov r8, r8)
 8008490:	20010e7c 	.word	0x20010e7c
 8008494:	40005c00 	.word	0x40005c00

08008498 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008498:	b590      	push	{r4, r7, lr}
 800849a:	b099      	sub	sp, #100	@ 0x64
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80084a0:	2410      	movs	r4, #16
 80084a2:	193b      	adds	r3, r7, r4
 80084a4:	0018      	movs	r0, r3
 80084a6:	2350      	movs	r3, #80	@ 0x50
 80084a8:	001a      	movs	r2, r3
 80084aa:	2100      	movs	r1, #0
 80084ac:	f016 fcbe 	bl	801ee2c <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a25      	ldr	r2, [pc, #148]	@ (800854c <HAL_PCD_MspInit+0xb4>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d143      	bne.n	8008542 <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80084ba:	193b      	adds	r3, r7, r4
 80084bc:	2280      	movs	r2, #128	@ 0x80
 80084be:	0452      	lsls	r2, r2, #17
 80084c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80084c2:	193b      	adds	r3, r7, r4
 80084c4:	2200      	movs	r2, #0
 80084c6:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80084c8:	193b      	adds	r3, r7, r4
 80084ca:	0018      	movs	r0, r3
 80084cc:	f003 fbd0 	bl	800bc70 <HAL_RCCEx_PeriphCLKConfig>
 80084d0:	1e03      	subs	r3, r0, #0
 80084d2:	d001      	beq.n	80084d8 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 80084d4:	f7ff f968 	bl	80077a8 <Error_Handler>
    }

    /* USB_DRD_FS clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80084d8:	4b1d      	ldr	r3, [pc, #116]	@ (8008550 <HAL_PCD_MspInit+0xb8>)
 80084da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008550 <HAL_PCD_MspInit+0xb8>)
 80084de:	2180      	movs	r1, #128	@ 0x80
 80084e0:	0189      	lsls	r1, r1, #6
 80084e2:	430a      	orrs	r2, r1
 80084e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80084e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008550 <HAL_PCD_MspInit+0xb8>)
 80084e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084ea:	2380      	movs	r3, #128	@ 0x80
 80084ec:	019b      	lsls	r3, r3, #6
 80084ee:	4013      	ands	r3, r2
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084f4:	4b16      	ldr	r3, [pc, #88]	@ (8008550 <HAL_PCD_MspInit+0xb8>)
 80084f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084f8:	2380      	movs	r3, #128	@ 0x80
 80084fa:	055b      	lsls	r3, r3, #21
 80084fc:	4013      	ands	r3, r2
 80084fe:	d116      	bne.n	800852e <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008500:	4b13      	ldr	r3, [pc, #76]	@ (8008550 <HAL_PCD_MspInit+0xb8>)
 8008502:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008504:	4b12      	ldr	r3, [pc, #72]	@ (8008550 <HAL_PCD_MspInit+0xb8>)
 8008506:	2180      	movs	r1, #128	@ 0x80
 8008508:	0549      	lsls	r1, r1, #21
 800850a:	430a      	orrs	r2, r1
 800850c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800850e:	4b10      	ldr	r3, [pc, #64]	@ (8008550 <HAL_PCD_MspInit+0xb8>)
 8008510:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008512:	2380      	movs	r3, #128	@ 0x80
 8008514:	055b      	lsls	r3, r3, #21
 8008516:	4013      	ands	r3, r2
 8008518:	60bb      	str	r3, [r7, #8]
 800851a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800851c:	f002 fe1a 	bl	800b154 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008520:	4b0b      	ldr	r3, [pc, #44]	@ (8008550 <HAL_PCD_MspInit+0xb8>)
 8008522:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008524:	4b0a      	ldr	r3, [pc, #40]	@ (8008550 <HAL_PCD_MspInit+0xb8>)
 8008526:	490b      	ldr	r1, [pc, #44]	@ (8008554 <HAL_PCD_MspInit+0xbc>)
 8008528:	400a      	ands	r2, r1
 800852a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800852c:	e001      	b.n	8008532 <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800852e:	f002 fe11 	bl	800b154 <HAL_PWREx_EnableVddUSB>
    }

    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 0, 0);
 8008532:	2200      	movs	r2, #0
 8008534:	2100      	movs	r1, #0
 8008536:	2008      	movs	r0, #8
 8008538:	f000 f982 	bl	8008840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 800853c:	2008      	movs	r0, #8
 800853e:	f000 f994 	bl	800886a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 8008542:	46c0      	nop			@ (mov r8, r8)
 8008544:	46bd      	mov	sp, r7
 8008546:	b019      	add	sp, #100	@ 0x64
 8008548:	bd90      	pop	{r4, r7, pc}
 800854a:	46c0      	nop			@ (mov r8, r8)
 800854c:	40005c00 	.word	0x40005c00
 8008550:	40021000 	.word	0x40021000
 8008554:	efffffff 	.word	0xefffffff

08008558 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008558:	480d      	ldr	r0, [pc, #52]	@ (8008590 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800855a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800855c:	f7ff fa48 	bl	80079f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008560:	480c      	ldr	r0, [pc, #48]	@ (8008594 <LoopForever+0x6>)
  ldr r1, =_edata
 8008562:	490d      	ldr	r1, [pc, #52]	@ (8008598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008564:	4a0d      	ldr	r2, [pc, #52]	@ (800859c <LoopForever+0xe>)
  movs r3, #0
 8008566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008568:	e002      	b.n	8008570 <LoopCopyDataInit>

0800856a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800856a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800856c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800856e:	3304      	adds	r3, #4

08008570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008574:	d3f9      	bcc.n	800856a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008576:	4a0a      	ldr	r2, [pc, #40]	@ (80085a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008578:	4c0a      	ldr	r4, [pc, #40]	@ (80085a4 <LoopForever+0x16>)
  movs r3, #0
 800857a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800857c:	e001      	b.n	8008582 <LoopFillZerobss>

0800857e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800857e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008580:	3204      	adds	r2, #4

08008582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008584:	d3fb      	bcc.n	800857e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008586:	f016 fc71 	bl	801ee6c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800858a:	f7ff f84d 	bl	8007628 <main>

0800858e <LoopForever>:

LoopForever:
  b LoopForever
 800858e:	e7fe      	b.n	800858e <LoopForever>
  ldr   r0, =_estack
 8008590:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8008594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008598:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 800859c:	0801f4cc 	.word	0x0801f4cc
  ldr r2, =_sbss
 80085a0:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 80085a4:	200120ac 	.word	0x200120ac

080085a8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80085a8:	e7fe      	b.n	80085a8 <ADC1_COMP_IRQHandler>
	...

080085ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80085b2:	1dfb      	adds	r3, r7, #7
 80085b4:	2200      	movs	r2, #0
 80085b6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80085b8:	4b0b      	ldr	r3, [pc, #44]	@ (80085e8 <HAL_Init+0x3c>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	4b0a      	ldr	r3, [pc, #40]	@ (80085e8 <HAL_Init+0x3c>)
 80085be:	2180      	movs	r1, #128	@ 0x80
 80085c0:	0049      	lsls	r1, r1, #1
 80085c2:	430a      	orrs	r2, r1
 80085c4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80085c6:	2003      	movs	r0, #3
 80085c8:	f7ff f924 	bl	8007814 <HAL_InitTick>
 80085cc:	1e03      	subs	r3, r0, #0
 80085ce:	d003      	beq.n	80085d8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80085d0:	1dfb      	adds	r3, r7, #7
 80085d2:	2201      	movs	r2, #1
 80085d4:	701a      	strb	r2, [r3, #0]
 80085d6:	e001      	b.n	80085dc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80085d8:	f7ff f8ec 	bl	80077b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80085dc:	1dfb      	adds	r3, r7, #7
 80085de:	781b      	ldrb	r3, [r3, #0]
}
 80085e0:	0018      	movs	r0, r3
 80085e2:	46bd      	mov	sp, r7
 80085e4:	b002      	add	sp, #8
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	40022000 	.word	0x40022000

080085ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80085f0:	4b05      	ldr	r3, [pc, #20]	@ (8008608 <HAL_IncTick+0x1c>)
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	001a      	movs	r2, r3
 80085f6:	4b05      	ldr	r3, [pc, #20]	@ (800860c <HAL_IncTick+0x20>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	18d2      	adds	r2, r2, r3
 80085fc:	4b03      	ldr	r3, [pc, #12]	@ (800860c <HAL_IncTick+0x20>)
 80085fe:	601a      	str	r2, [r3, #0]
}
 8008600:	46c0      	nop			@ (mov r8, r8)
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	46c0      	nop			@ (mov r8, r8)
 8008608:	2000000c 	.word	0x2000000c
 800860c:	2001115c 	.word	0x2001115c

08008610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	af00      	add	r7, sp, #0
  return uwTick;
 8008614:	4b02      	ldr	r3, [pc, #8]	@ (8008620 <HAL_GetTick+0x10>)
 8008616:	681b      	ldr	r3, [r3, #0]
}
 8008618:	0018      	movs	r0, r3
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	46c0      	nop			@ (mov r8, r8)
 8008620:	2001115c 	.word	0x2001115c

08008624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800862c:	f7ff fff0 	bl	8008610 <HAL_GetTick>
 8008630:	0003      	movs	r3, r0
 8008632:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3301      	adds	r3, #1
 800863c:	d005      	beq.n	800864a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800863e:	4b0a      	ldr	r3, [pc, #40]	@ (8008668 <HAL_Delay+0x44>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	001a      	movs	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	189b      	adds	r3, r3, r2
 8008648:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800864a:	46c0      	nop			@ (mov r8, r8)
 800864c:	f7ff ffe0 	bl	8008610 <HAL_GetTick>
 8008650:	0002      	movs	r2, r0
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	429a      	cmp	r2, r3
 800865a:	d8f7      	bhi.n	800864c <HAL_Delay+0x28>
  {
  }
}
 800865c:	46c0      	nop			@ (mov r8, r8)
 800865e:	46c0      	nop			@ (mov r8, r8)
 8008660:	46bd      	mov	sp, r7
 8008662:	b004      	add	sp, #16
 8008664:	bd80      	pop	{r7, pc}
 8008666:	46c0      	nop			@ (mov r8, r8)
 8008668:	2000000c 	.word	0x2000000c

0800866c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *         This parameter can be one of the following values:
  *         @arg @ref SYSCFG_VREFBUF_VoltageScale
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8008674:	4b06      	ldr	r3, [pc, #24]	@ (8008690 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2204      	movs	r2, #4
 800867a:	4393      	bics	r3, r2
 800867c:	0019      	movs	r1, r3
 800867e:	4b04      	ldr	r3, [pc, #16]	@ (8008690 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	430a      	orrs	r2, r1
 8008684:	601a      	str	r2, [r3, #0]
}
 8008686:	46c0      	nop			@ (mov r8, r8)
 8008688:	46bd      	mov	sp, r7
 800868a:	b002      	add	sp, #8
 800868c:	bd80      	pop	{r7, pc}
 800868e:	46c0      	nop			@ (mov r8, r8)
 8008690:	40010030 	.word	0x40010030

08008694 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800869c:	4b06      	ldr	r3, [pc, #24]	@ (80086b8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2202      	movs	r2, #2
 80086a2:	4393      	bics	r3, r2
 80086a4:	0019      	movs	r1, r3
 80086a6:	4b04      	ldr	r3, [pc, #16]	@ (80086b8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	601a      	str	r2, [r3, #0]
}
 80086ae:	46c0      	nop			@ (mov r8, r8)
 80086b0:	46bd      	mov	sp, r7
 80086b2:	b002      	add	sp, #8
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	46c0      	nop			@ (mov r8, r8)
 80086b8:	40010030 	.word	0x40010030

080086bc <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80086c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008700 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008700 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80086c8:	2101      	movs	r1, #1
 80086ca:	430a      	orrs	r2, r1
 80086cc:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80086ce:	f7ff ff9f 	bl	8008610 <HAL_GetTick>
 80086d2:	0003      	movs	r3, r0
 80086d4:	607b      	str	r3, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80086d6:	e008      	b.n	80086ea <HAL_SYSCFG_EnableVREFBUF+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80086d8:	f7ff ff9a 	bl	8008610 <HAL_GetTick>
 80086dc:	0002      	movs	r2, r0
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	2b0a      	cmp	r3, #10
 80086e4:	d901      	bls.n	80086ea <HAL_SYSCFG_EnableVREFBUF+0x2e>
    {
      return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e005      	b.n	80086f6 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80086ea:	4b05      	ldr	r3, [pc, #20]	@ (8008700 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2208      	movs	r2, #8
 80086f0:	4013      	ands	r3, r2
 80086f2:	d0f1      	beq.n	80086d8 <HAL_SYSCFG_EnableVREFBUF+0x1c>
    }
  }

  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	0018      	movs	r0, r3
 80086f8:	46bd      	mov	sp, r7
 80086fa:	b002      	add	sp, #8
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	46c0      	nop			@ (mov r8, r8)
 8008700:	40010030 	.word	0x40010030

08008704 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800870c:	4b06      	ldr	r3, [pc, #24]	@ (8008728 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a06      	ldr	r2, [pc, #24]	@ (800872c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8008712:	4013      	ands	r3, r2
 8008714:	0019      	movs	r1, r3
 8008716:	4b04      	ldr	r3, [pc, #16]	@ (8008728 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	430a      	orrs	r2, r1
 800871c:	601a      	str	r2, [r3, #0]
}
 800871e:	46c0      	nop			@ (mov r8, r8)
 8008720:	46bd      	mov	sp, r7
 8008722:	b002      	add	sp, #8
 8008724:	bd80      	pop	{r7, pc}
 8008726:	46c0      	nop			@ (mov r8, r8)
 8008728:	40010000 	.word	0x40010000
 800872c:	fffff9ff 	.word	0xfffff9ff

08008730 <__NVIC_EnableIRQ>:
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	0002      	movs	r2, r0
 8008738:	1dfb      	adds	r3, r7, #7
 800873a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800873c:	1dfb      	adds	r3, r7, #7
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	2b7f      	cmp	r3, #127	@ 0x7f
 8008742:	d809      	bhi.n	8008758 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008744:	1dfb      	adds	r3, r7, #7
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	001a      	movs	r2, r3
 800874a:	231f      	movs	r3, #31
 800874c:	401a      	ands	r2, r3
 800874e:	4b04      	ldr	r3, [pc, #16]	@ (8008760 <__NVIC_EnableIRQ+0x30>)
 8008750:	2101      	movs	r1, #1
 8008752:	4091      	lsls	r1, r2
 8008754:	000a      	movs	r2, r1
 8008756:	601a      	str	r2, [r3, #0]
}
 8008758:	46c0      	nop			@ (mov r8, r8)
 800875a:	46bd      	mov	sp, r7
 800875c:	b002      	add	sp, #8
 800875e:	bd80      	pop	{r7, pc}
 8008760:	e000e100 	.word	0xe000e100

08008764 <__NVIC_SetPriority>:
{
 8008764:	b590      	push	{r4, r7, lr}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	0002      	movs	r2, r0
 800876c:	6039      	str	r1, [r7, #0]
 800876e:	1dfb      	adds	r3, r7, #7
 8008770:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008772:	1dfb      	adds	r3, r7, #7
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	2b7f      	cmp	r3, #127	@ 0x7f
 8008778:	d828      	bhi.n	80087cc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800877a:	4a2f      	ldr	r2, [pc, #188]	@ (8008838 <__NVIC_SetPriority+0xd4>)
 800877c:	1dfb      	adds	r3, r7, #7
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	b25b      	sxtb	r3, r3
 8008782:	089b      	lsrs	r3, r3, #2
 8008784:	33c0      	adds	r3, #192	@ 0xc0
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	589b      	ldr	r3, [r3, r2]
 800878a:	1dfa      	adds	r2, r7, #7
 800878c:	7812      	ldrb	r2, [r2, #0]
 800878e:	0011      	movs	r1, r2
 8008790:	2203      	movs	r2, #3
 8008792:	400a      	ands	r2, r1
 8008794:	00d2      	lsls	r2, r2, #3
 8008796:	21ff      	movs	r1, #255	@ 0xff
 8008798:	4091      	lsls	r1, r2
 800879a:	000a      	movs	r2, r1
 800879c:	43d2      	mvns	r2, r2
 800879e:	401a      	ands	r2, r3
 80087a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	019b      	lsls	r3, r3, #6
 80087a6:	22ff      	movs	r2, #255	@ 0xff
 80087a8:	401a      	ands	r2, r3
 80087aa:	1dfb      	adds	r3, r7, #7
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	0018      	movs	r0, r3
 80087b0:	2303      	movs	r3, #3
 80087b2:	4003      	ands	r3, r0
 80087b4:	00db      	lsls	r3, r3, #3
 80087b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80087b8:	481f      	ldr	r0, [pc, #124]	@ (8008838 <__NVIC_SetPriority+0xd4>)
 80087ba:	1dfb      	adds	r3, r7, #7
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	b25b      	sxtb	r3, r3
 80087c0:	089b      	lsrs	r3, r3, #2
 80087c2:	430a      	orrs	r2, r1
 80087c4:	33c0      	adds	r3, #192	@ 0xc0
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	501a      	str	r2, [r3, r0]
}
 80087ca:	e031      	b.n	8008830 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80087cc:	4a1b      	ldr	r2, [pc, #108]	@ (800883c <__NVIC_SetPriority+0xd8>)
 80087ce:	1dfb      	adds	r3, r7, #7
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	0019      	movs	r1, r3
 80087d4:	230f      	movs	r3, #15
 80087d6:	400b      	ands	r3, r1
 80087d8:	3b08      	subs	r3, #8
 80087da:	089b      	lsrs	r3, r3, #2
 80087dc:	3306      	adds	r3, #6
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	18d3      	adds	r3, r2, r3
 80087e2:	3304      	adds	r3, #4
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	1dfa      	adds	r2, r7, #7
 80087e8:	7812      	ldrb	r2, [r2, #0]
 80087ea:	0011      	movs	r1, r2
 80087ec:	2203      	movs	r2, #3
 80087ee:	400a      	ands	r2, r1
 80087f0:	00d2      	lsls	r2, r2, #3
 80087f2:	21ff      	movs	r1, #255	@ 0xff
 80087f4:	4091      	lsls	r1, r2
 80087f6:	000a      	movs	r2, r1
 80087f8:	43d2      	mvns	r2, r2
 80087fa:	401a      	ands	r2, r3
 80087fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	019b      	lsls	r3, r3, #6
 8008802:	22ff      	movs	r2, #255	@ 0xff
 8008804:	401a      	ands	r2, r3
 8008806:	1dfb      	adds	r3, r7, #7
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	0018      	movs	r0, r3
 800880c:	2303      	movs	r3, #3
 800880e:	4003      	ands	r3, r0
 8008810:	00db      	lsls	r3, r3, #3
 8008812:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008814:	4809      	ldr	r0, [pc, #36]	@ (800883c <__NVIC_SetPriority+0xd8>)
 8008816:	1dfb      	adds	r3, r7, #7
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	001c      	movs	r4, r3
 800881c:	230f      	movs	r3, #15
 800881e:	4023      	ands	r3, r4
 8008820:	3b08      	subs	r3, #8
 8008822:	089b      	lsrs	r3, r3, #2
 8008824:	430a      	orrs	r2, r1
 8008826:	3306      	adds	r3, #6
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	18c3      	adds	r3, r0, r3
 800882c:	3304      	adds	r3, #4
 800882e:	601a      	str	r2, [r3, #0]
}
 8008830:	46c0      	nop			@ (mov r8, r8)
 8008832:	46bd      	mov	sp, r7
 8008834:	b003      	add	sp, #12
 8008836:	bd90      	pop	{r4, r7, pc}
 8008838:	e000e100 	.word	0xe000e100
 800883c:	e000ed00 	.word	0xe000ed00

08008840 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	60b9      	str	r1, [r7, #8]
 8008848:	607a      	str	r2, [r7, #4]
 800884a:	210f      	movs	r1, #15
 800884c:	187b      	adds	r3, r7, r1
 800884e:	1c02      	adds	r2, r0, #0
 8008850:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	187b      	adds	r3, r7, r1
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	b25b      	sxtb	r3, r3
 800885a:	0011      	movs	r1, r2
 800885c:	0018      	movs	r0, r3
 800885e:	f7ff ff81 	bl	8008764 <__NVIC_SetPriority>
}
 8008862:	46c0      	nop			@ (mov r8, r8)
 8008864:	46bd      	mov	sp, r7
 8008866:	b004      	add	sp, #16
 8008868:	bd80      	pop	{r7, pc}

0800886a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	0002      	movs	r2, r0
 8008872:	1dfb      	adds	r3, r7, #7
 8008874:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008876:	1dfb      	adds	r3, r7, #7
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	b25b      	sxtb	r3, r3
 800887c:	0018      	movs	r0, r3
 800887e:	f7ff ff57 	bl	8008730 <__NVIC_EnableIRQ>
}
 8008882:	46c0      	nop			@ (mov r8, r8)
 8008884:	46bd      	mov	sp, r7
 8008886:	b002      	add	sp, #8
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008896:	2300      	movs	r3, #0
 8008898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800889a:	e14d      	b.n	8008b38 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2101      	movs	r1, #1
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	4091      	lsls	r1, r2
 80088a6:	000a      	movs	r2, r1
 80088a8:	4013      	ands	r3, r2
 80088aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d100      	bne.n	80088b4 <HAL_GPIO_Init+0x28>
 80088b2:	e13e      	b.n	8008b32 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	2203      	movs	r2, #3
 80088ba:	4013      	ands	r3, r2
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d005      	beq.n	80088cc <HAL_GPIO_Init+0x40>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	2203      	movs	r2, #3
 80088c6:	4013      	ands	r3, r2
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d130      	bne.n	800892e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	2203      	movs	r2, #3
 80088d8:	409a      	lsls	r2, r3
 80088da:	0013      	movs	r3, r2
 80088dc:	43da      	mvns	r2, r3
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	4013      	ands	r3, r2
 80088e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	005b      	lsls	r3, r3, #1
 80088ec:	409a      	lsls	r2, r3
 80088ee:	0013      	movs	r3, r2
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008902:	2201      	movs	r2, #1
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	409a      	lsls	r2, r3
 8008908:	0013      	movs	r3, r2
 800890a:	43da      	mvns	r2, r3
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	4013      	ands	r3, r2
 8008910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	091b      	lsrs	r3, r3, #4
 8008918:	2201      	movs	r2, #1
 800891a:	401a      	ands	r2, r3
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	409a      	lsls	r2, r3
 8008920:	0013      	movs	r3, r2
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	4313      	orrs	r3, r2
 8008926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	2203      	movs	r2, #3
 8008934:	4013      	ands	r3, r2
 8008936:	2b03      	cmp	r3, #3
 8008938:	d017      	beq.n	800896a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	2203      	movs	r2, #3
 8008946:	409a      	lsls	r2, r3
 8008948:	0013      	movs	r3, r2
 800894a:	43da      	mvns	r2, r3
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	4013      	ands	r3, r2
 8008950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	689a      	ldr	r2, [r3, #8]
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	409a      	lsls	r2, r3
 800895c:	0013      	movs	r3, r2
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	4313      	orrs	r3, r2
 8008962:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	2203      	movs	r2, #3
 8008970:	4013      	ands	r3, r2
 8008972:	2b02      	cmp	r3, #2
 8008974:	d123      	bne.n	80089be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	08da      	lsrs	r2, r3, #3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	3208      	adds	r2, #8
 800897e:	0092      	lsls	r2, r2, #2
 8008980:	58d3      	ldr	r3, [r2, r3]
 8008982:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	2207      	movs	r2, #7
 8008988:	4013      	ands	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	220f      	movs	r2, #15
 800898e:	409a      	lsls	r2, r3
 8008990:	0013      	movs	r3, r2
 8008992:	43da      	mvns	r2, r3
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	4013      	ands	r3, r2
 8008998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	691a      	ldr	r2, [r3, #16]
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2107      	movs	r1, #7
 80089a2:	400b      	ands	r3, r1
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	409a      	lsls	r2, r3
 80089a8:	0013      	movs	r3, r2
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	08da      	lsrs	r2, r3, #3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	3208      	adds	r2, #8
 80089b8:	0092      	lsls	r2, r2, #2
 80089ba:	6939      	ldr	r1, [r7, #16]
 80089bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	005b      	lsls	r3, r3, #1
 80089c8:	2203      	movs	r2, #3
 80089ca:	409a      	lsls	r2, r3
 80089cc:	0013      	movs	r3, r2
 80089ce:	43da      	mvns	r2, r3
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	4013      	ands	r3, r2
 80089d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	2203      	movs	r2, #3
 80089dc:	401a      	ands	r2, r3
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	409a      	lsls	r2, r3
 80089e4:	0013      	movs	r3, r2
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	23c0      	movs	r3, #192	@ 0xc0
 80089f8:	029b      	lsls	r3, r3, #10
 80089fa:	4013      	ands	r3, r2
 80089fc:	d100      	bne.n	8008a00 <HAL_GPIO_Init+0x174>
 80089fe:	e098      	b.n	8008b32 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008a00:	4a53      	ldr	r2, [pc, #332]	@ (8008b50 <HAL_GPIO_Init+0x2c4>)
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	089b      	lsrs	r3, r3, #2
 8008a06:	3318      	adds	r3, #24
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	589b      	ldr	r3, [r3, r2]
 8008a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2203      	movs	r2, #3
 8008a12:	4013      	ands	r3, r2
 8008a14:	00db      	lsls	r3, r3, #3
 8008a16:	220f      	movs	r2, #15
 8008a18:	409a      	lsls	r2, r3
 8008a1a:	0013      	movs	r3, r2
 8008a1c:	43da      	mvns	r2, r3
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	4013      	ands	r3, r2
 8008a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	23a0      	movs	r3, #160	@ 0xa0
 8008a28:	05db      	lsls	r3, r3, #23
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d019      	beq.n	8008a62 <HAL_GPIO_Init+0x1d6>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a48      	ldr	r2, [pc, #288]	@ (8008b54 <HAL_GPIO_Init+0x2c8>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d013      	beq.n	8008a5e <HAL_GPIO_Init+0x1d2>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a47      	ldr	r2, [pc, #284]	@ (8008b58 <HAL_GPIO_Init+0x2cc>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d00d      	beq.n	8008a5a <HAL_GPIO_Init+0x1ce>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a46      	ldr	r2, [pc, #280]	@ (8008b5c <HAL_GPIO_Init+0x2d0>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d007      	beq.n	8008a56 <HAL_GPIO_Init+0x1ca>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a45      	ldr	r2, [pc, #276]	@ (8008b60 <HAL_GPIO_Init+0x2d4>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d101      	bne.n	8008a52 <HAL_GPIO_Init+0x1c6>
 8008a4e:	2304      	movs	r3, #4
 8008a50:	e008      	b.n	8008a64 <HAL_GPIO_Init+0x1d8>
 8008a52:	2305      	movs	r3, #5
 8008a54:	e006      	b.n	8008a64 <HAL_GPIO_Init+0x1d8>
 8008a56:	2303      	movs	r3, #3
 8008a58:	e004      	b.n	8008a64 <HAL_GPIO_Init+0x1d8>
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	e002      	b.n	8008a64 <HAL_GPIO_Init+0x1d8>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e000      	b.n	8008a64 <HAL_GPIO_Init+0x1d8>
 8008a62:	2300      	movs	r3, #0
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	2103      	movs	r1, #3
 8008a68:	400a      	ands	r2, r1
 8008a6a:	00d2      	lsls	r2, r2, #3
 8008a6c:	4093      	lsls	r3, r2
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008a74:	4936      	ldr	r1, [pc, #216]	@ (8008b50 <HAL_GPIO_Init+0x2c4>)
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	089b      	lsrs	r3, r3, #2
 8008a7a:	3318      	adds	r3, #24
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008a82:	4b33      	ldr	r3, [pc, #204]	@ (8008b50 <HAL_GPIO_Init+0x2c4>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	43da      	mvns	r2, r3
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	2380      	movs	r3, #128	@ 0x80
 8008a98:	035b      	lsls	r3, r3, #13
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	d003      	beq.n	8008aa6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8008b50 <HAL_GPIO_Init+0x2c4>)
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008aac:	4b28      	ldr	r3, [pc, #160]	@ (8008b50 <HAL_GPIO_Init+0x2c4>)
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	43da      	mvns	r2, r3
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	4013      	ands	r3, r2
 8008aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	2380      	movs	r3, #128	@ 0x80
 8008ac2:	039b      	lsls	r3, r3, #14
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	d003      	beq.n	8008ad0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8008b50 <HAL_GPIO_Init+0x2c4>)
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8008b50 <HAL_GPIO_Init+0x2c4>)
 8008ad8:	2384      	movs	r3, #132	@ 0x84
 8008ada:	58d3      	ldr	r3, [r2, r3]
 8008adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	43da      	mvns	r2, r3
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	2380      	movs	r3, #128	@ 0x80
 8008aee:	029b      	lsls	r3, r3, #10
 8008af0:	4013      	ands	r3, r2
 8008af2:	d003      	beq.n	8008afc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008afc:	4914      	ldr	r1, [pc, #80]	@ (8008b50 <HAL_GPIO_Init+0x2c4>)
 8008afe:	2284      	movs	r2, #132	@ 0x84
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008b04:	4a12      	ldr	r2, [pc, #72]	@ (8008b50 <HAL_GPIO_Init+0x2c4>)
 8008b06:	2380      	movs	r3, #128	@ 0x80
 8008b08:	58d3      	ldr	r3, [r2, r3]
 8008b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	43da      	mvns	r2, r3
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	4013      	ands	r3, r2
 8008b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	2380      	movs	r3, #128	@ 0x80
 8008b1c:	025b      	lsls	r3, r3, #9
 8008b1e:	4013      	ands	r3, r2
 8008b20:	d003      	beq.n	8008b2a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008b2a:	4909      	ldr	r1, [pc, #36]	@ (8008b50 <HAL_GPIO_Init+0x2c4>)
 8008b2c:	2280      	movs	r2, #128	@ 0x80
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	3301      	adds	r3, #1
 8008b36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	40da      	lsrs	r2, r3
 8008b40:	1e13      	subs	r3, r2, #0
 8008b42:	d000      	beq.n	8008b46 <HAL_GPIO_Init+0x2ba>
 8008b44:	e6aa      	b.n	800889c <HAL_GPIO_Init+0x10>
  }
}
 8008b46:	46c0      	nop			@ (mov r8, r8)
 8008b48:	46c0      	nop			@ (mov r8, r8)
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	b006      	add	sp, #24
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	40021800 	.word	0x40021800
 8008b54:	50000400 	.word	0x50000400
 8008b58:	50000800 	.word	0x50000800
 8008b5c:	50000c00 	.word	0x50000c00
 8008b60:	50001000 	.word	0x50001000

08008b64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	000a      	movs	r2, r1
 8008b6e:	1cbb      	adds	r3, r7, #2
 8008b70:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	1cba      	adds	r2, r7, #2
 8008b78:	8812      	ldrh	r2, [r2, #0]
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	d004      	beq.n	8008b88 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8008b7e:	230f      	movs	r3, #15
 8008b80:	18fb      	adds	r3, r7, r3
 8008b82:	2201      	movs	r2, #1
 8008b84:	701a      	strb	r2, [r3, #0]
 8008b86:	e003      	b.n	8008b90 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008b88:	230f      	movs	r3, #15
 8008b8a:	18fb      	adds	r3, r7, r3
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008b90:	230f      	movs	r3, #15
 8008b92:	18fb      	adds	r3, r7, r3
 8008b94:	781b      	ldrb	r3, [r3, #0]
}
 8008b96:	0018      	movs	r0, r3
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	b004      	add	sp, #16
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	0008      	movs	r0, r1
 8008ba8:	0011      	movs	r1, r2
 8008baa:	1cbb      	adds	r3, r7, #2
 8008bac:	1c02      	adds	r2, r0, #0
 8008bae:	801a      	strh	r2, [r3, #0]
 8008bb0:	1c7b      	adds	r3, r7, #1
 8008bb2:	1c0a      	adds	r2, r1, #0
 8008bb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008bb6:	1c7b      	adds	r3, r7, #1
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d004      	beq.n	8008bc8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008bbe:	1cbb      	adds	r3, r7, #2
 8008bc0:	881a      	ldrh	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008bc6:	e003      	b.n	8008bd0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008bc8:	1cbb      	adds	r3, r7, #2
 8008bca:	881a      	ldrh	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008bd0:	46c0      	nop			@ (mov r8, r8)
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	b002      	add	sp, #8
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e08f      	b.n	8008d0a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2241      	movs	r2, #65	@ 0x41
 8008bee:	5c9b      	ldrb	r3, [r3, r2]
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d107      	bne.n	8008c06 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2240      	movs	r2, #64	@ 0x40
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	0018      	movs	r0, r3
 8008c02:	f7fe fcaf 	bl	8007564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2241      	movs	r2, #65	@ 0x41
 8008c0a:	2124      	movs	r1, #36	@ 0x24
 8008c0c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2101      	movs	r1, #1
 8008c1a:	438a      	bics	r2, r1
 8008c1c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	493b      	ldr	r1, [pc, #236]	@ (8008d14 <HAL_I2C_Init+0x13c>)
 8008c28:	400a      	ands	r2, r1
 8008c2a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4938      	ldr	r1, [pc, #224]	@ (8008d18 <HAL_I2C_Init+0x140>)
 8008c38:	400a      	ands	r2, r1
 8008c3a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d108      	bne.n	8008c56 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2180      	movs	r1, #128	@ 0x80
 8008c4e:	0209      	lsls	r1, r1, #8
 8008c50:	430a      	orrs	r2, r1
 8008c52:	609a      	str	r2, [r3, #8]
 8008c54:	e007      	b.n	8008c66 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689a      	ldr	r2, [r3, #8]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2184      	movs	r1, #132	@ 0x84
 8008c60:	0209      	lsls	r1, r1, #8
 8008c62:	430a      	orrs	r2, r1
 8008c64:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d109      	bne.n	8008c82 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2180      	movs	r1, #128	@ 0x80
 8008c7a:	0109      	lsls	r1, r1, #4
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	605a      	str	r2, [r3, #4]
 8008c80:	e007      	b.n	8008c92 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4923      	ldr	r1, [pc, #140]	@ (8008d1c <HAL_I2C_Init+0x144>)
 8008c8e:	400a      	ands	r2, r1
 8008c90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4920      	ldr	r1, [pc, #128]	@ (8008d20 <HAL_I2C_Init+0x148>)
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68da      	ldr	r2, [r3, #12]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	491a      	ldr	r1, [pc, #104]	@ (8008d18 <HAL_I2C_Init+0x140>)
 8008cae:	400a      	ands	r2, r1
 8008cb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	691a      	ldr	r2, [r3, #16]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	69d9      	ldr	r1, [r3, #28]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a1a      	ldr	r2, [r3, #32]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2241      	movs	r2, #65	@ 0x41
 8008cf6:	2120      	movs	r1, #32
 8008cf8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2242      	movs	r2, #66	@ 0x42
 8008d04:	2100      	movs	r1, #0
 8008d06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	0018      	movs	r0, r3
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	b002      	add	sp, #8
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	46c0      	nop			@ (mov r8, r8)
 8008d14:	f0ffffff 	.word	0xf0ffffff
 8008d18:	ffff7fff 	.word	0xffff7fff
 8008d1c:	fffff7ff 	.word	0xfffff7ff
 8008d20:	02008000 	.word	0x02008000

08008d24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008d24:	b590      	push	{r4, r7, lr}
 8008d26:	b089      	sub	sp, #36	@ 0x24
 8008d28:	af02      	add	r7, sp, #8
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	0008      	movs	r0, r1
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	0019      	movs	r1, r3
 8008d32:	230a      	movs	r3, #10
 8008d34:	18fb      	adds	r3, r7, r3
 8008d36:	1c02      	adds	r2, r0, #0
 8008d38:	801a      	strh	r2, [r3, #0]
 8008d3a:	2308      	movs	r3, #8
 8008d3c:	18fb      	adds	r3, r7, r3
 8008d3e:	1c0a      	adds	r2, r1, #0
 8008d40:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2241      	movs	r2, #65	@ 0x41
 8008d46:	5c9b      	ldrb	r3, [r3, r2]
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b20      	cmp	r3, #32
 8008d4c:	d000      	beq.n	8008d50 <HAL_I2C_Master_Transmit+0x2c>
 8008d4e:	e10a      	b.n	8008f66 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2240      	movs	r2, #64	@ 0x40
 8008d54:	5c9b      	ldrb	r3, [r3, r2]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d101      	bne.n	8008d5e <HAL_I2C_Master_Transmit+0x3a>
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e104      	b.n	8008f68 <HAL_I2C_Master_Transmit+0x244>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2240      	movs	r2, #64	@ 0x40
 8008d62:	2101      	movs	r1, #1
 8008d64:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008d66:	f7ff fc53 	bl	8008610 <HAL_GetTick>
 8008d6a:	0003      	movs	r3, r0
 8008d6c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008d6e:	2380      	movs	r3, #128	@ 0x80
 8008d70:	0219      	lsls	r1, r3, #8
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	2319      	movs	r3, #25
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f000 f91e 	bl	8008fbc <I2C_WaitOnFlagUntilTimeout>
 8008d80:	1e03      	subs	r3, r0, #0
 8008d82:	d001      	beq.n	8008d88 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e0ef      	b.n	8008f68 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2241      	movs	r2, #65	@ 0x41
 8008d8c:	2121      	movs	r1, #33	@ 0x21
 8008d8e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2242      	movs	r2, #66	@ 0x42
 8008d94:	2110      	movs	r1, #16
 8008d96:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2208      	movs	r2, #8
 8008da8:	18ba      	adds	r2, r7, r2
 8008daa:	8812      	ldrh	r2, [r2, #0]
 8008dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	2bff      	cmp	r3, #255	@ 0xff
 8008dbc:	d906      	bls.n	8008dcc <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	22ff      	movs	r2, #255	@ 0xff
 8008dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008dc4:	2380      	movs	r3, #128	@ 0x80
 8008dc6:	045b      	lsls	r3, r3, #17
 8008dc8:	617b      	str	r3, [r7, #20]
 8008dca:	e007      	b.n	8008ddc <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008dd6:	2380      	movs	r3, #128	@ 0x80
 8008dd8:	049b      	lsls	r3, r3, #18
 8008dda:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d027      	beq.n	8008e34 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de8:	781a      	ldrb	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df4:	1c5a      	adds	r2, r3, #1
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	3b01      	subs	r3, #1
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	697c      	ldr	r4, [r7, #20]
 8008e20:	230a      	movs	r3, #10
 8008e22:	18fb      	adds	r3, r7, r3
 8008e24:	8819      	ldrh	r1, [r3, #0]
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	4b51      	ldr	r3, [pc, #324]	@ (8008f70 <HAL_I2C_Master_Transmit+0x24c>)
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	0023      	movs	r3, r4
 8008e2e:	f000 fa9f 	bl	8009370 <I2C_TransferConfig>
 8008e32:	e06f      	b.n	8008f14 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	697c      	ldr	r4, [r7, #20]
 8008e3c:	230a      	movs	r3, #10
 8008e3e:	18fb      	adds	r3, r7, r3
 8008e40:	8819      	ldrh	r1, [r3, #0]
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	4b4a      	ldr	r3, [pc, #296]	@ (8008f70 <HAL_I2C_Master_Transmit+0x24c>)
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	0023      	movs	r3, r4
 8008e4a:	f000 fa91 	bl	8009370 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008e4e:	e061      	b.n	8008f14 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	0018      	movs	r0, r3
 8008e58:	f000 f908 	bl	800906c <I2C_WaitOnTXISFlagUntilTimeout>
 8008e5c:	1e03      	subs	r3, r0, #0
 8008e5e:	d001      	beq.n	8008e64 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e081      	b.n	8008f68 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e68:	781a      	ldrb	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	3b01      	subs	r3, #1
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d03a      	beq.n	8008f14 <HAL_I2C_Master_Transmit+0x1f0>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d136      	bne.n	8008f14 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008ea6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	0013      	movs	r3, r2
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2180      	movs	r1, #128	@ 0x80
 8008eb4:	f000 f882 	bl	8008fbc <I2C_WaitOnFlagUntilTimeout>
 8008eb8:	1e03      	subs	r3, r0, #0
 8008eba:	d001      	beq.n	8008ec0 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e053      	b.n	8008f68 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	2bff      	cmp	r3, #255	@ 0xff
 8008ec8:	d911      	bls.n	8008eee <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	22ff      	movs	r2, #255	@ 0xff
 8008ece:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	2380      	movs	r3, #128	@ 0x80
 8008ed8:	045c      	lsls	r4, r3, #17
 8008eda:	230a      	movs	r3, #10
 8008edc:	18fb      	adds	r3, r7, r3
 8008ede:	8819      	ldrh	r1, [r3, #0]
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	0023      	movs	r3, r4
 8008ee8:	f000 fa42 	bl	8009370 <I2C_TransferConfig>
 8008eec:	e012      	b.n	8008f14 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	2380      	movs	r3, #128	@ 0x80
 8008f00:	049c      	lsls	r4, r3, #18
 8008f02:	230a      	movs	r3, #10
 8008f04:	18fb      	adds	r3, r7, r3
 8008f06:	8819      	ldrh	r1, [r3, #0]
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	0023      	movs	r3, r4
 8008f10:	f000 fa2e 	bl	8009370 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d198      	bne.n	8008e50 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	0018      	movs	r0, r3
 8008f26:	f000 f8e7 	bl	80090f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f2a:	1e03      	subs	r3, r0, #0
 8008f2c:	d001      	beq.n	8008f32 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e01a      	b.n	8008f68 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2220      	movs	r2, #32
 8008f38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	490b      	ldr	r1, [pc, #44]	@ (8008f74 <HAL_I2C_Master_Transmit+0x250>)
 8008f46:	400a      	ands	r2, r1
 8008f48:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2241      	movs	r2, #65	@ 0x41
 8008f4e:	2120      	movs	r1, #32
 8008f50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2242      	movs	r2, #66	@ 0x42
 8008f56:	2100      	movs	r1, #0
 8008f58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2240      	movs	r2, #64	@ 0x40
 8008f5e:	2100      	movs	r1, #0
 8008f60:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	e000      	b.n	8008f68 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8008f66:	2302      	movs	r3, #2
  }
}
 8008f68:	0018      	movs	r0, r3
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	b007      	add	sp, #28
 8008f6e:	bd90      	pop	{r4, r7, pc}
 8008f70:	80002000 	.word	0x80002000
 8008f74:	fe00e800 	.word	0xfe00e800

08008f78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	2202      	movs	r2, #2
 8008f88:	4013      	ands	r3, r2
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d103      	bne.n	8008f96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2200      	movs	r2, #0
 8008f94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d007      	beq.n	8008fb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	699a      	ldr	r2, [r3, #24]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2101      	movs	r1, #1
 8008fb0:	430a      	orrs	r2, r1
 8008fb2:	619a      	str	r2, [r3, #24]
  }
}
 8008fb4:	46c0      	nop			@ (mov r8, r8)
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	b002      	add	sp, #8
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	1dfb      	adds	r3, r7, #7
 8008fca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fcc:	e03a      	b.n	8009044 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fce:	69ba      	ldr	r2, [r7, #24]
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	f000 f8d3 	bl	8009180 <I2C_IsErrorOccurred>
 8008fda:	1e03      	subs	r3, r0, #0
 8008fdc:	d001      	beq.n	8008fe2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e040      	b.n	8009064 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	d02d      	beq.n	8009044 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fe8:	f7ff fb12 	bl	8008610 <HAL_GetTick>
 8008fec:	0002      	movs	r2, r0
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d302      	bcc.n	8008ffe <I2C_WaitOnFlagUntilTimeout+0x42>
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d122      	bne.n	8009044 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	4013      	ands	r3, r2
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	425a      	negs	r2, r3
 800900e:	4153      	adcs	r3, r2
 8009010:	b2db      	uxtb	r3, r3
 8009012:	001a      	movs	r2, r3
 8009014:	1dfb      	adds	r3, r7, #7
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	429a      	cmp	r2, r3
 800901a:	d113      	bne.n	8009044 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009020:	2220      	movs	r2, #32
 8009022:	431a      	orrs	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2241      	movs	r2, #65	@ 0x41
 800902c:	2120      	movs	r1, #32
 800902e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2242      	movs	r2, #66	@ 0x42
 8009034:	2100      	movs	r1, #0
 8009036:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2240      	movs	r2, #64	@ 0x40
 800903c:	2100      	movs	r1, #0
 800903e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e00f      	b.n	8009064 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	4013      	ands	r3, r2
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	425a      	negs	r2, r3
 8009054:	4153      	adcs	r3, r2
 8009056:	b2db      	uxtb	r3, r3
 8009058:	001a      	movs	r2, r3
 800905a:	1dfb      	adds	r3, r7, #7
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	429a      	cmp	r2, r3
 8009060:	d0b5      	beq.n	8008fce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	0018      	movs	r0, r3
 8009066:	46bd      	mov	sp, r7
 8009068:	b004      	add	sp, #16
 800906a:	bd80      	pop	{r7, pc}

0800906c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009078:	e032      	b.n	80090e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	68b9      	ldr	r1, [r7, #8]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	0018      	movs	r0, r3
 8009082:	f000 f87d 	bl	8009180 <I2C_IsErrorOccurred>
 8009086:	1e03      	subs	r3, r0, #0
 8009088:	d001      	beq.n	800908e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e030      	b.n	80090f0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	3301      	adds	r3, #1
 8009092:	d025      	beq.n	80090e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009094:	f7ff fabc 	bl	8008610 <HAL_GetTick>
 8009098:	0002      	movs	r2, r0
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d302      	bcc.n	80090aa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d11a      	bne.n	80090e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	2202      	movs	r2, #2
 80090b2:	4013      	ands	r3, r2
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d013      	beq.n	80090e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090bc:	2220      	movs	r2, #32
 80090be:	431a      	orrs	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2241      	movs	r2, #65	@ 0x41
 80090c8:	2120      	movs	r1, #32
 80090ca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2242      	movs	r2, #66	@ 0x42
 80090d0:	2100      	movs	r1, #0
 80090d2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2240      	movs	r2, #64	@ 0x40
 80090d8:	2100      	movs	r1, #0
 80090da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e007      	b.n	80090f0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	2202      	movs	r2, #2
 80090e8:	4013      	ands	r3, r2
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d1c5      	bne.n	800907a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	0018      	movs	r0, r3
 80090f2:	46bd      	mov	sp, r7
 80090f4:	b004      	add	sp, #16
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009104:	e02f      	b.n	8009166 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	68b9      	ldr	r1, [r7, #8]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	0018      	movs	r0, r3
 800910e:	f000 f837 	bl	8009180 <I2C_IsErrorOccurred>
 8009112:	1e03      	subs	r3, r0, #0
 8009114:	d001      	beq.n	800911a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e02d      	b.n	8009176 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800911a:	f7ff fa79 	bl	8008610 <HAL_GetTick>
 800911e:	0002      	movs	r2, r0
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	429a      	cmp	r2, r3
 8009128:	d302      	bcc.n	8009130 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d11a      	bne.n	8009166 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	2220      	movs	r2, #32
 8009138:	4013      	ands	r3, r2
 800913a:	2b20      	cmp	r3, #32
 800913c:	d013      	beq.n	8009166 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009142:	2220      	movs	r2, #32
 8009144:	431a      	orrs	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2241      	movs	r2, #65	@ 0x41
 800914e:	2120      	movs	r1, #32
 8009150:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2242      	movs	r2, #66	@ 0x42
 8009156:	2100      	movs	r1, #0
 8009158:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2240      	movs	r2, #64	@ 0x40
 800915e:	2100      	movs	r1, #0
 8009160:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e007      	b.n	8009176 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	2220      	movs	r2, #32
 800916e:	4013      	ands	r3, r2
 8009170:	2b20      	cmp	r3, #32
 8009172:	d1c8      	bne.n	8009106 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	0018      	movs	r0, r3
 8009178:	46bd      	mov	sp, r7
 800917a:	b004      	add	sp, #16
 800917c:	bd80      	pop	{r7, pc}
	...

08009180 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08a      	sub	sp, #40	@ 0x28
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800918c:	2327      	movs	r3, #39	@ 0x27
 800918e:	18fb      	adds	r3, r7, r3
 8009190:	2200      	movs	r2, #0
 8009192:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800919c:	2300      	movs	r3, #0
 800919e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	2210      	movs	r2, #16
 80091a8:	4013      	ands	r3, r2
 80091aa:	d100      	bne.n	80091ae <I2C_IsErrorOccurred+0x2e>
 80091ac:	e079      	b.n	80092a2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2210      	movs	r2, #16
 80091b4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80091b6:	e057      	b.n	8009268 <I2C_IsErrorOccurred+0xe8>
 80091b8:	2227      	movs	r2, #39	@ 0x27
 80091ba:	18bb      	adds	r3, r7, r2
 80091bc:	18ba      	adds	r2, r7, r2
 80091be:	7812      	ldrb	r2, [r2, #0]
 80091c0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	3301      	adds	r3, #1
 80091c6:	d04f      	beq.n	8009268 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80091c8:	f7ff fa22 	bl	8008610 <HAL_GetTick>
 80091cc:	0002      	movs	r2, r0
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d302      	bcc.n	80091de <I2C_IsErrorOccurred+0x5e>
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d144      	bne.n	8009268 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	2380      	movs	r3, #128	@ 0x80
 80091e6:	01db      	lsls	r3, r3, #7
 80091e8:	4013      	ands	r3, r2
 80091ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80091ec:	2013      	movs	r0, #19
 80091ee:	183b      	adds	r3, r7, r0
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	2142      	movs	r1, #66	@ 0x42
 80091f4:	5c52      	ldrb	r2, [r2, r1]
 80091f6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	699a      	ldr	r2, [r3, #24]
 80091fe:	2380      	movs	r3, #128	@ 0x80
 8009200:	021b      	lsls	r3, r3, #8
 8009202:	401a      	ands	r2, r3
 8009204:	2380      	movs	r3, #128	@ 0x80
 8009206:	021b      	lsls	r3, r3, #8
 8009208:	429a      	cmp	r2, r3
 800920a:	d126      	bne.n	800925a <I2C_IsErrorOccurred+0xda>
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	2380      	movs	r3, #128	@ 0x80
 8009210:	01db      	lsls	r3, r3, #7
 8009212:	429a      	cmp	r2, r3
 8009214:	d021      	beq.n	800925a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8009216:	183b      	adds	r3, r7, r0
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	2b20      	cmp	r3, #32
 800921c:	d01d      	beq.n	800925a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2180      	movs	r1, #128	@ 0x80
 800922a:	01c9      	lsls	r1, r1, #7
 800922c:	430a      	orrs	r2, r1
 800922e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009230:	f7ff f9ee 	bl	8008610 <HAL_GetTick>
 8009234:	0003      	movs	r3, r0
 8009236:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009238:	e00f      	b.n	800925a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800923a:	f7ff f9e9 	bl	8008610 <HAL_GetTick>
 800923e:	0002      	movs	r2, r0
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	2b19      	cmp	r3, #25
 8009246:	d908      	bls.n	800925a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	2220      	movs	r2, #32
 800924c:	4313      	orrs	r3, r2
 800924e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009250:	2327      	movs	r3, #39	@ 0x27
 8009252:	18fb      	adds	r3, r7, r3
 8009254:	2201      	movs	r2, #1
 8009256:	701a      	strb	r2, [r3, #0]

              break;
 8009258:	e006      	b.n	8009268 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	2220      	movs	r2, #32
 8009262:	4013      	ands	r3, r2
 8009264:	2b20      	cmp	r3, #32
 8009266:	d1e8      	bne.n	800923a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	2220      	movs	r2, #32
 8009270:	4013      	ands	r3, r2
 8009272:	2b20      	cmp	r3, #32
 8009274:	d004      	beq.n	8009280 <I2C_IsErrorOccurred+0x100>
 8009276:	2327      	movs	r3, #39	@ 0x27
 8009278:	18fb      	adds	r3, r7, r3
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d09b      	beq.n	80091b8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009280:	2327      	movs	r3, #39	@ 0x27
 8009282:	18fb      	adds	r3, r7, r3
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d103      	bne.n	8009292 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2220      	movs	r2, #32
 8009290:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009292:	6a3b      	ldr	r3, [r7, #32]
 8009294:	2204      	movs	r2, #4
 8009296:	4313      	orrs	r3, r2
 8009298:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800929a:	2327      	movs	r3, #39	@ 0x27
 800929c:	18fb      	adds	r3, r7, r3
 800929e:	2201      	movs	r2, #1
 80092a0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80092aa:	69ba      	ldr	r2, [r7, #24]
 80092ac:	2380      	movs	r3, #128	@ 0x80
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	4013      	ands	r3, r2
 80092b2:	d00c      	beq.n	80092ce <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	2201      	movs	r2, #1
 80092b8:	4313      	orrs	r3, r2
 80092ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2280      	movs	r2, #128	@ 0x80
 80092c2:	0052      	lsls	r2, r2, #1
 80092c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80092c6:	2327      	movs	r3, #39	@ 0x27
 80092c8:	18fb      	adds	r3, r7, r3
 80092ca:	2201      	movs	r2, #1
 80092cc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80092ce:	69ba      	ldr	r2, [r7, #24]
 80092d0:	2380      	movs	r3, #128	@ 0x80
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	4013      	ands	r3, r2
 80092d6:	d00c      	beq.n	80092f2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80092d8:	6a3b      	ldr	r3, [r7, #32]
 80092da:	2208      	movs	r2, #8
 80092dc:	4313      	orrs	r3, r2
 80092de:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2280      	movs	r2, #128	@ 0x80
 80092e6:	00d2      	lsls	r2, r2, #3
 80092e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80092ea:	2327      	movs	r3, #39	@ 0x27
 80092ec:	18fb      	adds	r3, r7, r3
 80092ee:	2201      	movs	r2, #1
 80092f0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	2380      	movs	r3, #128	@ 0x80
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4013      	ands	r3, r2
 80092fa:	d00c      	beq.n	8009316 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	2202      	movs	r2, #2
 8009300:	4313      	orrs	r3, r2
 8009302:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2280      	movs	r2, #128	@ 0x80
 800930a:	0092      	lsls	r2, r2, #2
 800930c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800930e:	2327      	movs	r3, #39	@ 0x27
 8009310:	18fb      	adds	r3, r7, r3
 8009312:	2201      	movs	r2, #1
 8009314:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8009316:	2327      	movs	r3, #39	@ 0x27
 8009318:	18fb      	adds	r3, r7, r3
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01d      	beq.n	800935c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	0018      	movs	r0, r3
 8009324:	f7ff fe28 	bl	8008f78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	490e      	ldr	r1, [pc, #56]	@ (800936c <I2C_IsErrorOccurred+0x1ec>)
 8009334:	400a      	ands	r2, r1
 8009336:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	431a      	orrs	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2241      	movs	r2, #65	@ 0x41
 8009348:	2120      	movs	r1, #32
 800934a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2242      	movs	r2, #66	@ 0x42
 8009350:	2100      	movs	r1, #0
 8009352:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2240      	movs	r2, #64	@ 0x40
 8009358:	2100      	movs	r1, #0
 800935a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800935c:	2327      	movs	r3, #39	@ 0x27
 800935e:	18fb      	adds	r3, r7, r3
 8009360:	781b      	ldrb	r3, [r3, #0]
}
 8009362:	0018      	movs	r0, r3
 8009364:	46bd      	mov	sp, r7
 8009366:	b00a      	add	sp, #40	@ 0x28
 8009368:	bd80      	pop	{r7, pc}
 800936a:	46c0      	nop			@ (mov r8, r8)
 800936c:	fe00e800 	.word	0xfe00e800

08009370 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009370:	b590      	push	{r4, r7, lr}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	0008      	movs	r0, r1
 800937a:	0011      	movs	r1, r2
 800937c:	607b      	str	r3, [r7, #4]
 800937e:	240a      	movs	r4, #10
 8009380:	193b      	adds	r3, r7, r4
 8009382:	1c02      	adds	r2, r0, #0
 8009384:	801a      	strh	r2, [r3, #0]
 8009386:	2009      	movs	r0, #9
 8009388:	183b      	adds	r3, r7, r0
 800938a:	1c0a      	adds	r2, r1, #0
 800938c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800938e:	193b      	adds	r3, r7, r4
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	059b      	lsls	r3, r3, #22
 8009394:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009396:	183b      	adds	r3, r7, r0
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	0419      	lsls	r1, r3, #16
 800939c:	23ff      	movs	r3, #255	@ 0xff
 800939e:	041b      	lsls	r3, r3, #16
 80093a0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093a2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093aa:	4313      	orrs	r3, r2
 80093ac:	005b      	lsls	r3, r3, #1
 80093ae:	085b      	lsrs	r3, r3, #1
 80093b0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093ba:	0d51      	lsrs	r1, r2, #21
 80093bc:	2280      	movs	r2, #128	@ 0x80
 80093be:	00d2      	lsls	r2, r2, #3
 80093c0:	400a      	ands	r2, r1
 80093c2:	4907      	ldr	r1, [pc, #28]	@ (80093e0 <I2C_TransferConfig+0x70>)
 80093c4:	430a      	orrs	r2, r1
 80093c6:	43d2      	mvns	r2, r2
 80093c8:	401a      	ands	r2, r3
 80093ca:	0011      	movs	r1, r2
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80093d6:	46c0      	nop			@ (mov r8, r8)
 80093d8:	46bd      	mov	sp, r7
 80093da:	b007      	add	sp, #28
 80093dc:	bd90      	pop	{r4, r7, pc}
 80093de:	46c0      	nop			@ (mov r8, r8)
 80093e0:	03ff63ff 	.word	0x03ff63ff

080093e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2241      	movs	r2, #65	@ 0x41
 80093f2:	5c9b      	ldrb	r3, [r3, r2]
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b20      	cmp	r3, #32
 80093f8:	d138      	bne.n	800946c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2240      	movs	r2, #64	@ 0x40
 80093fe:	5c9b      	ldrb	r3, [r3, r2]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d101      	bne.n	8009408 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009404:	2302      	movs	r3, #2
 8009406:	e032      	b.n	800946e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2240      	movs	r2, #64	@ 0x40
 800940c:	2101      	movs	r1, #1
 800940e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2241      	movs	r2, #65	@ 0x41
 8009414:	2124      	movs	r1, #36	@ 0x24
 8009416:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2101      	movs	r1, #1
 8009424:	438a      	bics	r2, r1
 8009426:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4911      	ldr	r1, [pc, #68]	@ (8009478 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009434:	400a      	ands	r2, r1
 8009436:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6819      	ldr	r1, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	430a      	orrs	r2, r1
 8009446:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2101      	movs	r1, #1
 8009454:	430a      	orrs	r2, r1
 8009456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2241      	movs	r2, #65	@ 0x41
 800945c:	2120      	movs	r1, #32
 800945e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2240      	movs	r2, #64	@ 0x40
 8009464:	2100      	movs	r1, #0
 8009466:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	e000      	b.n	800946e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800946c:	2302      	movs	r3, #2
  }
}
 800946e:	0018      	movs	r0, r3
 8009470:	46bd      	mov	sp, r7
 8009472:	b002      	add	sp, #8
 8009474:	bd80      	pop	{r7, pc}
 8009476:	46c0      	nop			@ (mov r8, r8)
 8009478:	ffffefff 	.word	0xffffefff

0800947c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2241      	movs	r2, #65	@ 0x41
 800948a:	5c9b      	ldrb	r3, [r3, r2]
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b20      	cmp	r3, #32
 8009490:	d139      	bne.n	8009506 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2240      	movs	r2, #64	@ 0x40
 8009496:	5c9b      	ldrb	r3, [r3, r2]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d101      	bne.n	80094a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800949c:	2302      	movs	r3, #2
 800949e:	e033      	b.n	8009508 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2240      	movs	r2, #64	@ 0x40
 80094a4:	2101      	movs	r1, #1
 80094a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2241      	movs	r2, #65	@ 0x41
 80094ac:	2124      	movs	r1, #36	@ 0x24
 80094ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2101      	movs	r1, #1
 80094bc:	438a      	bics	r2, r1
 80094be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	4a11      	ldr	r2, [pc, #68]	@ (8009510 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80094cc:	4013      	ands	r3, r2
 80094ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	021b      	lsls	r3, r3, #8
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2101      	movs	r1, #1
 80094ee:	430a      	orrs	r2, r1
 80094f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2241      	movs	r2, #65	@ 0x41
 80094f6:	2120      	movs	r1, #32
 80094f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2240      	movs	r2, #64	@ 0x40
 80094fe:	2100      	movs	r1, #0
 8009500:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	e000      	b.n	8009508 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009506:	2302      	movs	r3, #2
  }
}
 8009508:	0018      	movs	r0, r3
 800950a:	46bd      	mov	sp, r7
 800950c:	b004      	add	sp, #16
 800950e:	bd80      	pop	{r7, pc}
 8009510:	fffff0ff 	.word	0xfffff0ff

08009514 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	000a      	movs	r2, r1
 800951e:	1cbb      	adds	r3, r7, #2
 8009520:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8009522:	230a      	movs	r3, #10
 8009524:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8009526:	e002      	b.n	800952e <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	3b01      	subs	r3, #1
 800952c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1f9      	bne.n	8009528 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8009534:	1cbb      	adds	r3, r7, #2
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	4a06      	ldr	r2, [pc, #24]	@ (8009554 <PCD_GET_EP_RX_CNT+0x40>)
 800953c:	4694      	mov	ip, r2
 800953e:	4463      	add	r3, ip
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	0c1b      	lsrs	r3, r3, #16
 8009544:	b29b      	uxth	r3, r3
 8009546:	059b      	lsls	r3, r3, #22
 8009548:	0d9b      	lsrs	r3, r3, #22
 800954a:	b29b      	uxth	r3, r3
}
 800954c:	0018      	movs	r0, r3
 800954e:	46bd      	mov	sp, r7
 8009550:	b004      	add	sp, #16
 8009552:	bd80      	pop	{r7, pc}
 8009554:	40009800 	.word	0x40009800

08009558 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	000a      	movs	r2, r1
 8009562:	1cbb      	adds	r3, r7, #2
 8009564:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8009566:	230a      	movs	r3, #10
 8009568:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800956a:	e002      	b.n	8009572 <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	3b01      	subs	r3, #1
 8009570:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1f9      	bne.n	800956c <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8009578:	1cbb      	adds	r3, r7, #2
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	00db      	lsls	r3, r3, #3
 800957e:	4a06      	ldr	r2, [pc, #24]	@ (8009598 <PCD_GET_EP_DBUF0_CNT+0x40>)
 8009580:	4694      	mov	ip, r2
 8009582:	4463      	add	r3, ip
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	0c1b      	lsrs	r3, r3, #16
 8009588:	b29b      	uxth	r3, r3
 800958a:	059b      	lsls	r3, r3, #22
 800958c:	0d9b      	lsrs	r3, r3, #22
 800958e:	b29b      	uxth	r3, r3
}
 8009590:	0018      	movs	r0, r3
 8009592:	46bd      	mov	sp, r7
 8009594:	b004      	add	sp, #16
 8009596:	bd80      	pop	{r7, pc}
 8009598:	40009800 	.word	0x40009800

0800959c <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	000a      	movs	r2, r1
 80095a6:	1cbb      	adds	r3, r7, #2
 80095a8:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80095aa:	230a      	movs	r3, #10
 80095ac:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80095ae:	e002      	b.n	80095b6 <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1f9      	bne.n	80095b0 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80095bc:	1cbb      	adds	r3, r7, #2
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	00db      	lsls	r3, r3, #3
 80095c2:	4a06      	ldr	r2, [pc, #24]	@ (80095dc <PCD_GET_EP_DBUF1_CNT+0x40>)
 80095c4:	4694      	mov	ip, r2
 80095c6:	4463      	add	r3, ip
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	0c1b      	lsrs	r3, r3, #16
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	059b      	lsls	r3, r3, #22
 80095d0:	0d9b      	lsrs	r3, r3, #22
 80095d2:	b29b      	uxth	r3, r3
}
 80095d4:	0018      	movs	r0, r3
 80095d6:	46bd      	mov	sp, r7
 80095d8:	b004      	add	sp, #16
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	40009800 	.word	0x40009800

080095e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80095e0:	b590      	push	{r4, r7, lr}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af02      	add	r7, sp, #8
 80095e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e0ea      	b.n	80097c8 <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a76      	ldr	r2, [pc, #472]	@ (80097d0 <HAL_PCD_Init+0x1f0>)
 80095f6:	5c9b      	ldrb	r3, [r3, r2]
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d108      	bne.n	8009610 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	23a5      	movs	r3, #165	@ 0xa5
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	2100      	movs	r1, #0
 8009606:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	0018      	movs	r0, r3
 800960c:	f7fe ff44 	bl	8008498 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a6f      	ldr	r2, [pc, #444]	@ (80097d0 <HAL_PCD_Init+0x1f0>)
 8009614:	2103      	movs	r1, #3
 8009616:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	0018      	movs	r0, r3
 800961e:	f004 f8e3 	bl	800d7e8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009622:	230f      	movs	r3, #15
 8009624:	18fb      	adds	r3, r7, r3
 8009626:	2200      	movs	r2, #0
 8009628:	701a      	strb	r2, [r3, #0]
 800962a:	e049      	b.n	80096c0 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800962c:	200f      	movs	r0, #15
 800962e:	183b      	adds	r3, r7, r0
 8009630:	781a      	ldrb	r2, [r3, #0]
 8009632:	6879      	ldr	r1, [r7, #4]
 8009634:	0013      	movs	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	189b      	adds	r3, r3, r2
 800963a:	00db      	lsls	r3, r3, #3
 800963c:	18cb      	adds	r3, r1, r3
 800963e:	3315      	adds	r3, #21
 8009640:	2201      	movs	r2, #1
 8009642:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009644:	183b      	adds	r3, r7, r0
 8009646:	781a      	ldrb	r2, [r3, #0]
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	0013      	movs	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	189b      	adds	r3, r3, r2
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	18cb      	adds	r3, r1, r3
 8009654:	3314      	adds	r3, #20
 8009656:	183a      	adds	r2, r7, r0
 8009658:	7812      	ldrb	r2, [r2, #0]
 800965a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800965c:	183b      	adds	r3, r7, r0
 800965e:	781a      	ldrb	r2, [r3, #0]
 8009660:	6879      	ldr	r1, [r7, #4]
 8009662:	0013      	movs	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	189b      	adds	r3, r3, r2
 8009668:	00db      	lsls	r3, r3, #3
 800966a:	18cb      	adds	r3, r1, r3
 800966c:	3317      	adds	r3, #23
 800966e:	2200      	movs	r2, #0
 8009670:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009672:	183b      	adds	r3, r7, r0
 8009674:	781a      	ldrb	r2, [r3, #0]
 8009676:	6879      	ldr	r1, [r7, #4]
 8009678:	0013      	movs	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	189b      	adds	r3, r3, r2
 800967e:	00db      	lsls	r3, r3, #3
 8009680:	18cb      	adds	r3, r1, r3
 8009682:	3324      	adds	r3, #36	@ 0x24
 8009684:	2200      	movs	r2, #0
 8009686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009688:	183b      	adds	r3, r7, r0
 800968a:	781a      	ldrb	r2, [r3, #0]
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	0013      	movs	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	189b      	adds	r3, r3, r2
 8009694:	00db      	lsls	r3, r3, #3
 8009696:	18cb      	adds	r3, r1, r3
 8009698:	3328      	adds	r3, #40	@ 0x28
 800969a:	2200      	movs	r2, #0
 800969c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800969e:	183b      	adds	r3, r7, r0
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	1c5a      	adds	r2, r3, #1
 80096a6:	0013      	movs	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	189b      	adds	r3, r3, r2
 80096ac:	00db      	lsls	r3, r3, #3
 80096ae:	18cb      	adds	r3, r1, r3
 80096b0:	3304      	adds	r3, #4
 80096b2:	2200      	movs	r2, #0
 80096b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096b6:	183b      	adds	r3, r7, r0
 80096b8:	781a      	ldrb	r2, [r3, #0]
 80096ba:	183b      	adds	r3, r7, r0
 80096bc:	3201      	adds	r2, #1
 80096be:	701a      	strb	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	791b      	ldrb	r3, [r3, #4]
 80096c4:	210f      	movs	r1, #15
 80096c6:	187a      	adds	r2, r7, r1
 80096c8:	7812      	ldrb	r2, [r2, #0]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d3ae      	bcc.n	800962c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096ce:	187b      	adds	r3, r7, r1
 80096d0:	2200      	movs	r2, #0
 80096d2:	701a      	strb	r2, [r3, #0]
 80096d4:	e056      	b.n	8009784 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80096d6:	240f      	movs	r4, #15
 80096d8:	193b      	adds	r3, r7, r4
 80096da:	781a      	ldrb	r2, [r3, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	2356      	movs	r3, #86	@ 0x56
 80096e0:	33ff      	adds	r3, #255	@ 0xff
 80096e2:	0019      	movs	r1, r3
 80096e4:	0013      	movs	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	189b      	adds	r3, r3, r2
 80096ea:	00db      	lsls	r3, r3, #3
 80096ec:	18c3      	adds	r3, r0, r3
 80096ee:	185b      	adds	r3, r3, r1
 80096f0:	2200      	movs	r2, #0
 80096f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80096f4:	193b      	adds	r3, r7, r4
 80096f6:	781a      	ldrb	r2, [r3, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	23aa      	movs	r3, #170	@ 0xaa
 80096fc:	0059      	lsls	r1, r3, #1
 80096fe:	0013      	movs	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	189b      	adds	r3, r3, r2
 8009704:	00db      	lsls	r3, r3, #3
 8009706:	18c3      	adds	r3, r0, r3
 8009708:	185b      	adds	r3, r3, r1
 800970a:	193a      	adds	r2, r7, r4
 800970c:	7812      	ldrb	r2, [r2, #0]
 800970e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009710:	193b      	adds	r3, r7, r4
 8009712:	781a      	ldrb	r2, [r3, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	2358      	movs	r3, #88	@ 0x58
 8009718:	33ff      	adds	r3, #255	@ 0xff
 800971a:	0019      	movs	r1, r3
 800971c:	0013      	movs	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	189b      	adds	r3, r3, r2
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	18c3      	adds	r3, r0, r3
 8009726:	185b      	adds	r3, r3, r1
 8009728:	2200      	movs	r2, #0
 800972a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800972c:	193b      	adds	r3, r7, r4
 800972e:	781a      	ldrb	r2, [r3, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	23b2      	movs	r3, #178	@ 0xb2
 8009734:	0059      	lsls	r1, r3, #1
 8009736:	0013      	movs	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	189b      	adds	r3, r3, r2
 800973c:	00db      	lsls	r3, r3, #3
 800973e:	18c3      	adds	r3, r0, r3
 8009740:	185b      	adds	r3, r3, r1
 8009742:	2200      	movs	r2, #0
 8009744:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009746:	193b      	adds	r3, r7, r4
 8009748:	781a      	ldrb	r2, [r3, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	23b4      	movs	r3, #180	@ 0xb4
 800974e:	0059      	lsls	r1, r3, #1
 8009750:	0013      	movs	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	189b      	adds	r3, r3, r2
 8009756:	00db      	lsls	r3, r3, #3
 8009758:	18c3      	adds	r3, r0, r3
 800975a:	185b      	adds	r3, r3, r1
 800975c:	2200      	movs	r2, #0
 800975e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009760:	193b      	adds	r3, r7, r4
 8009762:	781a      	ldrb	r2, [r3, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	23b6      	movs	r3, #182	@ 0xb6
 8009768:	0059      	lsls	r1, r3, #1
 800976a:	0013      	movs	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	189b      	adds	r3, r3, r2
 8009770:	00db      	lsls	r3, r3, #3
 8009772:	18c3      	adds	r3, r0, r3
 8009774:	185b      	adds	r3, r3, r1
 8009776:	2200      	movs	r2, #0
 8009778:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800977a:	193b      	adds	r3, r7, r4
 800977c:	781a      	ldrb	r2, [r3, #0]
 800977e:	193b      	adds	r3, r7, r4
 8009780:	3201      	adds	r2, #1
 8009782:	701a      	strb	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	791b      	ldrb	r3, [r3, #4]
 8009788:	220f      	movs	r2, #15
 800978a:	18ba      	adds	r2, r7, r2
 800978c:	7812      	ldrb	r2, [r2, #0]
 800978e:	429a      	cmp	r2, r3
 8009790:	d3a1      	bcc.n	80096d6 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6818      	ldr	r0, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	466a      	mov	r2, sp
 800979a:	7c19      	ldrb	r1, [r3, #16]
 800979c:	7011      	strb	r1, [r2, #0]
 800979e:	6859      	ldr	r1, [r3, #4]
 80097a0:	689a      	ldr	r2, [r3, #8]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	f004 f859 	bl	800d85a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a07      	ldr	r2, [pc, #28]	@ (80097d0 <HAL_PCD_Init+0x1f0>)
 80097b2:	2101      	movs	r1, #1
 80097b4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	7b1b      	ldrb	r3, [r3, #12]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d103      	bne.n	80097c6 <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	0018      	movs	r0, r3
 80097c2:	f001 fc99 	bl	800b0f8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	0018      	movs	r0, r3
 80097ca:	46bd      	mov	sp, r7
 80097cc:	b005      	add	sp, #20
 80097ce:	bd90      	pop	{r4, r7, pc}
 80097d0:	00000295 	.word	0x00000295

080097d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	23a5      	movs	r3, #165	@ 0xa5
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	5cd3      	ldrb	r3, [r2, r3]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d101      	bne.n	80097ec <HAL_PCD_Start+0x18>
 80097e8:	2302      	movs	r3, #2
 80097ea:	e014      	b.n	8009816 <HAL_PCD_Start+0x42>
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	23a5      	movs	r3, #165	@ 0xa5
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	2101      	movs	r1, #1
 80097f4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	0018      	movs	r0, r3
 80097fc:	f003 ffe0 	bl	800d7c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	0018      	movs	r0, r3
 8009806:	f005 fe76 	bl	800f4f6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	23a5      	movs	r3, #165	@ 0xa5
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	2100      	movs	r1, #0
 8009812:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	0018      	movs	r0, r3
 8009818:	46bd      	mov	sp, r7
 800981a:	b002      	add	sp, #8
 800981c:	bd80      	pop	{r7, pc}

0800981e <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b082      	sub	sp, #8
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	23a5      	movs	r3, #165	@ 0xa5
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	5cd3      	ldrb	r3, [r2, r3]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d101      	bne.n	8009836 <HAL_PCD_Stop+0x18>
 8009832:	2302      	movs	r3, #2
 8009834:	e014      	b.n	8009860 <HAL_PCD_Stop+0x42>
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	23a5      	movs	r3, #165	@ 0xa5
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	2101      	movs	r1, #1
 800983e:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_DISABLE(hpcd);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	0018      	movs	r0, r3
 8009846:	f003 ffcf 	bl	800d7e8 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	0018      	movs	r0, r3
 8009850:	f005 fe62 	bl	800f518 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	23a5      	movs	r3, #165	@ 0xa5
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	2100      	movs	r1, #0
 800985c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	0018      	movs	r0, r3
 8009862:	46bd      	mov	sp, r7
 8009864:	b002      	add	sp, #8
 8009866:	bd80      	pop	{r7, pc}

08009868 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	0018      	movs	r0, r3
 8009876:	f005 fe61 	bl	800f53c <USB_ReadInterrupts>
 800987a:	0003      	movs	r3, r0
 800987c:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 800987e:	4a7c      	ldr	r2, [pc, #496]	@ (8009a70 <HAL_PCD_IRQHandler+0x208>)
 8009880:	23a0      	movs	r3, #160	@ 0xa0
 8009882:	58d3      	ldr	r3, [r2, r3]
 8009884:	2204      	movs	r2, #4
 8009886:	4013      	ands	r3, r2
 8009888:	d100      	bne.n	800988c <HAL_PCD_IRQHandler+0x24>
 800988a:	e0ed      	b.n	8009a68 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	2380      	movs	r3, #128	@ 0x80
 8009890:	021b      	lsls	r3, r3, #8
 8009892:	4013      	ands	r3, r2
 8009894:	d004      	beq.n	80098a0 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	0018      	movs	r0, r3
 800989a:	f000 fbb9 	bl	800a010 <PCD_EP_ISR_Handler>

    return;
 800989e:	e0e4      	b.n	8009a6a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	2380      	movs	r3, #128	@ 0x80
 80098a4:	00db      	lsls	r3, r3, #3
 80098a6:	4013      	ands	r3, r2
 80098a8:	d011      	beq.n	80098ce <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	496f      	ldr	r1, [pc, #444]	@ (8009a74 <HAL_PCD_IRQHandler+0x20c>)
 80098b6:	400a      	ands	r2, r1
 80098b8:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	0018      	movs	r0, r3
 80098be:	f011 fa05 	bl	801accc <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2100      	movs	r1, #0
 80098c6:	0018      	movs	r0, r3
 80098c8:	f000 f8fc 	bl	8009ac4 <HAL_PCD_SetAddress>

    return;
 80098cc:	e0cd      	b.n	8009a6a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	2380      	movs	r3, #128	@ 0x80
 80098d2:	01db      	lsls	r3, r3, #7
 80098d4:	4013      	ands	r3, r2
 80098d6:	d008      	beq.n	80098ea <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4965      	ldr	r1, [pc, #404]	@ (8009a78 <HAL_PCD_IRQHandler+0x210>)
 80098e4:	400a      	ands	r2, r1
 80098e6:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 80098e8:	e0bf      	b.n	8009a6a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	2380      	movs	r3, #128	@ 0x80
 80098ee:	019b      	lsls	r3, r3, #6
 80098f0:	4013      	ands	r3, r2
 80098f2:	d008      	beq.n	8009906 <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	495f      	ldr	r1, [pc, #380]	@ (8009a7c <HAL_PCD_IRQHandler+0x214>)
 8009900:	400a      	ands	r2, r1
 8009902:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8009904:	e0b1      	b.n	8009a6a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	2380      	movs	r3, #128	@ 0x80
 800990a:	015b      	lsls	r3, r3, #5
 800990c:	4013      	ands	r3, r2
 800990e:	d02c      	beq.n	800996a <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2104      	movs	r1, #4
 800991c:	438a      	bics	r2, r1
 800991e:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2108      	movs	r1, #8
 800992c:	438a      	bics	r2, r1
 800992e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	23b3      	movs	r3, #179	@ 0xb3
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	5cd3      	ldrb	r3, [r2, r3]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d109      	bne.n	8009950 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	23b3      	movs	r3, #179	@ 0xb3
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	2100      	movs	r1, #0
 8009944:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2100      	movs	r1, #0
 800994a:	0018      	movs	r0, r3
 800994c:	f001 fbf6 	bl	800b13c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	0018      	movs	r0, r3
 8009954:	f000 f8ae 	bl	8009ab4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4947      	ldr	r1, [pc, #284]	@ (8009a80 <HAL_PCD_IRQHandler+0x218>)
 8009964:	400a      	ands	r2, r1
 8009966:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8009968:	e07f      	b.n	8009a6a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	2380      	movs	r3, #128	@ 0x80
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	4013      	ands	r3, r2
 8009972:	d01c      	beq.n	80099ae <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2108      	movs	r1, #8
 8009980:	430a      	orrs	r2, r1
 8009982:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	493d      	ldr	r1, [pc, #244]	@ (8009a84 <HAL_PCD_IRQHandler+0x21c>)
 8009990:	400a      	ands	r2, r1
 8009992:	645a      	str	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2104      	movs	r1, #4
 80099a0:	430a      	orrs	r2, r1
 80099a2:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	0018      	movs	r0, r3
 80099a8:	f000 f87c 	bl	8009aa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80099ac:	e05d      	b.n	8009a6a <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2280      	movs	r2, #128	@ 0x80
 80099b2:	4013      	ands	r3, r2
 80099b4:	d038      	beq.n	8009a28 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4931      	ldr	r1, [pc, #196]	@ (8009a88 <HAL_PCD_IRQHandler+0x220>)
 80099c2:	400a      	ands	r2, r1
 80099c4:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	23b3      	movs	r3, #179	@ 0xb3
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	5cd3      	ldrb	r3, [r2, r3]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d125      	bne.n	8009a1e <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2104      	movs	r1, #4
 80099de:	430a      	orrs	r2, r1
 80099e0:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2108      	movs	r1, #8
 80099ee:	430a      	orrs	r2, r1
 80099f0:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	23b3      	movs	r3, #179	@ 0xb3
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	2101      	movs	r1, #1
 80099fa:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a02:	089b      	lsrs	r3, r3, #2
 8009a04:	223c      	movs	r2, #60	@ 0x3c
 8009a06:	4013      	ands	r3, r2
 8009a08:	0019      	movs	r1, r3
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	23b4      	movs	r3, #180	@ 0xb4
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2101      	movs	r1, #1
 8009a16:	0018      	movs	r0, r3
 8009a18:	f001 fb90 	bl	800b13c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8009a1c:	e025      	b.n	8009a6a <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	0018      	movs	r0, r3
 8009a22:	f000 f83f 	bl	8009aa4 <HAL_PCD_SuspendCallback>
    return;
 8009a26:	e020      	b.n	8009a6a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	2380      	movs	r3, #128	@ 0x80
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	4013      	ands	r3, r2
 8009a30:	d00c      	beq.n	8009a4c <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4913      	ldr	r1, [pc, #76]	@ (8009a8c <HAL_PCD_IRQHandler+0x224>)
 8009a3e:	400a      	ands	r2, r1
 8009a40:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	0018      	movs	r0, r3
 8009a46:	f000 f825 	bl	8009a94 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009a4a:	e00e      	b.n	8009a6a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	2380      	movs	r3, #128	@ 0x80
 8009a50:	005b      	lsls	r3, r3, #1
 8009a52:	4013      	ands	r3, r2
 8009a54:	d009      	beq.n	8009a6a <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	490b      	ldr	r1, [pc, #44]	@ (8009a90 <HAL_PCD_IRQHandler+0x228>)
 8009a62:	400a      	ands	r2, r1
 8009a64:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8009a66:	e000      	b.n	8009a6a <HAL_PCD_IRQHandler+0x202>
    return;
 8009a68:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	b004      	add	sp, #16
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	40010000 	.word	0x40010000
 8009a74:	0000fbff 	.word	0x0000fbff
 8009a78:	0000bfff 	.word	0x0000bfff
 8009a7c:	0000dfff 	.word	0x0000dfff
 8009a80:	0000efff 	.word	0x0000efff
 8009a84:	0000f7ff 	.word	0x0000f7ff
 8009a88:	0000ff7f 	.word	0x0000ff7f
 8009a8c:	0000fdff 	.word	0x0000fdff
 8009a90:	0000feff 	.word	0x0000feff

08009a94 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8009a9c:	46c0      	nop			@ (mov r8, r8)
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	b002      	add	sp, #8
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8009aac:	46c0      	nop			@ (mov r8, r8)
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	b002      	add	sp, #8
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8009abc:	46c0      	nop			@ (mov r8, r8)
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	b002      	add	sp, #8
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	000a      	movs	r2, r1
 8009ace:	1cfb      	adds	r3, r7, #3
 8009ad0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	23a5      	movs	r3, #165	@ 0xa5
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	5cd3      	ldrb	r3, [r2, r3]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d101      	bne.n	8009ae2 <HAL_PCD_SetAddress+0x1e>
 8009ade:	2302      	movs	r3, #2
 8009ae0:	e016      	b.n	8009b10 <HAL_PCD_SetAddress+0x4c>
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	23a5      	movs	r3, #165	@ 0xa5
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	2101      	movs	r1, #1
 8009aea:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	1cfa      	adds	r2, r7, #3
 8009af0:	7812      	ldrb	r2, [r2, #0]
 8009af2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	1cfb      	adds	r3, r7, #3
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	0019      	movs	r1, r3
 8009afe:	0010      	movs	r0, r2
 8009b00:	f005 fce6 	bl	800f4d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	23a5      	movs	r3, #165	@ 0xa5
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	0018      	movs	r0, r3
 8009b12:	46bd      	mov	sp, r7
 8009b14:	b002      	add	sp, #8
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009b18:	b590      	push	{r4, r7, lr}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	000c      	movs	r4, r1
 8009b22:	0010      	movs	r0, r2
 8009b24:	0019      	movs	r1, r3
 8009b26:	1cfb      	adds	r3, r7, #3
 8009b28:	1c22      	adds	r2, r4, #0
 8009b2a:	701a      	strb	r2, [r3, #0]
 8009b2c:	003b      	movs	r3, r7
 8009b2e:	1c02      	adds	r2, r0, #0
 8009b30:	801a      	strh	r2, [r3, #0]
 8009b32:	1cbb      	adds	r3, r7, #2
 8009b34:	1c0a      	adds	r2, r1, #0
 8009b36:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009b38:	230b      	movs	r3, #11
 8009b3a:	18fb      	adds	r3, r7, r3
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009b40:	1cfb      	adds	r3, r7, #3
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	b25b      	sxtb	r3, r3
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	da10      	bge.n	8009b6c <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b4a:	1cfb      	adds	r3, r7, #3
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	2207      	movs	r2, #7
 8009b50:	401a      	ands	r2, r3
 8009b52:	0013      	movs	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	189b      	adds	r3, r3, r2
 8009b58:	00db      	lsls	r3, r3, #3
 8009b5a:	3310      	adds	r3, #16
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	18d3      	adds	r3, r2, r3
 8009b60:	3304      	adds	r3, #4
 8009b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2201      	movs	r2, #1
 8009b68:	705a      	strb	r2, [r3, #1]
 8009b6a:	e010      	b.n	8009b8e <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b6c:	1cfb      	adds	r3, r7, #3
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	2207      	movs	r2, #7
 8009b72:	401a      	ands	r2, r3
 8009b74:	0013      	movs	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	189b      	adds	r3, r3, r2
 8009b7a:	00db      	lsls	r3, r3, #3
 8009b7c:	3351      	adds	r3, #81	@ 0x51
 8009b7e:	33ff      	adds	r3, #255	@ 0xff
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	18d3      	adds	r3, r2, r3
 8009b84:	3304      	adds	r3, #4
 8009b86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009b8e:	1cfb      	adds	r3, r7, #3
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	2207      	movs	r2, #7
 8009b94:	4013      	ands	r3, r2
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009b9c:	003b      	movs	r3, r7
 8009b9e:	881a      	ldrh	r2, [r3, #0]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	1cba      	adds	r2, r7, #2
 8009ba8:	7812      	ldrb	r2, [r2, #0]
 8009baa:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009bac:	1cbb      	adds	r3, r7, #2
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d102      	bne.n	8009bba <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	23a5      	movs	r3, #165	@ 0xa5
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	5cd3      	ldrb	r3, [r2, r3]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d101      	bne.n	8009bca <HAL_PCD_EP_Open+0xb2>
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	e013      	b.n	8009bf2 <HAL_PCD_EP_Open+0xda>
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	23a5      	movs	r3, #165	@ 0xa5
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	0011      	movs	r1, r2
 8009bdc:	0018      	movs	r0, r3
 8009bde:	f003 fe7b 	bl	800d8d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	23a5      	movs	r3, #165	@ 0xa5
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	2100      	movs	r1, #0
 8009bea:	54d1      	strb	r1, [r2, r3]

  return ret;
 8009bec:	230b      	movs	r3, #11
 8009bee:	18fb      	adds	r3, r7, r3
 8009bf0:	781b      	ldrb	r3, [r3, #0]
}
 8009bf2:	0018      	movs	r0, r3
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	b005      	add	sp, #20
 8009bf8:	bd90      	pop	{r4, r7, pc}

08009bfa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	000a      	movs	r2, r1
 8009c04:	1cfb      	adds	r3, r7, #3
 8009c06:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009c08:	1cfb      	adds	r3, r7, #3
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	b25b      	sxtb	r3, r3
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	da10      	bge.n	8009c34 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c12:	1cfb      	adds	r3, r7, #3
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	2207      	movs	r2, #7
 8009c18:	401a      	ands	r2, r3
 8009c1a:	0013      	movs	r3, r2
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	189b      	adds	r3, r3, r2
 8009c20:	00db      	lsls	r3, r3, #3
 8009c22:	3310      	adds	r3, #16
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	18d3      	adds	r3, r2, r3
 8009c28:	3304      	adds	r3, #4
 8009c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	705a      	strb	r2, [r3, #1]
 8009c32:	e010      	b.n	8009c56 <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c34:	1cfb      	adds	r3, r7, #3
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2207      	movs	r2, #7
 8009c3a:	401a      	ands	r2, r3
 8009c3c:	0013      	movs	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	189b      	adds	r3, r3, r2
 8009c42:	00db      	lsls	r3, r3, #3
 8009c44:	3351      	adds	r3, #81	@ 0x51
 8009c46:	33ff      	adds	r3, #255	@ 0xff
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	18d3      	adds	r3, r2, r3
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2200      	movs	r2, #0
 8009c54:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c56:	1cfb      	adds	r3, r7, #3
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	2207      	movs	r2, #7
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	23a5      	movs	r3, #165	@ 0xa5
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	5cd3      	ldrb	r3, [r2, r3]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d101      	bne.n	8009c74 <HAL_PCD_EP_Close+0x7a>
 8009c70:	2302      	movs	r3, #2
 8009c72:	e011      	b.n	8009c98 <HAL_PCD_EP_Close+0x9e>
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	23a5      	movs	r3, #165	@ 0xa5
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	0011      	movs	r1, r2
 8009c86:	0018      	movs	r0, r3
 8009c88:	f004 f95a 	bl	800df40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	23a5      	movs	r3, #165	@ 0xa5
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	2100      	movs	r1, #0
 8009c94:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	0018      	movs	r0, r3
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	b004      	add	sp, #16
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	607a      	str	r2, [r7, #4]
 8009caa:	603b      	str	r3, [r7, #0]
 8009cac:	200b      	movs	r0, #11
 8009cae:	183b      	adds	r3, r7, r0
 8009cb0:	1c0a      	adds	r2, r1, #0
 8009cb2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009cb4:	0001      	movs	r1, r0
 8009cb6:	187b      	adds	r3, r7, r1
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	2207      	movs	r2, #7
 8009cbc:	401a      	ands	r2, r3
 8009cbe:	0013      	movs	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	189b      	adds	r3, r3, r2
 8009cc4:	00db      	lsls	r3, r3, #3
 8009cc6:	3351      	adds	r3, #81	@ 0x51
 8009cc8:	33ff      	adds	r3, #255	@ 0xff
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	18d3      	adds	r3, r2, r3
 8009cce:	3304      	adds	r3, #4
 8009cd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009cea:	187b      	adds	r3, r7, r1
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	2207      	movs	r2, #7
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	0011      	movs	r1, r2
 8009d00:	0018      	movs	r0, r3
 8009d02:	f004 fa83 	bl	800e20c <USB_EPStartXfer>

  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	0018      	movs	r0, r3
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	b006      	add	sp, #24
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	000a      	movs	r2, r1
 8009d1a:	1cfb      	adds	r3, r7, #3
 8009d1c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009d1e:	1cfb      	adds	r3, r7, #3
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	2207      	movs	r2, #7
 8009d24:	401a      	ands	r2, r3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	23b8      	movs	r3, #184	@ 0xb8
 8009d2a:	0059      	lsls	r1, r3, #1
 8009d2c:	0013      	movs	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	189b      	adds	r3, r3, r2
 8009d32:	00db      	lsls	r3, r3, #3
 8009d34:	18c3      	adds	r3, r0, r3
 8009d36:	185b      	adds	r3, r3, r1
 8009d38:	681b      	ldr	r3, [r3, #0]
}
 8009d3a:	0018      	movs	r0, r3
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	b002      	add	sp, #8
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b086      	sub	sp, #24
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	60f8      	str	r0, [r7, #12]
 8009d4a:	607a      	str	r2, [r7, #4]
 8009d4c:	603b      	str	r3, [r7, #0]
 8009d4e:	200b      	movs	r0, #11
 8009d50:	183b      	adds	r3, r7, r0
 8009d52:	1c0a      	adds	r2, r1, #0
 8009d54:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d56:	183b      	adds	r3, r7, r0
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2207      	movs	r2, #7
 8009d5c:	401a      	ands	r2, r3
 8009d5e:	0013      	movs	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	189b      	adds	r3, r3, r2
 8009d64:	00db      	lsls	r3, r3, #3
 8009d66:	3310      	adds	r3, #16
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	18d3      	adds	r3, r2, r3
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	2224      	movs	r2, #36	@ 0x24
 8009d80:	2101      	movs	r1, #1
 8009d82:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	2201      	movs	r2, #1
 8009d94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d96:	183b      	adds	r3, r7, r0
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	2207      	movs	r2, #7
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	0011      	movs	r1, r2
 8009dac:	0018      	movs	r0, r3
 8009dae:	f004 fa2d 	bl	800e20c <USB_EPStartXfer>

  return HAL_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	0018      	movs	r0, r3
 8009db6:	46bd      	mov	sp, r7
 8009db8:	b006      	add	sp, #24
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	000a      	movs	r2, r1
 8009dc6:	1cfb      	adds	r3, r7, #3
 8009dc8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009dca:	1cfb      	adds	r3, r7, #3
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	2207      	movs	r2, #7
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	7912      	ldrb	r2, [r2, #4]
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d901      	bls.n	8009dde <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e048      	b.n	8009e70 <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009dde:	1cfb      	adds	r3, r7, #3
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	b25b      	sxtb	r3, r3
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	da10      	bge.n	8009e0a <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009de8:	1cfb      	adds	r3, r7, #3
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	2207      	movs	r2, #7
 8009dee:	401a      	ands	r2, r3
 8009df0:	0013      	movs	r3, r2
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	189b      	adds	r3, r3, r2
 8009df6:	00db      	lsls	r3, r3, #3
 8009df8:	3310      	adds	r3, #16
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	18d3      	adds	r3, r2, r3
 8009dfe:	3304      	adds	r3, #4
 8009e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2201      	movs	r2, #1
 8009e06:	705a      	strb	r2, [r3, #1]
 8009e08:	e00e      	b.n	8009e28 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009e0a:	1cfb      	adds	r3, r7, #3
 8009e0c:	781a      	ldrb	r2, [r3, #0]
 8009e0e:	0013      	movs	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	189b      	adds	r3, r3, r2
 8009e14:	00db      	lsls	r3, r3, #3
 8009e16:	3351      	adds	r3, #81	@ 0x51
 8009e18:	33ff      	adds	r3, #255	@ 0xff
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	18d3      	adds	r3, r2, r3
 8009e1e:	3304      	adds	r3, #4
 8009e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e2e:	1cfb      	adds	r3, r7, #3
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	2207      	movs	r2, #7
 8009e34:	4013      	ands	r3, r2
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	23a5      	movs	r3, #165	@ 0xa5
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	5cd3      	ldrb	r3, [r2, r3]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d101      	bne.n	8009e4c <HAL_PCD_EP_SetStall+0x90>
 8009e48:	2302      	movs	r3, #2
 8009e4a:	e011      	b.n	8009e70 <HAL_PCD_EP_SetStall+0xb4>
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	23a5      	movs	r3, #165	@ 0xa5
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	2101      	movs	r1, #1
 8009e54:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	0011      	movs	r1, r2
 8009e5e:	0018      	movs	r0, r3
 8009e60:	f005 f9ea 	bl	800f238 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	23a5      	movs	r3, #165	@ 0xa5
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	0018      	movs	r0, r3
 8009e72:	46bd      	mov	sp, r7
 8009e74:	b004      	add	sp, #16
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	000a      	movs	r2, r1
 8009e82:	1cfb      	adds	r3, r7, #3
 8009e84:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009e86:	1cfb      	adds	r3, r7, #3
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	220f      	movs	r2, #15
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	7912      	ldrb	r2, [r2, #4]
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d901      	bls.n	8009e9a <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e04a      	b.n	8009f30 <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009e9a:	1cfb      	adds	r3, r7, #3
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	b25b      	sxtb	r3, r3
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	da10      	bge.n	8009ec6 <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ea4:	1cfb      	adds	r3, r7, #3
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2207      	movs	r2, #7
 8009eaa:	401a      	ands	r2, r3
 8009eac:	0013      	movs	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	189b      	adds	r3, r3, r2
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	3310      	adds	r3, #16
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	18d3      	adds	r3, r2, r3
 8009eba:	3304      	adds	r3, #4
 8009ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	705a      	strb	r2, [r3, #1]
 8009ec4:	e010      	b.n	8009ee8 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ec6:	1cfb      	adds	r3, r7, #3
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	2207      	movs	r2, #7
 8009ecc:	401a      	ands	r2, r3
 8009ece:	0013      	movs	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	189b      	adds	r3, r3, r2
 8009ed4:	00db      	lsls	r3, r3, #3
 8009ed6:	3351      	adds	r3, #81	@ 0x51
 8009ed8:	33ff      	adds	r3, #255	@ 0xff
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	18d3      	adds	r3, r2, r3
 8009ede:	3304      	adds	r3, #4
 8009ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009eee:	1cfb      	adds	r3, r7, #3
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	2207      	movs	r2, #7
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	b2da      	uxtb	r2, r3
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	23a5      	movs	r3, #165	@ 0xa5
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	5cd3      	ldrb	r3, [r2, r3]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d101      	bne.n	8009f0c <HAL_PCD_EP_ClrStall+0x94>
 8009f08:	2302      	movs	r3, #2
 8009f0a:	e011      	b.n	8009f30 <HAL_PCD_EP_ClrStall+0xb8>
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	23a5      	movs	r3, #165	@ 0xa5
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	2101      	movs	r1, #1
 8009f14:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	0011      	movs	r1, r2
 8009f1e:	0018      	movs	r0, r3
 8009f20:	f005 f9cc 	bl	800f2bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	23a5      	movs	r3, #165	@ 0xa5
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	0018      	movs	r0, r3
 8009f32:	46bd      	mov	sp, r7
 8009f34:	b004      	add	sp, #16
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f38:	b5b0      	push	{r4, r5, r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	000a      	movs	r2, r1
 8009f42:	1cfb      	adds	r3, r7, #3
 8009f44:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009f46:	1cfb      	adds	r3, r7, #3
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	b25b      	sxtb	r3, r3
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	da0d      	bge.n	8009f6c <HAL_PCD_EP_Abort+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f50:	1cfb      	adds	r3, r7, #3
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	2207      	movs	r2, #7
 8009f56:	401a      	ands	r2, r3
 8009f58:	0013      	movs	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	189b      	adds	r3, r3, r2
 8009f5e:	00db      	lsls	r3, r3, #3
 8009f60:	3310      	adds	r3, #16
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	18d3      	adds	r3, r2, r3
 8009f66:	3304      	adds	r3, #4
 8009f68:	60fb      	str	r3, [r7, #12]
 8009f6a:	e00d      	b.n	8009f88 <HAL_PCD_EP_Abort+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f6c:	1cfb      	adds	r3, r7, #3
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2207      	movs	r2, #7
 8009f72:	401a      	ands	r2, r3
 8009f74:	0013      	movs	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	189b      	adds	r3, r3, r2
 8009f7a:	00db      	lsls	r3, r3, #3
 8009f7c:	3351      	adds	r3, #81	@ 0x51
 8009f7e:	33ff      	adds	r3, #255	@ 0xff
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	18d3      	adds	r3, r2, r3
 8009f84:	3304      	adds	r3, #4
 8009f86:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	250b      	movs	r5, #11
 8009f8e:	197c      	adds	r4, r7, r5
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	0011      	movs	r1, r2
 8009f94:	0018      	movs	r0, r3
 8009f96:	f005 fa23 	bl	800f3e0 <USB_EPStopXfer>
 8009f9a:	0003      	movs	r3, r0
 8009f9c:	7023      	strb	r3, [r4, #0]

  return ret;
 8009f9e:	197b      	adds	r3, r7, r5
 8009fa0:	781b      	ldrb	r3, [r3, #0]
}
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	b004      	add	sp, #16
 8009fa8:	bdb0      	pop	{r4, r5, r7, pc}

08009faa <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b082      	sub	sp, #8
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	000a      	movs	r2, r1
 8009fb4:	1cfb      	adds	r3, r7, #3
 8009fb6:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	23a5      	movs	r3, #165	@ 0xa5
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	5cd3      	ldrb	r3, [r2, r3]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d101      	bne.n	8009fc8 <HAL_PCD_EP_Flush+0x1e>
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	e01f      	b.n	800a008 <HAL_PCD_EP_Flush+0x5e>
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	23a5      	movs	r3, #165	@ 0xa5
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	2101      	movs	r1, #1
 8009fd0:	54d1      	strb	r1, [r2, r3]

  if ((ep_addr & 0x80U) == 0x80U)
 8009fd2:	1cfb      	adds	r3, r7, #3
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	b25b      	sxtb	r3, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	da0a      	bge.n	8009ff2 <HAL_PCD_EP_Flush+0x48>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	1cfb      	adds	r3, r7, #3
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	2107      	movs	r1, #7
 8009fe6:	400b      	ands	r3, r1
 8009fe8:	0019      	movs	r1, r3
 8009fea:	0010      	movs	r0, r2
 8009fec:	f003 fc60 	bl	800d8b0 <USB_FlushTxFifo>
 8009ff0:	e004      	b.n	8009ffc <HAL_PCD_EP_Flush+0x52>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	0018      	movs	r0, r3
 8009ff8:	f003 fc64 	bl	800d8c4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	23a5      	movs	r3, #165	@ 0xa5
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	2100      	movs	r1, #0
 800a004:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	0018      	movs	r0, r3
 800a00a:	46bd      	mov	sp, r7
 800a00c:	b002      	add	sp, #8
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a010:	b5b0      	push	{r4, r5, r7, lr}
 800a012:	b08e      	sub	sp, #56	@ 0x38
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a018:	e355      	b.n	800a6c6 <PCD_EP_ISR_Handler+0x6b6>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a020:	2022      	movs	r0, #34	@ 0x22
 800a022:	183b      	adds	r3, r7, r0
 800a024:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800a026:	183b      	adds	r3, r7, r0
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	2421      	movs	r4, #33	@ 0x21
 800a02e:	193b      	adds	r3, r7, r4
 800a030:	210f      	movs	r1, #15
 800a032:	400a      	ands	r2, r1
 800a034:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800a036:	193b      	adds	r3, r7, r4
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d000      	beq.n	800a040 <PCD_EP_ISR_Handler+0x30>
 800a03e:	e12b      	b.n	800a298 <PCD_EP_ISR_Handler+0x288>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a040:	183b      	adds	r3, r7, r0
 800a042:	881b      	ldrh	r3, [r3, #0]
 800a044:	2210      	movs	r2, #16
 800a046:	4013      	ands	r3, r2
 800a048:	d140      	bne.n	800a0cc <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4ac5      	ldr	r2, [pc, #788]	@ (800a368 <PCD_EP_ISR_Handler+0x358>)
 800a052:	4013      	ands	r3, r2
 800a054:	60bb      	str	r3, [r7, #8]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	2180      	movs	r1, #128	@ 0x80
 800a05e:	0209      	lsls	r1, r1, #8
 800a060:	430a      	orrs	r2, r1
 800a062:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	3314      	adds	r3, #20
 800a068:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	00db      	lsls	r3, r3, #3
 800a070:	4abe      	ldr	r2, [pc, #760]	@ (800a36c <PCD_EP_ISR_Handler+0x35c>)
 800a072:	4694      	mov	ip, r2
 800a074:	4463      	add	r3, ip
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	0c1b      	lsrs	r3, r3, #16
 800a07a:	059b      	lsls	r3, r3, #22
 800a07c:	0d9a      	lsrs	r2, r3, #22
 800a07e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a080:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a084:	695a      	ldr	r2, [r3, #20]
 800a086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	18d2      	adds	r2, r2, r3
 800a08c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a08e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2100      	movs	r1, #0
 800a094:	0018      	movs	r0, r3
 800a096:	f010 fcf9 	bl	801aa8c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	7c5b      	ldrb	r3, [r3, #17]
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d100      	bne.n	800a0a6 <PCD_EP_ISR_Handler+0x96>
 800a0a4:	e30f      	b.n	800a6c6 <PCD_EP_ISR_Handler+0x6b6>
 800a0a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d000      	beq.n	800a0b0 <PCD_EP_ISR_Handler+0xa0>
 800a0ae:	e30a      	b.n	800a6c6 <PCD_EP_ISR_Handler+0x6b6>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	7c5b      	ldrb	r3, [r3, #17]
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2280      	movs	r2, #128	@ 0x80
 800a0b8:	4252      	negs	r2, r2
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	745a      	strb	r2, [r3, #17]
 800a0ca:	e2fc      	b.n	800a6c6 <PCD_EP_ISR_Handler+0x6b6>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3355      	adds	r3, #85	@ 0x55
 800a0d0:	33ff      	adds	r3, #255	@ 0xff
 800a0d2:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	2132      	movs	r1, #50	@ 0x32
 800a0dc:	187b      	adds	r3, r7, r1
 800a0de:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a0e0:	187b      	adds	r3, r7, r1
 800a0e2:	881a      	ldrh	r2, [r3, #0]
 800a0e4:	2380      	movs	r3, #128	@ 0x80
 800a0e6:	011b      	lsls	r3, r3, #4
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	d029      	beq.n	800a140 <PCD_EP_ISR_Handler+0x130>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	0019      	movs	r1, r3
 800a0f6:	0010      	movs	r0, r2
 800a0f8:	f7ff fa0c 	bl	8009514 <PCD_GET_EP_RX_CNT>
 800a0fc:	0003      	movs	r3, r0
 800a0fe:	001a      	movs	r2, r3
 800a100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a102:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6818      	ldr	r0, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	22a7      	movs	r2, #167	@ 0xa7
 800a10c:	0092      	lsls	r2, r2, #2
 800a10e:	1899      	adds	r1, r3, r2
 800a110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a112:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a116:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a118:	b29b      	uxth	r3, r3
 800a11a:	f005 fa91 	bl	800f640 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a92      	ldr	r2, [pc, #584]	@ (800a370 <PCD_EP_ISR_Handler+0x360>)
 800a126:	4013      	ands	r3, r2
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	2180      	movs	r1, #128	@ 0x80
 800a132:	430a      	orrs	r2, r1
 800a134:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	0018      	movs	r0, r3
 800a13a:	f010 fc23 	bl	801a984 <HAL_PCD_SetupStageCallback>
 800a13e:	e2c2      	b.n	800a6c6 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800a140:	2332      	movs	r3, #50	@ 0x32
 800a142:	18fb      	adds	r3, r7, r3
 800a144:	2200      	movs	r2, #0
 800a146:	5e9b      	ldrsh	r3, [r3, r2]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	db00      	blt.n	800a14e <PCD_EP_ISR_Handler+0x13e>
 800a14c:	e2bb      	b.n	800a6c6 <PCD_EP_ISR_Handler+0x6b6>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a86      	ldr	r2, [pc, #536]	@ (800a370 <PCD_EP_ISR_Handler+0x360>)
 800a156:	4013      	ands	r3, r2
 800a158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a160:	2180      	movs	r1, #128	@ 0x80
 800a162:	430a      	orrs	r2, r1
 800a164:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	0019      	movs	r1, r3
 800a170:	0010      	movs	r0, r2
 800a172:	f7ff f9cf 	bl	8009514 <PCD_GET_EP_RX_CNT>
 800a176:	0003      	movs	r3, r0
 800a178:	001a      	movs	r2, r3
 800a17a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a17c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a17e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a180:	69db      	ldr	r3, [r3, #28]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d01a      	beq.n	800a1bc <PCD_EP_ISR_Handler+0x1ac>
 800a186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d016      	beq.n	800a1bc <PCD_EP_ISR_Handler+0x1ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6818      	ldr	r0, [r3, #0]
 800a192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a194:	6959      	ldr	r1, [r3, #20]
 800a196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a198:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a19a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a19c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	f005 fa4e 	bl	800f640 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1a6:	695a      	ldr	r2, [r3, #20]
 800a1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1aa:	69db      	ldr	r3, [r3, #28]
 800a1ac:	18d2      	adds	r2, r2, r3
 800a1ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1b0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f010 fcfe 	bl	801abb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	2132      	movs	r1, #50	@ 0x32
 800a1c4:	187b      	adds	r3, r7, r1
 800a1c6:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a1c8:	187b      	adds	r3, r7, r1
 800a1ca:	881a      	ldrh	r2, [r3, #0]
 800a1cc:	2380      	movs	r3, #128	@ 0x80
 800a1ce:	011b      	lsls	r3, r3, #4
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	d000      	beq.n	800a1d6 <PCD_EP_ISR_Handler+0x1c6>
 800a1d4:	e277      	b.n	800a6c6 <PCD_EP_ISR_Handler+0x6b6>
 800a1d6:	187b      	adds	r3, r7, r1
 800a1d8:	881a      	ldrh	r2, [r3, #0]
 800a1da:	23c0      	movs	r3, #192	@ 0xc0
 800a1dc:	019b      	lsls	r3, r3, #6
 800a1de:	401a      	ands	r2, r3
 800a1e0:	23c0      	movs	r3, #192	@ 0xc0
 800a1e2:	019b      	lsls	r3, r3, #6
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d100      	bne.n	800a1ea <PCD_EP_ISR_Handler+0x1da>
 800a1e8:	e26d      	b.n	800a6c6 <PCD_EP_ISR_Handler+0x6b6>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a1ea:	4b60      	ldr	r3, [pc, #384]	@ (800a36c <PCD_EP_ISR_Handler+0x35c>)
 800a1ec:	685a      	ldr	r2, [r3, #4]
 800a1ee:	4b5f      	ldr	r3, [pc, #380]	@ (800a36c <PCD_EP_ISR_Handler+0x35c>)
 800a1f0:	0192      	lsls	r2, r2, #6
 800a1f2:	0992      	lsrs	r2, r2, #6
 800a1f4:	605a      	str	r2, [r3, #4]
 800a1f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	2b3e      	cmp	r3, #62	@ 0x3e
 800a1fc:	d916      	bls.n	800a22c <PCD_EP_ISR_Handler+0x21c>
 800a1fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	095b      	lsrs	r3, r3, #5
 800a204:	617b      	str	r3, [r7, #20]
 800a206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	221f      	movs	r2, #31
 800a20c:	4013      	ands	r3, r2
 800a20e:	d102      	bne.n	800a216 <PCD_EP_ISR_Handler+0x206>
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	3b01      	subs	r3, #1
 800a214:	617b      	str	r3, [r7, #20]
 800a216:	4b55      	ldr	r3, [pc, #340]	@ (800a36c <PCD_EP_ISR_Handler+0x35c>)
 800a218:	685a      	ldr	r2, [r3, #4]
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	069b      	lsls	r3, r3, #26
 800a21e:	431a      	orrs	r2, r3
 800a220:	4b52      	ldr	r3, [pc, #328]	@ (800a36c <PCD_EP_ISR_Handler+0x35c>)
 800a222:	2180      	movs	r1, #128	@ 0x80
 800a224:	0609      	lsls	r1, r1, #24
 800a226:	430a      	orrs	r2, r1
 800a228:	605a      	str	r2, [r3, #4]
 800a22a:	e01e      	b.n	800a26a <PCD_EP_ISR_Handler+0x25a>
 800a22c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d107      	bne.n	800a244 <PCD_EP_ISR_Handler+0x234>
 800a234:	4b4d      	ldr	r3, [pc, #308]	@ (800a36c <PCD_EP_ISR_Handler+0x35c>)
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	4b4c      	ldr	r3, [pc, #304]	@ (800a36c <PCD_EP_ISR_Handler+0x35c>)
 800a23a:	2180      	movs	r1, #128	@ 0x80
 800a23c:	0609      	lsls	r1, r1, #24
 800a23e:	430a      	orrs	r2, r1
 800a240:	605a      	str	r2, [r3, #4]
 800a242:	e012      	b.n	800a26a <PCD_EP_ISR_Handler+0x25a>
 800a244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	085b      	lsrs	r3, r3, #1
 800a24a:	617b      	str	r3, [r7, #20]
 800a24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	2201      	movs	r2, #1
 800a252:	4013      	ands	r3, r2
 800a254:	d002      	beq.n	800a25c <PCD_EP_ISR_Handler+0x24c>
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	3301      	adds	r3, #1
 800a25a:	617b      	str	r3, [r7, #20]
 800a25c:	4b43      	ldr	r3, [pc, #268]	@ (800a36c <PCD_EP_ISR_Handler+0x35c>)
 800a25e:	6859      	ldr	r1, [r3, #4]
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	069a      	lsls	r2, r3, #26
 800a264:	4b41      	ldr	r3, [pc, #260]	@ (800a36c <PCD_EP_ISR_Handler+0x35c>)
 800a266:	430a      	orrs	r2, r1
 800a268:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a40      	ldr	r2, [pc, #256]	@ (800a374 <PCD_EP_ISR_Handler+0x364>)
 800a272:	4013      	ands	r3, r2
 800a274:	613b      	str	r3, [r7, #16]
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	2280      	movs	r2, #128	@ 0x80
 800a27a:	0152      	lsls	r2, r2, #5
 800a27c:	4053      	eors	r3, r2
 800a27e:	613b      	str	r3, [r7, #16]
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	2280      	movs	r2, #128	@ 0x80
 800a284:	0192      	lsls	r2, r2, #6
 800a286:	4053      	eors	r3, r2
 800a288:	613b      	str	r3, [r7, #16]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	693a      	ldr	r2, [r7, #16]
 800a290:	4939      	ldr	r1, [pc, #228]	@ (800a378 <PCD_EP_ISR_Handler+0x368>)
 800a292:	430a      	orrs	r2, r1
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	e216      	b.n	800a6c6 <PCD_EP_ISR_Handler+0x6b6>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	001a      	movs	r2, r3
 800a29e:	2121      	movs	r1, #33	@ 0x21
 800a2a0:	187b      	adds	r3, r7, r1
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	18d3      	adds	r3, r2, r3
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	2032      	movs	r0, #50	@ 0x32
 800a2ac:	183b      	adds	r3, r7, r0
 800a2ae:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800a2b0:	183b      	adds	r3, r7, r0
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	5e9b      	ldrsh	r3, [r3, r2]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	db00      	blt.n	800a2bc <PCD_EP_ISR_Handler+0x2ac>
 800a2ba:	e0e0      	b.n	800a47e <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	001a      	movs	r2, r3
 800a2c2:	187b      	adds	r3, r7, r1
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	18d3      	adds	r3, r2, r3
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a28      	ldr	r2, [pc, #160]	@ (800a370 <PCD_EP_ISR_Handler+0x360>)
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	61fb      	str	r3, [r7, #28]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	001a      	movs	r2, r3
 800a2d8:	0008      	movs	r0, r1
 800a2da:	187b      	adds	r3, r7, r1
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	18d3      	adds	r3, r2, r3
 800a2e2:	69fa      	ldr	r2, [r7, #28]
 800a2e4:	2180      	movs	r1, #128	@ 0x80
 800a2e6:	430a      	orrs	r2, r1
 800a2e8:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a2ea:	183b      	adds	r3, r7, r0
 800a2ec:	781a      	ldrb	r2, [r3, #0]
 800a2ee:	0013      	movs	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	189b      	adds	r3, r3, r2
 800a2f4:	00db      	lsls	r3, r3, #3
 800a2f6:	3351      	adds	r3, #81	@ 0x51
 800a2f8:	33ff      	adds	r3, #255	@ 0xff
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	18d3      	adds	r3, r2, r3
 800a2fe:	3304      	adds	r3, #4
 800a300:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a304:	7b1b      	ldrb	r3, [r3, #12]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d11c      	bne.n	800a344 <PCD_EP_ISR_Handler+0x334>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	2524      	movs	r5, #36	@ 0x24
 800a314:	197c      	adds	r4, r7, r5
 800a316:	0019      	movs	r1, r3
 800a318:	0010      	movs	r0, r2
 800a31a:	f7ff f8fb 	bl	8009514 <PCD_GET_EP_RX_CNT>
 800a31e:	0003      	movs	r3, r0
 800a320:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 800a322:	002c      	movs	r4, r5
 800a324:	193b      	adds	r3, r7, r4
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d100      	bne.n	800a32e <PCD_EP_ISR_Handler+0x31e>
 800a32c:	e07f      	b.n	800a42e <PCD_EP_ISR_Handler+0x41e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6818      	ldr	r0, [r3, #0]
 800a332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a334:	6959      	ldr	r1, [r3, #20]
 800a336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a338:	88da      	ldrh	r2, [r3, #6]
 800a33a:	193b      	adds	r3, r7, r4
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	f005 f97f 	bl	800f640 <USB_ReadPMA>
 800a342:	e074      	b.n	800a42e <PCD_EP_ISR_Handler+0x41e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a346:	78db      	ldrb	r3, [r3, #3]
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d117      	bne.n	800a37c <PCD_EP_ISR_Handler+0x36c>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a34c:	2324      	movs	r3, #36	@ 0x24
 800a34e:	18fc      	adds	r4, r7, r3
 800a350:	2332      	movs	r3, #50	@ 0x32
 800a352:	18fb      	adds	r3, r7, r3
 800a354:	881a      	ldrh	r2, [r3, #0]
 800a356:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	0018      	movs	r0, r3
 800a35c:	f000 f9c8 	bl	800a6f0 <HAL_PCD_EP_DB_Receive>
 800a360:	0003      	movs	r3, r0
 800a362:	8023      	strh	r3, [r4, #0]
 800a364:	e063      	b.n	800a42e <PCD_EP_ISR_Handler+0x41e>
 800a366:	46c0      	nop			@ (mov r8, r8)
 800a368:	07ff8f0f 	.word	0x07ff8f0f
 800a36c:	40009800 	.word	0x40009800
 800a370:	07ff0f8f 	.word	0x07ff0f8f
 800a374:	07ffbf8f 	.word	0x07ffbf8f
 800a378:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	001a      	movs	r2, r3
 800a382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	18d3      	adds	r3, r2, r3
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4ad4      	ldr	r2, [pc, #848]	@ (800a6e0 <PCD_EP_ISR_Handler+0x6d0>)
 800a38e:	4013      	ands	r3, r2
 800a390:	61bb      	str	r3, [r7, #24]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	001a      	movs	r2, r3
 800a398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	18d3      	adds	r3, r2, r3
 800a3a0:	69ba      	ldr	r2, [r7, #24]
 800a3a2:	49d0      	ldr	r1, [pc, #832]	@ (800a6e4 <PCD_EP_ISR_Handler+0x6d4>)
 800a3a4:	430a      	orrs	r2, r1
 800a3a6:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	001a      	movs	r2, r3
 800a3ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	18d3      	adds	r3, r2, r3
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	2380      	movs	r3, #128	@ 0x80
 800a3ba:	01db      	lsls	r3, r3, #7
 800a3bc:	4013      	ands	r3, r2
 800a3be:	d01b      	beq.n	800a3f8 <PCD_EP_ISR_Handler+0x3e8>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2524      	movs	r5, #36	@ 0x24
 800a3ca:	197c      	adds	r4, r7, r5
 800a3cc:	0019      	movs	r1, r3
 800a3ce:	0010      	movs	r0, r2
 800a3d0:	f7ff f8c2 	bl	8009558 <PCD_GET_EP_DBUF0_CNT>
 800a3d4:	0003      	movs	r3, r0
 800a3d6:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800a3d8:	002c      	movs	r4, r5
 800a3da:	193b      	adds	r3, r7, r4
 800a3dc:	881b      	ldrh	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d025      	beq.n	800a42e <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6818      	ldr	r0, [r3, #0]
 800a3e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e8:	6959      	ldr	r1, [r3, #20]
 800a3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ec:	891a      	ldrh	r2, [r3, #8]
 800a3ee:	193b      	adds	r3, r7, r4
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	f005 f925 	bl	800f640 <USB_ReadPMA>
 800a3f6:	e01a      	b.n	800a42e <PCD_EP_ISR_Handler+0x41e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	2524      	movs	r5, #36	@ 0x24
 800a402:	197c      	adds	r4, r7, r5
 800a404:	0019      	movs	r1, r3
 800a406:	0010      	movs	r0, r2
 800a408:	f7ff f8c8 	bl	800959c <PCD_GET_EP_DBUF1_CNT>
 800a40c:	0003      	movs	r3, r0
 800a40e:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800a410:	002c      	movs	r4, r5
 800a412:	193b      	adds	r3, r7, r4
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d009      	beq.n	800a42e <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6818      	ldr	r0, [r3, #0]
 800a41e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a420:	6959      	ldr	r1, [r3, #20]
 800a422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a424:	895a      	ldrh	r2, [r3, #10]
 800a426:	193b      	adds	r3, r7, r4
 800a428:	881b      	ldrh	r3, [r3, #0]
 800a42a:	f005 f909 	bl	800f640 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a42e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a430:	69da      	ldr	r2, [r3, #28]
 800a432:	2124      	movs	r1, #36	@ 0x24
 800a434:	187b      	adds	r3, r7, r1
 800a436:	881b      	ldrh	r3, [r3, #0]
 800a438:	18d2      	adds	r2, r2, r3
 800a43a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a43c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a43e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a440:	695a      	ldr	r2, [r3, #20]
 800a442:	187b      	adds	r3, r7, r1
 800a444:	881b      	ldrh	r3, [r3, #0]
 800a446:	18d2      	adds	r2, r2, r3
 800a448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a44a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d005      	beq.n	800a460 <PCD_EP_ISR_Handler+0x450>
 800a454:	187b      	adds	r3, r7, r1
 800a456:	881a      	ldrh	r2, [r3, #0]
 800a458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d207      	bcs.n	800a470 <PCD_EP_ISR_Handler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a462:	781a      	ldrb	r2, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	0011      	movs	r1, r2
 800a468:	0018      	movs	r0, r3
 800a46a:	f010 fba5 	bl	801abb8 <HAL_PCD_DataOutStageCallback>
 800a46e:	e006      	b.n	800a47e <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a476:	0011      	movs	r1, r2
 800a478:	0018      	movs	r0, r3
 800a47a:	f003 fec7 	bl	800e20c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800a47e:	2032      	movs	r0, #50	@ 0x32
 800a480:	183b      	adds	r3, r7, r0
 800a482:	881b      	ldrh	r3, [r3, #0]
 800a484:	2280      	movs	r2, #128	@ 0x80
 800a486:	4013      	ands	r3, r2
 800a488:	d100      	bne.n	800a48c <PCD_EP_ISR_Handler+0x47c>
 800a48a:	e11c      	b.n	800a6c6 <PCD_EP_ISR_Handler+0x6b6>
      {
        ep = &hpcd->IN_ep[epindex];
 800a48c:	2121      	movs	r1, #33	@ 0x21
 800a48e:	187b      	adds	r3, r7, r1
 800a490:	781a      	ldrb	r2, [r3, #0]
 800a492:	0013      	movs	r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	189b      	adds	r3, r3, r2
 800a498:	00db      	lsls	r3, r3, #3
 800a49a:	3310      	adds	r3, #16
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	18d3      	adds	r3, r2, r3
 800a4a0:	3304      	adds	r3, #4
 800a4a2:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	001a      	movs	r2, r3
 800a4aa:	187b      	adds	r3, r7, r1
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	18d3      	adds	r3, r2, r3
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a8c      	ldr	r2, [pc, #560]	@ (800a6e8 <PCD_EP_ISR_Handler+0x6d8>)
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	001a      	movs	r2, r3
 800a4c0:	187b      	adds	r3, r7, r1
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	18d3      	adds	r3, r2, r3
 800a4c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4ca:	2180      	movs	r1, #128	@ 0x80
 800a4cc:	0209      	lsls	r1, r1, #8
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a4d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d4:	78db      	ldrb	r3, [r3, #3]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d000      	beq.n	800a4dc <PCD_EP_ISR_Handler+0x4cc>
 800a4da:	e0a3      	b.n	800a624 <PCD_EP_ISR_Handler+0x614>
        {
          ep->xfer_len = 0U;
 800a4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4de:	2200      	movs	r2, #0
 800a4e0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a4e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4e4:	7b1b      	ldrb	r3, [r3, #12]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d100      	bne.n	800a4ec <PCD_EP_ISR_Handler+0x4dc>
 800a4ea:	e093      	b.n	800a614 <PCD_EP_ISR_Handler+0x604>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a4ec:	183b      	adds	r3, r7, r0
 800a4ee:	881b      	ldrh	r3, [r3, #0]
 800a4f0:	2240      	movs	r2, #64	@ 0x40
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	d047      	beq.n	800a586 <PCD_EP_ISR_Handler+0x576>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a4f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f8:	785b      	ldrb	r3, [r3, #1]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d121      	bne.n	800a542 <PCD_EP_ISR_Handler+0x532>
 800a4fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	00db      	lsls	r3, r3, #3
 800a504:	4a79      	ldr	r2, [pc, #484]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a506:	4694      	mov	ip, r2
 800a508:	4463      	add	r3, ip
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	00db      	lsls	r3, r3, #3
 800a512:	4976      	ldr	r1, [pc, #472]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a514:	468c      	mov	ip, r1
 800a516:	4463      	add	r3, ip
 800a518:	0192      	lsls	r2, r2, #6
 800a51a:	0992      	lsrs	r2, r2, #6
 800a51c:	601a      	str	r2, [r3, #0]
 800a51e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	4a71      	ldr	r2, [pc, #452]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a526:	4694      	mov	ip, r2
 800a528:	4463      	add	r3, ip
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	00db      	lsls	r3, r3, #3
 800a532:	496e      	ldr	r1, [pc, #440]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a534:	468c      	mov	ip, r1
 800a536:	4463      	add	r3, ip
 800a538:	2180      	movs	r1, #128	@ 0x80
 800a53a:	0609      	lsls	r1, r1, #24
 800a53c:	430a      	orrs	r2, r1
 800a53e:	601a      	str	r2, [r3, #0]
 800a540:	e068      	b.n	800a614 <PCD_EP_ISR_Handler+0x604>
 800a542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a544:	785b      	ldrb	r3, [r3, #1]
 800a546:	2b01      	cmp	r3, #1
 800a548:	d164      	bne.n	800a614 <PCD_EP_ISR_Handler+0x604>
 800a54a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	00db      	lsls	r3, r3, #3
 800a550:	4a66      	ldr	r2, [pc, #408]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a552:	4694      	mov	ip, r2
 800a554:	4463      	add	r3, ip
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	00db      	lsls	r3, r3, #3
 800a55e:	4963      	ldr	r1, [pc, #396]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a560:	468c      	mov	ip, r1
 800a562:	4463      	add	r3, ip
 800a564:	0412      	lsls	r2, r2, #16
 800a566:	0c12      	lsrs	r2, r2, #16
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	4a5e      	ldr	r2, [pc, #376]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a572:	189a      	adds	r2, r3, r2
 800a574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	00db      	lsls	r3, r3, #3
 800a57a:	495c      	ldr	r1, [pc, #368]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a57c:	468c      	mov	ip, r1
 800a57e:	4463      	add	r3, ip
 800a580:	6812      	ldr	r2, [r2, #0]
 800a582:	601a      	str	r2, [r3, #0]
 800a584:	e046      	b.n	800a614 <PCD_EP_ISR_Handler+0x604>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a588:	785b      	ldrb	r3, [r3, #1]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d121      	bne.n	800a5d2 <PCD_EP_ISR_Handler+0x5c2>
 800a58e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	00db      	lsls	r3, r3, #3
 800a594:	4a55      	ldr	r2, [pc, #340]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a596:	4694      	mov	ip, r2
 800a598:	4463      	add	r3, ip
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	00db      	lsls	r3, r3, #3
 800a5a2:	4952      	ldr	r1, [pc, #328]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a5a4:	468c      	mov	ip, r1
 800a5a6:	4463      	add	r3, ip
 800a5a8:	0192      	lsls	r2, r2, #6
 800a5aa:	0992      	lsrs	r2, r2, #6
 800a5ac:	605a      	str	r2, [r3, #4]
 800a5ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	00db      	lsls	r3, r3, #3
 800a5b4:	4a4d      	ldr	r2, [pc, #308]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a5b6:	4694      	mov	ip, r2
 800a5b8:	4463      	add	r3, ip
 800a5ba:	685a      	ldr	r2, [r3, #4]
 800a5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	00db      	lsls	r3, r3, #3
 800a5c2:	494a      	ldr	r1, [pc, #296]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a5c4:	468c      	mov	ip, r1
 800a5c6:	4463      	add	r3, ip
 800a5c8:	2180      	movs	r1, #128	@ 0x80
 800a5ca:	0609      	lsls	r1, r1, #24
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	605a      	str	r2, [r3, #4]
 800a5d0:	e020      	b.n	800a614 <PCD_EP_ISR_Handler+0x604>
 800a5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5d4:	785b      	ldrb	r3, [r3, #1]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d11c      	bne.n	800a614 <PCD_EP_ISR_Handler+0x604>
 800a5da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	00db      	lsls	r3, r3, #3
 800a5e0:	4a42      	ldr	r2, [pc, #264]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a5e2:	4694      	mov	ip, r2
 800a5e4:	4463      	add	r3, ip
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	00db      	lsls	r3, r3, #3
 800a5ee:	493f      	ldr	r1, [pc, #252]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a5f0:	468c      	mov	ip, r1
 800a5f2:	4463      	add	r3, ip
 800a5f4:	0412      	lsls	r2, r2, #16
 800a5f6:	0c12      	lsrs	r2, r2, #16
 800a5f8:	605a      	str	r2, [r3, #4]
 800a5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	00db      	lsls	r3, r3, #3
 800a600:	4a3a      	ldr	r2, [pc, #232]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a602:	189a      	adds	r2, r3, r2
 800a604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	00db      	lsls	r3, r3, #3
 800a60a:	4938      	ldr	r1, [pc, #224]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a60c:	468c      	mov	ip, r1
 800a60e:	4463      	add	r3, ip
 800a610:	6852      	ldr	r2, [r2, #4]
 800a612:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a616:	781a      	ldrb	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	0011      	movs	r1, r2
 800a61c:	0018      	movs	r0, r3
 800a61e:	f010 fa35 	bl	801aa8c <HAL_PCD_DataInStageCallback>
 800a622:	e050      	b.n	800a6c6 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800a624:	2332      	movs	r3, #50	@ 0x32
 800a626:	18fb      	adds	r3, r7, r3
 800a628:	881a      	ldrh	r2, [r3, #0]
 800a62a:	2380      	movs	r3, #128	@ 0x80
 800a62c:	005b      	lsls	r3, r3, #1
 800a62e:	4013      	ands	r3, r2
 800a630:	d141      	bne.n	800a6b6 <PCD_EP_ISR_Handler+0x6a6>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	00db      	lsls	r3, r3, #3
 800a638:	4a2c      	ldr	r2, [pc, #176]	@ (800a6ec <PCD_EP_ISR_Handler+0x6dc>)
 800a63a:	4694      	mov	ip, r2
 800a63c:	4463      	add	r3, ip
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	0c1b      	lsrs	r3, r3, #16
 800a642:	b29a      	uxth	r2, r3
 800a644:	2126      	movs	r1, #38	@ 0x26
 800a646:	187b      	adds	r3, r7, r1
 800a648:	0592      	lsls	r2, r2, #22
 800a64a:	0d92      	lsrs	r2, r2, #22
 800a64c:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800a64e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a650:	699a      	ldr	r2, [r3, #24]
 800a652:	187b      	adds	r3, r7, r1
 800a654:	881b      	ldrh	r3, [r3, #0]
 800a656:	429a      	cmp	r2, r3
 800a658:	d907      	bls.n	800a66a <PCD_EP_ISR_Handler+0x65a>
            {
              ep->xfer_len -= TxPctSize;
 800a65a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a65c:	699a      	ldr	r2, [r3, #24]
 800a65e:	187b      	adds	r3, r7, r1
 800a660:	881b      	ldrh	r3, [r3, #0]
 800a662:	1ad2      	subs	r2, r2, r3
 800a664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a666:	619a      	str	r2, [r3, #24]
 800a668:	e002      	b.n	800a670 <PCD_EP_ISR_Handler+0x660>
            }
            else
            {
              ep->xfer_len = 0U;
 800a66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a66c:	2200      	movs	r2, #0
 800a66e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800a670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a672:	699b      	ldr	r3, [r3, #24]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d107      	bne.n	800a688 <PCD_EP_ISR_Handler+0x678>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a67a:	781a      	ldrb	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	0011      	movs	r1, r2
 800a680:	0018      	movs	r0, r3
 800a682:	f010 fa03 	bl	801aa8c <HAL_PCD_DataInStageCallback>
 800a686:	e01e      	b.n	800a6c6 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68a:	695a      	ldr	r2, [r3, #20]
 800a68c:	2126      	movs	r1, #38	@ 0x26
 800a68e:	187b      	adds	r3, r7, r1
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	18d2      	adds	r2, r2, r3
 800a694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a696:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a69a:	69da      	ldr	r2, [r3, #28]
 800a69c:	187b      	adds	r3, r7, r1
 800a69e:	881b      	ldrh	r3, [r3, #0]
 800a6a0:	18d2      	adds	r2, r2, r3
 800a6a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6a4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6ac:	0011      	movs	r1, r2
 800a6ae:	0018      	movs	r0, r3
 800a6b0:	f003 fdac 	bl	800e20c <USB_EPStartXfer>
 800a6b4:	e007      	b.n	800a6c6 <PCD_EP_ISR_Handler+0x6b6>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a6b6:	2332      	movs	r3, #50	@ 0x32
 800a6b8:	18fb      	adds	r3, r7, r3
 800a6ba:	881a      	ldrh	r2, [r3, #0]
 800a6bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	0018      	movs	r0, r3
 800a6c2:	f000 f8ff 	bl	800a8c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6cc:	2380      	movs	r3, #128	@ 0x80
 800a6ce:	021b      	lsls	r3, r3, #8
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	d000      	beq.n	800a6d6 <PCD_EP_ISR_Handler+0x6c6>
 800a6d4:	e4a1      	b.n	800a01a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	0018      	movs	r0, r3
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	b00e      	add	sp, #56	@ 0x38
 800a6de:	bdb0      	pop	{r4, r5, r7, pc}
 800a6e0:	07ff8f8f 	.word	0x07ff8f8f
 800a6e4:	000080c0 	.word	0x000080c0
 800a6e8:	07ff8f0f 	.word	0x07ff8f0f
 800a6ec:	40009800 	.word	0x40009800

0800a6f0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a6f0:	b5b0      	push	{r4, r5, r7, lr}
 800a6f2:	b08a      	sub	sp, #40	@ 0x28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	1dbb      	adds	r3, r7, #6
 800a6fc:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a6fe:	1dbb      	adds	r3, r7, #6
 800a700:	881a      	ldrh	r2, [r3, #0]
 800a702:	2380      	movs	r3, #128	@ 0x80
 800a704:	01db      	lsls	r3, r3, #7
 800a706:	4013      	ands	r3, r2
 800a708:	d067      	beq.n	800a7da <HAL_PCD_EP_DB_Receive+0xea>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	251e      	movs	r5, #30
 800a714:	197c      	adds	r4, r7, r5
 800a716:	0019      	movs	r1, r3
 800a718:	0010      	movs	r0, r2
 800a71a:	f7fe ff1d 	bl	8009558 <PCD_GET_EP_DBUF0_CNT>
 800a71e:	0003      	movs	r3, r0
 800a720:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	699a      	ldr	r2, [r3, #24]
 800a726:	197b      	adds	r3, r7, r5
 800a728:	881b      	ldrh	r3, [r3, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d307      	bcc.n	800a73e <HAL_PCD_EP_DB_Receive+0x4e>
    {
      ep->xfer_len -= count;
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	699a      	ldr	r2, [r3, #24]
 800a732:	197b      	adds	r3, r7, r5
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	1ad2      	subs	r2, r2, r3
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	619a      	str	r2, [r3, #24]
 800a73c:	e002      	b.n	800a744 <HAL_PCD_EP_DB_Receive+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	2200      	movs	r2, #0
 800a742:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d11a      	bne.n	800a782 <HAL_PCD_EP_DB_Receive+0x92>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	001a      	movs	r2, r3
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	18d3      	adds	r3, r2, r3
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a55      	ldr	r2, [pc, #340]	@ (800a8b4 <HAL_PCD_EP_DB_Receive+0x1c4>)
 800a75e:	4013      	ands	r3, r2
 800a760:	61bb      	str	r3, [r7, #24]
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	2280      	movs	r2, #128	@ 0x80
 800a766:	0192      	lsls	r2, r2, #6
 800a768:	4053      	eors	r3, r2
 800a76a:	61bb      	str	r3, [r7, #24]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	001a      	movs	r2, r3
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	18d3      	adds	r3, r2, r3
 800a77a:	69ba      	ldr	r2, [r7, #24]
 800a77c:	494e      	ldr	r1, [pc, #312]	@ (800a8b8 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800a77e:	430a      	orrs	r2, r1
 800a780:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a782:	1dbb      	adds	r3, r7, #6
 800a784:	881b      	ldrh	r3, [r3, #0]
 800a786:	2240      	movs	r2, #64	@ 0x40
 800a788:	4013      	ands	r3, r2
 800a78a:	d015      	beq.n	800a7b8 <HAL_PCD_EP_DB_Receive+0xc8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	001a      	movs	r2, r3
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	18d3      	adds	r3, r2, r3
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a47      	ldr	r2, [pc, #284]	@ (800a8bc <HAL_PCD_EP_DB_Receive+0x1cc>)
 800a79e:	4013      	ands	r3, r2
 800a7a0:	617b      	str	r3, [r7, #20]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	001a      	movs	r2, r3
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	18d3      	adds	r3, r2, r3
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	4943      	ldr	r1, [pc, #268]	@ (800a8c0 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800a7b4:	430a      	orrs	r2, r1
 800a7b6:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800a7b8:	241e      	movs	r4, #30
 800a7ba:	193b      	adds	r3, r7, r4
 800a7bc:	881b      	ldrh	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d100      	bne.n	800a7c4 <HAL_PCD_EP_DB_Receive+0xd4>
 800a7c2:	e070      	b.n	800a8a6 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6818      	ldr	r0, [r3, #0]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	6959      	ldr	r1, [r3, #20]
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	891a      	ldrh	r2, [r3, #8]
 800a7d0:	193b      	adds	r3, r7, r4
 800a7d2:	881b      	ldrh	r3, [r3, #0]
 800a7d4:	f004 ff34 	bl	800f640 <USB_ReadPMA>
 800a7d8:	e065      	b.n	800a8a6 <HAL_PCD_EP_DB_Receive+0x1b6>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	251e      	movs	r5, #30
 800a7e4:	197c      	adds	r4, r7, r5
 800a7e6:	0019      	movs	r1, r3
 800a7e8:	0010      	movs	r0, r2
 800a7ea:	f7fe fed7 	bl	800959c <PCD_GET_EP_DBUF1_CNT>
 800a7ee:	0003      	movs	r3, r0
 800a7f0:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	699a      	ldr	r2, [r3, #24]
 800a7f6:	197b      	adds	r3, r7, r5
 800a7f8:	881b      	ldrh	r3, [r3, #0]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d307      	bcc.n	800a80e <HAL_PCD_EP_DB_Receive+0x11e>
    {
      ep->xfer_len -= count;
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	699a      	ldr	r2, [r3, #24]
 800a802:	197b      	adds	r3, r7, r5
 800a804:	881b      	ldrh	r3, [r3, #0]
 800a806:	1ad2      	subs	r2, r2, r3
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	619a      	str	r2, [r3, #24]
 800a80c:	e002      	b.n	800a814 <HAL_PCD_EP_DB_Receive+0x124>
    }
    else
    {
      ep->xfer_len = 0U;
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	2200      	movs	r2, #0
 800a812:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d11a      	bne.n	800a852 <HAL_PCD_EP_DB_Receive+0x162>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	001a      	movs	r2, r3
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	18d3      	adds	r3, r2, r3
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a21      	ldr	r2, [pc, #132]	@ (800a8b4 <HAL_PCD_EP_DB_Receive+0x1c4>)
 800a82e:	4013      	ands	r3, r2
 800a830:	627b      	str	r3, [r7, #36]	@ 0x24
 800a832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a834:	2280      	movs	r2, #128	@ 0x80
 800a836:	0192      	lsls	r2, r2, #6
 800a838:	4053      	eors	r3, r2
 800a83a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	001a      	movs	r2, r3
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	18d3      	adds	r3, r2, r3
 800a84a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a84c:	491a      	ldr	r1, [pc, #104]	@ (800a8b8 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800a84e:	430a      	orrs	r2, r1
 800a850:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a852:	1dbb      	adds	r3, r7, #6
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	2240      	movs	r2, #64	@ 0x40
 800a858:	4013      	ands	r3, r2
 800a85a:	d115      	bne.n	800a888 <HAL_PCD_EP_DB_Receive+0x198>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	001a      	movs	r2, r3
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	18d3      	adds	r3, r2, r3
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a13      	ldr	r2, [pc, #76]	@ (800a8bc <HAL_PCD_EP_DB_Receive+0x1cc>)
 800a86e:	4013      	ands	r3, r2
 800a870:	623b      	str	r3, [r7, #32]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	001a      	movs	r2, r3
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	18d3      	adds	r3, r2, r3
 800a880:	6a3a      	ldr	r2, [r7, #32]
 800a882:	490f      	ldr	r1, [pc, #60]	@ (800a8c0 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800a884:	430a      	orrs	r2, r1
 800a886:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800a888:	241e      	movs	r4, #30
 800a88a:	193b      	adds	r3, r7, r4
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d009      	beq.n	800a8a6 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6818      	ldr	r0, [r3, #0]
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	6959      	ldr	r1, [r3, #20]
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	895a      	ldrh	r2, [r3, #10]
 800a89e:	193b      	adds	r3, r7, r4
 800a8a0:	881b      	ldrh	r3, [r3, #0]
 800a8a2:	f004 fecd 	bl	800f640 <USB_ReadPMA>
    }
  }

  return count;
 800a8a6:	231e      	movs	r3, #30
 800a8a8:	18fb      	adds	r3, r7, r3
 800a8aa:	881b      	ldrh	r3, [r3, #0]
}
 800a8ac:	0018      	movs	r0, r3
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	b00a      	add	sp, #40	@ 0x28
 800a8b2:	bdb0      	pop	{r4, r5, r7, pc}
 800a8b4:	07ffbf8f 	.word	0x07ffbf8f
 800a8b8:	00008080 	.word	0x00008080
 800a8bc:	07ff8f8f 	.word	0x07ff8f8f
 800a8c0:	000080c0 	.word	0x000080c0

0800a8c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a8c4:	b5b0      	push	{r4, r5, r7, lr}
 800a8c6:	b08e      	sub	sp, #56	@ 0x38
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	1dbb      	adds	r3, r7, #6
 800a8d0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a8d2:	1dbb      	adds	r3, r7, #6
 800a8d4:	881b      	ldrh	r3, [r3, #0]
 800a8d6:	2240      	movs	r2, #64	@ 0x40
 800a8d8:	4013      	ands	r3, r2
 800a8da:	d100      	bne.n	800a8de <HAL_PCD_EP_DB_Transmit+0x1a>
 800a8dc:	e1c3      	b.n	800ac66 <HAL_PCD_EP_DB_Transmit+0x3a2>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	251e      	movs	r5, #30
 800a8e8:	197c      	adds	r4, r7, r5
 800a8ea:	0019      	movs	r1, r3
 800a8ec:	0010      	movs	r0, r2
 800a8ee:	f7fe fe33 	bl	8009558 <PCD_GET_EP_DBUF0_CNT>
 800a8f2:	0003      	movs	r3, r0
 800a8f4:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	699a      	ldr	r2, [r3, #24]
 800a8fa:	197b      	adds	r3, r7, r5
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d907      	bls.n	800a912 <HAL_PCD_EP_DB_Transmit+0x4e>
    {
      ep->xfer_len -= TxPctSize;
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	699a      	ldr	r2, [r3, #24]
 800a906:	197b      	adds	r3, r7, r5
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	1ad2      	subs	r2, r2, r3
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	619a      	str	r2, [r3, #24]
 800a910:	e002      	b.n	800a918 <HAL_PCD_EP_DB_Transmit+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	2200      	movs	r2, #0
 800a916:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d000      	beq.n	800a922 <HAL_PCD_EP_DB_Transmit+0x5e>
 800a920:	e0b2      	b.n	800aa88 <HAL_PCD_EP_DB_Transmit+0x1c4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	785b      	ldrb	r3, [r3, #1]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d121      	bne.n	800a96e <HAL_PCD_EP_DB_Transmit+0xaa>
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	00db      	lsls	r3, r3, #3
 800a930:	4ada      	ldr	r2, [pc, #872]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a932:	4694      	mov	ip, r2
 800a934:	4463      	add	r3, ip
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	00db      	lsls	r3, r3, #3
 800a93e:	49d7      	ldr	r1, [pc, #860]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a940:	468c      	mov	ip, r1
 800a942:	4463      	add	r3, ip
 800a944:	0192      	lsls	r2, r2, #6
 800a946:	0992      	lsrs	r2, r2, #6
 800a948:	601a      	str	r2, [r3, #0]
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	00db      	lsls	r3, r3, #3
 800a950:	4ad2      	ldr	r2, [pc, #840]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a952:	4694      	mov	ip, r2
 800a954:	4463      	add	r3, ip
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	00db      	lsls	r3, r3, #3
 800a95e:	49cf      	ldr	r1, [pc, #828]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a960:	468c      	mov	ip, r1
 800a962:	4463      	add	r3, ip
 800a964:	2180      	movs	r1, #128	@ 0x80
 800a966:	0609      	lsls	r1, r1, #24
 800a968:	430a      	orrs	r2, r1
 800a96a:	601a      	str	r2, [r3, #0]
 800a96c:	e020      	b.n	800a9b0 <HAL_PCD_EP_DB_Transmit+0xec>
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	785b      	ldrb	r3, [r3, #1]
 800a972:	2b01      	cmp	r3, #1
 800a974:	d11c      	bne.n	800a9b0 <HAL_PCD_EP_DB_Transmit+0xec>
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	4ac7      	ldr	r2, [pc, #796]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a97e:	4694      	mov	ip, r2
 800a980:	4463      	add	r3, ip
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	00db      	lsls	r3, r3, #3
 800a98a:	49c4      	ldr	r1, [pc, #784]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a98c:	468c      	mov	ip, r1
 800a98e:	4463      	add	r3, ip
 800a990:	0412      	lsls	r2, r2, #16
 800a992:	0c12      	lsrs	r2, r2, #16
 800a994:	601a      	str	r2, [r3, #0]
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	4abf      	ldr	r2, [pc, #764]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a99e:	189a      	adds	r2, r3, r2
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	00db      	lsls	r3, r3, #3
 800a9a6:	49bd      	ldr	r1, [pc, #756]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a9a8:	468c      	mov	ip, r1
 800a9aa:	4463      	add	r3, ip
 800a9ac:	6812      	ldr	r2, [r2, #0]
 800a9ae:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	785b      	ldrb	r3, [r3, #1]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d121      	bne.n	800a9fc <HAL_PCD_EP_DB_Transmit+0x138>
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	00db      	lsls	r3, r3, #3
 800a9be:	4ab7      	ldr	r2, [pc, #732]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a9c0:	4694      	mov	ip, r2
 800a9c2:	4463      	add	r3, ip
 800a9c4:	685a      	ldr	r2, [r3, #4]
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	00db      	lsls	r3, r3, #3
 800a9cc:	49b3      	ldr	r1, [pc, #716]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a9ce:	468c      	mov	ip, r1
 800a9d0:	4463      	add	r3, ip
 800a9d2:	0192      	lsls	r2, r2, #6
 800a9d4:	0992      	lsrs	r2, r2, #6
 800a9d6:	605a      	str	r2, [r3, #4]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	00db      	lsls	r3, r3, #3
 800a9de:	4aaf      	ldr	r2, [pc, #700]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a9e0:	4694      	mov	ip, r2
 800a9e2:	4463      	add	r3, ip
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	00db      	lsls	r3, r3, #3
 800a9ec:	49ab      	ldr	r1, [pc, #684]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a9ee:	468c      	mov	ip, r1
 800a9f0:	4463      	add	r3, ip
 800a9f2:	2180      	movs	r1, #128	@ 0x80
 800a9f4:	0609      	lsls	r1, r1, #24
 800a9f6:	430a      	orrs	r2, r1
 800a9f8:	605a      	str	r2, [r3, #4]
 800a9fa:	e020      	b.n	800aa3e <HAL_PCD_EP_DB_Transmit+0x17a>
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	785b      	ldrb	r3, [r3, #1]
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d11c      	bne.n	800aa3e <HAL_PCD_EP_DB_Transmit+0x17a>
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	00db      	lsls	r3, r3, #3
 800aa0a:	4aa4      	ldr	r2, [pc, #656]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aa0c:	4694      	mov	ip, r2
 800aa0e:	4463      	add	r3, ip
 800aa10:	685a      	ldr	r2, [r3, #4]
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	00db      	lsls	r3, r3, #3
 800aa18:	49a0      	ldr	r1, [pc, #640]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aa1a:	468c      	mov	ip, r1
 800aa1c:	4463      	add	r3, ip
 800aa1e:	0412      	lsls	r2, r2, #16
 800aa20:	0c12      	lsrs	r2, r2, #16
 800aa22:	605a      	str	r2, [r3, #4]
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	00db      	lsls	r3, r3, #3
 800aa2a:	4a9c      	ldr	r2, [pc, #624]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aa2c:	189a      	adds	r2, r3, r2
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	00db      	lsls	r3, r3, #3
 800aa34:	4999      	ldr	r1, [pc, #612]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aa36:	468c      	mov	ip, r1
 800aa38:	4463      	add	r3, ip
 800aa3a:	6852      	ldr	r2, [r2, #4]
 800aa3c:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	781a      	ldrb	r2, [r3, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	0011      	movs	r1, r2
 800aa46:	0018      	movs	r0, r3
 800aa48:	f010 f820 	bl	801aa8c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800aa4c:	1dbb      	adds	r3, r7, #6
 800aa4e:	881a      	ldrh	r2, [r3, #0]
 800aa50:	2380      	movs	r3, #128	@ 0x80
 800aa52:	01db      	lsls	r3, r3, #7
 800aa54:	4013      	ands	r3, r2
 800aa56:	d100      	bne.n	800aa5a <HAL_PCD_EP_DB_Transmit+0x196>
 800aa58:	e2d5      	b.n	800b006 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	001a      	movs	r2, r3
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	18d3      	adds	r3, r2, r3
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a8d      	ldr	r2, [pc, #564]	@ (800aca0 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	001a      	movs	r2, r3
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	18d3      	adds	r3, r2, r3
 800aa7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa80:	4988      	ldr	r1, [pc, #544]	@ (800aca4 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800aa82:	430a      	orrs	r2, r1
 800aa84:	601a      	str	r2, [r3, #0]
 800aa86:	e2be      	b.n	800b006 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800aa88:	1dbb      	adds	r3, r7, #6
 800aa8a:	881a      	ldrh	r2, [r3, #0]
 800aa8c:	2380      	movs	r3, #128	@ 0x80
 800aa8e:	01db      	lsls	r3, r3, #7
 800aa90:	4013      	ands	r3, r2
 800aa92:	d015      	beq.n	800aac0 <HAL_PCD_EP_DB_Transmit+0x1fc>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	001a      	movs	r2, r3
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	18d3      	adds	r3, r2, r3
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a7e      	ldr	r2, [pc, #504]	@ (800aca0 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	001a      	movs	r2, r3
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	18d3      	adds	r3, r2, r3
 800aab8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aaba:	497a      	ldr	r1, [pc, #488]	@ (800aca4 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800aabc:	430a      	orrs	r2, r1
 800aabe:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	2224      	movs	r2, #36	@ 0x24
 800aac4:	5c9b      	ldrb	r3, [r3, r2]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d000      	beq.n	800aacc <HAL_PCD_EP_DB_Transmit+0x208>
 800aaca:	e29c      	b.n	800b006 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	695a      	ldr	r2, [r3, #20]
 800aad0:	211e      	movs	r1, #30
 800aad2:	187b      	adds	r3, r7, r1
 800aad4:	881b      	ldrh	r3, [r3, #0]
 800aad6:	18d2      	adds	r2, r2, r3
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	69da      	ldr	r2, [r3, #28]
 800aae0:	187b      	adds	r3, r7, r1
 800aae2:	881b      	ldrh	r3, [r3, #0]
 800aae4:	18d2      	adds	r2, r2, r3
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	6a1a      	ldr	r2, [r3, #32]
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d309      	bcc.n	800ab0a <HAL_PCD_EP_DB_Transmit+0x246>
        {
          len = ep->maxpacket;
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	6a1a      	ldr	r2, [r3, #32]
 800ab00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab02:	1ad2      	subs	r2, r2, r3
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	621a      	str	r2, [r3, #32]
 800ab08:	e016      	b.n	800ab38 <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else if (ep->xfer_len_db == 0U)
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d108      	bne.n	800ab24 <HAL_PCD_EP_DB_Transmit+0x260>
        {
          len = TxPctSize;
 800ab12:	231e      	movs	r3, #30
 800ab14:	18fb      	adds	r3, r7, r3
 800ab16:	881b      	ldrh	r3, [r3, #0]
 800ab18:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	2224      	movs	r2, #36	@ 0x24
 800ab1e:	2100      	movs	r1, #0
 800ab20:	5499      	strb	r1, [r3, r2]
 800ab22:	e009      	b.n	800ab38 <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	2224      	movs	r2, #36	@ 0x24
 800ab28:	2100      	movs	r1, #0
 800ab2a:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	6a1b      	ldr	r3, [r3, #32]
 800ab30:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	2200      	movs	r2, #0
 800ab36:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	785b      	ldrb	r3, [r3, #1]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d162      	bne.n	800ac06 <HAL_PCD_EP_DB_Transmit+0x342>
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	00db      	lsls	r3, r3, #3
 800ab46:	4a55      	ldr	r2, [pc, #340]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ab48:	4694      	mov	ip, r2
 800ab4a:	4463      	add	r3, ip
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	00db      	lsls	r3, r3, #3
 800ab54:	4951      	ldr	r1, [pc, #324]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ab56:	468c      	mov	ip, r1
 800ab58:	4463      	add	r3, ip
 800ab5a:	0192      	lsls	r2, r2, #6
 800ab5c:	0992      	lsrs	r2, r2, #6
 800ab5e:	601a      	str	r2, [r3, #0]
 800ab60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab62:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab64:	d91e      	bls.n	800aba4 <HAL_PCD_EP_DB_Transmit+0x2e0>
 800ab66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab68:	095b      	lsrs	r3, r3, #5
 800ab6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6e:	221f      	movs	r2, #31
 800ab70:	4013      	ands	r3, r2
 800ab72:	d102      	bne.n	800ab7a <HAL_PCD_EP_DB_Transmit+0x2b6>
 800ab74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab76:	3b01      	subs	r3, #1
 800ab78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	4a46      	ldr	r2, [pc, #280]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ab82:	4694      	mov	ip, r2
 800ab84:	4463      	add	r3, ip
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab8a:	069b      	lsls	r3, r3, #26
 800ab8c:	431a      	orrs	r2, r3
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	00db      	lsls	r3, r3, #3
 800ab94:	4941      	ldr	r1, [pc, #260]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ab96:	468c      	mov	ip, r1
 800ab98:	4463      	add	r3, ip
 800ab9a:	2180      	movs	r1, #128	@ 0x80
 800ab9c:	0609      	lsls	r1, r1, #24
 800ab9e:	430a      	orrs	r2, r1
 800aba0:	601a      	str	r2, [r3, #0]
 800aba2:	e055      	b.n	800ac50 <HAL_PCD_EP_DB_Transmit+0x38c>
 800aba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d111      	bne.n	800abce <HAL_PCD_EP_DB_Transmit+0x30a>
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	00db      	lsls	r3, r3, #3
 800abb0:	4a3a      	ldr	r2, [pc, #232]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800abb2:	4694      	mov	ip, r2
 800abb4:	4463      	add	r3, ip
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	00db      	lsls	r3, r3, #3
 800abbe:	4937      	ldr	r1, [pc, #220]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800abc0:	468c      	mov	ip, r1
 800abc2:	4463      	add	r3, ip
 800abc4:	2180      	movs	r1, #128	@ 0x80
 800abc6:	0609      	lsls	r1, r1, #24
 800abc8:	430a      	orrs	r2, r1
 800abca:	601a      	str	r2, [r3, #0]
 800abcc:	e040      	b.n	800ac50 <HAL_PCD_EP_DB_Transmit+0x38c>
 800abce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd0:	085b      	lsrs	r3, r3, #1
 800abd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800abd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd6:	2201      	movs	r2, #1
 800abd8:	4013      	ands	r3, r2
 800abda:	d002      	beq.n	800abe2 <HAL_PCD_EP_DB_Transmit+0x31e>
 800abdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abde:	3301      	adds	r3, #1
 800abe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	00db      	lsls	r3, r3, #3
 800abe8:	4a2c      	ldr	r2, [pc, #176]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800abea:	4694      	mov	ip, r2
 800abec:	4463      	add	r3, ip
 800abee:	6819      	ldr	r1, [r3, #0]
 800abf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf2:	069a      	lsls	r2, r3, #26
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	00db      	lsls	r3, r3, #3
 800abfa:	4828      	ldr	r0, [pc, #160]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800abfc:	4684      	mov	ip, r0
 800abfe:	4463      	add	r3, ip
 800ac00:	430a      	orrs	r2, r1
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	e024      	b.n	800ac50 <HAL_PCD_EP_DB_Transmit+0x38c>
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	785b      	ldrb	r3, [r3, #1]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d120      	bne.n	800ac50 <HAL_PCD_EP_DB_Transmit+0x38c>
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	00db      	lsls	r3, r3, #3
 800ac14:	4a21      	ldr	r2, [pc, #132]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ac16:	4694      	mov	ip, r2
 800ac18:	4463      	add	r3, ip
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	00db      	lsls	r3, r3, #3
 800ac22:	491e      	ldr	r1, [pc, #120]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ac24:	468c      	mov	ip, r1
 800ac26:	4463      	add	r3, ip
 800ac28:	0412      	lsls	r2, r2, #16
 800ac2a:	0c12      	lsrs	r2, r2, #16
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	00db      	lsls	r3, r3, #3
 800ac34:	4a19      	ldr	r2, [pc, #100]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ac36:	4694      	mov	ip, r2
 800ac38:	4463      	add	r3, ip
 800ac3a:	6819      	ldr	r1, [r3, #0]
 800ac3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3e:	041a      	lsls	r2, r3, #16
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	00db      	lsls	r3, r3, #3
 800ac46:	4815      	ldr	r0, [pc, #84]	@ (800ac9c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ac48:	4684      	mov	ip, r0
 800ac4a:	4463      	add	r3, ip
 800ac4c:	430a      	orrs	r2, r1
 800ac4e:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6818      	ldr	r0, [r3, #0]
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	6959      	ldr	r1, [r3, #20]
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	891a      	ldrh	r2, [r3, #8]
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	f004 fc78 	bl	800f554 <USB_WritePMA>
 800ac64:	e1cf      	b.n	800b006 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	251e      	movs	r5, #30
 800ac70:	197c      	adds	r4, r7, r5
 800ac72:	0019      	movs	r1, r3
 800ac74:	0010      	movs	r0, r2
 800ac76:	f7fe fc91 	bl	800959c <PCD_GET_EP_DBUF1_CNT>
 800ac7a:	0003      	movs	r3, r0
 800ac7c:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	699a      	ldr	r2, [r3, #24]
 800ac82:	197b      	adds	r3, r7, r5
 800ac84:	881b      	ldrh	r3, [r3, #0]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d30e      	bcc.n	800aca8 <HAL_PCD_EP_DB_Transmit+0x3e4>
    {
      ep->xfer_len -= TxPctSize;
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	699a      	ldr	r2, [r3, #24]
 800ac8e:	197b      	adds	r3, r7, r5
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	1ad2      	subs	r2, r2, r3
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	619a      	str	r2, [r3, #24]
 800ac98:	e009      	b.n	800acae <HAL_PCD_EP_DB_Transmit+0x3ea>
 800ac9a:	46c0      	nop			@ (mov r8, r8)
 800ac9c:	40009800 	.word	0x40009800
 800aca0:	07ff8f8f 	.word	0x07ff8f8f
 800aca4:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2200      	movs	r2, #0
 800acac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	699b      	ldr	r3, [r3, #24]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d000      	beq.n	800acb8 <HAL_PCD_EP_DB_Transmit+0x3f4>
 800acb6:	e0b2      	b.n	800ae1e <HAL_PCD_EP_DB_Transmit+0x55a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	785b      	ldrb	r3, [r3, #1]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d121      	bne.n	800ad04 <HAL_PCD_EP_DB_Transmit+0x440>
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	00db      	lsls	r3, r3, #3
 800acc6:	4ab5      	ldr	r2, [pc, #724]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800acc8:	4694      	mov	ip, r2
 800acca:	4463      	add	r3, ip
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	00db      	lsls	r3, r3, #3
 800acd4:	49b1      	ldr	r1, [pc, #708]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800acd6:	468c      	mov	ip, r1
 800acd8:	4463      	add	r3, ip
 800acda:	0192      	lsls	r2, r2, #6
 800acdc:	0992      	lsrs	r2, r2, #6
 800acde:	601a      	str	r2, [r3, #0]
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	00db      	lsls	r3, r3, #3
 800ace6:	4aad      	ldr	r2, [pc, #692]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ace8:	4694      	mov	ip, r2
 800acea:	4463      	add	r3, ip
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	49a9      	ldr	r1, [pc, #676]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800acf6:	468c      	mov	ip, r1
 800acf8:	4463      	add	r3, ip
 800acfa:	2180      	movs	r1, #128	@ 0x80
 800acfc:	0609      	lsls	r1, r1, #24
 800acfe:	430a      	orrs	r2, r1
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	e020      	b.n	800ad46 <HAL_PCD_EP_DB_Transmit+0x482>
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	785b      	ldrb	r3, [r3, #1]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d11c      	bne.n	800ad46 <HAL_PCD_EP_DB_Transmit+0x482>
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	00db      	lsls	r3, r3, #3
 800ad12:	4aa2      	ldr	r2, [pc, #648]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ad14:	4694      	mov	ip, r2
 800ad16:	4463      	add	r3, ip
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	499e      	ldr	r1, [pc, #632]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ad22:	468c      	mov	ip, r1
 800ad24:	4463      	add	r3, ip
 800ad26:	0412      	lsls	r2, r2, #16
 800ad28:	0c12      	lsrs	r2, r2, #16
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	00db      	lsls	r3, r3, #3
 800ad32:	4a9a      	ldr	r2, [pc, #616]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ad34:	189a      	adds	r2, r3, r2
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	00db      	lsls	r3, r3, #3
 800ad3c:	4997      	ldr	r1, [pc, #604]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ad3e:	468c      	mov	ip, r1
 800ad40:	4463      	add	r3, ip
 800ad42:	6812      	ldr	r2, [r2, #0]
 800ad44:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	785b      	ldrb	r3, [r3, #1]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d121      	bne.n	800ad92 <HAL_PCD_EP_DB_Transmit+0x4ce>
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	00db      	lsls	r3, r3, #3
 800ad54:	4a91      	ldr	r2, [pc, #580]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ad56:	4694      	mov	ip, r2
 800ad58:	4463      	add	r3, ip
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	00db      	lsls	r3, r3, #3
 800ad62:	498e      	ldr	r1, [pc, #568]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ad64:	468c      	mov	ip, r1
 800ad66:	4463      	add	r3, ip
 800ad68:	0192      	lsls	r2, r2, #6
 800ad6a:	0992      	lsrs	r2, r2, #6
 800ad6c:	605a      	str	r2, [r3, #4]
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	4a89      	ldr	r2, [pc, #548]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ad76:	4694      	mov	ip, r2
 800ad78:	4463      	add	r3, ip
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	00db      	lsls	r3, r3, #3
 800ad82:	4986      	ldr	r1, [pc, #536]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ad84:	468c      	mov	ip, r1
 800ad86:	4463      	add	r3, ip
 800ad88:	2180      	movs	r1, #128	@ 0x80
 800ad8a:	0609      	lsls	r1, r1, #24
 800ad8c:	430a      	orrs	r2, r1
 800ad8e:	605a      	str	r2, [r3, #4]
 800ad90:	e020      	b.n	800add4 <HAL_PCD_EP_DB_Transmit+0x510>
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	785b      	ldrb	r3, [r3, #1]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d11c      	bne.n	800add4 <HAL_PCD_EP_DB_Transmit+0x510>
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	00db      	lsls	r3, r3, #3
 800ada0:	4a7e      	ldr	r2, [pc, #504]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ada2:	4694      	mov	ip, r2
 800ada4:	4463      	add	r3, ip
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	00db      	lsls	r3, r3, #3
 800adae:	497b      	ldr	r1, [pc, #492]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800adb0:	468c      	mov	ip, r1
 800adb2:	4463      	add	r3, ip
 800adb4:	0412      	lsls	r2, r2, #16
 800adb6:	0c12      	lsrs	r2, r2, #16
 800adb8:	605a      	str	r2, [r3, #4]
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	00db      	lsls	r3, r3, #3
 800adc0:	4a76      	ldr	r2, [pc, #472]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800adc2:	189a      	adds	r2, r3, r2
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	00db      	lsls	r3, r3, #3
 800adca:	4974      	ldr	r1, [pc, #464]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800adcc:	468c      	mov	ip, r1
 800adce:	4463      	add	r3, ip
 800add0:	6852      	ldr	r2, [r2, #4]
 800add2:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	781a      	ldrb	r2, [r3, #0]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	0011      	movs	r1, r2
 800addc:	0018      	movs	r0, r3
 800adde:	f00f fe55 	bl	801aa8c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ade2:	1dbb      	adds	r3, r7, #6
 800ade4:	881a      	ldrh	r2, [r3, #0]
 800ade6:	2380      	movs	r3, #128	@ 0x80
 800ade8:	01db      	lsls	r3, r3, #7
 800adea:	4013      	ands	r3, r2
 800adec:	d000      	beq.n	800adf0 <HAL_PCD_EP_DB_Transmit+0x52c>
 800adee:	e10a      	b.n	800b006 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	001a      	movs	r2, r3
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	18d3      	adds	r3, r2, r3
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a67      	ldr	r2, [pc, #412]	@ (800afa0 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800ae02:	4013      	ands	r3, r2
 800ae04:	623b      	str	r3, [r7, #32]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	001a      	movs	r2, r3
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	18d3      	adds	r3, r2, r3
 800ae14:	6a3a      	ldr	r2, [r7, #32]
 800ae16:	4963      	ldr	r1, [pc, #396]	@ (800afa4 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800ae18:	430a      	orrs	r2, r1
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	e0f3      	b.n	800b006 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ae1e:	1dbb      	adds	r3, r7, #6
 800ae20:	881a      	ldrh	r2, [r3, #0]
 800ae22:	2380      	movs	r3, #128	@ 0x80
 800ae24:	01db      	lsls	r3, r3, #7
 800ae26:	4013      	ands	r3, r2
 800ae28:	d115      	bne.n	800ae56 <HAL_PCD_EP_DB_Transmit+0x592>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	001a      	movs	r2, r3
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	18d3      	adds	r3, r2, r3
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a59      	ldr	r2, [pc, #356]	@ (800afa0 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	617b      	str	r3, [r7, #20]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	001a      	movs	r2, r3
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	18d3      	adds	r3, r2, r3
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	4954      	ldr	r1, [pc, #336]	@ (800afa4 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800ae52:	430a      	orrs	r2, r1
 800ae54:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	2224      	movs	r2, #36	@ 0x24
 800ae5a:	5c9b      	ldrb	r3, [r3, r2]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d000      	beq.n	800ae62 <HAL_PCD_EP_DB_Transmit+0x59e>
 800ae60:	e0d1      	b.n	800b006 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	695a      	ldr	r2, [r3, #20]
 800ae66:	211e      	movs	r1, #30
 800ae68:	187b      	adds	r3, r7, r1
 800ae6a:	881b      	ldrh	r3, [r3, #0]
 800ae6c:	18d2      	adds	r2, r2, r3
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	69da      	ldr	r2, [r3, #28]
 800ae76:	187b      	adds	r3, r7, r1
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	18d2      	adds	r2, r2, r3
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	6a1a      	ldr	r2, [r3, #32]
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	691b      	ldr	r3, [r3, #16]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d309      	bcc.n	800aea0 <HAL_PCD_EP_DB_Transmit+0x5dc>
        {
          len = ep->maxpacket;
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	691b      	ldr	r3, [r3, #16]
 800ae90:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	6a1a      	ldr	r2, [r3, #32]
 800ae96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae98:	1ad2      	subs	r2, r2, r3
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	621a      	str	r2, [r3, #32]
 800ae9e:	e016      	b.n	800aece <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else if (ep->xfer_len_db == 0U)
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d108      	bne.n	800aeba <HAL_PCD_EP_DB_Transmit+0x5f6>
        {
          len = TxPctSize;
 800aea8:	231e      	movs	r3, #30
 800aeaa:	18fb      	adds	r3, r7, r3
 800aeac:	881b      	ldrh	r3, [r3, #0]
 800aeae:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	2224      	movs	r2, #36	@ 0x24
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	5499      	strb	r1, [r3, r2]
 800aeb8:	e009      	b.n	800aece <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else
        {
          len = ep->xfer_len_db;
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	6a1b      	ldr	r3, [r3, #32]
 800aebe:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	2200      	movs	r2, #0
 800aec4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	2224      	movs	r2, #36	@ 0x24
 800aeca:	2100      	movs	r1, #0
 800aecc:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	785b      	ldrb	r3, [r3, #1]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d168      	bne.n	800afa8 <HAL_PCD_EP_DB_Transmit+0x6e4>
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	00db      	lsls	r3, r3, #3
 800aedc:	4a2f      	ldr	r2, [pc, #188]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aede:	4694      	mov	ip, r2
 800aee0:	4463      	add	r3, ip
 800aee2:	685a      	ldr	r2, [r3, #4]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	00db      	lsls	r3, r3, #3
 800aeea:	492c      	ldr	r1, [pc, #176]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aeec:	468c      	mov	ip, r1
 800aeee:	4463      	add	r3, ip
 800aef0:	0192      	lsls	r2, r2, #6
 800aef2:	0992      	lsrs	r2, r2, #6
 800aef4:	605a      	str	r2, [r3, #4]
 800aef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef8:	2b3e      	cmp	r3, #62	@ 0x3e
 800aefa:	d91e      	bls.n	800af3a <HAL_PCD_EP_DB_Transmit+0x676>
 800aefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefe:	095b      	lsrs	r3, r3, #5
 800af00:	61bb      	str	r3, [r7, #24]
 800af02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af04:	221f      	movs	r2, #31
 800af06:	4013      	ands	r3, r2
 800af08:	d102      	bne.n	800af10 <HAL_PCD_EP_DB_Transmit+0x64c>
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	3b01      	subs	r3, #1
 800af0e:	61bb      	str	r3, [r7, #24]
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	00db      	lsls	r3, r3, #3
 800af16:	4a21      	ldr	r2, [pc, #132]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800af18:	4694      	mov	ip, r2
 800af1a:	4463      	add	r3, ip
 800af1c:	685a      	ldr	r2, [r3, #4]
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	069b      	lsls	r3, r3, #26
 800af22:	431a      	orrs	r2, r3
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	491c      	ldr	r1, [pc, #112]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800af2c:	468c      	mov	ip, r1
 800af2e:	4463      	add	r3, ip
 800af30:	2180      	movs	r1, #128	@ 0x80
 800af32:	0609      	lsls	r1, r1, #24
 800af34:	430a      	orrs	r2, r1
 800af36:	605a      	str	r2, [r3, #4]
 800af38:	e05b      	b.n	800aff2 <HAL_PCD_EP_DB_Transmit+0x72e>
 800af3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d111      	bne.n	800af64 <HAL_PCD_EP_DB_Transmit+0x6a0>
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	00db      	lsls	r3, r3, #3
 800af46:	4a15      	ldr	r2, [pc, #84]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800af48:	4694      	mov	ip, r2
 800af4a:	4463      	add	r3, ip
 800af4c:	685a      	ldr	r2, [r3, #4]
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	00db      	lsls	r3, r3, #3
 800af54:	4911      	ldr	r1, [pc, #68]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800af56:	468c      	mov	ip, r1
 800af58:	4463      	add	r3, ip
 800af5a:	2180      	movs	r1, #128	@ 0x80
 800af5c:	0609      	lsls	r1, r1, #24
 800af5e:	430a      	orrs	r2, r1
 800af60:	605a      	str	r2, [r3, #4]
 800af62:	e046      	b.n	800aff2 <HAL_PCD_EP_DB_Transmit+0x72e>
 800af64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af66:	085b      	lsrs	r3, r3, #1
 800af68:	61bb      	str	r3, [r7, #24]
 800af6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6c:	2201      	movs	r2, #1
 800af6e:	4013      	ands	r3, r2
 800af70:	d002      	beq.n	800af78 <HAL_PCD_EP_DB_Transmit+0x6b4>
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	3301      	adds	r3, #1
 800af76:	61bb      	str	r3, [r7, #24]
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	00db      	lsls	r3, r3, #3
 800af7e:	4a07      	ldr	r2, [pc, #28]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800af80:	4694      	mov	ip, r2
 800af82:	4463      	add	r3, ip
 800af84:	6859      	ldr	r1, [r3, #4]
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	069a      	lsls	r2, r3, #26
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	00db      	lsls	r3, r3, #3
 800af90:	4802      	ldr	r0, [pc, #8]	@ (800af9c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800af92:	4684      	mov	ip, r0
 800af94:	4463      	add	r3, ip
 800af96:	430a      	orrs	r2, r1
 800af98:	605a      	str	r2, [r3, #4]
 800af9a:	e02a      	b.n	800aff2 <HAL_PCD_EP_DB_Transmit+0x72e>
 800af9c:	40009800 	.word	0x40009800
 800afa0:	07ff8f8f 	.word	0x07ff8f8f
 800afa4:	0000c080 	.word	0x0000c080
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	785b      	ldrb	r3, [r3, #1]
 800afac:	2b01      	cmp	r3, #1
 800afae:	d120      	bne.n	800aff2 <HAL_PCD_EP_DB_Transmit+0x72e>
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	00db      	lsls	r3, r3, #3
 800afb6:	4a25      	ldr	r2, [pc, #148]	@ (800b04c <HAL_PCD_EP_DB_Transmit+0x788>)
 800afb8:	4694      	mov	ip, r2
 800afba:	4463      	add	r3, ip
 800afbc:	685a      	ldr	r2, [r3, #4]
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	00db      	lsls	r3, r3, #3
 800afc4:	4921      	ldr	r1, [pc, #132]	@ (800b04c <HAL_PCD_EP_DB_Transmit+0x788>)
 800afc6:	468c      	mov	ip, r1
 800afc8:	4463      	add	r3, ip
 800afca:	0412      	lsls	r2, r2, #16
 800afcc:	0c12      	lsrs	r2, r2, #16
 800afce:	605a      	str	r2, [r3, #4]
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	00db      	lsls	r3, r3, #3
 800afd6:	4a1d      	ldr	r2, [pc, #116]	@ (800b04c <HAL_PCD_EP_DB_Transmit+0x788>)
 800afd8:	4694      	mov	ip, r2
 800afda:	4463      	add	r3, ip
 800afdc:	6859      	ldr	r1, [r3, #4]
 800afde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe0:	041a      	lsls	r2, r3, #16
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	00db      	lsls	r3, r3, #3
 800afe8:	4818      	ldr	r0, [pc, #96]	@ (800b04c <HAL_PCD_EP_DB_Transmit+0x788>)
 800afea:	4684      	mov	ip, r0
 800afec:	4463      	add	r3, ip
 800afee:	430a      	orrs	r2, r1
 800aff0:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6818      	ldr	r0, [r3, #0]
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	6959      	ldr	r1, [r3, #20]
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	895a      	ldrh	r2, [r3, #10]
 800affe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b000:	b29b      	uxth	r3, r3
 800b002:	f004 faa7 	bl	800f554 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	001a      	movs	r2, r3
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	18d3      	adds	r3, r2, r3
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a0e      	ldr	r2, [pc, #56]	@ (800b050 <HAL_PCD_EP_DB_Transmit+0x78c>)
 800b018:	4013      	ands	r3, r2
 800b01a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01e:	2210      	movs	r2, #16
 800b020:	4053      	eors	r3, r2
 800b022:	633b      	str	r3, [r7, #48]	@ 0x30
 800b024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b026:	2220      	movs	r2, #32
 800b028:	4053      	eors	r3, r2
 800b02a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	001a      	movs	r2, r3
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	18d3      	adds	r3, r2, r3
 800b03a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b03c:	4905      	ldr	r1, [pc, #20]	@ (800b054 <HAL_PCD_EP_DB_Transmit+0x790>)
 800b03e:	430a      	orrs	r2, r1
 800b040:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	0018      	movs	r0, r3
 800b046:	46bd      	mov	sp, r7
 800b048:	b00e      	add	sp, #56	@ 0x38
 800b04a:	bdb0      	pop	{r4, r5, r7, pc}
 800b04c:	40009800 	.word	0x40009800
 800b050:	07ff8fbf 	.word	0x07ff8fbf
 800b054:	00008080 	.word	0x00008080

0800b058 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b058:	b590      	push	{r4, r7, lr}
 800b05a:	b087      	sub	sp, #28
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	0008      	movs	r0, r1
 800b062:	0011      	movs	r1, r2
 800b064:	607b      	str	r3, [r7, #4]
 800b066:	240a      	movs	r4, #10
 800b068:	193b      	adds	r3, r7, r4
 800b06a:	1c02      	adds	r2, r0, #0
 800b06c:	801a      	strh	r2, [r3, #0]
 800b06e:	2308      	movs	r3, #8
 800b070:	18fb      	adds	r3, r7, r3
 800b072:	1c0a      	adds	r2, r1, #0
 800b074:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b076:	0021      	movs	r1, r4
 800b078:	187b      	adds	r3, r7, r1
 800b07a:	881b      	ldrh	r3, [r3, #0]
 800b07c:	2280      	movs	r2, #128	@ 0x80
 800b07e:	4013      	ands	r3, r2
 800b080:	b29b      	uxth	r3, r3
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00d      	beq.n	800b0a2 <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b086:	187b      	adds	r3, r7, r1
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	2207      	movs	r2, #7
 800b08c:	401a      	ands	r2, r3
 800b08e:	0013      	movs	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	189b      	adds	r3, r3, r2
 800b094:	00db      	lsls	r3, r3, #3
 800b096:	3310      	adds	r3, #16
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	18d3      	adds	r3, r2, r3
 800b09c:	3304      	adds	r3, #4
 800b09e:	617b      	str	r3, [r7, #20]
 800b0a0:	e00c      	b.n	800b0bc <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b0a2:	230a      	movs	r3, #10
 800b0a4:	18fb      	adds	r3, r7, r3
 800b0a6:	881a      	ldrh	r2, [r3, #0]
 800b0a8:	0013      	movs	r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	189b      	adds	r3, r3, r2
 800b0ae:	00db      	lsls	r3, r3, #3
 800b0b0:	3351      	adds	r3, #81	@ 0x51
 800b0b2:	33ff      	adds	r3, #255	@ 0xff
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	18d3      	adds	r3, r2, r3
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b0bc:	2308      	movs	r3, #8
 800b0be:	18fb      	adds	r3, r7, r3
 800b0c0:	881b      	ldrh	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d107      	bne.n	800b0d6 <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	80da      	strh	r2, [r3, #6]
 800b0d4:	e00b      	b.n	800b0ee <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	0c1b      	lsrs	r3, r3, #16
 800b0e8:	b29a      	uxth	r2, r3
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	0018      	movs	r0, r3
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	b007      	add	sp, #28
 800b0f6:	bd90      	pop	{r4, r7, pc}

0800b0f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	23b5      	movs	r3, #181	@ 0xb5
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	2101      	movs	r1, #1
 800b10e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	23b3      	movs	r3, #179	@ 0xb3
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	2100      	movs	r1, #0
 800b118:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b11e:	2201      	movs	r2, #1
 800b120:	431a      	orrs	r2, r3
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b12a:	2202      	movs	r2, #2
 800b12c:	431a      	orrs	r2, r3
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	0018      	movs	r0, r3
 800b136:	46bd      	mov	sp, r7
 800b138:	b004      	add	sp, #16
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	000a      	movs	r2, r1
 800b146:	1cfb      	adds	r3, r7, #3
 800b148:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b14a:	46c0      	nop			@ (mov r8, r8)
 800b14c:	46bd      	mov	sp, r7
 800b14e:	b002      	add	sp, #8
 800b150:	bd80      	pop	{r7, pc}
	...

0800b154 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b158:	4b04      	ldr	r3, [pc, #16]	@ (800b16c <HAL_PWREx_EnableVddUSB+0x18>)
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	4b03      	ldr	r3, [pc, #12]	@ (800b16c <HAL_PWREx_EnableVddUSB+0x18>)
 800b15e:	2180      	movs	r1, #128	@ 0x80
 800b160:	00c9      	lsls	r1, r1, #3
 800b162:	430a      	orrs	r2, r1
 800b164:	605a      	str	r2, [r3, #4]
}
 800b166:	46c0      	nop			@ (mov r8, r8)
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	40007000 	.word	0x40007000

0800b170 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800b178:	4b19      	ldr	r3, [pc, #100]	@ (800b1e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a19      	ldr	r2, [pc, #100]	@ (800b1e4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800b17e:	4013      	ands	r3, r2
 800b180:	0019      	movs	r1, r3
 800b182:	4b17      	ldr	r3, [pc, #92]	@ (800b1e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	430a      	orrs	r2, r1
 800b188:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	2380      	movs	r3, #128	@ 0x80
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	429a      	cmp	r2, r3
 800b192:	d11f      	bne.n	800b1d4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800b194:	4b14      	ldr	r3, [pc, #80]	@ (800b1e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	0013      	movs	r3, r2
 800b19a:	005b      	lsls	r3, r3, #1
 800b19c:	189b      	adds	r3, r3, r2
 800b19e:	005b      	lsls	r3, r3, #1
 800b1a0:	4912      	ldr	r1, [pc, #72]	@ (800b1ec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800b1a2:	0018      	movs	r0, r3
 800b1a4:	f7fb f94e 	bl	8006444 <__udivsi3>
 800b1a8:	0003      	movs	r3, r0
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b1ae:	e008      	b.n	800b1c2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d003      	beq.n	800b1be <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	60fb      	str	r3, [r7, #12]
 800b1bc:	e001      	b.n	800b1c2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e009      	b.n	800b1d6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b1c2:	4b07      	ldr	r3, [pc, #28]	@ (800b1e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b1c4:	695a      	ldr	r2, [r3, #20]
 800b1c6:	2380      	movs	r3, #128	@ 0x80
 800b1c8:	00db      	lsls	r3, r3, #3
 800b1ca:	401a      	ands	r2, r3
 800b1cc:	2380      	movs	r3, #128	@ 0x80
 800b1ce:	00db      	lsls	r3, r3, #3
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d0ed      	beq.n	800b1b0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	0018      	movs	r0, r3
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	b004      	add	sp, #16
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	46c0      	nop			@ (mov r8, r8)
 800b1e0:	40007000 	.word	0x40007000
 800b1e4:	fffff9ff 	.word	0xfffff9ff
 800b1e8:	20000004 	.word	0x20000004
 800b1ec:	000f4240 	.word	0x000f4240

0800b1f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800b1f4:	4b03      	ldr	r3, [pc, #12]	@ (800b204 <LL_RCC_GetAPB1Prescaler+0x14>)
 800b1f6:	689a      	ldr	r2, [r3, #8]
 800b1f8:	23e0      	movs	r3, #224	@ 0xe0
 800b1fa:	01db      	lsls	r3, r3, #7
 800b1fc:	4013      	ands	r3, r2
}
 800b1fe:	0018      	movs	r0, r3
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	40021000 	.word	0x40021000

0800b208 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b088      	sub	sp, #32
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d102      	bne.n	800b21c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	f000 fb50 	bl	800b8bc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2201      	movs	r2, #1
 800b222:	4013      	ands	r3, r2
 800b224:	d100      	bne.n	800b228 <HAL_RCC_OscConfig+0x20>
 800b226:	e07c      	b.n	800b322 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b228:	4bc3      	ldr	r3, [pc, #780]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	2238      	movs	r2, #56	@ 0x38
 800b22e:	4013      	ands	r3, r2
 800b230:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b232:	4bc1      	ldr	r3, [pc, #772]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	2203      	movs	r2, #3
 800b238:	4013      	ands	r3, r2
 800b23a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	2b10      	cmp	r3, #16
 800b240:	d102      	bne.n	800b248 <HAL_RCC_OscConfig+0x40>
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	2b03      	cmp	r3, #3
 800b246:	d002      	beq.n	800b24e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	2b08      	cmp	r3, #8
 800b24c:	d10b      	bne.n	800b266 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b24e:	4bba      	ldr	r3, [pc, #744]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	2380      	movs	r3, #128	@ 0x80
 800b254:	029b      	lsls	r3, r3, #10
 800b256:	4013      	ands	r3, r2
 800b258:	d062      	beq.n	800b320 <HAL_RCC_OscConfig+0x118>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d15e      	bne.n	800b320 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	e32a      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685a      	ldr	r2, [r3, #4]
 800b26a:	2380      	movs	r3, #128	@ 0x80
 800b26c:	025b      	lsls	r3, r3, #9
 800b26e:	429a      	cmp	r2, r3
 800b270:	d107      	bne.n	800b282 <HAL_RCC_OscConfig+0x7a>
 800b272:	4bb1      	ldr	r3, [pc, #708]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	4bb0      	ldr	r3, [pc, #704]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b278:	2180      	movs	r1, #128	@ 0x80
 800b27a:	0249      	lsls	r1, r1, #9
 800b27c:	430a      	orrs	r2, r1
 800b27e:	601a      	str	r2, [r3, #0]
 800b280:	e020      	b.n	800b2c4 <HAL_RCC_OscConfig+0xbc>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	685a      	ldr	r2, [r3, #4]
 800b286:	23a0      	movs	r3, #160	@ 0xa0
 800b288:	02db      	lsls	r3, r3, #11
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d10e      	bne.n	800b2ac <HAL_RCC_OscConfig+0xa4>
 800b28e:	4baa      	ldr	r3, [pc, #680]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	4ba9      	ldr	r3, [pc, #676]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b294:	2180      	movs	r1, #128	@ 0x80
 800b296:	02c9      	lsls	r1, r1, #11
 800b298:	430a      	orrs	r2, r1
 800b29a:	601a      	str	r2, [r3, #0]
 800b29c:	4ba6      	ldr	r3, [pc, #664]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	4ba5      	ldr	r3, [pc, #660]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b2a2:	2180      	movs	r1, #128	@ 0x80
 800b2a4:	0249      	lsls	r1, r1, #9
 800b2a6:	430a      	orrs	r2, r1
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	e00b      	b.n	800b2c4 <HAL_RCC_OscConfig+0xbc>
 800b2ac:	4ba2      	ldr	r3, [pc, #648]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	4ba1      	ldr	r3, [pc, #644]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b2b2:	49a2      	ldr	r1, [pc, #648]	@ (800b53c <HAL_RCC_OscConfig+0x334>)
 800b2b4:	400a      	ands	r2, r1
 800b2b6:	601a      	str	r2, [r3, #0]
 800b2b8:	4b9f      	ldr	r3, [pc, #636]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	4b9e      	ldr	r3, [pc, #632]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b2be:	49a0      	ldr	r1, [pc, #640]	@ (800b540 <HAL_RCC_OscConfig+0x338>)
 800b2c0:	400a      	ands	r2, r1
 800b2c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d014      	beq.n	800b2f6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2cc:	f7fd f9a0 	bl	8008610 <HAL_GetTick>
 800b2d0:	0003      	movs	r3, r0
 800b2d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b2d4:	e008      	b.n	800b2e8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2d6:	f7fd f99b 	bl	8008610 <HAL_GetTick>
 800b2da:	0002      	movs	r2, r0
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	1ad3      	subs	r3, r2, r3
 800b2e0:	2b64      	cmp	r3, #100	@ 0x64
 800b2e2:	d901      	bls.n	800b2e8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	e2e9      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b2e8:	4b93      	ldr	r3, [pc, #588]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	2380      	movs	r3, #128	@ 0x80
 800b2ee:	029b      	lsls	r3, r3, #10
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	d0f0      	beq.n	800b2d6 <HAL_RCC_OscConfig+0xce>
 800b2f4:	e015      	b.n	800b322 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2f6:	f7fd f98b 	bl	8008610 <HAL_GetTick>
 800b2fa:	0003      	movs	r3, r0
 800b2fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b2fe:	e008      	b.n	800b312 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b300:	f7fd f986 	bl	8008610 <HAL_GetTick>
 800b304:	0002      	movs	r2, r0
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	2b64      	cmp	r3, #100	@ 0x64
 800b30c:	d901      	bls.n	800b312 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800b30e:	2303      	movs	r3, #3
 800b310:	e2d4      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b312:	4b89      	ldr	r3, [pc, #548]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	2380      	movs	r3, #128	@ 0x80
 800b318:	029b      	lsls	r3, r3, #10
 800b31a:	4013      	ands	r3, r2
 800b31c:	d1f0      	bne.n	800b300 <HAL_RCC_OscConfig+0xf8>
 800b31e:	e000      	b.n	800b322 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b320:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2202      	movs	r2, #2
 800b328:	4013      	ands	r3, r2
 800b32a:	d100      	bne.n	800b32e <HAL_RCC_OscConfig+0x126>
 800b32c:	e099      	b.n	800b462 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b32e:	4b82      	ldr	r3, [pc, #520]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	2238      	movs	r2, #56	@ 0x38
 800b334:	4013      	ands	r3, r2
 800b336:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b338:	4b7f      	ldr	r3, [pc, #508]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	2203      	movs	r2, #3
 800b33e:	4013      	ands	r3, r2
 800b340:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	2b10      	cmp	r3, #16
 800b346:	d102      	bne.n	800b34e <HAL_RCC_OscConfig+0x146>
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d002      	beq.n	800b354 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d135      	bne.n	800b3c0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b354:	4b78      	ldr	r3, [pc, #480]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	2380      	movs	r3, #128	@ 0x80
 800b35a:	00db      	lsls	r3, r3, #3
 800b35c:	4013      	ands	r3, r2
 800b35e:	d005      	beq.n	800b36c <HAL_RCC_OscConfig+0x164>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d101      	bne.n	800b36c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e2a7      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b36c:	4b72      	ldr	r3, [pc, #456]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	4a74      	ldr	r2, [pc, #464]	@ (800b544 <HAL_RCC_OscConfig+0x33c>)
 800b372:	4013      	ands	r3, r2
 800b374:	0019      	movs	r1, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	021a      	lsls	r2, r3, #8
 800b37c:	4b6e      	ldr	r3, [pc, #440]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b37e:	430a      	orrs	r2, r1
 800b380:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d112      	bne.n	800b3ae <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b388:	4b6b      	ldr	r3, [pc, #428]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a6e      	ldr	r2, [pc, #440]	@ (800b548 <HAL_RCC_OscConfig+0x340>)
 800b38e:	4013      	ands	r3, r2
 800b390:	0019      	movs	r1, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	691a      	ldr	r2, [r3, #16]
 800b396:	4b68      	ldr	r3, [pc, #416]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b398:	430a      	orrs	r2, r1
 800b39a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800b39c:	4b66      	ldr	r3, [pc, #408]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	0adb      	lsrs	r3, r3, #11
 800b3a2:	2207      	movs	r2, #7
 800b3a4:	4013      	ands	r3, r2
 800b3a6:	4a69      	ldr	r2, [pc, #420]	@ (800b54c <HAL_RCC_OscConfig+0x344>)
 800b3a8:	40da      	lsrs	r2, r3
 800b3aa:	4b69      	ldr	r3, [pc, #420]	@ (800b550 <HAL_RCC_OscConfig+0x348>)
 800b3ac:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b3ae:	4b69      	ldr	r3, [pc, #420]	@ (800b554 <HAL_RCC_OscConfig+0x34c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	0018      	movs	r0, r3
 800b3b4:	f7fc fa2e 	bl	8007814 <HAL_InitTick>
 800b3b8:	1e03      	subs	r3, r0, #0
 800b3ba:	d051      	beq.n	800b460 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e27d      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d030      	beq.n	800b42a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b3c8:	4b5b      	ldr	r3, [pc, #364]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a5e      	ldr	r2, [pc, #376]	@ (800b548 <HAL_RCC_OscConfig+0x340>)
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	0019      	movs	r1, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	691a      	ldr	r2, [r3, #16]
 800b3d6:	4b58      	ldr	r3, [pc, #352]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b3d8:	430a      	orrs	r2, r1
 800b3da:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800b3dc:	4b56      	ldr	r3, [pc, #344]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	4b55      	ldr	r3, [pc, #340]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b3e2:	2180      	movs	r1, #128	@ 0x80
 800b3e4:	0049      	lsls	r1, r1, #1
 800b3e6:	430a      	orrs	r2, r1
 800b3e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3ea:	f7fd f911 	bl	8008610 <HAL_GetTick>
 800b3ee:	0003      	movs	r3, r0
 800b3f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b3f2:	e008      	b.n	800b406 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3f4:	f7fd f90c 	bl	8008610 <HAL_GetTick>
 800b3f8:	0002      	movs	r2, r0
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d901      	bls.n	800b406 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	e25a      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b406:	4b4c      	ldr	r3, [pc, #304]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	2380      	movs	r3, #128	@ 0x80
 800b40c:	00db      	lsls	r3, r3, #3
 800b40e:	4013      	ands	r3, r2
 800b410:	d0f0      	beq.n	800b3f4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b412:	4b49      	ldr	r3, [pc, #292]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	4a4b      	ldr	r2, [pc, #300]	@ (800b544 <HAL_RCC_OscConfig+0x33c>)
 800b418:	4013      	ands	r3, r2
 800b41a:	0019      	movs	r1, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	021a      	lsls	r2, r3, #8
 800b422:	4b45      	ldr	r3, [pc, #276]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b424:	430a      	orrs	r2, r1
 800b426:	605a      	str	r2, [r3, #4]
 800b428:	e01b      	b.n	800b462 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800b42a:	4b43      	ldr	r3, [pc, #268]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	4b42      	ldr	r3, [pc, #264]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b430:	4949      	ldr	r1, [pc, #292]	@ (800b558 <HAL_RCC_OscConfig+0x350>)
 800b432:	400a      	ands	r2, r1
 800b434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b436:	f7fd f8eb 	bl	8008610 <HAL_GetTick>
 800b43a:	0003      	movs	r3, r0
 800b43c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b43e:	e008      	b.n	800b452 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b440:	f7fd f8e6 	bl	8008610 <HAL_GetTick>
 800b444:	0002      	movs	r2, r0
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	2b02      	cmp	r3, #2
 800b44c:	d901      	bls.n	800b452 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800b44e:	2303      	movs	r3, #3
 800b450:	e234      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b452:	4b39      	ldr	r3, [pc, #228]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	2380      	movs	r3, #128	@ 0x80
 800b458:	00db      	lsls	r3, r3, #3
 800b45a:	4013      	ands	r3, r2
 800b45c:	d1f0      	bne.n	800b440 <HAL_RCC_OscConfig+0x238>
 800b45e:	e000      	b.n	800b462 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b460:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2208      	movs	r2, #8
 800b468:	4013      	ands	r3, r2
 800b46a:	d047      	beq.n	800b4fc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800b46c:	4b32      	ldr	r3, [pc, #200]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	2238      	movs	r2, #56	@ 0x38
 800b472:	4013      	ands	r3, r2
 800b474:	2b18      	cmp	r3, #24
 800b476:	d10a      	bne.n	800b48e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800b478:	4b2f      	ldr	r3, [pc, #188]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b47a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b47c:	2202      	movs	r2, #2
 800b47e:	4013      	ands	r3, r2
 800b480:	d03c      	beq.n	800b4fc <HAL_RCC_OscConfig+0x2f4>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	699b      	ldr	r3, [r3, #24]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d138      	bne.n	800b4fc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e216      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d019      	beq.n	800b4ca <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800b496:	4b28      	ldr	r3, [pc, #160]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b498:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b49a:	4b27      	ldr	r3, [pc, #156]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b49c:	2101      	movs	r1, #1
 800b49e:	430a      	orrs	r2, r1
 800b4a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4a2:	f7fd f8b5 	bl	8008610 <HAL_GetTick>
 800b4a6:	0003      	movs	r3, r0
 800b4a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b4aa:	e008      	b.n	800b4be <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b4ac:	f7fd f8b0 	bl	8008610 <HAL_GetTick>
 800b4b0:	0002      	movs	r2, r0
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	1ad3      	subs	r3, r2, r3
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d901      	bls.n	800b4be <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	e1fe      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b4be:	4b1e      	ldr	r3, [pc, #120]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b4c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4c2:	2202      	movs	r2, #2
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	d0f1      	beq.n	800b4ac <HAL_RCC_OscConfig+0x2a4>
 800b4c8:	e018      	b.n	800b4fc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800b4ca:	4b1b      	ldr	r3, [pc, #108]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b4cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b4ce:	4b1a      	ldr	r3, [pc, #104]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b4d0:	2101      	movs	r1, #1
 800b4d2:	438a      	bics	r2, r1
 800b4d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4d6:	f7fd f89b 	bl	8008610 <HAL_GetTick>
 800b4da:	0003      	movs	r3, r0
 800b4dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b4de:	e008      	b.n	800b4f2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b4e0:	f7fd f896 	bl	8008610 <HAL_GetTick>
 800b4e4:	0002      	movs	r2, r0
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	d901      	bls.n	800b4f2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	e1e4      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b4f2:	4b11      	ldr	r3, [pc, #68]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b4f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4f6:	2202      	movs	r2, #2
 800b4f8:	4013      	ands	r3, r2
 800b4fa:	d1f1      	bne.n	800b4e0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2204      	movs	r2, #4
 800b502:	4013      	ands	r3, r2
 800b504:	d100      	bne.n	800b508 <HAL_RCC_OscConfig+0x300>
 800b506:	e0c7      	b.n	800b698 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b508:	231f      	movs	r3, #31
 800b50a:	18fb      	adds	r3, r7, r3
 800b50c:	2200      	movs	r2, #0
 800b50e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800b510:	4b09      	ldr	r3, [pc, #36]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	2238      	movs	r2, #56	@ 0x38
 800b516:	4013      	ands	r3, r2
 800b518:	2b20      	cmp	r3, #32
 800b51a:	d11f      	bne.n	800b55c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800b51c:	4b06      	ldr	r3, [pc, #24]	@ (800b538 <HAL_RCC_OscConfig+0x330>)
 800b51e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b520:	2202      	movs	r2, #2
 800b522:	4013      	ands	r3, r2
 800b524:	d100      	bne.n	800b528 <HAL_RCC_OscConfig+0x320>
 800b526:	e0b7      	b.n	800b698 <HAL_RCC_OscConfig+0x490>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d000      	beq.n	800b532 <HAL_RCC_OscConfig+0x32a>
 800b530:	e0b2      	b.n	800b698 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e1c2      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
 800b536:	46c0      	nop			@ (mov r8, r8)
 800b538:	40021000 	.word	0x40021000
 800b53c:	fffeffff 	.word	0xfffeffff
 800b540:	fffbffff 	.word	0xfffbffff
 800b544:	ffff80ff 	.word	0xffff80ff
 800b548:	ffffc7ff 	.word	0xffffc7ff
 800b54c:	00f42400 	.word	0x00f42400
 800b550:	20000004 	.word	0x20000004
 800b554:	20000008 	.word	0x20000008
 800b558:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b55c:	4bb5      	ldr	r3, [pc, #724]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b55e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b560:	2380      	movs	r3, #128	@ 0x80
 800b562:	055b      	lsls	r3, r3, #21
 800b564:	4013      	ands	r3, r2
 800b566:	d101      	bne.n	800b56c <HAL_RCC_OscConfig+0x364>
 800b568:	2301      	movs	r3, #1
 800b56a:	e000      	b.n	800b56e <HAL_RCC_OscConfig+0x366>
 800b56c:	2300      	movs	r3, #0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d011      	beq.n	800b596 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800b572:	4bb0      	ldr	r3, [pc, #704]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b574:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b576:	4baf      	ldr	r3, [pc, #700]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b578:	2180      	movs	r1, #128	@ 0x80
 800b57a:	0549      	lsls	r1, r1, #21
 800b57c:	430a      	orrs	r2, r1
 800b57e:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b580:	4bac      	ldr	r3, [pc, #688]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b582:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b584:	2380      	movs	r3, #128	@ 0x80
 800b586:	055b      	lsls	r3, r3, #21
 800b588:	4013      	ands	r3, r2
 800b58a:	60fb      	str	r3, [r7, #12]
 800b58c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800b58e:	231f      	movs	r3, #31
 800b590:	18fb      	adds	r3, r7, r3
 800b592:	2201      	movs	r2, #1
 800b594:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b596:	4ba8      	ldr	r3, [pc, #672]	@ (800b838 <HAL_RCC_OscConfig+0x630>)
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	2380      	movs	r3, #128	@ 0x80
 800b59c:	005b      	lsls	r3, r3, #1
 800b59e:	4013      	ands	r3, r2
 800b5a0:	d11a      	bne.n	800b5d8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b5a2:	4ba5      	ldr	r3, [pc, #660]	@ (800b838 <HAL_RCC_OscConfig+0x630>)
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	4ba4      	ldr	r3, [pc, #656]	@ (800b838 <HAL_RCC_OscConfig+0x630>)
 800b5a8:	2180      	movs	r1, #128	@ 0x80
 800b5aa:	0049      	lsls	r1, r1, #1
 800b5ac:	430a      	orrs	r2, r1
 800b5ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800b5b0:	f7fd f82e 	bl	8008610 <HAL_GetTick>
 800b5b4:	0003      	movs	r3, r0
 800b5b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5b8:	e008      	b.n	800b5cc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5ba:	f7fd f829 	bl	8008610 <HAL_GetTick>
 800b5be:	0002      	movs	r2, r0
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d901      	bls.n	800b5cc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	e177      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b5cc:	4b9a      	ldr	r3, [pc, #616]	@ (800b838 <HAL_RCC_OscConfig+0x630>)
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	2380      	movs	r3, #128	@ 0x80
 800b5d2:	005b      	lsls	r3, r3, #1
 800b5d4:	4013      	ands	r3, r2
 800b5d6:	d0f0      	beq.n	800b5ba <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d106      	bne.n	800b5ee <HAL_RCC_OscConfig+0x3e6>
 800b5e0:	4b94      	ldr	r3, [pc, #592]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b5e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b5e4:	4b93      	ldr	r3, [pc, #588]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	430a      	orrs	r2, r1
 800b5ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b5ec:	e01c      	b.n	800b628 <HAL_RCC_OscConfig+0x420>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	2b05      	cmp	r3, #5
 800b5f4:	d10c      	bne.n	800b610 <HAL_RCC_OscConfig+0x408>
 800b5f6:	4b8f      	ldr	r3, [pc, #572]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b5f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b5fa:	4b8e      	ldr	r3, [pc, #568]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b5fc:	2104      	movs	r1, #4
 800b5fe:	430a      	orrs	r2, r1
 800b600:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b602:	4b8c      	ldr	r3, [pc, #560]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b604:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b606:	4b8b      	ldr	r3, [pc, #556]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b608:	2101      	movs	r1, #1
 800b60a:	430a      	orrs	r2, r1
 800b60c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b60e:	e00b      	b.n	800b628 <HAL_RCC_OscConfig+0x420>
 800b610:	4b88      	ldr	r3, [pc, #544]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b612:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b614:	4b87      	ldr	r3, [pc, #540]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b616:	2101      	movs	r1, #1
 800b618:	438a      	bics	r2, r1
 800b61a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b61c:	4b85      	ldr	r3, [pc, #532]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b61e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b620:	4b84      	ldr	r3, [pc, #528]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b622:	2104      	movs	r1, #4
 800b624:	438a      	bics	r2, r1
 800b626:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d014      	beq.n	800b65a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b630:	f7fc ffee 	bl	8008610 <HAL_GetTick>
 800b634:	0003      	movs	r3, r0
 800b636:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b638:	e009      	b.n	800b64e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b63a:	f7fc ffe9 	bl	8008610 <HAL_GetTick>
 800b63e:	0002      	movs	r2, r0
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	4a7d      	ldr	r2, [pc, #500]	@ (800b83c <HAL_RCC_OscConfig+0x634>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d901      	bls.n	800b64e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800b64a:	2303      	movs	r3, #3
 800b64c:	e136      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b64e:	4b79      	ldr	r3, [pc, #484]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b652:	2202      	movs	r2, #2
 800b654:	4013      	ands	r3, r2
 800b656:	d0f0      	beq.n	800b63a <HAL_RCC_OscConfig+0x432>
 800b658:	e013      	b.n	800b682 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b65a:	f7fc ffd9 	bl	8008610 <HAL_GetTick>
 800b65e:	0003      	movs	r3, r0
 800b660:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b662:	e009      	b.n	800b678 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b664:	f7fc ffd4 	bl	8008610 <HAL_GetTick>
 800b668:	0002      	movs	r2, r0
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	4a73      	ldr	r2, [pc, #460]	@ (800b83c <HAL_RCC_OscConfig+0x634>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d901      	bls.n	800b678 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800b674:	2303      	movs	r3, #3
 800b676:	e121      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b678:	4b6e      	ldr	r3, [pc, #440]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b67a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b67c:	2202      	movs	r2, #2
 800b67e:	4013      	ands	r3, r2
 800b680:	d1f0      	bne.n	800b664 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800b682:	231f      	movs	r3, #31
 800b684:	18fb      	adds	r3, r7, r3
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d105      	bne.n	800b698 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800b68c:	4b69      	ldr	r3, [pc, #420]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b68e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b690:	4b68      	ldr	r3, [pc, #416]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b692:	496b      	ldr	r1, [pc, #428]	@ (800b840 <HAL_RCC_OscConfig+0x638>)
 800b694:	400a      	ands	r2, r1
 800b696:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2220      	movs	r2, #32
 800b69e:	4013      	ands	r3, r2
 800b6a0:	d039      	beq.n	800b716 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	69db      	ldr	r3, [r3, #28]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d01b      	beq.n	800b6e2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b6aa:	4b62      	ldr	r3, [pc, #392]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	4b61      	ldr	r3, [pc, #388]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b6b0:	2180      	movs	r1, #128	@ 0x80
 800b6b2:	03c9      	lsls	r1, r1, #15
 800b6b4:	430a      	orrs	r2, r1
 800b6b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6b8:	f7fc ffaa 	bl	8008610 <HAL_GetTick>
 800b6bc:	0003      	movs	r3, r0
 800b6be:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800b6c0:	e008      	b.n	800b6d4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b6c2:	f7fc ffa5 	bl	8008610 <HAL_GetTick>
 800b6c6:	0002      	movs	r2, r0
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	1ad3      	subs	r3, r2, r3
 800b6cc:	2b02      	cmp	r3, #2
 800b6ce:	d901      	bls.n	800b6d4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800b6d0:	2303      	movs	r3, #3
 800b6d2:	e0f3      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800b6d4:	4b57      	ldr	r3, [pc, #348]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	2380      	movs	r3, #128	@ 0x80
 800b6da:	041b      	lsls	r3, r3, #16
 800b6dc:	4013      	ands	r3, r2
 800b6de:	d0f0      	beq.n	800b6c2 <HAL_RCC_OscConfig+0x4ba>
 800b6e0:	e019      	b.n	800b716 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b6e2:	4b54      	ldr	r3, [pc, #336]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	4b53      	ldr	r3, [pc, #332]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b6e8:	4956      	ldr	r1, [pc, #344]	@ (800b844 <HAL_RCC_OscConfig+0x63c>)
 800b6ea:	400a      	ands	r2, r1
 800b6ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6ee:	f7fc ff8f 	bl	8008610 <HAL_GetTick>
 800b6f2:	0003      	movs	r3, r0
 800b6f4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800b6f6:	e008      	b.n	800b70a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b6f8:	f7fc ff8a 	bl	8008610 <HAL_GetTick>
 800b6fc:	0002      	movs	r2, r0
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	2b02      	cmp	r3, #2
 800b704:	d901      	bls.n	800b70a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800b706:	2303      	movs	r3, #3
 800b708:	e0d8      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800b70a:	4b4a      	ldr	r3, [pc, #296]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	2380      	movs	r3, #128	@ 0x80
 800b710:	041b      	lsls	r3, r3, #16
 800b712:	4013      	ands	r3, r2
 800b714:	d1f0      	bne.n	800b6f8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d100      	bne.n	800b720 <HAL_RCC_OscConfig+0x518>
 800b71e:	e0cc      	b.n	800b8ba <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b720:	4b44      	ldr	r3, [pc, #272]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	2238      	movs	r2, #56	@ 0x38
 800b726:	4013      	ands	r3, r2
 800b728:	2b10      	cmp	r3, #16
 800b72a:	d100      	bne.n	800b72e <HAL_RCC_OscConfig+0x526>
 800b72c:	e07b      	b.n	800b826 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	2b02      	cmp	r3, #2
 800b734:	d156      	bne.n	800b7e4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b736:	4b3f      	ldr	r3, [pc, #252]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	4b3e      	ldr	r3, [pc, #248]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b73c:	4942      	ldr	r1, [pc, #264]	@ (800b848 <HAL_RCC_OscConfig+0x640>)
 800b73e:	400a      	ands	r2, r1
 800b740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b742:	f7fc ff65 	bl	8008610 <HAL_GetTick>
 800b746:	0003      	movs	r3, r0
 800b748:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b74a:	e008      	b.n	800b75e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b74c:	f7fc ff60 	bl	8008610 <HAL_GetTick>
 800b750:	0002      	movs	r2, r0
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	1ad3      	subs	r3, r2, r3
 800b756:	2b02      	cmp	r3, #2
 800b758:	d901      	bls.n	800b75e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800b75a:	2303      	movs	r3, #3
 800b75c:	e0ae      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b75e:	4b35      	ldr	r3, [pc, #212]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	2380      	movs	r3, #128	@ 0x80
 800b764:	049b      	lsls	r3, r3, #18
 800b766:	4013      	ands	r3, r2
 800b768:	d1f0      	bne.n	800b74c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b76a:	4b32      	ldr	r3, [pc, #200]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	4a37      	ldr	r2, [pc, #220]	@ (800b84c <HAL_RCC_OscConfig+0x644>)
 800b770:	4013      	ands	r3, r2
 800b772:	0019      	movs	r1, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b77c:	431a      	orrs	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b782:	021b      	lsls	r3, r3, #8
 800b784:	431a      	orrs	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b78a:	431a      	orrs	r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b790:	431a      	orrs	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b796:	431a      	orrs	r2, r3
 800b798:	4b26      	ldr	r3, [pc, #152]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b79a:	430a      	orrs	r2, r1
 800b79c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b79e:	4b25      	ldr	r3, [pc, #148]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	4b24      	ldr	r3, [pc, #144]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b7a4:	2180      	movs	r1, #128	@ 0x80
 800b7a6:	0449      	lsls	r1, r1, #17
 800b7a8:	430a      	orrs	r2, r1
 800b7aa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800b7ac:	4b21      	ldr	r3, [pc, #132]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b7ae:	68da      	ldr	r2, [r3, #12]
 800b7b0:	4b20      	ldr	r3, [pc, #128]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b7b2:	2180      	movs	r1, #128	@ 0x80
 800b7b4:	0549      	lsls	r1, r1, #21
 800b7b6:	430a      	orrs	r2, r1
 800b7b8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7ba:	f7fc ff29 	bl	8008610 <HAL_GetTick>
 800b7be:	0003      	movs	r3, r0
 800b7c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b7c2:	e008      	b.n	800b7d6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7c4:	f7fc ff24 	bl	8008610 <HAL_GetTick>
 800b7c8:	0002      	movs	r2, r0
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	1ad3      	subs	r3, r2, r3
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d901      	bls.n	800b7d6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	e072      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b7d6:	4b17      	ldr	r3, [pc, #92]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	2380      	movs	r3, #128	@ 0x80
 800b7dc:	049b      	lsls	r3, r3, #18
 800b7de:	4013      	ands	r3, r2
 800b7e0:	d0f0      	beq.n	800b7c4 <HAL_RCC_OscConfig+0x5bc>
 800b7e2:	e06a      	b.n	800b8ba <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7e4:	4b13      	ldr	r3, [pc, #76]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	4b12      	ldr	r3, [pc, #72]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b7ea:	4917      	ldr	r1, [pc, #92]	@ (800b848 <HAL_RCC_OscConfig+0x640>)
 800b7ec:	400a      	ands	r2, r1
 800b7ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7f0:	f7fc ff0e 	bl	8008610 <HAL_GetTick>
 800b7f4:	0003      	movs	r3, r0
 800b7f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b7f8:	e008      	b.n	800b80c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7fa:	f7fc ff09 	bl	8008610 <HAL_GetTick>
 800b7fe:	0002      	movs	r2, r0
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	1ad3      	subs	r3, r2, r3
 800b804:	2b02      	cmp	r3, #2
 800b806:	d901      	bls.n	800b80c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800b808:	2303      	movs	r3, #3
 800b80a:	e057      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b80c:	4b09      	ldr	r3, [pc, #36]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	2380      	movs	r3, #128	@ 0x80
 800b812:	049b      	lsls	r3, r3, #18
 800b814:	4013      	ands	r3, r2
 800b816:	d1f0      	bne.n	800b7fa <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800b818:	4b06      	ldr	r3, [pc, #24]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b81a:	68da      	ldr	r2, [r3, #12]
 800b81c:	4b05      	ldr	r3, [pc, #20]	@ (800b834 <HAL_RCC_OscConfig+0x62c>)
 800b81e:	490c      	ldr	r1, [pc, #48]	@ (800b850 <HAL_RCC_OscConfig+0x648>)
 800b820:	400a      	ands	r2, r1
 800b822:	60da      	str	r2, [r3, #12]
 800b824:	e049      	b.n	800b8ba <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a1b      	ldr	r3, [r3, #32]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d112      	bne.n	800b854 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	e044      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
 800b832:	46c0      	nop			@ (mov r8, r8)
 800b834:	40021000 	.word	0x40021000
 800b838:	40007000 	.word	0x40007000
 800b83c:	00001388 	.word	0x00001388
 800b840:	efffffff 	.word	0xefffffff
 800b844:	ffbfffff 	.word	0xffbfffff
 800b848:	feffffff 	.word	0xfeffffff
 800b84c:	11c1808c 	.word	0x11c1808c
 800b850:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800b854:	4b1b      	ldr	r3, [pc, #108]	@ (800b8c4 <HAL_RCC_OscConfig+0x6bc>)
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	2203      	movs	r2, #3
 800b85e:	401a      	ands	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b864:	429a      	cmp	r2, r3
 800b866:	d126      	bne.n	800b8b6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	2270      	movs	r2, #112	@ 0x70
 800b86c:	401a      	ands	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b872:	429a      	cmp	r2, r3
 800b874:	d11f      	bne.n	800b8b6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b876:	697a      	ldr	r2, [r7, #20]
 800b878:	23fe      	movs	r3, #254	@ 0xfe
 800b87a:	01db      	lsls	r3, r3, #7
 800b87c:	401a      	ands	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b882:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b884:	429a      	cmp	r2, r3
 800b886:	d116      	bne.n	800b8b6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	23f8      	movs	r3, #248	@ 0xf8
 800b88c:	039b      	lsls	r3, r3, #14
 800b88e:	401a      	ands	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b894:	429a      	cmp	r2, r3
 800b896:	d10e      	bne.n	800b8b6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	23e0      	movs	r3, #224	@ 0xe0
 800b89c:	051b      	lsls	r3, r3, #20
 800b89e:	401a      	ands	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d106      	bne.n	800b8b6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	0f5b      	lsrs	r3, r3, #29
 800b8ac:	075a      	lsls	r2, r3, #29
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d001      	beq.n	800b8ba <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e000      	b.n	800b8bc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	0018      	movs	r0, r3
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	b008      	add	sp, #32
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	40021000 	.word	0x40021000

0800b8c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e0e9      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b8dc:	4b76      	ldr	r3, [pc, #472]	@ (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2207      	movs	r2, #7
 800b8e2:	4013      	ands	r3, r2
 800b8e4:	683a      	ldr	r2, [r7, #0]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d91e      	bls.n	800b928 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8ea:	4b73      	ldr	r3, [pc, #460]	@ (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2207      	movs	r2, #7
 800b8f0:	4393      	bics	r3, r2
 800b8f2:	0019      	movs	r1, r3
 800b8f4:	4b70      	ldr	r3, [pc, #448]	@ (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	430a      	orrs	r2, r1
 800b8fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b8fc:	f7fc fe88 	bl	8008610 <HAL_GetTick>
 800b900:	0003      	movs	r3, r0
 800b902:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b904:	e009      	b.n	800b91a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b906:	f7fc fe83 	bl	8008610 <HAL_GetTick>
 800b90a:	0002      	movs	r2, r0
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	4a6a      	ldr	r2, [pc, #424]	@ (800babc <HAL_RCC_ClockConfig+0x1f4>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d901      	bls.n	800b91a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800b916:	2303      	movs	r3, #3
 800b918:	e0ca      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b91a:	4b67      	ldr	r3, [pc, #412]	@ (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2207      	movs	r2, #7
 800b920:	4013      	ands	r3, r2
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	429a      	cmp	r2, r3
 800b926:	d1ee      	bne.n	800b906 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2202      	movs	r2, #2
 800b92e:	4013      	ands	r3, r2
 800b930:	d015      	beq.n	800b95e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2204      	movs	r2, #4
 800b938:	4013      	ands	r3, r2
 800b93a:	d006      	beq.n	800b94a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800b93c:	4b60      	ldr	r3, [pc, #384]	@ (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b93e:	689a      	ldr	r2, [r3, #8]
 800b940:	4b5f      	ldr	r3, [pc, #380]	@ (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b942:	21e0      	movs	r1, #224	@ 0xe0
 800b944:	01c9      	lsls	r1, r1, #7
 800b946:	430a      	orrs	r2, r1
 800b948:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b94a:	4b5d      	ldr	r3, [pc, #372]	@ (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	4a5d      	ldr	r2, [pc, #372]	@ (800bac4 <HAL_RCC_ClockConfig+0x1fc>)
 800b950:	4013      	ands	r3, r2
 800b952:	0019      	movs	r1, r3
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	689a      	ldr	r2, [r3, #8]
 800b958:	4b59      	ldr	r3, [pc, #356]	@ (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b95a:	430a      	orrs	r2, r1
 800b95c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2201      	movs	r2, #1
 800b964:	4013      	ands	r3, r2
 800b966:	d057      	beq.n	800ba18 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d107      	bne.n	800b980 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b970:	4b53      	ldr	r3, [pc, #332]	@ (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	2380      	movs	r3, #128	@ 0x80
 800b976:	029b      	lsls	r3, r3, #10
 800b978:	4013      	ands	r3, r2
 800b97a:	d12b      	bne.n	800b9d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	e097      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	2b02      	cmp	r3, #2
 800b986:	d107      	bne.n	800b998 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b988:	4b4d      	ldr	r3, [pc, #308]	@ (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	2380      	movs	r3, #128	@ 0x80
 800b98e:	049b      	lsls	r3, r3, #18
 800b990:	4013      	ands	r3, r2
 800b992:	d11f      	bne.n	800b9d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	e08b      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d107      	bne.n	800b9b0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b9a0:	4b47      	ldr	r3, [pc, #284]	@ (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	2380      	movs	r3, #128	@ 0x80
 800b9a6:	00db      	lsls	r3, r3, #3
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	d113      	bne.n	800b9d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e07f      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d106      	bne.n	800b9c6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b9b8:	4b41      	ldr	r3, [pc, #260]	@ (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b9ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9bc:	2202      	movs	r2, #2
 800b9be:	4013      	ands	r3, r2
 800b9c0:	d108      	bne.n	800b9d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e074      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b9c6:	4b3e      	ldr	r3, [pc, #248]	@ (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b9c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	d101      	bne.n	800b9d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e06d      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b9d4:	4b3a      	ldr	r3, [pc, #232]	@ (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	2207      	movs	r2, #7
 800b9da:	4393      	bics	r3, r2
 800b9dc:	0019      	movs	r1, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	4b37      	ldr	r3, [pc, #220]	@ (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800b9e4:	430a      	orrs	r2, r1
 800b9e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9e8:	f7fc fe12 	bl	8008610 <HAL_GetTick>
 800b9ec:	0003      	movs	r3, r0
 800b9ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b9f0:	e009      	b.n	800ba06 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b9f2:	f7fc fe0d 	bl	8008610 <HAL_GetTick>
 800b9f6:	0002      	movs	r2, r0
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	1ad3      	subs	r3, r2, r3
 800b9fc:	4a2f      	ldr	r2, [pc, #188]	@ (800babc <HAL_RCC_ClockConfig+0x1f4>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d901      	bls.n	800ba06 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800ba02:	2303      	movs	r3, #3
 800ba04:	e054      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba06:	4b2e      	ldr	r3, [pc, #184]	@ (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	2238      	movs	r2, #56	@ 0x38
 800ba0c:	401a      	ands	r2, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	00db      	lsls	r3, r3, #3
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d1ec      	bne.n	800b9f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ba18:	4b27      	ldr	r3, [pc, #156]	@ (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2207      	movs	r2, #7
 800ba1e:	4013      	ands	r3, r2
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d21e      	bcs.n	800ba64 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba26:	4b24      	ldr	r3, [pc, #144]	@ (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2207      	movs	r2, #7
 800ba2c:	4393      	bics	r3, r2
 800ba2e:	0019      	movs	r1, r3
 800ba30:	4b21      	ldr	r3, [pc, #132]	@ (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800ba32:	683a      	ldr	r2, [r7, #0]
 800ba34:	430a      	orrs	r2, r1
 800ba36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ba38:	f7fc fdea 	bl	8008610 <HAL_GetTick>
 800ba3c:	0003      	movs	r3, r0
 800ba3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ba40:	e009      	b.n	800ba56 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba42:	f7fc fde5 	bl	8008610 <HAL_GetTick>
 800ba46:	0002      	movs	r2, r0
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	4a1b      	ldr	r2, [pc, #108]	@ (800babc <HAL_RCC_ClockConfig+0x1f4>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d901      	bls.n	800ba56 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800ba52:	2303      	movs	r3, #3
 800ba54:	e02c      	b.n	800bab0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ba56:	4b18      	ldr	r3, [pc, #96]	@ (800bab8 <HAL_RCC_ClockConfig+0x1f0>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2207      	movs	r2, #7
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d1ee      	bne.n	800ba42 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2204      	movs	r2, #4
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	d009      	beq.n	800ba82 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800ba6e:	4b14      	ldr	r3, [pc, #80]	@ (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	4a15      	ldr	r2, [pc, #84]	@ (800bac8 <HAL_RCC_ClockConfig+0x200>)
 800ba74:	4013      	ands	r3, r2
 800ba76:	0019      	movs	r1, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	68da      	ldr	r2, [r3, #12]
 800ba7c:	4b10      	ldr	r3, [pc, #64]	@ (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800ba7e:	430a      	orrs	r2, r1
 800ba80:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800ba82:	f000 f829 	bl	800bad8 <HAL_RCC_GetSysClockFreq>
 800ba86:	0001      	movs	r1, r0
 800ba88:	4b0d      	ldr	r3, [pc, #52]	@ (800bac0 <HAL_RCC_ClockConfig+0x1f8>)
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	0a1b      	lsrs	r3, r3, #8
 800ba8e:	220f      	movs	r2, #15
 800ba90:	401a      	ands	r2, r3
 800ba92:	4b0e      	ldr	r3, [pc, #56]	@ (800bacc <HAL_RCC_ClockConfig+0x204>)
 800ba94:	0092      	lsls	r2, r2, #2
 800ba96:	58d3      	ldr	r3, [r2, r3]
 800ba98:	221f      	movs	r2, #31
 800ba9a:	4013      	ands	r3, r2
 800ba9c:	000a      	movs	r2, r1
 800ba9e:	40da      	lsrs	r2, r3
 800baa0:	4b0b      	ldr	r3, [pc, #44]	@ (800bad0 <HAL_RCC_ClockConfig+0x208>)
 800baa2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800baa4:	4b0b      	ldr	r3, [pc, #44]	@ (800bad4 <HAL_RCC_ClockConfig+0x20c>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	0018      	movs	r0, r3
 800baaa:	f7fb feb3 	bl	8007814 <HAL_InitTick>
 800baae:	0003      	movs	r3, r0
}
 800bab0:	0018      	movs	r0, r3
 800bab2:	46bd      	mov	sp, r7
 800bab4:	b004      	add	sp, #16
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	40022000 	.word	0x40022000
 800babc:	00001388 	.word	0x00001388
 800bac0:	40021000 	.word	0x40021000
 800bac4:	fffff0ff 	.word	0xfffff0ff
 800bac8:	ffff8fff 	.word	0xffff8fff
 800bacc:	0801f0c4 	.word	0x0801f0c4
 800bad0:	20000004 	.word	0x20000004
 800bad4:	20000008 	.word	0x20000008

0800bad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bade:	4b3c      	ldr	r3, [pc, #240]	@ (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	2238      	movs	r2, #56	@ 0x38
 800bae4:	4013      	ands	r3, r2
 800bae6:	d10f      	bne.n	800bb08 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800bae8:	4b39      	ldr	r3, [pc, #228]	@ (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	0adb      	lsrs	r3, r3, #11
 800baee:	2207      	movs	r2, #7
 800baf0:	4013      	ands	r3, r2
 800baf2:	2201      	movs	r2, #1
 800baf4:	409a      	lsls	r2, r3
 800baf6:	0013      	movs	r3, r2
 800baf8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	4835      	ldr	r0, [pc, #212]	@ (800bbd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800bafe:	f7fa fca1 	bl	8006444 <__udivsi3>
 800bb02:	0003      	movs	r3, r0
 800bb04:	613b      	str	r3, [r7, #16]
 800bb06:	e05d      	b.n	800bbc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bb08:	4b31      	ldr	r3, [pc, #196]	@ (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	2238      	movs	r2, #56	@ 0x38
 800bb0e:	4013      	ands	r3, r2
 800bb10:	2b08      	cmp	r3, #8
 800bb12:	d102      	bne.n	800bb1a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bb14:	4b30      	ldr	r3, [pc, #192]	@ (800bbd8 <HAL_RCC_GetSysClockFreq+0x100>)
 800bb16:	613b      	str	r3, [r7, #16]
 800bb18:	e054      	b.n	800bbc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bb1a:	4b2d      	ldr	r3, [pc, #180]	@ (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	2238      	movs	r2, #56	@ 0x38
 800bb20:	4013      	ands	r3, r2
 800bb22:	2b10      	cmp	r3, #16
 800bb24:	d138      	bne.n	800bb98 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800bb26:	4b2a      	ldr	r3, [pc, #168]	@ (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	2203      	movs	r2, #3
 800bb2c:	4013      	ands	r3, r2
 800bb2e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb30:	4b27      	ldr	r3, [pc, #156]	@ (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	091b      	lsrs	r3, r3, #4
 800bb36:	2207      	movs	r2, #7
 800bb38:	4013      	ands	r3, r2
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2b03      	cmp	r3, #3
 800bb42:	d10d      	bne.n	800bb60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb44:	68b9      	ldr	r1, [r7, #8]
 800bb46:	4824      	ldr	r0, [pc, #144]	@ (800bbd8 <HAL_RCC_GetSysClockFreq+0x100>)
 800bb48:	f7fa fc7c 	bl	8006444 <__udivsi3>
 800bb4c:	0003      	movs	r3, r0
 800bb4e:	0019      	movs	r1, r3
 800bb50:	4b1f      	ldr	r3, [pc, #124]	@ (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	0a1b      	lsrs	r3, r3, #8
 800bb56:	227f      	movs	r2, #127	@ 0x7f
 800bb58:	4013      	ands	r3, r2
 800bb5a:	434b      	muls	r3, r1
 800bb5c:	617b      	str	r3, [r7, #20]
        break;
 800bb5e:	e00d      	b.n	800bb7c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800bb60:	68b9      	ldr	r1, [r7, #8]
 800bb62:	481c      	ldr	r0, [pc, #112]	@ (800bbd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800bb64:	f7fa fc6e 	bl	8006444 <__udivsi3>
 800bb68:	0003      	movs	r3, r0
 800bb6a:	0019      	movs	r1, r3
 800bb6c:	4b18      	ldr	r3, [pc, #96]	@ (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	0a1b      	lsrs	r3, r3, #8
 800bb72:	227f      	movs	r2, #127	@ 0x7f
 800bb74:	4013      	ands	r3, r2
 800bb76:	434b      	muls	r3, r1
 800bb78:	617b      	str	r3, [r7, #20]
        break;
 800bb7a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800bb7c:	4b14      	ldr	r3, [pc, #80]	@ (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	0f5b      	lsrs	r3, r3, #29
 800bb82:	2207      	movs	r2, #7
 800bb84:	4013      	ands	r3, r2
 800bb86:	3301      	adds	r3, #1
 800bb88:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800bb8a:	6879      	ldr	r1, [r7, #4]
 800bb8c:	6978      	ldr	r0, [r7, #20]
 800bb8e:	f7fa fc59 	bl	8006444 <__udivsi3>
 800bb92:	0003      	movs	r3, r0
 800bb94:	613b      	str	r3, [r7, #16]
 800bb96:	e015      	b.n	800bbc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800bb98:	4b0d      	ldr	r3, [pc, #52]	@ (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	2238      	movs	r2, #56	@ 0x38
 800bb9e:	4013      	ands	r3, r2
 800bba0:	2b20      	cmp	r3, #32
 800bba2:	d103      	bne.n	800bbac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800bba4:	2380      	movs	r3, #128	@ 0x80
 800bba6:	021b      	lsls	r3, r3, #8
 800bba8:	613b      	str	r3, [r7, #16]
 800bbaa:	e00b      	b.n	800bbc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800bbac:	4b08      	ldr	r3, [pc, #32]	@ (800bbd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	2238      	movs	r2, #56	@ 0x38
 800bbb2:	4013      	ands	r3, r2
 800bbb4:	2b18      	cmp	r3, #24
 800bbb6:	d103      	bne.n	800bbc0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800bbb8:	23fa      	movs	r3, #250	@ 0xfa
 800bbba:	01db      	lsls	r3, r3, #7
 800bbbc:	613b      	str	r3, [r7, #16]
 800bbbe:	e001      	b.n	800bbc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bbc4:	693b      	ldr	r3, [r7, #16]
}
 800bbc6:	0018      	movs	r0, r3
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	b006      	add	sp, #24
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	46c0      	nop			@ (mov r8, r8)
 800bbd0:	40021000 	.word	0x40021000
 800bbd4:	00f42400 	.word	0x00f42400
 800bbd8:	007a1200 	.word	0x007a1200

0800bbdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bbe0:	4b02      	ldr	r3, [pc, #8]	@ (800bbec <HAL_RCC_GetHCLKFreq+0x10>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
}
 800bbe4:	0018      	movs	r0, r3
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	46c0      	nop			@ (mov r8, r8)
 800bbec:	20000004 	.word	0x20000004

0800bbf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bbf0:	b5b0      	push	{r4, r5, r7, lr}
 800bbf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800bbf4:	f7ff fff2 	bl	800bbdc <HAL_RCC_GetHCLKFreq>
 800bbf8:	0004      	movs	r4, r0
 800bbfa:	f7ff faf9 	bl	800b1f0 <LL_RCC_GetAPB1Prescaler>
 800bbfe:	0003      	movs	r3, r0
 800bc00:	0b1a      	lsrs	r2, r3, #12
 800bc02:	4b05      	ldr	r3, [pc, #20]	@ (800bc18 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bc04:	0092      	lsls	r2, r2, #2
 800bc06:	58d3      	ldr	r3, [r2, r3]
 800bc08:	221f      	movs	r2, #31
 800bc0a:	4013      	ands	r3, r2
 800bc0c:	40dc      	lsrs	r4, r3
 800bc0e:	0023      	movs	r3, r4
}
 800bc10:	0018      	movs	r0, r3
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bdb0      	pop	{r4, r5, r7, pc}
 800bc16:	46c0      	nop			@ (mov r8, r8)
 800bc18:	0801f104 	.word	0x0801f104

0800bc1c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2207      	movs	r2, #7
 800bc2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bc2c:	4b0e      	ldr	r3, [pc, #56]	@ (800bc68 <HAL_RCC_GetClockConfig+0x4c>)
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	2207      	movs	r2, #7
 800bc32:	401a      	ands	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bc38:	4b0b      	ldr	r3, [pc, #44]	@ (800bc68 <HAL_RCC_GetClockConfig+0x4c>)
 800bc3a:	689a      	ldr	r2, [r3, #8]
 800bc3c:	23f0      	movs	r3, #240	@ 0xf0
 800bc3e:	011b      	lsls	r3, r3, #4
 800bc40:	401a      	ands	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800bc46:	4b08      	ldr	r3, [pc, #32]	@ (800bc68 <HAL_RCC_GetClockConfig+0x4c>)
 800bc48:	689a      	ldr	r2, [r3, #8]
 800bc4a:	23e0      	movs	r3, #224	@ 0xe0
 800bc4c:	01db      	lsls	r3, r3, #7
 800bc4e:	401a      	ands	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bc54:	4b05      	ldr	r3, [pc, #20]	@ (800bc6c <HAL_RCC_GetClockConfig+0x50>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2207      	movs	r2, #7
 800bc5a:	401a      	ands	r2, r3
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	601a      	str	r2, [r3, #0]
}
 800bc60:	46c0      	nop			@ (mov r8, r8)
 800bc62:	46bd      	mov	sp, r7
 800bc64:	b002      	add	sp, #8
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	40021000 	.word	0x40021000
 800bc6c:	40022000 	.word	0x40022000

0800bc70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b086      	sub	sp, #24
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800bc78:	2313      	movs	r3, #19
 800bc7a:	18fb      	adds	r3, r7, r3
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bc80:	2312      	movs	r3, #18
 800bc82:	18fb      	adds	r3, r7, r3
 800bc84:	2200      	movs	r2, #0
 800bc86:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	2380      	movs	r3, #128	@ 0x80
 800bc8e:	029b      	lsls	r3, r3, #10
 800bc90:	4013      	ands	r3, r2
 800bc92:	d100      	bne.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800bc94:	e0ad      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc96:	2011      	movs	r0, #17
 800bc98:	183b      	adds	r3, r7, r0
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc9e:	4b47      	ldr	r3, [pc, #284]	@ (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bca0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bca2:	2380      	movs	r3, #128	@ 0x80
 800bca4:	055b      	lsls	r3, r3, #21
 800bca6:	4013      	ands	r3, r2
 800bca8:	d110      	bne.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bcaa:	4b44      	ldr	r3, [pc, #272]	@ (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bcac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bcae:	4b43      	ldr	r3, [pc, #268]	@ (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bcb0:	2180      	movs	r1, #128	@ 0x80
 800bcb2:	0549      	lsls	r1, r1, #21
 800bcb4:	430a      	orrs	r2, r1
 800bcb6:	63da      	str	r2, [r3, #60]	@ 0x3c
 800bcb8:	4b40      	ldr	r3, [pc, #256]	@ (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bcba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bcbc:	2380      	movs	r3, #128	@ 0x80
 800bcbe:	055b      	lsls	r3, r3, #21
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	60bb      	str	r3, [r7, #8]
 800bcc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bcc6:	183b      	adds	r3, r7, r0
 800bcc8:	2201      	movs	r2, #1
 800bcca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bccc:	4b3c      	ldr	r3, [pc, #240]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	4b3b      	ldr	r3, [pc, #236]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800bcd2:	2180      	movs	r1, #128	@ 0x80
 800bcd4:	0049      	lsls	r1, r1, #1
 800bcd6:	430a      	orrs	r2, r1
 800bcd8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bcda:	f7fc fc99 	bl	8008610 <HAL_GetTick>
 800bcde:	0003      	movs	r3, r0
 800bce0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bce2:	e00b      	b.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bce4:	f7fc fc94 	bl	8008610 <HAL_GetTick>
 800bce8:	0002      	movs	r2, r0
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	1ad3      	subs	r3, r2, r3
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d904      	bls.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800bcf2:	2313      	movs	r3, #19
 800bcf4:	18fb      	adds	r3, r7, r3
 800bcf6:	2203      	movs	r2, #3
 800bcf8:	701a      	strb	r2, [r3, #0]
        break;
 800bcfa:	e005      	b.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bcfc:	4b30      	ldr	r3, [pc, #192]	@ (800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	2380      	movs	r3, #128	@ 0x80
 800bd02:	005b      	lsls	r3, r3, #1
 800bd04:	4013      	ands	r3, r2
 800bd06:	d0ed      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800bd08:	2313      	movs	r3, #19
 800bd0a:	18fb      	adds	r3, r7, r3
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d15e      	bne.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bd12:	4b2a      	ldr	r3, [pc, #168]	@ (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd16:	23c0      	movs	r3, #192	@ 0xc0
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d019      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d014      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bd2e:	4b23      	ldr	r3, [pc, #140]	@ (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd32:	4a24      	ldr	r2, [pc, #144]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800bd34:	4013      	ands	r3, r2
 800bd36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bd38:	4b20      	ldr	r3, [pc, #128]	@ (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd3c:	4b1f      	ldr	r3, [pc, #124]	@ (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd3e:	2180      	movs	r1, #128	@ 0x80
 800bd40:	0249      	lsls	r1, r1, #9
 800bd42:	430a      	orrs	r2, r1
 800bd44:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bd46:	4b1d      	ldr	r3, [pc, #116]	@ (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd4a:	4b1c      	ldr	r3, [pc, #112]	@ (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd4c:	491e      	ldr	r1, [pc, #120]	@ (800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800bd4e:	400a      	ands	r2, r1
 800bd50:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bd52:	4b1a      	ldr	r3, [pc, #104]	@ (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd54:	697a      	ldr	r2, [r7, #20]
 800bd56:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	d016      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd60:	f7fc fc56 	bl	8008610 <HAL_GetTick>
 800bd64:	0003      	movs	r3, r0
 800bd66:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd68:	e00c      	b.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd6a:	f7fc fc51 	bl	8008610 <HAL_GetTick>
 800bd6e:	0002      	movs	r2, r0
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	1ad3      	subs	r3, r2, r3
 800bd74:	4a15      	ldr	r2, [pc, #84]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d904      	bls.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800bd7a:	2313      	movs	r3, #19
 800bd7c:	18fb      	adds	r3, r7, r3
 800bd7e:	2203      	movs	r2, #3
 800bd80:	701a      	strb	r2, [r3, #0]
            break;
 800bd82:	e004      	b.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd84:	4b0d      	ldr	r3, [pc, #52]	@ (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd88:	2202      	movs	r2, #2
 800bd8a:	4013      	ands	r3, r2
 800bd8c:	d0ed      	beq.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800bd8e:	2313      	movs	r3, #19
 800bd90:	18fb      	adds	r3, r7, r3
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10a      	bne.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd98:	4b08      	ldr	r3, [pc, #32]	@ (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd9c:	4a09      	ldr	r2, [pc, #36]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800bd9e:	4013      	ands	r3, r2
 800bda0:	0019      	movs	r1, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bda6:	4b05      	ldr	r3, [pc, #20]	@ (800bdbc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bda8:	430a      	orrs	r2, r1
 800bdaa:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bdac:	e016      	b.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bdae:	2312      	movs	r3, #18
 800bdb0:	18fb      	adds	r3, r7, r3
 800bdb2:	2213      	movs	r2, #19
 800bdb4:	18ba      	adds	r2, r7, r2
 800bdb6:	7812      	ldrb	r2, [r2, #0]
 800bdb8:	701a      	strb	r2, [r3, #0]
 800bdba:	e00f      	b.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800bdbc:	40021000 	.word	0x40021000
 800bdc0:	40007000 	.word	0x40007000
 800bdc4:	fffffcff 	.word	0xfffffcff
 800bdc8:	fffeffff 	.word	0xfffeffff
 800bdcc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdd0:	2312      	movs	r3, #18
 800bdd2:	18fb      	adds	r3, r7, r3
 800bdd4:	2213      	movs	r2, #19
 800bdd6:	18ba      	adds	r2, r7, r2
 800bdd8:	7812      	ldrb	r2, [r2, #0]
 800bdda:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bddc:	2311      	movs	r3, #17
 800bdde:	18fb      	adds	r3, r7, r3
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d105      	bne.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bde6:	4bc5      	ldr	r3, [pc, #788]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bde8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bdea:	4bc4      	ldr	r3, [pc, #784]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bdec:	49c4      	ldr	r1, [pc, #784]	@ (800c100 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800bdee:	400a      	ands	r2, r1
 800bdf0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	4013      	ands	r3, r2
 800bdfa:	d009      	beq.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bdfc:	4bbf      	ldr	r3, [pc, #764]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bdfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be00:	2203      	movs	r2, #3
 800be02:	4393      	bics	r3, r2
 800be04:	0019      	movs	r1, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	685a      	ldr	r2, [r3, #4]
 800be0a:	4bbc      	ldr	r3, [pc, #752]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800be0c:	430a      	orrs	r2, r1
 800be0e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2202      	movs	r2, #2
 800be16:	4013      	ands	r3, r2
 800be18:	d009      	beq.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800be1a:	4bb8      	ldr	r3, [pc, #736]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800be1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be1e:	220c      	movs	r2, #12
 800be20:	4393      	bics	r3, r2
 800be22:	0019      	movs	r1, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	689a      	ldr	r2, [r3, #8]
 800be28:	4bb4      	ldr	r3, [pc, #720]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800be2a:	430a      	orrs	r2, r1
 800be2c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2204      	movs	r2, #4
 800be34:	4013      	ands	r3, r2
 800be36:	d009      	beq.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800be38:	4bb0      	ldr	r3, [pc, #704]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800be3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be3c:	2230      	movs	r2, #48	@ 0x30
 800be3e:	4393      	bics	r3, r2
 800be40:	0019      	movs	r1, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	68da      	ldr	r2, [r3, #12]
 800be46:	4bad      	ldr	r3, [pc, #692]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800be48:	430a      	orrs	r2, r1
 800be4a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2210      	movs	r2, #16
 800be52:	4013      	ands	r3, r2
 800be54:	d009      	beq.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800be56:	4ba9      	ldr	r3, [pc, #676]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800be58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be5a:	4aaa      	ldr	r2, [pc, #680]	@ (800c104 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be5c:	4013      	ands	r3, r2
 800be5e:	0019      	movs	r1, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	691a      	ldr	r2, [r3, #16]
 800be64:	4ba5      	ldr	r3, [pc, #660]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800be66:	430a      	orrs	r2, r1
 800be68:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	2380      	movs	r3, #128	@ 0x80
 800be70:	015b      	lsls	r3, r3, #5
 800be72:	4013      	ands	r3, r2
 800be74:	d009      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800be76:	4ba1      	ldr	r3, [pc, #644]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800be78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be7a:	4aa3      	ldr	r2, [pc, #652]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800be7c:	4013      	ands	r3, r2
 800be7e:	0019      	movs	r1, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	695a      	ldr	r2, [r3, #20]
 800be84:	4b9d      	ldr	r3, [pc, #628]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800be86:	430a      	orrs	r2, r1
 800be88:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	2380      	movs	r3, #128	@ 0x80
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4013      	ands	r3, r2
 800be94:	d009      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be96:	4b99      	ldr	r3, [pc, #612]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800be98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be9a:	4a9c      	ldr	r2, [pc, #624]	@ (800c10c <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 800be9c:	4013      	ands	r3, r2
 800be9e:	0019      	movs	r1, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bea4:	4b95      	ldr	r3, [pc, #596]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bea6:	430a      	orrs	r2, r1
 800bea8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	2380      	movs	r3, #128	@ 0x80
 800beb0:	00db      	lsls	r3, r3, #3
 800beb2:	4013      	ands	r3, r2
 800beb4:	d009      	beq.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800beb6:	4b91      	ldr	r3, [pc, #580]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800beb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800beba:	4a95      	ldr	r2, [pc, #596]	@ (800c110 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bebc:	4013      	ands	r3, r2
 800bebe:	0019      	movs	r1, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bec4:	4b8d      	ldr	r3, [pc, #564]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bec6:	430a      	orrs	r2, r1
 800bec8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2220      	movs	r2, #32
 800bed0:	4013      	ands	r3, r2
 800bed2:	d009      	beq.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bed4:	4b89      	ldr	r3, [pc, #548]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bed8:	4a8e      	ldr	r2, [pc, #568]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800beda:	4013      	ands	r3, r2
 800bedc:	0019      	movs	r1, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	699a      	ldr	r2, [r3, #24]
 800bee2:	4b86      	ldr	r3, [pc, #536]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bee4:	430a      	orrs	r2, r1
 800bee6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2240      	movs	r2, #64	@ 0x40
 800beee:	4013      	ands	r3, r2
 800bef0:	d009      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bef2:	4b82      	ldr	r3, [pc, #520]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bef6:	4a88      	ldr	r2, [pc, #544]	@ (800c118 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800bef8:	4013      	ands	r3, r2
 800befa:	0019      	movs	r1, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	69da      	ldr	r2, [r3, #28]
 800bf00:	4b7e      	ldr	r3, [pc, #504]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf02:	430a      	orrs	r2, r1
 800bf04:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	2380      	movs	r3, #128	@ 0x80
 800bf0c:	02db      	lsls	r3, r3, #11
 800bf0e:	4013      	ands	r3, r2
 800bf10:	d016      	beq.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf12:	4b7a      	ldr	r3, [pc, #488]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf16:	4a81      	ldr	r2, [pc, #516]	@ (800c11c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bf18:	4013      	ands	r3, r2
 800bf1a:	0019      	movs	r1, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf20:	4b76      	ldr	r3, [pc, #472]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf22:	430a      	orrs	r2, r1
 800bf24:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf2a:	23c0      	movs	r3, #192	@ 0xc0
 800bf2c:	051b      	lsls	r3, r3, #20
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d106      	bne.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800bf32:	4b72      	ldr	r3, [pc, #456]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf34:	68da      	ldr	r2, [r3, #12]
 800bf36:	4b71      	ldr	r3, [pc, #452]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf38:	2180      	movs	r1, #128	@ 0x80
 800bf3a:	0449      	lsls	r1, r1, #17
 800bf3c:	430a      	orrs	r2, r1
 800bf3e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	2380      	movs	r3, #128	@ 0x80
 800bf46:	01db      	lsls	r3, r3, #7
 800bf48:	4013      	ands	r3, r2
 800bf4a:	d015      	beq.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x308>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf4c:	4b6b      	ldr	r3, [pc, #428]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	0899      	lsrs	r1, r3, #2
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf58:	4b68      	ldr	r3, [pc, #416]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf62:	2380      	movs	r3, #128	@ 0x80
 800bf64:	05db      	lsls	r3, r3, #23
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d106      	bne.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800bf6a:	4b64      	ldr	r3, [pc, #400]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf6c:	68da      	ldr	r2, [r3, #12]
 800bf6e:	4b63      	ldr	r3, [pc, #396]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf70:	2180      	movs	r1, #128	@ 0x80
 800bf72:	0249      	lsls	r1, r1, #9
 800bf74:	430a      	orrs	r2, r1
 800bf76:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	2380      	movs	r3, #128	@ 0x80
 800bf7e:	031b      	lsls	r3, r3, #12
 800bf80:	4013      	ands	r3, r2
 800bf82:	d009      	beq.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bf84:	4b5d      	ldr	r3, [pc, #372]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf88:	2240      	movs	r2, #64	@ 0x40
 800bf8a:	4393      	bics	r3, r2
 800bf8c:	0019      	movs	r1, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf92:	4b5a      	ldr	r3, [pc, #360]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf94:	430a      	orrs	r2, r1
 800bf96:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	2380      	movs	r3, #128	@ 0x80
 800bf9e:	039b      	lsls	r3, r3, #14
 800bfa0:	4013      	ands	r3, r2
 800bfa2:	d016      	beq.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800bfa4:	4b55      	ldr	r3, [pc, #340]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bfa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfa8:	4a5d      	ldr	r2, [pc, #372]	@ (800c120 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800bfaa:	4013      	ands	r3, r2
 800bfac:	0019      	movs	r1, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bfb2:	4b52      	ldr	r3, [pc, #328]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bfb4:	430a      	orrs	r2, r1
 800bfb6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bfbc:	2380      	movs	r3, #128	@ 0x80
 800bfbe:	03db      	lsls	r3, r3, #15
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d106      	bne.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800bfc4:	4b4d      	ldr	r3, [pc, #308]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bfc6:	68da      	ldr	r2, [r3, #12]
 800bfc8:	4b4c      	ldr	r3, [pc, #304]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bfca:	2180      	movs	r1, #128	@ 0x80
 800bfcc:	0449      	lsls	r1, r1, #17
 800bfce:	430a      	orrs	r2, r1
 800bfd0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	2380      	movs	r3, #128	@ 0x80
 800bfd8:	03db      	lsls	r3, r3, #15
 800bfda:	4013      	ands	r3, r2
 800bfdc:	d016      	beq.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800bfde:	4b47      	ldr	r3, [pc, #284]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bfe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfe2:	4a50      	ldr	r2, [pc, #320]	@ (800c124 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	0019      	movs	r1, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bfec:	4b43      	ldr	r3, [pc, #268]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bfee:	430a      	orrs	r2, r1
 800bff0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bff6:	2380      	movs	r3, #128	@ 0x80
 800bff8:	045b      	lsls	r3, r3, #17
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d106      	bne.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800bffe:	4b3f      	ldr	r3, [pc, #252]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c000:	68da      	ldr	r2, [r3, #12]
 800c002:	4b3e      	ldr	r3, [pc, #248]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c004:	2180      	movs	r1, #128	@ 0x80
 800c006:	0449      	lsls	r1, r1, #17
 800c008:	430a      	orrs	r2, r1
 800c00a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	2380      	movs	r3, #128	@ 0x80
 800c012:	011b      	lsls	r3, r3, #4
 800c014:	4013      	ands	r3, r2
 800c016:	d014      	beq.n	800c042 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800c018:	4b38      	ldr	r3, [pc, #224]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c01a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c01c:	2203      	movs	r2, #3
 800c01e:	4393      	bics	r3, r2
 800c020:	0019      	movs	r1, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a1a      	ldr	r2, [r3, #32]
 800c026:	4b35      	ldr	r3, [pc, #212]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c028:	430a      	orrs	r2, r1
 800c02a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6a1b      	ldr	r3, [r3, #32]
 800c030:	2b01      	cmp	r3, #1
 800c032:	d106      	bne.n	800c042 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c034:	4b31      	ldr	r3, [pc, #196]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c036:	68da      	ldr	r2, [r3, #12]
 800c038:	4b30      	ldr	r3, [pc, #192]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c03a:	2180      	movs	r1, #128	@ 0x80
 800c03c:	0249      	lsls	r1, r1, #9
 800c03e:	430a      	orrs	r2, r1
 800c040:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	2380      	movs	r3, #128	@ 0x80
 800c048:	019b      	lsls	r3, r3, #6
 800c04a:	4013      	ands	r3, r2
 800c04c:	d014      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800c04e:	4b2b      	ldr	r3, [pc, #172]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c052:	220c      	movs	r2, #12
 800c054:	4393      	bics	r3, r2
 800c056:	0019      	movs	r1, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c05c:	4b27      	ldr	r3, [pc, #156]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c05e:	430a      	orrs	r2, r1
 800c060:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c066:	2b04      	cmp	r3, #4
 800c068:	d106      	bne.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c06a:	4b24      	ldr	r3, [pc, #144]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c06c:	68da      	ldr	r2, [r3, #12]
 800c06e:	4b23      	ldr	r3, [pc, #140]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c070:	2180      	movs	r1, #128	@ 0x80
 800c072:	0249      	lsls	r1, r1, #9
 800c074:	430a      	orrs	r2, r1
 800c076:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	2380      	movs	r3, #128	@ 0x80
 800c07e:	045b      	lsls	r3, r3, #17
 800c080:	4013      	ands	r3, r2
 800c082:	d016      	beq.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c084:	4b1d      	ldr	r3, [pc, #116]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c088:	4a22      	ldr	r2, [pc, #136]	@ (800c114 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c08a:	4013      	ands	r3, r2
 800c08c:	0019      	movs	r1, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c092:	4b1a      	ldr	r3, [pc, #104]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c094:	430a      	orrs	r2, r1
 800c096:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c09c:	2380      	movs	r3, #128	@ 0x80
 800c09e:	019b      	lsls	r3, r3, #6
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d106      	bne.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c0a4:	4b15      	ldr	r3, [pc, #84]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c0a6:	68da      	ldr	r2, [r3, #12]
 800c0a8:	4b14      	ldr	r3, [pc, #80]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c0aa:	2180      	movs	r1, #128	@ 0x80
 800c0ac:	0449      	lsls	r1, r1, #17
 800c0ae:	430a      	orrs	r2, r1
 800c0b0:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	2380      	movs	r3, #128	@ 0x80
 800c0b8:	049b      	lsls	r3, r3, #18
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	d016      	beq.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c0be:	4b0f      	ldr	r3, [pc, #60]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c0c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0c2:	4a11      	ldr	r2, [pc, #68]	@ (800c108 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c0c4:	4013      	ands	r3, r2
 800c0c6:	0019      	movs	r1, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c0cc:	4b0b      	ldr	r3, [pc, #44]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c0ce:	430a      	orrs	r2, r1
 800c0d0:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c0d6:	2380      	movs	r3, #128	@ 0x80
 800c0d8:	005b      	lsls	r3, r3, #1
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d106      	bne.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c0de:	4b07      	ldr	r3, [pc, #28]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c0e0:	68da      	ldr	r2, [r3, #12]
 800c0e2:	4b06      	ldr	r3, [pc, #24]	@ (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c0e4:	2180      	movs	r1, #128	@ 0x80
 800c0e6:	0449      	lsls	r1, r1, #17
 800c0e8:	430a      	orrs	r2, r1
 800c0ea:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800c0ec:	2312      	movs	r3, #18
 800c0ee:	18fb      	adds	r3, r7, r3
 800c0f0:	781b      	ldrb	r3, [r3, #0]
}
 800c0f2:	0018      	movs	r0, r3
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	b006      	add	sp, #24
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	46c0      	nop			@ (mov r8, r8)
 800c0fc:	40021000 	.word	0x40021000
 800c100:	efffffff 	.word	0xefffffff
 800c104:	fffff3ff 	.word	0xfffff3ff
 800c108:	fffffcff 	.word	0xfffffcff
 800c10c:	fff3ffff 	.word	0xfff3ffff
 800c110:	ffcfffff 	.word	0xffcfffff
 800c114:	ffffcfff 	.word	0xffffcfff
 800c118:	ffff3fff 	.word	0xffff3fff
 800c11c:	f3ffffff 	.word	0xf3ffffff
 800c120:	ffbfffff 	.word	0xffbfffff
 800c124:	feffffff 	.word	0xfeffffff

0800c128 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800c130:	4b1c      	ldr	r3, [pc, #112]	@ (800c1a4 <HAL_RCCEx_CRSConfig+0x7c>)
 800c132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c134:	4b1b      	ldr	r3, [pc, #108]	@ (800c1a4 <HAL_RCCEx_CRSConfig+0x7c>)
 800c136:	2180      	movs	r1, #128	@ 0x80
 800c138:	0249      	lsls	r1, r1, #9
 800c13a:	430a      	orrs	r2, r1
 800c13c:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_CRS_RELEASE_RESET();
 800c13e:	4b19      	ldr	r3, [pc, #100]	@ (800c1a4 <HAL_RCCEx_CRSConfig+0x7c>)
 800c140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c142:	4b18      	ldr	r3, [pc, #96]	@ (800c1a4 <HAL_RCCEx_CRSConfig+0x7c>)
 800c144:	4918      	ldr	r1, [pc, #96]	@ (800c1a8 <HAL_RCCEx_CRSConfig+0x80>)
 800c146:	400a      	ands	r2, r1
 800c148:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	431a      	orrs	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	4313      	orrs	r3, r2
 800c15a:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	4313      	orrs	r3, r2
 800c164:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	041b      	lsls	r3, r3, #16
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	4313      	orrs	r3, r2
 800c170:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800c172:	4b0e      	ldr	r3, [pc, #56]	@ (800c1ac <HAL_RCCEx_CRSConfig+0x84>)
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800c178:	4b0c      	ldr	r3, [pc, #48]	@ (800c1ac <HAL_RCCEx_CRSConfig+0x84>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a0c      	ldr	r2, [pc, #48]	@ (800c1b0 <HAL_RCCEx_CRSConfig+0x88>)
 800c17e:	4013      	ands	r3, r2
 800c180:	0019      	movs	r1, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	695b      	ldr	r3, [r3, #20]
 800c186:	021a      	lsls	r2, r3, #8
 800c188:	4b08      	ldr	r3, [pc, #32]	@ (800c1ac <HAL_RCCEx_CRSConfig+0x84>)
 800c18a:	430a      	orrs	r2, r1
 800c18c:	601a      	str	r2, [r3, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800c18e:	4b07      	ldr	r3, [pc, #28]	@ (800c1ac <HAL_RCCEx_CRSConfig+0x84>)
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	4b06      	ldr	r3, [pc, #24]	@ (800c1ac <HAL_RCCEx_CRSConfig+0x84>)
 800c194:	2160      	movs	r1, #96	@ 0x60
 800c196:	430a      	orrs	r2, r1
 800c198:	601a      	str	r2, [r3, #0]
}
 800c19a:	46c0      	nop			@ (mov r8, r8)
 800c19c:	46bd      	mov	sp, r7
 800c19e:	b004      	add	sp, #16
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	46c0      	nop			@ (mov r8, r8)
 800c1a4:	40021000 	.word	0x40021000
 800c1a8:	fffeffff 	.word	0xfffeffff
 800c1ac:	40006c00 	.word	0x40006c00
 800c1b0:	ffff80ff 	.word	0xffff80ff

0800c1b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e04a      	b.n	800c25c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	223d      	movs	r2, #61	@ 0x3d
 800c1ca:	5c9b      	ldrb	r3, [r3, r2]
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d107      	bne.n	800c1e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	223c      	movs	r2, #60	@ 0x3c
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	0018      	movs	r0, r3
 800c1de:	f000 f841 	bl	800c264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	223d      	movs	r2, #61	@ 0x3d
 800c1e6:	2102      	movs	r1, #2
 800c1e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	0019      	movs	r1, r3
 800c1f4:	0010      	movs	r0, r2
 800c1f6:	f000 fbc7 	bl	800c988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2248      	movs	r2, #72	@ 0x48
 800c1fe:	2101      	movs	r1, #1
 800c200:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	223e      	movs	r2, #62	@ 0x3e
 800c206:	2101      	movs	r1, #1
 800c208:	5499      	strb	r1, [r3, r2]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	223f      	movs	r2, #63	@ 0x3f
 800c20e:	2101      	movs	r1, #1
 800c210:	5499      	strb	r1, [r3, r2]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2240      	movs	r2, #64	@ 0x40
 800c216:	2101      	movs	r1, #1
 800c218:	5499      	strb	r1, [r3, r2]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2241      	movs	r2, #65	@ 0x41
 800c21e:	2101      	movs	r1, #1
 800c220:	5499      	strb	r1, [r3, r2]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2242      	movs	r2, #66	@ 0x42
 800c226:	2101      	movs	r1, #1
 800c228:	5499      	strb	r1, [r3, r2]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2243      	movs	r2, #67	@ 0x43
 800c22e:	2101      	movs	r1, #1
 800c230:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2244      	movs	r2, #68	@ 0x44
 800c236:	2101      	movs	r1, #1
 800c238:	5499      	strb	r1, [r3, r2]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2245      	movs	r2, #69	@ 0x45
 800c23e:	2101      	movs	r1, #1
 800c240:	5499      	strb	r1, [r3, r2]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2246      	movs	r2, #70	@ 0x46
 800c246:	2101      	movs	r1, #1
 800c248:	5499      	strb	r1, [r3, r2]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2247      	movs	r2, #71	@ 0x47
 800c24e:	2101      	movs	r1, #1
 800c250:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	223d      	movs	r2, #61	@ 0x3d
 800c256:	2101      	movs	r1, #1
 800c258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c25a:	2300      	movs	r3, #0
}
 800c25c:	0018      	movs	r0, r3
 800c25e:	46bd      	mov	sp, r7
 800c260:	b002      	add	sp, #8
 800c262:	bd80      	pop	{r7, pc}

0800c264 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c26c:	46c0      	nop			@ (mov r8, r8)
 800c26e:	46bd      	mov	sp, r7
 800c270:	b002      	add	sp, #8
 800c272:	bd80      	pop	{r7, pc}

0800c274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	223d      	movs	r2, #61	@ 0x3d
 800c280:	5c9b      	ldrb	r3, [r3, r2]
 800c282:	b2db      	uxtb	r3, r3
 800c284:	2b01      	cmp	r3, #1
 800c286:	d001      	beq.n	800c28c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c288:	2301      	movs	r3, #1
 800c28a:	e047      	b.n	800c31c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	223d      	movs	r2, #61	@ 0x3d
 800c290:	2102      	movs	r1, #2
 800c292:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68da      	ldr	r2, [r3, #12]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2101      	movs	r1, #1
 800c2a0:	430a      	orrs	r2, r1
 800c2a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a1e      	ldr	r2, [pc, #120]	@ (800c324 <HAL_TIM_Base_Start_IT+0xb0>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d014      	beq.n	800c2d8 <HAL_TIM_Base_Start_IT+0x64>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	2380      	movs	r3, #128	@ 0x80
 800c2b4:	05db      	lsls	r3, r3, #23
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d00e      	beq.n	800c2d8 <HAL_TIM_Base_Start_IT+0x64>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a1a      	ldr	r2, [pc, #104]	@ (800c328 <HAL_TIM_Base_Start_IT+0xb4>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d009      	beq.n	800c2d8 <HAL_TIM_Base_Start_IT+0x64>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a18      	ldr	r2, [pc, #96]	@ (800c32c <HAL_TIM_Base_Start_IT+0xb8>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d004      	beq.n	800c2d8 <HAL_TIM_Base_Start_IT+0x64>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a17      	ldr	r2, [pc, #92]	@ (800c330 <HAL_TIM_Base_Start_IT+0xbc>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d116      	bne.n	800c306 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	4a15      	ldr	r2, [pc, #84]	@ (800c334 <HAL_TIM_Base_Start_IT+0xc0>)
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2b06      	cmp	r3, #6
 800c2e8:	d016      	beq.n	800c318 <HAL_TIM_Base_Start_IT+0xa4>
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	2380      	movs	r3, #128	@ 0x80
 800c2ee:	025b      	lsls	r3, r3, #9
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d011      	beq.n	800c318 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2101      	movs	r1, #1
 800c300:	430a      	orrs	r2, r1
 800c302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c304:	e008      	b.n	800c318 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2101      	movs	r1, #1
 800c312:	430a      	orrs	r2, r1
 800c314:	601a      	str	r2, [r3, #0]
 800c316:	e000      	b.n	800c31a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c318:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	0018      	movs	r0, r3
 800c31e:	46bd      	mov	sp, r7
 800c320:	b004      	add	sp, #16
 800c322:	bd80      	pop	{r7, pc}
 800c324:	40012c00 	.word	0x40012c00
 800c328:	40000400 	.word	0x40000400
 800c32c:	40000800 	.word	0x40000800
 800c330:	40014000 	.word	0x40014000
 800c334:	00010007 	.word	0x00010007

0800c338 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d101      	bne.n	800c34a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c346:	2301      	movs	r3, #1
 800c348:	e04a      	b.n	800c3e0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	223d      	movs	r2, #61	@ 0x3d
 800c34e:	5c9b      	ldrb	r3, [r3, r2]
 800c350:	b2db      	uxtb	r3, r3
 800c352:	2b00      	cmp	r3, #0
 800c354:	d107      	bne.n	800c366 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	223c      	movs	r2, #60	@ 0x3c
 800c35a:	2100      	movs	r1, #0
 800c35c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	0018      	movs	r0, r3
 800c362:	f7fb fc59 	bl	8007c18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	223d      	movs	r2, #61	@ 0x3d
 800c36a:	2102      	movs	r1, #2
 800c36c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	3304      	adds	r3, #4
 800c376:	0019      	movs	r1, r3
 800c378:	0010      	movs	r0, r2
 800c37a:	f000 fb05 	bl	800c988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2248      	movs	r2, #72	@ 0x48
 800c382:	2101      	movs	r1, #1
 800c384:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	223e      	movs	r2, #62	@ 0x3e
 800c38a:	2101      	movs	r1, #1
 800c38c:	5499      	strb	r1, [r3, r2]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	223f      	movs	r2, #63	@ 0x3f
 800c392:	2101      	movs	r1, #1
 800c394:	5499      	strb	r1, [r3, r2]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2240      	movs	r2, #64	@ 0x40
 800c39a:	2101      	movs	r1, #1
 800c39c:	5499      	strb	r1, [r3, r2]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2241      	movs	r2, #65	@ 0x41
 800c3a2:	2101      	movs	r1, #1
 800c3a4:	5499      	strb	r1, [r3, r2]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2242      	movs	r2, #66	@ 0x42
 800c3aa:	2101      	movs	r1, #1
 800c3ac:	5499      	strb	r1, [r3, r2]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2243      	movs	r2, #67	@ 0x43
 800c3b2:	2101      	movs	r1, #1
 800c3b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2244      	movs	r2, #68	@ 0x44
 800c3ba:	2101      	movs	r1, #1
 800c3bc:	5499      	strb	r1, [r3, r2]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2245      	movs	r2, #69	@ 0x45
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	5499      	strb	r1, [r3, r2]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2246      	movs	r2, #70	@ 0x46
 800c3ca:	2101      	movs	r1, #1
 800c3cc:	5499      	strb	r1, [r3, r2]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2247      	movs	r2, #71	@ 0x47
 800c3d2:	2101      	movs	r1, #1
 800c3d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	223d      	movs	r2, #61	@ 0x3d
 800c3da:	2101      	movs	r1, #1
 800c3dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	0018      	movs	r0, r3
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	b002      	add	sp, #8
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e090      	b.n	800c51e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	223d      	movs	r2, #61	@ 0x3d
 800c400:	5c9b      	ldrb	r3, [r3, r2]
 800c402:	b2db      	uxtb	r3, r3
 800c404:	2b00      	cmp	r3, #0
 800c406:	d107      	bne.n	800c418 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	223c      	movs	r2, #60	@ 0x3c
 800c40c:	2100      	movs	r1, #0
 800c40e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	0018      	movs	r0, r3
 800c414:	f7fb fc36 	bl	8007c84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	223d      	movs	r2, #61	@ 0x3d
 800c41c:	2102      	movs	r1, #2
 800c41e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	689a      	ldr	r2, [r3, #8]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	493f      	ldr	r1, [pc, #252]	@ (800c528 <HAL_TIM_Encoder_Init+0x140>)
 800c42c:	400a      	ands	r2, r1
 800c42e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	3304      	adds	r3, #4
 800c438:	0019      	movs	r1, r3
 800c43a:	0010      	movs	r0, r2
 800c43c:	f000 faa4 	bl	800c988 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	699b      	ldr	r3, [r3, #24]
 800c44e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6a1b      	ldr	r3, [r3, #32]
 800c456:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	697a      	ldr	r2, [r7, #20]
 800c45e:	4313      	orrs	r3, r2
 800c460:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	4a31      	ldr	r2, [pc, #196]	@ (800c52c <HAL_TIM_Encoder_Init+0x144>)
 800c466:	4013      	ands	r3, r2
 800c468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	689a      	ldr	r2, [r3, #8]
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	699b      	ldr	r3, [r3, #24]
 800c472:	021b      	lsls	r3, r3, #8
 800c474:	4313      	orrs	r3, r2
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	4313      	orrs	r3, r2
 800c47a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	4a2c      	ldr	r2, [pc, #176]	@ (800c530 <HAL_TIM_Encoder_Init+0x148>)
 800c480:	4013      	ands	r3, r2
 800c482:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	4a2b      	ldr	r2, [pc, #172]	@ (800c534 <HAL_TIM_Encoder_Init+0x14c>)
 800c488:	4013      	ands	r3, r2
 800c48a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	68da      	ldr	r2, [r3, #12]
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	69db      	ldr	r3, [r3, #28]
 800c494:	021b      	lsls	r3, r3, #8
 800c496:	4313      	orrs	r3, r2
 800c498:	693a      	ldr	r2, [r7, #16]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	691b      	ldr	r3, [r3, #16]
 800c4a2:	011a      	lsls	r2, r3, #4
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	6a1b      	ldr	r3, [r3, #32]
 800c4a8:	031b      	lsls	r3, r3, #12
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	693a      	ldr	r2, [r7, #16]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2222      	movs	r2, #34	@ 0x22
 800c4b6:	4393      	bics	r3, r2
 800c4b8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2288      	movs	r2, #136	@ 0x88
 800c4be:	4393      	bics	r3, r2
 800c4c0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	685a      	ldr	r2, [r3, #4]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	011b      	lsls	r3, r3, #4
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	697a      	ldr	r2, [r7, #20]
 800c4da:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2248      	movs	r2, #72	@ 0x48
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	223e      	movs	r2, #62	@ 0x3e
 800c4f8:	2101      	movs	r1, #1
 800c4fa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	223f      	movs	r2, #63	@ 0x3f
 800c500:	2101      	movs	r1, #1
 800c502:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2244      	movs	r2, #68	@ 0x44
 800c508:	2101      	movs	r1, #1
 800c50a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2245      	movs	r2, #69	@ 0x45
 800c510:	2101      	movs	r1, #1
 800c512:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	223d      	movs	r2, #61	@ 0x3d
 800c518:	2101      	movs	r1, #1
 800c51a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	0018      	movs	r0, r3
 800c520:	46bd      	mov	sp, r7
 800c522:	b006      	add	sp, #24
 800c524:	bd80      	pop	{r7, pc}
 800c526:	46c0      	nop			@ (mov r8, r8)
 800c528:	fffebff8 	.word	0xfffebff8
 800c52c:	fffffcfc 	.word	0xfffffcfc
 800c530:	fffff3f3 	.word	0xfffff3f3
 800c534:	ffff0f0f 	.word	0xffff0f0f

0800c538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	68db      	ldr	r3, [r3, #12]
 800c546:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	691b      	ldr	r3, [r3, #16]
 800c54e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	2202      	movs	r2, #2
 800c554:	4013      	ands	r3, r2
 800c556:	d021      	beq.n	800c59c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2202      	movs	r2, #2
 800c55c:	4013      	ands	r3, r2
 800c55e:	d01d      	beq.n	800c59c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2203      	movs	r2, #3
 800c566:	4252      	negs	r2, r2
 800c568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2201      	movs	r2, #1
 800c56e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	699b      	ldr	r3, [r3, #24]
 800c576:	2203      	movs	r2, #3
 800c578:	4013      	ands	r3, r2
 800c57a:	d004      	beq.n	800c586 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	0018      	movs	r0, r3
 800c580:	f000 f9ea 	bl	800c958 <HAL_TIM_IC_CaptureCallback>
 800c584:	e007      	b.n	800c596 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	0018      	movs	r0, r3
 800c58a:	f000 f9dd 	bl	800c948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	0018      	movs	r0, r3
 800c592:	f000 f9e9 	bl	800c968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	2204      	movs	r2, #4
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	d022      	beq.n	800c5ea <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2204      	movs	r2, #4
 800c5a8:	4013      	ands	r3, r2
 800c5aa:	d01e      	beq.n	800c5ea <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2205      	movs	r2, #5
 800c5b2:	4252      	negs	r2, r2
 800c5b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2202      	movs	r2, #2
 800c5ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	699a      	ldr	r2, [r3, #24]
 800c5c2:	23c0      	movs	r3, #192	@ 0xc0
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	4013      	ands	r3, r2
 800c5c8:	d004      	beq.n	800c5d4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	0018      	movs	r0, r3
 800c5ce:	f000 f9c3 	bl	800c958 <HAL_TIM_IC_CaptureCallback>
 800c5d2:	e007      	b.n	800c5e4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	0018      	movs	r0, r3
 800c5d8:	f000 f9b6 	bl	800c948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	0018      	movs	r0, r3
 800c5e0:	f000 f9c2 	bl	800c968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	2208      	movs	r2, #8
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	d021      	beq.n	800c636 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2208      	movs	r2, #8
 800c5f6:	4013      	ands	r3, r2
 800c5f8:	d01d      	beq.n	800c636 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2209      	movs	r2, #9
 800c600:	4252      	negs	r2, r2
 800c602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2204      	movs	r2, #4
 800c608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	69db      	ldr	r3, [r3, #28]
 800c610:	2203      	movs	r2, #3
 800c612:	4013      	ands	r3, r2
 800c614:	d004      	beq.n	800c620 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	0018      	movs	r0, r3
 800c61a:	f000 f99d 	bl	800c958 <HAL_TIM_IC_CaptureCallback>
 800c61e:	e007      	b.n	800c630 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	0018      	movs	r0, r3
 800c624:	f000 f990 	bl	800c948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	0018      	movs	r0, r3
 800c62c:	f000 f99c 	bl	800c968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	2210      	movs	r2, #16
 800c63a:	4013      	ands	r3, r2
 800c63c:	d022      	beq.n	800c684 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2210      	movs	r2, #16
 800c642:	4013      	ands	r3, r2
 800c644:	d01e      	beq.n	800c684 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2211      	movs	r2, #17
 800c64c:	4252      	negs	r2, r2
 800c64e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2208      	movs	r2, #8
 800c654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	69da      	ldr	r2, [r3, #28]
 800c65c:	23c0      	movs	r3, #192	@ 0xc0
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	4013      	ands	r3, r2
 800c662:	d004      	beq.n	800c66e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	0018      	movs	r0, r3
 800c668:	f000 f976 	bl	800c958 <HAL_TIM_IC_CaptureCallback>
 800c66c:	e007      	b.n	800c67e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	0018      	movs	r0, r3
 800c672:	f000 f969 	bl	800c948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	0018      	movs	r0, r3
 800c67a:	f000 f975 	bl	800c968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	2201      	movs	r2, #1
 800c688:	4013      	ands	r3, r2
 800c68a:	d00c      	beq.n	800c6a6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2201      	movs	r2, #1
 800c690:	4013      	ands	r3, r2
 800c692:	d008      	beq.n	800c6a6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2202      	movs	r2, #2
 800c69a:	4252      	negs	r2, r2
 800c69c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	0018      	movs	r0, r3
 800c6a2:	f7fb f86f 	bl	8007784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	2280      	movs	r2, #128	@ 0x80
 800c6aa:	4013      	ands	r3, r2
 800c6ac:	d104      	bne.n	800c6b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	2380      	movs	r3, #128	@ 0x80
 800c6b2:	019b      	lsls	r3, r3, #6
 800c6b4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c6b6:	d00b      	beq.n	800c6d0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2280      	movs	r2, #128	@ 0x80
 800c6bc:	4013      	ands	r3, r2
 800c6be:	d007      	beq.n	800c6d0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a1e      	ldr	r2, [pc, #120]	@ (800c740 <HAL_TIM_IRQHandler+0x208>)
 800c6c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	0018      	movs	r0, r3
 800c6cc:	f000 fdd2 	bl	800d274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c6d0:	68ba      	ldr	r2, [r7, #8]
 800c6d2:	2380      	movs	r3, #128	@ 0x80
 800c6d4:	005b      	lsls	r3, r3, #1
 800c6d6:	4013      	ands	r3, r2
 800c6d8:	d00b      	beq.n	800c6f2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2280      	movs	r2, #128	@ 0x80
 800c6de:	4013      	ands	r3, r2
 800c6e0:	d007      	beq.n	800c6f2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a17      	ldr	r2, [pc, #92]	@ (800c744 <HAL_TIM_IRQHandler+0x20c>)
 800c6e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	0018      	movs	r0, r3
 800c6ee:	f000 fdc9 	bl	800d284 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	2240      	movs	r2, #64	@ 0x40
 800c6f6:	4013      	ands	r3, r2
 800c6f8:	d00c      	beq.n	800c714 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2240      	movs	r2, #64	@ 0x40
 800c6fe:	4013      	ands	r3, r2
 800c700:	d008      	beq.n	800c714 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2241      	movs	r2, #65	@ 0x41
 800c708:	4252      	negs	r2, r2
 800c70a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	0018      	movs	r0, r3
 800c710:	f000 f932 	bl	800c978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	2220      	movs	r2, #32
 800c718:	4013      	ands	r3, r2
 800c71a:	d00c      	beq.n	800c736 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2220      	movs	r2, #32
 800c720:	4013      	ands	r3, r2
 800c722:	d008      	beq.n	800c736 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2221      	movs	r2, #33	@ 0x21
 800c72a:	4252      	negs	r2, r2
 800c72c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	0018      	movs	r0, r3
 800c732:	f000 fd97 	bl	800d264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c736:	46c0      	nop			@ (mov r8, r8)
 800c738:	46bd      	mov	sp, r7
 800c73a:	b004      	add	sp, #16
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	46c0      	nop			@ (mov r8, r8)
 800c740:	ffffdf7f 	.word	0xffffdf7f
 800c744:	fffffeff 	.word	0xfffffeff

0800c748 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b086      	sub	sp, #24
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c754:	2317      	movs	r3, #23
 800c756:	18fb      	adds	r3, r7, r3
 800c758:	2200      	movs	r2, #0
 800c75a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	223c      	movs	r2, #60	@ 0x3c
 800c760:	5c9b      	ldrb	r3, [r3, r2]
 800c762:	2b01      	cmp	r3, #1
 800c764:	d101      	bne.n	800c76a <HAL_TIM_PWM_ConfigChannel+0x22>
 800c766:	2302      	movs	r3, #2
 800c768:	e0e5      	b.n	800c936 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	223c      	movs	r2, #60	@ 0x3c
 800c76e:	2101      	movs	r1, #1
 800c770:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b14      	cmp	r3, #20
 800c776:	d900      	bls.n	800c77a <HAL_TIM_PWM_ConfigChannel+0x32>
 800c778:	e0d1      	b.n	800c91e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	009a      	lsls	r2, r3, #2
 800c77e:	4b70      	ldr	r3, [pc, #448]	@ (800c940 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800c780:	18d3      	adds	r3, r2, r3
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	68ba      	ldr	r2, [r7, #8]
 800c78c:	0011      	movs	r1, r2
 800c78e:	0018      	movs	r0, r3
 800c790:	f000 f992 	bl	800cab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	699a      	ldr	r2, [r3, #24]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2108      	movs	r1, #8
 800c7a0:	430a      	orrs	r2, r1
 800c7a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	699a      	ldr	r2, [r3, #24]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2104      	movs	r1, #4
 800c7b0:	438a      	bics	r2, r1
 800c7b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	6999      	ldr	r1, [r3, #24]
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	691a      	ldr	r2, [r3, #16]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	430a      	orrs	r2, r1
 800c7c4:	619a      	str	r2, [r3, #24]
      break;
 800c7c6:	e0af      	b.n	800c928 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	68ba      	ldr	r2, [r7, #8]
 800c7ce:	0011      	movs	r1, r2
 800c7d0:	0018      	movs	r0, r3
 800c7d2:	f000 f9fb 	bl	800cbcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	699a      	ldr	r2, [r3, #24]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2180      	movs	r1, #128	@ 0x80
 800c7e2:	0109      	lsls	r1, r1, #4
 800c7e4:	430a      	orrs	r2, r1
 800c7e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	699a      	ldr	r2, [r3, #24]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4954      	ldr	r1, [pc, #336]	@ (800c944 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c7f4:	400a      	ands	r2, r1
 800c7f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	6999      	ldr	r1, [r3, #24]
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	691b      	ldr	r3, [r3, #16]
 800c802:	021a      	lsls	r2, r3, #8
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	430a      	orrs	r2, r1
 800c80a:	619a      	str	r2, [r3, #24]
      break;
 800c80c:	e08c      	b.n	800c928 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	68ba      	ldr	r2, [r7, #8]
 800c814:	0011      	movs	r1, r2
 800c816:	0018      	movs	r0, r3
 800c818:	f000 fa5c 	bl	800ccd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	69da      	ldr	r2, [r3, #28]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2108      	movs	r1, #8
 800c828:	430a      	orrs	r2, r1
 800c82a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	69da      	ldr	r2, [r3, #28]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2104      	movs	r1, #4
 800c838:	438a      	bics	r2, r1
 800c83a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	69d9      	ldr	r1, [r3, #28]
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	691a      	ldr	r2, [r3, #16]
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	430a      	orrs	r2, r1
 800c84c:	61da      	str	r2, [r3, #28]
      break;
 800c84e:	e06b      	b.n	800c928 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	0011      	movs	r1, r2
 800c858:	0018      	movs	r0, r3
 800c85a:	f000 fac3 	bl	800cde4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	69da      	ldr	r2, [r3, #28]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2180      	movs	r1, #128	@ 0x80
 800c86a:	0109      	lsls	r1, r1, #4
 800c86c:	430a      	orrs	r2, r1
 800c86e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	69da      	ldr	r2, [r3, #28]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4932      	ldr	r1, [pc, #200]	@ (800c944 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c87c:	400a      	ands	r2, r1
 800c87e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	69d9      	ldr	r1, [r3, #28]
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	021a      	lsls	r2, r3, #8
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	430a      	orrs	r2, r1
 800c892:	61da      	str	r2, [r3, #28]
      break;
 800c894:	e048      	b.n	800c928 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	0011      	movs	r1, r2
 800c89e:	0018      	movs	r0, r3
 800c8a0:	f000 fb0a 	bl	800ceb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2108      	movs	r1, #8
 800c8b0:	430a      	orrs	r2, r1
 800c8b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2104      	movs	r1, #4
 800c8c0:	438a      	bics	r2, r1
 800c8c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	691a      	ldr	r2, [r3, #16]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	430a      	orrs	r2, r1
 800c8d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c8d6:	e027      	b.n	800c928 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	0011      	movs	r1, r2
 800c8e0:	0018      	movs	r0, r3
 800c8e2:	f000 fb49 	bl	800cf78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2180      	movs	r1, #128	@ 0x80
 800c8f2:	0109      	lsls	r1, r1, #4
 800c8f4:	430a      	orrs	r2, r1
 800c8f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4910      	ldr	r1, [pc, #64]	@ (800c944 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c904:	400a      	ands	r2, r1
 800c906:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	691b      	ldr	r3, [r3, #16]
 800c912:	021a      	lsls	r2, r3, #8
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	430a      	orrs	r2, r1
 800c91a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c91c:	e004      	b.n	800c928 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800c91e:	2317      	movs	r3, #23
 800c920:	18fb      	adds	r3, r7, r3
 800c922:	2201      	movs	r2, #1
 800c924:	701a      	strb	r2, [r3, #0]
      break;
 800c926:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	223c      	movs	r2, #60	@ 0x3c
 800c92c:	2100      	movs	r1, #0
 800c92e:	5499      	strb	r1, [r3, r2]

  return status;
 800c930:	2317      	movs	r3, #23
 800c932:	18fb      	adds	r3, r7, r3
 800c934:	781b      	ldrb	r3, [r3, #0]
}
 800c936:	0018      	movs	r0, r3
 800c938:	46bd      	mov	sp, r7
 800c93a:	b006      	add	sp, #24
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	46c0      	nop			@ (mov r8, r8)
 800c940:	0801f12c 	.word	0x0801f12c
 800c944:	fffffbff 	.word	0xfffffbff

0800c948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c950:	46c0      	nop			@ (mov r8, r8)
 800c952:	46bd      	mov	sp, r7
 800c954:	b002      	add	sp, #8
 800c956:	bd80      	pop	{r7, pc}

0800c958 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c960:	46c0      	nop			@ (mov r8, r8)
 800c962:	46bd      	mov	sp, r7
 800c964:	b002      	add	sp, #8
 800c966:	bd80      	pop	{r7, pc}

0800c968 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c970:	46c0      	nop			@ (mov r8, r8)
 800c972:	46bd      	mov	sp, r7
 800c974:	b002      	add	sp, #8
 800c976:	bd80      	pop	{r7, pc}

0800c978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c980:	46c0      	nop			@ (mov r8, r8)
 800c982:	46bd      	mov	sp, r7
 800c984:	b002      	add	sp, #8
 800c986:	bd80      	pop	{r7, pc}

0800c988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4a3f      	ldr	r2, [pc, #252]	@ (800ca98 <TIM_Base_SetConfig+0x110>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d00c      	beq.n	800c9ba <TIM_Base_SetConfig+0x32>
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	2380      	movs	r3, #128	@ 0x80
 800c9a4:	05db      	lsls	r3, r3, #23
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d007      	beq.n	800c9ba <TIM_Base_SetConfig+0x32>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4a3b      	ldr	r2, [pc, #236]	@ (800ca9c <TIM_Base_SetConfig+0x114>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d003      	beq.n	800c9ba <TIM_Base_SetConfig+0x32>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4a3a      	ldr	r2, [pc, #232]	@ (800caa0 <TIM_Base_SetConfig+0x118>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d108      	bne.n	800c9cc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2270      	movs	r2, #112	@ 0x70
 800c9be:	4393      	bics	r3, r2
 800c9c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a32      	ldr	r2, [pc, #200]	@ (800ca98 <TIM_Base_SetConfig+0x110>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d01c      	beq.n	800ca0e <TIM_Base_SetConfig+0x86>
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	2380      	movs	r3, #128	@ 0x80
 800c9d8:	05db      	lsls	r3, r3, #23
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d017      	beq.n	800ca0e <TIM_Base_SetConfig+0x86>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4a2e      	ldr	r2, [pc, #184]	@ (800ca9c <TIM_Base_SetConfig+0x114>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d013      	beq.n	800ca0e <TIM_Base_SetConfig+0x86>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4a2d      	ldr	r2, [pc, #180]	@ (800caa0 <TIM_Base_SetConfig+0x118>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d00f      	beq.n	800ca0e <TIM_Base_SetConfig+0x86>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	4a2c      	ldr	r2, [pc, #176]	@ (800caa4 <TIM_Base_SetConfig+0x11c>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d00b      	beq.n	800ca0e <TIM_Base_SetConfig+0x86>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4a2b      	ldr	r2, [pc, #172]	@ (800caa8 <TIM_Base_SetConfig+0x120>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d007      	beq.n	800ca0e <TIM_Base_SetConfig+0x86>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	4a2a      	ldr	r2, [pc, #168]	@ (800caac <TIM_Base_SetConfig+0x124>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d003      	beq.n	800ca0e <TIM_Base_SetConfig+0x86>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4a29      	ldr	r2, [pc, #164]	@ (800cab0 <TIM_Base_SetConfig+0x128>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d108      	bne.n	800ca20 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	4a28      	ldr	r2, [pc, #160]	@ (800cab4 <TIM_Base_SetConfig+0x12c>)
 800ca12:	4013      	ands	r3, r2
 800ca14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	68fa      	ldr	r2, [r7, #12]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2280      	movs	r2, #128	@ 0x80
 800ca24:	4393      	bics	r3, r2
 800ca26:	001a      	movs	r2, r3
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	695b      	ldr	r3, [r3, #20]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	689a      	ldr	r2, [r3, #8]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4a13      	ldr	r2, [pc, #76]	@ (800ca98 <TIM_Base_SetConfig+0x110>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d00b      	beq.n	800ca66 <TIM_Base_SetConfig+0xde>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	4a15      	ldr	r2, [pc, #84]	@ (800caa8 <TIM_Base_SetConfig+0x120>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d007      	beq.n	800ca66 <TIM_Base_SetConfig+0xde>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	4a14      	ldr	r2, [pc, #80]	@ (800caac <TIM_Base_SetConfig+0x124>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d003      	beq.n	800ca66 <TIM_Base_SetConfig+0xde>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	4a13      	ldr	r2, [pc, #76]	@ (800cab0 <TIM_Base_SetConfig+0x128>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d103      	bne.n	800ca6e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	691a      	ldr	r2, [r3, #16]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2201      	movs	r2, #1
 800ca72:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	691b      	ldr	r3, [r3, #16]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	4013      	ands	r3, r2
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d106      	bne.n	800ca8e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	691b      	ldr	r3, [r3, #16]
 800ca84:	2201      	movs	r2, #1
 800ca86:	4393      	bics	r3, r2
 800ca88:	001a      	movs	r2, r3
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	611a      	str	r2, [r3, #16]
  }
}
 800ca8e:	46c0      	nop			@ (mov r8, r8)
 800ca90:	46bd      	mov	sp, r7
 800ca92:	b004      	add	sp, #16
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	46c0      	nop			@ (mov r8, r8)
 800ca98:	40012c00 	.word	0x40012c00
 800ca9c:	40000400 	.word	0x40000400
 800caa0:	40000800 	.word	0x40000800
 800caa4:	40002000 	.word	0x40002000
 800caa8:	40014000 	.word	0x40014000
 800caac:	40014400 	.word	0x40014400
 800cab0:	40014800 	.word	0x40014800
 800cab4:	fffffcff 	.word	0xfffffcff

0800cab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b086      	sub	sp, #24
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6a1b      	ldr	r3, [r3, #32]
 800cac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6a1b      	ldr	r3, [r3, #32]
 800cacc:	2201      	movs	r2, #1
 800cace:	4393      	bics	r3, r2
 800cad0:	001a      	movs	r2, r3
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	699b      	ldr	r3, [r3, #24]
 800cae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	4a32      	ldr	r2, [pc, #200]	@ (800cbb0 <TIM_OC1_SetConfig+0xf8>)
 800cae6:	4013      	ands	r3, r2
 800cae8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2203      	movs	r2, #3
 800caee:	4393      	bics	r3, r2
 800caf0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	2202      	movs	r2, #2
 800cb00:	4393      	bics	r3, r2
 800cb02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4a28      	ldr	r2, [pc, #160]	@ (800cbb4 <TIM_OC1_SetConfig+0xfc>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d00b      	beq.n	800cb2e <TIM_OC1_SetConfig+0x76>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4a27      	ldr	r2, [pc, #156]	@ (800cbb8 <TIM_OC1_SetConfig+0x100>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d007      	beq.n	800cb2e <TIM_OC1_SetConfig+0x76>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4a26      	ldr	r2, [pc, #152]	@ (800cbbc <TIM_OC1_SetConfig+0x104>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d003      	beq.n	800cb2e <TIM_OC1_SetConfig+0x76>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	4a25      	ldr	r2, [pc, #148]	@ (800cbc0 <TIM_OC1_SetConfig+0x108>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d10c      	bne.n	800cb48 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	2208      	movs	r2, #8
 800cb32:	4393      	bics	r3, r2
 800cb34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	697a      	ldr	r2, [r7, #20]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	2204      	movs	r2, #4
 800cb44:	4393      	bics	r3, r2
 800cb46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a1a      	ldr	r2, [pc, #104]	@ (800cbb4 <TIM_OC1_SetConfig+0xfc>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d00b      	beq.n	800cb68 <TIM_OC1_SetConfig+0xb0>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	4a19      	ldr	r2, [pc, #100]	@ (800cbb8 <TIM_OC1_SetConfig+0x100>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d007      	beq.n	800cb68 <TIM_OC1_SetConfig+0xb0>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	4a18      	ldr	r2, [pc, #96]	@ (800cbbc <TIM_OC1_SetConfig+0x104>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d003      	beq.n	800cb68 <TIM_OC1_SetConfig+0xb0>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4a17      	ldr	r2, [pc, #92]	@ (800cbc0 <TIM_OC1_SetConfig+0x108>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d111      	bne.n	800cb8c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	4a16      	ldr	r2, [pc, #88]	@ (800cbc4 <TIM_OC1_SetConfig+0x10c>)
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	4a15      	ldr	r2, [pc, #84]	@ (800cbc8 <TIM_OC1_SetConfig+0x110>)
 800cb74:	4013      	ands	r3, r2
 800cb76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	695b      	ldr	r3, [r3, #20]
 800cb7c:	693a      	ldr	r2, [r7, #16]
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	699b      	ldr	r3, [r3, #24]
 800cb86:	693a      	ldr	r2, [r7, #16]
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	693a      	ldr	r2, [r7, #16]
 800cb90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	697a      	ldr	r2, [r7, #20]
 800cba4:	621a      	str	r2, [r3, #32]
}
 800cba6:	46c0      	nop			@ (mov r8, r8)
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	b006      	add	sp, #24
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	46c0      	nop			@ (mov r8, r8)
 800cbb0:	fffeff8f 	.word	0xfffeff8f
 800cbb4:	40012c00 	.word	0x40012c00
 800cbb8:	40014000 	.word	0x40014000
 800cbbc:	40014400 	.word	0x40014400
 800cbc0:	40014800 	.word	0x40014800
 800cbc4:	fffffeff 	.word	0xfffffeff
 800cbc8:	fffffdff 	.word	0xfffffdff

0800cbcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6a1b      	ldr	r3, [r3, #32]
 800cbda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6a1b      	ldr	r3, [r3, #32]
 800cbe0:	2210      	movs	r2, #16
 800cbe2:	4393      	bics	r3, r2
 800cbe4:	001a      	movs	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	699b      	ldr	r3, [r3, #24]
 800cbf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	4a2e      	ldr	r2, [pc, #184]	@ (800ccb4 <TIM_OC2_SetConfig+0xe8>)
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	4a2d      	ldr	r2, [pc, #180]	@ (800ccb8 <TIM_OC2_SetConfig+0xec>)
 800cc02:	4013      	ands	r3, r2
 800cc04:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	021b      	lsls	r3, r3, #8
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	2220      	movs	r2, #32
 800cc16:	4393      	bics	r3, r2
 800cc18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	011b      	lsls	r3, r3, #4
 800cc20:	697a      	ldr	r2, [r7, #20]
 800cc22:	4313      	orrs	r3, r2
 800cc24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	4a24      	ldr	r2, [pc, #144]	@ (800ccbc <TIM_OC2_SetConfig+0xf0>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d10d      	bne.n	800cc4a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	2280      	movs	r2, #128	@ 0x80
 800cc32:	4393      	bics	r3, r2
 800cc34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	68db      	ldr	r3, [r3, #12]
 800cc3a:	011b      	lsls	r3, r3, #4
 800cc3c:	697a      	ldr	r2, [r7, #20]
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	2240      	movs	r2, #64	@ 0x40
 800cc46:	4393      	bics	r3, r2
 800cc48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4a1b      	ldr	r2, [pc, #108]	@ (800ccbc <TIM_OC2_SetConfig+0xf0>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d00b      	beq.n	800cc6a <TIM_OC2_SetConfig+0x9e>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	4a1a      	ldr	r2, [pc, #104]	@ (800ccc0 <TIM_OC2_SetConfig+0xf4>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d007      	beq.n	800cc6a <TIM_OC2_SetConfig+0x9e>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a19      	ldr	r2, [pc, #100]	@ (800ccc4 <TIM_OC2_SetConfig+0xf8>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d003      	beq.n	800cc6a <TIM_OC2_SetConfig+0x9e>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4a18      	ldr	r2, [pc, #96]	@ (800ccc8 <TIM_OC2_SetConfig+0xfc>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d113      	bne.n	800cc92 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	4a17      	ldr	r2, [pc, #92]	@ (800cccc <TIM_OC2_SetConfig+0x100>)
 800cc6e:	4013      	ands	r3, r2
 800cc70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	4a16      	ldr	r2, [pc, #88]	@ (800ccd0 <TIM_OC2_SetConfig+0x104>)
 800cc76:	4013      	ands	r3, r2
 800cc78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	695b      	ldr	r3, [r3, #20]
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	693a      	ldr	r2, [r7, #16]
 800cc82:	4313      	orrs	r3, r2
 800cc84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	699b      	ldr	r3, [r3, #24]
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	693a      	ldr	r2, [r7, #16]
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	693a      	ldr	r2, [r7, #16]
 800cc96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	68fa      	ldr	r2, [r7, #12]
 800cc9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	685a      	ldr	r2, [r3, #4]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	697a      	ldr	r2, [r7, #20]
 800ccaa:	621a      	str	r2, [r3, #32]
}
 800ccac:	46c0      	nop			@ (mov r8, r8)
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	b006      	add	sp, #24
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	feff8fff 	.word	0xfeff8fff
 800ccb8:	fffffcff 	.word	0xfffffcff
 800ccbc:	40012c00 	.word	0x40012c00
 800ccc0:	40014000 	.word	0x40014000
 800ccc4:	40014400 	.word	0x40014400
 800ccc8:	40014800 	.word	0x40014800
 800cccc:	fffffbff 	.word	0xfffffbff
 800ccd0:	fffff7ff 	.word	0xfffff7ff

0800ccd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6a1b      	ldr	r3, [r3, #32]
 800cce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6a1b      	ldr	r3, [r3, #32]
 800cce8:	4a33      	ldr	r2, [pc, #204]	@ (800cdb8 <TIM_OC3_SetConfig+0xe4>)
 800ccea:	401a      	ands	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	69db      	ldr	r3, [r3, #28]
 800ccfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	4a2f      	ldr	r2, [pc, #188]	@ (800cdbc <TIM_OC3_SetConfig+0xe8>)
 800cd00:	4013      	ands	r3, r2
 800cd02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2203      	movs	r2, #3
 800cd08:	4393      	bics	r3, r2
 800cd0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	68fa      	ldr	r2, [r7, #12]
 800cd12:	4313      	orrs	r3, r2
 800cd14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	4a29      	ldr	r2, [pc, #164]	@ (800cdc0 <TIM_OC3_SetConfig+0xec>)
 800cd1a:	4013      	ands	r3, r2
 800cd1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	021b      	lsls	r3, r3, #8
 800cd24:	697a      	ldr	r2, [r7, #20]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	4a25      	ldr	r2, [pc, #148]	@ (800cdc4 <TIM_OC3_SetConfig+0xf0>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d10d      	bne.n	800cd4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	4a24      	ldr	r2, [pc, #144]	@ (800cdc8 <TIM_OC3_SetConfig+0xf4>)
 800cd36:	4013      	ands	r3, r2
 800cd38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	021b      	lsls	r3, r3, #8
 800cd40:	697a      	ldr	r2, [r7, #20]
 800cd42:	4313      	orrs	r3, r2
 800cd44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	4a20      	ldr	r2, [pc, #128]	@ (800cdcc <TIM_OC3_SetConfig+0xf8>)
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a1c      	ldr	r2, [pc, #112]	@ (800cdc4 <TIM_OC3_SetConfig+0xf0>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d00b      	beq.n	800cd6e <TIM_OC3_SetConfig+0x9a>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4a1d      	ldr	r2, [pc, #116]	@ (800cdd0 <TIM_OC3_SetConfig+0xfc>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d007      	beq.n	800cd6e <TIM_OC3_SetConfig+0x9a>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4a1c      	ldr	r2, [pc, #112]	@ (800cdd4 <TIM_OC3_SetConfig+0x100>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d003      	beq.n	800cd6e <TIM_OC3_SetConfig+0x9a>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4a1b      	ldr	r2, [pc, #108]	@ (800cdd8 <TIM_OC3_SetConfig+0x104>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d113      	bne.n	800cd96 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	4a1a      	ldr	r2, [pc, #104]	@ (800cddc <TIM_OC3_SetConfig+0x108>)
 800cd72:	4013      	ands	r3, r2
 800cd74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	4a19      	ldr	r2, [pc, #100]	@ (800cde0 <TIM_OC3_SetConfig+0x10c>)
 800cd7a:	4013      	ands	r3, r2
 800cd7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	695b      	ldr	r3, [r3, #20]
 800cd82:	011b      	lsls	r3, r3, #4
 800cd84:	693a      	ldr	r2, [r7, #16]
 800cd86:	4313      	orrs	r3, r2
 800cd88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	699b      	ldr	r3, [r3, #24]
 800cd8e:	011b      	lsls	r3, r3, #4
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	4313      	orrs	r3, r2
 800cd94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	693a      	ldr	r2, [r7, #16]
 800cd9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	68fa      	ldr	r2, [r7, #12]
 800cda0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	685a      	ldr	r2, [r3, #4]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	697a      	ldr	r2, [r7, #20]
 800cdae:	621a      	str	r2, [r3, #32]
}
 800cdb0:	46c0      	nop			@ (mov r8, r8)
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	b006      	add	sp, #24
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	fffffeff 	.word	0xfffffeff
 800cdbc:	fffeff8f 	.word	0xfffeff8f
 800cdc0:	fffffdff 	.word	0xfffffdff
 800cdc4:	40012c00 	.word	0x40012c00
 800cdc8:	fffff7ff 	.word	0xfffff7ff
 800cdcc:	fffffbff 	.word	0xfffffbff
 800cdd0:	40014000 	.word	0x40014000
 800cdd4:	40014400 	.word	0x40014400
 800cdd8:	40014800 	.word	0x40014800
 800cddc:	ffffefff 	.word	0xffffefff
 800cde0:	ffffdfff 	.word	0xffffdfff

0800cde4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b086      	sub	sp, #24
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a1b      	ldr	r3, [r3, #32]
 800cdf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6a1b      	ldr	r3, [r3, #32]
 800cdf8:	4a26      	ldr	r2, [pc, #152]	@ (800ce94 <TIM_OC4_SetConfig+0xb0>)
 800cdfa:	401a      	ands	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	69db      	ldr	r3, [r3, #28]
 800ce0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	4a22      	ldr	r2, [pc, #136]	@ (800ce98 <TIM_OC4_SetConfig+0xb4>)
 800ce10:	4013      	ands	r3, r2
 800ce12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	4a21      	ldr	r2, [pc, #132]	@ (800ce9c <TIM_OC4_SetConfig+0xb8>)
 800ce18:	4013      	ands	r3, r2
 800ce1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	021b      	lsls	r3, r3, #8
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	4313      	orrs	r3, r2
 800ce26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	4a1d      	ldr	r2, [pc, #116]	@ (800cea0 <TIM_OC4_SetConfig+0xbc>)
 800ce2c:	4013      	ands	r3, r2
 800ce2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	031b      	lsls	r3, r3, #12
 800ce36:	693a      	ldr	r2, [r7, #16]
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4a19      	ldr	r2, [pc, #100]	@ (800cea4 <TIM_OC4_SetConfig+0xc0>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d00b      	beq.n	800ce5c <TIM_OC4_SetConfig+0x78>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4a18      	ldr	r2, [pc, #96]	@ (800cea8 <TIM_OC4_SetConfig+0xc4>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d007      	beq.n	800ce5c <TIM_OC4_SetConfig+0x78>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4a17      	ldr	r2, [pc, #92]	@ (800ceac <TIM_OC4_SetConfig+0xc8>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d003      	beq.n	800ce5c <TIM_OC4_SetConfig+0x78>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	4a16      	ldr	r2, [pc, #88]	@ (800ceb0 <TIM_OC4_SetConfig+0xcc>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d109      	bne.n	800ce70 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	4a15      	ldr	r2, [pc, #84]	@ (800ceb4 <TIM_OC4_SetConfig+0xd0>)
 800ce60:	4013      	ands	r3, r2
 800ce62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	695b      	ldr	r3, [r3, #20]
 800ce68:	019b      	lsls	r3, r3, #6
 800ce6a:	697a      	ldr	r2, [r7, #20]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	697a      	ldr	r2, [r7, #20]
 800ce74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	685a      	ldr	r2, [r3, #4]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	693a      	ldr	r2, [r7, #16]
 800ce88:	621a      	str	r2, [r3, #32]
}
 800ce8a:	46c0      	nop			@ (mov r8, r8)
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	b006      	add	sp, #24
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	46c0      	nop			@ (mov r8, r8)
 800ce94:	ffffefff 	.word	0xffffefff
 800ce98:	feff8fff 	.word	0xfeff8fff
 800ce9c:	fffffcff 	.word	0xfffffcff
 800cea0:	ffffdfff 	.word	0xffffdfff
 800cea4:	40012c00 	.word	0x40012c00
 800cea8:	40014000 	.word	0x40014000
 800ceac:	40014400 	.word	0x40014400
 800ceb0:	40014800 	.word	0x40014800
 800ceb4:	ffffbfff 	.word	0xffffbfff

0800ceb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b086      	sub	sp, #24
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a1b      	ldr	r3, [r3, #32]
 800cec6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6a1b      	ldr	r3, [r3, #32]
 800cecc:	4a23      	ldr	r2, [pc, #140]	@ (800cf5c <TIM_OC5_SetConfig+0xa4>)
 800cece:	401a      	ands	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	4a1f      	ldr	r2, [pc, #124]	@ (800cf60 <TIM_OC5_SetConfig+0xa8>)
 800cee4:	4013      	ands	r3, r2
 800cee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	4313      	orrs	r3, r2
 800cef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	4a1b      	ldr	r2, [pc, #108]	@ (800cf64 <TIM_OC5_SetConfig+0xac>)
 800cef6:	4013      	ands	r3, r2
 800cef8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	689b      	ldr	r3, [r3, #8]
 800cefe:	041b      	lsls	r3, r3, #16
 800cf00:	693a      	ldr	r2, [r7, #16]
 800cf02:	4313      	orrs	r3, r2
 800cf04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4a17      	ldr	r2, [pc, #92]	@ (800cf68 <TIM_OC5_SetConfig+0xb0>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d00b      	beq.n	800cf26 <TIM_OC5_SetConfig+0x6e>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4a16      	ldr	r2, [pc, #88]	@ (800cf6c <TIM_OC5_SetConfig+0xb4>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d007      	beq.n	800cf26 <TIM_OC5_SetConfig+0x6e>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	4a15      	ldr	r2, [pc, #84]	@ (800cf70 <TIM_OC5_SetConfig+0xb8>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d003      	beq.n	800cf26 <TIM_OC5_SetConfig+0x6e>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4a14      	ldr	r2, [pc, #80]	@ (800cf74 <TIM_OC5_SetConfig+0xbc>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d109      	bne.n	800cf3a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	4a0c      	ldr	r2, [pc, #48]	@ (800cf5c <TIM_OC5_SetConfig+0xa4>)
 800cf2a:	4013      	ands	r3, r2
 800cf2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	695b      	ldr	r3, [r3, #20]
 800cf32:	021b      	lsls	r3, r3, #8
 800cf34:	697a      	ldr	r2, [r7, #20]
 800cf36:	4313      	orrs	r3, r2
 800cf38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	697a      	ldr	r2, [r7, #20]
 800cf3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	68fa      	ldr	r2, [r7, #12]
 800cf44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	685a      	ldr	r2, [r3, #4]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	693a      	ldr	r2, [r7, #16]
 800cf52:	621a      	str	r2, [r3, #32]
}
 800cf54:	46c0      	nop			@ (mov r8, r8)
 800cf56:	46bd      	mov	sp, r7
 800cf58:	b006      	add	sp, #24
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	fffeffff 	.word	0xfffeffff
 800cf60:	fffeff8f 	.word	0xfffeff8f
 800cf64:	fffdffff 	.word	0xfffdffff
 800cf68:	40012c00 	.word	0x40012c00
 800cf6c:	40014000 	.word	0x40014000
 800cf70:	40014400 	.word	0x40014400
 800cf74:	40014800 	.word	0x40014800

0800cf78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b086      	sub	sp, #24
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6a1b      	ldr	r3, [r3, #32]
 800cf86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6a1b      	ldr	r3, [r3, #32]
 800cf8c:	4a24      	ldr	r2, [pc, #144]	@ (800d020 <TIM_OC6_SetConfig+0xa8>)
 800cf8e:	401a      	ands	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	4a20      	ldr	r2, [pc, #128]	@ (800d024 <TIM_OC6_SetConfig+0xac>)
 800cfa4:	4013      	ands	r3, r2
 800cfa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	021b      	lsls	r3, r3, #8
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	4a1c      	ldr	r2, [pc, #112]	@ (800d028 <TIM_OC6_SetConfig+0xb0>)
 800cfb8:	4013      	ands	r3, r2
 800cfba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	051b      	lsls	r3, r3, #20
 800cfc2:	693a      	ldr	r2, [r7, #16]
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4a18      	ldr	r2, [pc, #96]	@ (800d02c <TIM_OC6_SetConfig+0xb4>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d00b      	beq.n	800cfe8 <TIM_OC6_SetConfig+0x70>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4a17      	ldr	r2, [pc, #92]	@ (800d030 <TIM_OC6_SetConfig+0xb8>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d007      	beq.n	800cfe8 <TIM_OC6_SetConfig+0x70>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	4a16      	ldr	r2, [pc, #88]	@ (800d034 <TIM_OC6_SetConfig+0xbc>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d003      	beq.n	800cfe8 <TIM_OC6_SetConfig+0x70>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	4a15      	ldr	r2, [pc, #84]	@ (800d038 <TIM_OC6_SetConfig+0xc0>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d109      	bne.n	800cffc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	4a14      	ldr	r2, [pc, #80]	@ (800d03c <TIM_OC6_SetConfig+0xc4>)
 800cfec:	4013      	ands	r3, r2
 800cfee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	695b      	ldr	r3, [r3, #20]
 800cff4:	029b      	lsls	r3, r3, #10
 800cff6:	697a      	ldr	r2, [r7, #20]
 800cff8:	4313      	orrs	r3, r2
 800cffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	697a      	ldr	r2, [r7, #20]
 800d000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	685a      	ldr	r2, [r3, #4]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	693a      	ldr	r2, [r7, #16]
 800d014:	621a      	str	r2, [r3, #32]
}
 800d016:	46c0      	nop			@ (mov r8, r8)
 800d018:	46bd      	mov	sp, r7
 800d01a:	b006      	add	sp, #24
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	46c0      	nop			@ (mov r8, r8)
 800d020:	ffefffff 	.word	0xffefffff
 800d024:	feff8fff 	.word	0xfeff8fff
 800d028:	ffdfffff 	.word	0xffdfffff
 800d02c:	40012c00 	.word	0x40012c00
 800d030:	40014000 	.word	0x40014000
 800d034:	40014400 	.word	0x40014400
 800d038:	40014800 	.word	0x40014800
 800d03c:	fffbffff 	.word	0xfffbffff

0800d040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	223c      	movs	r2, #60	@ 0x3c
 800d04e:	5c9b      	ldrb	r3, [r3, r2]
 800d050:	2b01      	cmp	r3, #1
 800d052:	d101      	bne.n	800d058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d054:	2302      	movs	r3, #2
 800d056:	e05a      	b.n	800d10e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	223c      	movs	r2, #60	@ 0x3c
 800d05c:	2101      	movs	r1, #1
 800d05e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	223d      	movs	r2, #61	@ 0x3d
 800d064:	2102      	movs	r1, #2
 800d066:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a26      	ldr	r2, [pc, #152]	@ (800d118 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d108      	bne.n	800d094 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	4a25      	ldr	r2, [pc, #148]	@ (800d11c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d086:	4013      	ands	r3, r2
 800d088:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	4313      	orrs	r3, r2
 800d092:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2270      	movs	r2, #112	@ 0x70
 800d098:	4393      	bics	r3, r2
 800d09a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	68fa      	ldr	r2, [r7, #12]
 800d0ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4a19      	ldr	r2, [pc, #100]	@ (800d118 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d014      	beq.n	800d0e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	2380      	movs	r3, #128	@ 0x80
 800d0be:	05db      	lsls	r3, r3, #23
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d00e      	beq.n	800d0e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a15      	ldr	r2, [pc, #84]	@ (800d120 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d009      	beq.n	800d0e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a14      	ldr	r2, [pc, #80]	@ (800d124 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d004      	beq.n	800d0e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a12      	ldr	r2, [pc, #72]	@ (800d128 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d10c      	bne.n	800d0fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	2280      	movs	r2, #128	@ 0x80
 800d0e6:	4393      	bics	r3, r2
 800d0e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	223d      	movs	r2, #61	@ 0x3d
 800d100:	2101      	movs	r1, #1
 800d102:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	223c      	movs	r2, #60	@ 0x3c
 800d108:	2100      	movs	r1, #0
 800d10a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d10c:	2300      	movs	r3, #0
}
 800d10e:	0018      	movs	r0, r3
 800d110:	46bd      	mov	sp, r7
 800d112:	b004      	add	sp, #16
 800d114:	bd80      	pop	{r7, pc}
 800d116:	46c0      	nop			@ (mov r8, r8)
 800d118:	40012c00 	.word	0x40012c00
 800d11c:	ff0fffff 	.word	0xff0fffff
 800d120:	40000400 	.word	0x40000400
 800d124:	40000800 	.word	0x40000800
 800d128:	40014000 	.word	0x40014000

0800d12c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d136:	2300      	movs	r3, #0
 800d138:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	223c      	movs	r2, #60	@ 0x3c
 800d13e:	5c9b      	ldrb	r3, [r3, r2]
 800d140:	2b01      	cmp	r3, #1
 800d142:	d101      	bne.n	800d148 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d144:	2302      	movs	r3, #2
 800d146:	e06f      	b.n	800d228 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	223c      	movs	r2, #60	@ 0x3c
 800d14c:	2101      	movs	r1, #1
 800d14e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	22ff      	movs	r2, #255	@ 0xff
 800d154:	4393      	bics	r3, r2
 800d156:	001a      	movs	r2, r3
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	4313      	orrs	r3, r2
 800d15e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	4a33      	ldr	r2, [pc, #204]	@ (800d230 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800d164:	401a      	ands	r2, r3
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	4313      	orrs	r3, r2
 800d16c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	4a30      	ldr	r2, [pc, #192]	@ (800d234 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800d172:	401a      	ands	r2, r3
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	4313      	orrs	r3, r2
 800d17a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	4a2e      	ldr	r2, [pc, #184]	@ (800d238 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800d180:	401a      	ands	r2, r3
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4313      	orrs	r3, r2
 800d188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	4a2b      	ldr	r2, [pc, #172]	@ (800d23c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800d18e:	401a      	ands	r2, r3
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	4313      	orrs	r3, r2
 800d196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	4a29      	ldr	r2, [pc, #164]	@ (800d240 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800d19c:	401a      	ands	r2, r3
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	695b      	ldr	r3, [r3, #20]
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	4a26      	ldr	r2, [pc, #152]	@ (800d244 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800d1aa:	401a      	ands	r2, r3
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	4a24      	ldr	r2, [pc, #144]	@ (800d248 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800d1b8:	401a      	ands	r2, r3
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	699b      	ldr	r3, [r3, #24]
 800d1be:	041b      	lsls	r3, r3, #16
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	4a21      	ldr	r2, [pc, #132]	@ (800d24c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800d1c8:	401a      	ands	r2, r3
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	69db      	ldr	r3, [r3, #28]
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a1e      	ldr	r2, [pc, #120]	@ (800d250 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d11c      	bne.n	800d216 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	4a1d      	ldr	r2, [pc, #116]	@ (800d254 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800d1e0:	401a      	ands	r2, r3
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1e6:	051b      	lsls	r3, r3, #20
 800d1e8:	4313      	orrs	r3, r2
 800d1ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	4a1a      	ldr	r2, [pc, #104]	@ (800d258 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800d1f0:	401a      	ands	r2, r3
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	6a1b      	ldr	r3, [r3, #32]
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	4a17      	ldr	r2, [pc, #92]	@ (800d25c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800d1fe:	401a      	ands	r2, r3
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d204:	4313      	orrs	r3, r2
 800d206:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	4a15      	ldr	r2, [pc, #84]	@ (800d260 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800d20c:	401a      	ands	r2, r3
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d212:	4313      	orrs	r3, r2
 800d214:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	223c      	movs	r2, #60	@ 0x3c
 800d222:	2100      	movs	r1, #0
 800d224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d226:	2300      	movs	r3, #0
}
 800d228:	0018      	movs	r0, r3
 800d22a:	46bd      	mov	sp, r7
 800d22c:	b004      	add	sp, #16
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	fffffcff 	.word	0xfffffcff
 800d234:	fffffbff 	.word	0xfffffbff
 800d238:	fffff7ff 	.word	0xfffff7ff
 800d23c:	ffffefff 	.word	0xffffefff
 800d240:	ffffdfff 	.word	0xffffdfff
 800d244:	ffffbfff 	.word	0xffffbfff
 800d248:	fff0ffff 	.word	0xfff0ffff
 800d24c:	efffffff 	.word	0xefffffff
 800d250:	40012c00 	.word	0x40012c00
 800d254:	ff0fffff 	.word	0xff0fffff
 800d258:	feffffff 	.word	0xfeffffff
 800d25c:	fdffffff 	.word	0xfdffffff
 800d260:	dfffffff 	.word	0xdfffffff

0800d264 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d26c:	46c0      	nop			@ (mov r8, r8)
 800d26e:	46bd      	mov	sp, r7
 800d270:	b002      	add	sp, #8
 800d272:	bd80      	pop	{r7, pc}

0800d274 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d27c:	46c0      	nop			@ (mov r8, r8)
 800d27e:	46bd      	mov	sp, r7
 800d280:	b002      	add	sp, #8
 800d282:	bd80      	pop	{r7, pc}

0800d284 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d28c:	46c0      	nop			@ (mov r8, r8)
 800d28e:	46bd      	mov	sp, r7
 800d290:	b002      	add	sp, #8
 800d292:	bd80      	pop	{r7, pc}

0800d294 <LL_DMA_ConfigTransfer>:
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b086      	sub	sp, #24
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800d2a4:	4a0c      	ldr	r2, [pc, #48]	@ (800d2d8 <LL_DMA_ConfigTransfer+0x44>)
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	18d3      	adds	r3, r2, r3
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	001a      	movs	r2, r3
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	18d3      	adds	r3, r2, r3
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a09      	ldr	r2, [pc, #36]	@ (800d2dc <LL_DMA_ConfigTransfer+0x48>)
 800d2b6:	4013      	ands	r3, r2
 800d2b8:	0019      	movs	r1, r3
 800d2ba:	4a07      	ldr	r2, [pc, #28]	@ (800d2d8 <LL_DMA_ConfigTransfer+0x44>)
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	18d3      	adds	r3, r2, r3
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	001a      	movs	r2, r3
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	18d3      	adds	r3, r2, r3
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	430a      	orrs	r2, r1
 800d2cc:	601a      	str	r2, [r3, #0]
}
 800d2ce:	46c0      	nop			@ (mov r8, r8)
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	b006      	add	sp, #24
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	46c0      	nop			@ (mov r8, r8)
 800d2d8:	0801f180 	.word	0x0801f180
 800d2dc:	ffff800f 	.word	0xffff800f

0800d2e0 <LL_DMA_SetDataLength>:
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b086      	sub	sp, #24
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	60b9      	str	r1, [r7, #8]
 800d2ea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800d2f0:	4a0b      	ldr	r2, [pc, #44]	@ (800d320 <LL_DMA_SetDataLength+0x40>)
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	18d3      	adds	r3, r2, r3
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	001a      	movs	r2, r3
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	18d3      	adds	r3, r2, r3
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	0c1b      	lsrs	r3, r3, #16
 800d302:	0419      	lsls	r1, r3, #16
 800d304:	4a06      	ldr	r2, [pc, #24]	@ (800d320 <LL_DMA_SetDataLength+0x40>)
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	18d3      	adds	r3, r2, r3
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	001a      	movs	r2, r3
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	18d3      	adds	r3, r2, r3
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	430a      	orrs	r2, r1
 800d316:	605a      	str	r2, [r3, #4]
}
 800d318:	46c0      	nop			@ (mov r8, r8)
 800d31a:	46bd      	mov	sp, r7
 800d31c:	b006      	add	sp, #24
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	0801f180 	.word	0x0801f180

0800d324 <LL_DMA_SetMemoryAddress>:
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b086      	sub	sp, #24
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800d334:	4a06      	ldr	r2, [pc, #24]	@ (800d350 <LL_DMA_SetMemoryAddress+0x2c>)
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	18d3      	adds	r3, r2, r3
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	001a      	movs	r2, r3
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	18d3      	adds	r3, r2, r3
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	60da      	str	r2, [r3, #12]
}
 800d346:	46c0      	nop			@ (mov r8, r8)
 800d348:	46bd      	mov	sp, r7
 800d34a:	b006      	add	sp, #24
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	46c0      	nop			@ (mov r8, r8)
 800d350:	0801f180 	.word	0x0801f180

0800d354 <LL_DMA_SetPeriphAddress>:
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b086      	sub	sp, #24
 800d358:	af00      	add	r7, sp, #0
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800d364:	4a06      	ldr	r2, [pc, #24]	@ (800d380 <LL_DMA_SetPeriphAddress+0x2c>)
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	18d3      	adds	r3, r2, r3
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	001a      	movs	r2, r3
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	18d3      	adds	r3, r2, r3
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	609a      	str	r2, [r3, #8]
}
 800d376:	46c0      	nop			@ (mov r8, r8)
 800d378:	46bd      	mov	sp, r7
 800d37a:	b006      	add	sp, #24
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	46c0      	nop			@ (mov r8, r8)
 800d380:	0801f180 	.word	0x0801f180

0800d384 <LL_DMA_SetPeriphRequest>:
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	0a9b      	lsrs	r3, r3, #10
 800d394:	4a0f      	ldr	r2, [pc, #60]	@ (800d3d4 <LL_DMA_SetPeriphRequest+0x50>)
 800d396:	405a      	eors	r2, r3
 800d398:	0013      	movs	r3, r2
 800d39a:	00db      	lsls	r3, r3, #3
 800d39c:	1a9b      	subs	r3, r3, r2
 800d39e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800d3a0:	68ba      	ldr	r2, [r7, #8]
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	18d3      	adds	r3, r2, r3
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	4a0b      	ldr	r2, [pc, #44]	@ (800d3d8 <LL_DMA_SetPeriphRequest+0x54>)
 800d3aa:	4694      	mov	ip, r2
 800d3ac:	4463      	add	r3, ip
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	227f      	movs	r2, #127	@ 0x7f
 800d3b2:	4393      	bics	r3, r2
 800d3b4:	0019      	movs	r1, r3
 800d3b6:	68ba      	ldr	r2, [r7, #8]
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	18d3      	adds	r3, r2, r3
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	4a06      	ldr	r2, [pc, #24]	@ (800d3d8 <LL_DMA_SetPeriphRequest+0x54>)
 800d3c0:	4694      	mov	ip, r2
 800d3c2:	4463      	add	r3, ip
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	430a      	orrs	r2, r1
 800d3c8:	601a      	str	r2, [r3, #0]
}
 800d3ca:	46c0      	nop			@ (mov r8, r8)
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	b006      	add	sp, #24
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	46c0      	nop			@ (mov r8, r8)
 800d3d4:	00100080 	.word	0x00100080
 800d3d8:	40020800 	.word	0x40020800

0800d3dc <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800d3f0:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800d3f6:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800d3fc:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800d402:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800d408:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800d40e:	431a      	orrs	r2, r3
 800d410:	68b9      	ldr	r1, [r7, #8]
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	0018      	movs	r0, r3
 800d416:	f7ff ff3d 	bl	800d294 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	685a      	ldr	r2, [r3, #4]
 800d41e:	68b9      	ldr	r1, [r7, #8]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	0018      	movs	r0, r3
 800d424:	f7ff ff7e 	bl	800d324 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	68b9      	ldr	r1, [r7, #8]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	0018      	movs	r0, r3
 800d432:	f7ff ff8f 	bl	800d354 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6a1a      	ldr	r2, [r3, #32]
 800d43a:	68b9      	ldr	r1, [r7, #8]
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	0018      	movs	r0, r3
 800d440:	f7ff ff4e 	bl	800d2e0 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d448:	68b9      	ldr	r1, [r7, #8]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	0018      	movs	r0, r3
 800d44e:	f7ff ff99 	bl	800d384 <LL_DMA_SetPeriphRequest>

  return SUCCESS;
 800d452:	2300      	movs	r3, #0
}
 800d454:	0018      	movs	r0, r3
 800d456:	46bd      	mov	sp, r7
 800d458:	b004      	add	sp, #16
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2200      	movs	r2, #0
 800d46e:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2200      	movs	r2, #0
 800d474:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2200      	movs	r2, #0
 800d492:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2200      	movs	r2, #0
 800d49e:	625a      	str	r2, [r3, #36]	@ 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d4a6:	46c0      	nop			@ (mov r8, r8)
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	b002      	add	sp, #8
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b084      	sub	sp, #16
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	60f8      	str	r0, [r7, #12]
 800d4b6:	60b9      	str	r1, [r7, #8]
 800d4b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6819      	ldr	r1, [r3, #0]
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	435b      	muls	r3, r3
 800d4c2:	001a      	movs	r2, r3
 800d4c4:	0013      	movs	r3, r2
 800d4c6:	005b      	lsls	r3, r3, #1
 800d4c8:	189b      	adds	r3, r3, r2
 800d4ca:	43db      	mvns	r3, r3
 800d4cc:	400b      	ands	r3, r1
 800d4ce:	001a      	movs	r2, r3
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	435b      	muls	r3, r3
 800d4d4:	6879      	ldr	r1, [r7, #4]
 800d4d6:	434b      	muls	r3, r1
 800d4d8:	431a      	orrs	r2, r3
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	601a      	str	r2, [r3, #0]
}
 800d4de:	46c0      	nop			@ (mov r8, r8)
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	b004      	add	sp, #16
 800d4e4:	bd80      	pop	{r7, pc}

0800d4e6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b084      	sub	sp, #16
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	60f8      	str	r0, [r7, #12]
 800d4ee:	60b9      	str	r1, [r7, #8]
 800d4f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	68ba      	ldr	r2, [r7, #8]
 800d4f8:	43d2      	mvns	r2, r2
 800d4fa:	401a      	ands	r2, r3
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	6879      	ldr	r1, [r7, #4]
 800d500:	434b      	muls	r3, r1
 800d502:	431a      	orrs	r2, r3
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	605a      	str	r2, [r3, #4]
}
 800d508:	46c0      	nop			@ (mov r8, r8)
 800d50a:	46bd      	mov	sp, r7
 800d50c:	b004      	add	sp, #16
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	6899      	ldr	r1, [r3, #8]
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	435b      	muls	r3, r3
 800d524:	001a      	movs	r2, r3
 800d526:	0013      	movs	r3, r2
 800d528:	005b      	lsls	r3, r3, #1
 800d52a:	189b      	adds	r3, r3, r2
 800d52c:	43db      	mvns	r3, r3
 800d52e:	400b      	ands	r3, r1
 800d530:	001a      	movs	r2, r3
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	435b      	muls	r3, r3
 800d536:	6879      	ldr	r1, [r7, #4]
 800d538:	434b      	muls	r3, r1
 800d53a:	431a      	orrs	r2, r3
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	609a      	str	r2, [r3, #8]
}
 800d540:	46c0      	nop			@ (mov r8, r8)
 800d542:	46bd      	mov	sp, r7
 800d544:	b004      	add	sp, #16
 800d546:	bd80      	pop	{r7, pc}

0800d548 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	60b9      	str	r1, [r7, #8]
 800d552:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	68d9      	ldr	r1, [r3, #12]
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	435b      	muls	r3, r3
 800d55c:	001a      	movs	r2, r3
 800d55e:	0013      	movs	r3, r2
 800d560:	005b      	lsls	r3, r3, #1
 800d562:	189b      	adds	r3, r3, r2
 800d564:	43db      	mvns	r3, r3
 800d566:	400b      	ands	r3, r1
 800d568:	001a      	movs	r2, r3
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	435b      	muls	r3, r3
 800d56e:	6879      	ldr	r1, [r7, #4]
 800d570:	434b      	muls	r3, r1
 800d572:	431a      	orrs	r2, r3
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	60da      	str	r2, [r3, #12]
}
 800d578:	46c0      	nop			@ (mov r8, r8)
 800d57a:	46bd      	mov	sp, r7
 800d57c:	b004      	add	sp, #16
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	6a19      	ldr	r1, [r3, #32]
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	435b      	muls	r3, r3
 800d594:	68ba      	ldr	r2, [r7, #8]
 800d596:	4353      	muls	r3, r2
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	435a      	muls	r2, r3
 800d59c:	0013      	movs	r3, r2
 800d59e:	011b      	lsls	r3, r3, #4
 800d5a0:	1a9b      	subs	r3, r3, r2
 800d5a2:	43db      	mvns	r3, r3
 800d5a4:	400b      	ands	r3, r1
 800d5a6:	001a      	movs	r2, r3
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	435b      	muls	r3, r3
 800d5ac:	68b9      	ldr	r1, [r7, #8]
 800d5ae:	434b      	muls	r3, r1
 800d5b0:	68b9      	ldr	r1, [r7, #8]
 800d5b2:	434b      	muls	r3, r1
 800d5b4:	6879      	ldr	r1, [r7, #4]
 800d5b6:	434b      	muls	r3, r1
 800d5b8:	431a      	orrs	r2, r3
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800d5be:	46c0      	nop			@ (mov r8, r8)
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	b004      	add	sp, #16
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800d5c6:	b580      	push	{r7, lr}
 800d5c8:	b084      	sub	sp, #16
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	60f8      	str	r0, [r7, #12]
 800d5ce:	60b9      	str	r1, [r7, #8]
 800d5d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	0a1b      	lsrs	r3, r3, #8
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	0a12      	lsrs	r2, r2, #8
 800d5de:	4353      	muls	r3, r2
 800d5e0:	68ba      	ldr	r2, [r7, #8]
 800d5e2:	0a12      	lsrs	r2, r2, #8
 800d5e4:	4353      	muls	r3, r2
 800d5e6:	68ba      	ldr	r2, [r7, #8]
 800d5e8:	0a12      	lsrs	r2, r2, #8
 800d5ea:	435a      	muls	r2, r3
 800d5ec:	0013      	movs	r3, r2
 800d5ee:	011b      	lsls	r3, r3, #4
 800d5f0:	1a9b      	subs	r3, r3, r2
 800d5f2:	43db      	mvns	r3, r3
 800d5f4:	400b      	ands	r3, r1
 800d5f6:	001a      	movs	r2, r3
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	0a1b      	lsrs	r3, r3, #8
 800d5fc:	68b9      	ldr	r1, [r7, #8]
 800d5fe:	0a09      	lsrs	r1, r1, #8
 800d600:	434b      	muls	r3, r1
 800d602:	68b9      	ldr	r1, [r7, #8]
 800d604:	0a09      	lsrs	r1, r1, #8
 800d606:	434b      	muls	r3, r1
 800d608:	68b9      	ldr	r1, [r7, #8]
 800d60a:	0a09      	lsrs	r1, r1, #8
 800d60c:	434b      	muls	r3, r1
 800d60e:	6879      	ldr	r1, [r7, #4]
 800d610:	434b      	muls	r3, r1
 800d612:	431a      	orrs	r2, r3
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800d618:	46c0      	nop			@ (mov r8, r8)
 800d61a:	46bd      	mov	sp, r7
 800d61c:	b004      	add	sp, #16
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800d62a:	2300      	movs	r3, #0
 800d62c:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800d62e:	e047      	b.n	800d6c0 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2101      	movs	r1, #1
 800d636:	68fa      	ldr	r2, [r7, #12]
 800d638:	4091      	lsls	r1, r2
 800d63a:	000a      	movs	r2, r1
 800d63c:	4013      	ands	r3, r2
 800d63e:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d039      	beq.n	800d6ba <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d003      	beq.n	800d656 <LL_GPIO_Init+0x36>
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	2b02      	cmp	r3, #2
 800d654:	d10d      	bne.n	800d672 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	689a      	ldr	r2, [r3, #8]
 800d65a:	68b9      	ldr	r1, [r7, #8]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	0018      	movs	r0, r3
 800d660:	f7ff ff56 	bl	800d510 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	68da      	ldr	r2, [r3, #12]
 800d668:	68b9      	ldr	r1, [r7, #8]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	0018      	movs	r0, r3
 800d66e:	f7ff ff3a 	bl	800d4e6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	691a      	ldr	r2, [r3, #16]
 800d676:	68b9      	ldr	r1, [r7, #8]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	0018      	movs	r0, r3
 800d67c:	f7ff ff64 	bl	800d548 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	2b02      	cmp	r3, #2
 800d686:	d111      	bne.n	800d6ac <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	2bff      	cmp	r3, #255	@ 0xff
 800d68c:	d807      	bhi.n	800d69e <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	695a      	ldr	r2, [r3, #20]
 800d692:	68b9      	ldr	r1, [r7, #8]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	0018      	movs	r0, r3
 800d698:	f7ff ff72 	bl	800d580 <LL_GPIO_SetAFPin_0_7>
 800d69c:	e006      	b.n	800d6ac <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	695a      	ldr	r2, [r3, #20]
 800d6a2:	68b9      	ldr	r1, [r7, #8]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	0018      	movs	r0, r3
 800d6a8:	f7ff ff8d 	bl	800d5c6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	685a      	ldr	r2, [r3, #4]
 800d6b0:	68b9      	ldr	r1, [r7, #8]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	0018      	movs	r0, r3
 800d6b6:	f7ff fefa 	bl	800d4ae <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	40da      	lsrs	r2, r3
 800d6c8:	1e13      	subs	r3, r2, #0
 800d6ca:	d1b1      	bne.n	800d630 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800d6cc:	2300      	movs	r3, #0
}
 800d6ce:	0018      	movs	r0, r3
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	b004      	add	sp, #16
 800d6d4:	bd80      	pop	{r7, pc}

0800d6d6 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b082      	sub	sp, #8
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	005b      	lsls	r3, r3, #1
 800d6e4:	085a      	lsrs	r2, r3, #1
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	601a      	str	r2, [r3, #0]
}
 800d6ea:	46c0      	nop			@ (mov r8, r8)
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	b002      	add	sp, #8
 800d6f0:	bd80      	pop	{r7, pc}
	...

0800d6f4 <LL_APB1_GRP1_EnableClock>:
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800d6fc:	4b07      	ldr	r3, [pc, #28]	@ (800d71c <LL_APB1_GRP1_EnableClock+0x28>)
 800d6fe:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800d700:	4b06      	ldr	r3, [pc, #24]	@ (800d71c <LL_APB1_GRP1_EnableClock+0x28>)
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	430a      	orrs	r2, r1
 800d706:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800d708:	4b04      	ldr	r3, [pc, #16]	@ (800d71c <LL_APB1_GRP1_EnableClock+0x28>)
 800d70a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	4013      	ands	r3, r2
 800d710:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d712:	68fb      	ldr	r3, [r7, #12]
}
 800d714:	46c0      	nop			@ (mov r8, r8)
 800d716:	46bd      	mov	sp, r7
 800d718:	b004      	add	sp, #16
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	40021000 	.word	0x40021000

0800d720 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	4a16      	ldr	r2, [pc, #88]	@ (800d788 <LL_UCPD_Init+0x68>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d104      	bne.n	800d73c <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 800d732:	2380      	movs	r3, #128	@ 0x80
 800d734:	049b      	lsls	r3, r3, #18
 800d736:	0018      	movs	r0, r3
 800d738:	f7ff ffdc 	bl	800d6f4 <LL_APB1_GRP1_EnableClock>
  }

  if (UCPD2 == UCPDx)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	4a13      	ldr	r2, [pc, #76]	@ (800d78c <LL_UCPD_Init+0x6c>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d104      	bne.n	800d74e <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 800d744:	2380      	movs	r3, #128	@ 0x80
 800d746:	04db      	lsls	r3, r3, #19
 800d748:	0018      	movs	r0, r3
 800d74a:	f7ff ffd3 	bl	800d6f4 <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	0018      	movs	r0, r3
 800d752:	f7ff ffc0 	bl	800d6d6 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4a0d      	ldr	r2, [pc, #52]	@ (800d790 <LL_UCPD_Init+0x70>)
 800d75c:	401a      	ands	r2, r3
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	6819      	ldr	r1, [r3, #0]
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	02db      	lsls	r3, r3, #11
 800d768:	4319      	orrs	r1, r3
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	019b      	lsls	r3, r3, #6
 800d770:	4319      	orrs	r1, r3
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	430b      	orrs	r3, r1
 800d778:	431a      	orrs	r2, r3
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	0018      	movs	r0, r3
 800d782:	46bd      	mov	sp, r7
 800d784:	b002      	add	sp, #8
 800d786:	bd80      	pop	{r7, pc}
 800d788:	4000a000 	.word	0x4000a000
 800d78c:	4000a400 	.word	0x4000a400
 800d790:	fff10000 	.word	0xfff10000

0800d794 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2280      	movs	r2, #128	@ 0x80
 800d7a0:	0292      	lsls	r2, r2, #10
 800d7a2:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2207      	movs	r2, #7
 800d7a8:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2210      	movs	r2, #16
 800d7ae:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	220d      	movs	r2, #13
 800d7b4:	60da      	str	r2, [r3, #12]
}
 800d7b6:	46c0      	nop			@ (mov r8, r8)
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	b002      	add	sp, #8
 800d7bc:	bd80      	pop	{r7, pc}
	...

0800d7c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d7ce:	4b05      	ldr	r3, [pc, #20]	@ (800d7e4 <USB_EnableGlobalInt+0x24>)
 800d7d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d7d8:	2300      	movs	r3, #0
}
 800d7da:	0018      	movs	r0, r3
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	b004      	add	sp, #16
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	46c0      	nop			@ (mov r8, r8)
 800d7e4:	0000bf80 	.word	0x0000bf80

0800d7e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d7f0:	4b06      	ldr	r3, [pc, #24]	@ (800d80c <USB_DisableGlobalInt+0x24>)
 800d7f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	43d2      	mvns	r2, r2
 800d7fc:	401a      	ands	r2, r3
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d802:	2300      	movs	r3, #0
}
 800d804:	0018      	movs	r0, r3
 800d806:	46bd      	mov	sp, r7
 800d808:	b004      	add	sp, #16
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	0000bf80 	.word	0x0000bf80

0800d810 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	000a      	movs	r2, r1
 800d81a:	1cfb      	adds	r3, r7, #3
 800d81c:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 800d81e:	1cfb      	adds	r3, r7, #3
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d106      	bne.n	800d834 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d82a:	005b      	lsls	r3, r3, #1
 800d82c:	085a      	lsrs	r2, r3, #1
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	641a      	str	r2, [r3, #64]	@ 0x40
 800d832:	e00d      	b.n	800d850 <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 800d834:	1cfb      	adds	r3, r7, #3
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d107      	bne.n	800d84c <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d840:	2280      	movs	r2, #128	@ 0x80
 800d842:	0612      	lsls	r2, r2, #24
 800d844:	431a      	orrs	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	641a      	str	r2, [r3, #64]	@ 0x40
 800d84a:	e001      	b.n	800d850 <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 800d84c:	2301      	movs	r3, #1
 800d84e:	e000      	b.n	800d852 <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 800d850:	2300      	movs	r3, #0
}
 800d852:	0018      	movs	r0, r3
 800d854:	46bd      	mov	sp, r7
 800d856:	b002      	add	sp, #8
 800d858:	bd80      	pop	{r7, pc}

0800d85a <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800d85a:	b084      	sub	sp, #16
 800d85c:	b5b0      	push	{r4, r5, r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	2004      	movs	r0, #4
 800d866:	2420      	movs	r4, #32
 800d868:	1900      	adds	r0, r0, r4
 800d86a:	19c0      	adds	r0, r0, r7
 800d86c:	6001      	str	r1, [r0, #0]
 800d86e:	6042      	str	r2, [r0, #4]
 800d870:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2201      	movs	r2, #1
 800d876:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d87c:	2201      	movs	r2, #1
 800d87e:	4393      	bics	r3, r2
 800d880:	001a      	movs	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800d886:	250f      	movs	r5, #15
 800d888:	197c      	adds	r4, r7, r5
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2100      	movs	r1, #0
 800d88e:	0018      	movs	r0, r3
 800d890:	f7ff ffbe 	bl	800d810 <USB_SetCurrentMode>
 800d894:	0003      	movs	r3, r0
 800d896:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800d89e:	197b      	adds	r3, r7, r5
 800d8a0:	781b      	ldrb	r3, [r3, #0]
}
 800d8a2:	0018      	movs	r0, r3
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	b004      	add	sp, #16
 800d8a8:	bcb0      	pop	{r4, r5, r7}
 800d8aa:	bc08      	pop	{r3}
 800d8ac:	b004      	add	sp, #16
 800d8ae:	4718      	bx	r3

0800d8b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_DRD_TypeDef const *USBx, uint32_t num)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800d8ba:	2300      	movs	r3, #0
}
 800d8bc:	0018      	movs	r0, r3
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	b002      	add	sp, #8
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_DRD_TypeDef const *USBx)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	0018      	movs	r0, r3
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	b002      	add	sp, #8
 800d8d4:	bd80      	pop	{r7, pc}
	...

0800d8d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b09e      	sub	sp, #120	@ 0x78
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d8e2:	2377      	movs	r3, #119	@ 0x77
 800d8e4:	18fb      	adds	r3, r7, r3
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	18d3      	adds	r3, r2, r3
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4adc      	ldr	r2, [pc, #880]	@ (800dc68 <USB_ActivateEndpoint+0x390>)
 800d8f8:	4013      	ands	r3, r2
 800d8fa:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	78db      	ldrb	r3, [r3, #3]
 800d900:	2b03      	cmp	r3, #3
 800d902:	d00e      	beq.n	800d922 <USB_ActivateEndpoint+0x4a>
 800d904:	dc19      	bgt.n	800d93a <USB_ActivateEndpoint+0x62>
 800d906:	2b02      	cmp	r3, #2
 800d908:	d01c      	beq.n	800d944 <USB_ActivateEndpoint+0x6c>
 800d90a:	dc16      	bgt.n	800d93a <USB_ActivateEndpoint+0x62>
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d002      	beq.n	800d916 <USB_ActivateEndpoint+0x3e>
 800d910:	2b01      	cmp	r3, #1
 800d912:	d00c      	beq.n	800d92e <USB_ActivateEndpoint+0x56>
 800d914:	e011      	b.n	800d93a <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d916:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d918:	2280      	movs	r2, #128	@ 0x80
 800d91a:	0092      	lsls	r2, r2, #2
 800d91c:	4313      	orrs	r3, r2
 800d91e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800d920:	e011      	b.n	800d946 <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d922:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d924:	22c0      	movs	r2, #192	@ 0xc0
 800d926:	00d2      	lsls	r2, r2, #3
 800d928:	4313      	orrs	r3, r2
 800d92a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800d92c:	e00b      	b.n	800d946 <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d92e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d930:	2280      	movs	r2, #128	@ 0x80
 800d932:	00d2      	lsls	r2, r2, #3
 800d934:	4313      	orrs	r3, r2
 800d936:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800d938:	e005      	b.n	800d946 <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 800d93a:	2377      	movs	r3, #119	@ 0x77
 800d93c:	18fb      	adds	r3, r7, r3
 800d93e:	2201      	movs	r2, #1
 800d940:	701a      	strb	r2, [r3, #0]
      break;
 800d942:	e000      	b.n	800d946 <USB_ActivateEndpoint+0x6e>
      break;
 800d944:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800d946:	687a      	ldr	r2, [r7, #4]
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	18d3      	adds	r3, r2, r3
 800d950:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d952:	49c6      	ldr	r1, [pc, #792]	@ (800dc6c <USB_ActivateEndpoint+0x394>)
 800d954:	430a      	orrs	r2, r1
 800d956:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	18d3      	adds	r3, r2, r3
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4ac2      	ldr	r2, [pc, #776]	@ (800dc70 <USB_ActivateEndpoint+0x398>)
 800d966:	4013      	ands	r3, r2
 800d968:	683a      	ldr	r2, [r7, #0]
 800d96a:	7812      	ldrb	r2, [r2, #0]
 800d96c:	4313      	orrs	r3, r2
 800d96e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	18d3      	adds	r3, r2, r3
 800d97a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d97c:	49bb      	ldr	r1, [pc, #748]	@ (800dc6c <USB_ActivateEndpoint+0x394>)
 800d97e:	430a      	orrs	r2, r1
 800d980:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	7b1b      	ldrb	r3, [r3, #12]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d000      	beq.n	800d98c <USB_ActivateEndpoint+0xb4>
 800d98a:	e155      	b.n	800dc38 <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	785b      	ldrb	r3, [r3, #1]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d06e      	beq.n	800da72 <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	00db      	lsls	r3, r3, #3
 800d99a:	4ab6      	ldr	r2, [pc, #728]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800d99c:	4694      	mov	ip, r2
 800d99e:	4463      	add	r3, ip
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	00db      	lsls	r3, r3, #3
 800d9a8:	49b2      	ldr	r1, [pc, #712]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800d9aa:	468c      	mov	ip, r1
 800d9ac:	4463      	add	r3, ip
 800d9ae:	0c12      	lsrs	r2, r2, #16
 800d9b0:	0412      	lsls	r2, r2, #16
 800d9b2:	601a      	str	r2, [r3, #0]
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	00db      	lsls	r3, r3, #3
 800d9ba:	4aae      	ldr	r2, [pc, #696]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800d9bc:	4694      	mov	ip, r2
 800d9be:	4463      	add	r3, ip
 800d9c0:	6819      	ldr	r1, [r3, #0]
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	88db      	ldrh	r3, [r3, #6]
 800d9c6:	089b      	lsrs	r3, r3, #2
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	009a      	lsls	r2, r3, #2
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	00db      	lsls	r3, r3, #3
 800d9d2:	48a8      	ldr	r0, [pc, #672]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800d9d4:	4684      	mov	ip, r0
 800d9d6:	4463      	add	r3, ip
 800d9d8:	430a      	orrs	r2, r1
 800d9da:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	18d3      	adds	r3, r2, r3
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	61bb      	str	r3, [r7, #24]
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	2240      	movs	r2, #64	@ 0x40
 800d9ee:	4013      	ands	r3, r2
 800d9f0:	d011      	beq.n	800da16 <USB_ActivateEndpoint+0x13e>
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	18d3      	adds	r3, r2, r3
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	4a9c      	ldr	r2, [pc, #624]	@ (800dc70 <USB_ActivateEndpoint+0x398>)
 800da00:	4013      	ands	r3, r2
 800da02:	617b      	str	r3, [r7, #20]
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	009b      	lsls	r3, r3, #2
 800da0c:	18d3      	adds	r3, r2, r3
 800da0e:	697a      	ldr	r2, [r7, #20]
 800da10:	4999      	ldr	r1, [pc, #612]	@ (800dc78 <USB_ActivateEndpoint+0x3a0>)
 800da12:	430a      	orrs	r2, r1
 800da14:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	78db      	ldrb	r3, [r3, #3]
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d016      	beq.n	800da4c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	18d3      	adds	r3, r2, r3
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4a94      	ldr	r2, [pc, #592]	@ (800dc7c <USB_ActivateEndpoint+0x3a4>)
 800da2c:	4013      	ands	r3, r2
 800da2e:	60fb      	str	r3, [r7, #12]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2220      	movs	r2, #32
 800da34:	4053      	eors	r3, r2
 800da36:	60fb      	str	r3, [r7, #12]
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	18d3      	adds	r3, r2, r3
 800da42:	68fa      	ldr	r2, [r7, #12]
 800da44:	4989      	ldr	r1, [pc, #548]	@ (800dc6c <USB_ActivateEndpoint+0x394>)
 800da46:	430a      	orrs	r2, r1
 800da48:	601a      	str	r2, [r3, #0]
 800da4a:	e261      	b.n	800df10 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	18d3      	adds	r3, r2, r3
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a88      	ldr	r2, [pc, #544]	@ (800dc7c <USB_ActivateEndpoint+0x3a4>)
 800da5a:	4013      	ands	r3, r2
 800da5c:	613b      	str	r3, [r7, #16]
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	18d3      	adds	r3, r2, r3
 800da68:	693a      	ldr	r2, [r7, #16]
 800da6a:	4980      	ldr	r1, [pc, #512]	@ (800dc6c <USB_ActivateEndpoint+0x394>)
 800da6c:	430a      	orrs	r2, r1
 800da6e:	601a      	str	r2, [r3, #0]
 800da70:	e24e      	b.n	800df10 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	00db      	lsls	r3, r3, #3
 800da78:	4a7e      	ldr	r2, [pc, #504]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800da7a:	4694      	mov	ip, r2
 800da7c:	4463      	add	r3, ip
 800da7e:	685a      	ldr	r2, [r3, #4]
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	00db      	lsls	r3, r3, #3
 800da86:	497b      	ldr	r1, [pc, #492]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800da88:	468c      	mov	ip, r1
 800da8a:	4463      	add	r3, ip
 800da8c:	0c12      	lsrs	r2, r2, #16
 800da8e:	0412      	lsls	r2, r2, #16
 800da90:	605a      	str	r2, [r3, #4]
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	00db      	lsls	r3, r3, #3
 800da98:	4a76      	ldr	r2, [pc, #472]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800da9a:	4694      	mov	ip, r2
 800da9c:	4463      	add	r3, ip
 800da9e:	6859      	ldr	r1, [r3, #4]
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	88db      	ldrh	r3, [r3, #6]
 800daa4:	089b      	lsrs	r3, r3, #2
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	009a      	lsls	r2, r3, #2
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	00db      	lsls	r3, r3, #3
 800dab0:	4870      	ldr	r0, [pc, #448]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800dab2:	4684      	mov	ip, r0
 800dab4:	4463      	add	r3, ip
 800dab6:	430a      	orrs	r2, r1
 800dab8:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	00db      	lsls	r3, r3, #3
 800dac0:	4a6c      	ldr	r2, [pc, #432]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800dac2:	4694      	mov	ip, r2
 800dac4:	4463      	add	r3, ip
 800dac6:	685a      	ldr	r2, [r3, #4]
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	00db      	lsls	r3, r3, #3
 800dace:	4969      	ldr	r1, [pc, #420]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800dad0:	468c      	mov	ip, r1
 800dad2:	4463      	add	r3, ip
 800dad4:	0192      	lsls	r2, r2, #6
 800dad6:	0992      	lsrs	r2, r2, #6
 800dad8:	605a      	str	r2, [r3, #4]
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	691b      	ldr	r3, [r3, #16]
 800dade:	2b3e      	cmp	r3, #62	@ 0x3e
 800dae0:	d920      	bls.n	800db24 <USB_ActivateEndpoint+0x24c>
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	691b      	ldr	r3, [r3, #16]
 800dae6:	095b      	lsrs	r3, r3, #5
 800dae8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	691b      	ldr	r3, [r3, #16]
 800daee:	221f      	movs	r2, #31
 800daf0:	4013      	ands	r3, r2
 800daf2:	d102      	bne.n	800dafa <USB_ActivateEndpoint+0x222>
 800daf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800daf6:	3b01      	subs	r3, #1
 800daf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	00db      	lsls	r3, r3, #3
 800db00:	4a5c      	ldr	r2, [pc, #368]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800db02:	4694      	mov	ip, r2
 800db04:	4463      	add	r3, ip
 800db06:	685a      	ldr	r2, [r3, #4]
 800db08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db0a:	069b      	lsls	r3, r3, #26
 800db0c:	431a      	orrs	r2, r3
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	00db      	lsls	r3, r3, #3
 800db14:	4957      	ldr	r1, [pc, #348]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800db16:	468c      	mov	ip, r1
 800db18:	4463      	add	r3, ip
 800db1a:	2180      	movs	r1, #128	@ 0x80
 800db1c:	0609      	lsls	r1, r1, #24
 800db1e:	430a      	orrs	r2, r1
 800db20:	605a      	str	r2, [r3, #4]
 800db22:	e032      	b.n	800db8a <USB_ActivateEndpoint+0x2b2>
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	691b      	ldr	r3, [r3, #16]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d111      	bne.n	800db50 <USB_ActivateEndpoint+0x278>
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	00db      	lsls	r3, r3, #3
 800db32:	4a50      	ldr	r2, [pc, #320]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800db34:	4694      	mov	ip, r2
 800db36:	4463      	add	r3, ip
 800db38:	685a      	ldr	r2, [r3, #4]
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	00db      	lsls	r3, r3, #3
 800db40:	494c      	ldr	r1, [pc, #304]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800db42:	468c      	mov	ip, r1
 800db44:	4463      	add	r3, ip
 800db46:	2180      	movs	r1, #128	@ 0x80
 800db48:	0609      	lsls	r1, r1, #24
 800db4a:	430a      	orrs	r2, r1
 800db4c:	605a      	str	r2, [r3, #4]
 800db4e:	e01c      	b.n	800db8a <USB_ActivateEndpoint+0x2b2>
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	691b      	ldr	r3, [r3, #16]
 800db54:	085b      	lsrs	r3, r3, #1
 800db56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	2201      	movs	r2, #1
 800db5e:	4013      	ands	r3, r2
 800db60:	d002      	beq.n	800db68 <USB_ActivateEndpoint+0x290>
 800db62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db64:	3301      	adds	r3, #1
 800db66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	00db      	lsls	r3, r3, #3
 800db6e:	4a41      	ldr	r2, [pc, #260]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800db70:	4694      	mov	ip, r2
 800db72:	4463      	add	r3, ip
 800db74:	6859      	ldr	r1, [r3, #4]
 800db76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db78:	069a      	lsls	r2, r3, #26
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	00db      	lsls	r3, r3, #3
 800db80:	483c      	ldr	r0, [pc, #240]	@ (800dc74 <USB_ActivateEndpoint+0x39c>)
 800db82:	4684      	mov	ip, r0
 800db84:	4463      	add	r3, ip
 800db86:	430a      	orrs	r2, r1
 800db88:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	18d3      	adds	r3, r2, r3
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db9a:	2380      	movs	r3, #128	@ 0x80
 800db9c:	01db      	lsls	r3, r3, #7
 800db9e:	4013      	ands	r3, r2
 800dba0:	d011      	beq.n	800dbc6 <USB_ActivateEndpoint+0x2ee>
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	18d3      	adds	r3, r2, r3
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4a30      	ldr	r2, [pc, #192]	@ (800dc70 <USB_ActivateEndpoint+0x398>)
 800dbb0:	4013      	ands	r3, r2
 800dbb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	18d3      	adds	r3, r2, r3
 800dbbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbc0:	492f      	ldr	r1, [pc, #188]	@ (800dc80 <USB_ActivateEndpoint+0x3a8>)
 800dbc2:	430a      	orrs	r2, r1
 800dbc4:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d11c      	bne.n	800dc08 <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	18d3      	adds	r3, r2, r3
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4a2a      	ldr	r2, [pc, #168]	@ (800dc84 <USB_ActivateEndpoint+0x3ac>)
 800dbdc:	4013      	ands	r3, r2
 800dbde:	61fb      	str	r3, [r7, #28]
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	2280      	movs	r2, #128	@ 0x80
 800dbe4:	0152      	lsls	r2, r2, #5
 800dbe6:	4053      	eors	r3, r2
 800dbe8:	61fb      	str	r3, [r7, #28]
 800dbea:	69fb      	ldr	r3, [r7, #28]
 800dbec:	2280      	movs	r2, #128	@ 0x80
 800dbee:	0192      	lsls	r2, r2, #6
 800dbf0:	4053      	eors	r3, r2
 800dbf2:	61fb      	str	r3, [r7, #28]
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	18d3      	adds	r3, r2, r3
 800dbfe:	69fa      	ldr	r2, [r7, #28]
 800dc00:	491a      	ldr	r1, [pc, #104]	@ (800dc6c <USB_ActivateEndpoint+0x394>)
 800dc02:	430a      	orrs	r2, r1
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	e183      	b.n	800df10 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800dc08:	687a      	ldr	r2, [r7, #4]
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	009b      	lsls	r3, r3, #2
 800dc10:	18d3      	adds	r3, r2, r3
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a1b      	ldr	r2, [pc, #108]	@ (800dc84 <USB_ActivateEndpoint+0x3ac>)
 800dc16:	4013      	ands	r3, r2
 800dc18:	623b      	str	r3, [r7, #32]
 800dc1a:	6a3b      	ldr	r3, [r7, #32]
 800dc1c:	2280      	movs	r2, #128	@ 0x80
 800dc1e:	0192      	lsls	r2, r2, #6
 800dc20:	4053      	eors	r3, r2
 800dc22:	623b      	str	r3, [r7, #32]
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	18d3      	adds	r3, r2, r3
 800dc2e:	6a3a      	ldr	r2, [r7, #32]
 800dc30:	490e      	ldr	r1, [pc, #56]	@ (800dc6c <USB_ActivateEndpoint+0x394>)
 800dc32:	430a      	orrs	r2, r1
 800dc34:	601a      	str	r2, [r3, #0]
 800dc36:	e16b      	b.n	800df10 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	78db      	ldrb	r3, [r3, #3]
 800dc3c:	2b02      	cmp	r3, #2
 800dc3e:	d125      	bne.n	800dc8c <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	18d3      	adds	r3, r2, r3
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a08      	ldr	r2, [pc, #32]	@ (800dc70 <USB_ActivateEndpoint+0x398>)
 800dc4e:	4013      	ands	r3, r2
 800dc50:	663b      	str	r3, [r7, #96]	@ 0x60
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	18d3      	adds	r3, r2, r3
 800dc5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dc5e:	490a      	ldr	r1, [pc, #40]	@ (800dc88 <USB_ActivateEndpoint+0x3b0>)
 800dc60:	430a      	orrs	r2, r1
 800dc62:	601a      	str	r2, [r3, #0]
 800dc64:	e024      	b.n	800dcb0 <USB_ActivateEndpoint+0x3d8>
 800dc66:	46c0      	nop			@ (mov r8, r8)
 800dc68:	07ff898f 	.word	0x07ff898f
 800dc6c:	00008080 	.word	0x00008080
 800dc70:	07ff8f8f 	.word	0x07ff8f8f
 800dc74:	40009800 	.word	0x40009800
 800dc78:	000080c0 	.word	0x000080c0
 800dc7c:	07ff8fbf 	.word	0x07ff8fbf
 800dc80:	0000c080 	.word	0x0000c080
 800dc84:	07ffbf8f 	.word	0x07ffbf8f
 800dc88:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	18d3      	adds	r3, r2, r3
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4aa1      	ldr	r2, [pc, #644]	@ (800df20 <USB_ActivateEndpoint+0x648>)
 800dc9a:	4013      	ands	r3, r2
 800dc9c:	667b      	str	r3, [r7, #100]	@ 0x64
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	18d3      	adds	r3, r2, r3
 800dca8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dcaa:	499e      	ldr	r1, [pc, #632]	@ (800df24 <USB_ActivateEndpoint+0x64c>)
 800dcac:	430a      	orrs	r2, r1
 800dcae:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	00db      	lsls	r3, r3, #3
 800dcb6:	4a9c      	ldr	r2, [pc, #624]	@ (800df28 <USB_ActivateEndpoint+0x650>)
 800dcb8:	4694      	mov	ip, r2
 800dcba:	4463      	add	r3, ip
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	00db      	lsls	r3, r3, #3
 800dcc4:	4998      	ldr	r1, [pc, #608]	@ (800df28 <USB_ActivateEndpoint+0x650>)
 800dcc6:	468c      	mov	ip, r1
 800dcc8:	4463      	add	r3, ip
 800dcca:	0c12      	lsrs	r2, r2, #16
 800dccc:	0412      	lsls	r2, r2, #16
 800dcce:	601a      	str	r2, [r3, #0]
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	00db      	lsls	r3, r3, #3
 800dcd6:	4a94      	ldr	r2, [pc, #592]	@ (800df28 <USB_ActivateEndpoint+0x650>)
 800dcd8:	4694      	mov	ip, r2
 800dcda:	4463      	add	r3, ip
 800dcdc:	6819      	ldr	r1, [r3, #0]
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	891b      	ldrh	r3, [r3, #8]
 800dce2:	089b      	lsrs	r3, r3, #2
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	009a      	lsls	r2, r3, #2
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	00db      	lsls	r3, r3, #3
 800dcee:	488e      	ldr	r0, [pc, #568]	@ (800df28 <USB_ActivateEndpoint+0x650>)
 800dcf0:	4684      	mov	ip, r0
 800dcf2:	4463      	add	r3, ip
 800dcf4:	430a      	orrs	r2, r1
 800dcf6:	601a      	str	r2, [r3, #0]
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	00db      	lsls	r3, r3, #3
 800dcfe:	4a8a      	ldr	r2, [pc, #552]	@ (800df28 <USB_ActivateEndpoint+0x650>)
 800dd00:	4694      	mov	ip, r2
 800dd02:	4463      	add	r3, ip
 800dd04:	685a      	ldr	r2, [r3, #4]
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	00db      	lsls	r3, r3, #3
 800dd0c:	4986      	ldr	r1, [pc, #536]	@ (800df28 <USB_ActivateEndpoint+0x650>)
 800dd0e:	468c      	mov	ip, r1
 800dd10:	4463      	add	r3, ip
 800dd12:	0c12      	lsrs	r2, r2, #16
 800dd14:	0412      	lsls	r2, r2, #16
 800dd16:	605a      	str	r2, [r3, #4]
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	00db      	lsls	r3, r3, #3
 800dd1e:	4a82      	ldr	r2, [pc, #520]	@ (800df28 <USB_ActivateEndpoint+0x650>)
 800dd20:	4694      	mov	ip, r2
 800dd22:	4463      	add	r3, ip
 800dd24:	6859      	ldr	r1, [r3, #4]
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	895b      	ldrh	r3, [r3, #10]
 800dd2a:	089b      	lsrs	r3, r3, #2
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	009a      	lsls	r2, r3, #2
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	00db      	lsls	r3, r3, #3
 800dd36:	487c      	ldr	r0, [pc, #496]	@ (800df28 <USB_ActivateEndpoint+0x650>)
 800dd38:	4684      	mov	ip, r0
 800dd3a:	4463      	add	r3, ip
 800dd3c:	430a      	orrs	r2, r1
 800dd3e:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	785b      	ldrb	r3, [r3, #1]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d169      	bne.n	800de1c <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	18d3      	adds	r3, r2, r3
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dd58:	2380      	movs	r3, #128	@ 0x80
 800dd5a:	01db      	lsls	r3, r3, #7
 800dd5c:	4013      	ands	r3, r2
 800dd5e:	d011      	beq.n	800dd84 <USB_ActivateEndpoint+0x4ac>
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	009b      	lsls	r3, r3, #2
 800dd68:	18d3      	adds	r3, r2, r3
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a6f      	ldr	r2, [pc, #444]	@ (800df2c <USB_ActivateEndpoint+0x654>)
 800dd6e:	4013      	ands	r3, r2
 800dd70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd72:	687a      	ldr	r2, [r7, #4]
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	18d3      	adds	r3, r2, r3
 800dd7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dd7e:	496c      	ldr	r1, [pc, #432]	@ (800df30 <USB_ActivateEndpoint+0x658>)
 800dd80:	430a      	orrs	r2, r1
 800dd82:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	18d3      	adds	r3, r2, r3
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd94:	2240      	movs	r2, #64	@ 0x40
 800dd96:	4013      	ands	r3, r2
 800dd98:	d011      	beq.n	800ddbe <USB_ActivateEndpoint+0x4e6>
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	18d3      	adds	r3, r2, r3
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a61      	ldr	r2, [pc, #388]	@ (800df2c <USB_ActivateEndpoint+0x654>)
 800dda8:	4013      	ands	r3, r2
 800ddaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	18d3      	adds	r3, r2, r3
 800ddb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ddb8:	495e      	ldr	r1, [pc, #376]	@ (800df34 <USB_ActivateEndpoint+0x65c>)
 800ddba:	430a      	orrs	r2, r1
 800ddbc:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	18d3      	adds	r3, r2, r3
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4a5b      	ldr	r2, [pc, #364]	@ (800df38 <USB_ActivateEndpoint+0x660>)
 800ddcc:	4013      	ands	r3, r2
 800ddce:	633b      	str	r3, [r7, #48]	@ 0x30
 800ddd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd2:	2280      	movs	r2, #128	@ 0x80
 800ddd4:	0152      	lsls	r2, r2, #5
 800ddd6:	4053      	eors	r3, r2
 800ddd8:	633b      	str	r3, [r7, #48]	@ 0x30
 800ddda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dddc:	2280      	movs	r2, #128	@ 0x80
 800ddde:	0192      	lsls	r2, r2, #6
 800dde0:	4053      	eors	r3, r2
 800dde2:	633b      	str	r3, [r7, #48]	@ 0x30
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	18d3      	adds	r3, r2, r3
 800ddee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddf0:	494c      	ldr	r1, [pc, #304]	@ (800df24 <USB_ActivateEndpoint+0x64c>)
 800ddf2:	430a      	orrs	r2, r1
 800ddf4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	18d3      	adds	r3, r2, r3
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4a4e      	ldr	r2, [pc, #312]	@ (800df3c <USB_ActivateEndpoint+0x664>)
 800de04:	4013      	ands	r3, r2
 800de06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	18d3      	adds	r3, r2, r3
 800de12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de14:	4943      	ldr	r1, [pc, #268]	@ (800df24 <USB_ActivateEndpoint+0x64c>)
 800de16:	430a      	orrs	r2, r1
 800de18:	601a      	str	r2, [r3, #0]
 800de1a:	e079      	b.n	800df10 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	18d3      	adds	r3, r2, r3
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800de2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800de2c:	2380      	movs	r3, #128	@ 0x80
 800de2e:	01db      	lsls	r3, r3, #7
 800de30:	4013      	ands	r3, r2
 800de32:	d011      	beq.n	800de58 <USB_ActivateEndpoint+0x580>
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	18d3      	adds	r3, r2, r3
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4a3a      	ldr	r2, [pc, #232]	@ (800df2c <USB_ActivateEndpoint+0x654>)
 800de42:	4013      	ands	r3, r2
 800de44:	65bb      	str	r3, [r7, #88]	@ 0x58
 800de46:	687a      	ldr	r2, [r7, #4]
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	009b      	lsls	r3, r3, #2
 800de4e:	18d3      	adds	r3, r2, r3
 800de50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800de52:	4937      	ldr	r1, [pc, #220]	@ (800df30 <USB_ActivateEndpoint+0x658>)
 800de54:	430a      	orrs	r2, r1
 800de56:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800de58:	687a      	ldr	r2, [r7, #4]
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	009b      	lsls	r3, r3, #2
 800de60:	18d3      	adds	r3, r2, r3
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	657b      	str	r3, [r7, #84]	@ 0x54
 800de66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de68:	2240      	movs	r2, #64	@ 0x40
 800de6a:	4013      	ands	r3, r2
 800de6c:	d011      	beq.n	800de92 <USB_ActivateEndpoint+0x5ba>
 800de6e:	687a      	ldr	r2, [r7, #4]
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	009b      	lsls	r3, r3, #2
 800de76:	18d3      	adds	r3, r2, r3
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	4a2c      	ldr	r2, [pc, #176]	@ (800df2c <USB_ActivateEndpoint+0x654>)
 800de7c:	4013      	ands	r3, r2
 800de7e:	653b      	str	r3, [r7, #80]	@ 0x50
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	009b      	lsls	r3, r3, #2
 800de88:	18d3      	adds	r3, r2, r3
 800de8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800de8c:	4929      	ldr	r1, [pc, #164]	@ (800df34 <USB_ActivateEndpoint+0x65c>)
 800de8e:	430a      	orrs	r2, r1
 800de90:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	78db      	ldrb	r3, [r3, #3]
 800de96:	2b01      	cmp	r3, #1
 800de98:	d016      	beq.n	800dec8 <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	18d3      	adds	r3, r2, r3
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	4a25      	ldr	r2, [pc, #148]	@ (800df3c <USB_ActivateEndpoint+0x664>)
 800dea8:	4013      	ands	r3, r2
 800deaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800deac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800deae:	2220      	movs	r2, #32
 800deb0:	4053      	eors	r3, r2
 800deb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800deb4:	687a      	ldr	r2, [r7, #4]
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	18d3      	adds	r3, r2, r3
 800debe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dec0:	4918      	ldr	r1, [pc, #96]	@ (800df24 <USB_ActivateEndpoint+0x64c>)
 800dec2:	430a      	orrs	r2, r1
 800dec4:	601a      	str	r2, [r3, #0]
 800dec6:	e011      	b.n	800deec <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	009b      	lsls	r3, r3, #2
 800ded0:	18d3      	adds	r3, r2, r3
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a19      	ldr	r2, [pc, #100]	@ (800df3c <USB_ActivateEndpoint+0x664>)
 800ded6:	4013      	ands	r3, r2
 800ded8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	18d3      	adds	r3, r2, r3
 800dee4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dee6:	490f      	ldr	r1, [pc, #60]	@ (800df24 <USB_ActivateEndpoint+0x64c>)
 800dee8:	430a      	orrs	r2, r1
 800deea:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800deec:	687a      	ldr	r2, [r7, #4]
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	18d3      	adds	r3, r2, r3
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4a0f      	ldr	r2, [pc, #60]	@ (800df38 <USB_ActivateEndpoint+0x660>)
 800defa:	4013      	ands	r3, r2
 800defc:	647b      	str	r3, [r7, #68]	@ 0x44
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	18d3      	adds	r3, r2, r3
 800df08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800df0a:	4906      	ldr	r1, [pc, #24]	@ (800df24 <USB_ActivateEndpoint+0x64c>)
 800df0c:	430a      	orrs	r2, r1
 800df0e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800df10:	2377      	movs	r3, #119	@ 0x77
 800df12:	18fb      	adds	r3, r7, r3
 800df14:	781b      	ldrb	r3, [r3, #0]
}
 800df16:	0018      	movs	r0, r3
 800df18:	46bd      	mov	sp, r7
 800df1a:	b01e      	add	sp, #120	@ 0x78
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	46c0      	nop			@ (mov r8, r8)
 800df20:	07ff8e8f 	.word	0x07ff8e8f
 800df24:	00008080 	.word	0x00008080
 800df28:	40009800 	.word	0x40009800
 800df2c:	07ff8f8f 	.word	0x07ff8f8f
 800df30:	0000c080 	.word	0x0000c080
 800df34:	000080c0 	.word	0x000080c0
 800df38:	07ffbf8f 	.word	0x07ffbf8f
 800df3c:	07ff8fbf 	.word	0x07ff8fbf

0800df40 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b096      	sub	sp, #88	@ 0x58
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	7b1b      	ldrb	r3, [r3, #12]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d164      	bne.n	800e01c <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	785b      	ldrb	r3, [r3, #1]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d02f      	beq.n	800dfba <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	18d3      	adds	r3, r2, r3
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	613b      	str	r3, [r7, #16]
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	2240      	movs	r2, #64	@ 0x40
 800df6c:	4013      	ands	r3, r2
 800df6e:	d011      	beq.n	800df94 <USB_DeactivateEndpoint+0x54>
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	18d3      	adds	r3, r2, r3
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a9d      	ldr	r2, [pc, #628]	@ (800e1f4 <USB_DeactivateEndpoint+0x2b4>)
 800df7e:	4013      	ands	r3, r2
 800df80:	60fb      	str	r3, [r7, #12]
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	18d3      	adds	r3, r2, r3
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	499a      	ldr	r1, [pc, #616]	@ (800e1f8 <USB_DeactivateEndpoint+0x2b8>)
 800df90:	430a      	orrs	r2, r1
 800df92:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	18d3      	adds	r3, r2, r3
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4a96      	ldr	r2, [pc, #600]	@ (800e1fc <USB_DeactivateEndpoint+0x2bc>)
 800dfa2:	4013      	ands	r3, r2
 800dfa4:	60bb      	str	r3, [r7, #8]
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	009b      	lsls	r3, r3, #2
 800dfae:	18d3      	adds	r3, r2, r3
 800dfb0:	68ba      	ldr	r2, [r7, #8]
 800dfb2:	4993      	ldr	r1, [pc, #588]	@ (800e200 <USB_DeactivateEndpoint+0x2c0>)
 800dfb4:	430a      	orrs	r2, r1
 800dfb6:	601a      	str	r2, [r3, #0]
 800dfb8:	e117      	b.n	800e1ea <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	009b      	lsls	r3, r3, #2
 800dfc2:	18d3      	adds	r3, r2, r3
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	61fb      	str	r3, [r7, #28]
 800dfc8:	69fa      	ldr	r2, [r7, #28]
 800dfca:	2380      	movs	r3, #128	@ 0x80
 800dfcc:	01db      	lsls	r3, r3, #7
 800dfce:	4013      	ands	r3, r2
 800dfd0:	d011      	beq.n	800dff6 <USB_DeactivateEndpoint+0xb6>
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	18d3      	adds	r3, r2, r3
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4a85      	ldr	r2, [pc, #532]	@ (800e1f4 <USB_DeactivateEndpoint+0x2b4>)
 800dfe0:	4013      	ands	r3, r2
 800dfe2:	61bb      	str	r3, [r7, #24]
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	18d3      	adds	r3, r2, r3
 800dfee:	69ba      	ldr	r2, [r7, #24]
 800dff0:	4984      	ldr	r1, [pc, #528]	@ (800e204 <USB_DeactivateEndpoint+0x2c4>)
 800dff2:	430a      	orrs	r2, r1
 800dff4:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	18d3      	adds	r3, r2, r3
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4a81      	ldr	r2, [pc, #516]	@ (800e208 <USB_DeactivateEndpoint+0x2c8>)
 800e004:	4013      	ands	r3, r2
 800e006:	617b      	str	r3, [r7, #20]
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	009b      	lsls	r3, r3, #2
 800e010:	18d3      	adds	r3, r2, r3
 800e012:	697a      	ldr	r2, [r7, #20]
 800e014:	497a      	ldr	r1, [pc, #488]	@ (800e200 <USB_DeactivateEndpoint+0x2c0>)
 800e016:	430a      	orrs	r2, r1
 800e018:	601a      	str	r2, [r3, #0]
 800e01a:	e0e6      	b.n	800e1ea <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	785b      	ldrb	r3, [r3, #1]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d171      	bne.n	800e108 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	009b      	lsls	r3, r3, #2
 800e02c:	18d3      	adds	r3, r2, r3
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e032:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e034:	2380      	movs	r3, #128	@ 0x80
 800e036:	01db      	lsls	r3, r3, #7
 800e038:	4013      	ands	r3, r2
 800e03a:	d011      	beq.n	800e060 <USB_DeactivateEndpoint+0x120>
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	18d3      	adds	r3, r2, r3
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4a6a      	ldr	r2, [pc, #424]	@ (800e1f4 <USB_DeactivateEndpoint+0x2b4>)
 800e04a:	4013      	ands	r3, r2
 800e04c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	009b      	lsls	r3, r3, #2
 800e056:	18d3      	adds	r3, r2, r3
 800e058:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e05a:	496a      	ldr	r1, [pc, #424]	@ (800e204 <USB_DeactivateEndpoint+0x2c4>)
 800e05c:	430a      	orrs	r2, r1
 800e05e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	18d3      	adds	r3, r2, r3
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e070:	2240      	movs	r2, #64	@ 0x40
 800e072:	4013      	ands	r3, r2
 800e074:	d011      	beq.n	800e09a <USB_DeactivateEndpoint+0x15a>
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	009b      	lsls	r3, r3, #2
 800e07e:	18d3      	adds	r3, r2, r3
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4a5c      	ldr	r2, [pc, #368]	@ (800e1f4 <USB_DeactivateEndpoint+0x2b4>)
 800e084:	4013      	ands	r3, r2
 800e086:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	18d3      	adds	r3, r2, r3
 800e092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e094:	4958      	ldr	r1, [pc, #352]	@ (800e1f8 <USB_DeactivateEndpoint+0x2b8>)
 800e096:	430a      	orrs	r2, r1
 800e098:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	18d3      	adds	r3, r2, r3
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4a53      	ldr	r2, [pc, #332]	@ (800e1f4 <USB_DeactivateEndpoint+0x2b4>)
 800e0a8:	4013      	ands	r3, r2
 800e0aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	18d3      	adds	r3, r2, r3
 800e0b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e0b8:	494f      	ldr	r1, [pc, #316]	@ (800e1f8 <USB_DeactivateEndpoint+0x2b8>)
 800e0ba:	430a      	orrs	r2, r1
 800e0bc:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	18d3      	adds	r3, r2, r3
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4a4f      	ldr	r2, [pc, #316]	@ (800e208 <USB_DeactivateEndpoint+0x2c8>)
 800e0cc:	4013      	ands	r3, r2
 800e0ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	18d3      	adds	r3, r2, r3
 800e0da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0dc:	4948      	ldr	r1, [pc, #288]	@ (800e200 <USB_DeactivateEndpoint+0x2c0>)
 800e0de:	430a      	orrs	r2, r1
 800e0e0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e0e2:	687a      	ldr	r2, [r7, #4]
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	18d3      	adds	r3, r2, r3
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4a43      	ldr	r2, [pc, #268]	@ (800e1fc <USB_DeactivateEndpoint+0x2bc>)
 800e0f0:	4013      	ands	r3, r2
 800e0f2:	623b      	str	r3, [r7, #32]
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	18d3      	adds	r3, r2, r3
 800e0fe:	6a3a      	ldr	r2, [r7, #32]
 800e100:	493f      	ldr	r1, [pc, #252]	@ (800e200 <USB_DeactivateEndpoint+0x2c0>)
 800e102:	430a      	orrs	r2, r1
 800e104:	601a      	str	r2, [r3, #0]
 800e106:	e070      	b.n	800e1ea <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	18d3      	adds	r3, r2, r3
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	657b      	str	r3, [r7, #84]	@ 0x54
 800e116:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e118:	2380      	movs	r3, #128	@ 0x80
 800e11a:	01db      	lsls	r3, r3, #7
 800e11c:	4013      	ands	r3, r2
 800e11e:	d011      	beq.n	800e144 <USB_DeactivateEndpoint+0x204>
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	18d3      	adds	r3, r2, r3
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4a31      	ldr	r2, [pc, #196]	@ (800e1f4 <USB_DeactivateEndpoint+0x2b4>)
 800e12e:	4013      	ands	r3, r2
 800e130:	653b      	str	r3, [r7, #80]	@ 0x50
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	18d3      	adds	r3, r2, r3
 800e13c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e13e:	4931      	ldr	r1, [pc, #196]	@ (800e204 <USB_DeactivateEndpoint+0x2c4>)
 800e140:	430a      	orrs	r2, r1
 800e142:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	18d3      	adds	r3, r2, r3
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e154:	2240      	movs	r2, #64	@ 0x40
 800e156:	4013      	ands	r3, r2
 800e158:	d011      	beq.n	800e17e <USB_DeactivateEndpoint+0x23e>
 800e15a:	687a      	ldr	r2, [r7, #4]
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	781b      	ldrb	r3, [r3, #0]
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	18d3      	adds	r3, r2, r3
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4a23      	ldr	r2, [pc, #140]	@ (800e1f4 <USB_DeactivateEndpoint+0x2b4>)
 800e168:	4013      	ands	r3, r2
 800e16a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	18d3      	adds	r3, r2, r3
 800e176:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e178:	491f      	ldr	r1, [pc, #124]	@ (800e1f8 <USB_DeactivateEndpoint+0x2b8>)
 800e17a:	430a      	orrs	r2, r1
 800e17c:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	009b      	lsls	r3, r3, #2
 800e186:	18d3      	adds	r3, r2, r3
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4a1a      	ldr	r2, [pc, #104]	@ (800e1f4 <USB_DeactivateEndpoint+0x2b4>)
 800e18c:	4013      	ands	r3, r2
 800e18e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	18d3      	adds	r3, r2, r3
 800e19a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e19c:	4919      	ldr	r1, [pc, #100]	@ (800e204 <USB_DeactivateEndpoint+0x2c4>)
 800e19e:	430a      	orrs	r2, r1
 800e1a0:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	009b      	lsls	r3, r3, #2
 800e1aa:	18d3      	adds	r3, r2, r3
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4a13      	ldr	r2, [pc, #76]	@ (800e1fc <USB_DeactivateEndpoint+0x2bc>)
 800e1b0:	4013      	ands	r3, r2
 800e1b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	18d3      	adds	r3, r2, r3
 800e1be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e1c0:	490f      	ldr	r1, [pc, #60]	@ (800e200 <USB_DeactivateEndpoint+0x2c0>)
 800e1c2:	430a      	orrs	r2, r1
 800e1c4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	009b      	lsls	r3, r3, #2
 800e1ce:	18d3      	adds	r3, r2, r3
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4a0d      	ldr	r2, [pc, #52]	@ (800e208 <USB_DeactivateEndpoint+0x2c8>)
 800e1d4:	4013      	ands	r3, r2
 800e1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	18d3      	adds	r3, r2, r3
 800e1e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e1e4:	4906      	ldr	r1, [pc, #24]	@ (800e200 <USB_DeactivateEndpoint+0x2c0>)
 800e1e6:	430a      	orrs	r2, r1
 800e1e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e1ea:	2300      	movs	r3, #0
}
 800e1ec:	0018      	movs	r0, r3
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	b016      	add	sp, #88	@ 0x58
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	07ff8f8f 	.word	0x07ff8f8f
 800e1f8:	000080c0 	.word	0x000080c0
 800e1fc:	07ff8fbf 	.word	0x07ff8fbf
 800e200:	00008080 	.word	0x00008080
 800e204:	0000c080 	.word	0x0000c080
 800e208:	07ffbf8f 	.word	0x07ffbf8f

0800e20c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e20c:	b590      	push	{r4, r7, lr}
 800e20e:	b097      	sub	sp, #92	@ 0x5c
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	785b      	ldrb	r3, [r3, #1]
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d001      	beq.n	800e222 <USB_EPStartXfer+0x16>
 800e21e:	f000 fcbf 	bl	800eba0 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	699a      	ldr	r2, [r3, #24]
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	691b      	ldr	r3, [r3, #16]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d903      	bls.n	800e236 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	691b      	ldr	r3, [r3, #16]
 800e232:	657b      	str	r3, [r7, #84]	@ 0x54
 800e234:	e002      	b.n	800e23c <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	699b      	ldr	r3, [r3, #24]
 800e23a:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	7b1b      	ldrb	r3, [r3, #12]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d12b      	bne.n	800e29c <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	6959      	ldr	r1, [r3, #20]
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	88da      	ldrh	r2, [r3, #6]
 800e24c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e24e:	b29b      	uxth	r3, r3
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f001 f97f 	bl	800f554 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	00db      	lsls	r3, r3, #3
 800e25c:	4ace      	ldr	r2, [pc, #824]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e25e:	4694      	mov	ip, r2
 800e260:	4463      	add	r3, ip
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	00db      	lsls	r3, r3, #3
 800e26a:	49cb      	ldr	r1, [pc, #812]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e26c:	468c      	mov	ip, r1
 800e26e:	4463      	add	r3, ip
 800e270:	0412      	lsls	r2, r2, #16
 800e272:	0c12      	lsrs	r2, r2, #16
 800e274:	601a      	str	r2, [r3, #0]
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	00db      	lsls	r3, r3, #3
 800e27c:	4ac6      	ldr	r2, [pc, #792]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e27e:	4694      	mov	ip, r2
 800e280:	4463      	add	r3, ip
 800e282:	6819      	ldr	r1, [r3, #0]
 800e284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e286:	041a      	lsls	r2, r3, #16
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	00db      	lsls	r3, r3, #3
 800e28e:	48c2      	ldr	r0, [pc, #776]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e290:	4684      	mov	ip, r0
 800e292:	4463      	add	r3, ip
 800e294:	430a      	orrs	r2, r1
 800e296:	601a      	str	r2, [r3, #0]
 800e298:	f000 fc67 	bl	800eb6a <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	78db      	ldrb	r3, [r3, #3]
 800e2a0:	2b02      	cmp	r3, #2
 800e2a2:	d000      	beq.n	800e2a6 <USB_EPStartXfer+0x9a>
 800e2a4:	e31a      	b.n	800e8dc <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	6a1a      	ldr	r2, [r3, #32]
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	691b      	ldr	r3, [r3, #16]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d800      	bhi.n	800e2b4 <USB_EPStartXfer+0xa8>
 800e2b2:	e2c7      	b.n	800e844 <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	18d3      	adds	r3, r2, r3
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4ab6      	ldr	r2, [pc, #728]	@ (800e59c <USB_EPStartXfer+0x390>)
 800e2c2:	4013      	ands	r3, r2
 800e2c4:	613b      	str	r3, [r7, #16]
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	009b      	lsls	r3, r3, #2
 800e2ce:	18d3      	adds	r3, r2, r3
 800e2d0:	693a      	ldr	r2, [r7, #16]
 800e2d2:	49b3      	ldr	r1, [pc, #716]	@ (800e5a0 <USB_EPStartXfer+0x394>)
 800e2d4:	430a      	orrs	r2, r1
 800e2d6:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	6a1a      	ldr	r2, [r3, #32]
 800e2dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2de:	1ad2      	subs	r2, r2, r3
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	18d3      	adds	r3, r2, r3
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2240      	movs	r2, #64	@ 0x40
 800e2f2:	4013      	ands	r3, r2
 800e2f4:	d100      	bne.n	800e2f8 <USB_EPStartXfer+0xec>
 800e2f6:	e155      	b.n	800e5a4 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	785b      	ldrb	r3, [r3, #1]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d162      	bne.n	800e3c6 <USB_EPStartXfer+0x1ba>
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	00db      	lsls	r3, r3, #3
 800e306:	4aa4      	ldr	r2, [pc, #656]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e308:	4694      	mov	ip, r2
 800e30a:	4463      	add	r3, ip
 800e30c:	685a      	ldr	r2, [r3, #4]
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	00db      	lsls	r3, r3, #3
 800e314:	49a0      	ldr	r1, [pc, #640]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e316:	468c      	mov	ip, r1
 800e318:	4463      	add	r3, ip
 800e31a:	0192      	lsls	r2, r2, #6
 800e31c:	0992      	lsrs	r2, r2, #6
 800e31e:	605a      	str	r2, [r3, #4]
 800e320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e322:	2b3e      	cmp	r3, #62	@ 0x3e
 800e324:	d91e      	bls.n	800e364 <USB_EPStartXfer+0x158>
 800e326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e328:	095b      	lsrs	r3, r3, #5
 800e32a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e32c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e32e:	221f      	movs	r2, #31
 800e330:	4013      	ands	r3, r2
 800e332:	d102      	bne.n	800e33a <USB_EPStartXfer+0x12e>
 800e334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e336:	3b01      	subs	r3, #1
 800e338:	653b      	str	r3, [r7, #80]	@ 0x50
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	00db      	lsls	r3, r3, #3
 800e340:	4a95      	ldr	r2, [pc, #596]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e342:	4694      	mov	ip, r2
 800e344:	4463      	add	r3, ip
 800e346:	685a      	ldr	r2, [r3, #4]
 800e348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e34a:	069b      	lsls	r3, r3, #26
 800e34c:	431a      	orrs	r2, r3
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	00db      	lsls	r3, r3, #3
 800e354:	4990      	ldr	r1, [pc, #576]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e356:	468c      	mov	ip, r1
 800e358:	4463      	add	r3, ip
 800e35a:	2180      	movs	r1, #128	@ 0x80
 800e35c:	0609      	lsls	r1, r1, #24
 800e35e:	430a      	orrs	r2, r1
 800e360:	605a      	str	r2, [r3, #4]
 800e362:	e055      	b.n	800e410 <USB_EPStartXfer+0x204>
 800e364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e366:	2b00      	cmp	r3, #0
 800e368:	d111      	bne.n	800e38e <USB_EPStartXfer+0x182>
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	00db      	lsls	r3, r3, #3
 800e370:	4a89      	ldr	r2, [pc, #548]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e372:	4694      	mov	ip, r2
 800e374:	4463      	add	r3, ip
 800e376:	685a      	ldr	r2, [r3, #4]
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	00db      	lsls	r3, r3, #3
 800e37e:	4986      	ldr	r1, [pc, #536]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e380:	468c      	mov	ip, r1
 800e382:	4463      	add	r3, ip
 800e384:	2180      	movs	r1, #128	@ 0x80
 800e386:	0609      	lsls	r1, r1, #24
 800e388:	430a      	orrs	r2, r1
 800e38a:	605a      	str	r2, [r3, #4]
 800e38c:	e040      	b.n	800e410 <USB_EPStartXfer+0x204>
 800e38e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e390:	085b      	lsrs	r3, r3, #1
 800e392:	653b      	str	r3, [r7, #80]	@ 0x50
 800e394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e396:	2201      	movs	r2, #1
 800e398:	4013      	ands	r3, r2
 800e39a:	d002      	beq.n	800e3a2 <USB_EPStartXfer+0x196>
 800e39c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e39e:	3301      	adds	r3, #1
 800e3a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	00db      	lsls	r3, r3, #3
 800e3a8:	4a7b      	ldr	r2, [pc, #492]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e3aa:	4694      	mov	ip, r2
 800e3ac:	4463      	add	r3, ip
 800e3ae:	6859      	ldr	r1, [r3, #4]
 800e3b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3b2:	069a      	lsls	r2, r3, #26
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	00db      	lsls	r3, r3, #3
 800e3ba:	4877      	ldr	r0, [pc, #476]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e3bc:	4684      	mov	ip, r0
 800e3be:	4463      	add	r3, ip
 800e3c0:	430a      	orrs	r2, r1
 800e3c2:	605a      	str	r2, [r3, #4]
 800e3c4:	e024      	b.n	800e410 <USB_EPStartXfer+0x204>
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	785b      	ldrb	r3, [r3, #1]
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d120      	bne.n	800e410 <USB_EPStartXfer+0x204>
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	00db      	lsls	r3, r3, #3
 800e3d4:	4a70      	ldr	r2, [pc, #448]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e3d6:	4694      	mov	ip, r2
 800e3d8:	4463      	add	r3, ip
 800e3da:	685a      	ldr	r2, [r3, #4]
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	00db      	lsls	r3, r3, #3
 800e3e2:	496d      	ldr	r1, [pc, #436]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e3e4:	468c      	mov	ip, r1
 800e3e6:	4463      	add	r3, ip
 800e3e8:	0412      	lsls	r2, r2, #16
 800e3ea:	0c12      	lsrs	r2, r2, #16
 800e3ec:	605a      	str	r2, [r3, #4]
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	00db      	lsls	r3, r3, #3
 800e3f4:	4a68      	ldr	r2, [pc, #416]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e3f6:	4694      	mov	ip, r2
 800e3f8:	4463      	add	r3, ip
 800e3fa:	6859      	ldr	r1, [r3, #4]
 800e3fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3fe:	041a      	lsls	r2, r3, #16
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	00db      	lsls	r3, r3, #3
 800e406:	4864      	ldr	r0, [pc, #400]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e408:	4684      	mov	ip, r0
 800e40a:	4463      	add	r3, ip
 800e40c:	430a      	orrs	r2, r1
 800e40e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800e410:	201a      	movs	r0, #26
 800e412:	183b      	adds	r3, r7, r0
 800e414:	683a      	ldr	r2, [r7, #0]
 800e416:	8952      	ldrh	r2, [r2, #10]
 800e418:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	6959      	ldr	r1, [r3, #20]
 800e41e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e420:	b29c      	uxth	r4, r3
 800e422:	183b      	adds	r3, r7, r0
 800e424:	881a      	ldrh	r2, [r3, #0]
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	0023      	movs	r3, r4
 800e42a:	f001 f893 	bl	800f554 <USB_WritePMA>
            ep->xfer_buff += len;
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	695a      	ldr	r2, [r3, #20]
 800e432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e434:	18d2      	adds	r2, r2, r3
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	6a1a      	ldr	r2, [r3, #32]
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	691b      	ldr	r3, [r3, #16]
 800e442:	429a      	cmp	r2, r3
 800e444:	d906      	bls.n	800e454 <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	6a1a      	ldr	r2, [r3, #32]
 800e44a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e44c:	1ad2      	subs	r2, r2, r3
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	621a      	str	r2, [r3, #32]
 800e452:	e005      	b.n	800e460 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	6a1b      	ldr	r3, [r3, #32]
 800e458:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	2200      	movs	r2, #0
 800e45e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	785b      	ldrb	r3, [r3, #1]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d162      	bne.n	800e52e <USB_EPStartXfer+0x322>
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	00db      	lsls	r3, r3, #3
 800e46e:	4a4a      	ldr	r2, [pc, #296]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e470:	4694      	mov	ip, r2
 800e472:	4463      	add	r3, ip
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	00db      	lsls	r3, r3, #3
 800e47c:	4946      	ldr	r1, [pc, #280]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e47e:	468c      	mov	ip, r1
 800e480:	4463      	add	r3, ip
 800e482:	0192      	lsls	r2, r2, #6
 800e484:	0992      	lsrs	r2, r2, #6
 800e486:	601a      	str	r2, [r3, #0]
 800e488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e48a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e48c:	d91e      	bls.n	800e4cc <USB_EPStartXfer+0x2c0>
 800e48e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e490:	095b      	lsrs	r3, r3, #5
 800e492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e496:	221f      	movs	r2, #31
 800e498:	4013      	ands	r3, r2
 800e49a:	d102      	bne.n	800e4a2 <USB_EPStartXfer+0x296>
 800e49c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	00db      	lsls	r3, r3, #3
 800e4a8:	4a3b      	ldr	r2, [pc, #236]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e4aa:	4694      	mov	ip, r2
 800e4ac:	4463      	add	r3, ip
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4b2:	069b      	lsls	r3, r3, #26
 800e4b4:	431a      	orrs	r2, r3
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	00db      	lsls	r3, r3, #3
 800e4bc:	4936      	ldr	r1, [pc, #216]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e4be:	468c      	mov	ip, r1
 800e4c0:	4463      	add	r3, ip
 800e4c2:	2180      	movs	r1, #128	@ 0x80
 800e4c4:	0609      	lsls	r1, r1, #24
 800e4c6:	430a      	orrs	r2, r1
 800e4c8:	601a      	str	r2, [r3, #0]
 800e4ca:	e055      	b.n	800e578 <USB_EPStartXfer+0x36c>
 800e4cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d111      	bne.n	800e4f6 <USB_EPStartXfer+0x2ea>
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	00db      	lsls	r3, r3, #3
 800e4d8:	4a2f      	ldr	r2, [pc, #188]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e4da:	4694      	mov	ip, r2
 800e4dc:	4463      	add	r3, ip
 800e4de:	681a      	ldr	r2, [r3, #0]
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	00db      	lsls	r3, r3, #3
 800e4e6:	492c      	ldr	r1, [pc, #176]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e4e8:	468c      	mov	ip, r1
 800e4ea:	4463      	add	r3, ip
 800e4ec:	2180      	movs	r1, #128	@ 0x80
 800e4ee:	0609      	lsls	r1, r1, #24
 800e4f0:	430a      	orrs	r2, r1
 800e4f2:	601a      	str	r2, [r3, #0]
 800e4f4:	e040      	b.n	800e578 <USB_EPStartXfer+0x36c>
 800e4f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4f8:	085b      	lsrs	r3, r3, #1
 800e4fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e4fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4fe:	2201      	movs	r2, #1
 800e500:	4013      	ands	r3, r2
 800e502:	d002      	beq.n	800e50a <USB_EPStartXfer+0x2fe>
 800e504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e506:	3301      	adds	r3, #1
 800e508:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	00db      	lsls	r3, r3, #3
 800e510:	4a21      	ldr	r2, [pc, #132]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e512:	4694      	mov	ip, r2
 800e514:	4463      	add	r3, ip
 800e516:	6819      	ldr	r1, [r3, #0]
 800e518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e51a:	069a      	lsls	r2, r3, #26
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	00db      	lsls	r3, r3, #3
 800e522:	481d      	ldr	r0, [pc, #116]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e524:	4684      	mov	ip, r0
 800e526:	4463      	add	r3, ip
 800e528:	430a      	orrs	r2, r1
 800e52a:	601a      	str	r2, [r3, #0]
 800e52c:	e024      	b.n	800e578 <USB_EPStartXfer+0x36c>
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	785b      	ldrb	r3, [r3, #1]
 800e532:	2b01      	cmp	r3, #1
 800e534:	d120      	bne.n	800e578 <USB_EPStartXfer+0x36c>
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	00db      	lsls	r3, r3, #3
 800e53c:	4a16      	ldr	r2, [pc, #88]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e53e:	4694      	mov	ip, r2
 800e540:	4463      	add	r3, ip
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	00db      	lsls	r3, r3, #3
 800e54a:	4913      	ldr	r1, [pc, #76]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e54c:	468c      	mov	ip, r1
 800e54e:	4463      	add	r3, ip
 800e550:	0412      	lsls	r2, r2, #16
 800e552:	0c12      	lsrs	r2, r2, #16
 800e554:	601a      	str	r2, [r3, #0]
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	00db      	lsls	r3, r3, #3
 800e55c:	4a0e      	ldr	r2, [pc, #56]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e55e:	4694      	mov	ip, r2
 800e560:	4463      	add	r3, ip
 800e562:	6819      	ldr	r1, [r3, #0]
 800e564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e566:	041a      	lsls	r2, r3, #16
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	781b      	ldrb	r3, [r3, #0]
 800e56c:	00db      	lsls	r3, r3, #3
 800e56e:	480a      	ldr	r0, [pc, #40]	@ (800e598 <USB_EPStartXfer+0x38c>)
 800e570:	4684      	mov	ip, r0
 800e572:	4463      	add	r3, ip
 800e574:	430a      	orrs	r2, r1
 800e576:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e578:	201a      	movs	r0, #26
 800e57a:	183b      	adds	r3, r7, r0
 800e57c:	683a      	ldr	r2, [r7, #0]
 800e57e:	8912      	ldrh	r2, [r2, #8]
 800e580:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	6959      	ldr	r1, [r3, #20]
 800e586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e588:	b29c      	uxth	r4, r3
 800e58a:	183b      	adds	r3, r7, r0
 800e58c:	881a      	ldrh	r2, [r3, #0]
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	0023      	movs	r3, r4
 800e592:	f000 ffdf 	bl	800f554 <USB_WritePMA>
 800e596:	e2e8      	b.n	800eb6a <USB_EPStartXfer+0x95e>
 800e598:	40009800 	.word	0x40009800
 800e59c:	07ff8f8f 	.word	0x07ff8f8f
 800e5a0:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	785b      	ldrb	r3, [r3, #1]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d162      	bne.n	800e672 <USB_EPStartXfer+0x466>
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	00db      	lsls	r3, r3, #3
 800e5b2:	4ac7      	ldr	r2, [pc, #796]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e5b4:	4694      	mov	ip, r2
 800e5b6:	4463      	add	r3, ip
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	00db      	lsls	r3, r3, #3
 800e5c0:	49c3      	ldr	r1, [pc, #780]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e5c2:	468c      	mov	ip, r1
 800e5c4:	4463      	add	r3, ip
 800e5c6:	0192      	lsls	r2, r2, #6
 800e5c8:	0992      	lsrs	r2, r2, #6
 800e5ca:	601a      	str	r2, [r3, #0]
 800e5cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800e5d0:	d91e      	bls.n	800e610 <USB_EPStartXfer+0x404>
 800e5d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5d4:	095b      	lsrs	r3, r3, #5
 800e5d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e5d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5da:	221f      	movs	r2, #31
 800e5dc:	4013      	ands	r3, r2
 800e5de:	d102      	bne.n	800e5e6 <USB_EPStartXfer+0x3da>
 800e5e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5e2:	3b01      	subs	r3, #1
 800e5e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	00db      	lsls	r3, r3, #3
 800e5ec:	4ab8      	ldr	r2, [pc, #736]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e5ee:	4694      	mov	ip, r2
 800e5f0:	4463      	add	r3, ip
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5f6:	069b      	lsls	r3, r3, #26
 800e5f8:	431a      	orrs	r2, r3
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	00db      	lsls	r3, r3, #3
 800e600:	49b3      	ldr	r1, [pc, #716]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e602:	468c      	mov	ip, r1
 800e604:	4463      	add	r3, ip
 800e606:	2180      	movs	r1, #128	@ 0x80
 800e608:	0609      	lsls	r1, r1, #24
 800e60a:	430a      	orrs	r2, r1
 800e60c:	601a      	str	r2, [r3, #0]
 800e60e:	e055      	b.n	800e6bc <USB_EPStartXfer+0x4b0>
 800e610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e612:	2b00      	cmp	r3, #0
 800e614:	d111      	bne.n	800e63a <USB_EPStartXfer+0x42e>
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	00db      	lsls	r3, r3, #3
 800e61c:	4aac      	ldr	r2, [pc, #688]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e61e:	4694      	mov	ip, r2
 800e620:	4463      	add	r3, ip
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	00db      	lsls	r3, r3, #3
 800e62a:	49a9      	ldr	r1, [pc, #676]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e62c:	468c      	mov	ip, r1
 800e62e:	4463      	add	r3, ip
 800e630:	2180      	movs	r1, #128	@ 0x80
 800e632:	0609      	lsls	r1, r1, #24
 800e634:	430a      	orrs	r2, r1
 800e636:	601a      	str	r2, [r3, #0]
 800e638:	e040      	b.n	800e6bc <USB_EPStartXfer+0x4b0>
 800e63a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e63c:	085b      	lsrs	r3, r3, #1
 800e63e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e642:	2201      	movs	r2, #1
 800e644:	4013      	ands	r3, r2
 800e646:	d002      	beq.n	800e64e <USB_EPStartXfer+0x442>
 800e648:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e64a:	3301      	adds	r3, #1
 800e64c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	00db      	lsls	r3, r3, #3
 800e654:	4a9e      	ldr	r2, [pc, #632]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e656:	4694      	mov	ip, r2
 800e658:	4463      	add	r3, ip
 800e65a:	6819      	ldr	r1, [r3, #0]
 800e65c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e65e:	069a      	lsls	r2, r3, #26
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	00db      	lsls	r3, r3, #3
 800e666:	489a      	ldr	r0, [pc, #616]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e668:	4684      	mov	ip, r0
 800e66a:	4463      	add	r3, ip
 800e66c:	430a      	orrs	r2, r1
 800e66e:	601a      	str	r2, [r3, #0]
 800e670:	e024      	b.n	800e6bc <USB_EPStartXfer+0x4b0>
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	785b      	ldrb	r3, [r3, #1]
 800e676:	2b01      	cmp	r3, #1
 800e678:	d120      	bne.n	800e6bc <USB_EPStartXfer+0x4b0>
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	00db      	lsls	r3, r3, #3
 800e680:	4a93      	ldr	r2, [pc, #588]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e682:	4694      	mov	ip, r2
 800e684:	4463      	add	r3, ip
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	00db      	lsls	r3, r3, #3
 800e68e:	4990      	ldr	r1, [pc, #576]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e690:	468c      	mov	ip, r1
 800e692:	4463      	add	r3, ip
 800e694:	0412      	lsls	r2, r2, #16
 800e696:	0c12      	lsrs	r2, r2, #16
 800e698:	601a      	str	r2, [r3, #0]
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	00db      	lsls	r3, r3, #3
 800e6a0:	4a8b      	ldr	r2, [pc, #556]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e6a2:	4694      	mov	ip, r2
 800e6a4:	4463      	add	r3, ip
 800e6a6:	6819      	ldr	r1, [r3, #0]
 800e6a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6aa:	041a      	lsls	r2, r3, #16
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	00db      	lsls	r3, r3, #3
 800e6b2:	4887      	ldr	r0, [pc, #540]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e6b4:	4684      	mov	ip, r0
 800e6b6:	4463      	add	r3, ip
 800e6b8:	430a      	orrs	r2, r1
 800e6ba:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e6bc:	201a      	movs	r0, #26
 800e6be:	183b      	adds	r3, r7, r0
 800e6c0:	683a      	ldr	r2, [r7, #0]
 800e6c2:	8912      	ldrh	r2, [r2, #8]
 800e6c4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	6959      	ldr	r1, [r3, #20]
 800e6ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6cc:	b29c      	uxth	r4, r3
 800e6ce:	183b      	adds	r3, r7, r0
 800e6d0:	881a      	ldrh	r2, [r3, #0]
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	0023      	movs	r3, r4
 800e6d6:	f000 ff3d 	bl	800f554 <USB_WritePMA>
            ep->xfer_buff += len;
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	695a      	ldr	r2, [r3, #20]
 800e6de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6e0:	18d2      	adds	r2, r2, r3
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	6a1a      	ldr	r2, [r3, #32]
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	691b      	ldr	r3, [r3, #16]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d906      	bls.n	800e700 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	6a1a      	ldr	r2, [r3, #32]
 800e6f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6f8:	1ad2      	subs	r2, r2, r3
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	621a      	str	r2, [r3, #32]
 800e6fe:	e005      	b.n	800e70c <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	6a1b      	ldr	r3, [r3, #32]
 800e704:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	2200      	movs	r2, #0
 800e70a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	785b      	ldrb	r3, [r3, #1]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d162      	bne.n	800e7da <USB_EPStartXfer+0x5ce>
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	00db      	lsls	r3, r3, #3
 800e71a:	4a6d      	ldr	r2, [pc, #436]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e71c:	4694      	mov	ip, r2
 800e71e:	4463      	add	r3, ip
 800e720:	685a      	ldr	r2, [r3, #4]
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	00db      	lsls	r3, r3, #3
 800e728:	4969      	ldr	r1, [pc, #420]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e72a:	468c      	mov	ip, r1
 800e72c:	4463      	add	r3, ip
 800e72e:	0192      	lsls	r2, r2, #6
 800e730:	0992      	lsrs	r2, r2, #6
 800e732:	605a      	str	r2, [r3, #4]
 800e734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e736:	2b3e      	cmp	r3, #62	@ 0x3e
 800e738:	d91e      	bls.n	800e778 <USB_EPStartXfer+0x56c>
 800e73a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e73c:	095b      	lsrs	r3, r3, #5
 800e73e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e742:	221f      	movs	r2, #31
 800e744:	4013      	ands	r3, r2
 800e746:	d102      	bne.n	800e74e <USB_EPStartXfer+0x542>
 800e748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e74a:	3b01      	subs	r3, #1
 800e74c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	00db      	lsls	r3, r3, #3
 800e754:	4a5e      	ldr	r2, [pc, #376]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e756:	4694      	mov	ip, r2
 800e758:	4463      	add	r3, ip
 800e75a:	685a      	ldr	r2, [r3, #4]
 800e75c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e75e:	069b      	lsls	r3, r3, #26
 800e760:	431a      	orrs	r2, r3
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	00db      	lsls	r3, r3, #3
 800e768:	4959      	ldr	r1, [pc, #356]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e76a:	468c      	mov	ip, r1
 800e76c:	4463      	add	r3, ip
 800e76e:	2180      	movs	r1, #128	@ 0x80
 800e770:	0609      	lsls	r1, r1, #24
 800e772:	430a      	orrs	r2, r1
 800e774:	605a      	str	r2, [r3, #4]
 800e776:	e055      	b.n	800e824 <USB_EPStartXfer+0x618>
 800e778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d111      	bne.n	800e7a2 <USB_EPStartXfer+0x596>
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	00db      	lsls	r3, r3, #3
 800e784:	4a52      	ldr	r2, [pc, #328]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e786:	4694      	mov	ip, r2
 800e788:	4463      	add	r3, ip
 800e78a:	685a      	ldr	r2, [r3, #4]
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	00db      	lsls	r3, r3, #3
 800e792:	494f      	ldr	r1, [pc, #316]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e794:	468c      	mov	ip, r1
 800e796:	4463      	add	r3, ip
 800e798:	2180      	movs	r1, #128	@ 0x80
 800e79a:	0609      	lsls	r1, r1, #24
 800e79c:	430a      	orrs	r2, r1
 800e79e:	605a      	str	r2, [r3, #4]
 800e7a0:	e040      	b.n	800e824 <USB_EPStartXfer+0x618>
 800e7a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7a4:	085b      	lsrs	r3, r3, #1
 800e7a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800e7a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	4013      	ands	r3, r2
 800e7ae:	d002      	beq.n	800e7b6 <USB_EPStartXfer+0x5aa>
 800e7b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	00db      	lsls	r3, r3, #3
 800e7bc:	4a44      	ldr	r2, [pc, #272]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e7be:	4694      	mov	ip, r2
 800e7c0:	4463      	add	r3, ip
 800e7c2:	6859      	ldr	r1, [r3, #4]
 800e7c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7c6:	069a      	lsls	r2, r3, #26
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	00db      	lsls	r3, r3, #3
 800e7ce:	4840      	ldr	r0, [pc, #256]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e7d0:	4684      	mov	ip, r0
 800e7d2:	4463      	add	r3, ip
 800e7d4:	430a      	orrs	r2, r1
 800e7d6:	605a      	str	r2, [r3, #4]
 800e7d8:	e024      	b.n	800e824 <USB_EPStartXfer+0x618>
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	785b      	ldrb	r3, [r3, #1]
 800e7de:	2b01      	cmp	r3, #1
 800e7e0:	d120      	bne.n	800e824 <USB_EPStartXfer+0x618>
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	00db      	lsls	r3, r3, #3
 800e7e8:	4a39      	ldr	r2, [pc, #228]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e7ea:	4694      	mov	ip, r2
 800e7ec:	4463      	add	r3, ip
 800e7ee:	685a      	ldr	r2, [r3, #4]
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	781b      	ldrb	r3, [r3, #0]
 800e7f4:	00db      	lsls	r3, r3, #3
 800e7f6:	4936      	ldr	r1, [pc, #216]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e7f8:	468c      	mov	ip, r1
 800e7fa:	4463      	add	r3, ip
 800e7fc:	0412      	lsls	r2, r2, #16
 800e7fe:	0c12      	lsrs	r2, r2, #16
 800e800:	605a      	str	r2, [r3, #4]
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	00db      	lsls	r3, r3, #3
 800e808:	4a31      	ldr	r2, [pc, #196]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e80a:	4694      	mov	ip, r2
 800e80c:	4463      	add	r3, ip
 800e80e:	6859      	ldr	r1, [r3, #4]
 800e810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e812:	041a      	lsls	r2, r3, #16
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	00db      	lsls	r3, r3, #3
 800e81a:	482d      	ldr	r0, [pc, #180]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e81c:	4684      	mov	ip, r0
 800e81e:	4463      	add	r3, ip
 800e820:	430a      	orrs	r2, r1
 800e822:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800e824:	201a      	movs	r0, #26
 800e826:	183b      	adds	r3, r7, r0
 800e828:	683a      	ldr	r2, [r7, #0]
 800e82a:	8952      	ldrh	r2, [r2, #10]
 800e82c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	6959      	ldr	r1, [r3, #20]
 800e832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e834:	b29c      	uxth	r4, r3
 800e836:	183b      	adds	r3, r7, r0
 800e838:	881a      	ldrh	r2, [r3, #0]
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	0023      	movs	r3, r4
 800e83e:	f000 fe89 	bl	800f554 <USB_WritePMA>
 800e842:	e192      	b.n	800eb6a <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	6a1b      	ldr	r3, [r3, #32]
 800e848:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	009b      	lsls	r3, r3, #2
 800e852:	18d3      	adds	r3, r2, r3
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a1f      	ldr	r2, [pc, #124]	@ (800e8d4 <USB_EPStartXfer+0x6c8>)
 800e858:	4013      	ands	r3, r2
 800e85a:	617b      	str	r3, [r7, #20]
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	18d3      	adds	r3, r2, r3
 800e866:	697a      	ldr	r2, [r7, #20]
 800e868:	491b      	ldr	r1, [pc, #108]	@ (800e8d8 <USB_EPStartXfer+0x6cc>)
 800e86a:	430a      	orrs	r2, r1
 800e86c:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	00db      	lsls	r3, r3, #3
 800e874:	4a16      	ldr	r2, [pc, #88]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e876:	4694      	mov	ip, r2
 800e878:	4463      	add	r3, ip
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	00db      	lsls	r3, r3, #3
 800e882:	4913      	ldr	r1, [pc, #76]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e884:	468c      	mov	ip, r1
 800e886:	4463      	add	r3, ip
 800e888:	0412      	lsls	r2, r2, #16
 800e88a:	0c12      	lsrs	r2, r2, #16
 800e88c:	601a      	str	r2, [r3, #0]
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	00db      	lsls	r3, r3, #3
 800e894:	4a0e      	ldr	r2, [pc, #56]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e896:	4694      	mov	ip, r2
 800e898:	4463      	add	r3, ip
 800e89a:	6819      	ldr	r1, [r3, #0]
 800e89c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e89e:	041a      	lsls	r2, r3, #16
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	00db      	lsls	r3, r3, #3
 800e8a6:	480a      	ldr	r0, [pc, #40]	@ (800e8d0 <USB_EPStartXfer+0x6c4>)
 800e8a8:	4684      	mov	ip, r0
 800e8aa:	4463      	add	r3, ip
 800e8ac:	430a      	orrs	r2, r1
 800e8ae:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e8b0:	201a      	movs	r0, #26
 800e8b2:	183b      	adds	r3, r7, r0
 800e8b4:	683a      	ldr	r2, [r7, #0]
 800e8b6:	8912      	ldrh	r2, [r2, #8]
 800e8b8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	6959      	ldr	r1, [r3, #20]
 800e8be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8c0:	b29c      	uxth	r4, r3
 800e8c2:	183b      	adds	r3, r7, r0
 800e8c4:	881a      	ldrh	r2, [r3, #0]
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	0023      	movs	r3, r4
 800e8ca:	f000 fe43 	bl	800f554 <USB_WritePMA>
 800e8ce:	e14c      	b.n	800eb6a <USB_EPStartXfer+0x95e>
 800e8d0:	40009800 	.word	0x40009800
 800e8d4:	07ff8e8f 	.word	0x07ff8e8f
 800e8d8:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	6a1a      	ldr	r2, [r3, #32]
 800e8e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8e2:	1ad2      	subs	r2, r2, r3
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	009b      	lsls	r3, r3, #2
 800e8f0:	18d3      	adds	r3, r2, r3
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2240      	movs	r2, #64	@ 0x40
 800e8f6:	4013      	ands	r3, r2
 800e8f8:	d100      	bne.n	800e8fc <USB_EPStartXfer+0x6f0>
 800e8fa:	e09b      	b.n	800ea34 <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	785b      	ldrb	r3, [r3, #1]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d162      	bne.n	800e9ca <USB_EPStartXfer+0x7be>
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	00db      	lsls	r3, r3, #3
 800e90a:	4ad6      	ldr	r2, [pc, #856]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800e90c:	4694      	mov	ip, r2
 800e90e:	4463      	add	r3, ip
 800e910:	685a      	ldr	r2, [r3, #4]
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	00db      	lsls	r3, r3, #3
 800e918:	49d2      	ldr	r1, [pc, #840]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800e91a:	468c      	mov	ip, r1
 800e91c:	4463      	add	r3, ip
 800e91e:	0192      	lsls	r2, r2, #6
 800e920:	0992      	lsrs	r2, r2, #6
 800e922:	605a      	str	r2, [r3, #4]
 800e924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e926:	2b3e      	cmp	r3, #62	@ 0x3e
 800e928:	d91e      	bls.n	800e968 <USB_EPStartXfer+0x75c>
 800e92a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e92c:	095b      	lsrs	r3, r3, #5
 800e92e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e932:	221f      	movs	r2, #31
 800e934:	4013      	ands	r3, r2
 800e936:	d102      	bne.n	800e93e <USB_EPStartXfer+0x732>
 800e938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e93a:	3b01      	subs	r3, #1
 800e93c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	00db      	lsls	r3, r3, #3
 800e944:	4ac7      	ldr	r2, [pc, #796]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800e946:	4694      	mov	ip, r2
 800e948:	4463      	add	r3, ip
 800e94a:	685a      	ldr	r2, [r3, #4]
 800e94c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e94e:	069b      	lsls	r3, r3, #26
 800e950:	431a      	orrs	r2, r3
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	00db      	lsls	r3, r3, #3
 800e958:	49c2      	ldr	r1, [pc, #776]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800e95a:	468c      	mov	ip, r1
 800e95c:	4463      	add	r3, ip
 800e95e:	2180      	movs	r1, #128	@ 0x80
 800e960:	0609      	lsls	r1, r1, #24
 800e962:	430a      	orrs	r2, r1
 800e964:	605a      	str	r2, [r3, #4]
 800e966:	e055      	b.n	800ea14 <USB_EPStartXfer+0x808>
 800e968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d111      	bne.n	800e992 <USB_EPStartXfer+0x786>
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	00db      	lsls	r3, r3, #3
 800e974:	4abb      	ldr	r2, [pc, #748]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800e976:	4694      	mov	ip, r2
 800e978:	4463      	add	r3, ip
 800e97a:	685a      	ldr	r2, [r3, #4]
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	00db      	lsls	r3, r3, #3
 800e982:	49b8      	ldr	r1, [pc, #736]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800e984:	468c      	mov	ip, r1
 800e986:	4463      	add	r3, ip
 800e988:	2180      	movs	r1, #128	@ 0x80
 800e98a:	0609      	lsls	r1, r1, #24
 800e98c:	430a      	orrs	r2, r1
 800e98e:	605a      	str	r2, [r3, #4]
 800e990:	e040      	b.n	800ea14 <USB_EPStartXfer+0x808>
 800e992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e994:	085b      	lsrs	r3, r3, #1
 800e996:	643b      	str	r3, [r7, #64]	@ 0x40
 800e998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e99a:	2201      	movs	r2, #1
 800e99c:	4013      	ands	r3, r2
 800e99e:	d002      	beq.n	800e9a6 <USB_EPStartXfer+0x79a>
 800e9a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	00db      	lsls	r3, r3, #3
 800e9ac:	4aad      	ldr	r2, [pc, #692]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800e9ae:	4694      	mov	ip, r2
 800e9b0:	4463      	add	r3, ip
 800e9b2:	6859      	ldr	r1, [r3, #4]
 800e9b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9b6:	069a      	lsls	r2, r3, #26
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	00db      	lsls	r3, r3, #3
 800e9be:	48a9      	ldr	r0, [pc, #676]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800e9c0:	4684      	mov	ip, r0
 800e9c2:	4463      	add	r3, ip
 800e9c4:	430a      	orrs	r2, r1
 800e9c6:	605a      	str	r2, [r3, #4]
 800e9c8:	e024      	b.n	800ea14 <USB_EPStartXfer+0x808>
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	785b      	ldrb	r3, [r3, #1]
 800e9ce:	2b01      	cmp	r3, #1
 800e9d0:	d120      	bne.n	800ea14 <USB_EPStartXfer+0x808>
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	00db      	lsls	r3, r3, #3
 800e9d8:	4aa2      	ldr	r2, [pc, #648]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800e9da:	4694      	mov	ip, r2
 800e9dc:	4463      	add	r3, ip
 800e9de:	685a      	ldr	r2, [r3, #4]
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	00db      	lsls	r3, r3, #3
 800e9e6:	499f      	ldr	r1, [pc, #636]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800e9e8:	468c      	mov	ip, r1
 800e9ea:	4463      	add	r3, ip
 800e9ec:	0412      	lsls	r2, r2, #16
 800e9ee:	0c12      	lsrs	r2, r2, #16
 800e9f0:	605a      	str	r2, [r3, #4]
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	00db      	lsls	r3, r3, #3
 800e9f8:	4a9a      	ldr	r2, [pc, #616]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800e9fa:	4694      	mov	ip, r2
 800e9fc:	4463      	add	r3, ip
 800e9fe:	6859      	ldr	r1, [r3, #4]
 800ea00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea02:	041a      	lsls	r2, r3, #16
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	00db      	lsls	r3, r3, #3
 800ea0a:	4896      	ldr	r0, [pc, #600]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800ea0c:	4684      	mov	ip, r0
 800ea0e:	4463      	add	r3, ip
 800ea10:	430a      	orrs	r2, r1
 800ea12:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800ea14:	201a      	movs	r0, #26
 800ea16:	183b      	adds	r3, r7, r0
 800ea18:	683a      	ldr	r2, [r7, #0]
 800ea1a:	8952      	ldrh	r2, [r2, #10]
 800ea1c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	6959      	ldr	r1, [r3, #20]
 800ea22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea24:	b29c      	uxth	r4, r3
 800ea26:	183b      	adds	r3, r7, r0
 800ea28:	881a      	ldrh	r2, [r3, #0]
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	0023      	movs	r3, r4
 800ea2e:	f000 fd91 	bl	800f554 <USB_WritePMA>
 800ea32:	e09a      	b.n	800eb6a <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	785b      	ldrb	r3, [r3, #1]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d162      	bne.n	800eb02 <USB_EPStartXfer+0x8f6>
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	00db      	lsls	r3, r3, #3
 800ea42:	4a88      	ldr	r2, [pc, #544]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800ea44:	4694      	mov	ip, r2
 800ea46:	4463      	add	r3, ip
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	00db      	lsls	r3, r3, #3
 800ea50:	4984      	ldr	r1, [pc, #528]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800ea52:	468c      	mov	ip, r1
 800ea54:	4463      	add	r3, ip
 800ea56:	0192      	lsls	r2, r2, #6
 800ea58:	0992      	lsrs	r2, r2, #6
 800ea5a:	601a      	str	r2, [r3, #0]
 800ea5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea5e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ea60:	d91e      	bls.n	800eaa0 <USB_EPStartXfer+0x894>
 800ea62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea64:	095b      	lsrs	r3, r3, #5
 800ea66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ea68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea6a:	221f      	movs	r2, #31
 800ea6c:	4013      	ands	r3, r2
 800ea6e:	d102      	bne.n	800ea76 <USB_EPStartXfer+0x86a>
 800ea70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea72:	3b01      	subs	r3, #1
 800ea74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	00db      	lsls	r3, r3, #3
 800ea7c:	4a79      	ldr	r2, [pc, #484]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800ea7e:	4694      	mov	ip, r2
 800ea80:	4463      	add	r3, ip
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea86:	069b      	lsls	r3, r3, #26
 800ea88:	431a      	orrs	r2, r3
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	00db      	lsls	r3, r3, #3
 800ea90:	4974      	ldr	r1, [pc, #464]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800ea92:	468c      	mov	ip, r1
 800ea94:	4463      	add	r3, ip
 800ea96:	2180      	movs	r1, #128	@ 0x80
 800ea98:	0609      	lsls	r1, r1, #24
 800ea9a:	430a      	orrs	r2, r1
 800ea9c:	601a      	str	r2, [r3, #0]
 800ea9e:	e055      	b.n	800eb4c <USB_EPStartXfer+0x940>
 800eaa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d111      	bne.n	800eaca <USB_EPStartXfer+0x8be>
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	00db      	lsls	r3, r3, #3
 800eaac:	4a6d      	ldr	r2, [pc, #436]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800eaae:	4694      	mov	ip, r2
 800eab0:	4463      	add	r3, ip
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	00db      	lsls	r3, r3, #3
 800eaba:	496a      	ldr	r1, [pc, #424]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800eabc:	468c      	mov	ip, r1
 800eabe:	4463      	add	r3, ip
 800eac0:	2180      	movs	r1, #128	@ 0x80
 800eac2:	0609      	lsls	r1, r1, #24
 800eac4:	430a      	orrs	r2, r1
 800eac6:	601a      	str	r2, [r3, #0]
 800eac8:	e040      	b.n	800eb4c <USB_EPStartXfer+0x940>
 800eaca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eacc:	085b      	lsrs	r3, r3, #1
 800eace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ead0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ead2:	2201      	movs	r2, #1
 800ead4:	4013      	ands	r3, r2
 800ead6:	d002      	beq.n	800eade <USB_EPStartXfer+0x8d2>
 800ead8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eada:	3301      	adds	r3, #1
 800eadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	781b      	ldrb	r3, [r3, #0]
 800eae2:	00db      	lsls	r3, r3, #3
 800eae4:	4a5f      	ldr	r2, [pc, #380]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800eae6:	4694      	mov	ip, r2
 800eae8:	4463      	add	r3, ip
 800eaea:	6819      	ldr	r1, [r3, #0]
 800eaec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eaee:	069a      	lsls	r2, r3, #26
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	00db      	lsls	r3, r3, #3
 800eaf6:	485b      	ldr	r0, [pc, #364]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800eaf8:	4684      	mov	ip, r0
 800eafa:	4463      	add	r3, ip
 800eafc:	430a      	orrs	r2, r1
 800eafe:	601a      	str	r2, [r3, #0]
 800eb00:	e024      	b.n	800eb4c <USB_EPStartXfer+0x940>
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	785b      	ldrb	r3, [r3, #1]
 800eb06:	2b01      	cmp	r3, #1
 800eb08:	d120      	bne.n	800eb4c <USB_EPStartXfer+0x940>
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	00db      	lsls	r3, r3, #3
 800eb10:	4a54      	ldr	r2, [pc, #336]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800eb12:	4694      	mov	ip, r2
 800eb14:	4463      	add	r3, ip
 800eb16:	681a      	ldr	r2, [r3, #0]
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	00db      	lsls	r3, r3, #3
 800eb1e:	4951      	ldr	r1, [pc, #324]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800eb20:	468c      	mov	ip, r1
 800eb22:	4463      	add	r3, ip
 800eb24:	0412      	lsls	r2, r2, #16
 800eb26:	0c12      	lsrs	r2, r2, #16
 800eb28:	601a      	str	r2, [r3, #0]
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	00db      	lsls	r3, r3, #3
 800eb30:	4a4c      	ldr	r2, [pc, #304]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800eb32:	4694      	mov	ip, r2
 800eb34:	4463      	add	r3, ip
 800eb36:	6819      	ldr	r1, [r3, #0]
 800eb38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb3a:	041a      	lsls	r2, r3, #16
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	00db      	lsls	r3, r3, #3
 800eb42:	4848      	ldr	r0, [pc, #288]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800eb44:	4684      	mov	ip, r0
 800eb46:	4463      	add	r3, ip
 800eb48:	430a      	orrs	r2, r1
 800eb4a:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800eb4c:	201a      	movs	r0, #26
 800eb4e:	183b      	adds	r3, r7, r0
 800eb50:	683a      	ldr	r2, [r7, #0]
 800eb52:	8912      	ldrh	r2, [r2, #8]
 800eb54:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	6959      	ldr	r1, [r3, #20]
 800eb5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb5c:	b29c      	uxth	r4, r3
 800eb5e:	183b      	adds	r3, r7, r0
 800eb60:	881a      	ldrh	r2, [r3, #0]
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	0023      	movs	r3, r4
 800eb66:	f000 fcf5 	bl	800f554 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	009b      	lsls	r3, r3, #2
 800eb72:	18d3      	adds	r3, r2, r3
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4a3c      	ldr	r2, [pc, #240]	@ (800ec68 <USB_EPStartXfer+0xa5c>)
 800eb78:	4013      	ands	r3, r2
 800eb7a:	60fb      	str	r3, [r7, #12]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2210      	movs	r2, #16
 800eb80:	4053      	eors	r3, r2
 800eb82:	60fb      	str	r3, [r7, #12]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2220      	movs	r2, #32
 800eb88:	4053      	eors	r3, r2
 800eb8a:	60fb      	str	r3, [r7, #12]
 800eb8c:	687a      	ldr	r2, [r7, #4]
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	18d3      	adds	r3, r2, r3
 800eb96:	68fa      	ldr	r2, [r7, #12]
 800eb98:	4934      	ldr	r1, [pc, #208]	@ (800ec6c <USB_EPStartXfer+0xa60>)
 800eb9a:	430a      	orrs	r2, r1
 800eb9c:	601a      	str	r2, [r3, #0]
 800eb9e:	e340      	b.n	800f222 <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	7b1b      	ldrb	r3, [r3, #12]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d000      	beq.n	800ebaa <USB_EPStartXfer+0x99e>
 800eba8:	e07e      	b.n	800eca8 <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	699a      	ldr	r2, [r3, #24]
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	691b      	ldr	r3, [r3, #16]
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d909      	bls.n	800ebca <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	691b      	ldr	r3, [r3, #16]
 800ebba:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	699a      	ldr	r2, [r3, #24]
 800ebc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebc2:	1ad2      	subs	r2, r2, r3
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	619a      	str	r2, [r3, #24]
 800ebc8:	e005      	b.n	800ebd6 <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	699b      	ldr	r3, [r3, #24]
 800ebce:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	00db      	lsls	r3, r3, #3
 800ebdc:	4a21      	ldr	r2, [pc, #132]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800ebde:	4694      	mov	ip, r2
 800ebe0:	4463      	add	r3, ip
 800ebe2:	685a      	ldr	r2, [r3, #4]
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	00db      	lsls	r3, r3, #3
 800ebea:	491e      	ldr	r1, [pc, #120]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800ebec:	468c      	mov	ip, r1
 800ebee:	4463      	add	r3, ip
 800ebf0:	0192      	lsls	r2, r2, #6
 800ebf2:	0992      	lsrs	r2, r2, #6
 800ebf4:	605a      	str	r2, [r3, #4]
 800ebf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebf8:	2b3e      	cmp	r3, #62	@ 0x3e
 800ebfa:	d91e      	bls.n	800ec3a <USB_EPStartXfer+0xa2e>
 800ebfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebfe:	095b      	lsrs	r3, r3, #5
 800ec00:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ec02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec04:	221f      	movs	r2, #31
 800ec06:	4013      	ands	r3, r2
 800ec08:	d102      	bne.n	800ec10 <USB_EPStartXfer+0xa04>
 800ec0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec0c:	3b01      	subs	r3, #1
 800ec0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	00db      	lsls	r3, r3, #3
 800ec16:	4a13      	ldr	r2, [pc, #76]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800ec18:	4694      	mov	ip, r2
 800ec1a:	4463      	add	r3, ip
 800ec1c:	685a      	ldr	r2, [r3, #4]
 800ec1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec20:	069b      	lsls	r3, r3, #26
 800ec22:	431a      	orrs	r2, r3
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	00db      	lsls	r3, r3, #3
 800ec2a:	490e      	ldr	r1, [pc, #56]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800ec2c:	468c      	mov	ip, r1
 800ec2e:	4463      	add	r3, ip
 800ec30:	2180      	movs	r1, #128	@ 0x80
 800ec32:	0609      	lsls	r1, r1, #24
 800ec34:	430a      	orrs	r2, r1
 800ec36:	605a      	str	r2, [r3, #4]
 800ec38:	e2d7      	b.n	800f1ea <USB_EPStartXfer+0xfde>
 800ec3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d117      	bne.n	800ec70 <USB_EPStartXfer+0xa64>
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	781b      	ldrb	r3, [r3, #0]
 800ec44:	00db      	lsls	r3, r3, #3
 800ec46:	4a07      	ldr	r2, [pc, #28]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800ec48:	4694      	mov	ip, r2
 800ec4a:	4463      	add	r3, ip
 800ec4c:	685a      	ldr	r2, [r3, #4]
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	00db      	lsls	r3, r3, #3
 800ec54:	4903      	ldr	r1, [pc, #12]	@ (800ec64 <USB_EPStartXfer+0xa58>)
 800ec56:	468c      	mov	ip, r1
 800ec58:	4463      	add	r3, ip
 800ec5a:	2180      	movs	r1, #128	@ 0x80
 800ec5c:	0609      	lsls	r1, r1, #24
 800ec5e:	430a      	orrs	r2, r1
 800ec60:	605a      	str	r2, [r3, #4]
 800ec62:	e2c2      	b.n	800f1ea <USB_EPStartXfer+0xfde>
 800ec64:	40009800 	.word	0x40009800
 800ec68:	07ff8fbf 	.word	0x07ff8fbf
 800ec6c:	00008080 	.word	0x00008080
 800ec70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec72:	085b      	lsrs	r3, r3, #1
 800ec74:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ec76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec78:	2201      	movs	r2, #1
 800ec7a:	4013      	ands	r3, r2
 800ec7c:	d002      	beq.n	800ec84 <USB_EPStartXfer+0xa78>
 800ec7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec80:	3301      	adds	r3, #1
 800ec82:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	00db      	lsls	r3, r3, #3
 800ec8a:	4ac4      	ldr	r2, [pc, #784]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ec8c:	4694      	mov	ip, r2
 800ec8e:	4463      	add	r3, ip
 800ec90:	6859      	ldr	r1, [r3, #4]
 800ec92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec94:	069a      	lsls	r2, r3, #26
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	00db      	lsls	r3, r3, #3
 800ec9c:	48bf      	ldr	r0, [pc, #764]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ec9e:	4684      	mov	ip, r0
 800eca0:	4463      	add	r3, ip
 800eca2:	430a      	orrs	r2, r1
 800eca4:	605a      	str	r2, [r3, #4]
 800eca6:	e2a0      	b.n	800f1ea <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	78db      	ldrb	r3, [r3, #3]
 800ecac:	2b02      	cmp	r3, #2
 800ecae:	d000      	beq.n	800ecb2 <USB_EPStartXfer+0xaa6>
 800ecb0:	e15f      	b.n	800ef72 <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	785b      	ldrb	r3, [r3, #1]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d168      	bne.n	800ed8c <USB_EPStartXfer+0xb80>
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	00db      	lsls	r3, r3, #3
 800ecc0:	4ab6      	ldr	r2, [pc, #728]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ecc2:	4694      	mov	ip, r2
 800ecc4:	4463      	add	r3, ip
 800ecc6:	681a      	ldr	r2, [r3, #0]
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	781b      	ldrb	r3, [r3, #0]
 800eccc:	00db      	lsls	r3, r3, #3
 800ecce:	49b3      	ldr	r1, [pc, #716]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ecd0:	468c      	mov	ip, r1
 800ecd2:	4463      	add	r3, ip
 800ecd4:	0192      	lsls	r2, r2, #6
 800ecd6:	0992      	lsrs	r2, r2, #6
 800ecd8:	601a      	str	r2, [r3, #0]
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	691b      	ldr	r3, [r3, #16]
 800ecde:	2b3e      	cmp	r3, #62	@ 0x3e
 800ece0:	d920      	bls.n	800ed24 <USB_EPStartXfer+0xb18>
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	691b      	ldr	r3, [r3, #16]
 800ece6:	095b      	lsrs	r3, r3, #5
 800ece8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	691b      	ldr	r3, [r3, #16]
 800ecee:	221f      	movs	r2, #31
 800ecf0:	4013      	ands	r3, r2
 800ecf2:	d102      	bne.n	800ecfa <USB_EPStartXfer+0xaee>
 800ecf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecf6:	3b01      	subs	r3, #1
 800ecf8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	781b      	ldrb	r3, [r3, #0]
 800ecfe:	00db      	lsls	r3, r3, #3
 800ed00:	4aa6      	ldr	r2, [pc, #664]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ed02:	4694      	mov	ip, r2
 800ed04:	4463      	add	r3, ip
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed0a:	069b      	lsls	r3, r3, #26
 800ed0c:	431a      	orrs	r2, r3
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	00db      	lsls	r3, r3, #3
 800ed14:	49a1      	ldr	r1, [pc, #644]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ed16:	468c      	mov	ip, r1
 800ed18:	4463      	add	r3, ip
 800ed1a:	2180      	movs	r1, #128	@ 0x80
 800ed1c:	0609      	lsls	r1, r1, #24
 800ed1e:	430a      	orrs	r2, r1
 800ed20:	601a      	str	r2, [r3, #0]
 800ed22:	e059      	b.n	800edd8 <USB_EPStartXfer+0xbcc>
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	691b      	ldr	r3, [r3, #16]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d111      	bne.n	800ed50 <USB_EPStartXfer+0xb44>
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	00db      	lsls	r3, r3, #3
 800ed32:	4a9a      	ldr	r2, [pc, #616]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ed34:	4694      	mov	ip, r2
 800ed36:	4463      	add	r3, ip
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	00db      	lsls	r3, r3, #3
 800ed40:	4996      	ldr	r1, [pc, #600]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ed42:	468c      	mov	ip, r1
 800ed44:	4463      	add	r3, ip
 800ed46:	2180      	movs	r1, #128	@ 0x80
 800ed48:	0609      	lsls	r1, r1, #24
 800ed4a:	430a      	orrs	r2, r1
 800ed4c:	601a      	str	r2, [r3, #0]
 800ed4e:	e043      	b.n	800edd8 <USB_EPStartXfer+0xbcc>
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	691b      	ldr	r3, [r3, #16]
 800ed54:	085b      	lsrs	r3, r3, #1
 800ed56:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	691b      	ldr	r3, [r3, #16]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	4013      	ands	r3, r2
 800ed60:	d002      	beq.n	800ed68 <USB_EPStartXfer+0xb5c>
 800ed62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed64:	3301      	adds	r3, #1
 800ed66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	00db      	lsls	r3, r3, #3
 800ed6e:	4a8b      	ldr	r2, [pc, #556]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ed70:	4694      	mov	ip, r2
 800ed72:	4463      	add	r3, ip
 800ed74:	6819      	ldr	r1, [r3, #0]
 800ed76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed78:	069a      	lsls	r2, r3, #26
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	00db      	lsls	r3, r3, #3
 800ed80:	4886      	ldr	r0, [pc, #536]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ed82:	4684      	mov	ip, r0
 800ed84:	4463      	add	r3, ip
 800ed86:	430a      	orrs	r2, r1
 800ed88:	601a      	str	r2, [r3, #0]
 800ed8a:	e025      	b.n	800edd8 <USB_EPStartXfer+0xbcc>
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	785b      	ldrb	r3, [r3, #1]
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d121      	bne.n	800edd8 <USB_EPStartXfer+0xbcc>
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	00db      	lsls	r3, r3, #3
 800ed9a:	4a80      	ldr	r2, [pc, #512]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ed9c:	4694      	mov	ip, r2
 800ed9e:	4463      	add	r3, ip
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	00db      	lsls	r3, r3, #3
 800eda8:	497c      	ldr	r1, [pc, #496]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800edaa:	468c      	mov	ip, r1
 800edac:	4463      	add	r3, ip
 800edae:	0412      	lsls	r2, r2, #16
 800edb0:	0c12      	lsrs	r2, r2, #16
 800edb2:	601a      	str	r2, [r3, #0]
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	00db      	lsls	r3, r3, #3
 800edba:	4a78      	ldr	r2, [pc, #480]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800edbc:	4694      	mov	ip, r2
 800edbe:	4463      	add	r3, ip
 800edc0:	6819      	ldr	r1, [r3, #0]
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	691b      	ldr	r3, [r3, #16]
 800edc6:	041a      	lsls	r2, r3, #16
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	00db      	lsls	r3, r3, #3
 800edce:	4873      	ldr	r0, [pc, #460]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800edd0:	4684      	mov	ip, r0
 800edd2:	4463      	add	r3, ip
 800edd4:	430a      	orrs	r2, r1
 800edd6:	601a      	str	r2, [r3, #0]
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	785b      	ldrb	r3, [r3, #1]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d168      	bne.n	800eeb2 <USB_EPStartXfer+0xca6>
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	00db      	lsls	r3, r3, #3
 800ede6:	4a6d      	ldr	r2, [pc, #436]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ede8:	4694      	mov	ip, r2
 800edea:	4463      	add	r3, ip
 800edec:	685a      	ldr	r2, [r3, #4]
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	00db      	lsls	r3, r3, #3
 800edf4:	4969      	ldr	r1, [pc, #420]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800edf6:	468c      	mov	ip, r1
 800edf8:	4463      	add	r3, ip
 800edfa:	0192      	lsls	r2, r2, #6
 800edfc:	0992      	lsrs	r2, r2, #6
 800edfe:	605a      	str	r2, [r3, #4]
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	691b      	ldr	r3, [r3, #16]
 800ee04:	2b3e      	cmp	r3, #62	@ 0x3e
 800ee06:	d920      	bls.n	800ee4a <USB_EPStartXfer+0xc3e>
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	691b      	ldr	r3, [r3, #16]
 800ee0c:	095b      	lsrs	r3, r3, #5
 800ee0e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	691b      	ldr	r3, [r3, #16]
 800ee14:	221f      	movs	r2, #31
 800ee16:	4013      	ands	r3, r2
 800ee18:	d102      	bne.n	800ee20 <USB_EPStartXfer+0xc14>
 800ee1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee1c:	3b01      	subs	r3, #1
 800ee1e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	00db      	lsls	r3, r3, #3
 800ee26:	4a5d      	ldr	r2, [pc, #372]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ee28:	4694      	mov	ip, r2
 800ee2a:	4463      	add	r3, ip
 800ee2c:	685a      	ldr	r2, [r3, #4]
 800ee2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee30:	069b      	lsls	r3, r3, #26
 800ee32:	431a      	orrs	r2, r3
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	00db      	lsls	r3, r3, #3
 800ee3a:	4958      	ldr	r1, [pc, #352]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ee3c:	468c      	mov	ip, r1
 800ee3e:	4463      	add	r3, ip
 800ee40:	2180      	movs	r1, #128	@ 0x80
 800ee42:	0609      	lsls	r1, r1, #24
 800ee44:	430a      	orrs	r2, r1
 800ee46:	605a      	str	r2, [r3, #4]
 800ee48:	e059      	b.n	800eefe <USB_EPStartXfer+0xcf2>
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	691b      	ldr	r3, [r3, #16]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d111      	bne.n	800ee76 <USB_EPStartXfer+0xc6a>
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	00db      	lsls	r3, r3, #3
 800ee58:	4a50      	ldr	r2, [pc, #320]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ee5a:	4694      	mov	ip, r2
 800ee5c:	4463      	add	r3, ip
 800ee5e:	685a      	ldr	r2, [r3, #4]
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	00db      	lsls	r3, r3, #3
 800ee66:	494d      	ldr	r1, [pc, #308]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ee68:	468c      	mov	ip, r1
 800ee6a:	4463      	add	r3, ip
 800ee6c:	2180      	movs	r1, #128	@ 0x80
 800ee6e:	0609      	lsls	r1, r1, #24
 800ee70:	430a      	orrs	r2, r1
 800ee72:	605a      	str	r2, [r3, #4]
 800ee74:	e043      	b.n	800eefe <USB_EPStartXfer+0xcf2>
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	691b      	ldr	r3, [r3, #16]
 800ee7a:	085b      	lsrs	r3, r3, #1
 800ee7c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	691b      	ldr	r3, [r3, #16]
 800ee82:	2201      	movs	r2, #1
 800ee84:	4013      	ands	r3, r2
 800ee86:	d002      	beq.n	800ee8e <USB_EPStartXfer+0xc82>
 800ee88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	00db      	lsls	r3, r3, #3
 800ee94:	4a41      	ldr	r2, [pc, #260]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800ee96:	4694      	mov	ip, r2
 800ee98:	4463      	add	r3, ip
 800ee9a:	6859      	ldr	r1, [r3, #4]
 800ee9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee9e:	069a      	lsls	r2, r3, #26
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	00db      	lsls	r3, r3, #3
 800eea6:	483d      	ldr	r0, [pc, #244]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800eea8:	4684      	mov	ip, r0
 800eeaa:	4463      	add	r3, ip
 800eeac:	430a      	orrs	r2, r1
 800eeae:	605a      	str	r2, [r3, #4]
 800eeb0:	e025      	b.n	800eefe <USB_EPStartXfer+0xcf2>
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	785b      	ldrb	r3, [r3, #1]
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d121      	bne.n	800eefe <USB_EPStartXfer+0xcf2>
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	00db      	lsls	r3, r3, #3
 800eec0:	4a36      	ldr	r2, [pc, #216]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800eec2:	4694      	mov	ip, r2
 800eec4:	4463      	add	r3, ip
 800eec6:	685a      	ldr	r2, [r3, #4]
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	00db      	lsls	r3, r3, #3
 800eece:	4933      	ldr	r1, [pc, #204]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800eed0:	468c      	mov	ip, r1
 800eed2:	4463      	add	r3, ip
 800eed4:	0412      	lsls	r2, r2, #16
 800eed6:	0c12      	lsrs	r2, r2, #16
 800eed8:	605a      	str	r2, [r3, #4]
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	00db      	lsls	r3, r3, #3
 800eee0:	4a2e      	ldr	r2, [pc, #184]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800eee2:	4694      	mov	ip, r2
 800eee4:	4463      	add	r3, ip
 800eee6:	6859      	ldr	r1, [r3, #4]
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	691b      	ldr	r3, [r3, #16]
 800eeec:	041a      	lsls	r2, r3, #16
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	00db      	lsls	r3, r3, #3
 800eef4:	4829      	ldr	r0, [pc, #164]	@ (800ef9c <USB_EPStartXfer+0xd90>)
 800eef6:	4684      	mov	ip, r0
 800eef8:	4463      	add	r3, ip
 800eefa:	430a      	orrs	r2, r1
 800eefc:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	69db      	ldr	r3, [r3, #28]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d100      	bne.n	800ef08 <USB_EPStartXfer+0xcfc>
 800ef06:	e170      	b.n	800f1ea <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	18d3      	adds	r3, r2, r3
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	2126      	movs	r1, #38	@ 0x26
 800ef16:	187b      	adds	r3, r7, r1
 800ef18:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ef1a:	187b      	adds	r3, r7, r1
 800ef1c:	881a      	ldrh	r2, [r3, #0]
 800ef1e:	2380      	movs	r3, #128	@ 0x80
 800ef20:	01db      	lsls	r3, r3, #7
 800ef22:	4013      	ands	r3, r2
 800ef24:	d004      	beq.n	800ef30 <USB_EPStartXfer+0xd24>
 800ef26:	187b      	adds	r3, r7, r1
 800ef28:	881b      	ldrh	r3, [r3, #0]
 800ef2a:	2240      	movs	r2, #64	@ 0x40
 800ef2c:	4013      	ands	r3, r2
 800ef2e:	d10d      	bne.n	800ef4c <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ef30:	2126      	movs	r1, #38	@ 0x26
 800ef32:	187b      	adds	r3, r7, r1
 800ef34:	881a      	ldrh	r2, [r3, #0]
 800ef36:	2380      	movs	r3, #128	@ 0x80
 800ef38:	01db      	lsls	r3, r3, #7
 800ef3a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ef3c:	d000      	beq.n	800ef40 <USB_EPStartXfer+0xd34>
 800ef3e:	e154      	b.n	800f1ea <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ef40:	187b      	adds	r3, r7, r1
 800ef42:	881b      	ldrh	r3, [r3, #0]
 800ef44:	2240      	movs	r2, #64	@ 0x40
 800ef46:	4013      	ands	r3, r2
 800ef48:	d000      	beq.n	800ef4c <USB_EPStartXfer+0xd40>
 800ef4a:	e14e      	b.n	800f1ea <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ef4c:	687a      	ldr	r2, [r7, #4]
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	009b      	lsls	r3, r3, #2
 800ef54:	18d3      	adds	r3, r2, r3
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4a11      	ldr	r2, [pc, #68]	@ (800efa0 <USB_EPStartXfer+0xd94>)
 800ef5a:	4013      	ands	r3, r2
 800ef5c:	623b      	str	r3, [r7, #32]
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	18d3      	adds	r3, r2, r3
 800ef68:	6a3a      	ldr	r2, [r7, #32]
 800ef6a:	490e      	ldr	r1, [pc, #56]	@ (800efa4 <USB_EPStartXfer+0xd98>)
 800ef6c:	430a      	orrs	r2, r1
 800ef6e:	601a      	str	r2, [r3, #0]
 800ef70:	e13b      	b.n	800f1ea <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	78db      	ldrb	r3, [r3, #3]
 800ef76:	2b01      	cmp	r3, #1
 800ef78:	d000      	beq.n	800ef7c <USB_EPStartXfer+0xd70>
 800ef7a:	e134      	b.n	800f1e6 <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	699a      	ldr	r2, [r3, #24]
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	691b      	ldr	r3, [r3, #16]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d90f      	bls.n	800efa8 <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	691b      	ldr	r3, [r3, #16]
 800ef8c:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	699a      	ldr	r2, [r3, #24]
 800ef92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef94:	1ad2      	subs	r2, r2, r3
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	619a      	str	r2, [r3, #24]
 800ef9a:	e00b      	b.n	800efb4 <USB_EPStartXfer+0xda8>
 800ef9c:	40009800 	.word	0x40009800
 800efa0:	07ff8f8f 	.word	0x07ff8f8f
 800efa4:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	699b      	ldr	r3, [r3, #24]
 800efac:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	2200      	movs	r2, #0
 800efb2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	785b      	ldrb	r3, [r3, #1]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d162      	bne.n	800f082 <USB_EPStartXfer+0xe76>
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	781b      	ldrb	r3, [r3, #0]
 800efc0:	00db      	lsls	r3, r3, #3
 800efc2:	4a9a      	ldr	r2, [pc, #616]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800efc4:	4694      	mov	ip, r2
 800efc6:	4463      	add	r3, ip
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	00db      	lsls	r3, r3, #3
 800efd0:	4996      	ldr	r1, [pc, #600]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800efd2:	468c      	mov	ip, r1
 800efd4:	4463      	add	r3, ip
 800efd6:	0192      	lsls	r2, r2, #6
 800efd8:	0992      	lsrs	r2, r2, #6
 800efda:	601a      	str	r2, [r3, #0]
 800efdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efde:	2b3e      	cmp	r3, #62	@ 0x3e
 800efe0:	d91e      	bls.n	800f020 <USB_EPStartXfer+0xe14>
 800efe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efe4:	095b      	lsrs	r3, r3, #5
 800efe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800efe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efea:	221f      	movs	r2, #31
 800efec:	4013      	ands	r3, r2
 800efee:	d102      	bne.n	800eff6 <USB_EPStartXfer+0xdea>
 800eff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eff2:	3b01      	subs	r3, #1
 800eff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	781b      	ldrb	r3, [r3, #0]
 800effa:	00db      	lsls	r3, r3, #3
 800effc:	4a8b      	ldr	r2, [pc, #556]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800effe:	4694      	mov	ip, r2
 800f000:	4463      	add	r3, ip
 800f002:	681a      	ldr	r2, [r3, #0]
 800f004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f006:	069b      	lsls	r3, r3, #26
 800f008:	431a      	orrs	r2, r3
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	00db      	lsls	r3, r3, #3
 800f010:	4986      	ldr	r1, [pc, #536]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f012:	468c      	mov	ip, r1
 800f014:	4463      	add	r3, ip
 800f016:	2180      	movs	r1, #128	@ 0x80
 800f018:	0609      	lsls	r1, r1, #24
 800f01a:	430a      	orrs	r2, r1
 800f01c:	601a      	str	r2, [r3, #0]
 800f01e:	e055      	b.n	800f0cc <USB_EPStartXfer+0xec0>
 800f020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f022:	2b00      	cmp	r3, #0
 800f024:	d111      	bne.n	800f04a <USB_EPStartXfer+0xe3e>
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	00db      	lsls	r3, r3, #3
 800f02c:	4a7f      	ldr	r2, [pc, #508]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f02e:	4694      	mov	ip, r2
 800f030:	4463      	add	r3, ip
 800f032:	681a      	ldr	r2, [r3, #0]
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	00db      	lsls	r3, r3, #3
 800f03a:	497c      	ldr	r1, [pc, #496]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f03c:	468c      	mov	ip, r1
 800f03e:	4463      	add	r3, ip
 800f040:	2180      	movs	r1, #128	@ 0x80
 800f042:	0609      	lsls	r1, r1, #24
 800f044:	430a      	orrs	r2, r1
 800f046:	601a      	str	r2, [r3, #0]
 800f048:	e040      	b.n	800f0cc <USB_EPStartXfer+0xec0>
 800f04a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f04c:	085b      	lsrs	r3, r3, #1
 800f04e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f052:	2201      	movs	r2, #1
 800f054:	4013      	ands	r3, r2
 800f056:	d002      	beq.n	800f05e <USB_EPStartXfer+0xe52>
 800f058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f05a:	3301      	adds	r3, #1
 800f05c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	00db      	lsls	r3, r3, #3
 800f064:	4a71      	ldr	r2, [pc, #452]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f066:	4694      	mov	ip, r2
 800f068:	4463      	add	r3, ip
 800f06a:	6819      	ldr	r1, [r3, #0]
 800f06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f06e:	069a      	lsls	r2, r3, #26
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	00db      	lsls	r3, r3, #3
 800f076:	486d      	ldr	r0, [pc, #436]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f078:	4684      	mov	ip, r0
 800f07a:	4463      	add	r3, ip
 800f07c:	430a      	orrs	r2, r1
 800f07e:	601a      	str	r2, [r3, #0]
 800f080:	e024      	b.n	800f0cc <USB_EPStartXfer+0xec0>
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	785b      	ldrb	r3, [r3, #1]
 800f086:	2b01      	cmp	r3, #1
 800f088:	d120      	bne.n	800f0cc <USB_EPStartXfer+0xec0>
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	00db      	lsls	r3, r3, #3
 800f090:	4a66      	ldr	r2, [pc, #408]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f092:	4694      	mov	ip, r2
 800f094:	4463      	add	r3, ip
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	00db      	lsls	r3, r3, #3
 800f09e:	4963      	ldr	r1, [pc, #396]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f0a0:	468c      	mov	ip, r1
 800f0a2:	4463      	add	r3, ip
 800f0a4:	0412      	lsls	r2, r2, #16
 800f0a6:	0c12      	lsrs	r2, r2, #16
 800f0a8:	601a      	str	r2, [r3, #0]
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	00db      	lsls	r3, r3, #3
 800f0b0:	4a5e      	ldr	r2, [pc, #376]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f0b2:	4694      	mov	ip, r2
 800f0b4:	4463      	add	r3, ip
 800f0b6:	6819      	ldr	r1, [r3, #0]
 800f0b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0ba:	041a      	lsls	r2, r3, #16
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	00db      	lsls	r3, r3, #3
 800f0c2:	485a      	ldr	r0, [pc, #360]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f0c4:	4684      	mov	ip, r0
 800f0c6:	4463      	add	r3, ip
 800f0c8:	430a      	orrs	r2, r1
 800f0ca:	601a      	str	r2, [r3, #0]
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	785b      	ldrb	r3, [r3, #1]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d162      	bne.n	800f19a <USB_EPStartXfer+0xf8e>
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	00db      	lsls	r3, r3, #3
 800f0da:	4a54      	ldr	r2, [pc, #336]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f0dc:	4694      	mov	ip, r2
 800f0de:	4463      	add	r3, ip
 800f0e0:	685a      	ldr	r2, [r3, #4]
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	00db      	lsls	r3, r3, #3
 800f0e8:	4950      	ldr	r1, [pc, #320]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f0ea:	468c      	mov	ip, r1
 800f0ec:	4463      	add	r3, ip
 800f0ee:	0192      	lsls	r2, r2, #6
 800f0f0:	0992      	lsrs	r2, r2, #6
 800f0f2:	605a      	str	r2, [r3, #4]
 800f0f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0f6:	2b3e      	cmp	r3, #62	@ 0x3e
 800f0f8:	d91e      	bls.n	800f138 <USB_EPStartXfer+0xf2c>
 800f0fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0fc:	095b      	lsrs	r3, r3, #5
 800f0fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f102:	221f      	movs	r2, #31
 800f104:	4013      	ands	r3, r2
 800f106:	d102      	bne.n	800f10e <USB_EPStartXfer+0xf02>
 800f108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f10a:	3b01      	subs	r3, #1
 800f10c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	781b      	ldrb	r3, [r3, #0]
 800f112:	00db      	lsls	r3, r3, #3
 800f114:	4a45      	ldr	r2, [pc, #276]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f116:	4694      	mov	ip, r2
 800f118:	4463      	add	r3, ip
 800f11a:	685a      	ldr	r2, [r3, #4]
 800f11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f11e:	069b      	lsls	r3, r3, #26
 800f120:	431a      	orrs	r2, r3
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	00db      	lsls	r3, r3, #3
 800f128:	4940      	ldr	r1, [pc, #256]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f12a:	468c      	mov	ip, r1
 800f12c:	4463      	add	r3, ip
 800f12e:	2180      	movs	r1, #128	@ 0x80
 800f130:	0609      	lsls	r1, r1, #24
 800f132:	430a      	orrs	r2, r1
 800f134:	605a      	str	r2, [r3, #4]
 800f136:	e058      	b.n	800f1ea <USB_EPStartXfer+0xfde>
 800f138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d111      	bne.n	800f162 <USB_EPStartXfer+0xf56>
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	00db      	lsls	r3, r3, #3
 800f144:	4a39      	ldr	r2, [pc, #228]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f146:	4694      	mov	ip, r2
 800f148:	4463      	add	r3, ip
 800f14a:	685a      	ldr	r2, [r3, #4]
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	00db      	lsls	r3, r3, #3
 800f152:	4936      	ldr	r1, [pc, #216]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f154:	468c      	mov	ip, r1
 800f156:	4463      	add	r3, ip
 800f158:	2180      	movs	r1, #128	@ 0x80
 800f15a:	0609      	lsls	r1, r1, #24
 800f15c:	430a      	orrs	r2, r1
 800f15e:	605a      	str	r2, [r3, #4]
 800f160:	e043      	b.n	800f1ea <USB_EPStartXfer+0xfde>
 800f162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f164:	085b      	lsrs	r3, r3, #1
 800f166:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f16a:	2201      	movs	r2, #1
 800f16c:	4013      	ands	r3, r2
 800f16e:	d002      	beq.n	800f176 <USB_EPStartXfer+0xf6a>
 800f170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f172:	3301      	adds	r3, #1
 800f174:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	00db      	lsls	r3, r3, #3
 800f17c:	4a2b      	ldr	r2, [pc, #172]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f17e:	4694      	mov	ip, r2
 800f180:	4463      	add	r3, ip
 800f182:	6859      	ldr	r1, [r3, #4]
 800f184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f186:	069a      	lsls	r2, r3, #26
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	00db      	lsls	r3, r3, #3
 800f18e:	4827      	ldr	r0, [pc, #156]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f190:	4684      	mov	ip, r0
 800f192:	4463      	add	r3, ip
 800f194:	430a      	orrs	r2, r1
 800f196:	605a      	str	r2, [r3, #4]
 800f198:	e027      	b.n	800f1ea <USB_EPStartXfer+0xfde>
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	785b      	ldrb	r3, [r3, #1]
 800f19e:	2b01      	cmp	r3, #1
 800f1a0:	d123      	bne.n	800f1ea <USB_EPStartXfer+0xfde>
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	00db      	lsls	r3, r3, #3
 800f1a8:	4a20      	ldr	r2, [pc, #128]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f1aa:	4694      	mov	ip, r2
 800f1ac:	4463      	add	r3, ip
 800f1ae:	685a      	ldr	r2, [r3, #4]
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	00db      	lsls	r3, r3, #3
 800f1b6:	491d      	ldr	r1, [pc, #116]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f1b8:	468c      	mov	ip, r1
 800f1ba:	4463      	add	r3, ip
 800f1bc:	0412      	lsls	r2, r2, #16
 800f1be:	0c12      	lsrs	r2, r2, #16
 800f1c0:	605a      	str	r2, [r3, #4]
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	00db      	lsls	r3, r3, #3
 800f1c8:	4a18      	ldr	r2, [pc, #96]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f1ca:	4694      	mov	ip, r2
 800f1cc:	4463      	add	r3, ip
 800f1ce:	6859      	ldr	r1, [r3, #4]
 800f1d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1d2:	041a      	lsls	r2, r3, #16
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	00db      	lsls	r3, r3, #3
 800f1da:	4814      	ldr	r0, [pc, #80]	@ (800f22c <USB_EPStartXfer+0x1020>)
 800f1dc:	4684      	mov	ip, r0
 800f1de:	4463      	add	r3, ip
 800f1e0:	430a      	orrs	r2, r1
 800f1e2:	605a      	str	r2, [r3, #4]
 800f1e4:	e001      	b.n	800f1ea <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e01c      	b.n	800f224 <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f1ea:	687a      	ldr	r2, [r7, #4]
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	009b      	lsls	r3, r3, #2
 800f1f2:	18d3      	adds	r3, r2, r3
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	4a0e      	ldr	r2, [pc, #56]	@ (800f230 <USB_EPStartXfer+0x1024>)
 800f1f8:	4013      	ands	r3, r2
 800f1fa:	61fb      	str	r3, [r7, #28]
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	2280      	movs	r2, #128	@ 0x80
 800f200:	0152      	lsls	r2, r2, #5
 800f202:	4053      	eors	r3, r2
 800f204:	61fb      	str	r3, [r7, #28]
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	2280      	movs	r2, #128	@ 0x80
 800f20a:	0192      	lsls	r2, r2, #6
 800f20c:	4053      	eors	r3, r2
 800f20e:	61fb      	str	r3, [r7, #28]
 800f210:	687a      	ldr	r2, [r7, #4]
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	18d3      	adds	r3, r2, r3
 800f21a:	69fa      	ldr	r2, [r7, #28]
 800f21c:	4905      	ldr	r1, [pc, #20]	@ (800f234 <USB_EPStartXfer+0x1028>)
 800f21e:	430a      	orrs	r2, r1
 800f220:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f222:	2300      	movs	r3, #0
}
 800f224:	0018      	movs	r0, r3
 800f226:	46bd      	mov	sp, r7
 800f228:	b017      	add	sp, #92	@ 0x5c
 800f22a:	bd90      	pop	{r4, r7, pc}
 800f22c:	40009800 	.word	0x40009800
 800f230:	07ffbf8f 	.word	0x07ffbf8f
 800f234:	00008080 	.word	0x00008080

0800f238 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b084      	sub	sp, #16
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	785b      	ldrb	r3, [r3, #1]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d016      	beq.n	800f278 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f24a:	687a      	ldr	r2, [r7, #4]
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	009b      	lsls	r3, r3, #2
 800f252:	18d3      	adds	r3, r2, r3
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	4a16      	ldr	r2, [pc, #88]	@ (800f2b0 <USB_EPSetStall+0x78>)
 800f258:	4013      	ands	r3, r2
 800f25a:	60bb      	str	r3, [r7, #8]
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	2210      	movs	r2, #16
 800f260:	4053      	eors	r3, r2
 800f262:	60bb      	str	r3, [r7, #8]
 800f264:	687a      	ldr	r2, [r7, #4]
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	781b      	ldrb	r3, [r3, #0]
 800f26a:	009b      	lsls	r3, r3, #2
 800f26c:	18d3      	adds	r3, r2, r3
 800f26e:	68ba      	ldr	r2, [r7, #8]
 800f270:	4910      	ldr	r1, [pc, #64]	@ (800f2b4 <USB_EPSetStall+0x7c>)
 800f272:	430a      	orrs	r2, r1
 800f274:	601a      	str	r2, [r3, #0]
 800f276:	e016      	b.n	800f2a6 <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f278:	687a      	ldr	r2, [r7, #4]
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	009b      	lsls	r3, r3, #2
 800f280:	18d3      	adds	r3, r2, r3
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4a0c      	ldr	r2, [pc, #48]	@ (800f2b8 <USB_EPSetStall+0x80>)
 800f286:	4013      	ands	r3, r2
 800f288:	60fb      	str	r3, [r7, #12]
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2280      	movs	r2, #128	@ 0x80
 800f28e:	0152      	lsls	r2, r2, #5
 800f290:	4053      	eors	r3, r2
 800f292:	60fb      	str	r3, [r7, #12]
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	009b      	lsls	r3, r3, #2
 800f29c:	18d3      	adds	r3, r2, r3
 800f29e:	68fa      	ldr	r2, [r7, #12]
 800f2a0:	4904      	ldr	r1, [pc, #16]	@ (800f2b4 <USB_EPSetStall+0x7c>)
 800f2a2:	430a      	orrs	r2, r1
 800f2a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f2a6:	2300      	movs	r3, #0
}
 800f2a8:	0018      	movs	r0, r3
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	b004      	add	sp, #16
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	07ff8fbf 	.word	0x07ff8fbf
 800f2b4:	00008080 	.word	0x00008080
 800f2b8:	07ffbf8f 	.word	0x07ffbf8f

0800f2bc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b088      	sub	sp, #32
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	7b1b      	ldrb	r3, [r3, #12]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d000      	beq.n	800f2d0 <USB_EPClearStall+0x14>
 800f2ce:	e075      	b.n	800f3bc <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	785b      	ldrb	r3, [r3, #1]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d037      	beq.n	800f348 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f2d8:	687a      	ldr	r2, [r7, #4]
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	009b      	lsls	r3, r3, #2
 800f2e0:	18d3      	adds	r3, r2, r3
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	613b      	str	r3, [r7, #16]
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	2240      	movs	r2, #64	@ 0x40
 800f2ea:	4013      	ands	r3, r2
 800f2ec:	d011      	beq.n	800f312 <USB_EPClearStall+0x56>
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	18d3      	adds	r3, r2, r3
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	4a33      	ldr	r2, [pc, #204]	@ (800f3c8 <USB_EPClearStall+0x10c>)
 800f2fc:	4013      	ands	r3, r2
 800f2fe:	60fb      	str	r3, [r7, #12]
 800f300:	687a      	ldr	r2, [r7, #4]
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	009b      	lsls	r3, r3, #2
 800f308:	18d3      	adds	r3, r2, r3
 800f30a:	68fa      	ldr	r2, [r7, #12]
 800f30c:	492f      	ldr	r1, [pc, #188]	@ (800f3cc <USB_EPClearStall+0x110>)
 800f30e:	430a      	orrs	r2, r1
 800f310:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	78db      	ldrb	r3, [r3, #3]
 800f316:	2b01      	cmp	r3, #1
 800f318:	d050      	beq.n	800f3bc <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	18d3      	adds	r3, r2, r3
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	4a2a      	ldr	r2, [pc, #168]	@ (800f3d0 <USB_EPClearStall+0x114>)
 800f328:	4013      	ands	r3, r2
 800f32a:	60bb      	str	r3, [r7, #8]
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	2220      	movs	r2, #32
 800f330:	4053      	eors	r3, r2
 800f332:	60bb      	str	r3, [r7, #8]
 800f334:	687a      	ldr	r2, [r7, #4]
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	009b      	lsls	r3, r3, #2
 800f33c:	18d3      	adds	r3, r2, r3
 800f33e:	68ba      	ldr	r2, [r7, #8]
 800f340:	4924      	ldr	r1, [pc, #144]	@ (800f3d4 <USB_EPClearStall+0x118>)
 800f342:	430a      	orrs	r2, r1
 800f344:	601a      	str	r2, [r3, #0]
 800f346:	e039      	b.n	800f3bc <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	009b      	lsls	r3, r3, #2
 800f350:	18d3      	adds	r3, r2, r3
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	61fb      	str	r3, [r7, #28]
 800f356:	69fa      	ldr	r2, [r7, #28]
 800f358:	2380      	movs	r3, #128	@ 0x80
 800f35a:	01db      	lsls	r3, r3, #7
 800f35c:	4013      	ands	r3, r2
 800f35e:	d011      	beq.n	800f384 <USB_EPClearStall+0xc8>
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	18d3      	adds	r3, r2, r3
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	4a16      	ldr	r2, [pc, #88]	@ (800f3c8 <USB_EPClearStall+0x10c>)
 800f36e:	4013      	ands	r3, r2
 800f370:	61bb      	str	r3, [r7, #24]
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	009b      	lsls	r3, r3, #2
 800f37a:	18d3      	adds	r3, r2, r3
 800f37c:	69ba      	ldr	r2, [r7, #24]
 800f37e:	4916      	ldr	r1, [pc, #88]	@ (800f3d8 <USB_EPClearStall+0x11c>)
 800f380:	430a      	orrs	r2, r1
 800f382:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f384:	687a      	ldr	r2, [r7, #4]
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	009b      	lsls	r3, r3, #2
 800f38c:	18d3      	adds	r3, r2, r3
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	4a12      	ldr	r2, [pc, #72]	@ (800f3dc <USB_EPClearStall+0x120>)
 800f392:	4013      	ands	r3, r2
 800f394:	617b      	str	r3, [r7, #20]
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	2280      	movs	r2, #128	@ 0x80
 800f39a:	0152      	lsls	r2, r2, #5
 800f39c:	4053      	eors	r3, r2
 800f39e:	617b      	str	r3, [r7, #20]
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	2280      	movs	r2, #128	@ 0x80
 800f3a4:	0192      	lsls	r2, r2, #6
 800f3a6:	4053      	eors	r3, r2
 800f3a8:	617b      	str	r3, [r7, #20]
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	18d3      	adds	r3, r2, r3
 800f3b4:	697a      	ldr	r2, [r7, #20]
 800f3b6:	4907      	ldr	r1, [pc, #28]	@ (800f3d4 <USB_EPClearStall+0x118>)
 800f3b8:	430a      	orrs	r2, r1
 800f3ba:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800f3bc:	2300      	movs	r3, #0
}
 800f3be:	0018      	movs	r0, r3
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	b008      	add	sp, #32
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	46c0      	nop			@ (mov r8, r8)
 800f3c8:	07ff8f8f 	.word	0x07ff8f8f
 800f3cc:	000080c0 	.word	0x000080c0
 800f3d0:	07ff8fbf 	.word	0x07ff8fbf
 800f3d4:	00008080 	.word	0x00008080
 800f3d8:	0000c080 	.word	0x0000c080
 800f3dc:	07ffbf8f 	.word	0x07ffbf8f

0800f3e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b086      	sub	sp, #24
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
  /* IN endpoint */
  if (ep->is_in == 1U)
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	785b      	ldrb	r3, [r3, #1]
 800f3ee:	2b01      	cmp	r3, #1
 800f3f0:	d131      	bne.n	800f456 <USB_EPStopXfer+0x76>
  {
    if (ep->doublebuffer == 0U)
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	7b1b      	ldrb	r3, [r3, #12]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d15f      	bne.n	800f4ba <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	78db      	ldrb	r3, [r3, #3]
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d016      	beq.n	800f430 <USB_EPStopXfer+0x50>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	18d3      	adds	r3, r2, r3
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	4a2d      	ldr	r2, [pc, #180]	@ (800f4c4 <USB_EPStopXfer+0xe4>)
 800f410:	4013      	ands	r3, r2
 800f412:	60bb      	str	r3, [r7, #8]
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	2220      	movs	r2, #32
 800f418:	4053      	eors	r3, r2
 800f41a:	60bb      	str	r3, [r7, #8]
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	18d3      	adds	r3, r2, r3
 800f426:	68ba      	ldr	r2, [r7, #8]
 800f428:	4927      	ldr	r1, [pc, #156]	@ (800f4c8 <USB_EPStopXfer+0xe8>)
 800f42a:	430a      	orrs	r2, r1
 800f42c:	601a      	str	r2, [r3, #0]
 800f42e:	e044      	b.n	800f4ba <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	009b      	lsls	r3, r3, #2
 800f438:	18d3      	adds	r3, r2, r3
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4a21      	ldr	r2, [pc, #132]	@ (800f4c4 <USB_EPStopXfer+0xe4>)
 800f43e:	4013      	ands	r3, r2
 800f440:	60fb      	str	r3, [r7, #12]
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	009b      	lsls	r3, r3, #2
 800f44a:	18d3      	adds	r3, r2, r3
 800f44c:	68fa      	ldr	r2, [r7, #12]
 800f44e:	491e      	ldr	r1, [pc, #120]	@ (800f4c8 <USB_EPStopXfer+0xe8>)
 800f450:	430a      	orrs	r2, r1
 800f452:	601a      	str	r2, [r3, #0]
 800f454:	e031      	b.n	800f4ba <USB_EPStopXfer+0xda>
      }
    }
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	7b1b      	ldrb	r3, [r3, #12]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d12d      	bne.n	800f4ba <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	78db      	ldrb	r3, [r3, #3]
 800f462:	2b01      	cmp	r3, #1
 800f464:	d017      	beq.n	800f496 <USB_EPStopXfer+0xb6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800f466:	687a      	ldr	r2, [r7, #4]
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	18d3      	adds	r3, r2, r3
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4a16      	ldr	r2, [pc, #88]	@ (800f4cc <USB_EPStopXfer+0xec>)
 800f474:	4013      	ands	r3, r2
 800f476:	613b      	str	r3, [r7, #16]
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	2280      	movs	r2, #128	@ 0x80
 800f47c:	0192      	lsls	r2, r2, #6
 800f47e:	4053      	eors	r3, r2
 800f480:	613b      	str	r3, [r7, #16]
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	009b      	lsls	r3, r3, #2
 800f48a:	18d3      	adds	r3, r2, r3
 800f48c:	693a      	ldr	r2, [r7, #16]
 800f48e:	490e      	ldr	r1, [pc, #56]	@ (800f4c8 <USB_EPStopXfer+0xe8>)
 800f490:	430a      	orrs	r2, r1
 800f492:	601a      	str	r2, [r3, #0]
 800f494:	e011      	b.n	800f4ba <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure RX Endpoint to disabled state */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f496:	687a      	ldr	r2, [r7, #4]
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	009b      	lsls	r3, r3, #2
 800f49e:	18d3      	adds	r3, r2, r3
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	4a0a      	ldr	r2, [pc, #40]	@ (800f4cc <USB_EPStopXfer+0xec>)
 800f4a4:	4013      	ands	r3, r2
 800f4a6:	617b      	str	r3, [r7, #20]
 800f4a8:	687a      	ldr	r2, [r7, #4]
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	009b      	lsls	r3, r3, #2
 800f4b0:	18d3      	adds	r3, r2, r3
 800f4b2:	697a      	ldr	r2, [r7, #20]
 800f4b4:	4904      	ldr	r1, [pc, #16]	@ (800f4c8 <USB_EPStopXfer+0xe8>)
 800f4b6:	430a      	orrs	r2, r1
 800f4b8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  return HAL_OK;
 800f4ba:	2300      	movs	r3, #0
}
 800f4bc:	0018      	movs	r0, r3
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	b006      	add	sp, #24
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	07ff8fbf 	.word	0x07ff8fbf
 800f4c8:	00008080 	.word	0x00008080
 800f4cc:	07ffbf8f 	.word	0x07ffbf8f

0800f4d0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	000a      	movs	r2, r1
 800f4da:	1cfb      	adds	r3, r7, #3
 800f4dc:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800f4de:	1cfb      	adds	r3, r7, #3
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d102      	bne.n	800f4ec <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2280      	movs	r2, #128	@ 0x80
 800f4ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f4ec:	2300      	movs	r3, #0
}
 800f4ee:	0018      	movs	r0, r3
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	b002      	add	sp, #8
 800f4f4:	bd80      	pop	{r7, pc}

0800f4f6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800f4f6:	b580      	push	{r7, lr}
 800f4f8:	b082      	sub	sp, #8
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f502:	2280      	movs	r2, #128	@ 0x80
 800f504:	0212      	lsls	r2, r2, #8
 800f506:	431a      	orrs	r2, r3
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f50c:	2300      	movs	r3, #0
}
 800f50e:	0018      	movs	r0, r3
 800f510:	46bd      	mov	sp, r7
 800f512:	b002      	add	sp, #8
 800f514:	bd80      	pop	{r7, pc}
	...

0800f518 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f524:	4a04      	ldr	r2, [pc, #16]	@ (800f538 <USB_DevDisconnect+0x20>)
 800f526:	401a      	ands	r2, r3
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f52c:	2300      	movs	r3, #0
}
 800f52e:	0018      	movs	r0, r3
 800f530:	46bd      	mov	sp, r7
 800f532:	b002      	add	sp, #8
 800f534:	bd80      	pop	{r7, pc}
 800f536:	46c0      	nop			@ (mov r8, r8)
 800f538:	ffff7fff 	.word	0xffff7fff

0800f53c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f548:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f54a:	68fb      	ldr	r3, [r7, #12]
}
 800f54c:	0018      	movs	r0, r3
 800f54e:	46bd      	mov	sp, r7
 800f550:	b004      	add	sp, #16
 800f552:	bd80      	pop	{r7, pc}

0800f554 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b08a      	sub	sp, #40	@ 0x28
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	0019      	movs	r1, r3
 800f560:	1dbb      	adds	r3, r7, #6
 800f562:	801a      	strh	r2, [r3, #0]
 800f564:	1d3b      	adds	r3, r7, #4
 800f566:	1c0a      	adds	r2, r1, #0
 800f568:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800f56a:	1d3b      	adds	r3, r7, #4
 800f56c:	881b      	ldrh	r3, [r3, #0]
 800f56e:	3303      	adds	r3, #3
 800f570:	089b      	lsrs	r3, r3, #2
 800f572:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800f574:	2016      	movs	r0, #22
 800f576:	183b      	adds	r3, r7, r0
 800f578:	1d3a      	adds	r2, r7, #4
 800f57a:	8812      	ldrh	r2, [r2, #0]
 800f57c:	2103      	movs	r1, #3
 800f57e:	400a      	ands	r2, r1
 800f580:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800f586:	183b      	adds	r3, r7, r0
 800f588:	881b      	ldrh	r3, [r3, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d002      	beq.n	800f594 <USB_WritePMA+0x40>
  {
    NbWords--;
 800f58e:	69bb      	ldr	r3, [r7, #24]
 800f590:	3b01      	subs	r3, #1
 800f592:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800f594:	1dbb      	adds	r3, r7, #6
 800f596:	881b      	ldrh	r3, [r3, #0]
 800f598:	4a28      	ldr	r2, [pc, #160]	@ (800f63c <USB_WritePMA+0xe8>)
 800f59a:	4694      	mov	ip, r2
 800f59c:	4463      	add	r3, ip
 800f59e:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	623b      	str	r3, [r7, #32]
 800f5a4:	e01f      	b.n	800f5e6 <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	781a      	ldrb	r2, [r3, #0]
 800f5aa:	7859      	ldrb	r1, [r3, #1]
 800f5ac:	0209      	lsls	r1, r1, #8
 800f5ae:	430a      	orrs	r2, r1
 800f5b0:	7899      	ldrb	r1, [r3, #2]
 800f5b2:	0409      	lsls	r1, r1, #16
 800f5b4:	430a      	orrs	r2, r1
 800f5b6:	78db      	ldrb	r3, [r3, #3]
 800f5b8:	061b      	lsls	r3, r3, #24
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	001a      	movs	r2, r3
 800f5be:	69fb      	ldr	r3, [r7, #28]
 800f5c0:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800f5c2:	69fb      	ldr	r3, [r7, #28]
 800f5c4:	3304      	adds	r3, #4
 800f5c6:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	613b      	str	r3, [r7, #16]
    pBuf++;
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	613b      	str	r3, [r7, #16]
    pBuf++;
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	613b      	str	r3, [r7, #16]
    pBuf++;
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800f5e0:	6a3b      	ldr	r3, [r7, #32]
 800f5e2:	3b01      	subs	r3, #1
 800f5e4:	623b      	str	r3, [r7, #32]
 800f5e6:	6a3b      	ldr	r3, [r7, #32]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d1dc      	bne.n	800f5a6 <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800f5ec:	2316      	movs	r3, #22
 800f5ee:	18fb      	adds	r3, r7, r3
 800f5f0:	881b      	ldrh	r3, [r3, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d01e      	beq.n	800f634 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	001a      	movs	r2, r3
 800f600:	6a3b      	ldr	r3, [r7, #32]
 800f602:	00db      	lsls	r3, r3, #3
 800f604:	409a      	lsls	r2, r3
 800f606:	0013      	movs	r3, r2
 800f608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f60a:	4313      	orrs	r3, r2
 800f60c:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800f60e:	6a3b      	ldr	r3, [r7, #32]
 800f610:	3301      	adds	r3, #1
 800f612:	623b      	str	r3, [r7, #32]
      pBuf++;
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	3301      	adds	r3, #1
 800f618:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800f61a:	2116      	movs	r1, #22
 800f61c:	187b      	adds	r3, r7, r1
 800f61e:	881a      	ldrh	r2, [r3, #0]
 800f620:	187b      	adds	r3, r7, r1
 800f622:	3a01      	subs	r2, #1
 800f624:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800f626:	187b      	adds	r3, r7, r1
 800f628:	881b      	ldrh	r3, [r3, #0]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d1e5      	bne.n	800f5fa <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f632:	601a      	str	r2, [r3, #0]
  }
}
 800f634:	46c0      	nop			@ (mov r8, r8)
 800f636:	46bd      	mov	sp, r7
 800f638:	b00a      	add	sp, #40	@ 0x28
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	40009800 	.word	0x40009800

0800f640 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f640:	b590      	push	{r4, r7, lr}
 800f642:	b08b      	sub	sp, #44	@ 0x2c
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	0019      	movs	r1, r3
 800f64c:	1dbb      	adds	r3, r7, #6
 800f64e:	801a      	strh	r2, [r3, #0]
 800f650:	1d3b      	adds	r3, r7, #4
 800f652:	1c0a      	adds	r2, r1, #0
 800f654:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800f656:	1d3b      	adds	r3, r7, #4
 800f658:	881b      	ldrh	r3, [r3, #0]
 800f65a:	3303      	adds	r3, #3
 800f65c:	089b      	lsrs	r3, r3, #2
 800f65e:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800f660:	201a      	movs	r0, #26
 800f662:	183b      	adds	r3, r7, r0
 800f664:	1d3a      	adds	r2, r7, #4
 800f666:	8812      	ldrh	r2, [r2, #0]
 800f668:	2103      	movs	r1, #3
 800f66a:	400a      	ands	r2, r1
 800f66c:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800f672:	1dbb      	adds	r3, r7, #6
 800f674:	881b      	ldrh	r3, [r3, #0]
 800f676:	4a39      	ldr	r2, [pc, #228]	@ (800f75c <USB_ReadPMA+0x11c>)
 800f678:	4694      	mov	ip, r2
 800f67a:	4463      	add	r3, ip
 800f67c:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800f67e:	183b      	adds	r3, r7, r0
 800f680:	881b      	ldrh	r3, [r3, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d002      	beq.n	800f68c <USB_ReadPMA+0x4c>
  {
    NbWords--;
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	3b01      	subs	r3, #1
 800f68a:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f690:	e03c      	b.n	800f70c <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800f692:	6a3b      	ldr	r3, [r7, #32]
 800f694:	681a      	ldr	r2, [r3, #0]
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	21ff      	movs	r1, #255	@ 0xff
 800f69a:	4011      	ands	r1, r2
 800f69c:	000c      	movs	r4, r1
 800f69e:	7819      	ldrb	r1, [r3, #0]
 800f6a0:	2000      	movs	r0, #0
 800f6a2:	4001      	ands	r1, r0
 800f6a4:	1c08      	adds	r0, r1, #0
 800f6a6:	1c21      	adds	r1, r4, #0
 800f6a8:	4301      	orrs	r1, r0
 800f6aa:	7019      	strb	r1, [r3, #0]
 800f6ac:	0a11      	lsrs	r1, r2, #8
 800f6ae:	20ff      	movs	r0, #255	@ 0xff
 800f6b0:	4001      	ands	r1, r0
 800f6b2:	000c      	movs	r4, r1
 800f6b4:	7859      	ldrb	r1, [r3, #1]
 800f6b6:	2000      	movs	r0, #0
 800f6b8:	4001      	ands	r1, r0
 800f6ba:	1c08      	adds	r0, r1, #0
 800f6bc:	1c21      	adds	r1, r4, #0
 800f6be:	4301      	orrs	r1, r0
 800f6c0:	7059      	strb	r1, [r3, #1]
 800f6c2:	0c11      	lsrs	r1, r2, #16
 800f6c4:	20ff      	movs	r0, #255	@ 0xff
 800f6c6:	4001      	ands	r1, r0
 800f6c8:	000c      	movs	r4, r1
 800f6ca:	7899      	ldrb	r1, [r3, #2]
 800f6cc:	2000      	movs	r0, #0
 800f6ce:	4001      	ands	r1, r0
 800f6d0:	1c08      	adds	r0, r1, #0
 800f6d2:	1c21      	adds	r1, r4, #0
 800f6d4:	4301      	orrs	r1, r0
 800f6d6:	7099      	strb	r1, [r3, #2]
 800f6d8:	0e10      	lsrs	r0, r2, #24
 800f6da:	78da      	ldrb	r2, [r3, #3]
 800f6dc:	2100      	movs	r1, #0
 800f6de:	400a      	ands	r2, r1
 800f6e0:	1c11      	adds	r1, r2, #0
 800f6e2:	1c02      	adds	r2, r0, #0
 800f6e4:	430a      	orrs	r2, r1
 800f6e6:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800f6e8:	6a3b      	ldr	r3, [r7, #32]
 800f6ea:	3304      	adds	r3, #4
 800f6ec:	623b      	str	r3, [r7, #32]
    pBuf++;
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	617b      	str	r3, [r7, #20]
    pBuf++;
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	617b      	str	r3, [r7, #20]
    pBuf++;
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	3301      	adds	r3, #1
 800f6fe:	617b      	str	r3, [r7, #20]
    pBuf++;
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	3301      	adds	r3, #1
 800f704:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800f706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f708:	3b01      	subs	r3, #1
 800f70a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d1bf      	bne.n	800f692 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800f712:	231a      	movs	r3, #26
 800f714:	18fb      	adds	r3, r7, r3
 800f716:	881b      	ldrh	r3, [r3, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d01b      	beq.n	800f754 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800f71c:	6a3b      	ldr	r3, [r7, #32]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800f722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f724:	b2db      	uxtb	r3, r3
 800f726:	00db      	lsls	r3, r3, #3
 800f728:	693a      	ldr	r2, [r7, #16]
 800f72a:	40da      	lsrs	r2, r3
 800f72c:	0013      	movs	r3, r2
 800f72e:	b2da      	uxtb	r2, r3
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	701a      	strb	r2, [r3, #0]
      count++;
 800f734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f736:	3301      	adds	r3, #1
 800f738:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	3301      	adds	r3, #1
 800f73e:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800f740:	211a      	movs	r1, #26
 800f742:	187b      	adds	r3, r7, r1
 800f744:	881a      	ldrh	r2, [r3, #0]
 800f746:	187b      	adds	r3, r7, r1
 800f748:	3a01      	subs	r2, #1
 800f74a:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800f74c:	187b      	adds	r3, r7, r1
 800f74e:	881b      	ldrh	r3, [r3, #0]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d1e6      	bne.n	800f722 <USB_ReadPMA+0xe2>
  }
}
 800f754:	46c0      	nop			@ (mov r8, r8)
 800f756:	46bd      	mov	sp, r7
 800f758:	b00b      	add	sp, #44	@ 0x2c
 800f75a:	bd90      	pop	{r4, r7, pc}
 800f75c:	40009800 	.word	0x40009800

0800f760 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b094      	sub	sp, #80	@ 0x50
 800f764:	af00      	add	r7, sp, #0
 800f766:	60f8      	str	r0, [r7, #12]
 800f768:	60b9      	str	r1, [r7, #8]
 800f76a:	607a      	str	r2, [r7, #4]
 800f76c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	3303      	adds	r3, #3
 800f772:	2203      	movs	r2, #3
 800f774:	4393      	bics	r3, r2
 800f776:	607b      	str	r3, [r7, #4]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f778:	f3ef 8310 	mrs	r3, PRIMASK
 800f77c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f77e:	b672      	cpsid	i
    return(primask_value);
 800f780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable interrupts.  */
    TX_DISABLE
 800f782:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800f784:	4b56      	ldr	r3, [pc, #344]	@ (800f8e0 <_tx_byte_allocate+0x180>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	643b      	str	r3, [r7, #64]	@ 0x40
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800f78a:	2300      	movs	r3, #0
 800f78c:	647b      	str	r3, [r7, #68]	@ 0x44
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f792:	621a      	str	r2, [r3, #32]
 800f794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f796:	627b      	str	r3, [r7, #36]	@ 0x24
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f79a:	f383 8810 	msr	PRIMASK, r3
}
 800f79e:	46c0      	nop			@ (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	0011      	movs	r1, r2
 800f7a6:	0018      	movs	r0, r3
 800f7a8:	f000 f9c0 	bl	800fb2c <_tx_byte_pool_search>
 800f7ac:	0003      	movs	r3, r0
 800f7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f7b0:	f3ef 8310 	mrs	r3, PRIMASK
 800f7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f7b6:	b672      	cpsid	i
    return(primask_value);
 800f7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800f7ba:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800f7bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d002      	beq.n	800f7c8 <_tx_byte_allocate+0x68>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800f7c6:	e006      	b.n	800f7d6 <_tx_byte_allocate+0x76>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	6a1b      	ldr	r3, [r3, #32]
 800f7cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d101      	bne.n	800f7d6 <_tx_byte_allocate+0x76>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }

    } while (finished == TX_FALSE);
 800f7d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d0d8      	beq.n	800f78e <_tx_byte_allocate+0x2e>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f7e0:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800f7e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d008      	beq.n	800f7fa <_tx_byte_allocate+0x9a>
 800f7e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7ea:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f7ec:	6a3b      	ldr	r3, [r7, #32]
 800f7ee:	f383 8810 	msr	PRIMASK, r3
}
 800f7f2:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f7f8:	e06d      	b.n	800f8d6 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d062      	beq.n	800f8c6 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800f800:	4b38      	ldr	r3, [pc, #224]	@ (800f8e4 <_tx_byte_allocate+0x184>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d007      	beq.n	800f818 <_tx_byte_allocate+0xb8>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800f808:	2310      	movs	r3, #16
 800f80a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f80c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f80e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	f383 8810 	msr	PRIMASK, r3
}
 800f816:	e05e      	b.n	800f8d6 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800f818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f81a:	4a33      	ldr	r2, [pc, #204]	@ (800f8e8 <_tx_byte_allocate+0x188>)
 800f81c:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800f81e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f820:	68fa      	ldr	r2, [r7, #12]
 800f822:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800f824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f826:	68ba      	ldr	r2, [r7, #8]
 800f828:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800f82a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f82c:	687a      	ldr	r2, [r7, #4]
 800f82e:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800f830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f832:	22ac      	movs	r2, #172	@ 0xac
 800f834:	589b      	ldr	r3, [r3, r2]
 800f836:	1c5a      	adds	r2, r3, #1
 800f838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f83a:	21ac      	movs	r1, #172	@ 0xac
 800f83c:	505a      	str	r2, [r3, r1]
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f842:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f848:	1c5a      	adds	r2, r3, #1
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800f84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f850:	2b00      	cmp	r3, #0
 800f852:	d109      	bne.n	800f868 <_tx_byte_allocate+0x108>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f858:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800f85a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f85c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f85e:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800f860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f862:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f864:	675a      	str	r2, [r3, #116]	@ 0x74
 800f866:	e011      	b.n	800f88c <_tx_byte_allocate+0x12c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f86c:	637b      	str	r3, [r7, #52]	@ 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800f86e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f870:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f872:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800f874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f878:	633b      	str	r3, [r7, #48]	@ 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800f87a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f87c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f87e:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800f880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f882:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f884:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800f886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f888:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f88a:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800f88c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f88e:	2209      	movs	r2, #9
 800f890:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f894:	2201      	movs	r2, #1
 800f896:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800f898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f89a:	683a      	ldr	r2, [r7, #0]
 800f89c:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800f89e:	4b11      	ldr	r3, [pc, #68]	@ (800f8e4 <_tx_byte_allocate+0x184>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	1c5a      	adds	r2, r3, #1
 800f8a4:	4b0f      	ldr	r3, [pc, #60]	@ (800f8e4 <_tx_byte_allocate+0x184>)
 800f8a6:	601a      	str	r2, [r3, #0]
 800f8a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8aa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	f383 8810 	msr	PRIMASK, r3
}
 800f8b2:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800f8b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f8b6:	0018      	movs	r0, r3
 800f8b8:	f003 f84c 	bl	8012954 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800f8bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f8be:	2284      	movs	r2, #132	@ 0x84
 800f8c0:	589b      	ldr	r3, [r3, r2]
 800f8c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f8c4:	e007      	b.n	800f8d6 <_tx_byte_allocate+0x176>
 800f8c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8c8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	f383 8810 	msr	PRIMASK, r3
}
 800f8d0:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800f8d2:	2310      	movs	r3, #16
 800f8d4:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }

    /* Return completion status.  */
    return(status);
 800f8d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800f8d8:	0018      	movs	r0, r3
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	b014      	add	sp, #80	@ 0x50
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	20011198 	.word	0x20011198
 800f8e4:	20011230 	.word	0x20011230
 800f8e8:	0800f8ed 	.word	0x0800f8ed

0800f8ec <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b08c      	sub	sp, #48	@ 0x30
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f8f6:	f3ef 8310 	mrs	r3, PRIMASK
 800f8fa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f8fc:	b672      	cpsid	i
    return(primask_value);
 800f8fe:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800f900:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f906:	4b32      	ldr	r3, [pc, #200]	@ (800f9d0 <_tx_byte_pool_cleanup+0xe4>)
 800f908:	429a      	cmp	r2, r3
 800f90a:	d157      	bne.n	800f9bc <_tx_byte_pool_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	22ac      	movs	r2, #172	@ 0xac
 800f910:	589b      	ldr	r3, [r3, r2]
 800f912:	683a      	ldr	r2, [r7, #0]
 800f914:	429a      	cmp	r2, r3
 800f916:	d151      	bne.n	800f9bc <_tx_byte_pool_cleanup+0xd0>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f91c:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800f91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f920:	2b00      	cmp	r3, #0
 800f922:	d04b      	beq.n	800f9bc <_tx_byte_pool_cleanup+0xd0>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800f924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	4a2a      	ldr	r2, [pc, #168]	@ (800f9d4 <_tx_byte_pool_cleanup+0xe8>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d146      	bne.n	800f9bc <_tx_byte_pool_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800f92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f932:	2b00      	cmp	r3, #0
 800f934:	d042      	beq.n	800f9bc <_tx_byte_pool_cleanup+0xd0>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2200      	movs	r2, #0
 800f93a:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800f93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f93e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f940:	1e5a      	subs	r2, r3, #1
 800f942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f944:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800f946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f94a:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800f94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d103      	bne.n	800f95a <_tx_byte_pool_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800f952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f954:	2200      	movs	r2, #0
 800f956:	625a      	str	r2, [r3, #36]	@ 0x24
 800f958:	e013      	b.n	800f982 <_tx_byte_pool_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f95e:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f964:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800f966:	6a3b      	ldr	r3, [r7, #32]
 800f968:	69fa      	ldr	r2, [r7, #28]
 800f96a:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800f96c:	69fb      	ldr	r3, [r7, #28]
 800f96e:	6a3a      	ldr	r2, [r7, #32]
 800f970:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800f972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f976:	687a      	ldr	r2, [r7, #4]
 800f978:	429a      	cmp	r2, r3
 800f97a:	d102      	bne.n	800f982 <_tx_byte_pool_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800f97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f97e:	6a3a      	ldr	r2, [r7, #32]
 800f980:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f986:	2b09      	cmp	r3, #9
 800f988:	d118      	bne.n	800f9bc <_tx_byte_pool_cleanup+0xd0>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2284      	movs	r2, #132	@ 0x84
 800f98e:	2110      	movs	r1, #16
 800f990:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800f992:	4b11      	ldr	r3, [pc, #68]	@ (800f9d8 <_tx_byte_pool_cleanup+0xec>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	1c5a      	adds	r2, r3, #1
 800f998:	4b0f      	ldr	r3, [pc, #60]	@ (800f9d8 <_tx_byte_pool_cleanup+0xec>)
 800f99a:	601a      	str	r2, [r3, #0]
 800f99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f99e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	f383 8810 	msr	PRIMASK, r3
}
 800f9a6:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	0018      	movs	r0, r3
 800f9ac:	f002 fed2 	bl	8012754 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f9b0:	f3ef 8310 	mrs	r3, PRIMASK
 800f9b4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f9b6:	b672      	cpsid	i
    return(primask_value);
 800f9b8:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800f9ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9be:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f383 8810 	msr	PRIMASK, r3
}
 800f9c6:	46c0      	nop			@ (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800f9c8:	46c0      	nop			@ (mov r8, r8)
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	b00c      	add	sp, #48	@ 0x30
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	0800f8ed 	.word	0x0800f8ed
 800f9d4:	42595445 	.word	0x42595445
 800f9d8:	20011230 	.word	0x20011230

0800f9dc <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b092      	sub	sp, #72	@ 0x48
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	60f8      	str	r0, [r7, #12]
 800f9e4:	60b9      	str	r1, [r7, #8]
 800f9e6:	607a      	str	r2, [r7, #4]
 800f9e8:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800f9ee:	233f      	movs	r3, #63	@ 0x3f
 800f9f0:	18fb      	adds	r3, r7, r3
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	701a      	strb	r2, [r3, #0]
 800f9f6:	2334      	movs	r3, #52	@ 0x34
 800f9f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800f9fe:	e009      	b.n	800fa14 <_tx_byte_pool_create+0x38>
 800fa00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa02:	1c5a      	adds	r2, r3, #1
 800fa04:	647a      	str	r2, [r7, #68]	@ 0x44
 800fa06:	223f      	movs	r2, #63	@ 0x3f
 800fa08:	18ba      	adds	r2, r7, r2
 800fa0a:	7812      	ldrb	r2, [r2, #0]
 800fa0c:	701a      	strb	r2, [r3, #0]
 800fa0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa10:	3301      	adds	r3, #1
 800fa12:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fa16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d3f1      	bcc.n	800fa00 <_tx_byte_pool_create+0x24>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	2203      	movs	r2, #3
 800fa20:	4393      	bics	r3, r2
 800fa22:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	68ba      	ldr	r2, [r7, #8]
 800fa28:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	683a      	ldr	r2, [r7, #0]
 800fa34:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	687a      	ldr	r2, [r7, #4]
 800fa3a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	3b08      	subs	r3, #8
 800fa46:	001a      	movs	r2, r3
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2202      	movs	r2, #2
 800fa50:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800fa56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	18d3      	adds	r3, r2, r3
 800fa5c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800fa5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa60:	3b04      	subs	r3, #4
 800fa62:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800fa68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800fa6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa70:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800fa72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa74:	3b04      	subs	r3, #4
 800fa76:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800fa78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fa7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800fa86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800fa8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa8e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800fa94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa96:	3304      	adds	r3, #4
 800fa98:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800fa9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800fa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa0:	4a1e      	ldr	r2, [pc, #120]	@ (800fb1c <_tx_byte_pool_create+0x140>)
 800faa2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	2200      	movs	r2, #0
 800faa8:	621a      	str	r2, [r3, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800faaa:	f3ef 8310 	mrs	r3, PRIMASK
 800faae:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fab0:	b672      	cpsid	i
    return(primask_value);
 800fab2:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800fab4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	4a19      	ldr	r2, [pc, #100]	@ (800fb20 <_tx_byte_pool_create+0x144>)
 800faba:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800fabc:	4b19      	ldr	r3, [pc, #100]	@ (800fb24 <_tx_byte_pool_create+0x148>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d109      	bne.n	800fad8 <_tx_byte_pool_create+0xfc>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800fac4:	4b18      	ldr	r3, [pc, #96]	@ (800fb28 <_tx_byte_pool_create+0x14c>)
 800fac6:	68fa      	ldr	r2, [r7, #12]
 800fac8:	601a      	str	r2, [r3, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	68fa      	ldr	r2, [r7, #12]
 800face:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	631a      	str	r2, [r3, #48]	@ 0x30
 800fad6:	e011      	b.n	800fafc <_tx_byte_pool_create+0x120>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800fad8:	4b13      	ldr	r3, [pc, #76]	@ (800fb28 <_tx_byte_pool_create+0x14c>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800fade:	6a3b      	ldr	r3, [r7, #32]
 800fae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fae2:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800fae4:	6a3b      	ldr	r3, [r7, #32]
 800fae6:	68fa      	ldr	r2, [r7, #12]
 800fae8:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	68fa      	ldr	r2, [r7, #12]
 800faee:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	69fa      	ldr	r2, [r7, #28]
 800faf4:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	6a3a      	ldr	r2, [r7, #32]
 800fafa:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800fafc:	4b09      	ldr	r3, [pc, #36]	@ (800fb24 <_tx_byte_pool_create+0x148>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	1c5a      	adds	r2, r3, #1
 800fb02:	4b08      	ldr	r3, [pc, #32]	@ (800fb24 <_tx_byte_pool_create+0x148>)
 800fb04:	601a      	str	r2, [r3, #0]
 800fb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb08:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	f383 8810 	msr	PRIMASK, r3
}
 800fb10:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800fb12:	2300      	movs	r3, #0
}
 800fb14:	0018      	movs	r0, r3
 800fb16:	46bd      	mov	sp, r7
 800fb18:	b012      	add	sp, #72	@ 0x48
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	ffffeeee 	.word	0xffffeeee
 800fb20:	42595445 	.word	0x42595445
 800fb24:	2001118c 	.word	0x2001118c
 800fb28:	20011188 	.word	0x20011188

0800fb2c <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b094      	sub	sp, #80	@ 0x50
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800fb36:	2300      	movs	r3, #0
 800fb38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fb3a:	f3ef 8310 	mrs	r3, PRIMASK
 800fb3e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fb40:	b672      	cpsid	i
    return(primask_value);
 800fb42:	69fb      	ldr	r3, [r7, #28]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800fb44:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	689a      	ldr	r2, [r3, #8]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	68db      	ldr	r3, [r3, #12]
 800fb4e:	3b02      	subs	r3, #2
 800fb50:	00db      	lsls	r3, r3, #3
 800fb52:	18d3      	adds	r3, r2, r3
 800fb54:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (memory_size >= total_theoretical_available)
 800fb56:	683a      	ldr	r2, [r7, #0]
 800fb58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d308      	bcc.n	800fb70 <_tx_byte_pool_search+0x44>
 800fb5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb60:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fb62:	69bb      	ldr	r3, [r7, #24]
 800fb64:	f383 8810 	msr	PRIMASK, r3
}
 800fb68:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fb6e:	e0db      	b.n	800fd28 <_tx_byte_pool_search+0x1fc>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800fb70:	4b70      	ldr	r3, [pc, #448]	@ (800fd34 <_tx_byte_pool_search+0x208>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb7a:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	695b      	ldr	r3, [r3, #20]
 800fb80:	64bb      	str	r3, [r7, #72]	@ 0x48
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	3301      	adds	r3, #1
 800fb88:	643b      	str	r3, [r7, #64]	@ 0x40
        available_bytes =  ((ULONG) 0);
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	647b      	str	r3, [r7, #68]	@ 0x44
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800fb8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb90:	3304      	adds	r3, #4
 800fb92:	633b      	str	r3, [r7, #48]	@ 0x30
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800fb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb96:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800fb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4a66      	ldr	r2, [pc, #408]	@ (800fd38 <_tx_byte_pool_search+0x20c>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d143      	bne.n	800fc2a <_tx_byte_pool_search+0xfe>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800fba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d104      	bne.n	800fbb2 <_tx_byte_pool_search+0x86>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fbac:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800fbae:	2301      	movs	r3, #1
 800fbb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800fbb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbb4:	62bb      	str	r3, [r7, #40]	@ 0x28
                next_ptr =             *this_block_link_ptr;
 800fbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800fbbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbc0:	1ad3      	subs	r3, r2, r3
 800fbc2:	647b      	str	r3, [r7, #68]	@ 0x44
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800fbc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fbc6:	3b08      	subs	r3, #8
 800fbc8:	647b      	str	r3, [r7, #68]	@ 0x44

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800fbca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d255      	bcs.n	800fc7e <_tx_byte_pool_search+0x152>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800fbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbd8:	3304      	adds	r3, #4
 800fbda:	633b      	str	r3, [r7, #48]	@ 0x30
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800fbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbde:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800fbe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	4a54      	ldr	r2, [pc, #336]	@ (800fd38 <_tx_byte_pool_search+0x20c>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d113      	bne.n	800fc12 <_tx_byte_pool_search+0xe6>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800fbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbec:	623b      	str	r3, [r7, #32]
                        *this_block_link_ptr =  *next_block_link_ptr;
 800fbee:	6a3b      	ldr	r3, [r7, #32]
 800fbf0:	681a      	ldr	r2, [r3, #0]
 800fbf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbf4:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	68db      	ldr	r3, [r3, #12]
 800fbfa:	1e5a      	subs	r2, r3, #1
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	695b      	ldr	r3, [r3, #20]
 800fc04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d114      	bne.n	800fc34 <_tx_byte_pool_search+0x108>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc0e:	615a      	str	r2, [r3, #20]
 800fc10:	e010      	b.n	800fc34 <_tx_byte_pool_search+0x108>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800fc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc14:	623b      	str	r3, [r7, #32]
                        current_ptr =  *next_block_link_ptr;
 800fc16:	6a3b      	ldr	r3, [r7, #32]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	64bb      	str	r3, [r7, #72]	@ 0x48

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800fc1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d008      	beq.n	800fc34 <_tx_byte_pool_search+0x108>
                        {
                            examine_blocks--;
 800fc22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc24:	3b01      	subs	r3, #1
 800fc26:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc28:	e004      	b.n	800fc34 <_tx_byte_pool_search+0x108>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800fc2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc2c:	62bb      	str	r3, [r7, #40]	@ 0x28
                current_ptr =  *this_block_link_ptr;
 800fc2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800fc34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d002      	beq.n	800fc40 <_tx_byte_pool_search+0x114>
            {

                examine_blocks--;
 800fc3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc3c:	3b01      	subs	r3, #1
 800fc3e:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc42:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	f383 8810 	msr	PRIMASK, r3
}
 800fc4a:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fc4c:	f3ef 8310 	mrs	r3, PRIMASK
 800fc50:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fc52:	b672      	cpsid	i
    return(primask_value);
 800fc54:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800fc56:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6a1b      	ldr	r3, [r3, #32]
 800fc5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d009      	beq.n	800fc76 <_tx_byte_pool_search+0x14a>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	695b      	ldr	r3, [r3, #20]
 800fc66:	64bb      	str	r3, [r7, #72]	@ 0x48
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	68db      	ldr	r3, [r3, #12]
 800fc6c:	3301      	adds	r3, #1
 800fc6e:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fc74:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800fc76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d188      	bne.n	800fb8e <_tx_byte_pool_search+0x62>
 800fc7c:	e000      	b.n	800fc80 <_tx_byte_pool_search+0x154>
                    break;
 800fc7e:	46c0      	nop			@ (mov r8, r8)

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800fc80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d048      	beq.n	800fd18 <_tx_byte_pool_search+0x1ec>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800fc86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	1ad3      	subs	r3, r2, r3
 800fc8c:	2b13      	cmp	r3, #19
 800fc8e:	d91e      	bls.n	800fcce <_tx_byte_pool_search+0x1a2>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	3308      	adds	r3, #8
 800fc94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc96:	18d3      	adds	r3, r2, r3
 800fc98:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800fc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc9c:	623b      	str	r3, [r7, #32]
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800fc9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fca0:	62bb      	str	r3, [r7, #40]	@ 0x28
                *next_block_link_ptr =  *this_block_link_ptr;
 800fca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	6a3b      	ldr	r3, [r7, #32]
 800fca8:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcac:	3304      	adds	r3, #4
 800fcae:	633b      	str	r3, [r7, #48]	@ 0x30
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800fcb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800fcb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcb6:	4a20      	ldr	r2, [pc, #128]	@ (800fd38 <_tx_byte_pool_search+0x20c>)
 800fcb8:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	1c5a      	adds	r2, r3, #1
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800fcc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcc8:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	647b      	str	r3, [r7, #68]	@ 0x44
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800fcce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fcd0:	3304      	adds	r3, #4
 800fcd2:	633b      	str	r3, [r7, #48]	@ 0x30
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800fcd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcd6:	62bb      	str	r3, [r7, #40]	@ 0x28
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800fcd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcda:	687a      	ldr	r2, [r7, #4]
 800fcdc:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	689a      	ldr	r2, [r3, #8]
 800fce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	3b08      	subs	r3, #8
 800fce8:	001a      	movs	r2, r3
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	695b      	ldr	r3, [r3, #20]
 800fcf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d105      	bne.n	800fd04 <_tx_byte_pool_search+0x1d8>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800fcf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fcfa:	62bb      	str	r3, [r7, #40]	@ 0x28
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800fcfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	615a      	str	r2, [r3, #20]
 800fd04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd06:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f383 8810 	msr	PRIMASK, r3
}
 800fd0e:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800fd10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd12:	3308      	adds	r3, #8
 800fd14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fd16:	e007      	b.n	800fd28 <_tx_byte_pool_search+0x1fc>
 800fd18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd1a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	f383 8810 	msr	PRIMASK, r3
}
 800fd22:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800fd24:	2300      	movs	r3, #0
 800fd26:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800fd28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800fd2a:	0018      	movs	r0, r3
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	b014      	add	sp, #80	@ 0x50
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	46c0      	nop			@ (mov r8, r8)
 800fd34:	20011198 	.word	0x20011198
 800fd38:	ffffeeee 	.word	0xffffeeee

0800fd3c <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b08c      	sub	sp, #48	@ 0x30
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fd46:	f3ef 8310 	mrs	r3, PRIMASK
 800fd4a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fd4c:	b672      	cpsid	i
    return(primask_value);
 800fd4e:	697b      	ldr	r3, [r7, #20]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 800fd50:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fd56:	4b37      	ldr	r3, [pc, #220]	@ (800fe34 <_tx_event_flags_cleanup+0xf8>)
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	d161      	bne.n	800fe20 <_tx_event_flags_cleanup+0xe4>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	22ac      	movs	r2, #172	@ 0xac
 800fd60:	589b      	ldr	r3, [r3, r2]
 800fd62:	683a      	ldr	r2, [r7, #0]
 800fd64:	429a      	cmp	r2, r3
 800fd66:	d15b      	bne.n	800fe20 <_tx_event_flags_cleanup+0xe4>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd6c:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800fd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d055      	beq.n	800fe20 <_tx_event_flags_cleanup+0xe4>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800fd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	4a2f      	ldr	r2, [pc, #188]	@ (800fe38 <_tx_event_flags_cleanup+0xfc>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d150      	bne.n	800fe20 <_tx_event_flags_cleanup+0xe4>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800fd7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd80:	695b      	ldr	r3, [r3, #20]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d04c      	beq.n	800fe20 <_tx_event_flags_cleanup+0xe4>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800fd8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd8e:	695b      	ldr	r3, [r3, #20]
 800fd90:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800fd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd94:	691b      	ldr	r3, [r3, #16]
 800fd96:	623b      	str	r3, [r7, #32]

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 800fd98:	6a3b      	ldr	r3, [r7, #32]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d020      	beq.n	800fde0 <_tx_event_flags_cleanup+0xa4>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800fd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fda0:	3b01      	subs	r3, #1
 800fda2:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800fda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fda6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fda8:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d103      	bne.n	800fdb8 <_tx_event_flags_cleanup+0x7c>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800fdb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	611a      	str	r2, [r3, #16]
 800fdb6:	e016      	b.n	800fde6 <_tx_event_flags_cleanup+0xaa>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fdbc:	61fb      	str	r3, [r7, #28]
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdc2:	61bb      	str	r3, [r7, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	69ba      	ldr	r2, [r7, #24]
 800fdc8:	675a      	str	r2, [r3, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800fdca:	69bb      	ldr	r3, [r7, #24]
 800fdcc:	69fa      	ldr	r2, [r7, #28]
 800fdce:	671a      	str	r2, [r3, #112]	@ 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 800fdd0:	6a3a      	ldr	r2, [r7, #32]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d106      	bne.n	800fde6 <_tx_event_flags_cleanup+0xaa>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800fdd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdda:	69fa      	ldr	r2, [r7, #28]
 800fddc:	611a      	str	r2, [r3, #16]
 800fdde:	e002      	b.n	800fde6 <_tx_event_flags_cleanup+0xaa>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800fde0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fde2:	2201      	movs	r2, #1
 800fde4:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdea:	2b07      	cmp	r3, #7
 800fdec:	d118      	bne.n	800fe20 <_tx_event_flags_cleanup+0xe4>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2284      	movs	r2, #132	@ 0x84
 800fdf2:	2107      	movs	r1, #7
 800fdf4:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fdf6:	4b11      	ldr	r3, [pc, #68]	@ (800fe3c <_tx_event_flags_cleanup+0x100>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	1c5a      	adds	r2, r3, #1
 800fdfc:	4b0f      	ldr	r3, [pc, #60]	@ (800fe3c <_tx_event_flags_cleanup+0x100>)
 800fdfe:	601a      	str	r2, [r3, #0]
 800fe00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe02:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	f383 8810 	msr	PRIMASK, r3
}
 800fe0a:	46c0      	nop			@ (mov r8, r8)
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	0018      	movs	r0, r3
 800fe10:	f002 fca0 	bl	8012754 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fe14:	f3ef 8310 	mrs	r3, PRIMASK
 800fe18:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fe1a:	b672      	cpsid	i
    return(primask_value);
 800fe1c:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800fe1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe22:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	f383 8810 	msr	PRIMASK, r3
}
 800fe2a:	46c0      	nop			@ (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800fe2c:	46c0      	nop			@ (mov r8, r8)
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	b00c      	add	sp, #48	@ 0x30
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	0800fd3d 	.word	0x0800fd3d
 800fe38:	4456444e 	.word	0x4456444e
 800fe3c:	20011230 	.word	0x20011230

0800fe40 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b08c      	sub	sp, #48	@ 0x30
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe4e:	2327      	movs	r3, #39	@ 0x27
 800fe50:	18fb      	adds	r3, r7, r3
 800fe52:	2200      	movs	r2, #0
 800fe54:	701a      	strb	r2, [r3, #0]
 800fe56:	2324      	movs	r3, #36	@ 0x24
 800fe58:	623b      	str	r3, [r7, #32]
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fe5e:	e009      	b.n	800fe74 <_tx_event_flags_create+0x34>
 800fe60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe62:	1c5a      	adds	r2, r3, #1
 800fe64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fe66:	2227      	movs	r2, #39	@ 0x27
 800fe68:	18ba      	adds	r2, r7, r2
 800fe6a:	7812      	ldrb	r2, [r2, #0]
 800fe6c:	701a      	strb	r2, [r3, #0]
 800fe6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe70:	3301      	adds	r3, #1
 800fe72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fe74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe76:	6a3b      	ldr	r3, [r7, #32]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d3f1      	bcc.n	800fe60 <_tx_event_flags_create+0x20>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	683a      	ldr	r2, [r7, #0]
 800fe80:	605a      	str	r2, [r3, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fe82:	f3ef 8310 	mrs	r3, PRIMASK
 800fe86:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fe88:	b672      	cpsid	i
    return(primask_value);
 800fe8a:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800fe8c:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	4a18      	ldr	r2, [pc, #96]	@ (800fef4 <_tx_event_flags_create+0xb4>)
 800fe92:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800fe94:	4b18      	ldr	r3, [pc, #96]	@ (800fef8 <_tx_event_flags_create+0xb8>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d109      	bne.n	800feb0 <_tx_event_flags_create+0x70>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800fe9c:	4b17      	ldr	r3, [pc, #92]	@ (800fefc <_tx_event_flags_create+0xbc>)
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	601a      	str	r2, [r3, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	687a      	ldr	r2, [r7, #4]
 800feac:	61da      	str	r2, [r3, #28]
 800feae:	e011      	b.n	800fed4 <_tx_event_flags_create+0x94>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800feb0:	4b12      	ldr	r3, [pc, #72]	@ (800fefc <_tx_event_flags_create+0xbc>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800feb6:	69bb      	ldr	r3, [r7, #24]
 800feb8:	69db      	ldr	r3, [r3, #28]
 800feba:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800febc:	69bb      	ldr	r3, [r7, #24]
 800febe:	687a      	ldr	r2, [r7, #4]
 800fec0:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	697a      	ldr	r2, [r7, #20]
 800fecc:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	69ba      	ldr	r2, [r7, #24]
 800fed2:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800fed4:	4b08      	ldr	r3, [pc, #32]	@ (800fef8 <_tx_event_flags_create+0xb8>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	1c5a      	adds	r2, r3, #1
 800feda:	4b07      	ldr	r3, [pc, #28]	@ (800fef8 <_tx_event_flags_create+0xb8>)
 800fedc:	601a      	str	r2, [r3, #0]
 800fede:	69fb      	ldr	r3, [r7, #28]
 800fee0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f383 8810 	msr	PRIMASK, r3
}
 800fee8:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800feea:	2300      	movs	r3, #0
}
 800feec:	0018      	movs	r0, r3
 800feee:	46bd      	mov	sp, r7
 800fef0:	b00c      	add	sp, #48	@ 0x30
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	4456444e 	.word	0x4456444e
 800fef8:	20011174 	.word	0x20011174
 800fefc:	20011170 	.word	0x20011170

0800ff00 <_tx_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b08e      	sub	sp, #56	@ 0x38
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ff08:	f3ef 8310 	mrs	r3, PRIMASK
 800ff0c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ff0e:	b672      	cpsid	i
    return(primask_value);
 800ff10:	69fb      	ldr	r3, [r7, #28]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Disable interrupts to remove the group from the created list.  */
    TX_DISABLE
 800ff12:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_DELETE_INSERT

    /* Clear the event flag group ID to make it invalid.  */
    group_ptr -> tx_event_flags_group_id =  TX_CLEAR_ID;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2200      	movs	r2, #0
 800ff18:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created event flag groups.  */
    _tx_event_flags_created_count--;
 800ff1a:	4b3c      	ldr	r3, [pc, #240]	@ (801000c <_tx_event_flags_delete+0x10c>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	1e5a      	subs	r2, r3, #1
 800ff20:	4b3a      	ldr	r3, [pc, #232]	@ (801000c <_tx_event_flags_delete+0x10c>)
 800ff22:	601a      	str	r2, [r3, #0]

    /* See if this group is the only one on the list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800ff24:	4b39      	ldr	r3, [pc, #228]	@ (801000c <_tx_event_flags_delete+0x10c>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d103      	bne.n	800ff34 <_tx_event_flags_delete+0x34>
    {

        /* Only created event flag group, just set the created list to NULL.  */
        _tx_event_flags_created_ptr =  TX_NULL;
 800ff2c:	4b38      	ldr	r3, [pc, #224]	@ (8010010 <_tx_event_flags_delete+0x110>)
 800ff2e:	2200      	movs	r2, #0
 800ff30:	601a      	str	r2, [r3, #0]
 800ff32:	e013      	b.n	800ff5c <_tx_event_flags_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_group =                                           group_ptr -> tx_event_flags_group_created_next;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	699b      	ldr	r3, [r3, #24]
 800ff38:	62bb      	str	r3, [r7, #40]	@ 0x28
        previous_group =                                       group_ptr -> tx_event_flags_group_created_previous;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	69db      	ldr	r3, [r3, #28]
 800ff3e:	627b      	str	r3, [r7, #36]	@ 0x24
        next_group -> tx_event_flags_group_created_previous =  previous_group;
 800ff40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff44:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  next_group;
 800ff46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff4a:	619a      	str	r2, [r3, #24]

        /* See if we have to update the created list head pointer.  */
        if (_tx_event_flags_created_ptr == group_ptr)
 800ff4c:	4b30      	ldr	r3, [pc, #192]	@ (8010010 <_tx_event_flags_delete+0x110>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d102      	bne.n	800ff5c <_tx_event_flags_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_event_flags_created_ptr =  next_group;
 800ff56:	4b2e      	ldr	r3, [pc, #184]	@ (8010010 <_tx_event_flags_delete+0x110>)
 800ff58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff5a:	601a      	str	r2, [r3, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ff5c:	4b2d      	ldr	r3, [pc, #180]	@ (8010014 <_tx_event_flags_delete+0x114>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	1c5a      	adds	r2, r3, #1
 800ff62:	4b2c      	ldr	r3, [pc, #176]	@ (8010014 <_tx_event_flags_delete+0x114>)
 800ff64:	601a      	str	r2, [r3, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                         group_ptr -> tx_event_flags_group_suspension_list;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	691b      	ldr	r3, [r3, #16]
 800ff6a:	637b      	str	r3, [r7, #52]	@ 0x34
    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	611a      	str	r2, [r3, #16]
    suspended_count =                                    group_ptr -> tx_event_flags_group_suspended_count;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	695b      	ldr	r3, [r3, #20]
 800ff76:	633b      	str	r3, [r7, #48]	@ 0x30
    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	615a      	str	r2, [r3, #20]
 800ff7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff80:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ff82:	69bb      	ldr	r3, [r7, #24]
 800ff84:	f383 8810 	msr	PRIMASK, r3
}
 800ff88:	46c0      	nop			@ (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the event flag suspension list to resume any and all threads
       suspended on this group.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800ff8a:	e023      	b.n	800ffd4 <_tx_event_flags_delete+0xd4>
    {

        /* Decrement the number of suspended threads.  */
        suspended_count--;
 800ff8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff8e:	3b01      	subs	r3, #1
 800ff90:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ff92:	f3ef 8310 	mrs	r3, PRIMASK
 800ff96:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ff98:	b672      	cpsid	i
    return(primask_value);
 800ff9a:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 800ff9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ff9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800ffa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffa6:	2284      	movs	r2, #132	@ 0x84
 800ffa8:	2101      	movs	r1, #1
 800ffaa:	5099      	str	r1, [r3, r2]

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800ffac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ffb0:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800ffb2:	4b18      	ldr	r3, [pc, #96]	@ (8010014 <_tx_event_flags_delete+0x114>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	1c5a      	adds	r2, r3, #1
 800ffb8:	4b16      	ldr	r3, [pc, #88]	@ (8010014 <_tx_event_flags_delete+0x114>)
 800ffba:	601a      	str	r2, [r3, #0]
 800ffbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffbe:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	f383 8810 	msr	PRIMASK, r3
}
 800ffc6:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800ffc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffca:	0018      	movs	r0, r3
 800ffcc:	f002 fbc2 	bl	8012754 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800ffd0:	6a3b      	ldr	r3, [r7, #32]
 800ffd2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 800ffd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d1d8      	bne.n	800ff8c <_tx_event_flags_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ffda:	f3ef 8310 	mrs	r3, PRIMASK
 800ffde:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ffe0:	b672      	cpsid	i
    return(primask_value);
 800ffe2:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_EVENT_FLAGS_GROUP_DELETE_PORT_COMPLETION(group_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800ffe4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800ffe6:	4b0b      	ldr	r3, [pc, #44]	@ (8010014 <_tx_event_flags_delete+0x114>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	1e5a      	subs	r2, r3, #1
 800ffec:	4b09      	ldr	r3, [pc, #36]	@ (8010014 <_tx_event_flags_delete+0x114>)
 800ffee:	601a      	str	r2, [r3, #0]
 800fff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fff2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	f383 8810 	msr	PRIMASK, r3
}
 800fffa:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800fffc:	f002 fb72 	bl	80126e4 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010000:	2300      	movs	r3, #0
}
 8010002:	0018      	movs	r0, r3
 8010004:	46bd      	mov	sp, r7
 8010006:	b00e      	add	sp, #56	@ 0x38
 8010008:	bd80      	pop	{r7, pc}
 801000a:	46c0      	nop			@ (mov r8, r8)
 801000c:	20011174 	.word	0x20011174
 8010010:	20011170 	.word	0x20011170
 8010014:	20011230 	.word	0x20011230

08010018 <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b094      	sub	sp, #80	@ 0x50
 801001c:	af00      	add	r7, sp, #0
 801001e:	60f8      	str	r0, [r7, #12]
 8010020:	60b9      	str	r1, [r7, #8]
 8010022:	607a      	str	r2, [r7, #4]
 8010024:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010026:	f3ef 8310 	mrs	r3, PRIMASK
 801002a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801002c:	b672      	cpsid	i
    return(primask_value);
 801002e:	69fb      	ldr	r3, [r7, #28]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 8010030:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	689b      	ldr	r3, [r3, #8]
 8010036:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2202      	movs	r2, #2
 801003c:	4013      	ands	r3, r2
 801003e:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6a1b      	ldr	r3, [r3, #32]
 8010044:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 8010046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010048:	2b00      	cmp	r3, #0
 801004a:	d004      	beq.n	8010056 <_tx_event_flags_get+0x3e>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 801004c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801004e:	43da      	mvns	r2, r3
 8010050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010052:	4013      	ands	r3, r2
 8010054:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 8010056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010058:	2b02      	cmp	r3, #2
 801005a:	d10a      	bne.n	8010072 <_tx_event_flags_get+0x5a>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 801005c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801005e:	68ba      	ldr	r2, [r7, #8]
 8010060:	4013      	ands	r3, r2
 8010062:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 8010064:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	429a      	cmp	r2, r3
 801006a:	d006      	beq.n	801007a <_tx_event_flags_get+0x62>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 801006c:	2300      	movs	r3, #0
 801006e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010070:	e003      	b.n	801007a <_tx_event_flags_get+0x62>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8010072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010074:	68ba      	ldr	r2, [r7, #8]
 8010076:	4013      	ands	r3, r2
 8010078:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 801007a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801007c:	2b00      	cmp	r3, #0
 801007e:	d029      	beq.n	80100d4 <_tx_event_flags_get+0xbc>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010084:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2201      	movs	r2, #1
 801008a:	4013      	ands	r3, r2
 801008c:	623b      	str	r3, [r7, #32]

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 801008e:	6a3b      	ldr	r3, [r7, #32]
 8010090:	2b01      	cmp	r3, #1
 8010092:	d11c      	bne.n	80100ce <_tx_event_flags_get+0xb6>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 8010094:	2300      	movs	r3, #0
 8010096:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	695b      	ldr	r3, [r3, #20]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d005      	beq.n	80100ac <_tx_event_flags_get+0x94>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	691b      	ldr	r3, [r3, #16]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d101      	bne.n	80100ac <_tx_event_flags_get+0x94>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 80100a8:	2301      	movs	r3, #1
 80100aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 80100ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100ae:	2b01      	cmp	r3, #1
 80100b0:	d106      	bne.n	80100c0 <_tx_event_flags_get+0xa8>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	6a1a      	ldr	r2, [r3, #32]
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	621a      	str	r2, [r3, #32]
 80100be:	e006      	b.n	80100ce <_tx_event_flags_get+0xb6>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	689b      	ldr	r3, [r3, #8]
 80100c4:	68ba      	ldr	r2, [r7, #8]
 80100c6:	43d2      	mvns	r2, r2
 80100c8:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 80100ce:	2300      	movs	r3, #0
 80100d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80100d2:	e06f      	b.n	80101b4 <_tx_event_flags_get+0x19c>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80100d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d06a      	beq.n	80101b0 <_tx_event_flags_get+0x198>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80100da:	4b3c      	ldr	r3, [pc, #240]	@ (80101cc <_tx_event_flags_get+0x1b4>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d002      	beq.n	80100e8 <_tx_event_flags_get+0xd0>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 80100e2:	2307      	movs	r3, #7
 80100e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80100e6:	e065      	b.n	80101b4 <_tx_event_flags_get+0x19c>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 80100e8:	4b39      	ldr	r3, [pc, #228]	@ (80101d0 <_tx_event_flags_get+0x1b8>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	633b      	str	r3, [r7, #48]	@ 0x30

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 80100ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100f0:	4a38      	ldr	r2, [pc, #224]	@ (80101d4 <_tx_event_flags_get+0x1bc>)
 80100f2:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 80100f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100f6:	68ba      	ldr	r2, [r7, #8]
 80100f8:	679a      	str	r2, [r3, #120]	@ 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 80100fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100fc:	2180      	movs	r1, #128	@ 0x80
 80100fe:	687a      	ldr	r2, [r7, #4]
 8010100:	505a      	str	r2, [r3, r1]

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 8010102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010104:	683a      	ldr	r2, [r7, #0]
 8010106:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 8010108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801010a:	68fa      	ldr	r2, [r7, #12]
 801010c:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 801010e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010110:	22ac      	movs	r2, #172	@ 0xac
 8010112:	589b      	ldr	r3, [r3, r2]
 8010114:	1c5a      	adds	r2, r3, #1
 8010116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010118:	21ac      	movs	r1, #172	@ 0xac
 801011a:	505a      	str	r2, [r3, r1]
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	695b      	ldr	r3, [r3, #20]
 8010120:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8010122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010124:	2b00      	cmp	r3, #0
 8010126:	d109      	bne.n	801013c <_tx_event_flags_get+0x124>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801012c:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 801012e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010132:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 8010134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010138:	675a      	str	r2, [r3, #116]	@ 0x74
 801013a:	e011      	b.n	8010160 <_tx_event_flags_get+0x148>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	691b      	ldr	r3, [r3, #16]
 8010140:	62bb      	str	r3, [r7, #40]	@ 0x28
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8010142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010144:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010146:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801014a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801014c:	627b      	str	r3, [r7, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801014e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010152:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010158:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801015a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801015c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801015e:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	695b      	ldr	r3, [r3, #20]
 8010164:	1c5a      	adds	r2, r3, #1
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 801016a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801016c:	2207      	movs	r2, #7
 801016e:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010172:	2201      	movs	r2, #1
 8010174:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010178:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801017a:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801017c:	4b13      	ldr	r3, [pc, #76]	@ (80101cc <_tx_event_flags_get+0x1b4>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	1c5a      	adds	r2, r3, #1
 8010182:	4b12      	ldr	r3, [pc, #72]	@ (80101cc <_tx_event_flags_get+0x1b4>)
 8010184:	601a      	str	r2, [r3, #0]
 8010186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010188:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	f383 8810 	msr	PRIMASK, r3
}
 8010190:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8010192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010194:	0018      	movs	r0, r3
 8010196:	f002 fbdd 	bl	8012954 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801019a:	f3ef 8310 	mrs	r3, PRIMASK
 801019e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80101a0:	b672      	cpsid	i
    return(primask_value);
 80101a2:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 80101a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80101a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101a8:	2284      	movs	r2, #132	@ 0x84
 80101aa:	589b      	ldr	r3, [r3, r2]
 80101ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80101ae:	e001      	b.n	80101b4 <_tx_event_flags_get+0x19c>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 80101b0:	2307      	movs	r3, #7
 80101b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80101b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	f383 8810 	msr	PRIMASK, r3
}
 80101be:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 80101c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80101c2:	0018      	movs	r0, r3
 80101c4:	46bd      	mov	sp, r7
 80101c6:	b014      	add	sp, #80	@ 0x50
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	46c0      	nop			@ (mov r8, r8)
 80101cc:	20011230 	.word	0x20011230
 80101d0:	20011198 	.word	0x20011198
 80101d4:	0800fd3d 	.word	0x0800fd3d

080101d8 <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 80101d8:	b590      	push	{r4, r7, lr}
 80101da:	b0a3      	sub	sp, #140	@ 0x8c
 80101dc:	af00      	add	r7, sp, #0
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	607a      	str	r2, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80101e4:	f3ef 8310 	mrs	r3, PRIMASK
 80101e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" CPSID i" : : : "memory" );
 80101ea:	b672      	cpsid	i
    return(primask_value);
 80101ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 80101ee:	2284      	movs	r2, #132	@ 0x84
 80101f0:	18ba      	adds	r2, r7, r2
 80101f2:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2202      	movs	r2, #2
 80101f8:	4013      	ands	r3, r2
 80101fa:	d024      	beq.n	8010246 <_tx_event_flags_set+0x6e>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 80101fc:	2300      	movs	r3, #0
 80101fe:	663b      	str	r3, [r7, #96]	@ 0x60

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	695b      	ldr	r3, [r3, #20]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d005      	beq.n	8010214 <_tx_event_flags_set+0x3c>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	691b      	ldr	r3, [r3, #16]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d101      	bne.n	8010214 <_tx_event_flags_set+0x3c>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 8010210:	2301      	movs	r3, #1
 8010212:	663b      	str	r3, [r7, #96]	@ 0x60
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 8010214:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010216:	2b01      	cmp	r3, #1
 8010218:	d107      	bne.n	801022a <_tx_event_flags_set+0x52>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	6a1a      	ldr	r2, [r3, #32]
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	43db      	mvns	r3, r3
 8010222:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	621a      	str	r2, [r3, #32]
 8010228:	e005      	b.n	8010236 <_tx_event_flags_set+0x5e>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	689b      	ldr	r3, [r3, #8]
 801022e:	68ba      	ldr	r2, [r7, #8]
 8010230:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	609a      	str	r2, [r3, #8]
 8010236:	2384      	movs	r3, #132	@ 0x84
 8010238:	18fb      	adds	r3, r7, r3
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801023e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010240:	f383 8810 	msr	PRIMASK, r3
}
 8010244:	e1ce      	b.n	80105e4 <_tx_event_flags_set+0x40c>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	689a      	ldr	r2, [r3, #8]
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	6a1b      	ldr	r3, [r3, #32]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d006      	beq.n	8010268 <_tx_event_flags_set+0x90>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	6a1b      	ldr	r3, [r3, #32]
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	43d2      	mvns	r2, r2
 8010262:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 8010268:	2300      	movs	r3, #0
 801026a:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	695b      	ldr	r3, [r3, #20]
 8010270:	673b      	str	r3, [r7, #112]	@ 0x70

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	691b      	ldr	r3, [r3, #16]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d100      	bne.n	801027c <_tx_event_flags_set+0xa4>
 801027a:	e19f      	b.n	80105bc <_tx_event_flags_set+0x3e4>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 801027c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801027e:	2b01      	cmp	r3, #1
 8010280:	d16c      	bne.n	801035c <_tx_event_flags_set+0x184>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	691b      	ldr	r3, [r3, #16]
 8010286:	2280      	movs	r2, #128	@ 0x80
 8010288:	18b9      	adds	r1, r7, r2
 801028a:	600b      	str	r3, [r1, #0]

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	689b      	ldr	r3, [r3, #8]
 8010290:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8010292:	18bb      	adds	r3, r7, r2
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010298:	65bb      	str	r3, [r7, #88]	@ 0x58

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 801029a:	18bb      	adds	r3, r7, r2
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2280      	movs	r2, #128	@ 0x80
 80102a0:	589b      	ldr	r3, [r3, r2]
 80102a2:	657b      	str	r3, [r7, #84]	@ 0x54

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 80102a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102a6:	2202      	movs	r2, #2
 80102a8:	4013      	ands	r3, r2
 80102aa:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 80102ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80102ae:	2b02      	cmp	r3, #2
 80102b0:	d10a      	bne.n	80102c8 <_tx_event_flags_set+0xf0>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 80102b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80102b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80102b6:	4013      	ands	r3, r2
 80102b8:	66bb      	str	r3, [r7, #104]	@ 0x68

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 80102ba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80102bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80102be:	429a      	cmp	r2, r3
 80102c0:	d006      	beq.n	80102d0 <_tx_event_flags_set+0xf8>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 80102c2:	2300      	movs	r3, #0
 80102c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80102c6:	e003      	b.n	80102d0 <_tx_event_flags_set+0xf8>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 80102c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80102ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80102cc:	4013      	ands	r3, r2
 80102ce:	66bb      	str	r3, [r7, #104]	@ 0x68
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 80102d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d100      	bne.n	80102d8 <_tx_event_flags_set+0x100>
 80102d6:	e178      	b.n	80105ca <_tx_event_flags_set+0x3f2>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 80102d8:	2301      	movs	r3, #1
 80102da:	667b      	str	r3, [r7, #100]	@ 0x64

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80102dc:	2380      	movs	r3, #128	@ 0x80
 80102de:	18fb      	adds	r3, r7, r3
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80102e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    *suspend_info_ptr =  current_event_flags;
 80102e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80102ea:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 80102ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102ee:	2201      	movs	r2, #1
 80102f0:	4013      	ands	r3, r2
 80102f2:	64bb      	str	r3, [r7, #72]	@ 0x48

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 80102f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	d106      	bne.n	8010308 <_tx_event_flags_set+0x130>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	689b      	ldr	r3, [r3, #8]
 80102fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010300:	43d2      	mvns	r2, r2
 8010302:	401a      	ands	r2, r3
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2200      	movs	r2, #0
 801030c:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2200      	movs	r2, #0
 8010312:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010314:	2080      	movs	r0, #128	@ 0x80
 8010316:	183b      	adds	r3, r7, r0
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	2200      	movs	r2, #0
 801031c:	669a      	str	r2, [r3, #104]	@ 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801031e:	183b      	adds	r3, r7, r0
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	2284      	movs	r2, #132	@ 0x84
 8010324:	2100      	movs	r1, #0
 8010326:	5099      	str	r1, [r3, r2]
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 8010328:	4bb1      	ldr	r3, [pc, #708]	@ (80105f0 <_tx_event_flags_set+0x418>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	1c5a      	adds	r2, r3, #1
 801032e:	4bb0      	ldr	r3, [pc, #704]	@ (80105f0 <_tx_event_flags_set+0x418>)
 8010330:	601a      	str	r2, [r3, #0]
 8010332:	2484      	movs	r4, #132	@ 0x84
 8010334:	193b      	adds	r3, r7, r4
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801033a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801033c:	f383 8810 	msr	PRIMASK, r3
}
 8010340:	46c0      	nop			@ (mov r8, r8)

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8010342:	183b      	adds	r3, r7, r0
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	0018      	movs	r0, r3
 8010348:	f002 fa04 	bl	8012754 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801034c:	f3ef 8310 	mrs	r3, PRIMASK
 8010350:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010352:	b672      	cpsid	i
    return(primask_value);
 8010354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 8010356:	193a      	adds	r2, r7, r4
 8010358:	6013      	str	r3, [r2, #0]
 801035a:	e136      	b.n	80105ca <_tx_event_flags_set+0x3f2>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	691b      	ldr	r3, [r3, #16]
 8010360:	677b      	str	r3, [r7, #116]	@ 0x74
                thread_ptr =      suspended_list;
 8010362:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010364:	2280      	movs	r2, #128	@ 0x80
 8010366:	18ba      	adds	r2, r7, r2
 8010368:	6013      	str	r3, [r2, #0]

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2200      	movs	r2, #0
 801036e:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 8010370:	2300      	movs	r3, #0
 8010372:	67fb      	str	r3, [r7, #124]	@ 0x7c
                last_satisfied =  TX_NULL;
 8010374:	2300      	movs	r3, #0
 8010376:	67bb      	str	r3, [r7, #120]	@ 0x78

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	689b      	ldr	r3, [r3, #8]
 801037c:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 801037e:	4b9c      	ldr	r3, [pc, #624]	@ (80105f0 <_tx_event_flags_set+0x418>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	1c5a      	adds	r2, r3, #1
 8010384:	4b9a      	ldr	r3, [pc, #616]	@ (80105f0 <_tx_event_flags_set+0x418>)
 8010386:	601a      	str	r2, [r3, #0]
 8010388:	2284      	movs	r2, #132	@ 0x84
 801038a:	18bb      	adds	r3, r7, r2
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010392:	f383 8810 	msr	PRIMASK, r3
}
 8010396:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010398:	f3ef 8310 	mrs	r3, PRIMASK
 801039c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 801039e:	b672      	cpsid	i
    return(primask_value);
 80103a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 80103a2:	18ba      	adds	r2, r7, r2
 80103a4:	6013      	str	r3, [r2, #0]
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	68db      	ldr	r3, [r3, #12]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d00e      	beq.n	80103cc <_tx_event_flags_set+0x1f4>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	2200      	movs	r2, #0
 80103b2:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 80103b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80103b6:	2280      	movs	r2, #128	@ 0x80
 80103b8:	18ba      	adds	r2, r7, r2
 80103ba:	6013      	str	r3, [r2, #0]

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	695b      	ldr	r3, [r3, #20]
 80103c0:	673b      	str	r3, [r7, #112]	@ 0x70

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	689b      	ldr	r3, [r3, #8]
 80103c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80103c8:	4313      	orrs	r3, r2
 80103ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80103cc:	2280      	movs	r2, #128	@ 0x80
 80103ce:	18bb      	adds	r3, r7, r2
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103d4:	65fb      	str	r3, [r7, #92]	@ 0x5c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 80103d6:	18bb      	adds	r3, r7, r2
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80103dc:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 80103de:	18bb      	adds	r3, r7, r2
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	2280      	movs	r2, #128	@ 0x80
 80103e4:	589b      	ldr	r3, [r3, r2]
 80103e6:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 80103e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103ea:	2202      	movs	r2, #2
 80103ec:	4013      	ands	r3, r2
 80103ee:	653b      	str	r3, [r7, #80]	@ 0x50

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 80103f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80103f2:	2b02      	cmp	r3, #2
 80103f4:	d10a      	bne.n	801040c <_tx_event_flags_set+0x234>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 80103f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80103fa:	4013      	ands	r3, r2
 80103fc:	66bb      	str	r3, [r7, #104]	@ 0x68

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 80103fe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010400:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010402:	429a      	cmp	r2, r3
 8010404:	d006      	beq.n	8010414 <_tx_event_flags_set+0x23c>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 8010406:	2300      	movs	r3, #0
 8010408:	66bb      	str	r3, [r7, #104]	@ 0x68
 801040a:	e003      	b.n	8010414 <_tx_event_flags_set+0x23c>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 801040c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801040e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010410:	4013      	ands	r3, r2
 8010412:	66bb      	str	r3, [r7, #104]	@ 0x68
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 8010414:	2380      	movs	r3, #128	@ 0x80
 8010416:	18fb      	adds	r3, r7, r3
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801041c:	2b07      	cmp	r3, #7
 801041e:	d001      	beq.n	8010424 <_tx_event_flags_set+0x24c>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 8010420:	2301      	movs	r3, #1
 8010422:	66bb      	str	r3, [r7, #104]	@ 0x68
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 8010424:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010426:	2b00      	cmp	r3, #0
 8010428:	d069      	beq.n	80104fe <_tx_event_flags_set+0x326>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 801042a:	2301      	movs	r3, #1
 801042c:	667b      	str	r3, [r7, #100]	@ 0x64

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 801042e:	2280      	movs	r2, #128	@ 0x80
 8010430:	18bb      	adds	r3, r7, r2
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010436:	2b07      	cmp	r3, #7
 8010438:	d11e      	bne.n	8010478 <_tx_event_flags_set+0x2a0>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 801043a:	18bb      	adds	r3, r7, r2
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010440:	64fb      	str	r3, [r7, #76]	@ 0x4c
                            *suspend_info_ptr =  current_event_flags;
 8010442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010444:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010446:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8010448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801044a:	2201      	movs	r2, #1
 801044c:	4013      	ands	r3, r2
 801044e:	64bb      	str	r3, [r7, #72]	@ 0x48

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 8010450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010452:	2b01      	cmp	r3, #1
 8010454:	d106      	bne.n	8010464 <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	689b      	ldr	r3, [r3, #8]
 801045a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801045c:	43d2      	mvns	r2, r2
 801045e:	401a      	ands	r2, r3
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010464:	2180      	movs	r1, #128	@ 0x80
 8010466:	187b      	adds	r3, r7, r1
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	2200      	movs	r2, #0
 801046c:	669a      	str	r2, [r3, #104]	@ 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801046e:	187b      	adds	r3, r7, r1
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2284      	movs	r2, #132	@ 0x84
 8010474:	2100      	movs	r1, #0
 8010476:	5099      	str	r1, [r3, r2]

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8010478:	2280      	movs	r2, #128	@ 0x80
 801047a:	18bb      	adds	r3, r7, r2
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010480:	18ba      	adds	r2, r7, r2
 8010482:	6812      	ldr	r2, [r2, #0]
 8010484:	429a      	cmp	r2, r3
 8010486:	d102      	bne.n	801048e <_tx_event_flags_set+0x2b6>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 8010488:	2300      	movs	r3, #0
 801048a:	677b      	str	r3, [r7, #116]	@ 0x74
 801048c:	e017      	b.n	80104be <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 801048e:	2180      	movs	r1, #128	@ 0x80
 8010490:	187b      	adds	r3, r7, r1
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010496:	647b      	str	r3, [r7, #68]	@ 0x44
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8010498:	187b      	adds	r3, r7, r1
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801049e:	643b      	str	r3, [r7, #64]	@ 0x40
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80104a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80104a4:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 80104a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104aa:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 80104ac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80104ae:	187b      	adds	r3, r7, r1
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d103      	bne.n	80104be <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 80104b6:	187b      	adds	r3, r7, r1
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80104bc:	677b      	str	r3, [r7, #116]	@ 0x74
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	695b      	ldr	r3, [r3, #20]
 80104c2:	1e5a      	subs	r2, r3, #1
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 80104c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d10b      	bne.n	80104e6 <_tx_event_flags_set+0x30e>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 80104ce:	2280      	movs	r2, #128	@ 0x80
 80104d0:	18bb      	adds	r3, r7, r2
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
                            last_satisfied =  thread_ptr;
 80104d6:	18bb      	adds	r3, r7, r2
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	67bb      	str	r3, [r7, #120]	@ 0x78

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 80104dc:	18bb      	adds	r3, r7, r2
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2200      	movs	r2, #0
 80104e2:	671a      	str	r2, [r3, #112]	@ 0x70
 80104e4:	e00b      	b.n	80104fe <_tx_event_flags_set+0x326>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 80104e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80104e8:	2180      	movs	r1, #128	@ 0x80
 80104ea:	187a      	adds	r2, r7, r1
 80104ec:	6812      	ldr	r2, [r2, #0]
 80104ee:	671a      	str	r2, [r3, #112]	@ 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 80104f0:	187b      	adds	r3, r7, r1
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2200      	movs	r2, #0
 80104f6:	671a      	str	r2, [r3, #112]	@ 0x70
                            last_satisfied =                              thread_ptr;
 80104f8:	187b      	adds	r3, r7, r1
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	67bb      	str	r3, [r7, #120]	@ 0x78
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 80104fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010500:	2280      	movs	r2, #128	@ 0x80
 8010502:	18ba      	adds	r2, r7, r2
 8010504:	6013      	str	r3, [r2, #0]

                    /* Decrement the suspension count.  */
                    suspended_count--;
 8010506:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010508:	3b01      	subs	r3, #1
 801050a:	673b      	str	r3, [r7, #112]	@ 0x70

                } while (suspended_count != TX_NO_SUSPENSIONS);
 801050c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801050e:	2b00      	cmp	r3, #0
 8010510:	d000      	beq.n	8010514 <_tx_event_flags_set+0x33c>
 8010512:	e739      	b.n	8010388 <_tx_event_flags_set+0x1b0>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010518:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	6a1b      	ldr	r3, [r3, #32]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d00a      	beq.n	8010538 <_tx_event_flags_set+0x360>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	689a      	ldr	r2, [r3, #8]
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	6a1b      	ldr	r3, [r3, #32]
 801052a:	43db      	mvns	r3, r3
 801052c:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	2200      	movs	r2, #0
 8010536:	621a      	str	r2, [r3, #32]
 8010538:	2384      	movs	r3, #132	@ 0x84
 801053a:	18fb      	adds	r3, r7, r3
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010542:	f383 8810 	msr	PRIMASK, r3
}
 8010546:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 8010548:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801054a:	2280      	movs	r2, #128	@ 0x80
 801054c:	18ba      	adds	r2, r7, r2
 801054e:	6013      	str	r3, [r2, #0]
                while(thread_ptr != TX_NULL)
 8010550:	e021      	b.n	8010596 <_tx_event_flags_set+0x3be>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8010552:	2180      	movs	r1, #128	@ 0x80
 8010554:	187b      	adds	r3, r7, r1
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801055a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801055c:	f3ef 8310 	mrs	r3, PRIMASK
 8010560:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010562:	b672      	cpsid	i
    return(primask_value);
 8010564:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8010566:	2084      	movs	r0, #132	@ 0x84
 8010568:	183a      	adds	r2, r7, r0
 801056a:	6013      	str	r3, [r2, #0]
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 801056c:	4b20      	ldr	r3, [pc, #128]	@ (80105f0 <_tx_event_flags_set+0x418>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	1c5a      	adds	r2, r3, #1
 8010572:	4b1f      	ldr	r3, [pc, #124]	@ (80105f0 <_tx_event_flags_set+0x418>)
 8010574:	601a      	str	r2, [r3, #0]
 8010576:	183b      	adds	r3, r7, r0
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801057c:	6a3b      	ldr	r3, [r7, #32]
 801057e:	f383 8810 	msr	PRIMASK, r3
}
 8010582:	46c0      	nop			@ (mov r8, r8)

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8010584:	000c      	movs	r4, r1
 8010586:	187b      	adds	r3, r7, r1
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	0018      	movs	r0, r3
 801058c:	f002 f8e2 	bl	8012754 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 8010590:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010592:	193a      	adds	r2, r7, r4
 8010594:	6013      	str	r3, [r2, #0]
                while(thread_ptr != TX_NULL)
 8010596:	2380      	movs	r3, #128	@ 0x80
 8010598:	18fb      	adds	r3, r7, r3
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d1d8      	bne.n	8010552 <_tx_event_flags_set+0x37a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80105a0:	f3ef 8310 	mrs	r3, PRIMASK
 80105a4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80105a6:	b672      	cpsid	i
    return(primask_value);
 80105a8:	69bb      	ldr	r3, [r7, #24]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 80105aa:	2284      	movs	r2, #132	@ 0x84
 80105ac:	18ba      	adds	r2, r7, r2
 80105ae:	6013      	str	r3, [r2, #0]

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 80105b0:	4b0f      	ldr	r3, [pc, #60]	@ (80105f0 <_tx_event_flags_set+0x418>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	1e5a      	subs	r2, r3, #1
 80105b6:	4b0e      	ldr	r3, [pc, #56]	@ (80105f0 <_tx_event_flags_set+0x418>)
 80105b8:	601a      	str	r2, [r3, #0]
 80105ba:	e006      	b.n	80105ca <_tx_event_flags_set+0x3f2>
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	695b      	ldr	r3, [r3, #20]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d002      	beq.n	80105ca <_tx_event_flags_set+0x3f2>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2201      	movs	r2, #1
 80105c8:	60da      	str	r2, [r3, #12]
 80105ca:	2384      	movs	r3, #132	@ 0x84
 80105cc:	18fb      	adds	r3, r7, r3
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	f383 8810 	msr	PRIMASK, r3
}
 80105d8:	46c0      	nop			@ (mov r8, r8)
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 80105da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80105dc:	2b01      	cmp	r3, #1
 80105de:	d101      	bne.n	80105e4 <_tx_event_flags_set+0x40c>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 80105e0:	f002 f880 	bl	80126e4 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 80105e4:	2300      	movs	r3, #0
}
 80105e6:	0018      	movs	r0, r3
 80105e8:	46bd      	mov	sp, r7
 80105ea:	b023      	add	sp, #140	@ 0x8c
 80105ec:	bd90      	pop	{r4, r7, pc}
 80105ee:	46c0      	nop			@ (mov r8, r8)
 80105f0:	20011230 	.word	0x20011230

080105f4 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80105f8:	f001 fe20 	bl	801223c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80105fc:	f002 fc88 	bl	8012f10 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8010600:	4b13      	ldr	r3, [pc, #76]	@ (8010650 <_tx_initialize_high_level+0x5c>)
 8010602:	2200      	movs	r2, #0
 8010604:	601a      	str	r2, [r3, #0]
 8010606:	4b13      	ldr	r3, [pc, #76]	@ (8010654 <_tx_initialize_high_level+0x60>)
 8010608:	2200      	movs	r2, #0
 801060a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 801060c:	4b12      	ldr	r3, [pc, #72]	@ (8010658 <_tx_initialize_high_level+0x64>)
 801060e:	2200      	movs	r2, #0
 8010610:	601a      	str	r2, [r3, #0]
 8010612:	4b12      	ldr	r3, [pc, #72]	@ (801065c <_tx_initialize_high_level+0x68>)
 8010614:	2200      	movs	r2, #0
 8010616:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8010618:	4b11      	ldr	r3, [pc, #68]	@ (8010660 <_tx_initialize_high_level+0x6c>)
 801061a:	2200      	movs	r2, #0
 801061c:	601a      	str	r2, [r3, #0]
 801061e:	4b11      	ldr	r3, [pc, #68]	@ (8010664 <_tx_initialize_high_level+0x70>)
 8010620:	2200      	movs	r2, #0
 8010622:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8010624:	4b10      	ldr	r3, [pc, #64]	@ (8010668 <_tx_initialize_high_level+0x74>)
 8010626:	2200      	movs	r2, #0
 8010628:	601a      	str	r2, [r3, #0]
 801062a:	4b10      	ldr	r3, [pc, #64]	@ (801066c <_tx_initialize_high_level+0x78>)
 801062c:	2200      	movs	r2, #0
 801062e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8010630:	4b0f      	ldr	r3, [pc, #60]	@ (8010670 <_tx_initialize_high_level+0x7c>)
 8010632:	2200      	movs	r2, #0
 8010634:	601a      	str	r2, [r3, #0]
 8010636:	4b0f      	ldr	r3, [pc, #60]	@ (8010674 <_tx_initialize_high_level+0x80>)
 8010638:	2200      	movs	r2, #0
 801063a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 801063c:	4b0e      	ldr	r3, [pc, #56]	@ (8010678 <_tx_initialize_high_level+0x84>)
 801063e:	2200      	movs	r2, #0
 8010640:	601a      	str	r2, [r3, #0]
 8010642:	4b0e      	ldr	r3, [pc, #56]	@ (801067c <_tx_initialize_high_level+0x88>)
 8010644:	2200      	movs	r2, #0
 8010646:	601a      	str	r2, [r3, #0]
#endif
}
 8010648:	46c0      	nop			@ (mov r8, r8)
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	46c0      	nop			@ (mov r8, r8)
 8010650:	20011160 	.word	0x20011160
 8010654:	20011164 	.word	0x20011164
 8010658:	20011168 	.word	0x20011168
 801065c:	2001116c 	.word	0x2001116c
 8010660:	20011170 	.word	0x20011170
 8010664:	20011174 	.word	0x20011174
 8010668:	20011180 	.word	0x20011180
 801066c:	20011184 	.word	0x20011184
 8010670:	20011188 	.word	0x20011188
 8010674:	2001118c 	.word	0x2001118c
 8010678:	20011178 	.word	0x20011178
 801067c:	2001117c 	.word	0x2001117c

08010680 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8010684:	4b10      	ldr	r3, [pc, #64]	@ (80106c8 <_tx_initialize_kernel_enter+0x48>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	4a10      	ldr	r2, [pc, #64]	@ (80106cc <_tx_initialize_kernel_enter+0x4c>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d00b      	beq.n	80106a6 <_tx_initialize_kernel_enter+0x26>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801068e:	4b0e      	ldr	r3, [pc, #56]	@ (80106c8 <_tx_initialize_kernel_enter+0x48>)
 8010690:	4a0f      	ldr	r2, [pc, #60]	@ (80106d0 <_tx_initialize_kernel_enter+0x50>)
 8010692:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8010694:	f7ef fd3c 	bl	8000110 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8010698:	f7ff ffac 	bl	80105f4 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 801069c:	4b0d      	ldr	r3, [pc, #52]	@ (80106d4 <_tx_initialize_kernel_enter+0x54>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	1c5a      	adds	r2, r3, #1
 80106a2:	4b0c      	ldr	r3, [pc, #48]	@ (80106d4 <_tx_initialize_kernel_enter+0x54>)
 80106a4:	601a      	str	r2, [r3, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80106a6:	4b08      	ldr	r3, [pc, #32]	@ (80106c8 <_tx_initialize_kernel_enter+0x48>)
 80106a8:	4a09      	ldr	r2, [pc, #36]	@ (80106d0 <_tx_initialize_kernel_enter+0x50>)
 80106aa:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80106ac:	4b0a      	ldr	r3, [pc, #40]	@ (80106d8 <_tx_initialize_kernel_enter+0x58>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	0018      	movs	r0, r3
 80106b2:	f7f5 ff53 	bl	800655c <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80106b6:	4b04      	ldr	r3, [pc, #16]	@ (80106c8 <_tx_initialize_kernel_enter+0x48>)
 80106b8:	2200      	movs	r2, #0
 80106ba:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80106bc:	f7ef fd70 	bl	80001a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80106c0:	46c0      	nop			@ (mov r8, r8)
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	46c0      	nop			@ (mov r8, r8)
 80106c8:	20000010 	.word	0x20000010
 80106cc:	f0f0f0f1 	.word	0xf0f0f0f1
 80106d0:	f0f0f0f0 	.word	0xf0f0f0f0
 80106d4:	20011230 	.word	0x20011230
 80106d8:	20011190 	.word	0x20011190

080106dc <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b08c      	sub	sp, #48	@ 0x30
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80106e6:	f3ef 8310 	mrs	r3, PRIMASK
 80106ea:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80106ec:	b672      	cpsid	i
    return(primask_value);
 80106ee:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 80106f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80106f6:	4b32      	ldr	r3, [pc, #200]	@ (80107c0 <_tx_mutex_cleanup+0xe4>)
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d157      	bne.n	80107ac <_tx_mutex_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	22ac      	movs	r2, #172	@ 0xac
 8010700:	589b      	ldr	r3, [r3, r2]
 8010702:	683a      	ldr	r2, [r7, #0]
 8010704:	429a      	cmp	r2, r3
 8010706:	d151      	bne.n	80107ac <_tx_mutex_cleanup+0xd0>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801070c:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 801070e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010710:	2b00      	cmp	r3, #0
 8010712:	d04b      	beq.n	80107ac <_tx_mutex_cleanup+0xd0>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8010714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	4a2a      	ldr	r2, [pc, #168]	@ (80107c4 <_tx_mutex_cleanup+0xe8>)
 801071a:	4293      	cmp	r3, r2
 801071c:	d146      	bne.n	80107ac <_tx_mutex_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 801071e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010720:	69db      	ldr	r3, [r3, #28]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d042      	beq.n	80107ac <_tx_mutex_cleanup+0xd0>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2200      	movs	r2, #0
 801072a:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 801072c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801072e:	69db      	ldr	r3, [r3, #28]
 8010730:	1e5a      	subs	r2, r3, #1
 8010732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010734:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8010736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010738:	69db      	ldr	r3, [r3, #28]
 801073a:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801073e:	2b00      	cmp	r3, #0
 8010740:	d103      	bne.n	801074a <_tx_mutex_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8010742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010744:	2200      	movs	r2, #0
 8010746:	619a      	str	r2, [r3, #24]
 8010748:	e013      	b.n	8010772 <_tx_mutex_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801074e:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010754:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8010756:	6a3b      	ldr	r3, [r7, #32]
 8010758:	69fa      	ldr	r2, [r7, #28]
 801075a:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801075c:	69fb      	ldr	r3, [r7, #28]
 801075e:	6a3a      	ldr	r2, [r7, #32]
 8010760:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8010762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010764:	699b      	ldr	r3, [r3, #24]
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	429a      	cmp	r2, r3
 801076a:	d102      	bne.n	8010772 <_tx_mutex_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 801076c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801076e:	6a3a      	ldr	r2, [r7, #32]
 8010770:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010776:	2b0d      	cmp	r3, #13
 8010778:	d118      	bne.n	80107ac <_tx_mutex_cleanup+0xd0>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2284      	movs	r2, #132	@ 0x84
 801077e:	211d      	movs	r1, #29
 8010780:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010782:	4b11      	ldr	r3, [pc, #68]	@ (80107c8 <_tx_mutex_cleanup+0xec>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	1c5a      	adds	r2, r3, #1
 8010788:	4b0f      	ldr	r3, [pc, #60]	@ (80107c8 <_tx_mutex_cleanup+0xec>)
 801078a:	601a      	str	r2, [r3, #0]
 801078c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801078e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	f383 8810 	msr	PRIMASK, r3
}
 8010796:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	0018      	movs	r0, r3
 801079c:	f001 ffda 	bl	8012754 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80107a0:	f3ef 8310 	mrs	r3, PRIMASK
 80107a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80107a6:	b672      	cpsid	i
    return(primask_value);
 80107a8:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80107aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80107ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	f383 8810 	msr	PRIMASK, r3
}
 80107b6:	46c0      	nop			@ (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80107b8:	46c0      	nop			@ (mov r8, r8)
 80107ba:	46bd      	mov	sp, r7
 80107bc:	b00c      	add	sp, #48	@ 0x30
 80107be:	bd80      	pop	{r7, pc}
 80107c0:	080106dd 	.word	0x080106dd
 80107c4:	4d555445 	.word	0x4d555445
 80107c8:	20011230 	.word	0x20011230

080107cc <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b088      	sub	sp, #32
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80107d4:	f3ef 8310 	mrs	r3, PRIMASK
 80107d8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80107da:	b672      	cpsid	i
    return(primask_value);
 80107dc:	697b      	ldr	r3, [r7, #20]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80107de:	61fb      	str	r3, [r7, #28]

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80107e0:	4b1a      	ldr	r3, [pc, #104]	@ (801084c <_tx_mutex_thread_release+0x80>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	1c5a      	adds	r2, r3, #1
 80107e6:	4b19      	ldr	r3, [pc, #100]	@ (801084c <_tx_mutex_thread_release+0x80>)
 80107e8:	601a      	str	r2, [r3, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	22a4      	movs	r2, #164	@ 0xa4
 80107ee:	589b      	ldr	r3, [r3, r2]
 80107f0:	61bb      	str	r3, [r7, #24]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 80107f2:	69bb      	ldr	r3, [r7, #24]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d016      	beq.n	8010826 <_tx_mutex_thread_release+0x5a>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80107f8:	69bb      	ldr	r3, [r7, #24]
 80107fa:	2201      	movs	r2, #1
 80107fc:	609a      	str	r2, [r3, #8]
 80107fe:	69fb      	ldr	r3, [r7, #28]
 8010800:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	f383 8810 	msr	PRIMASK, r3
}
 8010808:	46c0      	nop			@ (mov r8, r8)
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 801080a:	69bb      	ldr	r3, [r7, #24]
 801080c:	0018      	movs	r0, r3
 801080e:	f000 fafb 	bl	8010e08 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010812:	f3ef 8310 	mrs	r3, PRIMASK
 8010816:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010818:	b672      	cpsid	i
    return(primask_value);
 801081a:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 801081c:	61fb      	str	r3, [r7, #28]

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	22a4      	movs	r2, #164	@ 0xa4
 8010822:	589b      	ldr	r3, [r3, r2]
 8010824:	61bb      	str	r3, [r7, #24]
        }
    } while (mutex_ptr != TX_NULL);
 8010826:	69bb      	ldr	r3, [r7, #24]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d1de      	bne.n	80107ea <_tx_mutex_thread_release+0x1e>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 801082c:	4b07      	ldr	r3, [pc, #28]	@ (801084c <_tx_mutex_thread_release+0x80>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	1e5a      	subs	r2, r3, #1
 8010832:	4b06      	ldr	r3, [pc, #24]	@ (801084c <_tx_mutex_thread_release+0x80>)
 8010834:	601a      	str	r2, [r3, #0]
 8010836:	69fb      	ldr	r3, [r7, #28]
 8010838:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	f383 8810 	msr	PRIMASK, r3
}
 8010840:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE
}
 8010842:	46c0      	nop			@ (mov r8, r8)
 8010844:	46bd      	mov	sp, r7
 8010846:	b008      	add	sp, #32
 8010848:	bd80      	pop	{r7, pc}
 801084a:	46c0      	nop			@ (mov r8, r8)
 801084c:	20011230 	.word	0x20011230

08010850 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b08e      	sub	sp, #56	@ 0x38
 8010854:	af00      	add	r7, sp, #0
 8010856:	60f8      	str	r0, [r7, #12]
 8010858:	60b9      	str	r1, [r7, #8]
 801085a:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010860:	232f      	movs	r3, #47	@ 0x2f
 8010862:	18fb      	adds	r3, r7, r3
 8010864:	2200      	movs	r2, #0
 8010866:	701a      	strb	r2, [r3, #0]
 8010868:	2334      	movs	r3, #52	@ 0x34
 801086a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801086c:	2300      	movs	r3, #0
 801086e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010870:	e009      	b.n	8010886 <_tx_mutex_create+0x36>
 8010872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010874:	1c5a      	adds	r2, r3, #1
 8010876:	637a      	str	r2, [r7, #52]	@ 0x34
 8010878:	222f      	movs	r2, #47	@ 0x2f
 801087a:	18ba      	adds	r2, r7, r2
 801087c:	7812      	ldrb	r2, [r2, #0]
 801087e:	701a      	strb	r2, [r3, #0]
 8010880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010882:	3301      	adds	r3, #1
 8010884:	633b      	str	r3, [r7, #48]	@ 0x30
 8010886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801088a:	429a      	cmp	r2, r3
 801088c:	d3f1      	bcc.n	8010872 <_tx_mutex_create+0x22>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	68ba      	ldr	r2, [r7, #8]
 8010892:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	687a      	ldr	r2, [r7, #4]
 8010898:	611a      	str	r2, [r3, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801089a:	f3ef 8310 	mrs	r3, PRIMASK
 801089e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80108a0:	b672      	cpsid	i
    return(primask_value);
 80108a2:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 80108a4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	4a1a      	ldr	r2, [pc, #104]	@ (8010914 <_tx_mutex_create+0xc4>)
 80108aa:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 80108ac:	4b1a      	ldr	r3, [pc, #104]	@ (8010918 <_tx_mutex_create+0xc8>)
 80108ae:	4a1b      	ldr	r2, [pc, #108]	@ (801091c <_tx_mutex_create+0xcc>)
 80108b0:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 80108b2:	4b1b      	ldr	r3, [pc, #108]	@ (8010920 <_tx_mutex_create+0xd0>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d109      	bne.n	80108ce <_tx_mutex_create+0x7e>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 80108ba:	4b1a      	ldr	r3, [pc, #104]	@ (8010924 <_tx_mutex_create+0xd4>)
 80108bc:	68fa      	ldr	r2, [r7, #12]
 80108be:	601a      	str	r2, [r3, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	68fa      	ldr	r2, [r7, #12]
 80108c4:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	68fa      	ldr	r2, [r7, #12]
 80108ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80108cc:	e011      	b.n	80108f2 <_tx_mutex_create+0xa2>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 80108ce:	4b15      	ldr	r3, [pc, #84]	@ (8010924 <_tx_mutex_create+0xd4>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 80108d4:	6a3b      	ldr	r3, [r7, #32]
 80108d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108d8:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 80108da:	6a3b      	ldr	r3, [r7, #32]
 80108dc:	68fa      	ldr	r2, [r7, #12]
 80108de:	625a      	str	r2, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 80108e0:	69fb      	ldr	r3, [r7, #28]
 80108e2:	68fa      	ldr	r2, [r7, #12]
 80108e4:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	69fa      	ldr	r2, [r7, #28]
 80108ea:	625a      	str	r2, [r3, #36]	@ 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	6a3a      	ldr	r2, [r7, #32]
 80108f0:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 80108f2:	4b0b      	ldr	r3, [pc, #44]	@ (8010920 <_tx_mutex_create+0xd0>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	1c5a      	adds	r2, r3, #1
 80108f8:	4b09      	ldr	r3, [pc, #36]	@ (8010920 <_tx_mutex_create+0xd0>)
 80108fa:	601a      	str	r2, [r3, #0]
 80108fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108fe:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	f383 8810 	msr	PRIMASK, r3
}
 8010906:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010908:	2300      	movs	r3, #0
}
 801090a:	0018      	movs	r0, r3
 801090c:	46bd      	mov	sp, r7
 801090e:	b00e      	add	sp, #56	@ 0x38
 8010910:	bd80      	pop	{r7, pc}
 8010912:	46c0      	nop			@ (mov r8, r8)
 8010914:	4d555445 	.word	0x4d555445
 8010918:	20011234 	.word	0x20011234
 801091c:	080107cd 	.word	0x080107cd
 8010920:	2001117c 	.word	0x2001117c
 8010924:	20011178 	.word	0x20011178

08010928 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b090      	sub	sp, #64	@ 0x40
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010932:	f3ef 8310 	mrs	r3, PRIMASK
 8010936:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010938:	b672      	cpsid	i
    return(primask_value);
 801093a:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 801093c:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801093e:	4b7b      	ldr	r3, [pc, #492]	@ (8010b2c <_tx_mutex_get+0x204>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	689b      	ldr	r3, [r3, #8]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d144      	bne.n	80109d6 <_tx_mutex_get+0xae>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2201      	movs	r2, #1
 8010950:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010956:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8010958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801095a:	2b00      	cmp	r3, #0
 801095c:	d032      	beq.n	80109c4 <_tx_mutex_get+0x9c>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	691b      	ldr	r3, [r3, #16]
 8010962:	2b01      	cmp	r3, #1
 8010964:	d106      	bne.n	8010974 <_tx_mutex_get+0x4c>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8010966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2220      	movs	r2, #32
 8010972:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8010974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010976:	22a4      	movs	r2, #164	@ 0xa4
 8010978:	589b      	ldr	r3, [r3, r2]
 801097a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 801097c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801097e:	2b00      	cmp	r3, #0
 8010980:	d00f      	beq.n	80109a2 <_tx_mutex_get+0x7a>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8010982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010986:	623b      	str	r3, [r7, #32]

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8010988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801098a:	687a      	ldr	r2, [r7, #4]
 801098c:	631a      	str	r2, [r3, #48]	@ 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 801098e:	6a3b      	ldr	r3, [r7, #32]
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6a3a      	ldr	r2, [r7, #32]
 8010998:	631a      	str	r2, [r3, #48]	@ 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801099e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80109a0:	e009      	b.n	80109b6 <_tx_mutex_get+0x8e>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80109a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109a4:	21a4      	movs	r1, #164	@ 0xa4
 80109a6:	687a      	ldr	r2, [r7, #4]
 80109a8:	505a      	str	r2, [r3, r1]
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	687a      	ldr	r2, [r7, #4]
 80109ae:	62da      	str	r2, [r3, #44]	@ 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 80109b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109b8:	22a0      	movs	r2, #160	@ 0xa0
 80109ba:	589b      	ldr	r3, [r3, r2]
 80109bc:	1c5a      	adds	r2, r3, #1
 80109be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109c0:	21a0      	movs	r1, #160	@ 0xa0
 80109c2:	505a      	str	r2, [r3, r1]
 80109c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109c6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80109c8:	69bb      	ldr	r3, [r7, #24]
 80109ca:	f383 8810 	msr	PRIMASK, r3
}
 80109ce:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80109d0:	2300      	movs	r3, #0
 80109d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80109d4:	e0a4      	b.n	8010b20 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	68db      	ldr	r3, [r3, #12]
 80109da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80109dc:	429a      	cmp	r2, r3
 80109de:	d10d      	bne.n	80109fc <_tx_mutex_get+0xd4>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	689b      	ldr	r3, [r3, #8]
 80109e4:	1c5a      	adds	r2, r3, #1
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	609a      	str	r2, [r3, #8]
 80109ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ec:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	f383 8810 	msr	PRIMASK, r3
}
 80109f4:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80109f6:	2300      	movs	r3, #0
 80109f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80109fa:	e091      	b.n	8010b20 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d100      	bne.n	8010a04 <_tx_mutex_get+0xdc>
 8010a02:	e085      	b.n	8010b10 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8010a04:	4b4a      	ldr	r3, [pc, #296]	@ (8010b30 <_tx_mutex_get+0x208>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d008      	beq.n	8010a1e <_tx_mutex_get+0xf6>
 8010a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a0e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010a10:	693b      	ldr	r3, [r7, #16]
 8010a12:	f383 8810 	msr	PRIMASK, r3
}
 8010a16:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8010a18:	231d      	movs	r3, #29
 8010a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010a1c:	e080      	b.n	8010b20 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	68db      	ldr	r3, [r3, #12]
 8010a22:	633b      	str	r3, [r7, #48]	@ 0x30
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8010a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a26:	4a43      	ldr	r2, [pc, #268]	@ (8010b34 <_tx_mutex_get+0x20c>)
 8010a28:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8010a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8010a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a32:	22ac      	movs	r2, #172	@ 0xac
 8010a34:	589b      	ldr	r3, [r3, r2]
 8010a36:	1c5a      	adds	r2, r3, #1
 8010a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a3a:	21ac      	movs	r1, #172	@ 0xac
 8010a3c:	505a      	str	r2, [r3, r1]
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	69db      	ldr	r3, [r3, #28]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d109      	bne.n	8010a5a <_tx_mutex_get+0x132>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a4a:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8010a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a50:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8010a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a56:	675a      	str	r2, [r3, #116]	@ 0x74
 8010a58:	e011      	b.n	8010a7e <_tx_mutex_get+0x156>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	699b      	ldr	r3, [r3, #24]
 8010a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8010a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a64:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010a70:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a76:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8010a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a7c:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	69db      	ldr	r3, [r3, #28]
 8010a82:	1c5a      	adds	r2, r3, #1
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8010a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a8a:	220d      	movs	r2, #13
 8010a8c:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a90:	2201      	movs	r2, #1
 8010a92:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a96:	683a      	ldr	r2, [r7, #0]
 8010a98:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8010a9a:	4b25      	ldr	r3, [pc, #148]	@ (8010b30 <_tx_mutex_get+0x208>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	1c5a      	adds	r2, r3, #1
 8010aa0:	4b23      	ldr	r3, [pc, #140]	@ (8010b30 <_tx_mutex_get+0x208>)
 8010aa2:	601a      	str	r2, [r3, #0]
 8010aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aa6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f383 8810 	msr	PRIMASK, r3
}
 8010aae:	46c0      	nop			@ (mov r8, r8)
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	691b      	ldr	r3, [r3, #16]
 8010ab4:	2b01      	cmp	r3, #1
 8010ab6:	d122      	bne.n	8010afe <_tx_mutex_get+0x1d6>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d903      	bls.n	8010acc <_tx_mutex_get+0x1a4>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8010ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	629a      	str	r2, [r3, #40]	@ 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8010acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ad2:	219c      	movs	r1, #156	@ 0x9c
 8010ad4:	585b      	ldr	r3, [r3, r1]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d204      	bcs.n	8010ae4 <_tx_mutex_get+0x1bc>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8010ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ae0:	219c      	movs	r1, #156	@ 0x9c
 8010ae2:	505a      	str	r2, [r3, r1]
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8010ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d906      	bls.n	8010afe <_tx_mutex_get+0x1d6>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8010af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010af6:	0011      	movs	r1, r2
 8010af8:	0018      	movs	r0, r3
 8010afa:	f000 f8cb 	bl	8010c94 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8010afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b00:	0018      	movs	r0, r3
 8010b02:	f001 ff27 	bl	8012954 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8010b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b08:	2284      	movs	r2, #132	@ 0x84
 8010b0a:	589b      	ldr	r3, [r3, r2]
 8010b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b0e:	e007      	b.n	8010b20 <_tx_mutex_get+0x1f8>
 8010b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b12:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	f383 8810 	msr	PRIMASK, r3
}
 8010b1a:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8010b1c:	231d      	movs	r3, #29
 8010b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
    }

    /* Return completion status.  */
    return(status);
 8010b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010b22:	0018      	movs	r0, r3
 8010b24:	46bd      	mov	sp, r7
 8010b26:	b010      	add	sp, #64	@ 0x40
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	46c0      	nop			@ (mov r8, r8)
 8010b2c:	20011198 	.word	0x20011198
 8010b30:	20011230 	.word	0x20011230
 8010b34:	080106dd 	.word	0x080106dd

08010b38 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b090      	sub	sp, #64	@ 0x40
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010b40:	f3ef 8310 	mrs	r3, PRIMASK
 8010b44:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010b46:	b672      	cpsid	i
    return(primask_value);
 8010b48:	69fb      	ldr	r3, [r7, #28]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8010b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	69db      	ldr	r3, [r3, #28]
 8010b50:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8010b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b54:	2b01      	cmp	r3, #1
 8010b56:	d805      	bhi.n	8010b64 <_tx_mutex_prioritize+0x2c>
 8010b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b5a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010b5c:	69bb      	ldr	r3, [r7, #24]
 8010b5e:	f383 8810 	msr	PRIMASK, r3
}
 8010b62:	e090      	b.n	8010c86 <_tx_mutex_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8010b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b66:	2b02      	cmp	r3, #2
 8010b68:	d114      	bne.n	8010b94 <_tx_mutex_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	699b      	ldr	r3, [r3, #24]
 8010b6e:	633b      	str	r3, [r7, #48]	@ 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8010b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b74:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8010b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d202      	bcs.n	8010b88 <_tx_mutex_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b86:	619a      	str	r2, [r3, #24]
 8010b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b8a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	f383 8810 	msr	PRIMASK, r3
}
 8010b92:	e078      	b.n	8010c86 <_tx_mutex_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	699b      	ldr	r3, [r3, #24]
 8010b98:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8010b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b9c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8010b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ba2:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8010ba4:	4b3a      	ldr	r3, [pc, #232]	@ (8010c90 <_tx_mutex_prioritize+0x158>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	1c5a      	adds	r2, r3, #1
 8010baa:	4b39      	ldr	r3, [pc, #228]	@ (8010c90 <_tx_mutex_prioritize+0x158>)
 8010bac:	601a      	str	r2, [r3, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8010bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d201      	bcs.n	8010bc2 <_tx_mutex_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8010bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8010bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bc4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f383 8810 	msr	PRIMASK, r3
}
 8010bcc:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010bce:	f3ef 8310 	mrs	r3, PRIMASK
 8010bd2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010bd4:	b672      	cpsid	i
    return(primask_value);
 8010bd6:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8010bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	699b      	ldr	r3, [r3, #24]
 8010bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d002      	beq.n	8010bea <_tx_mutex_prioritize+0xb2>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8010be4:	2301      	movs	r3, #1
 8010be6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010be8:	e006      	b.n	8010bf8 <_tx_mutex_prioritize+0xc0>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	69db      	ldr	r3, [r3, #28]
 8010bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d001      	beq.n	8010bf8 <_tx_mutex_prioritize+0xc0>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8010bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d103      	bne.n	8010c06 <_tx_mutex_prioritize+0xce>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8010bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010c04:	e00c      	b.n	8010c20 <_tx_mutex_prioritize+0xe8>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	699b      	ldr	r3, [r3, #24]
 8010c0a:	633b      	str	r3, [r7, #48]	@ 0x30
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	69db      	ldr	r3, [r3, #28]
 8010c10:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8010c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c14:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8010c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c1a:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

        } while (thread_ptr != head_ptr);
 8010c20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d1c4      	bne.n	8010bb2 <_tx_mutex_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8010c28:	4b19      	ldr	r3, [pc, #100]	@ (8010c90 <_tx_mutex_prioritize+0x158>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	1e5a      	subs	r2, r3, #1
 8010c2e:	4b18      	ldr	r3, [pc, #96]	@ (8010c90 <_tx_mutex_prioritize+0x158>)
 8010c30:	601a      	str	r2, [r3, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8010c32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d01d      	beq.n	8010c76 <_tx_mutex_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8010c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c3e:	627b      	str	r3, [r7, #36]	@ 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8010c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010c44:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8010c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c48:	6a3a      	ldr	r2, [r7, #32]
 8010c4a:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8010c4c:	6a3b      	ldr	r3, [r7, #32]
 8010c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c50:	671a      	str	r2, [r3, #112]	@ 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8010c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010c56:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8010c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c5c:	671a      	str	r2, [r3, #112]	@ 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8010c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c60:	6a3a      	ldr	r2, [r7, #32]
 8010c62:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8010c64:	6a3b      	ldr	r3, [r7, #32]
 8010c66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c68:	671a      	str	r2, [r3, #112]	@ 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8010c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c6e:	675a      	str	r2, [r3, #116]	@ 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010c74:	619a      	str	r2, [r3, #24]
 8010c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c78:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	f383 8810 	msr	PRIMASK, r3
}
 8010c80:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8010c82:	f001 fd2f 	bl	80126e4 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8010c86:	2300      	movs	r3, #0
#endif
}
 8010c88:	0018      	movs	r0, r3
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	b010      	add	sp, #64	@ 0x40
 8010c8e:	bd80      	pop	{r7, pc}
 8010c90:	20011230 	.word	0x20011230

08010c94 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b08e      	sub	sp, #56	@ 0x38
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8010ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010ca4:	b672      	cpsid	i
    return(primask_value);
 8010ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8010ca8:	637b      	str	r3, [r7, #52]	@ 0x34
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d017      	beq.n	8010ce2 <_tx_mutex_priority_change+0x4e>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	683a      	ldr	r2, [r7, #0]
 8010cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2298      	movs	r2, #152	@ 0x98
 8010cbc:	589b      	ldr	r3, [r3, r2]
 8010cbe:	683a      	ldr	r2, [r7, #0]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d905      	bls.n	8010cd0 <_tx_mutex_priority_change+0x3c>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2298      	movs	r2, #152	@ 0x98
 8010cc8:	589a      	ldr	r2, [r3, r2]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010cce:	e002      	b.n	8010cd6 <_tx_mutex_priority_change+0x42>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	683a      	ldr	r2, [r7, #0]
 8010cd4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cd8:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010cda:	6a3b      	ldr	r3, [r7, #32]
 8010cdc:	f383 8810 	msr	PRIMASK, r3
}
 8010ce0:	e087      	b.n	8010df2 <_tx_mutex_priority_change+0x15e>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 8010ce2:	4b46      	ldr	r3, [pc, #280]	@ (8010dfc <_tx_mutex_priority_change+0x168>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8010cee:	4b44      	ldr	r3, [pc, #272]	@ (8010e00 <_tx_mutex_priority_change+0x16c>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	1c9a      	adds	r2, r3, #2
 8010cf4:	4b42      	ldr	r3, [pc, #264]	@ (8010e00 <_tx_mutex_priority_change+0x16c>)
 8010cf6:	601a      	str	r2, [r3, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	220e      	movs	r2, #14
 8010cfc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2201      	movs	r2, #1
 8010d02:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2200      	movs	r2, #0
 8010d08:	64da      	str	r2, [r3, #76]	@ 0x4c
 8010d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d0c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010d0e:	69bb      	ldr	r3, [r7, #24]
 8010d10:	f383 8810 	msr	PRIMASK, r3
}
 8010d14:	46c0      	nop			@ (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	0018      	movs	r0, r3
 8010d1a:	f001 fe1b 	bl	8012954 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8010d22:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010d24:	b672      	cpsid	i
    return(primask_value);
 8010d26:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 8010d28:	637b      	str	r3, [r7, #52]	@ 0x34

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	683a      	ldr	r2, [r7, #0]
 8010d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2298      	movs	r2, #152	@ 0x98
 8010d34:	589b      	ldr	r3, [r3, r2]
 8010d36:	683a      	ldr	r2, [r7, #0]
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d905      	bls.n	8010d48 <_tx_mutex_priority_change+0xb4>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2298      	movs	r2, #152	@ 0x98
 8010d40:	589a      	ldr	r2, [r3, r2]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010d46:	e002      	b.n	8010d4e <_tx_mutex_priority_change+0xba>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	683a      	ldr	r2, [r7, #0]
 8010d4c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d50:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	f383 8810 	msr	PRIMASK, r3
}
 8010d58:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	0018      	movs	r0, r3
 8010d5e:	f001 fcf9 	bl	8012754 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010d62:	f3ef 8310 	mrs	r3, PRIMASK
 8010d66:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010d68:	b672      	cpsid	i
    return(primask_value);
 8010d6a:	697b      	ldr	r3, [r7, #20]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8010d6c:	637b      	str	r3, [r7, #52]	@ 0x34
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8010d6e:	4b23      	ldr	r3, [pc, #140]	@ (8010dfc <_tx_mutex_priority_change+0x168>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d034      	beq.n	8010de6 <_tx_mutex_priority_change+0x152>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d130      	bne.n	8010de6 <_tx_mutex_priority_change+0x152>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d811      	bhi.n	8010db4 <_tx_mutex_priority_change+0x120>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8010d90:	687a      	ldr	r2, [r7, #4]
 8010d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d126      	bne.n	8010de6 <_tx_mutex_priority_change+0x152>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8010d98:	4b18      	ldr	r3, [pc, #96]	@ (8010dfc <_tx_mutex_priority_change+0x168>)
 8010d9a:	687a      	ldr	r2, [r7, #4]
 8010d9c:	601a      	str	r2, [r3, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8010d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d21f      	bcs.n	8010de6 <_tx_mutex_priority_change+0x152>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010daa:	4b16      	ldr	r3, [pc, #88]	@ (8010e04 <_tx_mutex_priority_change+0x170>)
 8010dac:	0092      	lsls	r2, r2, #2
 8010dae:	6879      	ldr	r1, [r7, #4]
 8010db0:	50d1      	str	r1, [r2, r3]
 8010db2:	e018      	b.n	8010de6 <_tx_mutex_priority_change+0x152>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d212      	bcs.n	8010de6 <_tx_mutex_priority_change+0x152>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d80c      	bhi.n	8010de6 <_tx_mutex_priority_change+0x152>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8010dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8010dfc <_tx_mutex_priority_change+0x168>)
 8010dce:	687a      	ldr	r2, [r7, #4]
 8010dd0:	601a      	str	r2, [r3, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 8010dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d205      	bcs.n	8010de6 <_tx_mutex_priority_change+0x152>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dde:	4b09      	ldr	r3, [pc, #36]	@ (8010e04 <_tx_mutex_priority_change+0x170>)
 8010de0:	0092      	lsls	r2, r2, #2
 8010de2:	6879      	ldr	r1, [r7, #4]
 8010de4:	50d1      	str	r1, [r2, r3]
 8010de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010de8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	f383 8810 	msr	PRIMASK, r3
}
 8010df0:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8010df2:	46c0      	nop			@ (mov r8, r8)
 8010df4:	46bd      	mov	sp, r7
 8010df6:	b00e      	add	sp, #56	@ 0x38
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	46c0      	nop			@ (mov r8, r8)
 8010dfc:	2001119c 	.word	0x2001119c
 8010e00:	20011230 	.word	0x20011230
 8010e04:	200111b0 	.word	0x200111b0

08010e08 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b0a0      	sub	sp, #128	@ 0x80
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8010e10:	2320      	movs	r3, #32
 8010e12:	673b      	str	r3, [r7, #112]	@ 0x70
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010e14:	f3ef 8310 	mrs	r3, PRIMASK
 8010e18:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010e1a:	b672      	cpsid	i
    return(primask_value);
 8010e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8010e1e:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	689b      	ldr	r3, [r3, #8]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d100      	bne.n	8010e2a <_tx_mutex_put+0x22>
 8010e28:	e1c5      	b.n	80111b6 <_tx_mutex_put+0x3ae>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	68db      	ldr	r3, [r3, #12]
 8010e2e:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8010e30:	4bb4      	ldr	r3, [pc, #720]	@ (8011104 <_tx_mutex_put+0x2fc>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	663b      	str	r3, [r7, #96]	@ 0x60

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	68db      	ldr	r3, [r3, #12]
 8010e3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d00b      	beq.n	8010e58 <_tx_mutex_put+0x50>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8010e40:	4bb1      	ldr	r3, [pc, #708]	@ (8011108 <_tx_mutex_put+0x300>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d107      	bne.n	8010e58 <_tx_mutex_put+0x50>
 8010e48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010e4a:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e4e:	f383 8810 	msr	PRIMASK, r3
}
 8010e52:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8010e54:	231e      	movs	r3, #30
 8010e56:	673b      	str	r3, [r7, #112]	@ 0x70
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8010e58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010e5a:	2b20      	cmp	r3, #32
 8010e5c:	d000      	beq.n	8010e60 <_tx_mutex_put+0x58>
 8010e5e:	e1b2      	b.n	80111c6 <_tx_mutex_put+0x3be>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	689b      	ldr	r3, [r3, #8]
 8010e64:	1e5a      	subs	r2, r3, #1
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	689b      	ldr	r3, [r3, #8]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d008      	beq.n	8010e84 <_tx_mutex_put+0x7c>
 8010e72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e78:	f383 8810 	msr	PRIMASK, r3
}
 8010e7c:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	673b      	str	r3, [r7, #112]	@ 0x70
 8010e82:	e1a0      	b.n	80111c6 <_tx_mutex_put+0x3be>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8010e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d108      	bne.n	8010e9c <_tx_mutex_put+0x94>
 8010e8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e90:	f383 8810 	msr	PRIMASK, r3
}
 8010e94:	46c0      	nop			@ (mov r8, r8)

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8010e96:	2300      	movs	r3, #0
 8010e98:	673b      	str	r3, [r7, #112]	@ 0x70
 8010e9a:	e194      	b.n	80111c6 <_tx_mutex_put+0x3be>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8010e9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010e9e:	22a0      	movs	r2, #160	@ 0xa0
 8010ea0:	589b      	ldr	r3, [r3, r2]
 8010ea2:	1e5a      	subs	r2, r3, #1
 8010ea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010ea6:	21a0      	movs	r1, #160	@ 0xa0
 8010ea8:	505a      	str	r2, [r3, r1]

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8010eaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010eac:	22a0      	movs	r2, #160	@ 0xa0
 8010eae:	589b      	ldr	r3, [r3, r2]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d104      	bne.n	8010ebe <_tx_mutex_put+0xb6>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8010eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010eb6:	22a4      	movs	r2, #164	@ 0xa4
 8010eb8:	2100      	movs	r1, #0
 8010eba:	5099      	str	r1, [r3, r2]
 8010ebc:	e015      	b.n	8010eea <_tx_mutex_put+0xe2>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ec2:	66fb      	str	r3, [r7, #108]	@ 0x6c
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8010eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ecc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010ece:	631a      	str	r2, [r3, #48]	@ 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8010ed0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ed2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010ed4:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8010ed6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010ed8:	22a4      	movs	r2, #164	@ 0xa4
 8010eda:	589b      	ldr	r3, [r3, r2]
 8010edc:	687a      	ldr	r2, [r7, #4]
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d103      	bne.n	8010eea <_tx_mutex_put+0xe2>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8010ee2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010ee4:	21a4      	movs	r1, #164	@ 0xa4
 8010ee6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010ee8:	505a      	str	r2, [r3, r1]
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	699b      	ldr	r3, [r3, #24]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d10e      	bne.n	8010f10 <_tx_mutex_put+0x108>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	691b      	ldr	r3, [r3, #16]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d10a      	bne.n	8010f10 <_tx_mutex_put+0x108>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2200      	movs	r2, #0
 8010efe:	60da      	str	r2, [r3, #12]
 8010f00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010f02:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f06:	f383 8810 	msr	PRIMASK, r3
}
 8010f0a:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	673b      	str	r3, [r7, #112]	@ 0x70
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8010f10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010f12:	2b20      	cmp	r3, #32
 8010f14:	d000      	beq.n	8010f18 <_tx_mutex_put+0x110>
 8010f16:	e156      	b.n	80111c6 <_tx_mutex_put+0x3be>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8010f1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010f1e:	2294      	movs	r2, #148	@ 0x94
 8010f20:	589b      	ldr	r3, [r3, r2]
 8010f22:	677b      	str	r3, [r7, #116]	@ 0x74

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	691b      	ldr	r3, [r3, #16]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d140      	bne.n	8010fae <_tx_mutex_put+0x1a6>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010f2c:	4b76      	ldr	r3, [pc, #472]	@ (8011108 <_tx_mutex_put+0x300>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	1c5a      	adds	r2, r3, #1
 8010f32:	4b75      	ldr	r3, [pc, #468]	@ (8011108 <_tx_mutex_put+0x300>)
 8010f34:	601a      	str	r2, [r3, #0]
 8010f36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010f38:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f3c:	f383 8810 	msr	PRIMASK, r3
}
 8010f40:	46c0      	nop			@ (mov r8, r8)
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8010f42:	2320      	movs	r3, #32
 8010f44:	66bb      	str	r3, [r7, #104]	@ 0x68

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8010f46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010f48:	22a4      	movs	r2, #164	@ 0xa4
 8010f4a:	589b      	ldr	r3, [r3, r2]
 8010f4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                            while (next_mutex != TX_NULL)
 8010f4e:	e016      	b.n	8010f7e <_tx_mutex_put+0x176>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8010f50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f52:	691b      	ldr	r3, [r3, #16]
 8010f54:	2b01      	cmp	r3, #1
 8010f56:	d107      	bne.n	8010f68 <_tx_mutex_put+0x160>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8010f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f5c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d902      	bls.n	8010f68 <_tx_mutex_put+0x160>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8010f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f66:	66bb      	str	r3, [r7, #104]	@ 0x68
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8010f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f6c:	66fb      	str	r3, [r7, #108]	@ 0x6c

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8010f6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010f70:	22a4      	movs	r2, #164	@ 0xa4
 8010f72:	589b      	ldr	r3, [r3, r2]
 8010f74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d101      	bne.n	8010f7e <_tx_mutex_put+0x176>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                            while (next_mutex != TX_NULL)
 8010f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d1e5      	bne.n	8010f50 <_tx_mutex_put+0x148>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010f84:	f3ef 8310 	mrs	r3, PRIMASK
 8010f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010f8a:	b672      	cpsid	i
    return(primask_value);
 8010f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8010f8e:	67fb      	str	r3, [r7, #124]	@ 0x7c

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8010f90:	4b5d      	ldr	r3, [pc, #372]	@ (8011108 <_tx_mutex_put+0x300>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	1e5a      	subs	r2, r3, #1
 8010f96:	4b5c      	ldr	r3, [pc, #368]	@ (8011108 <_tx_mutex_put+0x300>)
 8010f98:	601a      	str	r2, [r3, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8010f9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010f9c:	219c      	movs	r1, #156	@ 0x9c
 8010f9e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010fa0:	505a      	str	r2, [r3, r1]

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8010fa2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010fa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d201      	bcs.n	8010fae <_tx_mutex_put+0x1a6>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8010faa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010fac:	677b      	str	r3, [r7, #116]	@ 0x74
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	69db      	ldr	r3, [r3, #28]
 8010fb2:	2b01      	cmp	r3, #1
 8010fb4:	d91d      	bls.n	8010ff2 <_tx_mutex_put+0x1ea>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	691b      	ldr	r3, [r3, #16]
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	d119      	bne.n	8010ff2 <_tx_mutex_put+0x1ea>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8010fbe:	4b52      	ldr	r3, [pc, #328]	@ (8011108 <_tx_mutex_put+0x300>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	1c5a      	adds	r2, r3, #1
 8010fc4:	4b50      	ldr	r3, [pc, #320]	@ (8011108 <_tx_mutex_put+0x300>)
 8010fc6:	601a      	str	r2, [r3, #0]
 8010fc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010fca:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fce:	f383 8810 	msr	PRIMASK, r3
}
 8010fd2:	46c0      	nop			@ (mov r8, r8)
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	0018      	movs	r0, r3
 8010fd8:	f7ff fdae 	bl	8010b38 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8010fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010fe2:	b672      	cpsid	i
    return(primask_value);
 8010fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8010fe6:	67fb      	str	r3, [r7, #124]	@ 0x7c

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8010fe8:	4b47      	ldr	r3, [pc, #284]	@ (8011108 <_tx_mutex_put+0x300>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	1e5a      	subs	r2, r3, #1
 8010fee:	4b46      	ldr	r3, [pc, #280]	@ (8011108 <_tx_mutex_put+0x300>)
 8010ff0:	601a      	str	r2, [r3, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	699b      	ldr	r3, [r3, #24]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d133      	bne.n	8011062 <_tx_mutex_put+0x25a>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010ffa:	4b43      	ldr	r3, [pc, #268]	@ (8011108 <_tx_mutex_put+0x300>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	1c5a      	adds	r2, r3, #1
 8011000:	4b41      	ldr	r3, [pc, #260]	@ (8011108 <_tx_mutex_put+0x300>)
 8011002:	601a      	str	r2, [r3, #0]
 8011004:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011006:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011008:	6a3b      	ldr	r3, [r7, #32]
 801100a:	f383 8810 	msr	PRIMASK, r3
}
 801100e:	46c0      	nop			@ (mov r8, r8)
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2220      	movs	r2, #32
 8011014:	629a      	str	r2, [r3, #40]	@ 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	68db      	ldr	r3, [r3, #12]
 801101a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801101c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801101e:	429a      	cmp	r2, r3
 8011020:	d006      	beq.n	8011030 <_tx_mutex_put+0x228>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	68db      	ldr	r3, [r3, #12]
 8011026:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8011028:	0011      	movs	r1, r2
 801102a:	0018      	movs	r0, r3
 801102c:	f7ff fe32 	bl	8010c94 <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011030:	f3ef 8310 	mrs	r3, PRIMASK
 8011034:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011036:	b672      	cpsid	i
    return(primask_value);
 8011038:	69bb      	ldr	r3, [r7, #24]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 801103a:	67fb      	str	r3, [r7, #124]	@ 0x7c

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 801103c:	4b32      	ldr	r3, [pc, #200]	@ (8011108 <_tx_mutex_put+0x300>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	1e5a      	subs	r2, r3, #1
 8011042:	4b31      	ldr	r3, [pc, #196]	@ (8011108 <_tx_mutex_put+0x300>)
 8011044:	601a      	str	r2, [r3, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2200      	movs	r2, #0
 801104a:	60da      	str	r2, [r3, #12]
 801104c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801104e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011050:	69fb      	ldr	r3, [r7, #28]
 8011052:	f383 8810 	msr	PRIMASK, r3
}
 8011056:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8011058:	f001 fb44 	bl	80126e4 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 801105c:	2300      	movs	r3, #0
 801105e:	673b      	str	r3, [r7, #112]	@ 0x70
 8011060:	e0b1      	b.n	80111c6 <_tx_mutex_put+0x3be>
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	699b      	ldr	r3, [r3, #24]
 8011066:	667b      	str	r3, [r7, #100]	@ 0x64

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	691b      	ldr	r3, [r3, #16]
 801106c:	2b01      	cmp	r3, #1
 801106e:	d109      	bne.n	8011084 <_tx_mutex_put+0x27c>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	68db      	ldr	r3, [r3, #12]
 8011074:	67bb      	str	r3, [r7, #120]	@ 0x78

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8011076:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2220      	movs	r2, #32
 8011082:	629a      	str	r2, [r3, #40]	@ 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8011084:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011086:	22a0      	movs	r2, #160	@ 0xa0
 8011088:	589b      	ldr	r3, [r3, r2]
 801108a:	65bb      	str	r3, [r7, #88]	@ 0x58

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 801108c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801108e:	2b00      	cmp	r3, #0
 8011090:	d10a      	bne.n	80110a8 <_tx_mutex_put+0x2a0>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8011092:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011094:	21a4      	movs	r1, #164	@ 0xa4
 8011096:	687a      	ldr	r2, [r7, #4]
 8011098:	505a      	str	r2, [r3, r1]
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	687a      	ldr	r2, [r7, #4]
 801109e:	62da      	str	r2, [r3, #44]	@ 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	687a      	ldr	r2, [r7, #4]
 80110a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80110a6:	e012      	b.n	80110ce <_tx_mutex_put+0x2c6>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 80110a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80110aa:	22a4      	movs	r2, #164	@ 0xa4
 80110ac:	589b      	ldr	r3, [r3, r2]
 80110ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 80110b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110b4:	65fb      	str	r3, [r7, #92]	@ 0x5c

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80110b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110b8:	687a      	ldr	r2, [r7, #4]
 80110ba:	631a      	str	r2, [r3, #48]	@ 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80110bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80110be:	687a      	ldr	r2, [r7, #4]
 80110c0:	62da      	str	r2, [r3, #44]	@ 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80110c6:	631a      	str	r2, [r3, #48]	@ 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80110cc:	62da      	str	r2, [r3, #44]	@ 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 80110ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80110d0:	1c5a      	adds	r2, r3, #1
 80110d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80110d4:	21a0      	movs	r1, #160	@ 0xa0
 80110d6:	505a      	str	r2, [r3, r1]

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2201      	movs	r2, #1
 80110dc:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80110e2:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	69db      	ldr	r3, [r3, #28]
 80110e8:	1e5a      	subs	r2, r3, #1
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	69db      	ldr	r3, [r3, #28]
 80110f2:	657b      	str	r3, [r7, #84]	@ 0x54

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 80110f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d108      	bne.n	801110c <_tx_mutex_put+0x304>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2200      	movs	r2, #0
 80110fe:	619a      	str	r2, [r3, #24]
 8011100:	e013      	b.n	801112a <_tx_mutex_put+0x322>
 8011102:	46c0      	nop			@ (mov r8, r8)
 8011104:	20011198 	.word	0x20011198
 8011108:	20011230 	.word	0x20011230
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 801110c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801110e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011110:	653b      	str	r3, [r7, #80]	@ 0x50
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011116:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8011118:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801111a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801111c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 801111e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011120:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011122:	675a      	str	r2, [r3, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8011124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011126:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011128:	671a      	str	r2, [r3, #112]	@ 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801112a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801112c:	2200      	movs	r2, #0
 801112e:	669a      	str	r2, [r3, #104]	@ 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011130:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011132:	2284      	movs	r2, #132	@ 0x84
 8011134:	2100      	movs	r1, #0
 8011136:	5099      	str	r1, [r3, r2]
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011138:	4b25      	ldr	r3, [pc, #148]	@ (80111d0 <_tx_mutex_put+0x3c8>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	1c5a      	adds	r2, r3, #1
 801113e:	4b24      	ldr	r3, [pc, #144]	@ (80111d0 <_tx_mutex_put+0x3c8>)
 8011140:	601a      	str	r2, [r3, #0]
 8011142:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011144:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	f383 8810 	msr	PRIMASK, r3
}
 801114c:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	691b      	ldr	r3, [r3, #16]
 8011152:	2b01      	cmp	r3, #1
 8011154:	d128      	bne.n	80111a8 <_tx_mutex_put+0x3a0>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	69db      	ldr	r3, [r3, #28]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d019      	beq.n	8011192 <_tx_mutex_put+0x38a>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	0018      	movs	r0, r3
 8011162:	f7ff fce9 	bl	8010b38 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011166:	f3ef 8310 	mrs	r3, PRIMASK
 801116a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801116c:	b672      	cpsid	i
    return(primask_value);
 801116e:	693b      	ldr	r3, [r7, #16]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8011170:	67fb      	str	r3, [r7, #124]	@ 0x7c

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	699b      	ldr	r3, [r3, #24]
 8011176:	64bb      	str	r3, [r7, #72]	@ 0x48
                                    if (suspended_thread != TX_NULL)
 8011178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801117a:	2b00      	cmp	r3, #0
 801117c:	d003      	beq.n	8011186 <_tx_mutex_put+0x37e>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 801117e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	629a      	str	r2, [r3, #40]	@ 0x28
 8011186:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011188:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	f383 8810 	msr	PRIMASK, r3
}
 8011190:	46c0      	nop			@ (mov r8, r8)

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8011192:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011196:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8011198:	429a      	cmp	r2, r3
 801119a:	d005      	beq.n	80111a8 <_tx_mutex_put+0x3a0>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 801119c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801119e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80111a0:	0011      	movs	r1, r2
 80111a2:	0018      	movs	r0, r3
 80111a4:	f7ff fd76 	bl	8010c94 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 80111a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80111aa:	0018      	movs	r0, r3
 80111ac:	f001 fad2 	bl	8012754 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 80111b0:	2300      	movs	r3, #0
 80111b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80111b4:	e007      	b.n	80111c6 <_tx_mutex_put+0x3be>
 80111b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80111b8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	f383 8810 	msr	PRIMASK, r3
}
 80111c0:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 80111c2:	231e      	movs	r3, #30
 80111c4:	673b      	str	r3, [r7, #112]	@ 0x70
    }

    /* Return the completion status.  */
    return(status);
 80111c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
}
 80111c8:	0018      	movs	r0, r3
 80111ca:	46bd      	mov	sp, r7
 80111cc:	b020      	add	sp, #128	@ 0x80
 80111ce:	bd80      	pop	{r7, pc}
 80111d0:	20011230 	.word	0x20011230

080111d4 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b08c      	sub	sp, #48	@ 0x30
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80111de:	f3ef 8310 	mrs	r3, PRIMASK
 80111e2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80111e4:	b672      	cpsid	i
    return(primask_value);
 80111e6:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 80111e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80111ee:	4b37      	ldr	r3, [pc, #220]	@ (80112cc <_tx_queue_cleanup+0xf8>)
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d160      	bne.n	80112b6 <_tx_queue_cleanup+0xe2>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	22ac      	movs	r2, #172	@ 0xac
 80111f8:	589b      	ldr	r3, [r3, r2]
 80111fa:	683a      	ldr	r2, [r7, #0]
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d15a      	bne.n	80112b6 <_tx_queue_cleanup+0xe2>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011204:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 8011206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011208:	2b00      	cmp	r3, #0
 801120a:	d054      	beq.n	80112b6 <_tx_queue_cleanup+0xe2>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 801120c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	4a2f      	ldr	r2, [pc, #188]	@ (80112d0 <_tx_queue_cleanup+0xfc>)
 8011212:	4293      	cmp	r3, r2
 8011214:	d14f      	bne.n	80112b6 <_tx_queue_cleanup+0xe2>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8011216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801121a:	2b00      	cmp	r3, #0
 801121c:	d04b      	beq.n	80112b6 <_tx_queue_cleanup+0xe2>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2200      	movs	r2, #0
 8011222:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8011224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011228:	1e5a      	subs	r2, r3, #1
 801122a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801122c:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 801122e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011232:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8011234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011236:	2b00      	cmp	r3, #0
 8011238:	d103      	bne.n	8011242 <_tx_queue_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 801123a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801123c:	2200      	movs	r2, #0
 801123e:	629a      	str	r2, [r3, #40]	@ 0x28
 8011240:	e013      	b.n	801126a <_tx_queue_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011246:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801124c:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801124e:	6a3b      	ldr	r3, [r7, #32]
 8011250:	69fa      	ldr	r2, [r7, #28]
 8011252:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011254:	69fb      	ldr	r3, [r7, #28]
 8011256:	6a3a      	ldr	r2, [r7, #32]
 8011258:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 801125a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801125c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801125e:	687a      	ldr	r2, [r7, #4]
 8011260:	429a      	cmp	r2, r3
 8011262:	d102      	bne.n	801126a <_tx_queue_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8011264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011266:	6a3a      	ldr	r2, [r7, #32]
 8011268:	629a      	str	r2, [r3, #40]	@ 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801126e:	2b05      	cmp	r3, #5
 8011270:	d121      	bne.n	80112b6 <_tx_queue_cleanup+0xe2>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8011272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011274:	691b      	ldr	r3, [r3, #16]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d004      	beq.n	8011284 <_tx_queue_cleanup+0xb0>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2284      	movs	r2, #132	@ 0x84
 801127e:	210b      	movs	r1, #11
 8011280:	5099      	str	r1, [r3, r2]
 8011282:	e003      	b.n	801128c <_tx_queue_cleanup+0xb8>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2284      	movs	r2, #132	@ 0x84
 8011288:	210a      	movs	r1, #10
 801128a:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801128c:	4b11      	ldr	r3, [pc, #68]	@ (80112d4 <_tx_queue_cleanup+0x100>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	1c5a      	adds	r2, r3, #1
 8011292:	4b10      	ldr	r3, [pc, #64]	@ (80112d4 <_tx_queue_cleanup+0x100>)
 8011294:	601a      	str	r2, [r3, #0]
 8011296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011298:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	f383 8810 	msr	PRIMASK, r3
}
 80112a0:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	0018      	movs	r0, r3
 80112a6:	f001 fa55 	bl	8012754 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80112aa:	f3ef 8310 	mrs	r3, PRIMASK
 80112ae:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80112b0:	b672      	cpsid	i
    return(primask_value);
 80112b2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80112b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80112b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112b8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	f383 8810 	msr	PRIMASK, r3
}
 80112c0:	46c0      	nop			@ (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80112c2:	46c0      	nop			@ (mov r8, r8)
 80112c4:	46bd      	mov	sp, r7
 80112c6:	b00c      	add	sp, #48	@ 0x30
 80112c8:	bd80      	pop	{r7, pc}
 80112ca:	46c0      	nop			@ (mov r8, r8)
 80112cc:	080111d5 	.word	0x080111d5
 80112d0:	51554555 	.word	0x51554555
 80112d4:	20011230 	.word	0x20011230

080112d8 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b090      	sub	sp, #64	@ 0x40
 80112dc:	af00      	add	r7, sp, #0
 80112de:	60f8      	str	r0, [r7, #12]
 80112e0:	60b9      	str	r1, [r7, #8]
 80112e2:	607a      	str	r2, [r7, #4]
 80112e4:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80112ea:	2337      	movs	r3, #55	@ 0x37
 80112ec:	18fb      	adds	r3, r7, r3
 80112ee:	2200      	movs	r2, #0
 80112f0:	701a      	strb	r2, [r3, #0]
 80112f2:	2338      	movs	r3, #56	@ 0x38
 80112f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80112f6:	2300      	movs	r3, #0
 80112f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80112fa:	e009      	b.n	8011310 <_tx_queue_create+0x38>
 80112fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112fe:	1c5a      	adds	r2, r3, #1
 8011300:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011302:	2237      	movs	r2, #55	@ 0x37
 8011304:	18ba      	adds	r2, r7, r2
 8011306:	7812      	ldrb	r2, [r2, #0]
 8011308:	701a      	strb	r2, [r3, #0]
 801130a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801130c:	3301      	adds	r3, #1
 801130e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011310:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011314:	429a      	cmp	r2, r3
 8011316:	d3f1      	bcc.n	80112fc <_tx_queue_create+0x24>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	68ba      	ldr	r2, [r7, #8]
 801131c:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	687a      	ldr	r2, [r7, #4]
 8011322:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	009b      	lsls	r3, r3, #2
 8011328:	0019      	movs	r1, r3
 801132a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801132c:	f7f5 f88a 	bl	8006444 <__udivsi3>
 8011330:	0003      	movs	r3, r0
 8011332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    used_words =  capacity * message_size;
 8011334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	4353      	muls	r3, r2
 801133a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	683a      	ldr	r2, [r7, #0]
 8011340:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	699a      	ldr	r2, [r3, #24]
 8011346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	18d2      	adds	r2, r2, r3
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	683a      	ldr	r2, [r7, #0]
 8011354:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	683a      	ldr	r2, [r7, #0]
 801135a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011360:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011366:	60da      	str	r2, [r3, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011368:	f3ef 8310 	mrs	r3, PRIMASK
 801136c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801136e:	b672      	cpsid	i
    return(primask_value);
 8011370:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8011372:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	4a19      	ldr	r2, [pc, #100]	@ (80113dc <_tx_queue_create+0x104>)
 8011378:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 801137a:	4b19      	ldr	r3, [pc, #100]	@ (80113e0 <_tx_queue_create+0x108>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d109      	bne.n	8011396 <_tx_queue_create+0xbe>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8011382:	4b18      	ldr	r3, [pc, #96]	@ (80113e4 <_tx_queue_create+0x10c>)
 8011384:	68fa      	ldr	r2, [r7, #12]
 8011386:	601a      	str	r2, [r3, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	68fa      	ldr	r2, [r7, #12]
 801138c:	631a      	str	r2, [r3, #48]	@ 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	68fa      	ldr	r2, [r7, #12]
 8011392:	635a      	str	r2, [r3, #52]	@ 0x34
 8011394:	e011      	b.n	80113ba <_tx_queue_create+0xe2>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8011396:	4b13      	ldr	r3, [pc, #76]	@ (80113e4 <_tx_queue_create+0x10c>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 801139c:	6a3b      	ldr	r3, [r7, #32]
 801139e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113a0:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 80113a2:	6a3b      	ldr	r3, [r7, #32]
 80113a4:	68fa      	ldr	r2, [r7, #12]
 80113a6:	635a      	str	r2, [r3, #52]	@ 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	68fa      	ldr	r2, [r7, #12]
 80113ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	69fa      	ldr	r2, [r7, #28]
 80113b2:	635a      	str	r2, [r3, #52]	@ 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	6a3a      	ldr	r2, [r7, #32]
 80113b8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 80113ba:	4b09      	ldr	r3, [pc, #36]	@ (80113e0 <_tx_queue_create+0x108>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	1c5a      	adds	r2, r3, #1
 80113c0:	4b07      	ldr	r3, [pc, #28]	@ (80113e0 <_tx_queue_create+0x108>)
 80113c2:	601a      	str	r2, [r3, #0]
 80113c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113c6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	f383 8810 	msr	PRIMASK, r3
}
 80113ce:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80113d0:	2300      	movs	r3, #0
}
 80113d2:	0018      	movs	r0, r3
 80113d4:	46bd      	mov	sp, r7
 80113d6:	b010      	add	sp, #64	@ 0x40
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	46c0      	nop			@ (mov r8, r8)
 80113dc:	51554555 	.word	0x51554555
 80113e0:	2001116c 	.word	0x2001116c
 80113e4:	20011168 	.word	0x20011168

080113e8 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b094      	sub	sp, #80	@ 0x50
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	60f8      	str	r0, [r7, #12]
 80113f0:	60b9      	str	r1, [r7, #8]
 80113f2:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80113f4:	2300      	movs	r3, #0
 80113f6:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80113f8:	f3ef 8310 	mrs	r3, PRIMASK
 80113fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 80113fe:	b672      	cpsid	i
    return(primask_value);
 8011400:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8011402:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011408:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	691b      	ldr	r3, [r3, #16]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d100      	bne.n	8011414 <_tx_queue_receive+0x2c>
 8011412:	e137      	b.n	8011684 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8011414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011416:	2b00      	cmp	r3, #0
 8011418:	d13c      	bne.n	8011494 <_tx_queue_receive+0xac>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	6a1b      	ldr	r3, [r3, #32]
 801141e:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	689b      	ldr	r3, [r3, #8]
 8011428:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 801142a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801142c:	1d13      	adds	r3, r2, #4
 801142e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011430:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011432:	1d19      	adds	r1, r3, #4
 8011434:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011436:	6812      	ldr	r2, [r2, #0]
 8011438:	601a      	str	r2, [r3, #0]
 801143a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801143c:	2b01      	cmp	r3, #1
 801143e:	d90e      	bls.n	801145e <_tx_queue_receive+0x76>
 8011440:	e007      	b.n	8011452 <_tx_queue_receive+0x6a>
 8011442:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011444:	1d13      	adds	r3, r2, #4
 8011446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801144a:	1d19      	adds	r1, r3, #4
 801144c:	64b9      	str	r1, [r7, #72]	@ 0x48
 801144e:	6812      	ldr	r2, [r2, #0]
 8011450:	601a      	str	r2, [r3, #0]
 8011452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011454:	3b01      	subs	r3, #1
 8011456:	647b      	str	r3, [r7, #68]	@ 0x44
 8011458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801145a:	2b00      	cmp	r3, #0
 801145c:	d1f1      	bne.n	8011442 <_tx_queue_receive+0x5a>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	69db      	ldr	r3, [r3, #28]
 8011462:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011464:	429a      	cmp	r2, r3
 8011466:	d102      	bne.n	801146e <_tx_queue_receive+0x86>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	699b      	ldr	r3, [r3, #24]
 801146c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011472:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	695b      	ldr	r3, [r3, #20]
 8011478:	1c5a      	adds	r2, r3, #1
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	691b      	ldr	r3, [r3, #16]
 8011482:	1e5a      	subs	r2, r3, #1
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	611a      	str	r2, [r3, #16]
 8011488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801148a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801148c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801148e:	f383 8810 	msr	PRIMASK, r3
}
 8011492:	e166      	b.n	8011762 <_tx_queue_receive+0x37a>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011498:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 801149a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801149c:	2280      	movs	r2, #128	@ 0x80
 801149e:	589b      	ldr	r3, [r3, r2]
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d154      	bne.n	801154e <_tx_queue_receive+0x166>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80114a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80114a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	64bb      	str	r3, [r7, #72]	@ 0x48
                size =         queue_ptr -> tx_queue_message_size;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	689b      	ldr	r3, [r3, #8]
 80114b2:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80114b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80114b6:	1d13      	adds	r3, r2, #4
 80114b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80114ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114bc:	1d19      	adds	r1, r3, #4
 80114be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80114c0:	6812      	ldr	r2, [r2, #0]
 80114c2:	601a      	str	r2, [r3, #0]
 80114c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114c6:	2b01      	cmp	r3, #1
 80114c8:	d90e      	bls.n	80114e8 <_tx_queue_receive+0x100>
 80114ca:	e007      	b.n	80114dc <_tx_queue_receive+0xf4>
 80114cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80114ce:	1d13      	adds	r3, r2, #4
 80114d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80114d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114d4:	1d19      	adds	r1, r3, #4
 80114d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80114d8:	6812      	ldr	r2, [r2, #0]
 80114da:	601a      	str	r2, [r3, #0]
 80114dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114de:	3b01      	subs	r3, #1
 80114e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80114e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d1f1      	bne.n	80114cc <_tx_queue_receive+0xe4>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 80114e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ea:	3b01      	subs	r3, #1
 80114ec:	63bb      	str	r3, [r7, #56]	@ 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 80114ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d103      	bne.n	80114fc <_tx_queue_receive+0x114>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	2200      	movs	r2, #0
 80114f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80114fa:	e00e      	b.n	801151a <_tx_queue_receive+0x132>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80114fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011500:	633b      	str	r3, [r7, #48]	@ 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011506:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8011508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801150a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 801150e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011512:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8011514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011518:	671a      	str	r2, [r3, #112]	@ 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801151e:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011522:	2200      	movs	r2, #0
 8011524:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011528:	2284      	movs	r2, #132	@ 0x84
 801152a:	2100      	movs	r1, #0
 801152c:	5099      	str	r1, [r3, r2]
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801152e:	4b8f      	ldr	r3, [pc, #572]	@ (801176c <_tx_queue_receive+0x384>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	1c5a      	adds	r2, r3, #1
 8011534:	4b8d      	ldr	r3, [pc, #564]	@ (801176c <_tx_queue_receive+0x384>)
 8011536:	601a      	str	r2, [r3, #0]
 8011538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801153a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801153c:	6a3b      	ldr	r3, [r7, #32]
 801153e:	f383 8810 	msr	PRIMASK, r3
}
 8011542:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8011544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011546:	0018      	movs	r0, r3
 8011548:	f001 f904 	bl	8012754 <_tx_thread_system_resume>
 801154c:	e109      	b.n	8011762 <_tx_queue_receive+0x37a>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	6a1b      	ldr	r3, [r3, #32]
 8011552:	64fb      	str	r3, [r7, #76]	@ 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	64bb      	str	r3, [r7, #72]	@ 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	689b      	ldr	r3, [r3, #8]
 801155c:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 801155e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011560:	1d13      	adds	r3, r2, #4
 8011562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011564:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011566:	1d19      	adds	r1, r3, #4
 8011568:	64b9      	str	r1, [r7, #72]	@ 0x48
 801156a:	6812      	ldr	r2, [r2, #0]
 801156c:	601a      	str	r2, [r3, #0]
 801156e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011570:	2b01      	cmp	r3, #1
 8011572:	d90e      	bls.n	8011592 <_tx_queue_receive+0x1aa>
 8011574:	e007      	b.n	8011586 <_tx_queue_receive+0x19e>
 8011576:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011578:	1d13      	adds	r3, r2, #4
 801157a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801157c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801157e:	1d19      	adds	r1, r3, #4
 8011580:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011582:	6812      	ldr	r2, [r2, #0]
 8011584:	601a      	str	r2, [r3, #0]
 8011586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011588:	3b01      	subs	r3, #1
 801158a:	647b      	str	r3, [r7, #68]	@ 0x44
 801158c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801158e:	2b00      	cmp	r3, #0
 8011590:	d1f1      	bne.n	8011576 <_tx_queue_receive+0x18e>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	69db      	ldr	r3, [r3, #28]
 8011596:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011598:	429a      	cmp	r2, r3
 801159a:	d102      	bne.n	80115a2 <_tx_queue_receive+0x1ba>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	699b      	ldr	r3, [r3, #24]
 80115a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80115a6:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 80115a8:	4b70      	ldr	r3, [pc, #448]	@ (801176c <_tx_queue_receive+0x384>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	1c5a      	adds	r2, r3, #1
 80115ae:	4b6f      	ldr	r3, [pc, #444]	@ (801176c <_tx_queue_receive+0x384>)
 80115b0:	601a      	str	r2, [r3, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 80115b2:	4b6e      	ldr	r3, [pc, #440]	@ (801176c <_tx_queue_receive+0x384>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	1e5a      	subs	r2, r3, #1
 80115b8:	4b6c      	ldr	r3, [pc, #432]	@ (801176c <_tx_queue_receive+0x384>)
 80115ba:	601a      	str	r2, [r3, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80115bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80115c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                destination =  queue_ptr -> tx_queue_write;
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115c6:	64bb      	str	r3, [r7, #72]	@ 0x48
                size =         queue_ptr -> tx_queue_message_size;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	689b      	ldr	r3, [r3, #8]
 80115cc:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80115ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80115d0:	1d13      	adds	r3, r2, #4
 80115d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80115d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115d6:	1d19      	adds	r1, r3, #4
 80115d8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80115da:	6812      	ldr	r2, [r2, #0]
 80115dc:	601a      	str	r2, [r3, #0]
 80115de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115e0:	2b01      	cmp	r3, #1
 80115e2:	d90e      	bls.n	8011602 <_tx_queue_receive+0x21a>
 80115e4:	e007      	b.n	80115f6 <_tx_queue_receive+0x20e>
 80115e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80115e8:	1d13      	adds	r3, r2, #4
 80115ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80115ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115ee:	1d19      	adds	r1, r3, #4
 80115f0:	64b9      	str	r1, [r7, #72]	@ 0x48
 80115f2:	6812      	ldr	r2, [r2, #0]
 80115f4:	601a      	str	r2, [r3, #0]
 80115f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115f8:	3b01      	subs	r3, #1
 80115fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80115fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d1f1      	bne.n	80115e6 <_tx_queue_receive+0x1fe>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	69db      	ldr	r3, [r3, #28]
 8011606:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011608:	429a      	cmp	r2, r3
 801160a:	d102      	bne.n	8011612 <_tx_queue_receive+0x22a>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	699b      	ldr	r3, [r3, #24]
 8011610:	64bb      	str	r3, [r7, #72]	@ 0x48
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011616:	625a      	str	r2, [r3, #36]	@ 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801161c:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 801161e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011620:	3b01      	subs	r3, #1
 8011622:	63bb      	str	r3, [r7, #56]	@ 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 8011624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011626:	2b00      	cmp	r3, #0
 8011628:	d103      	bne.n	8011632 <_tx_queue_receive+0x24a>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	2200      	movs	r2, #0
 801162e:	629a      	str	r2, [r3, #40]	@ 0x28
 8011630:	e00e      	b.n	8011650 <_tx_queue_receive+0x268>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8011632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011636:	633b      	str	r3, [r7, #48]	@ 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801163c:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801163e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011642:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011648:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 801164a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801164c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801164e:	671a      	str	r2, [r3, #112]	@ 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011654:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011658:	2200      	movs	r2, #0
 801165a:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801165c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801165e:	2284      	movs	r2, #132	@ 0x84
 8011660:	2100      	movs	r1, #0
 8011662:	5099      	str	r1, [r3, r2]
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8011664:	4b41      	ldr	r3, [pc, #260]	@ (801176c <_tx_queue_receive+0x384>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	1c5a      	adds	r2, r3, #1
 801166a:	4b40      	ldr	r3, [pc, #256]	@ (801176c <_tx_queue_receive+0x384>)
 801166c:	601a      	str	r2, [r3, #0]
 801166e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011670:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011672:	69fb      	ldr	r3, [r7, #28]
 8011674:	f383 8810 	msr	PRIMASK, r3
}
 8011678:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 801167a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801167c:	0018      	movs	r0, r3
 801167e:	f001 f869 	bl	8012754 <_tx_thread_system_resume>
 8011682:	e06e      	b.n	8011762 <_tx_queue_receive+0x37a>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d063      	beq.n	8011752 <_tx_queue_receive+0x36a>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801168a:	4b38      	ldr	r3, [pc, #224]	@ (801176c <_tx_queue_receive+0x384>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d008      	beq.n	80116a4 <_tx_queue_receive+0x2bc>
 8011692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011694:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011696:	69bb      	ldr	r3, [r7, #24]
 8011698:	f383 8810 	msr	PRIMASK, r3
}
 801169c:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 801169e:	230a      	movs	r3, #10
 80116a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80116a2:	e05e      	b.n	8011762 <_tx_queue_receive+0x37a>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80116a4:	4b32      	ldr	r3, [pc, #200]	@ (8011770 <_tx_queue_receive+0x388>)
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 80116aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116ac:	4a31      	ldr	r2, [pc, #196]	@ (8011774 <_tx_queue_receive+0x38c>)
 80116ae:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 80116b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116b2:	68fa      	ldr	r2, [r7, #12]
 80116b4:	66da      	str	r2, [r3, #108]	@ 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 80116b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116b8:	68ba      	ldr	r2, [r7, #8]
 80116ba:	67da      	str	r2, [r3, #124]	@ 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 80116bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116be:	2280      	movs	r2, #128	@ 0x80
 80116c0:	2100      	movs	r1, #0
 80116c2:	5099      	str	r1, [r3, r2]

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80116c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116c6:	22ac      	movs	r2, #172	@ 0xac
 80116c8:	589b      	ldr	r3, [r3, r2]
 80116ca:	1c5a      	adds	r2, r3, #1
 80116cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116ce:	21ac      	movs	r1, #172	@ 0xac
 80116d0:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 80116d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d109      	bne.n	80116ec <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80116dc:	629a      	str	r2, [r3, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80116de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80116e2:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80116e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80116e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80116ea:	e011      	b.n	8011710 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116f0:	633b      	str	r3, [r7, #48]	@ 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80116f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116f6:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80116f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80116fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80116fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011700:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011702:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011706:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011708:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801170a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801170c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801170e:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8011710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011712:	1c5a      	adds	r2, r3, #1
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8011718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801171a:	2205      	movs	r2, #5
 801171c:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801171e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011720:	2201      	movs	r2, #1
 8011722:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011726:	687a      	ldr	r2, [r7, #4]
 8011728:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801172a:	4b10      	ldr	r3, [pc, #64]	@ (801176c <_tx_queue_receive+0x384>)
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	1c5a      	adds	r2, r3, #1
 8011730:	4b0e      	ldr	r3, [pc, #56]	@ (801176c <_tx_queue_receive+0x384>)
 8011732:	601a      	str	r2, [r3, #0]
 8011734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011736:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	f383 8810 	msr	PRIMASK, r3
}
 801173e:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8011740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011742:	0018      	movs	r0, r3
 8011744:	f001 f906 	bl	8012954 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8011748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801174a:	2284      	movs	r2, #132	@ 0x84
 801174c:	589b      	ldr	r3, [r3, r2]
 801174e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011750:	e007      	b.n	8011762 <_tx_queue_receive+0x37a>
 8011752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011754:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	f383 8810 	msr	PRIMASK, r3
}
 801175c:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 801175e:	230a      	movs	r3, #10
 8011760:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Return completion status.  */
    return(status);
 8011762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8011764:	0018      	movs	r0, r3
 8011766:	46bd      	mov	sp, r7
 8011768:	b014      	add	sp, #80	@ 0x50
 801176a:	bd80      	pop	{r7, pc}
 801176c:	20011230 	.word	0x20011230
 8011770:	20011198 	.word	0x20011198
 8011774:	080111d5 	.word	0x080111d5

08011778 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b094      	sub	sp, #80	@ 0x50
 801177c:	af00      	add	r7, sp, #0
 801177e:	60f8      	str	r0, [r7, #12]
 8011780:	60b9      	str	r1, [r7, #8]
 8011782:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8011784:	2300      	movs	r3, #0
 8011786:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011788:	f3ef 8310 	mrs	r3, PRIMASK
 801178c:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 801178e:	b672      	cpsid	i
    return(primask_value);
 8011790:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8011792:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011798:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	695b      	ldr	r3, [r3, #20]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d100      	bne.n	80117a4 <_tx_queue_send+0x2c>
 80117a2:	e09b      	b.n	80118dc <_tx_queue_send+0x164>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80117a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d13c      	bne.n	8011824 <_tx_queue_send+0xac>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	695b      	ldr	r3, [r3, #20]
 80117ae:	1e5a      	subs	r2, r3, #1
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	691b      	ldr	r3, [r3, #16]
 80117b8:	1c5a      	adds	r2, r3, #1
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  queue_ptr -> tx_queue_write;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117c6:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	689b      	ldr	r3, [r3, #8]
 80117cc:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80117ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80117d0:	1d13      	adds	r3, r2, #4
 80117d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80117d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117d6:	1d19      	adds	r1, r3, #4
 80117d8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80117da:	6812      	ldr	r2, [r2, #0]
 80117dc:	601a      	str	r2, [r3, #0]
 80117de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117e0:	2b01      	cmp	r3, #1
 80117e2:	d90e      	bls.n	8011802 <_tx_queue_send+0x8a>
 80117e4:	e007      	b.n	80117f6 <_tx_queue_send+0x7e>
 80117e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80117e8:	1d13      	adds	r3, r2, #4
 80117ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80117ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117ee:	1d19      	adds	r1, r3, #4
 80117f0:	64b9      	str	r1, [r7, #72]	@ 0x48
 80117f2:	6812      	ldr	r2, [r2, #0]
 80117f4:	601a      	str	r2, [r3, #0]
 80117f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117f8:	3b01      	subs	r3, #1
 80117fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80117fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d1f1      	bne.n	80117e6 <_tx_queue_send+0x6e>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	69db      	ldr	r3, [r3, #28]
 8011806:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011808:	429a      	cmp	r2, r3
 801180a:	d102      	bne.n	8011812 <_tx_queue_send+0x9a>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	699b      	ldr	r3, [r3, #24]
 8011810:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011816:	625a      	str	r2, [r3, #36]	@ 0x24
 8011818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801181a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801181e:	f383 8810 	msr	PRIMASK, r3
}
 8011822:	e0ca      	b.n	80119ba <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011828:	637b      	str	r3, [r7, #52]	@ 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 801182a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801182c:	3b01      	subs	r3, #1
 801182e:	63bb      	str	r3, [r7, #56]	@ 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8011830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011832:	2b00      	cmp	r3, #0
 8011834:	d103      	bne.n	801183e <_tx_queue_send+0xc6>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	2200      	movs	r2, #0
 801183a:	629a      	str	r2, [r3, #40]	@ 0x28
 801183c:	e012      	b.n	8011864 <_tx_queue_send+0xec>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 801183e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011840:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8011846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801184a:	633b      	str	r3, [r7, #48]	@ 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011850:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011856:	62fb      	str	r3, [r7, #44]	@ 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801185a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801185c:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 801185e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011862:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011868:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801186a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801186c:	2200      	movs	r2, #0
 801186e:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8011874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011876:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011878:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	689b      	ldr	r3, [r3, #8]
 801187e:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8011880:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011882:	1d13      	adds	r3, r2, #4
 8011884:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011888:	1d19      	adds	r1, r3, #4
 801188a:	64b9      	str	r1, [r7, #72]	@ 0x48
 801188c:	6812      	ldr	r2, [r2, #0]
 801188e:	601a      	str	r2, [r3, #0]
 8011890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011892:	2b01      	cmp	r3, #1
 8011894:	d90e      	bls.n	80118b4 <_tx_queue_send+0x13c>
 8011896:	e007      	b.n	80118a8 <_tx_queue_send+0x130>
 8011898:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801189a:	1d13      	adds	r3, r2, #4
 801189c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801189e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118a0:	1d19      	adds	r1, r3, #4
 80118a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80118a4:	6812      	ldr	r2, [r2, #0]
 80118a6:	601a      	str	r2, [r3, #0]
 80118a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118aa:	3b01      	subs	r3, #1
 80118ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80118ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d1f1      	bne.n	8011898 <_tx_queue_send+0x120>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80118b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118b6:	2284      	movs	r2, #132	@ 0x84
 80118b8:	2100      	movs	r1, #0
 80118ba:	5099      	str	r1, [r3, r2]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80118bc:	4b41      	ldr	r3, [pc, #260]	@ (80119c4 <_tx_queue_send+0x24c>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	1c5a      	adds	r2, r3, #1
 80118c2:	4b40      	ldr	r3, [pc, #256]	@ (80119c4 <_tx_queue_send+0x24c>)
 80118c4:	601a      	str	r2, [r3, #0]
 80118c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118c8:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80118ca:	6a3b      	ldr	r3, [r7, #32]
 80118cc:	f383 8810 	msr	PRIMASK, r3
}
 80118d0:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 80118d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118d4:	0018      	movs	r0, r3
 80118d6:	f000 ff3d 	bl	8012754 <_tx_thread_system_resume>
 80118da:	e06e      	b.n	80119ba <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d063      	beq.n	80119aa <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80118e2:	4b38      	ldr	r3, [pc, #224]	@ (80119c4 <_tx_queue_send+0x24c>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d008      	beq.n	80118fc <_tx_queue_send+0x184>
 80118ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118ec:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80118ee:	69fb      	ldr	r3, [r7, #28]
 80118f0:	f383 8810 	msr	PRIMASK, r3
}
 80118f4:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 80118f6:	230b      	movs	r3, #11
 80118f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80118fa:	e05e      	b.n	80119ba <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80118fc:	4b32      	ldr	r3, [pc, #200]	@ (80119c8 <_tx_queue_send+0x250>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8011902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011904:	4a31      	ldr	r2, [pc, #196]	@ (80119cc <_tx_queue_send+0x254>)
 8011906:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8011908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801190a:	68fa      	ldr	r2, [r7, #12]
 801190c:	66da      	str	r2, [r3, #108]	@ 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 801190e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011910:	68ba      	ldr	r2, [r7, #8]
 8011912:	67da      	str	r2, [r3, #124]	@ 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8011914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011916:	2280      	movs	r2, #128	@ 0x80
 8011918:	2100      	movs	r1, #0
 801191a:	5099      	str	r1, [r3, r2]

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 801191c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801191e:	22ac      	movs	r2, #172	@ 0xac
 8011920:	589b      	ldr	r3, [r3, r2]
 8011922:	1c5a      	adds	r2, r3, #1
 8011924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011926:	21ac      	movs	r1, #172	@ 0xac
 8011928:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 801192a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801192c:	2b00      	cmp	r3, #0
 801192e:	d109      	bne.n	8011944 <_tx_queue_send+0x1cc>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011934:	629a      	str	r2, [r3, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8011936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011938:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801193a:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 801193c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801193e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011940:	675a      	str	r2, [r3, #116]	@ 0x74
 8011942:	e011      	b.n	8011968 <_tx_queue_send+0x1f0>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011948:	633b      	str	r3, [r7, #48]	@ 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801194a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801194c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801194e:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8011950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011954:	62fb      	str	r3, [r7, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8011956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011958:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801195a:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801195c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801195e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011960:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8011962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011966:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8011968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801196a:	1c5a      	adds	r2, r3, #1
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8011970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011972:	2205      	movs	r2, #5
 8011974:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011978:	2201      	movs	r2, #1
 801197a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801197c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011982:	4b10      	ldr	r3, [pc, #64]	@ (80119c4 <_tx_queue_send+0x24c>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	1c5a      	adds	r2, r3, #1
 8011988:	4b0e      	ldr	r3, [pc, #56]	@ (80119c4 <_tx_queue_send+0x24c>)
 801198a:	601a      	str	r2, [r3, #0]
 801198c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801198e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011990:	69bb      	ldr	r3, [r7, #24]
 8011992:	f383 8810 	msr	PRIMASK, r3
}
 8011996:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8011998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801199a:	0018      	movs	r0, r3
 801199c:	f000 ffda 	bl	8012954 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80119a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119a2:	2284      	movs	r2, #132	@ 0x84
 80119a4:	589b      	ldr	r3, [r3, r2]
 80119a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80119a8:	e007      	b.n	80119ba <_tx_queue_send+0x242>
 80119aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119ac:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	f383 8810 	msr	PRIMASK, r3
}
 80119b4:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 80119b6:	230b      	movs	r3, #11
 80119b8:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Return completion status.  */
    return(status);
 80119ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80119bc:	0018      	movs	r0, r3
 80119be:	46bd      	mov	sp, r7
 80119c0:	b014      	add	sp, #80	@ 0x50
 80119c2:	bd80      	pop	{r7, pc}
 80119c4:	20011230 	.word	0x20011230
 80119c8:	20011198 	.word	0x20011198
 80119cc:	080111d5 	.word	0x080111d5

080119d0 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b08c      	sub	sp, #48	@ 0x30
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80119da:	f3ef 8310 	mrs	r3, PRIMASK
 80119de:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80119e0:	b672      	cpsid	i
    return(primask_value);
 80119e2:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 80119e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80119ea:	4b32      	ldr	r3, [pc, #200]	@ (8011ab4 <_tx_semaphore_cleanup+0xe4>)
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d157      	bne.n	8011aa0 <_tx_semaphore_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	22ac      	movs	r2, #172	@ 0xac
 80119f4:	589b      	ldr	r3, [r3, r2]
 80119f6:	683a      	ldr	r2, [r7, #0]
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d151      	bne.n	8011aa0 <_tx_semaphore_cleanup+0xd0>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a00:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8011a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d04b      	beq.n	8011aa0 <_tx_semaphore_cleanup+0xd0>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8011a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	4a2a      	ldr	r2, [pc, #168]	@ (8011ab8 <_tx_semaphore_cleanup+0xe8>)
 8011a0e:	4293      	cmp	r3, r2
 8011a10:	d146      	bne.n	8011aa0 <_tx_semaphore_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8011a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a14:	691b      	ldr	r3, [r3, #16]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d042      	beq.n	8011aa0 <_tx_semaphore_cleanup+0xd0>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8011a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a22:	691b      	ldr	r3, [r3, #16]
 8011a24:	1e5a      	subs	r2, r3, #1
 8011a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a28:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8011a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a2c:	691b      	ldr	r3, [r3, #16]
 8011a2e:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8011a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d103      	bne.n	8011a3e <_tx_semaphore_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8011a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a38:	2200      	movs	r2, #0
 8011a3a:	60da      	str	r2, [r3, #12]
 8011a3c:	e013      	b.n	8011a66 <_tx_semaphore_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a42:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011a48:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011a4a:	6a3b      	ldr	r3, [r7, #32]
 8011a4c:	69fa      	ldr	r2, [r7, #28]
 8011a4e:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011a50:	69fb      	ldr	r3, [r7, #28]
 8011a52:	6a3a      	ldr	r2, [r7, #32]
 8011a54:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8011a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a58:	68db      	ldr	r3, [r3, #12]
 8011a5a:	687a      	ldr	r2, [r7, #4]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d102      	bne.n	8011a66 <_tx_semaphore_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8011a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a62:	6a3a      	ldr	r2, [r7, #32]
 8011a64:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a6a:	2b06      	cmp	r3, #6
 8011a6c:	d118      	bne.n	8011aa0 <_tx_semaphore_cleanup+0xd0>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2284      	movs	r2, #132	@ 0x84
 8011a72:	210d      	movs	r1, #13
 8011a74:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011a76:	4b11      	ldr	r3, [pc, #68]	@ (8011abc <_tx_semaphore_cleanup+0xec>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	1c5a      	adds	r2, r3, #1
 8011a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8011abc <_tx_semaphore_cleanup+0xec>)
 8011a7e:	601a      	str	r2, [r3, #0]
 8011a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a82:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	f383 8810 	msr	PRIMASK, r3
}
 8011a8a:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	0018      	movs	r0, r3
 8011a90:	f000 fe60 	bl	8012754 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011a94:	f3ef 8310 	mrs	r3, PRIMASK
 8011a98:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011a9a:	b672      	cpsid	i
    return(primask_value);
 8011a9c:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8011a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aa2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	f383 8810 	msr	PRIMASK, r3
}
 8011aaa:	46c0      	nop			@ (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8011aac:	46c0      	nop			@ (mov r8, r8)
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	b00c      	add	sp, #48	@ 0x30
 8011ab2:	bd80      	pop	{r7, pc}
 8011ab4:	080119d1 	.word	0x080119d1
 8011ab8:	53454d41 	.word	0x53454d41
 8011abc:	20011230 	.word	0x20011230

08011ac0 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b08e      	sub	sp, #56	@ 0x38
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	60f8      	str	r0, [r7, #12]
 8011ac8:	60b9      	str	r1, [r7, #8]
 8011aca:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ad0:	232f      	movs	r3, #47	@ 0x2f
 8011ad2:	18fb      	adds	r3, r7, r3
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	701a      	strb	r2, [r3, #0]
 8011ad8:	231c      	movs	r3, #28
 8011ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011adc:	2300      	movs	r3, #0
 8011ade:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ae0:	e009      	b.n	8011af6 <_tx_semaphore_create+0x36>
 8011ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ae4:	1c5a      	adds	r2, r3, #1
 8011ae6:	637a      	str	r2, [r7, #52]	@ 0x34
 8011ae8:	222f      	movs	r2, #47	@ 0x2f
 8011aea:	18ba      	adds	r2, r7, r2
 8011aec:	7812      	ldrb	r2, [r2, #0]
 8011aee:	701a      	strb	r2, [r3, #0]
 8011af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011af2:	3301      	adds	r3, #1
 8011af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8011af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d3f1      	bcc.n	8011ae2 <_tx_semaphore_create+0x22>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	68ba      	ldr	r2, [r7, #8]
 8011b02:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	687a      	ldr	r2, [r7, #4]
 8011b08:	609a      	str	r2, [r3, #8]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8011b0e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011b10:	b672      	cpsid	i
    return(primask_value);
 8011b12:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8011b14:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	4a18      	ldr	r2, [pc, #96]	@ (8011b7c <_tx_semaphore_create+0xbc>)
 8011b1a:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8011b1c:	4b18      	ldr	r3, [pc, #96]	@ (8011b80 <_tx_semaphore_create+0xc0>)
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d109      	bne.n	8011b38 <_tx_semaphore_create+0x78>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8011b24:	4b17      	ldr	r3, [pc, #92]	@ (8011b84 <_tx_semaphore_create+0xc4>)
 8011b26:	68fa      	ldr	r2, [r7, #12]
 8011b28:	601a      	str	r2, [r3, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	68fa      	ldr	r2, [r7, #12]
 8011b2e:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	68fa      	ldr	r2, [r7, #12]
 8011b34:	619a      	str	r2, [r3, #24]
 8011b36:	e011      	b.n	8011b5c <_tx_semaphore_create+0x9c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8011b38:	4b12      	ldr	r3, [pc, #72]	@ (8011b84 <_tx_semaphore_create+0xc4>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8011b3e:	6a3b      	ldr	r3, [r7, #32]
 8011b40:	699b      	ldr	r3, [r3, #24]
 8011b42:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8011b44:	6a3b      	ldr	r3, [r7, #32]
 8011b46:	68fa      	ldr	r2, [r7, #12]
 8011b48:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8011b4a:	69fb      	ldr	r3, [r7, #28]
 8011b4c:	68fa      	ldr	r2, [r7, #12]
 8011b4e:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	69fa      	ldr	r2, [r7, #28]
 8011b54:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	6a3a      	ldr	r2, [r7, #32]
 8011b5a:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8011b5c:	4b08      	ldr	r3, [pc, #32]	@ (8011b80 <_tx_semaphore_create+0xc0>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	1c5a      	adds	r2, r3, #1
 8011b62:	4b07      	ldr	r3, [pc, #28]	@ (8011b80 <_tx_semaphore_create+0xc0>)
 8011b64:	601a      	str	r2, [r3, #0]
 8011b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b68:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	f383 8810 	msr	PRIMASK, r3
}
 8011b70:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011b72:	2300      	movs	r3, #0
}
 8011b74:	0018      	movs	r0, r3
 8011b76:	46bd      	mov	sp, r7
 8011b78:	b00e      	add	sp, #56	@ 0x38
 8011b7a:	bd80      	pop	{r7, pc}
 8011b7c:	53454d41 	.word	0x53454d41
 8011b80:	20011164 	.word	0x20011164
 8011b84:	20011160 	.word	0x20011160

08011b88 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b08e      	sub	sp, #56	@ 0x38
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011b90:	f3ef 8310 	mrs	r3, PRIMASK
 8011b94:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011b96:	b672      	cpsid	i
    return(primask_value);
 8011b98:	69fb      	ldr	r3, [r7, #28]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8011b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8011ba2:	4b3c      	ldr	r3, [pc, #240]	@ (8011c94 <_tx_semaphore_delete+0x10c>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	1e5a      	subs	r2, r3, #1
 8011ba8:	4b3a      	ldr	r3, [pc, #232]	@ (8011c94 <_tx_semaphore_delete+0x10c>)
 8011baa:	601a      	str	r2, [r3, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8011bac:	4b39      	ldr	r3, [pc, #228]	@ (8011c94 <_tx_semaphore_delete+0x10c>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d103      	bne.n	8011bbc <_tx_semaphore_delete+0x34>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8011bb4:	4b38      	ldr	r3, [pc, #224]	@ (8011c98 <_tx_semaphore_delete+0x110>)
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	601a      	str	r2, [r3, #0]
 8011bba:	e013      	b.n	8011be4 <_tx_semaphore_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	695b      	ldr	r3, [r3, #20]
 8011bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	699b      	ldr	r3, [r3, #24]
 8011bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 8011bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011bcc:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 8011bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011bd2:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8011bd4:	4b30      	ldr	r3, [pc, #192]	@ (8011c98 <_tx_semaphore_delete+0x110>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	687a      	ldr	r2, [r7, #4]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d102      	bne.n	8011be4 <_tx_semaphore_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 8011bde:	4b2e      	ldr	r3, [pc, #184]	@ (8011c98 <_tx_semaphore_delete+0x110>)
 8011be0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011be2:	601a      	str	r2, [r3, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011be4:	4b2d      	ldr	r3, [pc, #180]	@ (8011c9c <_tx_semaphore_delete+0x114>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	1c5a      	adds	r2, r3, #1
 8011bea:	4b2c      	ldr	r3, [pc, #176]	@ (8011c9c <_tx_semaphore_delete+0x114>)
 8011bec:	601a      	str	r2, [r3, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	68db      	ldr	r3, [r3, #12]
 8011bf2:	637b      	str	r3, [r7, #52]	@ 0x34
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	691b      	ldr	r3, [r3, #16]
 8011bfe:	633b      	str	r3, [r7, #48]	@ 0x30
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2200      	movs	r2, #0
 8011c04:	611a      	str	r2, [r3, #16]
 8011c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c08:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011c0a:	69bb      	ldr	r3, [r7, #24]
 8011c0c:	f383 8810 	msr	PRIMASK, r3
}
 8011c10:	46c0      	nop			@ (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8011c12:	e023      	b.n	8011c5c <_tx_semaphore_delete+0xd4>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8011c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c16:	3b01      	subs	r3, #1
 8011c18:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8011c1e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011c20:	b672      	cpsid	i
    return(primask_value);
 8011c22:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 8011c24:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c28:	2200      	movs	r2, #0
 8011c2a:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8011c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c2e:	2284      	movs	r2, #132	@ 0x84
 8011c30:	2101      	movs	r1, #1
 8011c32:	5099      	str	r1, [r3, r2]

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8011c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c38:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8011c3a:	4b18      	ldr	r3, [pc, #96]	@ (8011c9c <_tx_semaphore_delete+0x114>)
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	1c5a      	adds	r2, r3, #1
 8011c40:	4b16      	ldr	r3, [pc, #88]	@ (8011c9c <_tx_semaphore_delete+0x114>)
 8011c42:	601a      	str	r2, [r3, #0]
 8011c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c46:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	f383 8810 	msr	PRIMASK, r3
}
 8011c4e:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c52:	0018      	movs	r0, r3
 8011c54:	f000 fd7e 	bl	8012754 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8011c58:	6a3b      	ldr	r3, [r7, #32]
 8011c5a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 8011c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d1d8      	bne.n	8011c14 <_tx_semaphore_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011c62:	f3ef 8310 	mrs	r3, PRIMASK
 8011c66:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011c68:	b672      	cpsid	i
    return(primask_value);
 8011c6a:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8011c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8011c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8011c9c <_tx_semaphore_delete+0x114>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	1e5a      	subs	r2, r3, #1
 8011c74:	4b09      	ldr	r3, [pc, #36]	@ (8011c9c <_tx_semaphore_delete+0x114>)
 8011c76:	601a      	str	r2, [r3, #0]
 8011c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c7a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f383 8810 	msr	PRIMASK, r3
}
 8011c82:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8011c84:	f000 fd2e 	bl	80126e4 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011c88:	2300      	movs	r3, #0
}
 8011c8a:	0018      	movs	r0, r3
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	b00e      	add	sp, #56	@ 0x38
 8011c90:	bd80      	pop	{r7, pc}
 8011c92:	46c0      	nop			@ (mov r8, r8)
 8011c94:	20011164 	.word	0x20011164
 8011c98:	20011160 	.word	0x20011160
 8011c9c:	20011230 	.word	0x20011230

08011ca0 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b08c      	sub	sp, #48	@ 0x30
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8011caa:	2300      	movs	r3, #0
 8011cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011cae:	f3ef 8310 	mrs	r3, PRIMASK
 8011cb2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011cb4:	b672      	cpsid	i
    return(primask_value);
 8011cb6:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8011cb8:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	689b      	ldr	r3, [r3, #8]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d00a      	beq.n	8011cd8 <_tx_semaphore_get+0x38>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	689b      	ldr	r3, [r3, #8]
 8011cc6:	1e5a      	subs	r2, r3, #1
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	609a      	str	r2, [r3, #8]
 8011ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cce:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	f383 8810 	msr	PRIMASK, r3
}
 8011cd6:	e069      	b.n	8011dac <_tx_semaphore_get+0x10c>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d05e      	beq.n	8011d9c <_tx_semaphore_get+0xfc>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8011cde:	4b36      	ldr	r3, [pc, #216]	@ (8011db8 <_tx_semaphore_get+0x118>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d008      	beq.n	8011cf8 <_tx_semaphore_get+0x58>
 8011ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ce8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011cea:	693b      	ldr	r3, [r7, #16]
 8011cec:	f383 8810 	msr	PRIMASK, r3
}
 8011cf0:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8011cf2:	230d      	movs	r3, #13
 8011cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011cf6:	e059      	b.n	8011dac <_tx_semaphore_get+0x10c>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011cf8:	4b30      	ldr	r3, [pc, #192]	@ (8011dbc <_tx_semaphore_get+0x11c>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8011cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d00:	4a2f      	ldr	r2, [pc, #188]	@ (8011dc0 <_tx_semaphore_get+0x120>)
 8011d02:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8011d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d06:	687a      	ldr	r2, [r7, #4]
 8011d08:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8011d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d0c:	22ac      	movs	r2, #172	@ 0xac
 8011d0e:	589b      	ldr	r3, [r3, r2]
 8011d10:	1c5a      	adds	r2, r3, #1
 8011d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d14:	21ac      	movs	r1, #172	@ 0xac
 8011d16:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	691b      	ldr	r3, [r3, #16]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d109      	bne.n	8011d34 <_tx_semaphore_get+0x94>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d24:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8011d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d2a:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8011d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d30:	675a      	str	r2, [r3, #116]	@ 0x74
 8011d32:	e011      	b.n	8011d58 <_tx_semaphore_get+0xb8>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	68db      	ldr	r3, [r3, #12]
 8011d38:	623b      	str	r3, [r7, #32]
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8011d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d3c:	6a3a      	ldr	r2, [r7, #32]
 8011d3e:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8011d40:	6a3b      	ldr	r3, [r7, #32]
 8011d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d44:	61fb      	str	r3, [r7, #28]
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8011d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d48:	69fa      	ldr	r2, [r7, #28]
 8011d4a:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011d4c:	69fb      	ldr	r3, [r7, #28]
 8011d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d50:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8011d52:	6a3b      	ldr	r3, [r7, #32]
 8011d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d56:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	691b      	ldr	r3, [r3, #16]
 8011d5c:	1c5a      	adds	r2, r3, #1
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8011d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d64:	2206      	movs	r2, #6
 8011d66:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d6a:	2201      	movs	r2, #1
 8011d6c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d70:	683a      	ldr	r2, [r7, #0]
 8011d72:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011d74:	4b10      	ldr	r3, [pc, #64]	@ (8011db8 <_tx_semaphore_get+0x118>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	1c5a      	adds	r2, r3, #1
 8011d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8011db8 <_tx_semaphore_get+0x118>)
 8011d7c:	601a      	str	r2, [r3, #0]
 8011d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d80:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	f383 8810 	msr	PRIMASK, r3
}
 8011d88:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8011d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d8c:	0018      	movs	r0, r3
 8011d8e:	f000 fde1 	bl	8012954 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8011d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d94:	2284      	movs	r2, #132	@ 0x84
 8011d96:	589b      	ldr	r3, [r3, r2]
 8011d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011d9a:	e007      	b.n	8011dac <_tx_semaphore_get+0x10c>
 8011d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d9e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	f383 8810 	msr	PRIMASK, r3
}
 8011da6:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8011da8:	230d      	movs	r3, #13
 8011daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* Return completion status.  */
    return(status);
 8011dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8011dae:	0018      	movs	r0, r3
 8011db0:	46bd      	mov	sp, r7
 8011db2:	b00c      	add	sp, #48	@ 0x30
 8011db4:	bd80      	pop	{r7, pc}
 8011db6:	46c0      	nop			@ (mov r8, r8)
 8011db8:	20011230 	.word	0x20011230
 8011dbc:	20011198 	.word	0x20011198
 8011dc0:	080119d1 	.word	0x080119d1

08011dc4 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b08a      	sub	sp, #40	@ 0x28
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8011dd0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011dd2:	b672      	cpsid	i
    return(primask_value);
 8011dd4:	693b      	ldr	r3, [r7, #16]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8011dd6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	691b      	ldr	r3, [r3, #16]
 8011ddc:	623b      	str	r3, [r7, #32]

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8011dde:	6a3b      	ldr	r3, [r7, #32]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d10a      	bne.n	8011dfa <_tx_semaphore_put+0x36>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	689b      	ldr	r3, [r3, #8]
 8011de8:	1c5a      	adds	r2, r3, #1
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	609a      	str	r2, [r3, #8]
 8011dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011df0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	f383 8810 	msr	PRIMASK, r3
}
 8011df8:	e034      	b.n	8011e64 <_tx_semaphore_put+0xa0>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	68db      	ldr	r3, [r3, #12]
 8011dfe:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8011e00:	6a3b      	ldr	r3, [r7, #32]
 8011e02:	3b01      	subs	r3, #1
 8011e04:	623b      	str	r3, [r7, #32]
        if (suspended_count == TX_NO_SUSPENSIONS)
 8011e06:	6a3b      	ldr	r3, [r7, #32]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d103      	bne.n	8011e14 <_tx_semaphore_put+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	60da      	str	r2, [r3, #12]
 8011e12:	e00e      	b.n	8011e32 <_tx_semaphore_put+0x6e>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8011e14:	69fb      	ldr	r3, [r7, #28]
 8011e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e18:	61bb      	str	r3, [r7, #24]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	69ba      	ldr	r2, [r7, #24]
 8011e1e:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011e20:	69fb      	ldr	r3, [r7, #28]
 8011e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e24:	617b      	str	r3, [r7, #20]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011e26:	69bb      	ldr	r3, [r7, #24]
 8011e28:	697a      	ldr	r2, [r7, #20]
 8011e2a:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	69ba      	ldr	r2, [r7, #24]
 8011e30:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6a3a      	ldr	r2, [r7, #32]
 8011e36:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011e38:	69fb      	ldr	r3, [r7, #28]
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011e3e:	69fb      	ldr	r3, [r7, #28]
 8011e40:	2284      	movs	r2, #132	@ 0x84
 8011e42:	2100      	movs	r1, #0
 8011e44:	5099      	str	r1, [r3, r2]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8011e46:	4b0a      	ldr	r3, [pc, #40]	@ (8011e70 <_tx_semaphore_put+0xac>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	1c5a      	adds	r2, r3, #1
 8011e4c:	4b08      	ldr	r3, [pc, #32]	@ (8011e70 <_tx_semaphore_put+0xac>)
 8011e4e:	601a      	str	r2, [r3, #0]
 8011e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e52:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	f383 8810 	msr	PRIMASK, r3
}
 8011e5a:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011e5c:	69fb      	ldr	r3, [r7, #28]
 8011e5e:	0018      	movs	r0, r3
 8011e60:	f000 fc78 	bl	8012754 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8011e64:	2300      	movs	r3, #0
}
 8011e66:	0018      	movs	r0, r3
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	b00a      	add	sp, #40	@ 0x28
 8011e6c:	bd80      	pop	{r7, pc}
 8011e6e:	46c0      	nop			@ (mov r8, r8)
 8011e70:	20011230 	.word	0x20011230

08011e74 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b098      	sub	sp, #96	@ 0x60
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	60f8      	str	r0, [r7, #12]
 8011e7c:	60b9      	str	r1, [r7, #8]
 8011e7e:	607a      	str	r2, [r7, #4]
 8011e80:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8011e82:	2300      	movs	r3, #0
 8011e84:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8011e86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011e88:	657b      	str	r3, [r7, #84]	@ 0x54
 8011e8a:	2347      	movs	r3, #71	@ 0x47
 8011e8c:	18fb      	adds	r3, r7, r3
 8011e8e:	22ef      	movs	r2, #239	@ 0xef
 8011e90:	701a      	strb	r2, [r3, #0]
 8011e92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e94:	643b      	str	r3, [r7, #64]	@ 0x40
 8011e96:	2300      	movs	r3, #0
 8011e98:	653b      	str	r3, [r7, #80]	@ 0x50
 8011e9a:	e009      	b.n	8011eb0 <_tx_thread_create+0x3c>
 8011e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e9e:	1c5a      	adds	r2, r3, #1
 8011ea0:	657a      	str	r2, [r7, #84]	@ 0x54
 8011ea2:	2247      	movs	r2, #71	@ 0x47
 8011ea4:	18ba      	adds	r2, r7, r2
 8011ea6:	7812      	ldrb	r2, [r2, #0]
 8011ea8:	701a      	strb	r2, [r3, #0]
 8011eaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011eac:	3301      	adds	r3, #1
 8011eae:	653b      	str	r3, [r7, #80]	@ 0x50
 8011eb0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011eb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d3f1      	bcc.n	8011e9c <_tx_thread_create+0x28>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ebc:	233f      	movs	r3, #63	@ 0x3f
 8011ebe:	18fb      	adds	r3, r7, r3
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	701a      	strb	r2, [r3, #0]
 8011ec4:	23b0      	movs	r3, #176	@ 0xb0
 8011ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011ec8:	2300      	movs	r3, #0
 8011eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011ecc:	e009      	b.n	8011ee2 <_tx_thread_create+0x6e>
 8011ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ed0:	1c5a      	adds	r2, r3, #1
 8011ed2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8011ed4:	223f      	movs	r2, #63	@ 0x3f
 8011ed6:	18ba      	adds	r2, r7, r2
 8011ed8:	7812      	ldrb	r2, [r2, #0]
 8011eda:	701a      	strb	r2, [r3, #0]
 8011edc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011ede:	3301      	adds	r3, #1
 8011ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011ee2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d3f1      	bcc.n	8011ece <_tx_thread_create+0x5a>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	68ba      	ldr	r2, [r7, #8]
 8011eee:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	687a      	ldr	r2, [r7, #4]
 8011ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	683a      	ldr	r2, [r7, #0]
 8011efa:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011f00:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011f06:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	2194      	movs	r1, #148	@ 0x94
 8011f12:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011f14:	505a      	str	r2, [r3, r1]
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011f1a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011f20:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	229c      	movs	r2, #156	@ 0x9c
 8011f26:	2120      	movs	r1, #32
 8011f28:	5099      	str	r1, [r3, r2]

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8011f2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f2c:	637b      	str	r3, [r7, #52]	@ 0x34
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8011f2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f30:	3b01      	subs	r3, #1
 8011f32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f34:	18d3      	adds	r3, r2, r3
 8011f36:	637b      	str	r3, [r7, #52]	@ 0x34
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f3c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8011f3e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011f40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d007      	beq.n	8011f56 <_tx_thread_create+0xe2>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	2298      	movs	r2, #152	@ 0x98
 8011f50:	2100      	movs	r1, #0
 8011f52:	5099      	str	r1, [r3, r2]
 8011f54:	e006      	b.n	8011f64 <_tx_thread_create+0xf0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011f5a:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	2198      	movs	r1, #152	@ 0x98
 8011f60:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011f62:	505a      	str	r2, [r3, r1]
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	2203      	movs	r2, #3
 8011f68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	4a48      	ldr	r2, [pc, #288]	@ (8012090 <_tx_thread_create+0x21c>)
 8011f6e:	655a      	str	r2, [r3, #84]	@ 0x54
 8011f70:	68fa      	ldr	r2, [r7, #12]
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8011f76:	4a47      	ldr	r2, [pc, #284]	@ (8012094 <_tx_thread_create+0x220>)
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	0011      	movs	r1, r2
 8011f7c:	0018      	movs	r0, r3
 8011f7e:	f7ee f96f 	bl	8000260 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011f82:	f3ef 8310 	mrs	r3, PRIMASK
 8011f86:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011f88:	b672      	cpsid	i
    return(primask_value);
 8011f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8011f8c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	4a41      	ldr	r2, [pc, #260]	@ (8012098 <_tx_thread_create+0x224>)
 8011f92:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8011f94:	4b41      	ldr	r3, [pc, #260]	@ (801209c <_tx_thread_create+0x228>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d10b      	bne.n	8011fb4 <_tx_thread_create+0x140>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8011f9c:	4b40      	ldr	r3, [pc, #256]	@ (80120a0 <_tx_thread_create+0x22c>)
 8011f9e:	68fa      	ldr	r2, [r7, #12]
 8011fa0:	601a      	str	r2, [r3, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	2188      	movs	r1, #136	@ 0x88
 8011fa6:	68fa      	ldr	r2, [r7, #12]
 8011fa8:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	218c      	movs	r1, #140	@ 0x8c
 8011fae:	68fa      	ldr	r2, [r7, #12]
 8011fb0:	505a      	str	r2, [r3, r1]
 8011fb2:	e016      	b.n	8011fe2 <_tx_thread_create+0x16e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8011fb4:	4b3a      	ldr	r3, [pc, #232]	@ (80120a0 <_tx_thread_create+0x22c>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        previous_thread =  next_thread -> tx_thread_created_previous;
 8011fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fbc:	228c      	movs	r2, #140	@ 0x8c
 8011fbe:	589b      	ldr	r3, [r3, r2]
 8011fc0:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8011fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fc4:	218c      	movs	r1, #140	@ 0x8c
 8011fc6:	68fa      	ldr	r2, [r7, #12]
 8011fc8:	505a      	str	r2, [r3, r1]
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8011fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fcc:	2188      	movs	r1, #136	@ 0x88
 8011fce:	68fa      	ldr	r2, [r7, #12]
 8011fd0:	505a      	str	r2, [r3, r1]

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	218c      	movs	r1, #140	@ 0x8c
 8011fd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fd8:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_next =      next_thread;
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	2188      	movs	r1, #136	@ 0x88
 8011fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011fe0:	505a      	str	r2, [r3, r1]
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8011fe2:	4b2e      	ldr	r3, [pc, #184]	@ (801209c <_tx_thread_create+0x228>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	1c5a      	adds	r2, r3, #1
 8011fe8:	4b2c      	ldr	r3, [pc, #176]	@ (801209c <_tx_thread_create+0x228>)
 8011fea:	601a      	str	r2, [r3, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011fec:	4b2d      	ldr	r3, [pc, #180]	@ (80120a4 <_tx_thread_create+0x230>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	1c5a      	adds	r2, r3, #1
 8011ff2:	4b2c      	ldr	r3, [pc, #176]	@ (80120a4 <_tx_thread_create+0x230>)
 8011ff4:	601a      	str	r2, [r3, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8011ff6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d12a      	bne.n	8012052 <_tx_thread_create+0x1de>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011ffc:	f3ef 8305 	mrs	r3, IPSR
 8012000:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 8012002:	6a3a      	ldr	r2, [r7, #32]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8012004:	4b28      	ldr	r3, [pc, #160]	@ (80120a8 <_tx_thread_create+0x234>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	4313      	orrs	r3, r2
 801200a:	4a28      	ldr	r2, [pc, #160]	@ (80120ac <_tx_thread_create+0x238>)
 801200c:	4293      	cmp	r3, r2
 801200e:	d90d      	bls.n	801202c <_tx_thread_create+0x1b8>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8012010:	4b27      	ldr	r3, [pc, #156]	@ (80120b0 <_tx_thread_create+0x23c>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8012016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012018:	2b00      	cmp	r3, #0
 801201a:	d009      	beq.n	8012030 <_tx_thread_create+0x1bc>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 801201c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801201e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012020:	65bb      	str	r3, [r7, #88]	@ 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8012022:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012026:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012028:	63da      	str	r2, [r3, #60]	@ 0x3c
 801202a:	e001      	b.n	8012030 <_tx_thread_create+0x1bc>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 801202c:	2300      	movs	r3, #0
 801202e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012032:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012034:	69fb      	ldr	r3, [r7, #28]
 8012036:	f383 8810 	msr	PRIMASK, r3
}
 801203a:	46c0      	nop			@ (mov r8, r8)

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	0018      	movs	r0, r3
 8012040:	f000 fb88 	bl	8012754 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8012044:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012046:	2b00      	cmp	r3, #0
 8012048:	d01c      	beq.n	8012084 <_tx_thread_create+0x210>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801204a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801204c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801204e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8012050:	e018      	b.n	8012084 <_tx_thread_create+0x210>
 8012052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012054:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012056:	693b      	ldr	r3, [r7, #16]
 8012058:	f383 8810 	msr	PRIMASK, r3
}
 801205c:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801205e:	f3ef 8310 	mrs	r3, PRIMASK
 8012062:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012064:	b672      	cpsid	i
    return(primask_value);
 8012066:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8012068:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 801206a:	4b0e      	ldr	r3, [pc, #56]	@ (80120a4 <_tx_thread_create+0x230>)
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	1e5a      	subs	r2, r3, #1
 8012070:	4b0c      	ldr	r3, [pc, #48]	@ (80120a4 <_tx_thread_create+0x230>)
 8012072:	601a      	str	r2, [r3, #0]
 8012074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012076:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012078:	69bb      	ldr	r3, [r7, #24]
 801207a:	f383 8810 	msr	PRIMASK, r3
}
 801207e:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012080:	f000 fb30 	bl	80126e4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8012084:	2300      	movs	r3, #0
}
 8012086:	0018      	movs	r0, r3
 8012088:	46bd      	mov	sp, r7
 801208a:	b018      	add	sp, #96	@ 0x60
 801208c:	bd80      	pop	{r7, pc}
 801208e:	46c0      	nop			@ (mov r8, r8)
 8012090:	08012e59 	.word	0x08012e59
 8012094:	08012491 	.word	0x08012491
 8012098:	54485244 	.word	0x54485244
 801209c:	200111a4 	.word	0x200111a4
 80120a0:	200111a0 	.word	0x200111a0
 80120a4:	20011230 	.word	0x20011230
 80120a8:	20000010 	.word	0x20000010
 80120ac:	f0f0f0ef 	.word	0xf0f0f0ef
 80120b0:	2001119c 	.word	0x2001119c

080120b4 <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b08a      	sub	sp, #40	@ 0x28
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80120bc:	2300      	movs	r3, #0
 80120be:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80120c0:	f3ef 8310 	mrs	r3, PRIMASK
 80120c4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80120c6:	b672      	cpsid	i
    return(primask_value);
 80120c8:	697b      	ldr	r3, [r7, #20]

    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 80120ca:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120d0:	2b01      	cmp	r3, #1
 80120d2:	d00b      	beq.n	80120ec <_tx_thread_delete+0x38>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120d8:	2b02      	cmp	r3, #2
 80120da:	d007      	beq.n	80120ec <_tx_thread_delete+0x38>
 80120dc:	6a3b      	ldr	r3, [r7, #32]
 80120de:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	f383 8810 	msr	PRIMASK, r3
}
 80120e6:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 80120e8:	2311      	movs	r3, #17
 80120ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 80120ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d12d      	bne.n	801214e <_tx_thread_delete+0x9a>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2200      	movs	r2, #0
 80120f6:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 80120f8:	4b17      	ldr	r3, [pc, #92]	@ (8012158 <_tx_thread_delete+0xa4>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	1e5a      	subs	r2, r3, #1
 80120fe:	4b16      	ldr	r3, [pc, #88]	@ (8012158 <_tx_thread_delete+0xa4>)
 8012100:	601a      	str	r2, [r3, #0]

        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 8012102:	4b15      	ldr	r3, [pc, #84]	@ (8012158 <_tx_thread_delete+0xa4>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d103      	bne.n	8012112 <_tx_thread_delete+0x5e>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 801210a:	4b14      	ldr	r3, [pc, #80]	@ (801215c <_tx_thread_delete+0xa8>)
 801210c:	2200      	movs	r2, #0
 801210e:	601a      	str	r2, [r3, #0]
 8012110:	e017      	b.n	8012142 <_tx_thread_delete+0x8e>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2288      	movs	r2, #136	@ 0x88
 8012116:	589b      	ldr	r3, [r3, r2]
 8012118:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	228c      	movs	r2, #140	@ 0x8c
 801211e:	589b      	ldr	r3, [r3, r2]
 8012120:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	218c      	movs	r1, #140	@ 0x8c
 8012126:	69ba      	ldr	r2, [r7, #24]
 8012128:	505a      	str	r2, [r3, r1]
            previous_thread -> tx_thread_created_next =  next_thread;
 801212a:	69bb      	ldr	r3, [r7, #24]
 801212c:	2188      	movs	r1, #136	@ 0x88
 801212e:	69fa      	ldr	r2, [r7, #28]
 8012130:	505a      	str	r2, [r3, r1]

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 8012132:	4b0a      	ldr	r3, [pc, #40]	@ (801215c <_tx_thread_delete+0xa8>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	687a      	ldr	r2, [r7, #4]
 8012138:	429a      	cmp	r2, r3
 801213a:	d102      	bne.n	8012142 <_tx_thread_delete+0x8e>
            {

                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 801213c:	4b07      	ldr	r3, [pc, #28]	@ (801215c <_tx_thread_delete+0xa8>)
 801213e:	69fa      	ldr	r2, [r7, #28]
 8012140:	601a      	str	r2, [r3, #0]
 8012142:	6a3b      	ldr	r3, [r7, #32]
 8012144:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	f383 8810 	msr	PRIMASK, r3
}
 801214c:	46c0      	nop			@ (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 801214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012150:	0018      	movs	r0, r3
 8012152:	46bd      	mov	sp, r7
 8012154:	b00a      	add	sp, #40	@ 0x28
 8012156:	bd80      	pop	{r7, pc}
 8012158:	200111a4 	.word	0x200111a4
 801215c:	200111a0 	.word	0x200111a0

08012160 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b084      	sub	sp, #16
 8012164:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012166:	f3ef 8310 	mrs	r3, PRIMASK
 801216a:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801216c:	b672      	cpsid	i
    return(primask_value);
 801216e:	683b      	ldr	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8012170:	60fb      	str	r3, [r7, #12]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012172:	4b07      	ldr	r3, [pc, #28]	@ (8012190 <_tx_thread_identify+0x30>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	60bb      	str	r3, [r7, #8]
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f383 8810 	msr	PRIMASK, r3
}
 8012182:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8012184:	68bb      	ldr	r3, [r7, #8]
}
 8012186:	0018      	movs	r0, r3
 8012188:	46bd      	mov	sp, r7
 801218a:	b004      	add	sp, #16
 801218c:	bd80      	pop	{r7, pc}
 801218e:	46c0      	nop			@ (mov r8, r8)
 8012190:	20011198 	.word	0x20011198

08012194 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b088      	sub	sp, #32
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	607a      	str	r2, [r7, #4]
 80121a0:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80121a2:	f3ef 8310 	mrs	r3, PRIMASK
 80121a6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80121a8:	b672      	cpsid	i
    return(primask_value);
 80121aa:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80121ac:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 80121ae:	68bb      	ldr	r3, [r7, #8]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d003      	beq.n	80121bc <_tx_thread_info_get+0x28>
    {

        *name =  thread_ptr -> tx_thread_name;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d003      	beq.n	80121ca <_tx_thread_info_get+0x36>
    {

        *state =  thread_ptr -> tx_thread_state;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d003      	beq.n	80121d8 <_tx_thread_info_get+0x44>
    {

        *run_count =  thread_ptr -> tx_thread_run_count;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	685a      	ldr	r2, [r3, #4]
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 80121d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d004      	beq.n	80121e8 <_tx_thread_info_get+0x54>
    {

        *priority =  thread_ptr -> tx_thread_user_priority;
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	2294      	movs	r2, #148	@ 0x94
 80121e2:	589a      	ldr	r2, [r3, r2]
 80121e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121e6:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 80121e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d004      	beq.n	80121f8 <_tx_thread_info_get+0x64>
    {

        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	2298      	movs	r2, #152	@ 0x98
 80121f2:	589a      	ldr	r2, [r3, r2]
 80121f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121f6:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 80121f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d003      	beq.n	8012206 <_tx_thread_info_get+0x72>
    {

        *time_slice =  thread_ptr -> tx_thread_time_slice;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	699a      	ldr	r2, [r3, #24]
 8012202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012204:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 8012206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012208:	2b00      	cmp	r3, #0
 801220a:	d004      	beq.n	8012216 <_tx_thread_info_get+0x82>
    {

        *next_thread =  thread_ptr -> tx_thread_created_next;
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	2288      	movs	r2, #136	@ 0x88
 8012210:	589a      	ldr	r2, [r3, r2]
 8012212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012214:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 8012216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012218:	2b00      	cmp	r3, #0
 801221a:	d003      	beq.n	8012224 <_tx_thread_info_get+0x90>
    {

        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012222:	601a      	str	r2, [r3, #0]
 8012224:	69fb      	ldr	r3, [r7, #28]
 8012226:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	f383 8810 	msr	PRIMASK, r3
}
 801222e:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8012230:	2300      	movs	r3, #0
}
 8012232:	0018      	movs	r0, r3
 8012234:	46bd      	mov	sp, r7
 8012236:	b008      	add	sp, #32
 8012238:	bd80      	pop	{r7, pc}
	...

0801223c <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b088      	sub	sp, #32
 8012240:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8012242:	4b28      	ldr	r3, [pc, #160]	@ (80122e4 <_tx_thread_initialize+0xa8>)
 8012244:	2200      	movs	r2, #0
 8012246:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8012248:	4b27      	ldr	r3, [pc, #156]	@ (80122e8 <_tx_thread_initialize+0xac>)
 801224a:	2200      	movs	r2, #0
 801224c:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 801224e:	4b27      	ldr	r3, [pc, #156]	@ (80122ec <_tx_thread_initialize+0xb0>)
 8012250:	61fb      	str	r3, [r7, #28]
 8012252:	230f      	movs	r3, #15
 8012254:	18fb      	adds	r3, r7, r3
 8012256:	2200      	movs	r2, #0
 8012258:	701a      	strb	r2, [r3, #0]
 801225a:	2304      	movs	r3, #4
 801225c:	60bb      	str	r3, [r7, #8]
 801225e:	2300      	movs	r3, #0
 8012260:	61bb      	str	r3, [r7, #24]
 8012262:	e009      	b.n	8012278 <_tx_thread_initialize+0x3c>
 8012264:	69fb      	ldr	r3, [r7, #28]
 8012266:	1c5a      	adds	r2, r3, #1
 8012268:	61fa      	str	r2, [r7, #28]
 801226a:	220f      	movs	r2, #15
 801226c:	18ba      	adds	r2, r7, r2
 801226e:	7812      	ldrb	r2, [r2, #0]
 8012270:	701a      	strb	r2, [r3, #0]
 8012272:	69bb      	ldr	r3, [r7, #24]
 8012274:	3301      	adds	r3, #1
 8012276:	61bb      	str	r3, [r7, #24]
 8012278:	69ba      	ldr	r2, [r7, #24]
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	429a      	cmp	r2, r3
 801227e:	d3f1      	bcc.n	8012264 <_tx_thread_initialize+0x28>
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012280:	4b1b      	ldr	r3, [pc, #108]	@ (80122f0 <_tx_thread_initialize+0xb4>)
 8012282:	2220      	movs	r2, #32
 8012284:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8012286:	4b1b      	ldr	r3, [pc, #108]	@ (80122f4 <_tx_thread_initialize+0xb8>)
 8012288:	617b      	str	r3, [r7, #20]
 801228a:	1dfb      	adds	r3, r7, #7
 801228c:	2200      	movs	r2, #0
 801228e:	701a      	strb	r2, [r3, #0]
 8012290:	2380      	movs	r3, #128	@ 0x80
 8012292:	603b      	str	r3, [r7, #0]
 8012294:	2300      	movs	r3, #0
 8012296:	613b      	str	r3, [r7, #16]
 8012298:	e008      	b.n	80122ac <_tx_thread_initialize+0x70>
 801229a:	697b      	ldr	r3, [r7, #20]
 801229c:	1c5a      	adds	r2, r3, #1
 801229e:	617a      	str	r2, [r7, #20]
 80122a0:	1dfa      	adds	r2, r7, #7
 80122a2:	7812      	ldrb	r2, [r2, #0]
 80122a4:	701a      	strb	r2, [r3, #0]
 80122a6:	693b      	ldr	r3, [r7, #16]
 80122a8:	3301      	adds	r3, #1
 80122aa:	613b      	str	r3, [r7, #16]
 80122ac:	693a      	ldr	r2, [r7, #16]
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d3f2      	bcc.n	801229a <_tx_thread_initialize+0x5e>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80122b4:	4b10      	ldr	r3, [pc, #64]	@ (80122f8 <_tx_thread_initialize+0xbc>)
 80122b6:	2200      	movs	r2, #0
 80122b8:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80122ba:	4b10      	ldr	r3, [pc, #64]	@ (80122fc <_tx_thread_initialize+0xc0>)
 80122bc:	2200      	movs	r2, #0
 80122be:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80122c0:	4b0f      	ldr	r3, [pc, #60]	@ (8012300 <_tx_thread_initialize+0xc4>)
 80122c2:	2200      	movs	r2, #0
 80122c4:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80122c6:	4b0f      	ldr	r3, [pc, #60]	@ (8012304 <_tx_thread_initialize+0xc8>)
 80122c8:	2200      	movs	r2, #0
 80122ca:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80122cc:	4b0e      	ldr	r3, [pc, #56]	@ (8012308 <_tx_thread_initialize+0xcc>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	2285      	movs	r2, #133	@ 0x85
 80122d2:	0452      	lsls	r2, r2, #17
 80122d4:	431a      	orrs	r2, r3
    _tx_build_options =  _tx_build_options 
 80122d6:	4b0c      	ldr	r3, [pc, #48]	@ (8012308 <_tx_thread_initialize+0xcc>)
 80122d8:	601a      	str	r2, [r3, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80122da:	46c0      	nop			@ (mov r8, r8)
 80122dc:	46bd      	mov	sp, r7
 80122de:	b008      	add	sp, #32
 80122e0:	bd80      	pop	{r7, pc}
 80122e2:	46c0      	nop			@ (mov r8, r8)
 80122e4:	20011198 	.word	0x20011198
 80122e8:	2001119c 	.word	0x2001119c
 80122ec:	200111a8 	.word	0x200111a8
 80122f0:	200111ac 	.word	0x200111ac
 80122f4:	200111b0 	.word	0x200111b0
 80122f8:	200111a0 	.word	0x200111a0
 80122fc:	200111a4 	.word	0x200111a4
 8012300:	20011230 	.word	0x20011230
 8012304:	20011234 	.word	0x20011234
 8012308:	20011238 	.word	0x20011238

0801230c <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b08a      	sub	sp, #40	@ 0x28
 8012310:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012312:	4b29      	ldr	r3, [pc, #164]	@ (80123b8 <_tx_thread_relinquish+0xac>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012318:	f3ef 8310 	mrs	r3, PRIMASK
 801231c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801231e:	b672      	cpsid	i
    return(primask_value);
 8012320:	69bb      	ldr	r3, [r7, #24]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 8012322:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8012324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012326:	69da      	ldr	r2, [r3, #28]
 8012328:	4b24      	ldr	r3, [pc, #144]	@ (80123bc <_tx_thread_relinquish+0xb0>)
 801232a:	601a      	str	r2, [r3, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 801232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012330:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8012332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012334:	6a1b      	ldr	r3, [r3, #32]
 8012336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012338:	429a      	cmp	r2, r3
 801233a:	d009      	beq.n	8012350 <_tx_thread_relinquish+0x44>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 801233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801233e:	6a19      	ldr	r1, [r3, #32]
 8012340:	4b1f      	ldr	r3, [pc, #124]	@ (80123c0 <_tx_thread_relinquish+0xb4>)
 8012342:	69fa      	ldr	r2, [r7, #28]
 8012344:	0092      	lsls	r2, r2, #2
 8012346:	50d1      	str	r1, [r2, r3]

        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 8012348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801234a:	6a1a      	ldr	r2, [r3, #32]
 801234c:	4b1d      	ldr	r3, [pc, #116]	@ (80123c4 <_tx_thread_relinquish+0xb8>)
 801234e:	601a      	str	r2, [r3, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 8012350:	4b1d      	ldr	r3, [pc, #116]	@ (80123c8 <_tx_thread_relinquish+0xbc>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	69fa      	ldr	r2, [r7, #28]
 8012356:	429a      	cmp	r2, r3
 8012358:	d906      	bls.n	8012368 <_tx_thread_relinquish+0x5c>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801235a:	4b1b      	ldr	r3, [pc, #108]	@ (80123c8 <_tx_thread_relinquish+0xbc>)
 801235c:	681a      	ldr	r2, [r3, #0]
 801235e:	4b18      	ldr	r3, [pc, #96]	@ (80123c0 <_tx_thread_relinquish+0xb4>)
 8012360:	0092      	lsls	r2, r2, #2
 8012362:	58d2      	ldr	r2, [r2, r3]
 8012364:	4b17      	ldr	r3, [pc, #92]	@ (80123c4 <_tx_thread_relinquish+0xb8>)
 8012366:	601a      	str	r2, [r3, #0]
 8012368:	6a3b      	ldr	r3, [r7, #32]
 801236a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	f383 8810 	msr	PRIMASK, r3
}
 8012372:	46c0      	nop			@ (mov r8, r8)

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 8012374:	4b13      	ldr	r3, [pc, #76]	@ (80123c4 <_tx_thread_relinquish+0xb8>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801237a:	429a      	cmp	r2, r3
 801237c:	d017      	beq.n	80123ae <_tx_thread_relinquish+0xa2>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801237e:	4b13      	ldr	r3, [pc, #76]	@ (80123cc <_tx_thread_relinquish+0xc0>)
 8012380:	2280      	movs	r2, #128	@ 0x80
 8012382:	0552      	lsls	r2, r2, #21
 8012384:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012386:	f3ef 8305 	mrs	r3, IPSR
 801238a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801238c:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 801238e:	2b00      	cmp	r3, #0
 8012390:	d10c      	bne.n	80123ac <_tx_thread_relinquish+0xa0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012392:	f3ef 8310 	mrs	r3, PRIMASK
 8012396:	60fb      	str	r3, [r7, #12]
    return(primask_value);
 8012398:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_primask_value();
 801239a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 801239c:	b662      	cpsie	i
}
 801239e:	46c0      	nop			@ (mov r8, r8)
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f383 8810 	msr	PRIMASK, r3
}
 80123aa:	46c0      	nop			@ (mov r8, r8)
        __enable_interrupts();
        __restore_interrupts(interrupt_save);
    }   
}
 80123ac:	46c0      	nop			@ (mov r8, r8)

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 80123ae:	46c0      	nop			@ (mov r8, r8)
 80123b0:	46bd      	mov	sp, r7
 80123b2:	b00a      	add	sp, #40	@ 0x28
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	46c0      	nop			@ (mov r8, r8)
 80123b8:	20011198 	.word	0x20011198
 80123bc:	2001179c 	.word	0x2001179c
 80123c0:	200111b0 	.word	0x200111b0
 80123c4:	2001119c 	.word	0x2001119c
 80123c8:	200111ac 	.word	0x200111ac
 80123cc:	e000ed04 	.word	0xe000ed04

080123d0 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b08a      	sub	sp, #40	@ 0x28
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 80123d8:	2300      	movs	r3, #0
 80123da:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80123dc:	f3ef 8310 	mrs	r3, PRIMASK
 80123e0:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80123e2:	b672      	cpsid	i
    return(primask_value);
 80123e4:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80123e6:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123ec:	2b03      	cmp	r3, #3
 80123ee:	d130      	bne.n	8012452 <_tx_thread_resume+0x82>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80123f0:	f3ef 8305 	mrs	r3, IPSR
 80123f4:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80123f6:	693a      	ldr	r2, [r7, #16]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80123f8:	4b21      	ldr	r3, [pc, #132]	@ (8012480 <_tx_thread_resume+0xb0>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	4313      	orrs	r3, r2
 80123fe:	4a21      	ldr	r2, [pc, #132]	@ (8012484 <_tx_thread_resume+0xb4>)
 8012400:	4293      	cmp	r3, r2
 8012402:	d90d      	bls.n	8012420 <_tx_thread_resume+0x50>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8012404:	4b20      	ldr	r3, [pc, #128]	@ (8012488 <_tx_thread_resume+0xb8>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	623b      	str	r3, [r7, #32]

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801240a:	6a3b      	ldr	r3, [r7, #32]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d009      	beq.n	8012424 <_tx_thread_resume+0x54>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8012410:	6a3b      	ldr	r3, [r7, #32]
 8012412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012414:	61fb      	str	r3, [r7, #28]

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8012416:	6a3b      	ldr	r3, [r7, #32]
 8012418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801241a:	6a3b      	ldr	r3, [r7, #32]
 801241c:	63da      	str	r2, [r3, #60]	@ 0x3c
 801241e:	e001      	b.n	8012424 <_tx_thread_resume+0x54>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8012420:	2300      	movs	r3, #0
 8012422:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8012424:	4b19      	ldr	r3, [pc, #100]	@ (801248c <_tx_thread_resume+0xbc>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	1c5a      	adds	r2, r3, #1
 801242a:	4b18      	ldr	r3, [pc, #96]	@ (801248c <_tx_thread_resume+0xbc>)
 801242c:	601a      	str	r2, [r3, #0]
 801242e:	69bb      	ldr	r3, [r7, #24]
 8012430:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	f383 8810 	msr	PRIMASK, r3
}
 8012438:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	0018      	movs	r0, r3
 801243e:	f000 f989 	bl	8012754 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8012442:	6a3b      	ldr	r3, [r7, #32]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d002      	beq.n	801244e <_tx_thread_resume+0x7e>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8012448:	6a3b      	ldr	r3, [r7, #32]
 801244a:	69fa      	ldr	r2, [r7, #28]
 801244c:	63da      	str	r2, [r3, #60]	@ 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 801244e:	2300      	movs	r3, #0
 8012450:	e012      	b.n	8012478 <_tx_thread_resume+0xa8>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012456:	2b01      	cmp	r3, #1
 8012458:	d105      	bne.n	8012466 <_tx_thread_resume+0x96>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2200      	movs	r2, #0
 801245e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8012460:	2319      	movs	r3, #25
 8012462:	627b      	str	r3, [r7, #36]	@ 0x24
 8012464:	e001      	b.n	801246a <_tx_thread_resume+0x9a>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8012466:	2312      	movs	r3, #18
 8012468:	627b      	str	r3, [r7, #36]	@ 0x24
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	f383 8810 	msr	PRIMASK, r3
}
 8012474:	46c0      	nop			@ (mov r8, r8)
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8012476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012478:	0018      	movs	r0, r3
 801247a:	46bd      	mov	sp, r7
 801247c:	b00a      	add	sp, #40	@ 0x28
 801247e:	bd80      	pop	{r7, pc}
 8012480:	20000010 	.word	0x20000010
 8012484:	f0f0f0ef 	.word	0xf0f0f0ef
 8012488:	2001119c 	.word	0x2001119c
 801248c:	20011230 	.word	0x20011230

08012490 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b084      	sub	sp, #16
 8012494:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012496:	4b1a      	ldr	r3, [pc, #104]	@ (8012500 <_tx_thread_shell_entry+0x70>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	60fb      	str	r3, [r7, #12]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80124a4:	0018      	movs	r0, r3
 80124a6:	4790      	blx	r2

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80124a8:	4b16      	ldr	r3, [pc, #88]	@ (8012504 <_tx_thread_shell_entry+0x74>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d004      	beq.n	80124ba <_tx_thread_shell_entry+0x2a>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80124b0:	4b14      	ldr	r3, [pc, #80]	@ (8012504 <_tx_thread_shell_entry+0x74>)
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	68fa      	ldr	r2, [r7, #12]
 80124b6:	0010      	movs	r0, r2
 80124b8:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80124ba:	f3ef 8310 	mrs	r3, PRIMASK
 80124be:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80124c0:	b672      	cpsid	i
    return(primask_value);
 80124c2:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80124c4:	60bb      	str	r3, [r7, #8]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	2201      	movs	r2, #1
 80124ca:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	2201      	movs	r2, #1
 80124d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	2200      	movs	r2, #0
 80124d6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80124d8:	4b0b      	ldr	r3, [pc, #44]	@ (8012508 <_tx_thread_shell_entry+0x78>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	1c5a      	adds	r2, r3, #1
 80124de:	4b0a      	ldr	r3, [pc, #40]	@ (8012508 <_tx_thread_shell_entry+0x78>)
 80124e0:	601a      	str	r2, [r3, #0]
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f383 8810 	msr	PRIMASK, r3
}
 80124ec:	46c0      	nop			@ (mov r8, r8)
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	0018      	movs	r0, r3
 80124f2:	f000 fa2f 	bl	8012954 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80124f6:	46c0      	nop			@ (mov r8, r8)
 80124f8:	46bd      	mov	sp, r7
 80124fa:	b004      	add	sp, #16
 80124fc:	bd80      	pop	{r7, pc}
 80124fe:	46c0      	nop			@ (mov r8, r8)
 8012500:	20011198 	.word	0x20011198
 8012504:	20011234 	.word	0x20011234
 8012508:	20011230 	.word	0x20011230

0801250c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b08e      	sub	sp, #56	@ 0x38
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012514:	f3ef 8310 	mrs	r3, PRIMASK
 8012518:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 801251a:	b672      	cpsid	i
    return(primask_value);
 801251c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801251e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012520:	4b35      	ldr	r3, [pc, #212]	@ (80125f8 <_tx_thread_sleep+0xec>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8012526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012528:	2b00      	cmp	r3, #0
 801252a:	d108      	bne.n	801253e <_tx_thread_sleep+0x32>
 801252c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801252e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012532:	f383 8810 	msr	PRIMASK, r3
}
 8012536:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8012538:	2313      	movs	r3, #19
 801253a:	637b      	str	r3, [r7, #52]	@ 0x34
 801253c:	e056      	b.n	80125ec <_tx_thread_sleep+0xe0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801253e:	f3ef 8305 	mrs	r3, IPSR
 8012542:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 8012544:	6a3a      	ldr	r2, [r7, #32]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012546:	4b2d      	ldr	r3, [pc, #180]	@ (80125fc <_tx_thread_sleep+0xf0>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	4313      	orrs	r3, r2
 801254c:	d008      	beq.n	8012560 <_tx_thread_sleep+0x54>
 801254e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012550:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012552:	69fb      	ldr	r3, [r7, #28]
 8012554:	f383 8810 	msr	PRIMASK, r3
}
 8012558:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801255a:	2313      	movs	r3, #19
 801255c:	637b      	str	r3, [r7, #52]	@ 0x34
 801255e:	e045      	b.n	80125ec <_tx_thread_sleep+0xe0>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8012560:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012562:	4b27      	ldr	r3, [pc, #156]	@ (8012600 <_tx_thread_sleep+0xf4>)
 8012564:	429a      	cmp	r2, r3
 8012566:	d108      	bne.n	801257a <_tx_thread_sleep+0x6e>
 8012568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801256a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801256c:	69bb      	ldr	r3, [r7, #24]
 801256e:	f383 8810 	msr	PRIMASK, r3
}
 8012572:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8012574:	2313      	movs	r3, #19
 8012576:	637b      	str	r3, [r7, #52]	@ 0x34
 8012578:	e038      	b.n	80125ec <_tx_thread_sleep+0xe0>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d108      	bne.n	8012592 <_tx_thread_sleep+0x86>
 8012580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012582:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012584:	697b      	ldr	r3, [r7, #20]
 8012586:	f383 8810 	msr	PRIMASK, r3
}
 801258a:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 801258c:	2300      	movs	r3, #0
 801258e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012590:	e02c      	b.n	80125ec <_tx_thread_sleep+0xe0>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8012592:	4b1c      	ldr	r3, [pc, #112]	@ (8012604 <_tx_thread_sleep+0xf8>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d008      	beq.n	80125ac <_tx_thread_sleep+0xa0>
 801259a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801259c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801259e:	693b      	ldr	r3, [r7, #16]
 80125a0:	f383 8810 	msr	PRIMASK, r3
}
 80125a4:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80125a6:	2313      	movs	r3, #19
 80125a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80125aa:	e01f      	b.n	80125ec <_tx_thread_sleep+0xe0>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80125ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ae:	2204      	movs	r2, #4
 80125b0:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80125b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125b4:	2201      	movs	r2, #1
 80125b6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80125b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ba:	2284      	movs	r2, #132	@ 0x84
 80125bc:	2100      	movs	r1, #0
 80125be:	5099      	str	r1, [r3, r2]

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80125c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125c2:	687a      	ldr	r2, [r7, #4]
 80125c4:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80125c6:	4b0f      	ldr	r3, [pc, #60]	@ (8012604 <_tx_thread_sleep+0xf8>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	1c5a      	adds	r2, r3, #1
 80125cc:	4b0d      	ldr	r3, [pc, #52]	@ (8012604 <_tx_thread_sleep+0xf8>)
 80125ce:	601a      	str	r2, [r3, #0]
 80125d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125d2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	f383 8810 	msr	PRIMASK, r3
}
 80125da:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80125dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125de:	0018      	movs	r0, r3
 80125e0:	f000 f9b8 	bl	8012954 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80125e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125e6:	2284      	movs	r2, #132	@ 0x84
 80125e8:	589b      	ldr	r3, [r3, r2]
 80125ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80125ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80125ee:	0018      	movs	r0, r3
 80125f0:	46bd      	mov	sp, r7
 80125f2:	b00e      	add	sp, #56	@ 0x38
 80125f4:	bd80      	pop	{r7, pc}
 80125f6:	46c0      	nop			@ (mov r8, r8)
 80125f8:	20011198 	.word	0x20011198
 80125fc:	20000010 	.word	0x20000010
 8012600:	200112e0 	.word	0x200112e0
 8012604:	20011230 	.word	0x20011230

08012608 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b08a      	sub	sp, #40	@ 0x28
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012610:	f3ef 8310 	mrs	r3, PRIMASK
 8012614:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012616:	b672      	cpsid	i
    return(primask_value);
 8012618:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 801261a:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801261c:	4b2e      	ldr	r3, [pc, #184]	@ (80126d8 <_tx_thread_suspend+0xd0>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012626:	2b00      	cmp	r3, #0
 8012628:	d130      	bne.n	801268c <_tx_thread_suspend+0x84>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 801262a:	2300      	movs	r3, #0
 801262c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801262e:	f3ef 8305 	mrs	r3, IPSR
 8012632:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012634:	697a      	ldr	r2, [r7, #20]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8012636:	4b29      	ldr	r3, [pc, #164]	@ (80126dc <_tx_thread_suspend+0xd4>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	4313      	orrs	r3, r2
 801263c:	d109      	bne.n	8012652 <_tx_thread_suspend+0x4a>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 801263e:	69fa      	ldr	r2, [r7, #28]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	429a      	cmp	r2, r3
 8012644:	d105      	bne.n	8012652 <_tx_thread_suspend+0x4a>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8012646:	4b26      	ldr	r3, [pc, #152]	@ (80126e0 <_tx_thread_suspend+0xd8>)
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d001      	beq.n	8012652 <_tx_thread_suspend+0x4a>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 801264e:	2314      	movs	r3, #20
 8012650:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 8012652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012654:	2b00      	cmp	r3, #0
 8012656:	d133      	bne.n	80126c0 <_tx_thread_suspend+0xb8>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2203      	movs	r2, #3
 801265c:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2201      	movs	r2, #1
 8012662:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2200      	movs	r2, #0
 8012668:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801266a:	4b1d      	ldr	r3, [pc, #116]	@ (80126e0 <_tx_thread_suspend+0xd8>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	1c5a      	adds	r2, r3, #1
 8012670:	4b1b      	ldr	r3, [pc, #108]	@ (80126e0 <_tx_thread_suspend+0xd8>)
 8012672:	601a      	str	r2, [r3, #0]
 8012674:	6a3b      	ldr	r3, [r7, #32]
 8012676:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012678:	693b      	ldr	r3, [r7, #16]
 801267a:	f383 8810 	msr	PRIMASK, r3
}
 801267e:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	0018      	movs	r0, r3
 8012684:	f000 f966 	bl	8012954 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 8012688:	2300      	movs	r3, #0
 801268a:	e020      	b.n	80126ce <_tx_thread_suspend+0xc6>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012690:	2b02      	cmp	r3, #2
 8012692:	d102      	bne.n	801269a <_tx_thread_suspend+0x92>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8012694:	2314      	movs	r3, #20
 8012696:	627b      	str	r3, [r7, #36]	@ 0x24
 8012698:	e012      	b.n	80126c0 <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801269e:	2b01      	cmp	r3, #1
 80126a0:	d102      	bne.n	80126a8 <_tx_thread_suspend+0xa0>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 80126a2:	2314      	movs	r3, #20
 80126a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80126a6:	e00b      	b.n	80126c0 <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126ac:	2b03      	cmp	r3, #3
 80126ae:	d102      	bne.n	80126b6 <_tx_thread_suspend+0xae>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 80126b0:	2300      	movs	r3, #0
 80126b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80126b4:	e004      	b.n	80126c0 <_tx_thread_suspend+0xb8>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2201      	movs	r2, #1
 80126ba:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 80126bc:	2300      	movs	r3, #0
 80126be:	627b      	str	r3, [r7, #36]	@ 0x24
 80126c0:	6a3b      	ldr	r3, [r7, #32]
 80126c2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	f383 8810 	msr	PRIMASK, r3
}
 80126ca:	46c0      	nop			@ (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 80126cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 80126ce:	0018      	movs	r0, r3
 80126d0:	46bd      	mov	sp, r7
 80126d2:	b00a      	add	sp, #40	@ 0x28
 80126d4:	bd80      	pop	{r7, pc}
 80126d6:	46c0      	nop			@ (mov r8, r8)
 80126d8:	20011198 	.word	0x20011198
 80126dc:	20000010 	.word	0x20000010
 80126e0:	20011230 	.word	0x20011230

080126e4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b088      	sub	sp, #32
 80126e8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80126ea:	4b16      	ldr	r3, [pc, #88]	@ (8012744 <_tx_thread_system_preempt_check+0x60>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80126f0:	69fb      	ldr	r3, [r7, #28]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d121      	bne.n	801273a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80126f6:	4b14      	ldr	r3, [pc, #80]	@ (8012748 <_tx_thread_system_preempt_check+0x64>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80126fc:	4b13      	ldr	r3, [pc, #76]	@ (801274c <_tx_thread_system_preempt_check+0x68>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8012702:	69ba      	ldr	r2, [r7, #24]
 8012704:	697b      	ldr	r3, [r7, #20]
 8012706:	429a      	cmp	r2, r3
 8012708:	d017      	beq.n	801273a <_tx_thread_system_preempt_check+0x56>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801270a:	4b11      	ldr	r3, [pc, #68]	@ (8012750 <_tx_thread_system_preempt_check+0x6c>)
 801270c:	2280      	movs	r2, #128	@ 0x80
 801270e:	0552      	lsls	r2, r2, #21
 8012710:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012712:	f3ef 8305 	mrs	r3, IPSR
 8012716:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012718:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 801271a:	2b00      	cmp	r3, #0
 801271c:	d10c      	bne.n	8012738 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801271e:	f3ef 8310 	mrs	r3, PRIMASK
 8012722:	60fb      	str	r3, [r7, #12]
    return(primask_value);
 8012724:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_primask_value();
 8012726:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8012728:	b662      	cpsie	i
}
 801272a:	46c0      	nop			@ (mov r8, r8)
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f383 8810 	msr	PRIMASK, r3
}
 8012736:	46c0      	nop			@ (mov r8, r8)
}
 8012738:	46c0      	nop			@ (mov r8, r8)

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 801273a:	46c0      	nop			@ (mov r8, r8)
 801273c:	46bd      	mov	sp, r7
 801273e:	b008      	add	sp, #32
 8012740:	bd80      	pop	{r7, pc}
 8012742:	46c0      	nop			@ (mov r8, r8)
 8012744:	20011230 	.word	0x20011230
 8012748:	20011198 	.word	0x20011198
 801274c:	2001119c 	.word	0x2001119c
 8012750:	e000ed04 	.word	0xe000ed04

08012754 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b096      	sub	sp, #88	@ 0x58
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801275c:	f3ef 8310 	mrs	r3, PRIMASK
 8012760:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012762:	b672      	cpsid	i
    return(primask_value);
 8012764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8012766:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801276c:	2b00      	cmp	r3, #0
 801276e:	d005      	beq.n	801277c <_tx_thread_system_resume+0x28>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	334c      	adds	r3, #76	@ 0x4c
 8012774:	0018      	movs	r0, r3
 8012776:	f000 fccb 	bl	8013110 <_tx_timer_system_deactivate>
 801277a:	e002      	b.n	8012782 <_tx_thread_system_resume+0x2e>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2200      	movs	r2, #0
 8012780:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8012782:	4b6d      	ldr	r3, [pc, #436]	@ (8012938 <_tx_thread_system_resume+0x1e4>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	1e5a      	subs	r2, r3, #1
 8012788:	4b6b      	ldr	r3, [pc, #428]	@ (8012938 <_tx_thread_system_resume+0x1e4>)
 801278a:	601a      	str	r2, [r3, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012790:	2b00      	cmp	r3, #0
 8012792:	d000      	beq.n	8012796 <_tx_thread_system_resume+0x42>
 8012794:	e084      	b.n	80128a0 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801279a:	2b00      	cmp	r3, #0
 801279c:	d100      	bne.n	80127a0 <_tx_thread_system_resume+0x4c>
 801279e:	e098      	b.n	80128d2 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d000      	beq.n	80127aa <_tx_thread_system_resume+0x56>
 80127a8:	e073      	b.n	8012892 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	2200      	movs	r2, #0
 80127ae:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127b4:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80127b6:	4b61      	ldr	r3, [pc, #388]	@ (801293c <_tx_thread_system_resume+0x1e8>)
 80127b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80127ba:	0092      	lsls	r2, r2, #2
 80127bc:	58d3      	ldr	r3, [r2, r3]
 80127be:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 80127c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d155      	bne.n	8012872 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80127c6:	4b5d      	ldr	r3, [pc, #372]	@ (801293c <_tx_thread_system_resume+0x1e8>)
 80127c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80127ca:	0092      	lsls	r2, r2, #2
 80127cc:	6879      	ldr	r1, [r7, #4]
 80127ce:	50d1      	str	r1, [r2, r3]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	687a      	ldr	r2, [r7, #4]
 80127da:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80127dc:	2201      	movs	r2, #1
 80127de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127e0:	409a      	lsls	r2, r3
 80127e2:	0013      	movs	r3, r2
 80127e4:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80127e6:	4b56      	ldr	r3, [pc, #344]	@ (8012940 <_tx_thread_system_resume+0x1ec>)
 80127e8:	681a      	ldr	r2, [r3, #0]
 80127ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80127ec:	431a      	orrs	r2, r3
 80127ee:	4b54      	ldr	r3, [pc, #336]	@ (8012940 <_tx_thread_system_resume+0x1ec>)
 80127f0:	601a      	str	r2, [r3, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80127f2:	4b54      	ldr	r3, [pc, #336]	@ (8012944 <_tx_thread_system_resume+0x1f0>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80127f8:	429a      	cmp	r2, r3
 80127fa:	d26a      	bcs.n	80128d2 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80127fc:	4b51      	ldr	r3, [pc, #324]	@ (8012944 <_tx_thread_system_resume+0x1f0>)
 80127fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012800:	601a      	str	r2, [r3, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8012802:	4b51      	ldr	r3, [pc, #324]	@ (8012948 <_tx_thread_system_resume+0x1f4>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8012808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801280a:	2b00      	cmp	r3, #0
 801280c:	d103      	bne.n	8012816 <_tx_thread_system_resume+0xc2>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 801280e:	4b4e      	ldr	r3, [pc, #312]	@ (8012948 <_tx_thread_system_resume+0x1f4>)
 8012810:	687a      	ldr	r2, [r7, #4]
 8012812:	601a      	str	r2, [r3, #0]
 8012814:	e05d      	b.n	80128d2 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8012816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801281a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801281c:	429a      	cmp	r2, r3
 801281e:	d258      	bcs.n	80128d2 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8012820:	4b49      	ldr	r3, [pc, #292]	@ (8012948 <_tx_thread_system_resume+0x1f4>)
 8012822:	687a      	ldr	r2, [r7, #4]
 8012824:	601a      	str	r2, [r3, #0]
 8012826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012828:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801282a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801282c:	f383 8810 	msr	PRIMASK, r3
}
 8012830:	46c0      	nop			@ (mov r8, r8)
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012832:	4b41      	ldr	r3, [pc, #260]	@ (8012938 <_tx_thread_system_resume+0x1e4>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 8012838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801283a:	2b00      	cmp	r3, #0
 801283c:	d000      	beq.n	8012840 <_tx_thread_system_resume+0xec>
 801283e:	e074      	b.n	801292a <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012840:	4b42      	ldr	r3, [pc, #264]	@ (801294c <_tx_thread_system_resume+0x1f8>)
 8012842:	2280      	movs	r2, #128	@ 0x80
 8012844:	0552      	lsls	r2, r2, #21
 8012846:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012848:	f3ef 8305 	mrs	r3, IPSR
 801284c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 801284e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 8012850:	2b00      	cmp	r3, #0
 8012852:	d10c      	bne.n	801286e <_tx_thread_system_resume+0x11a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012854:	f3ef 8310 	mrs	r3, PRIMASK
 8012858:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(primask_value);
 801285a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_primask_value();
 801285c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSIE  i": : : "memory" );
 801285e:	b662      	cpsie	i
}
 8012860:	46c0      	nop			@ (mov r8, r8)
 8012862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012864:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012866:	6a3b      	ldr	r3, [r7, #32]
 8012868:	f383 8810 	msr	PRIMASK, r3
}
 801286c:	46c0      	nop			@ (mov r8, r8)
}
 801286e:	46c0      	nop			@ (mov r8, r8)
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8012870:	e05b      	b.n	801292a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8012872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012876:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8012878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801287a:	687a      	ldr	r2, [r7, #4]
 801287c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 801287e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012880:	687a      	ldr	r2, [r7, #4]
 8012882:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012888:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801288e:	621a      	str	r2, [r3, #32]
 8012890:	e01f      	b.n	80128d2 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	2200      	movs	r2, #0
 8012896:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2203      	movs	r2, #3
 801289c:	631a      	str	r2, [r3, #48]	@ 0x30
 801289e:	e018      	b.n	80128d2 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128a4:	2b01      	cmp	r3, #1
 80128a6:	d014      	beq.n	80128d2 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128ac:	2b02      	cmp	r3, #2
 80128ae:	d010      	beq.n	80128d2 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d106      	bne.n	80128c6 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2200      	movs	r2, #0
 80128bc:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2200      	movs	r2, #0
 80128c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80128c4:	e005      	b.n	80128d2 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2200      	movs	r2, #0
 80128ca:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2203      	movs	r2, #3
 80128d0:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80128d2:	4b1f      	ldr	r3, [pc, #124]	@ (8012950 <_tx_thread_system_resume+0x1fc>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80128d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128da:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80128dc:	69fb      	ldr	r3, [r7, #28]
 80128de:	f383 8810 	msr	PRIMASK, r3
}
 80128e2:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80128e4:	4b18      	ldr	r3, [pc, #96]	@ (8012948 <_tx_thread_system_resume+0x1f4>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80128ea:	429a      	cmp	r2, r3
 80128ec:	d020      	beq.n	8012930 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80128ee:	4b12      	ldr	r3, [pc, #72]	@ (8012938 <_tx_thread_system_resume+0x1e4>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 80128f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d11a      	bne.n	8012930 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80128fa:	4b14      	ldr	r3, [pc, #80]	@ (801294c <_tx_thread_system_resume+0x1f8>)
 80128fc:	2280      	movs	r2, #128	@ 0x80
 80128fe:	0552      	lsls	r2, r2, #21
 8012900:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012902:	f3ef 8305 	mrs	r3, IPSR
 8012906:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012908:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 801290a:	2b00      	cmp	r3, #0
 801290c:	d10f      	bne.n	801292e <_tx_thread_system_resume+0x1da>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801290e:	f3ef 8310 	mrs	r3, PRIMASK
 8012912:	617b      	str	r3, [r7, #20]
    return(primask_value);
 8012914:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 8012916:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8012918:	b662      	cpsie	i
}
 801291a:	46c0      	nop			@ (mov r8, r8)
 801291c:	693b      	ldr	r3, [r7, #16]
 801291e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	f383 8810 	msr	PRIMASK, r3
}
 8012926:	46c0      	nop			@ (mov r8, r8)
}
 8012928:	e001      	b.n	801292e <_tx_thread_system_resume+0x1da>
                                return;
 801292a:	46c0      	nop			@ (mov r8, r8)
 801292c:	e000      	b.n	8012930 <_tx_thread_system_resume+0x1dc>
 801292e:	46c0      	nop			@ (mov r8, r8)

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8012930:	46bd      	mov	sp, r7
 8012932:	b016      	add	sp, #88	@ 0x58
 8012934:	bd80      	pop	{r7, pc}
 8012936:	46c0      	nop			@ (mov r8, r8)
 8012938:	20011230 	.word	0x20011230
 801293c:	200111b0 	.word	0x200111b0
 8012940:	200111a8 	.word	0x200111a8
 8012944:	200111ac 	.word	0x200111ac
 8012948:	2001119c 	.word	0x2001119c
 801294c:	e000ed04 	.word	0xe000ed04
 8012950:	20011198 	.word	0x20011198

08012954 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b09c      	sub	sp, #112	@ 0x70
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801295c:	4bb9      	ldr	r3, [pc, #740]	@ (8012c44 <_tx_thread_system_suspend+0x2f0>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	667b      	str	r3, [r7, #100]	@ 0x64
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012962:	f3ef 8310 	mrs	r3, PRIMASK
 8012966:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012968:	b672      	cpsid	i
    return(primask_value);
 801296a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 801296c:	663b      	str	r3, [r7, #96]	@ 0x60

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 801296e:	687a      	ldr	r2, [r7, #4]
 8012970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012972:	429a      	cmp	r2, r3
 8012974:	d111      	bne.n	801299a <_tx_thread_system_suspend+0x46>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801297a:	65fb      	str	r3, [r7, #92]	@ 0x5c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 801297c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801297e:	2b00      	cmp	r3, #0
 8012980:	d007      	beq.n	8012992 <_tx_thread_system_suspend+0x3e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8012982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012984:	3301      	adds	r3, #1
 8012986:	d004      	beq.n	8012992 <_tx_thread_system_suspend+0x3e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	334c      	adds	r3, #76	@ 0x4c
 801298c:	0018      	movs	r0, r3
 801298e:	f000 fb61 	bl	8013054 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	69da      	ldr	r2, [r3, #28]
 8012996:	4bac      	ldr	r3, [pc, #688]	@ (8012c48 <_tx_thread_system_suspend+0x2f4>)
 8012998:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801299a:	4bac      	ldr	r3, [pc, #688]	@ (8012c4c <_tx_thread_system_suspend+0x2f8>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	1e5a      	subs	r2, r3, #1
 80129a0:	4baa      	ldr	r3, [pc, #680]	@ (8012c4c <_tx_thread_system_suspend+0x2f8>)
 80129a2:	601a      	str	r2, [r3, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80129a8:	2b01      	cmp	r3, #1
 80129aa:	d000      	beq.n	80129ae <_tx_thread_system_suspend+0x5a>
 80129ac:	e118      	b.n	8012be0 <_tx_thread_system_suspend+0x28c>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2200      	movs	r2, #0
 80129b2:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129b8:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6a1b      	ldr	r3, [r3, #32]
 80129be:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80129c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	429a      	cmp	r2, r3
 80129c6:	d016      	beq.n	80129f6 <_tx_thread_system_suspend+0xa2>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129cc:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80129ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80129d2:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80129d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80129d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80129d8:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80129da:	4b9d      	ldr	r3, [pc, #628]	@ (8012c50 <_tx_thread_system_suspend+0x2fc>)
 80129dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80129de:	0092      	lsls	r2, r2, #2
 80129e0:	58d3      	ldr	r3, [r2, r3]
 80129e2:	687a      	ldr	r2, [r7, #4]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d000      	beq.n	80129ea <_tx_thread_system_suspend+0x96>
 80129e8:	e0c9      	b.n	8012b7e <_tx_thread_system_suspend+0x22a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80129ea:	4b99      	ldr	r3, [pc, #612]	@ (8012c50 <_tx_thread_system_suspend+0x2fc>)
 80129ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80129ee:	0092      	lsls	r2, r2, #2
 80129f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80129f2:	50d1      	str	r1, [r2, r3]
 80129f4:	e0c3      	b.n	8012b7e <_tx_thread_system_suspend+0x22a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80129f6:	4b96      	ldr	r3, [pc, #600]	@ (8012c50 <_tx_thread_system_suspend+0x2fc>)
 80129f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80129fa:	0092      	lsls	r2, r2, #2
 80129fc:	2100      	movs	r1, #0
 80129fe:	50d1      	str	r1, [r2, r3]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8012a00:	2201      	movs	r2, #1
 8012a02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012a04:	409a      	lsls	r2, r3
 8012a06:	0013      	movs	r3, r2
 8012a08:	66bb      	str	r3, [r7, #104]	@ 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8012a0a:	4b92      	ldr	r3, [pc, #584]	@ (8012c54 <_tx_thread_system_suspend+0x300>)
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012a10:	43d2      	mvns	r2, r2
 8012a12:	401a      	ands	r2, r3
 8012a14:	4b8f      	ldr	r3, [pc, #572]	@ (8012c54 <_tx_thread_system_suspend+0x300>)
 8012a16:	601a      	str	r2, [r3, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8012a18:	2300      	movs	r3, #0
 8012a1a:	653b      	str	r3, [r7, #80]	@ 0x50
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8012a1c:	4b8d      	ldr	r3, [pc, #564]	@ (8012c54 <_tx_thread_system_suspend+0x300>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8012a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d12b      	bne.n	8012a80 <_tx_thread_system_suspend+0x12c>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012a28:	4b8b      	ldr	r3, [pc, #556]	@ (8012c58 <_tx_thread_system_suspend+0x304>)
 8012a2a:	2220      	movs	r2, #32
 8012a2c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8012a2e:	4b8b      	ldr	r3, [pc, #556]	@ (8012c5c <_tx_thread_system_suspend+0x308>)
 8012a30:	2200      	movs	r2, #0
 8012a32:	601a      	str	r2, [r3, #0]
 8012a34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012a36:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012a3a:	f383 8810 	msr	PRIMASK, r3
}
 8012a3e:	46c0      	nop			@ (mov r8, r8)
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012a40:	4b82      	ldr	r3, [pc, #520]	@ (8012c4c <_tx_thread_system_suspend+0x2f8>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (combined_flags == ((ULONG) 0))
 8012a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d000      	beq.n	8012a4e <_tx_thread_system_suspend+0xfa>
 8012a4c:	e0f2      	b.n	8012c34 <_tx_thread_system_suspend+0x2e0>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012a4e:	4b84      	ldr	r3, [pc, #528]	@ (8012c60 <_tx_thread_system_suspend+0x30c>)
 8012a50:	2280      	movs	r2, #128	@ 0x80
 8012a52:	0552      	lsls	r2, r2, #21
 8012a54:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012a56:	f3ef 8305 	mrs	r3, IPSR
 8012a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(ipsr_value);
 8012a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    if (__get_ipsr_value() == 0)
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d10c      	bne.n	8012a7c <_tx_thread_system_suspend+0x128>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012a62:	f3ef 8310 	mrs	r3, PRIMASK
 8012a66:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(primask_value);
 8012a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
        interrupt_save = __get_primask_value();
 8012a6a:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8012a6c:	b662      	cpsie	i
}
 8012a6e:	46c0      	nop			@ (mov r8, r8)
 8012a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a72:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a76:	f383 8810 	msr	PRIMASK, r3
}
 8012a7a:	46c0      	nop			@ (mov r8, r8)
}
 8012a7c:	46c0      	nop			@ (mov r8, r8)
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8012a7e:	e0d9      	b.n	8012c34 <_tx_thread_system_suspend+0x2e0>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8012a80:	2300      	movs	r3, #0
 8012a82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012a86:	425a      	negs	r2, r3
 8012a88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012a8a:	4013      	ands	r3, r2
 8012a8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012a8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012a90:	2b0f      	cmp	r3, #15
 8012a92:	d80e      	bhi.n	8012ab2 <_tx_thread_system_suspend+0x15e>
 8012a94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012a96:	2b03      	cmp	r3, #3
 8012a98:	d905      	bls.n	8012aa6 <_tx_thread_system_suspend+0x152>
 8012a9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012a9c:	089b      	lsrs	r3, r3, #2
 8012a9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012aa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012aa2:	3302      	adds	r3, #2
 8012aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012aa8:	085b      	lsrs	r3, r3, #1
 8012aaa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012aac:	18d3      	adds	r3, r2, r3
 8012aae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012ab0:	e060      	b.n	8012b74 <_tx_thread_system_suspend+0x220>
 8012ab2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012ab4:	2bff      	cmp	r3, #255	@ 0xff
 8012ab6:	d814      	bhi.n	8012ae2 <_tx_thread_system_suspend+0x18e>
 8012ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012aba:	091b      	lsrs	r3, r3, #4
 8012abc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012abe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012ac0:	3304      	adds	r3, #4
 8012ac2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012ac6:	2b03      	cmp	r3, #3
 8012ac8:	d905      	bls.n	8012ad6 <_tx_thread_system_suspend+0x182>
 8012aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012acc:	089b      	lsrs	r3, r3, #2
 8012ace:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012ad0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012ad2:	3302      	adds	r3, #2
 8012ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012ad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012ad8:	085b      	lsrs	r3, r3, #1
 8012ada:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012adc:	18d3      	adds	r3, r2, r3
 8012ade:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012ae0:	e048      	b.n	8012b74 <_tx_thread_system_suspend+0x220>
 8012ae2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012ae4:	2380      	movs	r3, #128	@ 0x80
 8012ae6:	025b      	lsls	r3, r3, #9
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	d21d      	bcs.n	8012b28 <_tx_thread_system_suspend+0x1d4>
 8012aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012aee:	0a1b      	lsrs	r3, r3, #8
 8012af0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012af2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012af4:	3308      	adds	r3, #8
 8012af6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012af8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012afa:	2b0f      	cmp	r3, #15
 8012afc:	d905      	bls.n	8012b0a <_tx_thread_system_suspend+0x1b6>
 8012afe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b00:	091b      	lsrs	r3, r3, #4
 8012b02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012b04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012b06:	3304      	adds	r3, #4
 8012b08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b0c:	2b03      	cmp	r3, #3
 8012b0e:	d905      	bls.n	8012b1c <_tx_thread_system_suspend+0x1c8>
 8012b10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b12:	089b      	lsrs	r3, r3, #2
 8012b14:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012b16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012b18:	3302      	adds	r3, #2
 8012b1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012b1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b1e:	085b      	lsrs	r3, r3, #1
 8012b20:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012b22:	18d3      	adds	r3, r2, r3
 8012b24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012b26:	e025      	b.n	8012b74 <_tx_thread_system_suspend+0x220>
 8012b28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b2a:	0c1b      	lsrs	r3, r3, #16
 8012b2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012b2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012b30:	3310      	adds	r3, #16
 8012b32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012b34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b36:	2bff      	cmp	r3, #255	@ 0xff
 8012b38:	d905      	bls.n	8012b46 <_tx_thread_system_suspend+0x1f2>
 8012b3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b3c:	0a1b      	lsrs	r3, r3, #8
 8012b3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012b40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012b42:	3308      	adds	r3, #8
 8012b44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b48:	2b0f      	cmp	r3, #15
 8012b4a:	d905      	bls.n	8012b58 <_tx_thread_system_suspend+0x204>
 8012b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b4e:	091b      	lsrs	r3, r3, #4
 8012b50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012b52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012b54:	3304      	adds	r3, #4
 8012b56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012b58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b5a:	2b03      	cmp	r3, #3
 8012b5c:	d905      	bls.n	8012b6a <_tx_thread_system_suspend+0x216>
 8012b5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b60:	089b      	lsrs	r3, r3, #2
 8012b62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012b64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012b66:	3302      	adds	r3, #2
 8012b68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b6c:	085b      	lsrs	r3, r3, #1
 8012b6e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012b70:	18d3      	adds	r3, r2, r3
 8012b72:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8012b74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012b76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012b78:	18d2      	adds	r2, r2, r3
 8012b7a:	4b37      	ldr	r3, [pc, #220]	@ (8012c58 <_tx_thread_system_suspend+0x304>)
 8012b7c:	601a      	str	r2, [r3, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8012b7e:	4b37      	ldr	r3, [pc, #220]	@ (8012c5c <_tx_thread_system_suspend+0x308>)
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	687a      	ldr	r2, [r7, #4]
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d12b      	bne.n	8012be0 <_tx_thread_system_suspend+0x28c>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8012b88:	4b33      	ldr	r3, [pc, #204]	@ (8012c58 <_tx_thread_system_suspend+0x304>)
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	4b30      	ldr	r3, [pc, #192]	@ (8012c50 <_tx_thread_system_suspend+0x2fc>)
 8012b8e:	0092      	lsls	r2, r2, #2
 8012b90:	58d2      	ldr	r2, [r2, r3]
 8012b92:	4b32      	ldr	r3, [pc, #200]	@ (8012c5c <_tx_thread_system_suspend+0x308>)
 8012b94:	601a      	str	r2, [r3, #0]
 8012b96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b9c:	f383 8810 	msr	PRIMASK, r3
}
 8012ba0:	46c0      	nop			@ (mov r8, r8)
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8012c4c <_tx_thread_system_suspend+0x2f8>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
            if (combined_flags == ((ULONG) 0))
 8012ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d144      	bne.n	8012c38 <_tx_thread_system_suspend+0x2e4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012bae:	4b2c      	ldr	r3, [pc, #176]	@ (8012c60 <_tx_thread_system_suspend+0x30c>)
 8012bb0:	2280      	movs	r2, #128	@ 0x80
 8012bb2:	0552      	lsls	r2, r2, #21
 8012bb4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012bb6:	f3ef 8305 	mrs	r3, IPSR
 8012bba:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8012bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d10c      	bne.n	8012bdc <_tx_thread_system_suspend+0x288>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8012bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    return(primask_value);
 8012bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_primask_value();
 8012bca:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8012bcc:	b662      	cpsie	i
}
 8012bce:	46c0      	nop			@ (mov r8, r8)
 8012bd0:	6a3b      	ldr	r3, [r7, #32]
 8012bd2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012bd4:	69fb      	ldr	r3, [r7, #28]
 8012bd6:	f383 8810 	msr	PRIMASK, r3
}
 8012bda:	46c0      	nop			@ (mov r8, r8)
}
 8012bdc:	46c0      	nop			@ (mov r8, r8)
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8012bde:	e02b      	b.n	8012c38 <_tx_thread_system_suspend+0x2e4>
 8012be0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012be2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012be4:	69bb      	ldr	r3, [r7, #24]
 8012be6:	f383 8810 	msr	PRIMASK, r3
}
 8012bea:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8012bec:	4b1b      	ldr	r3, [pc, #108]	@ (8012c5c <_tx_thread_system_suspend+0x308>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d022      	beq.n	8012c3c <_tx_thread_system_suspend+0x2e8>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012bf6:	4b15      	ldr	r3, [pc, #84]	@ (8012c4c <_tx_thread_system_suspend+0x2f8>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
        if (combined_flags == ((ULONG) 0))
 8012bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d11c      	bne.n	8012c3c <_tx_thread_system_suspend+0x2e8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012c02:	4b17      	ldr	r3, [pc, #92]	@ (8012c60 <_tx_thread_system_suspend+0x30c>)
 8012c04:	2280      	movs	r2, #128	@ 0x80
 8012c06:	0552      	lsls	r2, r2, #21
 8012c08:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012c0a:	f3ef 8305 	mrs	r3, IPSR
 8012c0e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012c10:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d10c      	bne.n	8012c30 <_tx_thread_system_suspend+0x2dc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012c16:	f3ef 8310 	mrs	r3, PRIMASK
 8012c1a:	613b      	str	r3, [r7, #16]
    return(primask_value);
 8012c1c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_primask_value();
 8012c1e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8012c20:	b662      	cpsie	i
}
 8012c22:	46c0      	nop			@ (mov r8, r8)
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	f383 8810 	msr	PRIMASK, r3
}
 8012c2e:	46c0      	nop			@ (mov r8, r8)
}
 8012c30:	46c0      	nop			@ (mov r8, r8)
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8012c32:	e003      	b.n	8012c3c <_tx_thread_system_suspend+0x2e8>
                return;
 8012c34:	46c0      	nop			@ (mov r8, r8)
 8012c36:	e002      	b.n	8012c3e <_tx_thread_system_suspend+0x2ea>
            return;
 8012c38:	46c0      	nop			@ (mov r8, r8)
 8012c3a:	e000      	b.n	8012c3e <_tx_thread_system_suspend+0x2ea>
    return;
 8012c3c:	46c0      	nop			@ (mov r8, r8)
}
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	b01c      	add	sp, #112	@ 0x70
 8012c42:	bd80      	pop	{r7, pc}
 8012c44:	20011198 	.word	0x20011198
 8012c48:	2001179c 	.word	0x2001179c
 8012c4c:	20011230 	.word	0x20011230
 8012c50:	200111b0 	.word	0x200111b0
 8012c54:	200111a8 	.word	0x200111a8
 8012c58:	200111ac 	.word	0x200111ac
 8012c5c:	2001119c 	.word	0x2001119c
 8012c60:	e000ed04 	.word	0xe000ed04

08012c64 <_tx_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b092      	sub	sp, #72	@ 0x48
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
UINT        status;
ULONG       suspension_sequence;


    /* Default to successful completion.  */
    status =  TX_SUCCESS;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012c70:	f3ef 8310 	mrs	r3, PRIMASK
 8012c74:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012c76:	b672      	cpsid	i
    return(primask_value);
 8012c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    /* Lockout interrupts while the thread is being terminated.  */
    TX_DISABLE
 8012c7a:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Deactivate thread timer, if active.  */
    _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	334c      	adds	r3, #76	@ 0x4c
 8012c80:	0018      	movs	r0, r3
 8012c82:	f000 fa45 	bl	8013110 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_THREAD_TERMINATE_INSERT

    /* Is the thread already terminated?  */
    if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c8a:	2b02      	cmp	r3, #2
 8012c8c:	d108      	bne.n	8012ca0 <_tx_thread_terminate+0x3c>
 8012c8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c90:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c94:	f383 8810 	msr	PRIMASK, r3
}
 8012c98:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success since thread is already terminated.  */
        status =  TX_SUCCESS;
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8012c9e:	e082      	b.n	8012da6 <_tx_thread_terminate+0x142>
    }

    /* Check the specified thread's current status.  */
    else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ca4:	2b01      	cmp	r3, #1
 8012ca6:	d100      	bne.n	8012caa <_tx_thread_terminate+0x46>
 8012ca8:	e077      	b.n	8012d9a <_tx_thread_terminate+0x136>
    {

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8012caa:	4b42      	ldr	r3, [pc, #264]	@ (8012db4 <_tx_thread_terminate+0x150>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	1c5a      	adds	r2, r3, #1
 8012cb0:	4b40      	ldr	r3, [pc, #256]	@ (8012db4 <_tx_thread_terminate+0x150>)
 8012cb2:	601a      	str	r2, [r3, #0]
        /* Pickup the entry/exit application callback routine.  */
        entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

        /* Check to see if the thread is currently ready.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d11e      	bne.n	8012cfa <_tx_thread_terminate+0x96>
        {

            /* Set the state to terminated.  */
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2202      	movs	r2, #2
 8012cc0:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Call actual non-interruptable thread suspension routine.  */
            _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2201      	movs	r2, #1
 8012cc6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	2200      	movs	r2, #0
 8012ccc:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Disable preemption.  */
            _tx_thread_preempt_disable++;
 8012cce:	4b39      	ldr	r3, [pc, #228]	@ (8012db4 <_tx_thread_terminate+0x150>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	1c5a      	adds	r2, r3, #1
 8012cd4:	4b37      	ldr	r3, [pc, #220]	@ (8012db4 <_tx_thread_terminate+0x150>)
 8012cd6:	601a      	str	r2, [r3, #0]
 8012cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012cda:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cde:	f383 8810 	msr	PRIMASK, r3
}
 8012ce2:	46c0      	nop			@ (mov r8, r8)
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
            }
#endif

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	0018      	movs	r0, r3
 8012ce8:	f7ff fe34 	bl	8012954 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012cec:	f3ef 8310 	mrs	r3, PRIMASK
 8012cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012cf2:	b672      	cpsid	i
    return(primask_value);
 8012cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

            /* Disable interrupts.  */
            TX_DISABLE
 8012cf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8012cf8:	e02f      	b.n	8012d5a <_tx_thread_terminate+0xf6>
        }
        else
        {

            /* Change the state to terminated.  */
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2202      	movs	r2, #2
 8012cfe:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Thread state change.  */
            TX_THREAD_STATE_CHANGE(thread_ptr, TX_TERMINATED)

            /* Set the suspending flag.  This prevents the thread from being
               resumed before the cleanup routine is executed.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2201      	movs	r2, #1
 8012d04:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Pickup the cleanup routine address.  */
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c

#ifndef TX_NOT_INTERRUPTABLE

            /* Pickup the suspension sequence number that is used later to verify that the
               cleanup is still necessary.  */
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	22ac      	movs	r2, #172	@ 0xac
 8012d10:	589b      	ldr	r3, [r3, r2]
 8012d12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d16:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d1a:	f383 8810 	msr	PRIMASK, r3
}
 8012d1e:	46c0      	nop			@ (mov r8, r8)
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Call any cleanup routines.  */
            if (suspend_cleanup != TX_NULL)
 8012d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d004      	beq.n	8012d30 <_tx_thread_terminate+0xcc>
            {

                /* Yes, there is a function to call.  */
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 8012d26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012d28:	687a      	ldr	r2, [r7, #4]
 8012d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d2c:	0010      	movs	r0, r2
 8012d2e:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012d30:	f3ef 8310 	mrs	r3, PRIMASK
 8012d34:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012d36:	b672      	cpsid	i
    return(primask_value);
 8012d38:	69bb      	ldr	r3, [r7, #24]
            }

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 8012d3a:	647b      	str	r3, [r7, #68]	@ 0x44
#endif

            /* Clear the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2200      	movs	r2, #0
 8012d40:	639a      	str	r2, [r3, #56]	@ 0x38
 8012d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d44:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012d46:	69fb      	ldr	r3, [r7, #28]
 8012d48:	f383 8810 	msr	PRIMASK, r3
}
 8012d4c:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8012d52:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012d54:	b672      	cpsid	i
    return(primask_value);
 8012d56:	6a3b      	ldr	r3, [r7, #32]
#endif

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 8012d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8012d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d5c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	f383 8810 	msr	PRIMASK, r3
}
 8012d64:	46c0      	nop			@ (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Determine if the application is using mutexes.  */
        if (_tx_thread_mutex_release != TX_NULL)
 8012d66:	4b14      	ldr	r3, [pc, #80]	@ (8012db8 <_tx_thread_terminate+0x154>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d004      	beq.n	8012d78 <_tx_thread_terminate+0x114>
        {

            /* Yes, call the mutex release function via a function pointer that
               is setup during initialization.  */
            (_tx_thread_mutex_release)(thread_ptr);
 8012d6e:	4b12      	ldr	r3, [pc, #72]	@ (8012db8 <_tx_thread_terminate+0x154>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	687a      	ldr	r2, [r7, #4]
 8012d74:	0010      	movs	r0, r2
 8012d76:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012d78:	f3ef 8310 	mrs	r3, PRIMASK
 8012d7c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012d7e:	b672      	cpsid	i
    return(primask_value);
 8012d80:	68fb      	ldr	r3, [r7, #12]
        }

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8012d82:	647b      	str	r3, [r7, #68]	@ 0x44
#endif

        /* Enable preemption.  */
        _tx_thread_preempt_disable--;
 8012d84:	4b0b      	ldr	r3, [pc, #44]	@ (8012db4 <_tx_thread_terminate+0x150>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	1e5a      	subs	r2, r3, #1
 8012d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8012db4 <_tx_thread_terminate+0x150>)
 8012d8c:	601a      	str	r2, [r3, #0]
 8012d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d90:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012d92:	693b      	ldr	r3, [r7, #16]
 8012d94:	f383 8810 	msr	PRIMASK, r3
}
 8012d98:	e005      	b.n	8012da6 <_tx_thread_terminate+0x142>
 8012d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d9c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	f383 8810 	msr	PRIMASK, r3
}
 8012da4:	46c0      	nop			@ (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8012da6:	f7ff fc9d 	bl	80126e4 <_tx_thread_system_preempt_check>

    /* Return completion status.  */
    return(status);
 8012daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8012dac:	0018      	movs	r0, r3
 8012dae:	46bd      	mov	sp, r7
 8012db0:	b012      	add	sp, #72	@ 0x48
 8012db2:	bd80      	pop	{r7, pc}
 8012db4:	20011230 	.word	0x20011230
 8012db8:	20011234 	.word	0x20011234

08012dbc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b084      	sub	sp, #16
 8012dc0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8012e40 <_tx_thread_time_slice+0x84>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8012dcc:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012dce:	b672      	cpsid	i
    return(primask_value);
 8012dd0:	687b      	ldr	r3, [r7, #4]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8012dd2:	60bb      	str	r3, [r7, #8]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8012dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8012e44 <_tx_thread_time_slice+0x88>)
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d024      	beq.n	8012e2a <_tx_thread_time_slice+0x6e>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d120      	bne.n	8012e2a <_tx_thread_time_slice+0x6e>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	69da      	ldr	r2, [r3, #28]
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	699a      	ldr	r2, [r3, #24]
 8012df4:	4b14      	ldr	r3, [pc, #80]	@ (8012e48 <_tx_thread_time_slice+0x8c>)
 8012df6:	601a      	str	r2, [r3, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	6a1b      	ldr	r3, [r3, #32]
 8012dfc:	68fa      	ldr	r2, [r7, #12]
 8012dfe:	429a      	cmp	r2, r3
 8012e00:	d013      	beq.n	8012e2a <_tx_thread_time_slice+0x6e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e0a:	429a      	cmp	r2, r3
 8012e0c:	d10d      	bne.n	8012e2a <_tx_thread_time_slice+0x6e>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	6a19      	ldr	r1, [r3, #32]
 8012e16:	4b0d      	ldr	r3, [pc, #52]	@ (8012e4c <_tx_thread_time_slice+0x90>)
 8012e18:	0092      	lsls	r2, r2, #2
 8012e1a:	50d1      	str	r1, [r2, r3]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8012e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8012e50 <_tx_thread_time_slice+0x94>)
 8012e1e:	681a      	ldr	r2, [r3, #0]
 8012e20:	4b0a      	ldr	r3, [pc, #40]	@ (8012e4c <_tx_thread_time_slice+0x90>)
 8012e22:	0092      	lsls	r2, r2, #2
 8012e24:	58d2      	ldr	r2, [r2, r3]
 8012e26:	4b0b      	ldr	r3, [pc, #44]	@ (8012e54 <_tx_thread_time_slice+0x98>)
 8012e28:	601a      	str	r2, [r3, #0]
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	f383 8810 	msr	PRIMASK, r3
}
 8012e34:	46c0      	nop			@ (mov r8, r8)

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8012e36:	46c0      	nop			@ (mov r8, r8)
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	b004      	add	sp, #16
 8012e3c:	bd80      	pop	{r7, pc}
 8012e3e:	46c0      	nop			@ (mov r8, r8)
 8012e40:	20011198 	.word	0x20011198
 8012e44:	20011240 	.word	0x20011240
 8012e48:	2001179c 	.word	0x2001179c
 8012e4c:	200111b0 	.word	0x200111b0
 8012e50:	200111ac 	.word	0x200111ac
 8012e54:	2001119c 	.word	0x2001119c

08012e58 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b08a      	sub	sp, #40	@ 0x28
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012e64:	f3ef 8310 	mrs	r3, PRIMASK
 8012e68:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012e6a:	b672      	cpsid	i
    return(primask_value);
 8012e6c:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 8012e6e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8012e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e74:	2b04      	cmp	r3, #4
 8012e76:	d10f      	bne.n	8012e98 <_tx_thread_timeout+0x40>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8012e78:	4b14      	ldr	r3, [pc, #80]	@ (8012ecc <_tx_thread_timeout+0x74>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	1c5a      	adds	r2, r3, #1
 8012e7e:	4b13      	ldr	r3, [pc, #76]	@ (8012ecc <_tx_thread_timeout+0x74>)
 8012e80:	601a      	str	r2, [r3, #0]
 8012e82:	6a3b      	ldr	r3, [r7, #32]
 8012e84:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012e86:	693b      	ldr	r3, [r7, #16]
 8012e88:	f383 8810 	msr	PRIMASK, r3
}
 8012e8c:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e90:	0018      	movs	r0, r3
 8012e92:	f7ff fc5f 	bl	8012754 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8012e96:	e014      	b.n	8012ec2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8012e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e9c:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8012e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ea0:	22ac      	movs	r2, #172	@ 0xac
 8012ea2:	589b      	ldr	r3, [r3, r2]
 8012ea4:	61bb      	str	r3, [r7, #24]
 8012ea6:	6a3b      	ldr	r3, [r7, #32]
 8012ea8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	f383 8810 	msr	PRIMASK, r3
}
 8012eb0:	46c0      	nop			@ (mov r8, r8)
        if (suspend_cleanup != TX_NULL)
 8012eb2:	69fb      	ldr	r3, [r7, #28]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d004      	beq.n	8012ec2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8012eb8:	69b9      	ldr	r1, [r7, #24]
 8012eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012ebc:	69fb      	ldr	r3, [r7, #28]
 8012ebe:	0010      	movs	r0, r2
 8012ec0:	4798      	blx	r3
}
 8012ec2:	46c0      	nop			@ (mov r8, r8)
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	b00a      	add	sp, #40	@ 0x28
 8012ec8:	bd80      	pop	{r7, pc}
 8012eca:	46c0      	nop			@ (mov r8, r8)
 8012ecc:	20011230 	.word	0x20011230

08012ed0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b084      	sub	sp, #16
 8012ed4:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8012eda:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012edc:	b672      	cpsid	i
    return(primask_value);
 8012ede:	687b      	ldr	r3, [r7, #4]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8012ee0:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8012ee2:	4b09      	ldr	r3, [pc, #36]	@ (8012f08 <_tx_timer_expiration_process+0x38>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	1c5a      	adds	r2, r3, #1
 8012ee8:	4b07      	ldr	r3, [pc, #28]	@ (8012f08 <_tx_timer_expiration_process+0x38>)
 8012eea:	601a      	str	r2, [r3, #0]
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	f383 8810 	msr	PRIMASK, r3
}
 8012ef6:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8012ef8:	4b04      	ldr	r3, [pc, #16]	@ (8012f0c <_tx_timer_expiration_process+0x3c>)
 8012efa:	0018      	movs	r0, r3
 8012efc:	f7ff fc2a 	bl	8012754 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012f00:	46c0      	nop			@ (mov r8, r8)
 8012f02:	46bd      	mov	sp, r7
 8012f04:	b004      	add	sp, #16
 8012f06:	bd80      	pop	{r7, pc}
 8012f08:	20011230 	.word	0x20011230
 8012f0c:	200112e0 	.word	0x200112e0

08012f10 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8012f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f12:	46ce      	mov	lr, r9
 8012f14:	4647      	mov	r7, r8
 8012f16:	b580      	push	{r7, lr}
 8012f18:	b08d      	sub	sp, #52	@ 0x34
 8012f1a:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8012f1c:	4b39      	ldr	r3, [pc, #228]	@ (8013004 <_tx_timer_initialize+0xf4>)
 8012f1e:	2200      	movs	r2, #0
 8012f20:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8012f22:	4b39      	ldr	r3, [pc, #228]	@ (8013008 <_tx_timer_initialize+0xf8>)
 8012f24:	2200      	movs	r2, #0
 8012f26:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8012f28:	4b38      	ldr	r3, [pc, #224]	@ (801300c <_tx_timer_initialize+0xfc>)
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8012f2e:	4b38      	ldr	r3, [pc, #224]	@ (8013010 <_tx_timer_initialize+0x100>)
 8012f30:	2200      	movs	r2, #0
 8012f32:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8012f34:	4b37      	ldr	r3, [pc, #220]	@ (8013014 <_tx_timer_initialize+0x104>)
 8012f36:	2200      	movs	r2, #0
 8012f38:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8012f3a:	4b37      	ldr	r3, [pc, #220]	@ (8013018 <_tx_timer_initialize+0x108>)
 8012f3c:	617b      	str	r3, [r7, #20]
 8012f3e:	230f      	movs	r3, #15
 8012f40:	18fb      	adds	r3, r7, r3
 8012f42:	2200      	movs	r2, #0
 8012f44:	701a      	strb	r2, [r3, #0]
 8012f46:	2380      	movs	r3, #128	@ 0x80
 8012f48:	60bb      	str	r3, [r7, #8]
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	613b      	str	r3, [r7, #16]
 8012f4e:	e009      	b.n	8012f64 <_tx_timer_initialize+0x54>
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	1c5a      	adds	r2, r3, #1
 8012f54:	617a      	str	r2, [r7, #20]
 8012f56:	220f      	movs	r2, #15
 8012f58:	18ba      	adds	r2, r7, r2
 8012f5a:	7812      	ldrb	r2, [r2, #0]
 8012f5c:	701a      	strb	r2, [r3, #0]
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	3301      	adds	r3, #1
 8012f62:	613b      	str	r3, [r7, #16]
 8012f64:	693a      	ldr	r2, [r7, #16]
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d3f1      	bcc.n	8012f50 <_tx_timer_initialize+0x40>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8012f6c:	4b2b      	ldr	r3, [pc, #172]	@ (801301c <_tx_timer_initialize+0x10c>)
 8012f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8013018 <_tx_timer_initialize+0x108>)
 8012f70:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8012f72:	4b2b      	ldr	r3, [pc, #172]	@ (8013020 <_tx_timer_initialize+0x110>)
 8012f74:	4a28      	ldr	r2, [pc, #160]	@ (8013018 <_tx_timer_initialize+0x108>)
 8012f76:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8012f78:	4b2a      	ldr	r3, [pc, #168]	@ (8013024 <_tx_timer_initialize+0x114>)
 8012f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8013028 <_tx_timer_initialize+0x118>)
 8012f7c:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8012f7e:	4b29      	ldr	r3, [pc, #164]	@ (8013024 <_tx_timer_initialize+0x114>)
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	1d1a      	adds	r2, r3, #4
 8012f84:	4b27      	ldr	r3, [pc, #156]	@ (8013024 <_tx_timer_initialize+0x114>)
 8012f86:	601a      	str	r2, [r3, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8012f88:	4b28      	ldr	r3, [pc, #160]	@ (801302c <_tx_timer_initialize+0x11c>)
 8012f8a:	4a29      	ldr	r2, [pc, #164]	@ (8013030 <_tx_timer_initialize+0x120>)
 8012f8c:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8012f8e:	4b29      	ldr	r3, [pc, #164]	@ (8013034 <_tx_timer_initialize+0x124>)
 8012f90:	2280      	movs	r2, #128	@ 0x80
 8012f92:	00d2      	lsls	r2, r2, #3
 8012f94:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8012f96:	4b28      	ldr	r3, [pc, #160]	@ (8013038 <_tx_timer_initialize+0x128>)
 8012f98:	2200      	movs	r2, #0
 8012f9a:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8012f9c:	4b23      	ldr	r3, [pc, #140]	@ (801302c <_tx_timer_initialize+0x11c>)
 8012f9e:	681a      	ldr	r2, [r3, #0]
 8012fa0:	4b24      	ldr	r3, [pc, #144]	@ (8013034 <_tx_timer_initialize+0x124>)
 8012fa2:	6819      	ldr	r1, [r3, #0]
 8012fa4:	4b24      	ldr	r3, [pc, #144]	@ (8013038 <_tx_timer_initialize+0x128>)
 8012fa6:	6818      	ldr	r0, [r3, #0]
 8012fa8:	4b23      	ldr	r3, [pc, #140]	@ (8013038 <_tx_timer_initialize+0x128>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	4699      	mov	r9, r3
 8012fae:	4c23      	ldr	r4, [pc, #140]	@ (801303c <_tx_timer_initialize+0x12c>)
 8012fb0:	46a0      	mov	r8, r4
 8012fb2:	4e23      	ldr	r6, [pc, #140]	@ (8013040 <_tx_timer_initialize+0x130>)
 8012fb4:	4d23      	ldr	r5, [pc, #140]	@ (8013044 <_tx_timer_initialize+0x134>)
 8012fb6:	4c24      	ldr	r4, [pc, #144]	@ (8013048 <_tx_timer_initialize+0x138>)
 8012fb8:	2300      	movs	r3, #0
 8012fba:	469c      	mov	ip, r3
 8012fbc:	4663      	mov	r3, ip
 8012fbe:	9305      	str	r3, [sp, #20]
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	469c      	mov	ip, r3
 8012fc4:	4663      	mov	r3, ip
 8012fc6:	9304      	str	r3, [sp, #16]
 8012fc8:	464b      	mov	r3, r9
 8012fca:	9303      	str	r3, [sp, #12]
 8012fcc:	9002      	str	r0, [sp, #8]
 8012fce:	9101      	str	r1, [sp, #4]
 8012fd0:	9200      	str	r2, [sp, #0]
 8012fd2:	4643      	mov	r3, r8
 8012fd4:	0032      	movs	r2, r6
 8012fd6:	0029      	movs	r1, r5
 8012fd8:	0020      	movs	r0, r4
 8012fda:	f7fe ff4b 	bl	8011e74 <_tx_thread_create>
 8012fde:	0003      	movs	r3, r0
 8012fe0:	607b      	str	r3, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d1d9      	bne.n	8012f9c <_tx_timer_initialize+0x8c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8012fe8:	4b18      	ldr	r3, [pc, #96]	@ (801304c <_tx_timer_initialize+0x13c>)
 8012fea:	2200      	movs	r2, #0
 8012fec:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8012fee:	4b18      	ldr	r3, [pc, #96]	@ (8013050 <_tx_timer_initialize+0x140>)
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8012ff4:	46c0      	nop			@ (mov r8, r8)
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	b007      	add	sp, #28
 8012ffa:	bcc0      	pop	{r6, r7}
 8012ffc:	46b9      	mov	r9, r7
 8012ffe:	46b0      	mov	r8, r6
 8013000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013002:	46c0      	nop			@ (mov r8, r8)
 8013004:	2001123c 	.word	0x2001123c
 8013008:	2001179c 	.word	0x2001179c
 801300c:	20011240 	.word	0x20011240
 8013010:	200112d0 	.word	0x200112d0
 8013014:	200112dc 	.word	0x200112dc
 8013018:	20011244 	.word	0x20011244
 801301c:	200112c4 	.word	0x200112c4
 8013020:	200112cc 	.word	0x200112cc
 8013024:	200112c8 	.word	0x200112c8
 8013028:	200112c0 	.word	0x200112c0
 801302c:	20011390 	.word	0x20011390
 8013030:	2001139c 	.word	0x2001139c
 8013034:	20011394 	.word	0x20011394
 8013038:	20011398 	.word	0x20011398
 801303c:	4154494d 	.word	0x4154494d
 8013040:	0801317d 	.word	0x0801317d
 8013044:	0801ef74 	.word	0x0801ef74
 8013048:	200112e0 	.word	0x200112e0
 801304c:	200112d4 	.word	0x200112d4
 8013050:	200112d8 	.word	0x200112d8

08013054 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b088      	sub	sp, #32
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d049      	beq.n	80130fc <_tx_timer_system_activate+0xa8>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	3301      	adds	r3, #1
 801306c:	d046      	beq.n	80130fc <_tx_timer_system_activate+0xa8>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	699b      	ldr	r3, [r3, #24]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d142      	bne.n	80130fc <_tx_timer_system_activate+0xa8>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	2b20      	cmp	r3, #32
 801307a:	d902      	bls.n	8013082 <_tx_timer_system_activate+0x2e>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 801307c:	231f      	movs	r3, #31
 801307e:	61bb      	str	r3, [r7, #24]
 8013080:	e002      	b.n	8013088 <_tx_timer_system_activate+0x34>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	3b01      	subs	r3, #1
 8013086:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8013088:	4b1e      	ldr	r3, [pc, #120]	@ (8013104 <_tx_timer_system_activate+0xb0>)
 801308a:	681a      	ldr	r2, [r3, #0]
 801308c:	69bb      	ldr	r3, [r7, #24]
 801308e:	009b      	lsls	r3, r3, #2
 8013090:	18d3      	adds	r3, r2, r3
 8013092:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8013094:	4b1c      	ldr	r3, [pc, #112]	@ (8013108 <_tx_timer_system_activate+0xb4>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	69fa      	ldr	r2, [r7, #28]
 801309a:	429a      	cmp	r2, r3
 801309c:	d30b      	bcc.n	80130b6 <_tx_timer_system_activate+0x62>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 801309e:	4b1a      	ldr	r3, [pc, #104]	@ (8013108 <_tx_timer_system_activate+0xb4>)
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	69fa      	ldr	r2, [r7, #28]
 80130a4:	1ad3      	subs	r3, r2, r3
 80130a6:	109b      	asrs	r3, r3, #2
 80130a8:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80130aa:	4b18      	ldr	r3, [pc, #96]	@ (801310c <_tx_timer_system_activate+0xb8>)
 80130ac:	681a      	ldr	r2, [r3, #0]
 80130ae:	693b      	ldr	r3, [r7, #16]
 80130b0:	009b      	lsls	r3, r3, #2
 80130b2:	18d3      	adds	r3, r2, r3
 80130b4:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80130b6:	69fb      	ldr	r3, [r7, #28]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d109      	bne.n	80130d2 <_tx_timer_system_activate+0x7e>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	687a      	ldr	r2, [r7, #4]
 80130c2:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	687a      	ldr	r2, [r7, #4]
 80130c8:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80130ca:	69fb      	ldr	r3, [r7, #28]
 80130cc:	687a      	ldr	r2, [r7, #4]
 80130ce:	601a      	str	r2, [r3, #0]
 80130d0:	e011      	b.n	80130f6 <_tx_timer_system_activate+0xa2>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80130d2:	69fb      	ldr	r3, [r7, #28]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	695b      	ldr	r3, [r3, #20]
 80130dc:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	687a      	ldr	r2, [r7, #4]
 80130e2:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	687a      	ldr	r2, [r7, #4]
 80130e8:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	68fa      	ldr	r2, [r7, #12]
 80130ee:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	68ba      	ldr	r2, [r7, #8]
 80130f4:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	69fa      	ldr	r2, [r7, #28]
 80130fa:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80130fc:	46c0      	nop			@ (mov r8, r8)
 80130fe:	46bd      	mov	sp, r7
 8013100:	b008      	add	sp, #32
 8013102:	bd80      	pop	{r7, pc}
 8013104:	200112cc 	.word	0x200112cc
 8013108:	200112c8 	.word	0x200112c8
 801310c:	200112c4 	.word	0x200112c4

08013110 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b086      	sub	sp, #24
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	699b      	ldr	r3, [r3, #24]
 801311c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 801311e:	697b      	ldr	r3, [r7, #20]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d026      	beq.n	8013172 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	691b      	ldr	r3, [r3, #16]
 8013128:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801312a:	687a      	ldr	r2, [r7, #4]
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	429a      	cmp	r2, r3
 8013130:	d108      	bne.n	8013144 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8013132:	697b      	ldr	r3, [r7, #20]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	687a      	ldr	r2, [r7, #4]
 8013138:	429a      	cmp	r2, r3
 801313a:	d117      	bne.n	801316c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	2200      	movs	r2, #0
 8013140:	601a      	str	r2, [r3, #0]
 8013142:	e013      	b.n	801316c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	695b      	ldr	r3, [r3, #20]
 8013148:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	68fa      	ldr	r2, [r7, #12]
 801314e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	693a      	ldr	r2, [r7, #16]
 8013154:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	687a      	ldr	r2, [r7, #4]
 801315c:	429a      	cmp	r2, r3
 801315e:	d105      	bne.n	801316c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8013160:	693b      	ldr	r3, [r7, #16]
 8013162:	697a      	ldr	r2, [r7, #20]
 8013164:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	693a      	ldr	r2, [r7, #16]
 801316a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2200      	movs	r2, #0
 8013170:	619a      	str	r2, [r3, #24]
    }
}
 8013172:	46c0      	nop			@ (mov r8, r8)
 8013174:	46bd      	mov	sp, r7
 8013176:	b006      	add	sp, #24
 8013178:	bd80      	pop	{r7, pc}
	...

0801317c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b094      	sub	sp, #80	@ 0x50
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8013184:	2300      	movs	r3, #0
 8013186:	647b      	str	r3, [r7, #68]	@ 0x44
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	4a70      	ldr	r2, [pc, #448]	@ (801334c <_tx_timer_thread_entry+0x1d0>)
 801318c:	4293      	cmp	r3, r2
 801318e:	d000      	beq.n	8013192 <_tx_timer_thread_entry+0x16>
 8013190:	e0d8      	b.n	8013344 <_tx_timer_thread_entry+0x1c8>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013192:	f3ef 8310 	mrs	r3, PRIMASK
 8013196:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013198:	b672      	cpsid	i
    return(primask_value);
 801319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 801319c:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 801319e:	4b6c      	ldr	r3, [pc, #432]	@ (8013350 <_tx_timer_thread_entry+0x1d4>)
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d003      	beq.n	80131b4 <_tx_timer_thread_entry+0x38>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	220c      	movs	r2, #12
 80131b0:	18ba      	adds	r2, r7, r2
 80131b2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80131b4:	4b66      	ldr	r3, [pc, #408]	@ (8013350 <_tx_timer_thread_entry+0x1d4>)
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	2200      	movs	r2, #0
 80131ba:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80131bc:	4b64      	ldr	r3, [pc, #400]	@ (8013350 <_tx_timer_thread_entry+0x1d4>)
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	1d1a      	adds	r2, r3, #4
 80131c2:	4b63      	ldr	r3, [pc, #396]	@ (8013350 <_tx_timer_thread_entry+0x1d4>)
 80131c4:	601a      	str	r2, [r3, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80131c6:	4b62      	ldr	r3, [pc, #392]	@ (8013350 <_tx_timer_thread_entry+0x1d4>)
 80131c8:	681a      	ldr	r2, [r3, #0]
 80131ca:	4b62      	ldr	r3, [pc, #392]	@ (8013354 <_tx_timer_thread_entry+0x1d8>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	429a      	cmp	r2, r3
 80131d0:	d103      	bne.n	80131da <_tx_timer_thread_entry+0x5e>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80131d2:	4b61      	ldr	r3, [pc, #388]	@ (8013358 <_tx_timer_thread_entry+0x1dc>)
 80131d4:	681a      	ldr	r2, [r3, #0]
 80131d6:	4b5e      	ldr	r3, [pc, #376]	@ (8013350 <_tx_timer_thread_entry+0x1d4>)
 80131d8:	601a      	str	r2, [r3, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80131da:	4b60      	ldr	r3, [pc, #384]	@ (801335c <_tx_timer_thread_entry+0x1e0>)
 80131dc:	2200      	movs	r2, #0
 80131de:	601a      	str	r2, [r3, #0]
 80131e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80131e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131e6:	f383 8810 	msr	PRIMASK, r3
}
 80131ea:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80131ec:	f3ef 8310 	mrs	r3, PRIMASK
 80131f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 80131f2:	b672      	cpsid	i
    return(primask_value);
 80131f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80131f6:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80131f8:	e07d      	b.n	80132f6 <_tx_timer_thread_entry+0x17a>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	691b      	ldr	r3, [r3, #16]
 8013202:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8013204:	2300      	movs	r3, #0
 8013206:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8013208:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801320a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801320c:	429a      	cmp	r2, r3
 801320e:	d102      	bne.n	8013216 <_tx_timer_thread_entry+0x9a>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8013210:	2300      	movs	r3, #0
 8013212:	60fb      	str	r3, [r7, #12]
 8013214:	e00e      	b.n	8013234 <_tx_timer_thread_entry+0xb8>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8013216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013218:	695b      	ldr	r3, [r3, #20]
 801321a:	637b      	str	r3, [r7, #52]	@ 0x34
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801321c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801321e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013220:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8013222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013224:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013226:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8013228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801322a:	220c      	movs	r2, #12
 801322c:	18ba      	adds	r2, r7, r2
 801322e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8013230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013232:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8013234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	2b20      	cmp	r3, #32
 801323a:	d911      	bls.n	8013260 <_tx_timer_thread_entry+0xe4>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 801323c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	3b20      	subs	r3, #32
 8013242:	001a      	movs	r2, r3
                    current_timer -> tx_timer_internal_remaining_ticks =
 8013244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013246:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8013248:	2300      	movs	r3, #0
 801324a:	64bb      	str	r3, [r7, #72]	@ 0x48

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801324c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801324e:	2208      	movs	r2, #8
 8013250:	18ba      	adds	r2, r7, r2
 8013252:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8013254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013256:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013258:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 801325a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801325c:	60bb      	str	r3, [r7, #8]
 801325e:	e01a      	b.n	8013296 <_tx_timer_thread_entry+0x11a>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8013260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013262:	689b      	ldr	r3, [r3, #8]
 8013264:	64bb      	str	r3, [r7, #72]	@ 0x48
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8013266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013268:	68db      	ldr	r3, [r3, #12]
 801326a:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 801326c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801326e:	685a      	ldr	r2, [r3, #4]
 8013270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013272:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8013274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d009      	beq.n	8013290 <_tx_timer_thread_entry+0x114>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 801327c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801327e:	2208      	movs	r2, #8
 8013280:	18ba      	adds	r2, r7, r2
 8013282:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8013284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013286:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013288:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 801328a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801328c:	60bb      	str	r3, [r7, #8]
 801328e:	e002      	b.n	8013296 <_tx_timer_thread_entry+0x11a>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8013290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013292:	2200      	movs	r2, #0
 8013294:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8013296:	4b32      	ldr	r3, [pc, #200]	@ (8013360 <_tx_timer_thread_entry+0x1e4>)
 8013298:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801329a:	601a      	str	r2, [r3, #0]
 801329c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801329e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80132a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132a2:	f383 8810 	msr	PRIMASK, r3
}
 80132a6:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80132a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d003      	beq.n	80132b6 <_tx_timer_thread_entry+0x13a>
                {

                    (timeout_function) (timeout_param);
 80132ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80132b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80132b2:	0010      	movs	r0, r2
 80132b4:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80132b6:	f3ef 8310 	mrs	r3, PRIMASK
 80132ba:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80132bc:	b672      	cpsid	i
    return(primask_value);
 80132be:	6a3b      	ldr	r3, [r7, #32]
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80132c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80132c2:	4b27      	ldr	r3, [pc, #156]	@ (8013360 <_tx_timer_thread_entry+0x1e4>)
 80132c4:	2200      	movs	r2, #0
 80132c6:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80132cc:	429a      	cmp	r2, r3
 80132ce:	d106      	bne.n	80132de <_tx_timer_thread_entry+0x162>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80132d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132d2:	2200      	movs	r2, #0
 80132d4:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80132d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132d8:	0018      	movs	r0, r3
 80132da:	f7ff febb 	bl	8013054 <_tx_timer_system_activate>
 80132de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80132e0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80132e2:	69bb      	ldr	r3, [r7, #24]
 80132e4:	f383 8810 	msr	PRIMASK, r3
}
 80132e8:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80132ea:	f3ef 8310 	mrs	r3, PRIMASK
 80132ee:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80132f0:	b672      	cpsid	i
    return(primask_value);
 80132f2:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80132f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (expired_timers != TX_NULL)
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d000      	beq.n	80132fe <_tx_timer_thread_entry+0x182>
 80132fc:	e77d      	b.n	80131fa <_tx_timer_thread_entry+0x7e>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80132fe:	4b17      	ldr	r3, [pc, #92]	@ (801335c <_tx_timer_thread_entry+0x1e0>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d117      	bne.n	8013336 <_tx_timer_thread_entry+0x1ba>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8013306:	4b17      	ldr	r3, [pc, #92]	@ (8013364 <_tx_timer_thread_entry+0x1e8>)
 8013308:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801330a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801330c:	2203      	movs	r2, #3
 801330e:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8013310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013312:	2201      	movs	r2, #1
 8013314:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8013316:	4b14      	ldr	r3, [pc, #80]	@ (8013368 <_tx_timer_thread_entry+0x1ec>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	1c5a      	adds	r2, r3, #1
 801331c:	4b12      	ldr	r3, [pc, #72]	@ (8013368 <_tx_timer_thread_entry+0x1ec>)
 801331e:	601a      	str	r2, [r3, #0]
 8013320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013322:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	f383 8810 	msr	PRIMASK, r3
}
 801332a:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801332c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801332e:	0018      	movs	r0, r3
 8013330:	f7ff fb10 	bl	8012954 <_tx_thread_system_suspend>
 8013334:	e72d      	b.n	8013192 <_tx_timer_thread_entry+0x16>
 8013336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013338:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801333a:	693b      	ldr	r3, [r7, #16]
 801333c:	f383 8810 	msr	PRIMASK, r3
}
 8013340:	46c0      	nop			@ (mov r8, r8)
            TX_DISABLE
 8013342:	e726      	b.n	8013192 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8013344:	46c0      	nop			@ (mov r8, r8)
 8013346:	46bd      	mov	sp, r7
 8013348:	b014      	add	sp, #80	@ 0x50
 801334a:	bd80      	pop	{r7, pc}
 801334c:	4154494d 	.word	0x4154494d
 8013350:	200112cc 	.word	0x200112cc
 8013354:	200112c8 	.word	0x200112c8
 8013358:	200112c4 	.word	0x200112c4
 801335c:	200112d0 	.word	0x200112d0
 8013360:	200112dc 	.word	0x200112dc
 8013364:	200112e0 	.word	0x200112e0
 8013368:	20011230 	.word	0x20011230

0801336c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b08a      	sub	sp, #40	@ 0x28
 8013370:	af00      	add	r7, sp, #0
 8013372:	60f8      	str	r0, [r7, #12]
 8013374:	60b9      	str	r1, [r7, #8]
 8013376:	607a      	str	r2, [r7, #4]
 8013378:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801337a:	2300      	movs	r3, #0
 801337c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d102      	bne.n	801338a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013384:	2302      	movs	r3, #2
 8013386:	627b      	str	r3, [r7, #36]	@ 0x24
 8013388:	e028      	b.n	80133dc <_txe_byte_allocate+0x70>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	4a2d      	ldr	r2, [pc, #180]	@ (8013444 <_txe_byte_allocate+0xd8>)
 8013390:	4293      	cmp	r3, r2
 8013392:	d002      	beq.n	801339a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013394:	2302      	movs	r3, #2
 8013396:	627b      	str	r3, [r7, #36]	@ 0x24
 8013398:	e020      	b.n	80133dc <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d102      	bne.n	80133a6 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80133a0:	2303      	movs	r3, #3
 80133a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80133a4:	e01a      	b.n	80133dc <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d102      	bne.n	80133b2 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80133ac:	2305      	movs	r3, #5
 80133ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80133b0:	e014      	b.n	80133dc <_txe_byte_allocate+0x70>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	69db      	ldr	r3, [r3, #28]
 80133b6:	687a      	ldr	r2, [r7, #4]
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d902      	bls.n	80133c2 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80133bc:	2305      	movs	r3, #5
 80133be:	627b      	str	r3, [r7, #36]	@ 0x24
 80133c0:	e00c      	b.n	80133dc <_txe_byte_allocate+0x70>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d009      	beq.n	80133dc <_txe_byte_allocate+0x70>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80133c8:	f3ef 8305 	mrs	r3, IPSR
 80133cc:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80133ce:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80133d0:	4b1d      	ldr	r3, [pc, #116]	@ (8013448 <_txe_byte_allocate+0xdc>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	4313      	orrs	r3, r2
 80133d6:	d001      	beq.n	80133dc <_txe_byte_allocate+0x70>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80133d8:	2304      	movs	r3, #4
 80133da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80133dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d108      	bne.n	80133f4 <_txe_byte_allocate+0x88>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80133e2:	4b1a      	ldr	r3, [pc, #104]	@ (801344c <_txe_byte_allocate+0xe0>)
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80133e8:	6a3a      	ldr	r2, [r7, #32]
 80133ea:	4b19      	ldr	r3, [pc, #100]	@ (8013450 <_txe_byte_allocate+0xe4>)
 80133ec:	429a      	cmp	r2, r3
 80133ee:	d101      	bne.n	80133f4 <_txe_byte_allocate+0x88>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80133f0:	2313      	movs	r3, #19
 80133f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80133f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d113      	bne.n	8013422 <_txe_byte_allocate+0xb6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80133fa:	f3ef 8305 	mrs	r3, IPSR
 80133fe:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013400:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013402:	4b11      	ldr	r3, [pc, #68]	@ (8013448 <_txe_byte_allocate+0xdc>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	4313      	orrs	r3, r2
 8013408:	d00b      	beq.n	8013422 <_txe_byte_allocate+0xb6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801340a:	f3ef 8305 	mrs	r3, IPSR
 801340e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013410:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013412:	4b0d      	ldr	r3, [pc, #52]	@ (8013448 <_txe_byte_allocate+0xdc>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	4313      	orrs	r3, r2
 8013418:	4a0e      	ldr	r2, [pc, #56]	@ (8013454 <_txe_byte_allocate+0xe8>)
 801341a:	4293      	cmp	r3, r2
 801341c:	d801      	bhi.n	8013422 <_txe_byte_allocate+0xb6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801341e:	2313      	movs	r3, #19
 8013420:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013424:	2b00      	cmp	r3, #0
 8013426:	d107      	bne.n	8013438 <_txe_byte_allocate+0xcc>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	687a      	ldr	r2, [r7, #4]
 801342c:	68b9      	ldr	r1, [r7, #8]
 801342e:	68f8      	ldr	r0, [r7, #12]
 8013430:	f7fc f996 	bl	800f760 <_tx_byte_allocate>
 8013434:	0003      	movs	r3, r0
 8013436:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 8013438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801343a:	0018      	movs	r0, r3
 801343c:	46bd      	mov	sp, r7
 801343e:	b00a      	add	sp, #40	@ 0x28
 8013440:	bd80      	pop	{r7, pc}
 8013442:	46c0      	nop			@ (mov r8, r8)
 8013444:	42595445 	.word	0x42595445
 8013448:	20000010 	.word	0x20000010
 801344c:	20011198 	.word	0x20011198
 8013450:	200112e0 	.word	0x200112e0
 8013454:	f0f0f0ef 	.word	0xf0f0f0ef

08013458 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b090      	sub	sp, #64	@ 0x40
 801345c:	af00      	add	r7, sp, #0
 801345e:	60f8      	str	r0, [r7, #12]
 8013460:	60b9      	str	r1, [r7, #8]
 8013462:	607a      	str	r2, [r7, #4]
 8013464:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013466:	2300      	movs	r3, #0
 8013468:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d102      	bne.n	8013476 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013470:	2302      	movs	r3, #2
 8013472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013474:	e070      	b.n	8013558 <_txe_byte_pool_create+0x100>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8013476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013478:	2b34      	cmp	r3, #52	@ 0x34
 801347a:	d002      	beq.n	8013482 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801347c:	2302      	movs	r3, #2
 801347e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013480:	e06a      	b.n	8013558 <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013482:	f3ef 8310 	mrs	r3, PRIMASK
 8013486:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013488:	b672      	cpsid	i
    return(primask_value);
 801348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801348c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801348e:	4b3a      	ldr	r3, [pc, #232]	@ (8013578 <_txe_byte_pool_create+0x120>)
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	1c5a      	adds	r2, r3, #1
 8013494:	4b38      	ldr	r3, [pc, #224]	@ (8013578 <_txe_byte_pool_create+0x120>)
 8013496:	601a      	str	r2, [r3, #0]
 8013498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801349a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801349c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801349e:	f383 8810 	msr	PRIMASK, r3
}
 80134a2:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80134a4:	4b35      	ldr	r3, [pc, #212]	@ (801357c <_txe_byte_pool_create+0x124>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80134aa:	2300      	movs	r3, #0
 80134ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80134ae:	e009      	b.n	80134c4 <_txe_byte_pool_create+0x6c>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80134b0:	68fa      	ldr	r2, [r7, #12]
 80134b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d00b      	beq.n	80134d0 <_txe_byte_pool_create+0x78>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80134b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134bc:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80134be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134c0:	3301      	adds	r3, #1
 80134c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80134c4:	4b2e      	ldr	r3, [pc, #184]	@ (8013580 <_txe_byte_pool_create+0x128>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80134ca:	429a      	cmp	r2, r3
 80134cc:	d3f0      	bcc.n	80134b0 <_txe_byte_pool_create+0x58>
 80134ce:	e000      	b.n	80134d2 <_txe_byte_pool_create+0x7a>
                break;
 80134d0:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80134d2:	f3ef 8310 	mrs	r3, PRIMASK
 80134d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80134d8:	b672      	cpsid	i
    return(primask_value);
 80134da:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80134dc:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80134de:	4b26      	ldr	r3, [pc, #152]	@ (8013578 <_txe_byte_pool_create+0x120>)
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	1e5a      	subs	r2, r3, #1
 80134e4:	4b24      	ldr	r3, [pc, #144]	@ (8013578 <_txe_byte_pool_create+0x120>)
 80134e6:	601a      	str	r2, [r3, #0]
 80134e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ea:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80134ec:	6a3b      	ldr	r3, [r7, #32]
 80134ee:	f383 8810 	msr	PRIMASK, r3
}
 80134f2:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80134f4:	f7ff f8f6 	bl	80126e4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80134f8:	68fa      	ldr	r2, [r7, #12]
 80134fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d102      	bne.n	8013506 <_txe_byte_pool_create+0xae>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8013500:	2302      	movs	r3, #2
 8013502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013504:	e028      	b.n	8013558 <_txe_byte_pool_create+0x100>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d102      	bne.n	8013512 <_txe_byte_pool_create+0xba>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 801350c:	2303      	movs	r3, #3
 801350e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013510:	e022      	b.n	8013558 <_txe_byte_pool_create+0x100>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8013512:	683b      	ldr	r3, [r7, #0]
 8013514:	2b63      	cmp	r3, #99	@ 0x63
 8013516:	d802      	bhi.n	801351e <_txe_byte_pool_create+0xc6>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8013518:	2305      	movs	r3, #5
 801351a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801351c:	e01c      	b.n	8013558 <_txe_byte_pool_create+0x100>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801351e:	4b19      	ldr	r3, [pc, #100]	@ (8013584 <_txe_byte_pool_create+0x12c>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013526:	4b18      	ldr	r3, [pc, #96]	@ (8013588 <_txe_byte_pool_create+0x130>)
 8013528:	429a      	cmp	r2, r3
 801352a:	d101      	bne.n	8013530 <_txe_byte_pool_create+0xd8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801352c:	2313      	movs	r3, #19
 801352e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013530:	f3ef 8305 	mrs	r3, IPSR
 8013534:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013536:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013538:	4b14      	ldr	r3, [pc, #80]	@ (801358c <_txe_byte_pool_create+0x134>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	4313      	orrs	r3, r2
 801353e:	d00b      	beq.n	8013558 <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013540:	f3ef 8305 	mrs	r3, IPSR
 8013544:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013546:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013548:	4b10      	ldr	r3, [pc, #64]	@ (801358c <_txe_byte_pool_create+0x134>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	4313      	orrs	r3, r2
 801354e:	4a10      	ldr	r2, [pc, #64]	@ (8013590 <_txe_byte_pool_create+0x138>)
 8013550:	4293      	cmp	r3, r2
 8013552:	d801      	bhi.n	8013558 <_txe_byte_pool_create+0x100>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013554:	2313      	movs	r3, #19
 8013556:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801355a:	2b00      	cmp	r3, #0
 801355c:	d107      	bne.n	801356e <_txe_byte_pool_create+0x116>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	687a      	ldr	r2, [r7, #4]
 8013562:	68b9      	ldr	r1, [r7, #8]
 8013564:	68f8      	ldr	r0, [r7, #12]
 8013566:	f7fc fa39 	bl	800f9dc <_tx_byte_pool_create>
 801356a:	0003      	movs	r3, r0
 801356c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* Return completion status.  */
    return(status);
 801356e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013570:	0018      	movs	r0, r3
 8013572:	46bd      	mov	sp, r7
 8013574:	b010      	add	sp, #64	@ 0x40
 8013576:	bd80      	pop	{r7, pc}
 8013578:	20011230 	.word	0x20011230
 801357c:	20011188 	.word	0x20011188
 8013580:	2001118c 	.word	0x2001118c
 8013584:	20011198 	.word	0x20011198
 8013588:	200112e0 	.word	0x200112e0
 801358c:	20000010 	.word	0x20000010
 8013590:	f0f0f0ef 	.word	0xf0f0f0ef

08013594 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b090      	sub	sp, #64	@ 0x40
 8013598:	af00      	add	r7, sp, #0
 801359a:	60f8      	str	r0, [r7, #12]
 801359c:	60b9      	str	r1, [r7, #8]
 801359e:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80135a0:	2300      	movs	r3, #0
 80135a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d102      	bne.n	80135b0 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80135aa:	2306      	movs	r3, #6
 80135ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135ae:	e064      	b.n	801367a <_txe_event_flags_create+0xe6>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	2b24      	cmp	r3, #36	@ 0x24
 80135b4:	d002      	beq.n	80135bc <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80135b6:	2306      	movs	r3, #6
 80135b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135ba:	e05e      	b.n	801367a <_txe_event_flags_create+0xe6>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80135bc:	f3ef 8310 	mrs	r3, PRIMASK
 80135c0:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 80135c2:	b672      	cpsid	i
    return(primask_value);
 80135c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80135c6:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80135c8:	4b34      	ldr	r3, [pc, #208]	@ (801369c <_txe_event_flags_create+0x108>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	1c5a      	adds	r2, r3, #1
 80135ce:	4b33      	ldr	r3, [pc, #204]	@ (801369c <_txe_event_flags_create+0x108>)
 80135d0:	601a      	str	r2, [r3, #0]
 80135d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80135d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135d8:	f383 8810 	msr	PRIMASK, r3
}
 80135dc:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 80135de:	4b30      	ldr	r3, [pc, #192]	@ (80136a0 <_txe_event_flags_create+0x10c>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 80135e4:	2300      	movs	r3, #0
 80135e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80135e8:	e009      	b.n	80135fe <_txe_event_flags_create+0x6a>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 80135ea:	68fa      	ldr	r2, [r7, #12]
 80135ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135ee:	429a      	cmp	r2, r3
 80135f0:	d00b      	beq.n	801360a <_txe_event_flags_create+0x76>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 80135f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135f4:	699b      	ldr	r3, [r3, #24]
 80135f6:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 80135f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135fa:	3301      	adds	r3, #1
 80135fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80135fe:	4b29      	ldr	r3, [pc, #164]	@ (80136a4 <_txe_event_flags_create+0x110>)
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013604:	429a      	cmp	r2, r3
 8013606:	d3f0      	bcc.n	80135ea <_txe_event_flags_create+0x56>
 8013608:	e000      	b.n	801360c <_txe_event_flags_create+0x78>
                break;
 801360a:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801360c:	f3ef 8310 	mrs	r3, PRIMASK
 8013610:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013612:	b672      	cpsid	i
    return(primask_value);
 8013614:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013616:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013618:	4b20      	ldr	r3, [pc, #128]	@ (801369c <_txe_event_flags_create+0x108>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	1e5a      	subs	r2, r3, #1
 801361e:	4b1f      	ldr	r3, [pc, #124]	@ (801369c <_txe_event_flags_create+0x108>)
 8013620:	601a      	str	r2, [r3, #0]
 8013622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013624:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013626:	6a3b      	ldr	r3, [r7, #32]
 8013628:	f383 8810 	msr	PRIMASK, r3
}
 801362c:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801362e:	f7ff f859 	bl	80126e4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 8013632:	68fa      	ldr	r2, [r7, #12]
 8013634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013636:	429a      	cmp	r2, r3
 8013638:	d102      	bne.n	8013640 <_txe_event_flags_create+0xac>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 801363a:	2306      	movs	r3, #6
 801363c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801363e:	e01c      	b.n	801367a <_txe_event_flags_create+0xe6>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013640:	4b19      	ldr	r3, [pc, #100]	@ (80136a8 <_txe_event_flags_create+0x114>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013648:	4b18      	ldr	r3, [pc, #96]	@ (80136ac <_txe_event_flags_create+0x118>)
 801364a:	429a      	cmp	r2, r3
 801364c:	d101      	bne.n	8013652 <_txe_event_flags_create+0xbe>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801364e:	2313      	movs	r3, #19
 8013650:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013652:	f3ef 8305 	mrs	r3, IPSR
 8013656:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013658:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801365a:	4b15      	ldr	r3, [pc, #84]	@ (80136b0 <_txe_event_flags_create+0x11c>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	4313      	orrs	r3, r2
 8013660:	d00b      	beq.n	801367a <_txe_event_flags_create+0xe6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013662:	f3ef 8305 	mrs	r3, IPSR
 8013666:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013668:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801366a:	4b11      	ldr	r3, [pc, #68]	@ (80136b0 <_txe_event_flags_create+0x11c>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	4313      	orrs	r3, r2
 8013670:	4a10      	ldr	r2, [pc, #64]	@ (80136b4 <_txe_event_flags_create+0x120>)
 8013672:	4293      	cmp	r3, r2
 8013674:	d801      	bhi.n	801367a <_txe_event_flags_create+0xe6>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013676:	2313      	movs	r3, #19
 8013678:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801367a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801367c:	2b00      	cmp	r3, #0
 801367e:	d107      	bne.n	8013690 <_txe_event_flags_create+0xfc>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 8013680:	68ba      	ldr	r2, [r7, #8]
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	0011      	movs	r1, r2
 8013686:	0018      	movs	r0, r3
 8013688:	f7fc fbda 	bl	800fe40 <_tx_event_flags_create>
 801368c:	0003      	movs	r3, r0
 801368e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* Return completion status.  */
    return(status);
 8013690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013692:	0018      	movs	r0, r3
 8013694:	46bd      	mov	sp, r7
 8013696:	b010      	add	sp, #64	@ 0x40
 8013698:	bd80      	pop	{r7, pc}
 801369a:	46c0      	nop			@ (mov r8, r8)
 801369c:	20011230 	.word	0x20011230
 80136a0:	20011170 	.word	0x20011170
 80136a4:	20011174 	.word	0x20011174
 80136a8:	20011198 	.word	0x20011198
 80136ac:	200112e0 	.word	0x200112e0
 80136b0:	20000010 	.word	0x20000010
 80136b4:	f0f0f0ef 	.word	0xf0f0f0ef

080136b8 <_txe_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b086      	sub	sp, #24
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 80136c0:	2300      	movs	r3, #0
 80136c2:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d102      	bne.n	80136d0 <_txe_event_flags_delete+0x18>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80136ca:	2306      	movs	r3, #6
 80136cc:	617b      	str	r3, [r7, #20]
 80136ce:	e024      	b.n	801371a <_txe_event_flags_delete+0x62>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	4a13      	ldr	r2, [pc, #76]	@ (8013724 <_txe_event_flags_delete+0x6c>)
 80136d6:	4293      	cmp	r3, r2
 80136d8:	d002      	beq.n	80136e0 <_txe_event_flags_delete+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80136da:	2306      	movs	r3, #6
 80136dc:	617b      	str	r3, [r7, #20]
 80136de:	e01c      	b.n	801371a <_txe_event_flags_delete+0x62>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80136e0:	f3ef 8305 	mrs	r3, IPSR
 80136e4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80136e6:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80136e8:	4b0f      	ldr	r3, [pc, #60]	@ (8013728 <_txe_event_flags_delete+0x70>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	4313      	orrs	r3, r2
 80136ee:	d002      	beq.n	80136f6 <_txe_event_flags_delete+0x3e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 80136f0:	2313      	movs	r3, #19
 80136f2:	617b      	str	r3, [r7, #20]
 80136f4:	e011      	b.n	801371a <_txe_event_flags_delete+0x62>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80136f6:	4b0d      	ldr	r3, [pc, #52]	@ (801372c <_txe_event_flags_delete+0x74>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 80136fc:	693a      	ldr	r2, [r7, #16]
 80136fe:	4b0c      	ldr	r3, [pc, #48]	@ (8013730 <_txe_event_flags_delete+0x78>)
 8013700:	429a      	cmp	r2, r3
 8013702:	d101      	bne.n	8013708 <_txe_event_flags_delete+0x50>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013704:	2313      	movs	r3, #19
 8013706:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8013708:	697b      	ldr	r3, [r7, #20]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d105      	bne.n	801371a <_txe_event_flags_delete+0x62>
        {
#endif

            /* Call actual event flag group delete function.  */
            status =  _tx_event_flags_delete(group_ptr);
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	0018      	movs	r0, r3
 8013712:	f7fc fbf5 	bl	800ff00 <_tx_event_flags_delete>
 8013716:	0003      	movs	r3, r0
 8013718:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 801371a:	697b      	ldr	r3, [r7, #20]
}
 801371c:	0018      	movs	r0, r3
 801371e:	46bd      	mov	sp, r7
 8013720:	b006      	add	sp, #24
 8013722:	bd80      	pop	{r7, pc}
 8013724:	4456444e 	.word	0x4456444e
 8013728:	20000010 	.word	0x20000010
 801372c:	20011198 	.word	0x20011198
 8013730:	200112e0 	.word	0x200112e0

08013734 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8013734:	b590      	push	{r4, r7, lr}
 8013736:	b08b      	sub	sp, #44	@ 0x2c
 8013738:	af02      	add	r7, sp, #8
 801373a:	60f8      	str	r0, [r7, #12]
 801373c:	60b9      	str	r1, [r7, #8]
 801373e:	607a      	str	r2, [r7, #4]
 8013740:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013742:	2300      	movs	r3, #0
 8013744:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d102      	bne.n	8013752 <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801374c:	2306      	movs	r3, #6
 801374e:	61fb      	str	r3, [r7, #28]
 8013750:	e024      	b.n	801379c <_txe_event_flags_get+0x68>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	4a1f      	ldr	r2, [pc, #124]	@ (80137d4 <_txe_event_flags_get+0xa0>)
 8013758:	4293      	cmp	r3, r2
 801375a:	d002      	beq.n	8013762 <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801375c:	2306      	movs	r3, #6
 801375e:	61fb      	str	r3, [r7, #28]
 8013760:	e01c      	b.n	801379c <_txe_event_flags_get+0x68>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 8013762:	683b      	ldr	r3, [r7, #0]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d102      	bne.n	801376e <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8013768:	2303      	movs	r3, #3
 801376a:	61fb      	str	r3, [r7, #28]
 801376c:	e016      	b.n	801379c <_txe_event_flags_get+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013770:	2b00      	cmp	r3, #0
 8013772:	d013      	beq.n	801379c <_txe_event_flags_get+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013774:	f3ef 8305 	mrs	r3, IPSR
 8013778:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801377a:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801377c:	4b16      	ldr	r3, [pc, #88]	@ (80137d8 <_txe_event_flags_get+0xa4>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	4313      	orrs	r3, r2
 8013782:	d002      	beq.n	801378a <_txe_event_flags_get+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013784:	2304      	movs	r3, #4
 8013786:	61fb      	str	r3, [r7, #28]
 8013788:	e008      	b.n	801379c <_txe_event_flags_get+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801378a:	4b14      	ldr	r3, [pc, #80]	@ (80137dc <_txe_event_flags_get+0xa8>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8013790:	69ba      	ldr	r2, [r7, #24]
 8013792:	4b13      	ldr	r3, [pc, #76]	@ (80137e0 <_txe_event_flags_get+0xac>)
 8013794:	429a      	cmp	r2, r3
 8013796:	d101      	bne.n	801379c <_txe_event_flags_get+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8013798:	2304      	movs	r3, #4
 801379a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 801379c:	69fb      	ldr	r3, [r7, #28]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d104      	bne.n	80137ac <_txe_event_flags_get+0x78>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2b03      	cmp	r3, #3
 80137a6:	d901      	bls.n	80137ac <_txe_event_flags_get+0x78>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 80137a8:	2308      	movs	r3, #8
 80137aa:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80137ac:	69fb      	ldr	r3, [r7, #28]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d10a      	bne.n	80137c8 <_txe_event_flags_get+0x94>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 80137b2:	683c      	ldr	r4, [r7, #0]
 80137b4:	687a      	ldr	r2, [r7, #4]
 80137b6:	68b9      	ldr	r1, [r7, #8]
 80137b8:	68f8      	ldr	r0, [r7, #12]
 80137ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137bc:	9300      	str	r3, [sp, #0]
 80137be:	0023      	movs	r3, r4
 80137c0:	f7fc fc2a 	bl	8010018 <_tx_event_flags_get>
 80137c4:	0003      	movs	r3, r0
 80137c6:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80137c8:	69fb      	ldr	r3, [r7, #28]
}
 80137ca:	0018      	movs	r0, r3
 80137cc:	46bd      	mov	sp, r7
 80137ce:	b009      	add	sp, #36	@ 0x24
 80137d0:	bd90      	pop	{r4, r7, pc}
 80137d2:	46c0      	nop			@ (mov r8, r8)
 80137d4:	4456444e 	.word	0x4456444e
 80137d8:	20000010 	.word	0x20000010
 80137dc:	20011198 	.word	0x20011198
 80137e0:	200112e0 	.word	0x200112e0

080137e4 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b086      	sub	sp, #24
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	60f8      	str	r0, [r7, #12]
 80137ec:	60b9      	str	r1, [r7, #8]
 80137ee:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80137f0:	2300      	movs	r3, #0
 80137f2:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d102      	bne.n	8013800 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80137fa:	2306      	movs	r3, #6
 80137fc:	617b      	str	r3, [r7, #20]
 80137fe:	e00f      	b.n	8013820 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	4a0e      	ldr	r2, [pc, #56]	@ (8013840 <_txe_event_flags_set+0x5c>)
 8013806:	4293      	cmp	r3, r2
 8013808:	d002      	beq.n	8013810 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801380a:	2306      	movs	r3, #6
 801380c:	617b      	str	r3, [r7, #20]
 801380e:	e007      	b.n	8013820 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	2b02      	cmp	r3, #2
 8013814:	d004      	beq.n	8013820 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d001      	beq.n	8013820 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 801381c:	2308      	movs	r3, #8
 801381e:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d107      	bne.n	8013836 <_txe_event_flags_set+0x52>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 8013826:	687a      	ldr	r2, [r7, #4]
 8013828:	68b9      	ldr	r1, [r7, #8]
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	0018      	movs	r0, r3
 801382e:	f7fc fcd3 	bl	80101d8 <_tx_event_flags_set>
 8013832:	0003      	movs	r3, r0
 8013834:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8013836:	697b      	ldr	r3, [r7, #20]
}
 8013838:	0018      	movs	r0, r3
 801383a:	46bd      	mov	sp, r7
 801383c:	b006      	add	sp, #24
 801383e:	bd80      	pop	{r7, pc}
 8013840:	4456444e 	.word	0x4456444e

08013844 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b090      	sub	sp, #64	@ 0x40
 8013848:	af00      	add	r7, sp, #0
 801384a:	60f8      	str	r0, [r7, #12]
 801384c:	60b9      	str	r1, [r7, #8]
 801384e:	607a      	str	r2, [r7, #4]
 8013850:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013852:	2300      	movs	r3, #0
 8013854:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d102      	bne.n	8013862 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 801385c:	231c      	movs	r3, #28
 801385e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013860:	e04f      	b.n	8013902 <_txe_mutex_create+0xbe>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	2b34      	cmp	r3, #52	@ 0x34
 8013866:	d002      	beq.n	801386e <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013868:	231c      	movs	r3, #28
 801386a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801386c:	e049      	b.n	8013902 <_txe_mutex_create+0xbe>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801386e:	f3ef 8310 	mrs	r3, PRIMASK
 8013872:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013874:	b672      	cpsid	i
    return(primask_value);
 8013876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013878:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801387a:	4b3a      	ldr	r3, [pc, #232]	@ (8013964 <_txe_mutex_create+0x120>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	1c5a      	adds	r2, r3, #1
 8013880:	4b38      	ldr	r3, [pc, #224]	@ (8013964 <_txe_mutex_create+0x120>)
 8013882:	601a      	str	r2, [r3, #0]
 8013884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013886:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801388a:	f383 8810 	msr	PRIMASK, r3
}
 801388e:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 8013890:	4b35      	ldr	r3, [pc, #212]	@ (8013968 <_txe_mutex_create+0x124>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8013896:	2300      	movs	r3, #0
 8013898:	63bb      	str	r3, [r7, #56]	@ 0x38
 801389a:	e009      	b.n	80138b0 <_txe_mutex_create+0x6c>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 801389c:	68fa      	ldr	r2, [r7, #12]
 801389e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138a0:	429a      	cmp	r2, r3
 80138a2:	d00b      	beq.n	80138bc <_txe_mutex_create+0x78>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 80138a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138a6:	6a1b      	ldr	r3, [r3, #32]
 80138a8:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 80138aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138ac:	3301      	adds	r3, #1
 80138ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80138b0:	4b2e      	ldr	r3, [pc, #184]	@ (801396c <_txe_mutex_create+0x128>)
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80138b6:	429a      	cmp	r2, r3
 80138b8:	d3f0      	bcc.n	801389c <_txe_mutex_create+0x58>
 80138ba:	e000      	b.n	80138be <_txe_mutex_create+0x7a>
                break;
 80138bc:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80138be:	f3ef 8310 	mrs	r3, PRIMASK
 80138c2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80138c4:	b672      	cpsid	i
    return(primask_value);
 80138c6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80138c8:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80138ca:	4b26      	ldr	r3, [pc, #152]	@ (8013964 <_txe_mutex_create+0x120>)
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	1e5a      	subs	r2, r3, #1
 80138d0:	4b24      	ldr	r3, [pc, #144]	@ (8013964 <_txe_mutex_create+0x120>)
 80138d2:	601a      	str	r2, [r3, #0]
 80138d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138d6:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80138d8:	6a3b      	ldr	r3, [r7, #32]
 80138da:	f383 8810 	msr	PRIMASK, r3
}
 80138de:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80138e0:	f7fe ff00 	bl	80126e4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 80138e4:	68fa      	ldr	r2, [r7, #12]
 80138e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138e8:	429a      	cmp	r2, r3
 80138ea:	d102      	bne.n	80138f2 <_txe_mutex_create+0xae>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 80138ec:	231c      	movs	r3, #28
 80138ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138f0:	e007      	b.n	8013902 <_txe_mutex_create+0xbe>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	2b01      	cmp	r3, #1
 80138f6:	d004      	beq.n	8013902 <_txe_mutex_create+0xbe>
            {

                if (inherit != TX_NO_INHERIT)
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d001      	beq.n	8013902 <_txe_mutex_create+0xbe>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 80138fe:	231f      	movs	r3, #31
 8013900:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013904:	2b00      	cmp	r3, #0
 8013906:	d11c      	bne.n	8013942 <_txe_mutex_create+0xfe>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013908:	4b19      	ldr	r3, [pc, #100]	@ (8013970 <_txe_mutex_create+0x12c>)
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801390e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013910:	4b18      	ldr	r3, [pc, #96]	@ (8013974 <_txe_mutex_create+0x130>)
 8013912:	429a      	cmp	r2, r3
 8013914:	d101      	bne.n	801391a <_txe_mutex_create+0xd6>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013916:	2313      	movs	r3, #19
 8013918:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801391a:	f3ef 8305 	mrs	r3, IPSR
 801391e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013920:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013922:	4b15      	ldr	r3, [pc, #84]	@ (8013978 <_txe_mutex_create+0x134>)
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	4313      	orrs	r3, r2
 8013928:	d00b      	beq.n	8013942 <_txe_mutex_create+0xfe>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801392a:	f3ef 8305 	mrs	r3, IPSR
 801392e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013930:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013932:	4b11      	ldr	r3, [pc, #68]	@ (8013978 <_txe_mutex_create+0x134>)
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	4313      	orrs	r3, r2
 8013938:	4a10      	ldr	r2, [pc, #64]	@ (801397c <_txe_mutex_create+0x138>)
 801393a:	4293      	cmp	r3, r2
 801393c:	d801      	bhi.n	8013942 <_txe_mutex_create+0xfe>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801393e:	2313      	movs	r3, #19
 8013940:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013944:	2b00      	cmp	r3, #0
 8013946:	d107      	bne.n	8013958 <_txe_mutex_create+0x114>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 8013948:	687a      	ldr	r2, [r7, #4]
 801394a:	68b9      	ldr	r1, [r7, #8]
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	0018      	movs	r0, r3
 8013950:	f7fc ff7e 	bl	8010850 <_tx_mutex_create>
 8013954:	0003      	movs	r3, r0
 8013956:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* Return completion status.  */
    return(status);
 8013958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801395a:	0018      	movs	r0, r3
 801395c:	46bd      	mov	sp, r7
 801395e:	b010      	add	sp, #64	@ 0x40
 8013960:	bd80      	pop	{r7, pc}
 8013962:	46c0      	nop			@ (mov r8, r8)
 8013964:	20011230 	.word	0x20011230
 8013968:	20011178 	.word	0x20011178
 801396c:	2001117c 	.word	0x2001117c
 8013970:	20011198 	.word	0x20011198
 8013974:	200112e0 	.word	0x200112e0
 8013978:	20000010 	.word	0x20000010
 801397c:	f0f0f0ef 	.word	0xf0f0f0ef

08013980 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b088      	sub	sp, #32
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801398a:	2300      	movs	r3, #0
 801398c:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d102      	bne.n	801399a <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013994:	231c      	movs	r3, #28
 8013996:	61fb      	str	r3, [r7, #28]
 8013998:	e01e      	b.n	80139d8 <_txe_mutex_get+0x58>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	4a22      	ldr	r2, [pc, #136]	@ (8013a28 <_txe_mutex_get+0xa8>)
 80139a0:	4293      	cmp	r3, r2
 80139a2:	d002      	beq.n	80139aa <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80139a4:	231c      	movs	r3, #28
 80139a6:	61fb      	str	r3, [r7, #28]
 80139a8:	e016      	b.n	80139d8 <_txe_mutex_get+0x58>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d013      	beq.n	80139d8 <_txe_mutex_get+0x58>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80139b0:	f3ef 8305 	mrs	r3, IPSR
 80139b4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80139b6:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80139b8:	4b1c      	ldr	r3, [pc, #112]	@ (8013a2c <_txe_mutex_get+0xac>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	4313      	orrs	r3, r2
 80139be:	d002      	beq.n	80139c6 <_txe_mutex_get+0x46>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80139c0:	2304      	movs	r3, #4
 80139c2:	61fb      	str	r3, [r7, #28]
 80139c4:	e008      	b.n	80139d8 <_txe_mutex_get+0x58>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80139c6:	4b1a      	ldr	r3, [pc, #104]	@ (8013a30 <_txe_mutex_get+0xb0>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80139cc:	69ba      	ldr	r2, [r7, #24]
 80139ce:	4b19      	ldr	r3, [pc, #100]	@ (8013a34 <_txe_mutex_get+0xb4>)
 80139d0:	429a      	cmp	r2, r3
 80139d2:	d101      	bne.n	80139d8 <_txe_mutex_get+0x58>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80139d4:	2304      	movs	r3, #4
 80139d6:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80139d8:	69fb      	ldr	r3, [r7, #28]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d113      	bne.n	8013a06 <_txe_mutex_get+0x86>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80139de:	f3ef 8305 	mrs	r3, IPSR
 80139e2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80139e4:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80139e6:	4b11      	ldr	r3, [pc, #68]	@ (8013a2c <_txe_mutex_get+0xac>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	4313      	orrs	r3, r2
 80139ec:	d00b      	beq.n	8013a06 <_txe_mutex_get+0x86>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80139ee:	f3ef 8305 	mrs	r3, IPSR
 80139f2:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80139f4:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80139f6:	4b0d      	ldr	r3, [pc, #52]	@ (8013a2c <_txe_mutex_get+0xac>)
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	4313      	orrs	r3, r2
 80139fc:	4a0e      	ldr	r2, [pc, #56]	@ (8013a38 <_txe_mutex_get+0xb8>)
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d801      	bhi.n	8013a06 <_txe_mutex_get+0x86>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013a02:	2313      	movs	r3, #19
 8013a04:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013a06:	69fb      	ldr	r3, [r7, #28]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d107      	bne.n	8013a1c <_txe_mutex_get+0x9c>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 8013a0c:	683a      	ldr	r2, [r7, #0]
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	0011      	movs	r1, r2
 8013a12:	0018      	movs	r0, r3
 8013a14:	f7fc ff88 	bl	8010928 <_tx_mutex_get>
 8013a18:	0003      	movs	r3, r0
 8013a1a:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8013a1c:	69fb      	ldr	r3, [r7, #28]
}
 8013a1e:	0018      	movs	r0, r3
 8013a20:	46bd      	mov	sp, r7
 8013a22:	b008      	add	sp, #32
 8013a24:	bd80      	pop	{r7, pc}
 8013a26:	46c0      	nop			@ (mov r8, r8)
 8013a28:	4d555445 	.word	0x4d555445
 8013a2c:	20000010 	.word	0x20000010
 8013a30:	20011198 	.word	0x20011198
 8013a34:	200112e0 	.word	0x200112e0
 8013a38:	f0f0f0ef 	.word	0xf0f0f0ef

08013a3c <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b086      	sub	sp, #24
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013a44:	2300      	movs	r3, #0
 8013a46:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d102      	bne.n	8013a54 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013a4e:	231c      	movs	r3, #28
 8013a50:	617b      	str	r3, [r7, #20]
 8013a52:	e01b      	b.n	8013a8c <_txe_mutex_put+0x50>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	4a13      	ldr	r2, [pc, #76]	@ (8013aa8 <_txe_mutex_put+0x6c>)
 8013a5a:	4293      	cmp	r3, r2
 8013a5c:	d002      	beq.n	8013a64 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013a5e:	231c      	movs	r3, #28
 8013a60:	617b      	str	r3, [r7, #20]
 8013a62:	e013      	b.n	8013a8c <_txe_mutex_put+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013a64:	f3ef 8305 	mrs	r3, IPSR
 8013a68:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013a6a:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8013aac <_txe_mutex_put+0x70>)
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	4313      	orrs	r3, r2
 8013a72:	d00b      	beq.n	8013a8c <_txe_mutex_put+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013a74:	f3ef 8305 	mrs	r3, IPSR
 8013a78:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013a7a:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8013aac <_txe_mutex_put+0x70>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	4313      	orrs	r3, r2
 8013a82:	4a0b      	ldr	r2, [pc, #44]	@ (8013ab0 <_txe_mutex_put+0x74>)
 8013a84:	4293      	cmp	r3, r2
 8013a86:	d801      	bhi.n	8013a8c <_txe_mutex_put+0x50>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013a88:	2313      	movs	r3, #19
 8013a8a:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013a8c:	697b      	ldr	r3, [r7, #20]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d105      	bne.n	8013a9e <_txe_mutex_put+0x62>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	0018      	movs	r0, r3
 8013a96:	f7fd f9b7 	bl	8010e08 <_tx_mutex_put>
 8013a9a:	0003      	movs	r3, r0
 8013a9c:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8013a9e:	697b      	ldr	r3, [r7, #20]
}
 8013aa0:	0018      	movs	r0, r3
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	b006      	add	sp, #24
 8013aa6:	bd80      	pop	{r7, pc}
 8013aa8:	4d555445 	.word	0x4d555445
 8013aac:	20000010 	.word	0x20000010
 8013ab0:	f0f0f0ef 	.word	0xf0f0f0ef

08013ab4 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8013ab4:	b590      	push	{r4, r7, lr}
 8013ab6:	b093      	sub	sp, #76	@ 0x4c
 8013ab8:	af02      	add	r7, sp, #8
 8013aba:	60f8      	str	r0, [r7, #12]
 8013abc:	60b9      	str	r1, [r7, #8]
 8013abe:	607a      	str	r2, [r7, #4]
 8013ac0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d102      	bne.n	8013ad2 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8013acc:	2309      	movs	r3, #9
 8013ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013ad0:	e07e      	b.n	8013bd0 <_txe_queue_create+0x11c>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 8013ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ad4:	2b38      	cmp	r3, #56	@ 0x38
 8013ad6:	d002      	beq.n	8013ade <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8013ad8:	2309      	movs	r3, #9
 8013ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013adc:	e078      	b.n	8013bd0 <_txe_queue_create+0x11c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013ade:	f3ef 8310 	mrs	r3, PRIMASK
 8013ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013ae4:	b672      	cpsid	i
    return(primask_value);
 8013ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013ae8:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013aea:	4b43      	ldr	r3, [pc, #268]	@ (8013bf8 <_txe_queue_create+0x144>)
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	1c5a      	adds	r2, r3, #1
 8013af0:	4b41      	ldr	r3, [pc, #260]	@ (8013bf8 <_txe_queue_create+0x144>)
 8013af2:	601a      	str	r2, [r3, #0]
 8013af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013af6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013afa:	f383 8810 	msr	PRIMASK, r3
}
 8013afe:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8013b00:	4b3e      	ldr	r3, [pc, #248]	@ (8013bfc <_txe_queue_create+0x148>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8013b06:	2300      	movs	r3, #0
 8013b08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013b0a:	e009      	b.n	8013b20 <_txe_queue_create+0x6c>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 8013b0c:	68fa      	ldr	r2, [r7, #12]
 8013b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d00b      	beq.n	8013b2c <_txe_queue_create+0x78>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8013b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b18:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8013b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b1c:	3301      	adds	r3, #1
 8013b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013b20:	4b37      	ldr	r3, [pc, #220]	@ (8013c00 <_txe_queue_create+0x14c>)
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013b26:	429a      	cmp	r2, r3
 8013b28:	d3f0      	bcc.n	8013b0c <_txe_queue_create+0x58>
 8013b2a:	e000      	b.n	8013b2e <_txe_queue_create+0x7a>
                break;
 8013b2c:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8013b32:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013b34:	b672      	cpsid	i
    return(primask_value);
 8013b36:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013b38:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8013bf8 <_txe_queue_create+0x144>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	1e5a      	subs	r2, r3, #1
 8013b40:	4b2d      	ldr	r3, [pc, #180]	@ (8013bf8 <_txe_queue_create+0x144>)
 8013b42:	601a      	str	r2, [r3, #0]
 8013b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b46:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013b48:	6a3b      	ldr	r3, [r7, #32]
 8013b4a:	f383 8810 	msr	PRIMASK, r3
}
 8013b4e:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013b50:	f7fe fdc8 	bl	80126e4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8013b54:	68fa      	ldr	r2, [r7, #12]
 8013b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b58:	429a      	cmp	r2, r3
 8013b5a:	d102      	bne.n	8013b62 <_txe_queue_create+0xae>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8013b5c:	2309      	movs	r3, #9
 8013b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b60:	e036      	b.n	8013bd0 <_txe_queue_create+0x11c>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d102      	bne.n	8013b6e <_txe_queue_create+0xba>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8013b68:	2303      	movs	r3, #3
 8013b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b6c:	e030      	b.n	8013bd0 <_txe_queue_create+0x11c>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d102      	bne.n	8013b7a <_txe_queue_create+0xc6>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8013b74:	2305      	movs	r3, #5
 8013b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b78:	e02a      	b.n	8013bd0 <_txe_queue_create+0x11c>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2b10      	cmp	r3, #16
 8013b7e:	d902      	bls.n	8013b86 <_txe_queue_create+0xd2>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8013b80:	2305      	movs	r3, #5
 8013b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b84:	e024      	b.n	8013bd0 <_txe_queue_create+0x11c>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 8013b86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b88:	089b      	lsrs	r3, r3, #2
 8013b8a:	687a      	ldr	r2, [r7, #4]
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	d902      	bls.n	8013b96 <_txe_queue_create+0xe2>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 8013b90:	2305      	movs	r3, #5
 8013b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b94:	e01c      	b.n	8013bd0 <_txe_queue_create+0x11c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013b96:	4b1b      	ldr	r3, [pc, #108]	@ (8013c04 <_txe_queue_create+0x150>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013b9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8013c08 <_txe_queue_create+0x154>)
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	d101      	bne.n	8013ba8 <_txe_queue_create+0xf4>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013ba4:	2313      	movs	r3, #19
 8013ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013ba8:	f3ef 8305 	mrs	r3, IPSR
 8013bac:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013bae:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013bb0:	4b16      	ldr	r3, [pc, #88]	@ (8013c0c <_txe_queue_create+0x158>)
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	4313      	orrs	r3, r2
 8013bb6:	d00b      	beq.n	8013bd0 <_txe_queue_create+0x11c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013bb8:	f3ef 8305 	mrs	r3, IPSR
 8013bbc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013bbe:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013bc0:	4b12      	ldr	r3, [pc, #72]	@ (8013c0c <_txe_queue_create+0x158>)
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	4313      	orrs	r3, r2
 8013bc6:	4a12      	ldr	r2, [pc, #72]	@ (8013c10 <_txe_queue_create+0x15c>)
 8013bc8:	4293      	cmp	r3, r2
 8013bca:	d801      	bhi.n	8013bd0 <_txe_queue_create+0x11c>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013bcc:	2313      	movs	r3, #19
 8013bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d10a      	bne.n	8013bec <_txe_queue_create+0x138>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 8013bd6:	683c      	ldr	r4, [r7, #0]
 8013bd8:	687a      	ldr	r2, [r7, #4]
 8013bda:	68b9      	ldr	r1, [r7, #8]
 8013bdc:	68f8      	ldr	r0, [r7, #12]
 8013bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013be0:	9300      	str	r3, [sp, #0]
 8013be2:	0023      	movs	r3, r4
 8013be4:	f7fd fb78 	bl	80112d8 <_tx_queue_create>
 8013be8:	0003      	movs	r3, r0
 8013bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* Return completion status.  */
    return(status);
 8013bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013bee:	0018      	movs	r0, r3
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	b011      	add	sp, #68	@ 0x44
 8013bf4:	bd90      	pop	{r4, r7, pc}
 8013bf6:	46c0      	nop			@ (mov r8, r8)
 8013bf8:	20011230 	.word	0x20011230
 8013bfc:	20011168 	.word	0x20011168
 8013c00:	2001116c 	.word	0x2001116c
 8013c04:	20011198 	.word	0x20011198
 8013c08:	200112e0 	.word	0x200112e0
 8013c0c:	20000010 	.word	0x20000010
 8013c10:	f0f0f0ef 	.word	0xf0f0f0ef

08013c14 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b088      	sub	sp, #32
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	60f8      	str	r0, [r7, #12]
 8013c1c:	60b9      	str	r1, [r7, #8]
 8013c1e:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013c20:	2300      	movs	r3, #0
 8013c22:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d102      	bne.n	8013c30 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8013c2a:	2309      	movs	r3, #9
 8013c2c:	61fb      	str	r3, [r7, #28]
 8013c2e:	e024      	b.n	8013c7a <_txe_queue_receive+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	4a19      	ldr	r2, [pc, #100]	@ (8013c9c <_txe_queue_receive+0x88>)
 8013c36:	4293      	cmp	r3, r2
 8013c38:	d002      	beq.n	8013c40 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8013c3a:	2309      	movs	r3, #9
 8013c3c:	61fb      	str	r3, [r7, #28]
 8013c3e:	e01c      	b.n	8013c7a <_txe_queue_receive+0x66>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d102      	bne.n	8013c4c <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8013c46:	2303      	movs	r3, #3
 8013c48:	61fb      	str	r3, [r7, #28]
 8013c4a:	e016      	b.n	8013c7a <_txe_queue_receive+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d013      	beq.n	8013c7a <_txe_queue_receive+0x66>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013c52:	f3ef 8305 	mrs	r3, IPSR
 8013c56:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013c58:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013c5a:	4b11      	ldr	r3, [pc, #68]	@ (8013ca0 <_txe_queue_receive+0x8c>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	4313      	orrs	r3, r2
 8013c60:	d002      	beq.n	8013c68 <_txe_queue_receive+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013c62:	2304      	movs	r3, #4
 8013c64:	61fb      	str	r3, [r7, #28]
 8013c66:	e008      	b.n	8013c7a <_txe_queue_receive+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8013c68:	4b0e      	ldr	r3, [pc, #56]	@ (8013ca4 <_txe_queue_receive+0x90>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8013c6e:	69ba      	ldr	r2, [r7, #24]
 8013c70:	4b0d      	ldr	r3, [pc, #52]	@ (8013ca8 <_txe_queue_receive+0x94>)
 8013c72:	429a      	cmp	r2, r3
 8013c74:	d101      	bne.n	8013c7a <_txe_queue_receive+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8013c76:	2304      	movs	r3, #4
 8013c78:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013c7a:	69fb      	ldr	r3, [r7, #28]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d107      	bne.n	8013c90 <_txe_queue_receive+0x7c>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 8013c80:	687a      	ldr	r2, [r7, #4]
 8013c82:	68b9      	ldr	r1, [r7, #8]
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	0018      	movs	r0, r3
 8013c88:	f7fd fbae 	bl	80113e8 <_tx_queue_receive>
 8013c8c:	0003      	movs	r3, r0
 8013c8e:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8013c90:	69fb      	ldr	r3, [r7, #28]
}
 8013c92:	0018      	movs	r0, r3
 8013c94:	46bd      	mov	sp, r7
 8013c96:	b008      	add	sp, #32
 8013c98:	bd80      	pop	{r7, pc}
 8013c9a:	46c0      	nop			@ (mov r8, r8)
 8013c9c:	51554555 	.word	0x51554555
 8013ca0:	20000010 	.word	0x20000010
 8013ca4:	20011198 	.word	0x20011198
 8013ca8:	200112e0 	.word	0x200112e0

08013cac <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b088      	sub	sp, #32
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	60f8      	str	r0, [r7, #12]
 8013cb4:	60b9      	str	r1, [r7, #8]
 8013cb6:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d102      	bne.n	8013cc8 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8013cc2:	2309      	movs	r3, #9
 8013cc4:	61fb      	str	r3, [r7, #28]
 8013cc6:	e024      	b.n	8013d12 <_txe_queue_send+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	4a19      	ldr	r2, [pc, #100]	@ (8013d34 <_txe_queue_send+0x88>)
 8013cce:	4293      	cmp	r3, r2
 8013cd0:	d002      	beq.n	8013cd8 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8013cd2:	2309      	movs	r3, #9
 8013cd4:	61fb      	str	r3, [r7, #28]
 8013cd6:	e01c      	b.n	8013d12 <_txe_queue_send+0x66>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d102      	bne.n	8013ce4 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8013cde:	2303      	movs	r3, #3
 8013ce0:	61fb      	str	r3, [r7, #28]
 8013ce2:	e016      	b.n	8013d12 <_txe_queue_send+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d013      	beq.n	8013d12 <_txe_queue_send+0x66>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013cea:	f3ef 8305 	mrs	r3, IPSR
 8013cee:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013cf0:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013cf2:	4b11      	ldr	r3, [pc, #68]	@ (8013d38 <_txe_queue_send+0x8c>)
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	4313      	orrs	r3, r2
 8013cf8:	d002      	beq.n	8013d00 <_txe_queue_send+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013cfa:	2304      	movs	r3, #4
 8013cfc:	61fb      	str	r3, [r7, #28]
 8013cfe:	e008      	b.n	8013d12 <_txe_queue_send+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8013d00:	4b0e      	ldr	r3, [pc, #56]	@ (8013d3c <_txe_queue_send+0x90>)
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8013d06:	69ba      	ldr	r2, [r7, #24]
 8013d08:	4b0d      	ldr	r3, [pc, #52]	@ (8013d40 <_txe_queue_send+0x94>)
 8013d0a:	429a      	cmp	r2, r3
 8013d0c:	d101      	bne.n	8013d12 <_txe_queue_send+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8013d0e:	2304      	movs	r3, #4
 8013d10:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013d12:	69fb      	ldr	r3, [r7, #28]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d107      	bne.n	8013d28 <_txe_queue_send+0x7c>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 8013d18:	687a      	ldr	r2, [r7, #4]
 8013d1a:	68b9      	ldr	r1, [r7, #8]
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	0018      	movs	r0, r3
 8013d20:	f7fd fd2a 	bl	8011778 <_tx_queue_send>
 8013d24:	0003      	movs	r3, r0
 8013d26:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8013d28:	69fb      	ldr	r3, [r7, #28]
}
 8013d2a:	0018      	movs	r0, r3
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	b008      	add	sp, #32
 8013d30:	bd80      	pop	{r7, pc}
 8013d32:	46c0      	nop			@ (mov r8, r8)
 8013d34:	51554555 	.word	0x51554555
 8013d38:	20000010 	.word	0x20000010
 8013d3c:	20011198 	.word	0x20011198
 8013d40:	200112e0 	.word	0x200112e0

08013d44 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b090      	sub	sp, #64	@ 0x40
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	60f8      	str	r0, [r7, #12]
 8013d4c:	60b9      	str	r1, [r7, #8]
 8013d4e:	607a      	str	r2, [r7, #4]
 8013d50:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013d52:	2300      	movs	r3, #0
 8013d54:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d102      	bne.n	8013d62 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013d5c:	230c      	movs	r3, #12
 8013d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013d60:	e050      	b.n	8013e04 <_txe_semaphore_create+0xc0>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	2b1c      	cmp	r3, #28
 8013d66:	d002      	beq.n	8013d6e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013d68:	230c      	movs	r3, #12
 8013d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013d6c:	e04a      	b.n	8013e04 <_txe_semaphore_create+0xc0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8013d72:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013d74:	b672      	cpsid	i
    return(primask_value);
 8013d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013d78:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013d7a:	4b36      	ldr	r3, [pc, #216]	@ (8013e54 <_txe_semaphore_create+0x110>)
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	1c5a      	adds	r2, r3, #1
 8013d80:	4b34      	ldr	r3, [pc, #208]	@ (8013e54 <_txe_semaphore_create+0x110>)
 8013d82:	601a      	str	r2, [r3, #0]
 8013d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d86:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d8a:	f383 8810 	msr	PRIMASK, r3
}
 8013d8e:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8013d90:	4b31      	ldr	r3, [pc, #196]	@ (8013e58 <_txe_semaphore_create+0x114>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8013d96:	2300      	movs	r3, #0
 8013d98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013d9a:	e009      	b.n	8013db0 <_txe_semaphore_create+0x6c>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8013d9c:	68fa      	ldr	r2, [r7, #12]
 8013d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d00b      	beq.n	8013dbc <_txe_semaphore_create+0x78>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8013da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013da6:	695b      	ldr	r3, [r3, #20]
 8013da8:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8013daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dac:	3301      	adds	r3, #1
 8013dae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013db0:	4b2a      	ldr	r3, [pc, #168]	@ (8013e5c <_txe_semaphore_create+0x118>)
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d3f0      	bcc.n	8013d9c <_txe_semaphore_create+0x58>
 8013dba:	e000      	b.n	8013dbe <_txe_semaphore_create+0x7a>
                break;
 8013dbc:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8013dc2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013dc4:	b672      	cpsid	i
    return(primask_value);
 8013dc6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013dc8:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013dca:	4b22      	ldr	r3, [pc, #136]	@ (8013e54 <_txe_semaphore_create+0x110>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	1e5a      	subs	r2, r3, #1
 8013dd0:	4b20      	ldr	r3, [pc, #128]	@ (8013e54 <_txe_semaphore_create+0x110>)
 8013dd2:	601a      	str	r2, [r3, #0]
 8013dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dd6:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013dd8:	6a3b      	ldr	r3, [r7, #32]
 8013dda:	f383 8810 	msr	PRIMASK, r3
}
 8013dde:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013de0:	f7fe fc80 	bl	80126e4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8013de4:	68fa      	ldr	r2, [r7, #12]
 8013de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013de8:	429a      	cmp	r2, r3
 8013dea:	d102      	bne.n	8013df2 <_txe_semaphore_create+0xae>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8013dec:	230c      	movs	r3, #12
 8013dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013df0:	e008      	b.n	8013e04 <_txe_semaphore_create+0xc0>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013df2:	4b1b      	ldr	r3, [pc, #108]	@ (8013e60 <_txe_semaphore_create+0x11c>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8013e64 <_txe_semaphore_create+0x120>)
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d101      	bne.n	8013e04 <_txe_semaphore_create+0xc0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013e00:	2313      	movs	r3, #19
 8013e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d113      	bne.n	8013e32 <_txe_semaphore_create+0xee>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013e0a:	f3ef 8305 	mrs	r3, IPSR
 8013e0e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013e10:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013e12:	4b15      	ldr	r3, [pc, #84]	@ (8013e68 <_txe_semaphore_create+0x124>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	4313      	orrs	r3, r2
 8013e18:	d00b      	beq.n	8013e32 <_txe_semaphore_create+0xee>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013e1a:	f3ef 8305 	mrs	r3, IPSR
 8013e1e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013e20:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013e22:	4b11      	ldr	r3, [pc, #68]	@ (8013e68 <_txe_semaphore_create+0x124>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	4313      	orrs	r3, r2
 8013e28:	4a10      	ldr	r2, [pc, #64]	@ (8013e6c <_txe_semaphore_create+0x128>)
 8013e2a:	4293      	cmp	r3, r2
 8013e2c:	d801      	bhi.n	8013e32 <_txe_semaphore_create+0xee>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013e2e:	2313      	movs	r3, #19
 8013e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d107      	bne.n	8013e48 <_txe_semaphore_create+0x104>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8013e38:	687a      	ldr	r2, [r7, #4]
 8013e3a:	68b9      	ldr	r1, [r7, #8]
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	0018      	movs	r0, r3
 8013e40:	f7fd fe3e 	bl	8011ac0 <_tx_semaphore_create>
 8013e44:	0003      	movs	r3, r0
 8013e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* Return completion status.  */
    return(status);
 8013e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013e4a:	0018      	movs	r0, r3
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	b010      	add	sp, #64	@ 0x40
 8013e50:	bd80      	pop	{r7, pc}
 8013e52:	46c0      	nop			@ (mov r8, r8)
 8013e54:	20011230 	.word	0x20011230
 8013e58:	20011160 	.word	0x20011160
 8013e5c:	20011164 	.word	0x20011164
 8013e60:	20011198 	.word	0x20011198
 8013e64:	200112e0 	.word	0x200112e0
 8013e68:	20000010 	.word	0x20000010
 8013e6c:	f0f0f0ef 	.word	0xf0f0f0ef

08013e70 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b086      	sub	sp, #24
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d102      	bne.n	8013e88 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013e82:	230c      	movs	r3, #12
 8013e84:	617b      	str	r3, [r7, #20]
 8013e86:	e01b      	b.n	8013ec0 <_txe_semaphore_delete+0x50>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	4a13      	ldr	r2, [pc, #76]	@ (8013edc <_txe_semaphore_delete+0x6c>)
 8013e8e:	4293      	cmp	r3, r2
 8013e90:	d002      	beq.n	8013e98 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013e92:	230c      	movs	r3, #12
 8013e94:	617b      	str	r3, [r7, #20]
 8013e96:	e013      	b.n	8013ec0 <_txe_semaphore_delete+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013e98:	f3ef 8305 	mrs	r3, IPSR
 8013e9c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013e9e:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8013ee0 <_txe_semaphore_delete+0x70>)
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	4313      	orrs	r3, r2
 8013ea6:	d002      	beq.n	8013eae <_txe_semaphore_delete+0x3e>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013ea8:	2313      	movs	r3, #19
 8013eaa:	617b      	str	r3, [r7, #20]
 8013eac:	e008      	b.n	8013ec0 <_txe_semaphore_delete+0x50>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013eae:	4b0d      	ldr	r3, [pc, #52]	@ (8013ee4 <_txe_semaphore_delete+0x74>)
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 8013eb4:	693a      	ldr	r2, [r7, #16]
 8013eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8013ee8 <_txe_semaphore_delete+0x78>)
 8013eb8:	429a      	cmp	r2, r3
 8013eba:	d101      	bne.n	8013ec0 <_txe_semaphore_delete+0x50>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013ebc:	2313      	movs	r3, #19
 8013ebe:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013ec0:	697b      	ldr	r3, [r7, #20]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d105      	bne.n	8013ed2 <_txe_semaphore_delete+0x62>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	0018      	movs	r0, r3
 8013eca:	f7fd fe5d 	bl	8011b88 <_tx_semaphore_delete>
 8013ece:	0003      	movs	r3, r0
 8013ed0:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8013ed2:	697b      	ldr	r3, [r7, #20]
}
 8013ed4:	0018      	movs	r0, r3
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	b006      	add	sp, #24
 8013eda:	bd80      	pop	{r7, pc}
 8013edc:	53454d41 	.word	0x53454d41
 8013ee0:	20000010 	.word	0x20000010
 8013ee4:	20011198 	.word	0x20011198
 8013ee8:	200112e0 	.word	0x200112e0

08013eec <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b086      	sub	sp, #24
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d102      	bne.n	8013f06 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013f00:	230c      	movs	r3, #12
 8013f02:	617b      	str	r3, [r7, #20]
 8013f04:	e01e      	b.n	8013f44 <_txe_semaphore_get+0x58>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	4a16      	ldr	r2, [pc, #88]	@ (8013f64 <_txe_semaphore_get+0x78>)
 8013f0c:	4293      	cmp	r3, r2
 8013f0e:	d002      	beq.n	8013f16 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013f10:	230c      	movs	r3, #12
 8013f12:	617b      	str	r3, [r7, #20]
 8013f14:	e016      	b.n	8013f44 <_txe_semaphore_get+0x58>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d013      	beq.n	8013f44 <_txe_semaphore_get+0x58>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013f1c:	f3ef 8305 	mrs	r3, IPSR
 8013f20:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013f22:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013f24:	4b10      	ldr	r3, [pc, #64]	@ (8013f68 <_txe_semaphore_get+0x7c>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	4313      	orrs	r3, r2
 8013f2a:	d002      	beq.n	8013f32 <_txe_semaphore_get+0x46>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013f2c:	2304      	movs	r3, #4
 8013f2e:	617b      	str	r3, [r7, #20]
 8013f30:	e008      	b.n	8013f44 <_txe_semaphore_get+0x58>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8013f32:	4b0e      	ldr	r3, [pc, #56]	@ (8013f6c <_txe_semaphore_get+0x80>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8013f38:	693a      	ldr	r2, [r7, #16]
 8013f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8013f70 <_txe_semaphore_get+0x84>)
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d101      	bne.n	8013f44 <_txe_semaphore_get+0x58>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8013f40:	2304      	movs	r3, #4
 8013f42:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013f44:	697b      	ldr	r3, [r7, #20]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d107      	bne.n	8013f5a <_txe_semaphore_get+0x6e>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8013f4a:	683a      	ldr	r2, [r7, #0]
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	0011      	movs	r1, r2
 8013f50:	0018      	movs	r0, r3
 8013f52:	f7fd fea5 	bl	8011ca0 <_tx_semaphore_get>
 8013f56:	0003      	movs	r3, r0
 8013f58:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8013f5a:	697b      	ldr	r3, [r7, #20]
}
 8013f5c:	0018      	movs	r0, r3
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	b006      	add	sp, #24
 8013f62:	bd80      	pop	{r7, pc}
 8013f64:	53454d41 	.word	0x53454d41
 8013f68:	20000010 	.word	0x20000010
 8013f6c:	20011198 	.word	0x20011198
 8013f70:	200112e0 	.word	0x200112e0

08013f74 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b084      	sub	sp, #16
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d102      	bne.n	8013f88 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013f82:	230c      	movs	r3, #12
 8013f84:	60fb      	str	r3, [r7, #12]
 8013f86:	e00d      	b.n	8013fa4 <_txe_semaphore_put+0x30>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	4a08      	ldr	r2, [pc, #32]	@ (8013fb0 <_txe_semaphore_put+0x3c>)
 8013f8e:	4293      	cmp	r3, r2
 8013f90:	d002      	beq.n	8013f98 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013f92:	230c      	movs	r3, #12
 8013f94:	60fb      	str	r3, [r7, #12]
 8013f96:	e005      	b.n	8013fa4 <_txe_semaphore_put+0x30>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	0018      	movs	r0, r3
 8013f9c:	f7fd ff12 	bl	8011dc4 <_tx_semaphore_put>
 8013fa0:	0003      	movs	r3, r0
 8013fa2:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013fa4:	68fb      	ldr	r3, [r7, #12]
}
 8013fa6:	0018      	movs	r0, r3
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	b004      	add	sp, #16
 8013fac:	bd80      	pop	{r7, pc}
 8013fae:	46c0      	nop			@ (mov r8, r8)
 8013fb0:	53454d41 	.word	0x53454d41

08013fb4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8013fb4:	b590      	push	{r4, r7, lr}
 8013fb6:	b099      	sub	sp, #100	@ 0x64
 8013fb8:	af06      	add	r7, sp, #24
 8013fba:	60f8      	str	r0, [r7, #12]
 8013fbc:	60b9      	str	r1, [r7, #8]
 8013fbe:	607a      	str	r2, [r7, #4]
 8013fc0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d102      	bne.n	8013fd2 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013fcc:	230e      	movs	r3, #14
 8013fce:	647b      	str	r3, [r7, #68]	@ 0x44
 8013fd0:	e0b6      	b.n	8014140 <_txe_thread_create+0x18c>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8013fd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013fd4:	2bb0      	cmp	r3, #176	@ 0xb0
 8013fd6:	d002      	beq.n	8013fde <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013fd8:	230e      	movs	r3, #14
 8013fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8013fdc:	e0b0      	b.n	8014140 <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013fde:	f3ef 8310 	mrs	r3, PRIMASK
 8013fe2:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013fe4:	b672      	cpsid	i
    return(primask_value);
 8013fe6:	6a3b      	ldr	r3, [r7, #32]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013fe8:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013fea:	4b64      	ldr	r3, [pc, #400]	@ (801417c <_txe_thread_create+0x1c8>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	1c5a      	adds	r2, r3, #1
 8013ff0:	4b62      	ldr	r3, [pc, #392]	@ (801417c <_txe_thread_create+0x1c8>)
 8013ff2:	601a      	str	r2, [r3, #0]
 8013ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ffa:	f383 8810 	msr	PRIMASK, r3
}
 8013ffe:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8014000:	2300      	movs	r3, #0
 8014002:	643b      	str	r3, [r7, #64]	@ 0x40
        next_thread =  _tx_thread_created_ptr;
 8014004:	4b5e      	ldr	r3, [pc, #376]	@ (8014180 <_txe_thread_create+0x1cc>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801400a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801400c:	633b      	str	r3, [r7, #48]	@ 0x30
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 801400e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014010:	3b01      	subs	r3, #1
 8014012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014014:	18d3      	adds	r3, r2, r3
 8014016:	633b      	str	r3, [r7, #48]	@ 0x30
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8014018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801401a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801401c:	2300      	movs	r3, #0
 801401e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014020:	e02b      	b.n	801407a <_txe_thread_create+0xc6>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8014022:	68fa      	ldr	r2, [r7, #12]
 8014024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014026:	429a      	cmp	r2, r3
 8014028:	d101      	bne.n	801402e <_txe_thread_create+0x7a>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 801402a:	2301      	movs	r3, #1
 801402c:	643b      	str	r3, [r7, #64]	@ 0x40
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 801402e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014030:	2b01      	cmp	r3, #1
 8014032:	d028      	beq.n	8014086 <_txe_thread_create+0xd2>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8014034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014036:	68db      	ldr	r3, [r3, #12]
 8014038:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801403a:	429a      	cmp	r2, r3
 801403c:	d308      	bcc.n	8014050 <_txe_thread_create+0x9c>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 801403e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014040:	691b      	ldr	r3, [r3, #16]
 8014042:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014044:	429a      	cmp	r2, r3
 8014046:	d203      	bcs.n	8014050 <_txe_thread_create+0x9c>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8014048:	2300      	movs	r3, #0
 801404a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801404c:	2301      	movs	r3, #1
 801404e:	643b      	str	r3, [r7, #64]	@ 0x40
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8014050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014052:	68db      	ldr	r3, [r3, #12]
 8014054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014056:	429a      	cmp	r2, r3
 8014058:	d308      	bcc.n	801406c <_txe_thread_create+0xb8>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801405a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801405c:	691b      	ldr	r3, [r3, #16]
 801405e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014060:	429a      	cmp	r2, r3
 8014062:	d203      	bcs.n	801406c <_txe_thread_create+0xb8>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8014064:	2300      	movs	r3, #0
 8014066:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8014068:	2301      	movs	r3, #1
 801406a:	643b      	str	r3, [r7, #64]	@ 0x40
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 801406c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801406e:	2288      	movs	r2, #136	@ 0x88
 8014070:	589b      	ldr	r3, [r3, r2]
 8014072:	63bb      	str	r3, [r7, #56]	@ 0x38
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8014074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014076:	3301      	adds	r3, #1
 8014078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801407a:	4b42      	ldr	r3, [pc, #264]	@ (8014184 <_txe_thread_create+0x1d0>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014080:	429a      	cmp	r2, r3
 8014082:	d3ce      	bcc.n	8014022 <_txe_thread_create+0x6e>
 8014084:	e000      	b.n	8014088 <_txe_thread_create+0xd4>
                break;
 8014086:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8014088:	f3ef 8310 	mrs	r3, PRIMASK
 801408c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801408e:	b672      	cpsid	i
    return(primask_value);
 8014090:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8014092:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8014094:	4b39      	ldr	r3, [pc, #228]	@ (801417c <_txe_thread_create+0x1c8>)
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	1e5a      	subs	r2, r3, #1
 801409a:	4b38      	ldr	r3, [pc, #224]	@ (801417c <_txe_thread_create+0x1c8>)
 801409c:	601a      	str	r2, [r3, #0]
 801409e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80140a0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80140a2:	69fb      	ldr	r3, [r7, #28]
 80140a4:	f383 8810 	msr	PRIMASK, r3
}
 80140a8:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80140aa:	f7fe fb1b 	bl	80126e4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80140ae:	68fa      	ldr	r2, [r7, #12]
 80140b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140b2:	429a      	cmp	r2, r3
 80140b4:	d102      	bne.n	80140bc <_txe_thread_create+0x108>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80140b6:	230e      	movs	r3, #14
 80140b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80140ba:	e041      	b.n	8014140 <_txe_thread_create+0x18c>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80140bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d102      	bne.n	80140c8 <_txe_thread_create+0x114>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80140c2:	2303      	movs	r3, #3
 80140c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80140c6:	e03b      	b.n	8014140 <_txe_thread_create+0x18c>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d102      	bne.n	80140d4 <_txe_thread_create+0x120>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80140ce:	2303      	movs	r3, #3
 80140d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80140d2:	e035      	b.n	8014140 <_txe_thread_create+0x18c>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80140d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80140d8:	d802      	bhi.n	80140e0 <_txe_thread_create+0x12c>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80140da:	2305      	movs	r3, #5
 80140dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80140de:	e02f      	b.n	8014140 <_txe_thread_create+0x18c>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80140e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80140e2:	2b1f      	cmp	r3, #31
 80140e4:	d902      	bls.n	80140ec <_txe_thread_create+0x138>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80140e6:	230f      	movs	r3, #15
 80140e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80140ea:	e029      	b.n	8014140 <_txe_thread_create+0x18c>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80140ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80140ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d902      	bls.n	80140fa <_txe_thread_create+0x146>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80140f4:	2318      	movs	r3, #24
 80140f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80140f8:	e022      	b.n	8014140 <_txe_thread_create+0x18c>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80140fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80140fc:	2b01      	cmp	r3, #1
 80140fe:	d902      	bls.n	8014106 <_txe_thread_create+0x152>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8014100:	2310      	movs	r3, #16
 8014102:	647b      	str	r3, [r7, #68]	@ 0x44
 8014104:	e01c      	b.n	8014140 <_txe_thread_create+0x18c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8014106:	4b20      	ldr	r3, [pc, #128]	@ (8014188 <_txe_thread_create+0x1d4>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 801410c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801410e:	4b1f      	ldr	r3, [pc, #124]	@ (801418c <_txe_thread_create+0x1d8>)
 8014110:	429a      	cmp	r2, r3
 8014112:	d101      	bne.n	8014118 <_txe_thread_create+0x164>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8014114:	2313      	movs	r3, #19
 8014116:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014118:	f3ef 8305 	mrs	r3, IPSR
 801411c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801411e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014120:	4b1b      	ldr	r3, [pc, #108]	@ (8014190 <_txe_thread_create+0x1dc>)
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	4313      	orrs	r3, r2
 8014126:	d00b      	beq.n	8014140 <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014128:	f3ef 8305 	mrs	r3, IPSR
 801412c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801412e:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014130:	4b17      	ldr	r3, [pc, #92]	@ (8014190 <_txe_thread_create+0x1dc>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	4313      	orrs	r3, r2
 8014136:	4a17      	ldr	r2, [pc, #92]	@ (8014194 <_txe_thread_create+0x1e0>)
 8014138:	4293      	cmp	r3, r2
 801413a:	d801      	bhi.n	8014140 <_txe_thread_create+0x18c>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801413c:	2313      	movs	r3, #19
 801413e:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8014140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014142:	2b00      	cmp	r3, #0
 8014144:	d114      	bne.n	8014170 <_txe_thread_create+0x1bc>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8014146:	683c      	ldr	r4, [r7, #0]
 8014148:	687a      	ldr	r2, [r7, #4]
 801414a:	68b9      	ldr	r1, [r7, #8]
 801414c:	68f8      	ldr	r0, [r7, #12]
 801414e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014150:	9305      	str	r3, [sp, #20]
 8014152:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014154:	9304      	str	r3, [sp, #16]
 8014156:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014158:	9303      	str	r3, [sp, #12]
 801415a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801415c:	9302      	str	r3, [sp, #8]
 801415e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014160:	9301      	str	r3, [sp, #4]
 8014162:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014164:	9300      	str	r3, [sp, #0]
 8014166:	0023      	movs	r3, r4
 8014168:	f7fd fe84 	bl	8011e74 <_tx_thread_create>
 801416c:	0003      	movs	r3, r0
 801416e:	647b      	str	r3, [r7, #68]	@ 0x44
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8014170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8014172:	0018      	movs	r0, r3
 8014174:	46bd      	mov	sp, r7
 8014176:	b013      	add	sp, #76	@ 0x4c
 8014178:	bd90      	pop	{r4, r7, pc}
 801417a:	46c0      	nop			@ (mov r8, r8)
 801417c:	20011230 	.word	0x20011230
 8014180:	200111a0 	.word	0x200111a0
 8014184:	200111a4 	.word	0x200111a4
 8014188:	20011198 	.word	0x20011198
 801418c:	200112e0 	.word	0x200112e0
 8014190:	20000010 	.word	0x20000010
 8014194:	f0f0f0ef 	.word	0xf0f0f0ef

08014198 <_txe_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_delete(TX_THREAD *thread_ptr)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b084      	sub	sp, #16
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80141a0:	f3ef 8305 	mrs	r3, IPSR
 80141a4:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80141a6:	68ba      	ldr	r2, [r7, #8]

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80141a8:	4b0f      	ldr	r3, [pc, #60]	@ (80141e8 <_txe_thread_delete+0x50>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	4313      	orrs	r3, r2
 80141ae:	d002      	beq.n	80141b6 <_txe_thread_delete+0x1e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 80141b0:	2313      	movs	r3, #19
 80141b2:	60fb      	str	r3, [r7, #12]
 80141b4:	e013      	b.n	80141de <_txe_thread_delete+0x46>
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d102      	bne.n	80141c2 <_txe_thread_delete+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80141bc:	230e      	movs	r3, #14
 80141be:	60fb      	str	r3, [r7, #12]
 80141c0:	e00d      	b.n	80141de <_txe_thread_delete+0x46>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	4a09      	ldr	r2, [pc, #36]	@ (80141ec <_txe_thread_delete+0x54>)
 80141c8:	4293      	cmp	r3, r2
 80141ca:	d002      	beq.n	80141d2 <_txe_thread_delete+0x3a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80141cc:	230e      	movs	r3, #14
 80141ce:	60fb      	str	r3, [r7, #12]
 80141d0:	e005      	b.n	80141de <_txe_thread_delete+0x46>
    }
    else
    {

        /* Call actual thread delete function.  */
        status =  _tx_thread_delete(thread_ptr);
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	0018      	movs	r0, r3
 80141d6:	f7fd ff6d 	bl	80120b4 <_tx_thread_delete>
 80141da:	0003      	movs	r3, r0
 80141dc:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80141de:	68fb      	ldr	r3, [r7, #12]
}
 80141e0:	0018      	movs	r0, r3
 80141e2:	46bd      	mov	sp, r7
 80141e4:	b004      	add	sp, #16
 80141e6:	bd80      	pop	{r7, pc}
 80141e8:	20000010 	.word	0x20000010
 80141ec:	54485244 	.word	0x54485244

080141f0 <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 80141f0:	b590      	push	{r4, r7, lr}
 80141f2:	b08d      	sub	sp, #52	@ 0x34
 80141f4:	af06      	add	r7, sp, #24
 80141f6:	60f8      	str	r0, [r7, #12]
 80141f8:	60b9      	str	r1, [r7, #8]
 80141fa:	607a      	str	r2, [r7, #4]
 80141fc:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d102      	bne.n	801420a <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014204:	230e      	movs	r3, #14
 8014206:	617b      	str	r3, [r7, #20]
 8014208:	e01a      	b.n	8014240 <_txe_thread_info_get+0x50>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	4a0f      	ldr	r2, [pc, #60]	@ (801424c <_txe_thread_info_get+0x5c>)
 8014210:	4293      	cmp	r3, r2
 8014212:	d002      	beq.n	801421a <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014214:	230e      	movs	r3, #14
 8014216:	617b      	str	r3, [r7, #20]
 8014218:	e012      	b.n	8014240 <_txe_thread_info_get+0x50>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold,
 801421a:	683c      	ldr	r4, [r7, #0]
 801421c:	687a      	ldr	r2, [r7, #4]
 801421e:	68b9      	ldr	r1, [r7, #8]
 8014220:	68f8      	ldr	r0, [r7, #12]
 8014222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014224:	9304      	str	r3, [sp, #16]
 8014226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014228:	9303      	str	r3, [sp, #12]
 801422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801422c:	9302      	str	r3, [sp, #8]
 801422e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014230:	9301      	str	r3, [sp, #4]
 8014232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014234:	9300      	str	r3, [sp, #0]
 8014236:	0023      	movs	r3, r4
 8014238:	f7fd ffac 	bl	8012194 <_tx_thread_info_get>
 801423c:	0003      	movs	r3, r0
 801423e:	617b      	str	r3, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 8014240:	697b      	ldr	r3, [r7, #20]
}
 8014242:	0018      	movs	r0, r3
 8014244:	46bd      	mov	sp, r7
 8014246:	b007      	add	sp, #28
 8014248:	bd90      	pop	{r4, r7, pc}
 801424a:	46c0      	nop			@ (mov r8, r8)
 801424c:	54485244 	.word	0x54485244

08014250 <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8014256:	4b0a      	ldr	r3, [pc, #40]	@ (8014280 <_txe_thread_relinquish+0x30>)
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d009      	beq.n	8014276 <_txe_thread_relinquish+0x26>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8014262:	f3ef 8305 	mrs	r3, IPSR
 8014266:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 8014268:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 801426a:	4b06      	ldr	r3, [pc, #24]	@ (8014284 <_txe_thread_relinquish+0x34>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	4313      	orrs	r3, r2
 8014270:	d101      	bne.n	8014276 <_txe_thread_relinquish+0x26>
        {

            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 8014272:	f7fe f84b 	bl	801230c <_tx_thread_relinquish>
        }
    }
}
 8014276:	46c0      	nop			@ (mov r8, r8)
 8014278:	46bd      	mov	sp, r7
 801427a:	b002      	add	sp, #8
 801427c:	bd80      	pop	{r7, pc}
 801427e:	46c0      	nop			@ (mov r8, r8)
 8014280:	20011198 	.word	0x20011198
 8014284:	20000010 	.word	0x20000010

08014288 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b084      	sub	sp, #16
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d102      	bne.n	801429c <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014296:	230e      	movs	r3, #14
 8014298:	60fb      	str	r3, [r7, #12]
 801429a:	e00d      	b.n	80142b8 <_txe_thread_resume+0x30>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	4a08      	ldr	r2, [pc, #32]	@ (80142c4 <_txe_thread_resume+0x3c>)
 80142a2:	4293      	cmp	r3, r2
 80142a4:	d002      	beq.n	80142ac <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80142a6:	230e      	movs	r3, #14
 80142a8:	60fb      	str	r3, [r7, #12]
 80142aa:	e005      	b.n	80142b8 <_txe_thread_resume+0x30>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	0018      	movs	r0, r3
 80142b0:	f7fe f88e 	bl	80123d0 <_tx_thread_resume>
 80142b4:	0003      	movs	r3, r0
 80142b6:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80142b8:	68fb      	ldr	r3, [r7, #12]
}
 80142ba:	0018      	movs	r0, r3
 80142bc:	46bd      	mov	sp, r7
 80142be:	b004      	add	sp, #16
 80142c0:	bd80      	pop	{r7, pc}
 80142c2:	46c0      	nop			@ (mov r8, r8)
 80142c4:	54485244 	.word	0x54485244

080142c8 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b084      	sub	sp, #16
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d102      	bne.n	80142dc <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80142d6:	230e      	movs	r3, #14
 80142d8:	60fb      	str	r3, [r7, #12]
 80142da:	e00d      	b.n	80142f8 <_txe_thread_suspend+0x30>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	4a08      	ldr	r2, [pc, #32]	@ (8014304 <_txe_thread_suspend+0x3c>)
 80142e2:	4293      	cmp	r3, r2
 80142e4:	d002      	beq.n	80142ec <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80142e6:	230e      	movs	r3, #14
 80142e8:	60fb      	str	r3, [r7, #12]
 80142ea:	e005      	b.n	80142f8 <_txe_thread_suspend+0x30>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	0018      	movs	r0, r3
 80142f0:	f7fe f98a 	bl	8012608 <_tx_thread_suspend>
 80142f4:	0003      	movs	r3, r0
 80142f6:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80142f8:	68fb      	ldr	r3, [r7, #12]
}
 80142fa:	0018      	movs	r0, r3
 80142fc:	46bd      	mov	sp, r7
 80142fe:	b004      	add	sp, #16
 8014300:	bd80      	pop	{r7, pc}
 8014302:	46c0      	nop			@ (mov r8, r8)
 8014304:	54485244 	.word	0x54485244

08014308 <_txe_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b084      	sub	sp, #16
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d102      	bne.n	801431c <_txe_thread_terminate+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014316:	230e      	movs	r3, #14
 8014318:	60fb      	str	r3, [r7, #12]
 801431a:	e018      	b.n	801434e <_txe_thread_terminate+0x46>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	4a0d      	ldr	r2, [pc, #52]	@ (8014358 <_txe_thread_terminate+0x50>)
 8014322:	4293      	cmp	r3, r2
 8014324:	d002      	beq.n	801432c <_txe_thread_terminate+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8014326:	230e      	movs	r3, #14
 8014328:	60fb      	str	r3, [r7, #12]
 801432a:	e010      	b.n	801434e <_txe_thread_terminate+0x46>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801432c:	f3ef 8305 	mrs	r3, IPSR
 8014330:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8014332:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8014334:	4b09      	ldr	r3, [pc, #36]	@ (801435c <_txe_thread_terminate+0x54>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	4313      	orrs	r3, r2
 801433a:	d002      	beq.n	8014342 <_txe_thread_terminate+0x3a>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 801433c:	2313      	movs	r3, #19
 801433e:	60fb      	str	r3, [r7, #12]
 8014340:	e005      	b.n	801434e <_txe_thread_terminate+0x46>
    }
    else
    {

        /* Call actual thread terminate function.  */
        status =  _tx_thread_terminate(thread_ptr);
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	0018      	movs	r0, r3
 8014346:	f7fe fc8d 	bl	8012c64 <_tx_thread_terminate>
 801434a:	0003      	movs	r3, r0
 801434c:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801434e:	68fb      	ldr	r3, [r7, #12]
}
 8014350:	0018      	movs	r0, r3
 8014352:	46bd      	mov	sp, r7
 8014354:	b004      	add	sp, #16
 8014356:	bd80      	pop	{r7, pc}
 8014358:	54485244 	.word	0x54485244
 801435c:	20000010 	.word	0x20000010

08014360 <__NVIC_EnableIRQ>:
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	0002      	movs	r2, r0
 8014368:	1dfb      	adds	r3, r7, #7
 801436a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801436c:	1dfb      	adds	r3, r7, #7
 801436e:	781b      	ldrb	r3, [r3, #0]
 8014370:	2b7f      	cmp	r3, #127	@ 0x7f
 8014372:	d809      	bhi.n	8014388 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014374:	1dfb      	adds	r3, r7, #7
 8014376:	781b      	ldrb	r3, [r3, #0]
 8014378:	001a      	movs	r2, r3
 801437a:	231f      	movs	r3, #31
 801437c:	401a      	ands	r2, r3
 801437e:	4b04      	ldr	r3, [pc, #16]	@ (8014390 <__NVIC_EnableIRQ+0x30>)
 8014380:	2101      	movs	r1, #1
 8014382:	4091      	lsls	r1, r2
 8014384:	000a      	movs	r2, r1
 8014386:	601a      	str	r2, [r3, #0]
}
 8014388:	46c0      	nop			@ (mov r8, r8)
 801438a:	46bd      	mov	sp, r7
 801438c:	b002      	add	sp, #8
 801438e:	bd80      	pop	{r7, pc}
 8014390:	e000e100 	.word	0xe000e100

08014394 <__NVIC_SetPriority>:
{
 8014394:	b590      	push	{r4, r7, lr}
 8014396:	b083      	sub	sp, #12
 8014398:	af00      	add	r7, sp, #0
 801439a:	0002      	movs	r2, r0
 801439c:	6039      	str	r1, [r7, #0]
 801439e:	1dfb      	adds	r3, r7, #7
 80143a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80143a2:	1dfb      	adds	r3, r7, #7
 80143a4:	781b      	ldrb	r3, [r3, #0]
 80143a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80143a8:	d828      	bhi.n	80143fc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80143aa:	4a2f      	ldr	r2, [pc, #188]	@ (8014468 <__NVIC_SetPriority+0xd4>)
 80143ac:	1dfb      	adds	r3, r7, #7
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	b25b      	sxtb	r3, r3
 80143b2:	089b      	lsrs	r3, r3, #2
 80143b4:	33c0      	adds	r3, #192	@ 0xc0
 80143b6:	009b      	lsls	r3, r3, #2
 80143b8:	589b      	ldr	r3, [r3, r2]
 80143ba:	1dfa      	adds	r2, r7, #7
 80143bc:	7812      	ldrb	r2, [r2, #0]
 80143be:	0011      	movs	r1, r2
 80143c0:	2203      	movs	r2, #3
 80143c2:	400a      	ands	r2, r1
 80143c4:	00d2      	lsls	r2, r2, #3
 80143c6:	21ff      	movs	r1, #255	@ 0xff
 80143c8:	4091      	lsls	r1, r2
 80143ca:	000a      	movs	r2, r1
 80143cc:	43d2      	mvns	r2, r2
 80143ce:	401a      	ands	r2, r3
 80143d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	019b      	lsls	r3, r3, #6
 80143d6:	22ff      	movs	r2, #255	@ 0xff
 80143d8:	401a      	ands	r2, r3
 80143da:	1dfb      	adds	r3, r7, #7
 80143dc:	781b      	ldrb	r3, [r3, #0]
 80143de:	0018      	movs	r0, r3
 80143e0:	2303      	movs	r3, #3
 80143e2:	4003      	ands	r3, r0
 80143e4:	00db      	lsls	r3, r3, #3
 80143e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80143e8:	481f      	ldr	r0, [pc, #124]	@ (8014468 <__NVIC_SetPriority+0xd4>)
 80143ea:	1dfb      	adds	r3, r7, #7
 80143ec:	781b      	ldrb	r3, [r3, #0]
 80143ee:	b25b      	sxtb	r3, r3
 80143f0:	089b      	lsrs	r3, r3, #2
 80143f2:	430a      	orrs	r2, r1
 80143f4:	33c0      	adds	r3, #192	@ 0xc0
 80143f6:	009b      	lsls	r3, r3, #2
 80143f8:	501a      	str	r2, [r3, r0]
}
 80143fa:	e031      	b.n	8014460 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80143fc:	4a1b      	ldr	r2, [pc, #108]	@ (801446c <__NVIC_SetPriority+0xd8>)
 80143fe:	1dfb      	adds	r3, r7, #7
 8014400:	781b      	ldrb	r3, [r3, #0]
 8014402:	0019      	movs	r1, r3
 8014404:	230f      	movs	r3, #15
 8014406:	400b      	ands	r3, r1
 8014408:	3b08      	subs	r3, #8
 801440a:	089b      	lsrs	r3, r3, #2
 801440c:	3306      	adds	r3, #6
 801440e:	009b      	lsls	r3, r3, #2
 8014410:	18d3      	adds	r3, r2, r3
 8014412:	3304      	adds	r3, #4
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	1dfa      	adds	r2, r7, #7
 8014418:	7812      	ldrb	r2, [r2, #0]
 801441a:	0011      	movs	r1, r2
 801441c:	2203      	movs	r2, #3
 801441e:	400a      	ands	r2, r1
 8014420:	00d2      	lsls	r2, r2, #3
 8014422:	21ff      	movs	r1, #255	@ 0xff
 8014424:	4091      	lsls	r1, r2
 8014426:	000a      	movs	r2, r1
 8014428:	43d2      	mvns	r2, r2
 801442a:	401a      	ands	r2, r3
 801442c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	019b      	lsls	r3, r3, #6
 8014432:	22ff      	movs	r2, #255	@ 0xff
 8014434:	401a      	ands	r2, r3
 8014436:	1dfb      	adds	r3, r7, #7
 8014438:	781b      	ldrb	r3, [r3, #0]
 801443a:	0018      	movs	r0, r3
 801443c:	2303      	movs	r3, #3
 801443e:	4003      	ands	r3, r0
 8014440:	00db      	lsls	r3, r3, #3
 8014442:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014444:	4809      	ldr	r0, [pc, #36]	@ (801446c <__NVIC_SetPriority+0xd8>)
 8014446:	1dfb      	adds	r3, r7, #7
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	001c      	movs	r4, r3
 801444c:	230f      	movs	r3, #15
 801444e:	4023      	ands	r3, r4
 8014450:	3b08      	subs	r3, #8
 8014452:	089b      	lsrs	r3, r3, #2
 8014454:	430a      	orrs	r2, r1
 8014456:	3306      	adds	r3, #6
 8014458:	009b      	lsls	r3, r3, #2
 801445a:	18c3      	adds	r3, r0, r3
 801445c:	3304      	adds	r3, #4
 801445e:	601a      	str	r2, [r3, #0]
}
 8014460:	46c0      	nop			@ (mov r8, r8)
 8014462:	46bd      	mov	sp, r7
 8014464:	b003      	add	sp, #12
 8014466:	bd90      	pop	{r4, r7, pc}
 8014468:	e000e100 	.word	0xe000e100
 801446c:	e000ed00 	.word	0xe000ed00

08014470 <LL_UCPD_Enable>:
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b082      	sub	sp, #8
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	2280      	movs	r2, #128	@ 0x80
 801447e:	0612      	lsls	r2, r2, #24
 8014480:	431a      	orrs	r2, r3
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	601a      	str	r2, [r3, #0]
}
 8014486:	46c0      	nop			@ (mov r8, r8)
 8014488:	46bd      	mov	sp, r7
 801448a:	b002      	add	sp, #8
 801448c:	bd80      	pop	{r7, pc}
	...

08014490 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b082      	sub	sp, #8
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
 8014498:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	4a05      	ldr	r2, [pc, #20]	@ (80144b4 <LL_UCPD_SetRxOrderSet+0x24>)
 80144a0:	401a      	ands	r2, r3
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	431a      	orrs	r2, r3
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	601a      	str	r2, [r3, #0]
}
 80144aa:	46c0      	nop			@ (mov r8, r8)
 80144ac:	46bd      	mov	sp, r7
 80144ae:	b002      	add	sp, #8
 80144b0:	bd80      	pop	{r7, pc}
 80144b2:	46c0      	nop			@ (mov r8, r8)
 80144b4:	e00fffff 	.word	0xe00fffff

080144b8 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b082      	sub	sp, #8
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
 80144c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	68db      	ldr	r3, [r3, #12]
 80144c6:	4a05      	ldr	r2, [pc, #20]	@ (80144dc <LL_UCPD_SetccEnable+0x24>)
 80144c8:	401a      	ands	r2, r3
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	431a      	orrs	r2, r3
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	60da      	str	r2, [r3, #12]
}
 80144d2:	46c0      	nop			@ (mov r8, r8)
 80144d4:	46bd      	mov	sp, r7
 80144d6:	b002      	add	sp, #8
 80144d8:	bd80      	pop	{r7, pc}
 80144da:	46c0      	nop			@ (mov r8, r8)
 80144dc:	fffff3ff 	.word	0xfffff3ff

080144e0 <LL_UCPD_RxDisable>:
  * @rmtoll CR        PHYRXEN          LL_UCPD_RxDisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDisable(UCPD_TypeDef *UCPDx)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b082      	sub	sp, #8
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	68db      	ldr	r3, [r3, #12]
 80144ec:	2220      	movs	r2, #32
 80144ee:	4393      	bics	r3, r2
 80144f0:	001a      	movs	r2, r3
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	60da      	str	r2, [r3, #12]
}
 80144f6:	46c0      	nop			@ (mov r8, r8)
 80144f8:	46bd      	mov	sp, r7
 80144fa:	b002      	add	sp, #8
 80144fc:	bd80      	pop	{r7, pc}

080144fe <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 80144fe:	b580      	push	{r7, lr}
 8014500:	b082      	sub	sp, #8
 8014502:	af00      	add	r7, sp, #0
 8014504:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	691b      	ldr	r3, [r3, #16]
 801450a:	2280      	movs	r2, #128	@ 0x80
 801450c:	0212      	lsls	r2, r2, #8
 801450e:	431a      	orrs	r2, r3
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	611a      	str	r2, [r3, #16]
}
 8014514:	46c0      	nop			@ (mov r8, r8)
 8014516:	46bd      	mov	sp, r7
 8014518:	b002      	add	sp, #8
 801451a:	bd80      	pop	{r7, pc}

0801451c <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b082      	sub	sp, #8
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	691b      	ldr	r3, [r3, #16]
 8014528:	2280      	movs	r2, #128	@ 0x80
 801452a:	01d2      	lsls	r2, r2, #7
 801452c:	431a      	orrs	r2, r3
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	611a      	str	r2, [r3, #16]
}
 8014532:	46c0      	nop			@ (mov r8, r8)
 8014534:	46bd      	mov	sp, r7
 8014536:	b002      	add	sp, #8
 8014538:	bd80      	pop	{r7, pc}
	...

0801453c <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 801453c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801453e:	b08b      	sub	sp, #44	@ 0x2c
 8014540:	af00      	add	r7, sp, #0
 8014542:	60b9      	str	r1, [r7, #8]
 8014544:	607a      	str	r2, [r7, #4]
 8014546:	603b      	str	r3, [r7, #0]
 8014548:	240f      	movs	r4, #15
 801454a:	193b      	adds	r3, r7, r4
 801454c:	1c02      	adds	r2, r0, #0
 801454e:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8014550:	193b      	adds	r3, r7, r4
 8014552:	781b      	ldrb	r3, [r3, #0]
 8014554:	011a      	lsls	r2, r3, #4
 8014556:	4b7b      	ldr	r3, [pc, #492]	@ (8014744 <CAD_Init+0x208>)
 8014558:	18d3      	adds	r3, r2, r3
 801455a:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 801455c:	193b      	adds	r3, r7, r4
 801455e:	781a      	ldrb	r2, [r3, #0]
 8014560:	4979      	ldr	r1, [pc, #484]	@ (8014748 <CAD_Init+0x20c>)
 8014562:	0013      	movs	r3, r2
 8014564:	011b      	lsls	r3, r3, #4
 8014566:	1a9b      	subs	r3, r3, r2
 8014568:	009b      	lsls	r3, r3, #2
 801456a:	18cb      	adds	r3, r1, r3
 801456c:	3310      	adds	r3, #16
 801456e:	687a      	ldr	r2, [r7, #4]
 8014570:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 8014572:	193b      	adds	r3, r7, r4
 8014574:	781a      	ldrb	r2, [r3, #0]
 8014576:	4974      	ldr	r1, [pc, #464]	@ (8014748 <CAD_Init+0x20c>)
 8014578:	0013      	movs	r3, r2
 801457a:	011b      	lsls	r3, r3, #4
 801457c:	1a9b      	subs	r3, r3, r2
 801457e:	009b      	lsls	r3, r3, #2
 8014580:	18cb      	adds	r3, r1, r3
 8014582:	330c      	adds	r3, #12
 8014584:	68ba      	ldr	r2, [r7, #8]
 8014586:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 8014588:	193b      	adds	r3, r7, r4
 801458a:	781a      	ldrb	r2, [r3, #0]
 801458c:	496e      	ldr	r1, [pc, #440]	@ (8014748 <CAD_Init+0x20c>)
 801458e:	0013      	movs	r3, r2
 8014590:	011b      	lsls	r3, r3, #4
 8014592:	1a9b      	subs	r3, r3, r2
 8014594:	009b      	lsls	r3, r3, #2
 8014596:	18cb      	adds	r3, r1, r3
 8014598:	330c      	adds	r3, #12
 801459a:	6819      	ldr	r1, [r3, #0]
 801459c:	193b      	adds	r3, r7, r4
 801459e:	781a      	ldrb	r2, [r3, #0]
 80145a0:	4869      	ldr	r0, [pc, #420]	@ (8014748 <CAD_Init+0x20c>)
 80145a2:	0013      	movs	r3, r2
 80145a4:	011b      	lsls	r3, r3, #4
 80145a6:	1a9b      	subs	r3, r3, r2
 80145a8:	009b      	lsls	r3, r3, #2
 80145aa:	18c3      	adds	r3, r0, r3
 80145ac:	3310      	adds	r3, #16
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	794a      	ldrb	r2, [r1, #5]
 80145b2:	0612      	lsls	r2, r2, #24
 80145b4:	0f92      	lsrs	r2, r2, #30
 80145b6:	b2d2      	uxtb	r2, r2
 80145b8:	2103      	movs	r1, #3
 80145ba:	400a      	ands	r2, r1
 80145bc:	0010      	movs	r0, r2
 80145be:	789a      	ldrb	r2, [r3, #2]
 80145c0:	2103      	movs	r1, #3
 80145c2:	438a      	bics	r2, r1
 80145c4:	1c11      	adds	r1, r2, #0
 80145c6:	1c02      	adds	r2, r0, #0
 80145c8:	430a      	orrs	r2, r1
 80145ca:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 80145cc:	193b      	adds	r3, r7, r4
 80145ce:	781a      	ldrb	r2, [r3, #0]
 80145d0:	495d      	ldr	r1, [pc, #372]	@ (8014748 <CAD_Init+0x20c>)
 80145d2:	0013      	movs	r3, r2
 80145d4:	011b      	lsls	r3, r3, #4
 80145d6:	1a9b      	subs	r3, r3, r2
 80145d8:	009b      	lsls	r3, r3, #2
 80145da:	18cb      	adds	r3, r1, r3
 80145dc:	3310      	adds	r3, #16
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	789a      	ldrb	r2, [r3, #2]
 80145e2:	210c      	movs	r1, #12
 80145e4:	438a      	bics	r2, r1
 80145e6:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 80145e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145ea:	2210      	movs	r2, #16
 80145ec:	2100      	movs	r1, #0
 80145ee:	0018      	movs	r0, r3
 80145f0:	f00a fc1c 	bl	801ee2c <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 80145f4:	193b      	adds	r3, r7, r4
 80145f6:	781a      	ldrb	r2, [r3, #0]
 80145f8:	4953      	ldr	r1, [pc, #332]	@ (8014748 <CAD_Init+0x20c>)
 80145fa:	0013      	movs	r3, r2
 80145fc:	011b      	lsls	r3, r3, #4
 80145fe:	1a9b      	subs	r3, r3, r2
 8014600:	009b      	lsls	r3, r3, #2
 8014602:	18cb      	adds	r3, r1, r3
 8014604:	332c      	adds	r3, #44	@ 0x2c
 8014606:	683a      	ldr	r2, [r7, #0]
 8014608:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 801460a:	0025      	movs	r5, r4
 801460c:	193b      	adds	r3, r7, r4
 801460e:	781c      	ldrb	r4, [r3, #0]
 8014610:	197b      	adds	r3, r7, r5
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	0018      	movs	r0, r3
 8014616:	f001 f963 	bl	80158e0 <USBPD_HW_GetUSPDInstance>
 801461a:	0001      	movs	r1, r0
 801461c:	4a4a      	ldr	r2, [pc, #296]	@ (8014748 <CAD_Init+0x20c>)
 801461e:	0023      	movs	r3, r4
 8014620:	011b      	lsls	r3, r3, #4
 8014622:	1b1b      	subs	r3, r3, r4
 8014624:	009b      	lsls	r3, r3, #2
 8014626:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 8014628:	2614      	movs	r6, #20
 801462a:	19bb      	adds	r3, r7, r6
 801462c:	0018      	movs	r0, r3
 801462e:	f7f9 f8b1 	bl	800d794 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 8014632:	002c      	movs	r4, r5
 8014634:	193b      	adds	r3, r7, r4
 8014636:	781a      	ldrb	r2, [r3, #0]
 8014638:	4943      	ldr	r1, [pc, #268]	@ (8014748 <CAD_Init+0x20c>)
 801463a:	0013      	movs	r3, r2
 801463c:	011b      	lsls	r3, r3, #4
 801463e:	1a9b      	subs	r3, r3, r2
 8014640:	009b      	lsls	r3, r3, #2
 8014642:	585b      	ldr	r3, [r3, r1]
 8014644:	19ba      	adds	r2, r7, r6
 8014646:	0011      	movs	r1, r2
 8014648:	0018      	movs	r0, r3
 801464a:	f7f9 f869 	bl	800d720 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 801464e:	193b      	adds	r3, r7, r4
 8014650:	781a      	ldrb	r2, [r3, #0]
 8014652:	493d      	ldr	r1, [pc, #244]	@ (8014748 <CAD_Init+0x20c>)
 8014654:	0013      	movs	r3, r2
 8014656:	011b      	lsls	r3, r3, #4
 8014658:	1a9b      	subs	r3, r3, r2
 801465a:	009b      	lsls	r3, r3, #2
 801465c:	585b      	ldr	r3, [r3, r1]
 801465e:	22f8      	movs	r2, #248	@ 0xf8
 8014660:	0452      	lsls	r2, r2, #17
 8014662:	0011      	movs	r1, r2
 8014664:	0018      	movs	r0, r3
 8014666:	f7ff ff13 	bl	8014490 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 801466a:	193b      	adds	r3, r7, r4
 801466c:	781a      	ldrb	r2, [r3, #0]
 801466e:	4936      	ldr	r1, [pc, #216]	@ (8014748 <CAD_Init+0x20c>)
 8014670:	0013      	movs	r3, r2
 8014672:	011b      	lsls	r3, r3, #4
 8014674:	1a9b      	subs	r3, r3, r2
 8014676:	009b      	lsls	r3, r3, #2
 8014678:	585b      	ldr	r3, [r3, r1]
 801467a:	22c0      	movs	r2, #192	@ 0xc0
 801467c:	0112      	lsls	r2, r2, #4
 801467e:	0011      	movs	r1, r2
 8014680:	0018      	movs	r0, r3
 8014682:	f7ff ff19 	bl	80144b8 <LL_UCPD_SetccEnable>
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */


  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 8014686:	193b      	adds	r3, r7, r4
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	0018      	movs	r0, r3
 801468c:	f009 f999 	bl	801d9c2 <BSP_USBPD_PWR_Init>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8014690:	193b      	adds	r3, r7, r4
 8014692:	781a      	ldrb	r2, [r3, #0]
 8014694:	492c      	ldr	r1, [pc, #176]	@ (8014748 <CAD_Init+0x20c>)
 8014696:	0013      	movs	r3, r2
 8014698:	011b      	lsls	r3, r3, #4
 801469a:	1a9b      	subs	r3, r3, r2
 801469c:	009b      	lsls	r3, r3, #2
 801469e:	585b      	ldr	r3, [r3, r1]
 80146a0:	0018      	movs	r0, r3
 80146a2:	f7ff fee5 	bl	8014470 <LL_UCPD_Enable>

#if defined(_SRC) || defined(_DRP)
  /* Initialize usbpd interrupt */
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 80146a6:	0020      	movs	r0, r4
 80146a8:	193b      	adds	r3, r7, r4
 80146aa:	781a      	ldrb	r2, [r3, #0]
 80146ac:	4926      	ldr	r1, [pc, #152]	@ (8014748 <CAD_Init+0x20c>)
 80146ae:	0013      	movs	r3, r2
 80146b0:	011b      	lsls	r3, r3, #4
 80146b2:	1a9b      	subs	r3, r3, r2
 80146b4:	009b      	lsls	r3, r3, #2
 80146b6:	18cb      	adds	r3, r1, r3
 80146b8:	3310      	adds	r3, #16
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	781b      	ldrb	r3, [r3, #0]
 80146be:	2204      	movs	r2, #4
 80146c0:	4013      	ands	r3, r2
 80146c2:	b2db      	uxtb	r3, r3
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d005      	beq.n	80146d4 <CAD_Init+0x198>
  {
    USBPDM1_AssertRp(PortNum);
 80146c8:	183b      	adds	r3, r7, r0
 80146ca:	781b      	ldrb	r3, [r3, #0]
 80146cc:	0018      	movs	r0, r3
 80146ce:	f002 fa61 	bl	8016b94 <USBPDM1_AssertRp>
 80146d2:	e005      	b.n	80146e0 <CAD_Init+0x1a4>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 80146d4:	230f      	movs	r3, #15
 80146d6:	18fb      	adds	r3, r7, r3
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	0018      	movs	r0, r3
 80146dc:	f002 fb1c 	bl	8016d18 <USBPDM1_AssertRd>
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Set the state machine according the SW configuration */
#if !defined(USBPDCORE_LIB_NO_PD)
#if defined(_DRP)
  if (Ports[PortNum].settings->CAD_RoleToggle == USBPD_TRUE)
 80146e0:	200f      	movs	r0, #15
 80146e2:	183b      	adds	r3, r7, r0
 80146e4:	781a      	ldrb	r2, [r3, #0]
 80146e6:	4918      	ldr	r1, [pc, #96]	@ (8014748 <CAD_Init+0x20c>)
 80146e8:	0013      	movs	r3, r2
 80146ea:	011b      	lsls	r3, r3, #4
 80146ec:	1a9b      	subs	r3, r3, r2
 80146ee:	009b      	lsls	r3, r3, #2
 80146f0:	18cb      	adds	r3, r1, r3
 80146f2:	330c      	adds	r3, #12
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	795b      	ldrb	r3, [r3, #5]
 80146f8:	2220      	movs	r2, #32
 80146fa:	4013      	ands	r3, r2
 80146fc:	b2db      	uxtb	r3, r3
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d01b      	beq.n	801473a <CAD_Init+0x1fe>
  {
    _handle->CAD_PtrStateMachine = CAD_StateMachine_DRP;
 8014702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014704:	4a11      	ldr	r2, [pc, #68]	@ (801474c <CAD_Init+0x210>)
 8014706:	60da      	str	r2, [r3, #12]
    _handle->CAD_Accessory_SRC = Ports[PortNum].settings->CAD_AccesorySupport;
 8014708:	183b      	adds	r3, r7, r0
 801470a:	781a      	ldrb	r2, [r3, #0]
 801470c:	490e      	ldr	r1, [pc, #56]	@ (8014748 <CAD_Init+0x20c>)
 801470e:	0013      	movs	r3, r2
 8014710:	011b      	lsls	r3, r3, #4
 8014712:	1a9b      	subs	r3, r3, r2
 8014714:	009b      	lsls	r3, r3, #2
 8014716:	18cb      	adds	r3, r1, r3
 8014718:	330c      	adds	r3, #12
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	795b      	ldrb	r3, [r3, #5]
 801471e:	06db      	lsls	r3, r3, #27
 8014720:	0fdb      	lsrs	r3, r3, #31
 8014722:	b2da      	uxtb	r2, r3
 8014724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014726:	2101      	movs	r1, #1
 8014728:	400a      	ands	r2, r1
 801472a:	0190      	lsls	r0, r2, #6
 801472c:	785a      	ldrb	r2, [r3, #1]
 801472e:	2140      	movs	r1, #64	@ 0x40
 8014730:	438a      	bics	r2, r1
 8014732:	1c11      	adds	r1, r2, #0
 8014734:	1c02      	adds	r2, r0, #0
 8014736:	430a      	orrs	r2, r1
 8014738:	705a      	strb	r2, [r3, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 801473a:	46c0      	nop			@ (mov r8, r8)
 801473c:	46bd      	mov	sp, r7
 801473e:	b00b      	add	sp, #44	@ 0x2c
 8014740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014742:	46c0      	nop			@ (mov r8, r8)
 8014744:	200117a0 	.word	0x200117a0
 8014748:	200117d4 	.word	0x200117d4
 801474c:	08014845 	.word	0x08014845

08014750 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b082      	sub	sp, #8
 8014754:	af00      	add	r7, sp, #0
 8014756:	0002      	movs	r2, r0
 8014758:	1dfb      	adds	r3, r7, #7
 801475a:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 801475c:	1dfb      	adds	r3, r7, #7
 801475e:	781b      	ldrb	r3, [r3, #0]
 8014760:	0018      	movs	r0, r3
 8014762:	f002 fb89 	bl	8016e78 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 8014766:	1dfb      	adds	r3, r7, #7
 8014768:	781a      	ldrb	r2, [r3, #0]
 801476a:	4b0b      	ldr	r3, [pc, #44]	@ (8014798 <CAD_Enter_ErrorRecovery+0x48>)
 801476c:	0112      	lsls	r2, r2, #4
 801476e:	5cd1      	ldrb	r1, [r2, r3]
 8014770:	2080      	movs	r0, #128	@ 0x80
 8014772:	4240      	negs	r0, r0
 8014774:	4301      	orrs	r1, r0
 8014776:	54d1      	strb	r1, [r2, r3]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8014778:	1dfb      	adds	r3, r7, #7
 801477a:	781a      	ldrb	r2, [r3, #0]
 801477c:	4907      	ldr	r1, [pc, #28]	@ (801479c <CAD_Enter_ErrorRecovery+0x4c>)
 801477e:	0013      	movs	r3, r2
 8014780:	011b      	lsls	r3, r3, #4
 8014782:	1a9b      	subs	r3, r3, r2
 8014784:	009b      	lsls	r3, r3, #2
 8014786:	18cb      	adds	r3, r1, r3
 8014788:	332c      	adds	r3, #44	@ 0x2c
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	4798      	blx	r3
}
 801478e:	46c0      	nop			@ (mov r8, r8)
 8014790:	46bd      	mov	sp, r7
 8014792:	b002      	add	sp, #8
 8014794:	bd80      	pop	{r7, pc}
 8014796:	46c0      	nop			@ (mov r8, r8)
 8014798:	200117a0 	.word	0x200117a0
 801479c:	200117d4 	.word	0x200117d4

080147a0 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b082      	sub	sp, #8
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	0002      	movs	r2, r0
 80147a8:	6039      	str	r1, [r7, #0]
 80147aa:	1dfb      	adds	r3, r7, #7
 80147ac:	701a      	strb	r2, [r3, #0]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 80147ae:	1dfb      	adds	r3, r7, #7
 80147b0:	781a      	ldrb	r2, [r3, #0]
 80147b2:	4918      	ldr	r1, [pc, #96]	@ (8014814 <CAD_SRC_Set_ResistorRp+0x74>)
 80147b4:	0013      	movs	r3, r2
 80147b6:	011b      	lsls	r3, r3, #4
 80147b8:	1a9b      	subs	r3, r3, r2
 80147ba:	009b      	lsls	r3, r3, #2
 80147bc:	18cb      	adds	r3, r1, r3
 80147be:	3310      	adds	r3, #16
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	683a      	ldr	r2, [r7, #0]
 80147c4:	1c11      	adds	r1, r2, #0
 80147c6:	2203      	movs	r2, #3
 80147c8:	400a      	ands	r2, r1
 80147ca:	b2d2      	uxtb	r2, r2
 80147cc:	2103      	movs	r1, #3
 80147ce:	400a      	ands	r2, r1
 80147d0:	0010      	movs	r0, r2
 80147d2:	789a      	ldrb	r2, [r3, #2]
 80147d4:	2103      	movs	r1, #3
 80147d6:	438a      	bics	r2, r1
 80147d8:	1c11      	adds	r1, r2, #0
 80147da:	1c02      	adds	r2, r0, #0
 80147dc:	430a      	orrs	r2, r1
 80147de:	709a      	strb	r2, [r3, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 80147e0:	1dfb      	adds	r3, r7, #7
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	4a0c      	ldr	r2, [pc, #48]	@ (8014818 <CAD_SRC_Set_ResistorRp+0x78>)
 80147e6:	011b      	lsls	r3, r3, #4
 80147e8:	18d3      	adds	r3, r2, r3
 80147ea:	785a      	ldrb	r2, [r3, #1]
 80147ec:	2101      	movs	r1, #1
 80147ee:	430a      	orrs	r2, r1
 80147f0:	705a      	strb	r2, [r3, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 80147f2:	1dfb      	adds	r3, r7, #7
 80147f4:	781a      	ldrb	r2, [r3, #0]
 80147f6:	4907      	ldr	r1, [pc, #28]	@ (8014814 <CAD_SRC_Set_ResistorRp+0x74>)
 80147f8:	0013      	movs	r3, r2
 80147fa:	011b      	lsls	r3, r3, #4
 80147fc:	1a9b      	subs	r3, r3, r2
 80147fe:	009b      	lsls	r3, r3, #2
 8014800:	18cb      	adds	r3, r1, r3
 8014802:	332c      	adds	r3, #44	@ 0x2c
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	4798      	blx	r3
  return 0;
 8014808:	2300      	movs	r3, #0
}
 801480a:	0018      	movs	r0, r3
 801480c:	46bd      	mov	sp, r7
 801480e:	b002      	add	sp, #8
 8014810:	bd80      	pop	{r7, pc}
 8014812:	46c0      	nop			@ (mov r8, r8)
 8014814:	200117d4 	.word	0x200117d4
 8014818:	200117a0 	.word	0x200117a0

0801481c <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b082      	sub	sp, #8
 8014820:	af00      	add	r7, sp, #0
 8014822:	0002      	movs	r2, r0
 8014824:	6039      	str	r1, [r7, #0]
 8014826:	1dfb      	adds	r3, r7, #7
 8014828:	701a      	strb	r2, [r3, #0]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 801482a:	683a      	ldr	r2, [r7, #0]
 801482c:	1dfb      	adds	r3, r7, #7
 801482e:	781b      	ldrb	r3, [r3, #0]
 8014830:	0011      	movs	r1, r2
 8014832:	0018      	movs	r0, r3
 8014834:	f7ff ffb4 	bl	80147a0 <CAD_SRC_Set_ResistorRp>
 8014838:	0003      	movs	r3, r0
}
 801483a:	0018      	movs	r0, r3
 801483c:	46bd      	mov	sp, r7
 801483e:	b002      	add	sp, #8
 8014840:	bd80      	pop	{r7, pc}
	...

08014844 <CAD_StateMachine_DRP>:
#endif /* _SRC */

#if defined(_DRP)
/* function to handle DRP */
uint32_t CAD_StateMachine_DRP(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8014844:	b590      	push	{r4, r7, lr}
 8014846:	b087      	sub	sp, #28
 8014848:	af00      	add	r7, sp, #0
 801484a:	60b9      	str	r1, [r7, #8]
 801484c:	607a      	str	r2, [r7, #4]
 801484e:	210f      	movs	r1, #15
 8014850:	187b      	adds	r3, r7, r1
 8014852:	1c02      	adds	r2, r0, #0
 8014854:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8014856:	187b      	adds	r3, r7, r1
 8014858:	781b      	ldrb	r3, [r3, #0]
 801485a:	011a      	lsls	r2, r3, #4
 801485c:	4b6b      	ldr	r3, [pc, #428]	@ (8014a0c <CAD_StateMachine_DRP+0x1c8>)
 801485e:	18d3      	adds	r3, r2, r3
 8014860:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8014862:	2302      	movs	r3, #2
 8014864:	617b      	str	r3, [r7, #20]

  /*Check CAD STATE*/
  switch (_handle->cstate)
 8014866:	693b      	ldr	r3, [r7, #16]
 8014868:	785b      	ldrb	r3, [r3, #1]
 801486a:	069b      	lsls	r3, r3, #26
 801486c:	0edb      	lsrs	r3, r3, #27
 801486e:	b2db      	uxtb	r3, r3
 8014870:	2b0b      	cmp	r3, #11
 8014872:	d900      	bls.n	8014876 <CAD_StateMachine_DRP+0x32>
 8014874:	e0c4      	b.n	8014a00 <CAD_StateMachine_DRP+0x1bc>
 8014876:	009a      	lsls	r2, r3, #2
 8014878:	4b65      	ldr	r3, [pc, #404]	@ (8014a10 <CAD_StateMachine_DRP+0x1cc>)
 801487a:	18d3      	adds	r3, r2, r3
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	469f      	mov	pc, r3
#if defined(_VCONN_SUPPORT)
      /* DeInitialize Vconn management */
      (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
      /* DeInitialise VBUS power */
      (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8014880:	230f      	movs	r3, #15
 8014882:	18fb      	adds	r3, r7, r3
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	0018      	movs	r0, r3
 8014888:	f009 f8bd 	bl	801da06 <BSP_USBPD_PWR_VBUSDeInit>
      _timing = 0;
 801488c:	2300      	movs	r3, #0
 801488e:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 8014890:	693b      	ldr	r3, [r7, #16]
 8014892:	785a      	ldrb	r2, [r3, #1]
 8014894:	213e      	movs	r1, #62	@ 0x3e
 8014896:	438a      	bics	r2, r1
 8014898:	1c11      	adds	r1, r2, #0
 801489a:	2212      	movs	r2, #18
 801489c:	430a      	orrs	r2, r1
 801489e:	705a      	strb	r2, [r3, #1]
      break;
 80148a0:	e0af      	b.n	8014a02 <CAD_StateMachine_DRP+0x1be>
    }

    case USBPD_CAD_STATE_SWITCH_TO_SRC:
    case USBPD_CAD_STATE_SWITCH_TO_SNK:
    {
      LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80148a2:	240f      	movs	r4, #15
 80148a4:	193b      	adds	r3, r7, r4
 80148a6:	781a      	ldrb	r2, [r3, #0]
 80148a8:	495a      	ldr	r1, [pc, #360]	@ (8014a14 <CAD_StateMachine_DRP+0x1d0>)
 80148aa:	0013      	movs	r3, r2
 80148ac:	011b      	lsls	r3, r3, #4
 80148ae:	1a9b      	subs	r3, r3, r2
 80148b0:	009b      	lsls	r3, r3, #2
 80148b2:	585b      	ldr	r3, [r3, r1]
 80148b4:	0018      	movs	r0, r3
 80148b6:	f7ff fe13 	bl	80144e0 <LL_UCPD_RxDisable>
      if (USBPD_CAD_STATE_SWITCH_TO_SRC == _handle->cstate)
 80148ba:	693b      	ldr	r3, [r7, #16]
 80148bc:	785b      	ldrb	r3, [r3, #1]
 80148be:	223e      	movs	r2, #62	@ 0x3e
 80148c0:	4013      	ands	r3, r2
 80148c2:	b2db      	uxtb	r3, r3
 80148c4:	2b10      	cmp	r3, #16
 80148c6:	d12d      	bne.n	8014924 <CAD_StateMachine_DRP+0xe0>
      {
        USBPDM1_AssertRp(PortNum);
 80148c8:	193b      	adds	r3, r7, r4
 80148ca:	781b      	ldrb	r3, [r3, #0]
 80148cc:	0018      	movs	r0, r3
 80148ce:	f002 f961 	bl	8016b94 <USBPDM1_AssertRp>
        Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SRC;
 80148d2:	0020      	movs	r0, r4
 80148d4:	183b      	adds	r3, r7, r0
 80148d6:	781a      	ldrb	r2, [r3, #0]
 80148d8:	494e      	ldr	r1, [pc, #312]	@ (8014a14 <CAD_StateMachine_DRP+0x1d0>)
 80148da:	0013      	movs	r3, r2
 80148dc:	011b      	lsls	r3, r3, #4
 80148de:	1a9b      	subs	r3, r3, r2
 80148e0:	009b      	lsls	r3, r3, #2
 80148e2:	18cb      	adds	r3, r1, r3
 80148e4:	3310      	adds	r3, #16
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	781a      	ldrb	r2, [r3, #0]
 80148ea:	2104      	movs	r1, #4
 80148ec:	430a      	orrs	r2, r1
 80148ee:	701a      	strb	r2, [r3, #0]
        Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_DFP;
 80148f0:	183b      	adds	r3, r7, r0
 80148f2:	781a      	ldrb	r2, [r3, #0]
 80148f4:	4947      	ldr	r1, [pc, #284]	@ (8014a14 <CAD_StateMachine_DRP+0x1d0>)
 80148f6:	0013      	movs	r3, r2
 80148f8:	011b      	lsls	r3, r3, #4
 80148fa:	1a9b      	subs	r3, r3, r2
 80148fc:	009b      	lsls	r3, r3, #2
 80148fe:	18cb      	adds	r3, r1, r3
 8014900:	3310      	adds	r3, #16
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	781a      	ldrb	r2, [r3, #0]
 8014906:	2108      	movs	r1, #8
 8014908:	430a      	orrs	r2, r1
 801490a:	701a      	strb	r2, [r3, #0]
        _timing = Ports[PortNum].settings->CAD_SRCToggleTime;
 801490c:	183b      	adds	r3, r7, r0
 801490e:	781a      	ldrb	r2, [r3, #0]
 8014910:	4940      	ldr	r1, [pc, #256]	@ (8014a14 <CAD_StateMachine_DRP+0x1d0>)
 8014912:	0013      	movs	r3, r2
 8014914:	011b      	lsls	r3, r3, #4
 8014916:	1a9b      	subs	r3, r3, r2
 8014918:	009b      	lsls	r3, r3, #2
 801491a:	18cb      	adds	r3, r1, r3
 801491c:	330c      	adds	r3, #12
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	79db      	ldrb	r3, [r3, #7]
 8014922:	617b      	str	r3, [r7, #20]
      }
      if (USBPD_CAD_STATE_SWITCH_TO_SNK == _handle->cstate)
 8014924:	693b      	ldr	r3, [r7, #16]
 8014926:	785b      	ldrb	r3, [r3, #1]
 8014928:	223e      	movs	r2, #62	@ 0x3e
 801492a:	4013      	ands	r3, r2
 801492c:	b2db      	uxtb	r3, r3
 801492e:	2b12      	cmp	r3, #18
 8014930:	d12e      	bne.n	8014990 <CAD_StateMachine_DRP+0x14c>
      {
        USBPDM1_AssertRd(PortNum);
 8014932:	240f      	movs	r4, #15
 8014934:	193b      	adds	r3, r7, r4
 8014936:	781b      	ldrb	r3, [r3, #0]
 8014938:	0018      	movs	r0, r3
 801493a:	f002 f9ed 	bl	8016d18 <USBPDM1_AssertRd>
        Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SNK;
 801493e:	0020      	movs	r0, r4
 8014940:	183b      	adds	r3, r7, r0
 8014942:	781a      	ldrb	r2, [r3, #0]
 8014944:	4933      	ldr	r1, [pc, #204]	@ (8014a14 <CAD_StateMachine_DRP+0x1d0>)
 8014946:	0013      	movs	r3, r2
 8014948:	011b      	lsls	r3, r3, #4
 801494a:	1a9b      	subs	r3, r3, r2
 801494c:	009b      	lsls	r3, r3, #2
 801494e:	18cb      	adds	r3, r1, r3
 8014950:	3310      	adds	r3, #16
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	781a      	ldrb	r2, [r3, #0]
 8014956:	2104      	movs	r1, #4
 8014958:	438a      	bics	r2, r1
 801495a:	701a      	strb	r2, [r3, #0]
        Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_UFP;
 801495c:	183b      	adds	r3, r7, r0
 801495e:	781a      	ldrb	r2, [r3, #0]
 8014960:	492c      	ldr	r1, [pc, #176]	@ (8014a14 <CAD_StateMachine_DRP+0x1d0>)
 8014962:	0013      	movs	r3, r2
 8014964:	011b      	lsls	r3, r3, #4
 8014966:	1a9b      	subs	r3, r3, r2
 8014968:	009b      	lsls	r3, r3, #2
 801496a:	18cb      	adds	r3, r1, r3
 801496c:	3310      	adds	r3, #16
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	781a      	ldrb	r2, [r3, #0]
 8014972:	2108      	movs	r1, #8
 8014974:	438a      	bics	r2, r1
 8014976:	701a      	strb	r2, [r3, #0]
        _timing = Ports[PortNum].settings->CAD_SNKToggleTime;
 8014978:	183b      	adds	r3, r7, r0
 801497a:	781a      	ldrb	r2, [r3, #0]
 801497c:	4925      	ldr	r1, [pc, #148]	@ (8014a14 <CAD_StateMachine_DRP+0x1d0>)
 801497e:	0013      	movs	r3, r2
 8014980:	011b      	lsls	r3, r3, #4
 8014982:	1a9b      	subs	r3, r3, r2
 8014984:	009b      	lsls	r3, r3, #2
 8014986:	18cb      	adds	r3, r1, r3
 8014988:	330c      	adds	r3, #12
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	799b      	ldrb	r3, [r3, #6]
 801498e:	617b      	str	r3, [r7, #20]
      }
      _handle->CAD_tToggle_start = HAL_GetTick();
 8014990:	f7f3 fe3e 	bl	8008610 <HAL_GetTick>
 8014994:	0002      	movs	r2, r0
 8014996:	693b      	ldr	r3, [r7, #16]
 8014998:	605a      	str	r2, [r3, #4]
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 801499a:	693b      	ldr	r3, [r7, #16]
 801499c:	785a      	ldrb	r2, [r3, #1]
 801499e:	213e      	movs	r1, #62	@ 0x3e
 80149a0:	438a      	bics	r2, r1
 80149a2:	1c11      	adds	r1, r2, #0
 80149a4:	2202      	movs	r2, #2
 80149a6:	430a      	orrs	r2, r1
 80149a8:	705a      	strb	r2, [r3, #1]
    }
    break;
 80149aa:	e02a      	b.n	8014a02 <CAD_StateMachine_DRP+0x1be>

    case USBPD_CAD_STATE_DETACHED:
      _timing = ManageStateDetached_DRP(PortNum);
 80149ac:	230f      	movs	r3, #15
 80149ae:	18fb      	adds	r3, r7, r3
 80149b0:	781b      	ldrb	r3, [r3, #0]
 80149b2:	0018      	movs	r0, r3
 80149b4:	f000 fb06 	bl	8014fc4 <ManageStateDetached_DRP>
 80149b8:	0003      	movs	r3, r0
 80149ba:	617b      	str	r3, [r7, #20]
      break;
 80149bc:	e021      	b.n	8014a02 <CAD_StateMachine_DRP+0x1be>

    /*CAD STATE ATTACHED WAIT*/
    case USBPD_CAD_STATE_ATTACHED_WAIT:
      _timing = ManageStateAttachedWait_DRP(PortNum, pEvent, pCCXX);
 80149be:	687a      	ldr	r2, [r7, #4]
 80149c0:	68b9      	ldr	r1, [r7, #8]
 80149c2:	230f      	movs	r3, #15
 80149c4:	18fb      	adds	r3, r7, r3
 80149c6:	781b      	ldrb	r3, [r3, #0]
 80149c8:	0018      	movs	r0, r3
 80149ca:	f000 fd93 	bl	80154f4 <ManageStateAttachedWait_DRP>
 80149ce:	0003      	movs	r3, r0
 80149d0:	617b      	str	r3, [r7, #20]
      break;
 80149d2:	e016      	b.n	8014a02 <CAD_StateMachine_DRP+0x1be>
    }
#endif /* _ACCESSORY_SRC */

    /* CAD ELECTRONIC CABLE ATTACHED */
    case USBPD_CAD_STATE_EMC :
      _timing = ManageStateEMC(PortNum, pEvent, pCCXX);
 80149d4:	687a      	ldr	r2, [r7, #4]
 80149d6:	68b9      	ldr	r1, [r7, #8]
 80149d8:	230f      	movs	r3, #15
 80149da:	18fb      	adds	r3, r7, r3
 80149dc:	781b      	ldrb	r3, [r3, #0]
 80149de:	0018      	movs	r0, r3
 80149e0:	f000 fcbc 	bl	801535c <ManageStateEMC>
 80149e4:	0003      	movs	r3, r0
 80149e6:	617b      	str	r3, [r7, #20]
      break;
 80149e8:	e00b      	b.n	8014a02 <CAD_StateMachine_DRP+0x1be>

    /*CAD electronic cable with Sink ATTACHED*/
    case USBPD_CAD_STATE_ATTEMC:
    case USBPD_CAD_STATE_ATTACHED:
      _timing = ManageStateAttached_DRP(PortNum, pEvent, pCCXX);
 80149ea:	687a      	ldr	r2, [r7, #4]
 80149ec:	68b9      	ldr	r1, [r7, #8]
 80149ee:	230f      	movs	r3, #15
 80149f0:	18fb      	adds	r3, r7, r3
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	0018      	movs	r0, r3
 80149f6:	f000 fd2f 	bl	8015458 <ManageStateAttached_DRP>
 80149fa:	0003      	movs	r3, r0
 80149fc:	617b      	str	r3, [r7, #20]
      break;
 80149fe:	e000      	b.n	8014a02 <CAD_StateMachine_DRP+0x1be>

    default :
      break;
 8014a00:	46c0      	nop			@ (mov r8, r8)
  }

  return _timing;
 8014a02:	697b      	ldr	r3, [r7, #20]
}
 8014a04:	0018      	movs	r0, r3
 8014a06:	46bd      	mov	sp, r7
 8014a08:	b007      	add	sp, #28
 8014a0a:	bd90      	pop	{r4, r7, pc}
 8014a0c:	200117a0 	.word	0x200117a0
 8014a10:	0801f188 	.word	0x0801f188
 8014a14:	200117d4 	.word	0x200117d4

08014a18 <CAD_StateMachine>:
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8014a18:	b590      	push	{r4, r7, lr}
 8014a1a:	b087      	sub	sp, #28
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	60b9      	str	r1, [r7, #8]
 8014a20:	607a      	str	r2, [r7, #4]
 8014a22:	210f      	movs	r1, #15
 8014a24:	187b      	adds	r3, r7, r1
 8014a26:	1c02      	adds	r2, r0, #0
 8014a28:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8014a2a:	187b      	adds	r3, r7, r1
 8014a2c:	781b      	ldrb	r3, [r3, #0]
 8014a2e:	011a      	lsls	r2, r3, #4
 8014a30:	4b72      	ldr	r3, [pc, #456]	@ (8014bfc <CAD_StateMachine+0x1e4>)
 8014a32:	18d3      	adds	r3, r2, r3
 8014a34:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8014a36:	2302      	movs	r3, #2
 8014a38:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 8014a40:	187b      	adds	r3, r7, r1
 8014a42:	781a      	ldrb	r2, [r3, #0]
 8014a44:	496e      	ldr	r1, [pc, #440]	@ (8014c00 <CAD_StateMachine+0x1e8>)
 8014a46:	0013      	movs	r3, r2
 8014a48:	011b      	lsls	r3, r3, #4
 8014a4a:	1a9b      	subs	r3, r3, r2
 8014a4c:	009b      	lsls	r3, r3, #2
 8014a4e:	18cb      	adds	r3, r1, r3
 8014a50:	3310      	adds	r3, #16
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	781b      	ldrb	r3, [r3, #0]
 8014a56:	2210      	movs	r2, #16
 8014a58:	4013      	ands	r3, r2
 8014a5a:	b2db      	uxtb	r3, r3
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d001      	beq.n	8014a64 <CAD_StateMachine+0x4c>
  {
    return _timing;
 8014a60:	697b      	ldr	r3, [r7, #20]
 8014a62:	e0c6      	b.n	8014bf2 <CAD_StateMachine+0x1da>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 8014a64:	693b      	ldr	r3, [r7, #16]
 8014a66:	781b      	ldrb	r3, [r3, #0]
 8014a68:	227f      	movs	r2, #127	@ 0x7f
 8014a6a:	4393      	bics	r3, r2
 8014a6c:	b2db      	uxtb	r3, r3
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d00c      	beq.n	8014a8c <CAD_StateMachine+0x74>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 8014a72:	693b      	ldr	r3, [r7, #16]
 8014a74:	781a      	ldrb	r2, [r3, #0]
 8014a76:	217f      	movs	r1, #127	@ 0x7f
 8014a78:	400a      	ands	r2, r1
 8014a7a:	701a      	strb	r2, [r3, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 8014a7c:	693b      	ldr	r3, [r7, #16]
 8014a7e:	785a      	ldrb	r2, [r3, #1]
 8014a80:	213e      	movs	r1, #62	@ 0x3e
 8014a82:	438a      	bics	r2, r1
 8014a84:	1c11      	adds	r1, r2, #0
 8014a86:	2218      	movs	r2, #24
 8014a88:	430a      	orrs	r2, r1
 8014a8a:	705a      	strb	r2, [r3, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 8014a8c:	693b      	ldr	r3, [r7, #16]
 8014a8e:	785b      	ldrb	r3, [r3, #1]
 8014a90:	069b      	lsls	r3, r3, #26
 8014a92:	0edb      	lsrs	r3, r3, #27
 8014a94:	b2db      	uxtb	r3, r3
 8014a96:	2b0d      	cmp	r3, #13
 8014a98:	d06a      	beq.n	8014b70 <CAD_StateMachine+0x158>
 8014a9a:	dd00      	ble.n	8014a9e <CAD_StateMachine+0x86>
 8014a9c:	e09b      	b.n	8014bd6 <CAD_StateMachine+0x1be>
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d002      	beq.n	8014aa8 <CAD_StateMachine+0x90>
 8014aa2:	2b0c      	cmp	r3, #12
 8014aa4:	d038      	beq.n	8014b18 <CAD_StateMachine+0x100>
 8014aa6:	e096      	b.n	8014bd6 <CAD_StateMachine+0x1be>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 8014aa8:	240f      	movs	r4, #15
 8014aaa:	193b      	adds	r3, r7, r4
 8014aac:	781a      	ldrb	r2, [r3, #0]
 8014aae:	4954      	ldr	r1, [pc, #336]	@ (8014c00 <CAD_StateMachine+0x1e8>)
 8014ab0:	0013      	movs	r3, r2
 8014ab2:	011b      	lsls	r3, r3, #4
 8014ab4:	1a9b      	subs	r3, r3, r2
 8014ab6:	009b      	lsls	r3, r3, #2
 8014ab8:	585b      	ldr	r3, [r3, r1]
 8014aba:	0018      	movs	r0, r3
 8014abc:	f7ff fd1f 	bl	80144fe <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 8014ac0:	193b      	adds	r3, r7, r4
 8014ac2:	781a      	ldrb	r2, [r3, #0]
 8014ac4:	494e      	ldr	r1, [pc, #312]	@ (8014c00 <CAD_StateMachine+0x1e8>)
 8014ac6:	0013      	movs	r3, r2
 8014ac8:	011b      	lsls	r3, r3, #4
 8014aca:	1a9b      	subs	r3, r3, r2
 8014acc:	009b      	lsls	r3, r3, #2
 8014ace:	585b      	ldr	r3, [r3, r1]
 8014ad0:	0018      	movs	r0, r3
 8014ad2:	f7ff fd23 	bl	801451c <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      if (0 == PortNum)
 8014ad6:	193b      	adds	r3, r7, r4
 8014ad8:	781b      	ldrb	r3, [r3, #0]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d107      	bne.n	8014aee <CAD_StateMachine+0xd6>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 8014ade:	2102      	movs	r1, #2
 8014ae0:	2008      	movs	r0, #8
 8014ae2:	f7ff fc57 	bl	8014394 <__NVIC_SetPriority>
 8014ae6:	2008      	movs	r0, #8
 8014ae8:	f7ff fc3a 	bl	8014360 <__NVIC_EnableIRQ>
 8014aec:	e006      	b.n	8014afc <CAD_StateMachine+0xe4>
      }
#if USBPD_PORT_COUNT > 1
      else
      {
        UCPD_INSTANCE1_ENABLEIRQ;
 8014aee:	2102      	movs	r1, #2
 8014af0:	2008      	movs	r0, #8
 8014af2:	f7ff fc4f 	bl	8014394 <__NVIC_SetPriority>
 8014af6:	2008      	movs	r0, #8
 8014af8:	f7ff fc32 	bl	8014360 <__NVIC_EnableIRQ>
      }
#endif /* USBPD_PORT_COUNT > 1 */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
 8014afc:	f7f3 fd88 	bl	8008610 <HAL_GetTick>
 8014b00:	0002      	movs	r2, r0
 8014b02:	693b      	ldr	r3, [r7, #16]
 8014b04:	605a      	str	r2, [r3, #4]
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8014b06:	693b      	ldr	r3, [r7, #16]
 8014b08:	785a      	ldrb	r2, [r3, #1]
 8014b0a:	213e      	movs	r1, #62	@ 0x3e
 8014b0c:	438a      	bics	r2, r1
 8014b0e:	1c11      	adds	r1, r2, #0
 8014b10:	2202      	movs	r2, #2
 8014b12:	430a      	orrs	r2, r1
 8014b14:	705a      	strb	r2, [r3, #1]
      break;
 8014b16:	e06b      	b.n	8014bf0 <CAD_StateMachine+0x1d8>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 8014b18:	240f      	movs	r4, #15
 8014b1a:	193b      	adds	r3, r7, r4
 8014b1c:	781b      	ldrb	r3, [r3, #0]
 8014b1e:	0018      	movs	r0, r3
 8014b20:	f002 f9aa 	bl	8016e78 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 8014b24:	193b      	adds	r3, r7, r4
 8014b26:	781a      	ldrb	r2, [r3, #0]
 8014b28:	4935      	ldr	r1, [pc, #212]	@ (8014c00 <CAD_StateMachine+0x1e8>)
 8014b2a:	0013      	movs	r3, r2
 8014b2c:	011b      	lsls	r3, r3, #4
 8014b2e:	1a9b      	subs	r3, r3, r2
 8014b30:	009b      	lsls	r3, r3, #2
 8014b32:	18cb      	adds	r3, r1, r3
 8014b34:	3334      	adds	r3, #52	@ 0x34
 8014b36:	2200      	movs	r2, #0
 8014b38:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 8014b40:	693b      	ldr	r3, [r7, #16]
 8014b42:	781a      	ldrb	r2, [r3, #0]
 8014b44:	2103      	movs	r1, #3
 8014b46:	438a      	bics	r2, r1
 8014b48:	701a      	strb	r2, [r3, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 8014b4a:	68bb      	ldr	r3, [r7, #8]
 8014b4c:	2201      	movs	r2, #1
 8014b4e:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8014b50:	f7f3 fd5e 	bl	8008610 <HAL_GetTick>
 8014b54:	0002      	movs	r2, r0
 8014b56:	693b      	ldr	r3, [r7, #16]
 8014b58:	609a      	str	r2, [r3, #8]
      _timing = CAD_TERROR_RECOVERY_TIME;
 8014b5a:	231a      	movs	r3, #26
 8014b5c:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 8014b5e:	693b      	ldr	r3, [r7, #16]
 8014b60:	785a      	ldrb	r2, [r3, #1]
 8014b62:	213e      	movs	r1, #62	@ 0x3e
 8014b64:	438a      	bics	r2, r1
 8014b66:	1c11      	adds	r1, r2, #0
 8014b68:	221a      	movs	r2, #26
 8014b6a:	430a      	orrs	r2, r1
 8014b6c:	705a      	strb	r2, [r3, #1]
      break;
 8014b6e:	e03f      	b.n	8014bf0 <CAD_StateMachine+0x1d8>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 8014b70:	f7f3 fd4e 	bl	8008610 <HAL_GetTick>
 8014b74:	0002      	movs	r2, r0
 8014b76:	693b      	ldr	r3, [r7, #16]
 8014b78:	689b      	ldr	r3, [r3, #8]
 8014b7a:	1ad3      	subs	r3, r2, r3
 8014b7c:	2b1a      	cmp	r3, #26
 8014b7e:	d936      	bls.n	8014bee <CAD_StateMachine+0x1d6>
        port source  to src
        port snk     to snk
        port drp     to src   */

#if defined(_SRC) || defined(_DRP)
        if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 8014b80:	200f      	movs	r0, #15
 8014b82:	183b      	adds	r3, r7, r0
 8014b84:	781a      	ldrb	r2, [r3, #0]
 8014b86:	491e      	ldr	r1, [pc, #120]	@ (8014c00 <CAD_StateMachine+0x1e8>)
 8014b88:	0013      	movs	r3, r2
 8014b8a:	011b      	lsls	r3, r3, #4
 8014b8c:	1a9b      	subs	r3, r3, r2
 8014b8e:	009b      	lsls	r3, r3, #2
 8014b90:	18cb      	adds	r3, r1, r3
 8014b92:	3310      	adds	r3, #16
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	781b      	ldrb	r3, [r3, #0]
 8014b98:	2204      	movs	r2, #4
 8014b9a:	4013      	ands	r3, r2
 8014b9c:	b2db      	uxtb	r3, r3
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d005      	beq.n	8014bae <CAD_StateMachine+0x196>
        {
          USBPDM1_AssertRp(PortNum);
 8014ba2:	183b      	adds	r3, r7, r0
 8014ba4:	781b      	ldrb	r3, [r3, #0]
 8014ba6:	0018      	movs	r0, r3
 8014ba8:	f001 fff4 	bl	8016b94 <USBPDM1_AssertRp>
 8014bac:	e005      	b.n	8014bba <CAD_StateMachine+0x1a2>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 8014bae:	230f      	movs	r3, #15
 8014bb0:	18fb      	adds	r3, r7, r3
 8014bb2:	781b      	ldrb	r3, [r3, #0]
 8014bb4:	0018      	movs	r0, r3
 8014bb6:	f002 f8af 	bl	8016d18 <USBPDM1_AssertRd>
        }
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
 8014bba:	f7f3 fd29 	bl	8008610 <HAL_GetTick>
 8014bbe:	0002      	movs	r2, r0
 8014bc0:	693b      	ldr	r3, [r7, #16]
 8014bc2:	605a      	str	r2, [r3, #4]
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8014bc4:	693b      	ldr	r3, [r7, #16]
 8014bc6:	785a      	ldrb	r2, [r3, #1]
 8014bc8:	213e      	movs	r1, #62	@ 0x3e
 8014bca:	438a      	bics	r2, r1
 8014bcc:	1c11      	adds	r1, r2, #0
 8014bce:	2202      	movs	r2, #2
 8014bd0:	430a      	orrs	r2, r1
 8014bd2:	705a      	strb	r2, [r3, #1]
      }
      break;
 8014bd4:	e00b      	b.n	8014bee <CAD_StateMachine+0x1d6>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 8014bd6:	693b      	ldr	r3, [r7, #16]
 8014bd8:	68db      	ldr	r3, [r3, #12]
 8014bda:	687c      	ldr	r4, [r7, #4]
 8014bdc:	68b9      	ldr	r1, [r7, #8]
 8014bde:	220f      	movs	r2, #15
 8014be0:	18ba      	adds	r2, r7, r2
 8014be2:	7810      	ldrb	r0, [r2, #0]
 8014be4:	0022      	movs	r2, r4
 8014be6:	4798      	blx	r3
 8014be8:	0003      	movs	r3, r0
 8014bea:	617b      	str	r3, [r7, #20]
      break;
 8014bec:	e000      	b.n	8014bf0 <CAD_StateMachine+0x1d8>
      break;
 8014bee:	46c0      	nop			@ (mov r8, r8)
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 8014bf0:	697b      	ldr	r3, [r7, #20]
}
 8014bf2:	0018      	movs	r0, r3
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	b007      	add	sp, #28
 8014bf8:	bd90      	pop	{r4, r7, pc}
 8014bfa:	46c0      	nop			@ (mov r8, r8)
 8014bfc:	200117a0 	.word	0x200117a0
 8014c00:	200117d4 	.word	0x200117d4

08014c04 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b086      	sub	sp, #24
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	0002      	movs	r2, r0
 8014c0c:	1dfb      	adds	r3, r7, #7
 8014c0e:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8014c10:	1dfb      	adds	r3, r7, #7
 8014c12:	781b      	ldrb	r3, [r3, #0]
 8014c14:	011a      	lsls	r2, r3, #4
 8014c16:	4b45      	ldr	r3, [pc, #276]	@ (8014d2c <CAD_Check_HW_SNK+0x128>)
 8014c18:	18d3      	adds	r3, r2, r3
 8014c1a:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 8014c1c:	1dfb      	adds	r3, r7, #7
 8014c1e:	781a      	ldrb	r2, [r3, #0]
 8014c20:	4943      	ldr	r1, [pc, #268]	@ (8014d30 <CAD_Check_HW_SNK+0x12c>)
 8014c22:	0013      	movs	r3, r2
 8014c24:	011b      	lsls	r3, r3, #4
 8014c26:	1a9b      	subs	r3, r3, r2
 8014c28:	009b      	lsls	r3, r3, #2
 8014c2a:	585b      	ldr	r3, [r3, r1]
 8014c2c:	695a      	ldr	r2, [r3, #20]
 8014c2e:	23c0      	movs	r3, #192	@ 0xc0
 8014c30:	029b      	lsls	r3, r3, #10
 8014c32:	4013      	ands	r3, r2
 8014c34:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 8014c36:	1dfb      	adds	r3, r7, #7
 8014c38:	781a      	ldrb	r2, [r3, #0]
 8014c3a:	493d      	ldr	r1, [pc, #244]	@ (8014d30 <CAD_Check_HW_SNK+0x12c>)
 8014c3c:	0013      	movs	r3, r2
 8014c3e:	011b      	lsls	r3, r3, #4
 8014c40:	1a9b      	subs	r3, r3, r2
 8014c42:	009b      	lsls	r3, r3, #2
 8014c44:	585b      	ldr	r3, [r3, r1]
 8014c46:	695a      	ldr	r2, [r3, #20]
 8014c48:	23c0      	movs	r3, #192	@ 0xc0
 8014c4a:	031b      	lsls	r3, r3, #12
 8014c4c:	4013      	ands	r3, r2
 8014c4e:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 8014c50:	697b      	ldr	r3, [r7, #20]
 8014c52:	781a      	ldrb	r2, [r3, #0]
 8014c54:	2103      	movs	r1, #3
 8014c56:	438a      	bics	r2, r1
 8014c58:	701a      	strb	r2, [r3, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 8014c5a:	697b      	ldr	r3, [r7, #20]
 8014c5c:	781a      	ldrb	r2, [r3, #0]
 8014c5e:	211c      	movs	r1, #28
 8014c60:	438a      	bics	r2, r1
 8014c62:	701a      	strb	r2, [r3, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 8014c64:	693b      	ldr	r3, [r7, #16]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d02c      	beq.n	8014cc4 <CAD_Check_HW_SNK+0xc0>
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d129      	bne.n	8014cc4 <CAD_Check_HW_SNK+0xc0>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 8014c70:	697b      	ldr	r3, [r7, #20]
 8014c72:	781a      	ldrb	r2, [r3, #0]
 8014c74:	211c      	movs	r1, #28
 8014c76:	438a      	bics	r2, r1
 8014c78:	1c11      	adds	r1, r2, #0
 8014c7a:	2204      	movs	r2, #4
 8014c7c:	430a      	orrs	r2, r1
 8014c7e:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC1;
 8014c80:	697b      	ldr	r3, [r7, #20]
 8014c82:	781a      	ldrb	r2, [r3, #0]
 8014c84:	2103      	movs	r1, #3
 8014c86:	438a      	bics	r2, r1
 8014c88:	1c11      	adds	r1, r2, #0
 8014c8a:	2201      	movs	r2, #1
 8014c8c:	430a      	orrs	r2, r1
 8014c8e:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 8014c90:	693b      	ldr	r3, [r7, #16]
 8014c92:	0c18      	lsrs	r0, r3, #16
 8014c94:	1dfb      	adds	r3, r7, #7
 8014c96:	781a      	ldrb	r2, [r3, #0]
 8014c98:	4925      	ldr	r1, [pc, #148]	@ (8014d30 <CAD_Check_HW_SNK+0x12c>)
 8014c9a:	0013      	movs	r3, r2
 8014c9c:	011b      	lsls	r3, r3, #4
 8014c9e:	1a9b      	subs	r3, r3, r2
 8014ca0:	009b      	lsls	r3, r3, #2
 8014ca2:	18cb      	adds	r3, r1, r3
 8014ca4:	3310      	adds	r3, #16
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	1c01      	adds	r1, r0, #0
 8014caa:	2203      	movs	r2, #3
 8014cac:	400a      	ands	r2, r1
 8014cae:	b2d2      	uxtb	r2, r2
 8014cb0:	2103      	movs	r1, #3
 8014cb2:	400a      	ands	r2, r1
 8014cb4:	0090      	lsls	r0, r2, #2
 8014cb6:	789a      	ldrb	r2, [r3, #2]
 8014cb8:	210c      	movs	r1, #12
 8014cba:	438a      	bics	r2, r1
 8014cbc:	1c11      	adds	r1, r2, #0
 8014cbe:	1c02      	adds	r2, r0, #0
 8014cc0:	430a      	orrs	r2, r1
 8014cc2:	709a      	strb	r2, [r3, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 8014cc4:	693b      	ldr	r3, [r7, #16]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d12c      	bne.n	8014d24 <CAD_Check_HW_SNK+0x120>
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d029      	beq.n	8014d24 <CAD_Check_HW_SNK+0x120>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 8014cd0:	697b      	ldr	r3, [r7, #20]
 8014cd2:	781a      	ldrb	r2, [r3, #0]
 8014cd4:	211c      	movs	r1, #28
 8014cd6:	438a      	bics	r2, r1
 8014cd8:	1c11      	adds	r1, r2, #0
 8014cda:	2204      	movs	r2, #4
 8014cdc:	430a      	orrs	r2, r1
 8014cde:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC2;
 8014ce0:	697b      	ldr	r3, [r7, #20]
 8014ce2:	781a      	ldrb	r2, [r3, #0]
 8014ce4:	2103      	movs	r1, #3
 8014ce6:	438a      	bics	r2, r1
 8014ce8:	1c11      	adds	r1, r2, #0
 8014cea:	2202      	movs	r2, #2
 8014cec:	430a      	orrs	r2, r1
 8014cee:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	0c98      	lsrs	r0, r3, #18
 8014cf4:	1dfb      	adds	r3, r7, #7
 8014cf6:	781a      	ldrb	r2, [r3, #0]
 8014cf8:	490d      	ldr	r1, [pc, #52]	@ (8014d30 <CAD_Check_HW_SNK+0x12c>)
 8014cfa:	0013      	movs	r3, r2
 8014cfc:	011b      	lsls	r3, r3, #4
 8014cfe:	1a9b      	subs	r3, r3, r2
 8014d00:	009b      	lsls	r3, r3, #2
 8014d02:	18cb      	adds	r3, r1, r3
 8014d04:	3310      	adds	r3, #16
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	1c01      	adds	r1, r0, #0
 8014d0a:	2203      	movs	r2, #3
 8014d0c:	400a      	ands	r2, r1
 8014d0e:	b2d2      	uxtb	r2, r2
 8014d10:	2103      	movs	r1, #3
 8014d12:	400a      	ands	r2, r1
 8014d14:	0090      	lsls	r0, r2, #2
 8014d16:	789a      	ldrb	r2, [r3, #2]
 8014d18:	210c      	movs	r1, #12
 8014d1a:	438a      	bics	r2, r1
 8014d1c:	1c11      	adds	r1, r2, #0
 8014d1e:	1c02      	adds	r2, r0, #0
 8014d20:	430a      	orrs	r2, r1
 8014d22:	709a      	strb	r2, [r3, #2]
  }
}
 8014d24:	46c0      	nop			@ (mov r8, r8)
 8014d26:	46bd      	mov	sp, r7
 8014d28:	b006      	add	sp, #24
 8014d2a:	bd80      	pop	{r7, pc}
 8014d2c:	200117a0 	.word	0x200117a0
 8014d30:	200117d4 	.word	0x200117d4

08014d34 <CAD_Check_HW_SRC>:
#endif /* _DRP || _SNK */

#if defined(_DRP) || defined(_SRC)
void CAD_Check_HW_SRC(uint8_t PortNum)
{
 8014d34:	b5b0      	push	{r4, r5, r7, lr}
 8014d36:	b094      	sub	sp, #80	@ 0x50
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	0002      	movs	r2, r0
 8014d3c:	1dfb      	adds	r3, r7, #7
 8014d3e:	701a      	strb	r2, [r3, #0]
#if !defined(_RTOS)
  uint32_t CC1_value_temp;
  uint32_t CC2_value_temp;
#endif /* !_RTOS */
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8014d40:	1dfb      	adds	r3, r7, #7
 8014d42:	781b      	ldrb	r3, [r3, #0]
 8014d44:	011a      	lsls	r2, r3, #4
 8014d46:	4b45      	ldr	r3, [pc, #276]	@ (8014e5c <CAD_Check_HW_SRC+0x128>)
 8014d48:	18d3      	adds	r3, r2, r3
 8014d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  -----------------------------------------------------------------------------
  | 1: Sink   |                   |             |xx vRa|vRdUSB| vRd1.5 |vRd3.0|
  -----------------------------------------------------------------------------
  */

  CC1_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 8014d4c:	1dfb      	adds	r3, r7, #7
 8014d4e:	781a      	ldrb	r2, [r3, #0]
 8014d50:	4943      	ldr	r1, [pc, #268]	@ (8014e60 <CAD_Check_HW_SRC+0x12c>)
 8014d52:	0013      	movs	r3, r2
 8014d54:	011b      	lsls	r3, r3, #4
 8014d56:	1a9b      	subs	r3, r3, r2
 8014d58:	009b      	lsls	r3, r3, #2
 8014d5a:	585b      	ldr	r3, [r3, r1]
 8014d5c:	695b      	ldr	r3, [r3, #20]
 8014d5e:	0c1b      	lsrs	r3, r3, #16
 8014d60:	2203      	movs	r2, #3
 8014d62:	4013      	ands	r3, r2
 8014d64:	64bb      	str	r3, [r7, #72]	@ 0x48
  CC2_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;
 8014d66:	1dfb      	adds	r3, r7, #7
 8014d68:	781a      	ldrb	r2, [r3, #0]
 8014d6a:	493d      	ldr	r1, [pc, #244]	@ (8014e60 <CAD_Check_HW_SRC+0x12c>)
 8014d6c:	0013      	movs	r3, r2
 8014d6e:	011b      	lsls	r3, r3, #4
 8014d70:	1a9b      	subs	r3, r3, r2
 8014d72:	009b      	lsls	r3, r3, #2
 8014d74:	585b      	ldr	r3, [r3, r1]
 8014d76:	695b      	ldr	r3, [r3, #20]
 8014d78:	0c9b      	lsrs	r3, r3, #18
 8014d7a:	2203      	movs	r2, #3
 8014d7c:	4013      	ands	r3, r2
 8014d7e:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(_RTOS)
  /* Workaround linked to issue with Ellisys test TD.PC.E5
  - it seems that in NRTOS version, we detect a glitch during DRP transition SNK to SRC */
  CC1_value_temp = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 8014d80:	1dfb      	adds	r3, r7, #7
 8014d82:	781a      	ldrb	r2, [r3, #0]
 8014d84:	4936      	ldr	r1, [pc, #216]	@ (8014e60 <CAD_Check_HW_SRC+0x12c>)
 8014d86:	0013      	movs	r3, r2
 8014d88:	011b      	lsls	r3, r3, #4
 8014d8a:	1a9b      	subs	r3, r3, r2
 8014d8c:	009b      	lsls	r3, r3, #2
 8014d8e:	585b      	ldr	r3, [r3, r1]
 8014d90:	695b      	ldr	r3, [r3, #20]
 8014d92:	0c1b      	lsrs	r3, r3, #16
 8014d94:	2203      	movs	r2, #3
 8014d96:	4013      	ands	r3, r2
 8014d98:	643b      	str	r3, [r7, #64]	@ 0x40
  CC2_value_temp = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;
 8014d9a:	1dfb      	adds	r3, r7, #7
 8014d9c:	781a      	ldrb	r2, [r3, #0]
 8014d9e:	4930      	ldr	r1, [pc, #192]	@ (8014e60 <CAD_Check_HW_SRC+0x12c>)
 8014da0:	0013      	movs	r3, r2
 8014da2:	011b      	lsls	r3, r3, #4
 8014da4:	1a9b      	subs	r3, r3, r2
 8014da6:	009b      	lsls	r3, r3, #2
 8014da8:	585b      	ldr	r3, [r3, r1]
 8014daa:	695b      	ldr	r3, [r3, #20]
 8014dac:	0c9b      	lsrs	r3, r3, #18
 8014dae:	2203      	movs	r2, #3
 8014db0:	4013      	ands	r3, r2
 8014db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((CC1_value_temp != CC1_value) || (CC2_value_temp != CC2_value))
 8014db4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014db8:	429a      	cmp	r2, r3
 8014dba:	d14b      	bne.n	8014e54 <CAD_Check_HW_SRC+0x120>
 8014dbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014dbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014dc0:	429a      	cmp	r2, r3
 8014dc2:	d147      	bne.n	8014e54 <CAD_Check_HW_SRC+0x120>
  {
    return;
  }
#endif /* !_RTOS */

  const CCxPin_TypeDef table_cc[] =
 8014dc4:	2518      	movs	r5, #24
 8014dc6:	197b      	adds	r3, r7, r5
 8014dc8:	4a26      	ldr	r2, [pc, #152]	@ (8014e64 <CAD_Check_HW_SRC+0x130>)
 8014dca:	ca13      	ldmia	r2!, {r0, r1, r4}
 8014dcc:	c313      	stmia	r3!, {r0, r1, r4}
 8014dce:	ca13      	ldmia	r2!, {r0, r1, r4}
 8014dd0:	c313      	stmia	r3!, {r0, r1, r4}
 8014dd2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8014dd4:	c313      	stmia	r3!, {r0, r1, r4}
    CCNONE,  CC2,       CC2,
    CC1,     CCNONE,   CC1,
    CC1,     CC2,       CCNONE
  };

  const CAD_HW_Condition_TypeDef table_CurrentHWcondition[] =
 8014dd6:	240c      	movs	r4, #12
 8014dd8:	193b      	adds	r3, r7, r4
 8014dda:	4a23      	ldr	r2, [pc, #140]	@ (8014e68 <CAD_Check_HW_SRC+0x134>)
 8014ddc:	ca03      	ldmia	r2!, {r0, r1}
 8014dde:	c303      	stmia	r3!, {r0, r1}
 8014de0:	7812      	ldrb	r2, [r2, #0]
 8014de2:	701a      	strb	r2, [r3, #0]
    HW_AudioAdapter_Attachment,  HW_PwrCable_Sink_Attachment, HW_PwrCable_NoSink_Attachment,
    HW_PwrCable_Sink_Attachment,         HW_Debug_Attachment,                 HW_Attachment,
    HW_PwrCable_NoSink_Attachment,             HW_Attachment,                 HW_Detachment
  };

  if (CC1_value * 3 + CC2_value < 9)
 8014de4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014de6:	0013      	movs	r3, r2
 8014de8:	005b      	lsls	r3, r3, #1
 8014dea:	189a      	adds	r2, r3, r2
 8014dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014dee:	18d3      	adds	r3, r2, r3
 8014df0:	2b08      	cmp	r3, #8
 8014df2:	d830      	bhi.n	8014e56 <CAD_Check_HW_SRC+0x122>
  {
    _handle->cc  = table_cc[CC1_value * 3 + CC2_value];
 8014df4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014df6:	0013      	movs	r3, r2
 8014df8:	005b      	lsls	r3, r3, #1
 8014dfa:	189a      	adds	r2, r3, r2
 8014dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014dfe:	18d2      	adds	r2, r2, r3
 8014e00:	197b      	adds	r3, r7, r5
 8014e02:	0092      	lsls	r2, r2, #2
 8014e04:	58d3      	ldr	r3, [r2, r3]
 8014e06:	1c1a      	adds	r2, r3, #0
 8014e08:	2303      	movs	r3, #3
 8014e0a:	4013      	ands	r3, r2
 8014e0c:	b2da      	uxtb	r2, r3
 8014e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e10:	2103      	movs	r1, #3
 8014e12:	400a      	ands	r2, r1
 8014e14:	0010      	movs	r0, r2
 8014e16:	781a      	ldrb	r2, [r3, #0]
 8014e18:	2103      	movs	r1, #3
 8014e1a:	438a      	bics	r2, r1
 8014e1c:	1c11      	adds	r1, r2, #0
 8014e1e:	1c02      	adds	r2, r0, #0
 8014e20:	430a      	orrs	r2, r1
 8014e22:	701a      	strb	r2, [r3, #0]
    _handle->CurrentHWcondition     = table_CurrentHWcondition[CC1_value * 3 + CC2_value];
 8014e24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014e26:	0013      	movs	r3, r2
 8014e28:	005b      	lsls	r3, r3, #1
 8014e2a:	189a      	adds	r2, r3, r2
 8014e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014e2e:	18d3      	adds	r3, r2, r3
 8014e30:	193a      	adds	r2, r7, r4
 8014e32:	5cd3      	ldrb	r3, [r2, r3]
 8014e34:	1c1a      	adds	r2, r3, #0
 8014e36:	2307      	movs	r3, #7
 8014e38:	4013      	ands	r3, r2
 8014e3a:	b2da      	uxtb	r2, r3
 8014e3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e3e:	2107      	movs	r1, #7
 8014e40:	400a      	ands	r2, r1
 8014e42:	0090      	lsls	r0, r2, #2
 8014e44:	781a      	ldrb	r2, [r3, #0]
 8014e46:	211c      	movs	r1, #28
 8014e48:	438a      	bics	r2, r1
 8014e4a:	1c11      	adds	r1, r2, #0
 8014e4c:	1c02      	adds	r2, r0, #0
 8014e4e:	430a      	orrs	r2, r1
 8014e50:	701a      	strb	r2, [r3, #0]
 8014e52:	e000      	b.n	8014e56 <CAD_Check_HW_SRC+0x122>
    return;
 8014e54:	46c0      	nop			@ (mov r8, r8)
  }
}
 8014e56:	46bd      	mov	sp, r7
 8014e58:	b014      	add	sp, #80	@ 0x50
 8014e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8014e5c:	200117a0 	.word	0x200117a0
 8014e60:	200117d4 	.word	0x200117d4
 8014e64:	0801ef88 	.word	0x0801ef88
 8014e68:	0801efac 	.word	0x0801efac

08014e6c <ManageStateDetached_SNK>:
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b084      	sub	sp, #16
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	0002      	movs	r2, r0
 8014e74:	1dfb      	adds	r3, r7, #7
 8014e76:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8014e78:	1dfb      	adds	r3, r7, #7
 8014e7a:	781b      	ldrb	r3, [r3, #0]
 8014e7c:	011a      	lsls	r2, r3, #4
 8014e7e:	4b22      	ldr	r3, [pc, #136]	@ (8014f08 <ManageStateDetached_SNK+0x9c>)
 8014e80:	18d3      	adds	r3, r2, r3
 8014e82:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8014e84:	2302      	movs	r3, #2
 8014e86:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 8014e88:	1dfb      	adds	r3, r7, #7
 8014e8a:	781b      	ldrb	r3, [r3, #0]
 8014e8c:	0018      	movs	r0, r3
 8014e8e:	f7ff feb9 	bl	8014c04 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	781b      	ldrb	r3, [r3, #0]
 8014e96:	221c      	movs	r2, #28
 8014e98:	4013      	ands	r3, r2
 8014e9a:	b2db      	uxtb	r3, r3
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d103      	bne.n	8014ea8 <ManageStateDetached_SNK+0x3c>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	425b      	negs	r3, r3
 8014ea4:	60fb      	str	r3, [r7, #12]
 8014ea6:	e029      	b.n	8014efc <ManageStateDetached_SNK+0x90>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 8014ea8:	f7f3 fbb2 	bl	8008610 <HAL_GetTick>
 8014eac:	0002      	movs	r2, r0
 8014eae:	68bb      	ldr	r3, [r7, #8]
 8014eb0:	609a      	str	r2, [r3, #8]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 8014eb2:	68bb      	ldr	r3, [r7, #8]
 8014eb4:	785a      	ldrb	r2, [r3, #1]
 8014eb6:	213e      	movs	r1, #62	@ 0x3e
 8014eb8:	438a      	bics	r2, r1
 8014eba:	1c11      	adds	r1, r2, #0
 8014ebc:	2204      	movs	r2, #4
 8014ebe:	430a      	orrs	r2, r1
 8014ec0:	705a      	strb	r2, [r3, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 8014ec2:	2001      	movs	r0, #1
 8014ec4:	f7f3 fbae 	bl	8008624 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 8014ec8:	1dfb      	adds	r3, r7, #7
 8014eca:	781b      	ldrb	r3, [r3, #0]
 8014ecc:	0018      	movs	r0, r3
 8014ece:	f7ff fe99 	bl	8014c04 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 8014ed2:	68bb      	ldr	r3, [r7, #8]
 8014ed4:	781b      	ldrb	r3, [r3, #0]
 8014ed6:	221c      	movs	r2, #28
 8014ed8:	4013      	ands	r3, r2
 8014eda:	b2db      	uxtb	r3, r3
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d108      	bne.n	8014ef2 <ManageStateDetached_SNK+0x86>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8014ee0:	68bb      	ldr	r3, [r7, #8]
 8014ee2:	785a      	ldrb	r2, [r3, #1]
 8014ee4:	213e      	movs	r1, #62	@ 0x3e
 8014ee6:	438a      	bics	r2, r1
 8014ee8:	1c11      	adds	r1, r2, #0
 8014eea:	2202      	movs	r2, #2
 8014eec:	430a      	orrs	r2, r1
 8014eee:	705a      	strb	r2, [r3, #1]
 8014ef0:	e004      	b.n	8014efc <ManageStateDetached_SNK+0x90>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 8014ef2:	1dfb      	adds	r3, r7, #7
 8014ef4:	781b      	ldrb	r3, [r3, #0]
 8014ef6:	0018      	movs	r0, r3
 8014ef8:	f008 fd74 	bl	801d9e4 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 8014efc:	68fb      	ldr	r3, [r7, #12]
}
 8014efe:	0018      	movs	r0, r3
 8014f00:	46bd      	mov	sp, r7
 8014f02:	b004      	add	sp, #16
 8014f04:	bd80      	pop	{r7, pc}
 8014f06:	46c0      	nop			@ (mov r8, r8)
 8014f08:	200117a0 	.word	0x200117a0

08014f0c <ManageStateDetached_SRC>:
#endif /* _DRP || _SNK */

#if defined(_SRC) || defined(_DRP)
static uint32_t ManageStateDetached_SRC(uint8_t PortNum)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b084      	sub	sp, #16
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	0002      	movs	r2, r0
 8014f14:	1dfb      	adds	r3, r7, #7
 8014f16:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8014f18:	1dfb      	adds	r3, r7, #7
 8014f1a:	781b      	ldrb	r3, [r3, #0]
 8014f1c:	011a      	lsls	r2, r3, #4
 8014f1e:	4b28      	ldr	r3, [pc, #160]	@ (8014fc0 <ManageStateDetached_SRC+0xb4>)
 8014f20:	18d3      	adds	r3, r2, r3
 8014f22:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8014f24:	2302      	movs	r3, #2
 8014f26:	60fb      	str	r3, [r7, #12]

  if (_handle->CAD_ResistorUpdateflag == USBPD_TRUE)
 8014f28:	68bb      	ldr	r3, [r7, #8]
 8014f2a:	785b      	ldrb	r3, [r3, #1]
 8014f2c:	2201      	movs	r2, #1
 8014f2e:	4013      	ands	r3, r2
 8014f30:	b2db      	uxtb	r3, r3
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d00c      	beq.n	8014f50 <ManageStateDetached_SRC+0x44>
  {
    /* update the resistor value */
    USBPDM1_AssertRp(PortNum);
 8014f36:	1dfb      	adds	r3, r7, #7
 8014f38:	781b      	ldrb	r3, [r3, #0]
 8014f3a:	0018      	movs	r0, r3
 8014f3c:	f001 fe2a 	bl	8016b94 <USBPDM1_AssertRp>
    _handle->CAD_ResistorUpdateflag = USBPD_FALSE;
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	785a      	ldrb	r2, [r3, #1]
 8014f44:	2101      	movs	r1, #1
 8014f46:	438a      	bics	r2, r1
 8014f48:	705a      	strb	r2, [r3, #1]

    /* let time to internal state machine update */
    HAL_Delay(1);
 8014f4a:	2001      	movs	r0, #1
 8014f4c:	f7f3 fb6a 	bl	8008624 <HAL_Delay>
  }

  CAD_Check_HW_SRC(PortNum);
 8014f50:	1dfb      	adds	r3, r7, #7
 8014f52:	781b      	ldrb	r3, [r3, #0]
 8014f54:	0018      	movs	r0, r3
 8014f56:	f7ff feed 	bl	8014d34 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	221c      	movs	r2, #28
 8014f60:	4013      	ands	r3, r2
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d103      	bne.n	8014f70 <ManageStateDetached_SRC+0x64>
  {
#ifdef _LOW_POWER
    /* value returned for a SRC */
    _timing = CAD_DETACH_POLLING;
#else
    _timing = CAD_INFINITE_TIME;
 8014f68:	2301      	movs	r3, #1
 8014f6a:	425b      	negs	r3, r3
 8014f6c:	60fb      	str	r3, [r7, #12]
 8014f6e:	e021      	b.n	8014fb4 <ManageStateDetached_SRC+0xa8>
#endif /* _LOW_POWER */
  }
  else
  {
    if (_handle->CurrentHWcondition == HW_PwrCable_NoSink_Attachment)
 8014f70:	68bb      	ldr	r3, [r7, #8]
 8014f72:	781b      	ldrb	r3, [r3, #0]
 8014f74:	221c      	movs	r2, #28
 8014f76:	4013      	ands	r3, r2
 8014f78:	b2db      	uxtb	r3, r3
 8014f7a:	2b08      	cmp	r3, #8
 8014f7c:	d108      	bne.n	8014f90 <ManageStateDetached_SRC+0x84>
    {
      _handle->cstate = USBPD_CAD_STATE_EMC;
 8014f7e:	68bb      	ldr	r3, [r7, #8]
 8014f80:	785a      	ldrb	r2, [r3, #1]
 8014f82:	213e      	movs	r1, #62	@ 0x3e
 8014f84:	438a      	bics	r2, r1
 8014f86:	1c11      	adds	r1, r2, #0
 8014f88:	2208      	movs	r2, #8
 8014f8a:	430a      	orrs	r2, r1
 8014f8c:	705a      	strb	r2, [r3, #1]
 8014f8e:	e011      	b.n	8014fb4 <ManageStateDetached_SRC+0xa8>
    }
    else
    {
      /* Get the time of this event */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8014f90:	f7f3 fb3e 	bl	8008610 <HAL_GetTick>
 8014f94:	0002      	movs	r2, r0
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	609a      	str	r2, [r3, #8]
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 8014f9a:	68bb      	ldr	r3, [r7, #8]
 8014f9c:	785a      	ldrb	r2, [r3, #1]
 8014f9e:	213e      	movs	r1, #62	@ 0x3e
 8014fa0:	438a      	bics	r2, r1
 8014fa2:	1c11      	adds	r1, r2, #0
 8014fa4:	2204      	movs	r2, #4
 8014fa6:	430a      	orrs	r2, r1
 8014fa8:	705a      	strb	r2, [r3, #1]

      BSP_USBPD_PWR_VBUSInit(PortNum);
 8014faa:	1dfb      	adds	r3, r7, #7
 8014fac:	781b      	ldrb	r3, [r3, #0]
 8014fae:	0018      	movs	r0, r3
 8014fb0:	f008 fd18 	bl	801d9e4 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 8014fb4:	68fb      	ldr	r3, [r7, #12]
}
 8014fb6:	0018      	movs	r0, r3
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	b004      	add	sp, #16
 8014fbc:	bd80      	pop	{r7, pc}
 8014fbe:	46c0      	nop			@ (mov r8, r8)
 8014fc0:	200117a0 	.word	0x200117a0

08014fc4 <ManageStateDetached_DRP>:
#endif /* _SRC || _DRP */

#if defined(_DRP)
static uint32_t ManageStateDetached_DRP(uint8_t PortNum)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b084      	sub	sp, #16
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	0002      	movs	r2, r0
 8014fcc:	1dfb      	adds	r3, r7, #7
 8014fce:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8014fd0:	1dfb      	adds	r3, r7, #7
 8014fd2:	781b      	ldrb	r3, [r3, #0]
 8014fd4:	011a      	lsls	r2, r3, #4
 8014fd6:	4b68      	ldr	r3, [pc, #416]	@ (8015178 <ManageStateDetached_DRP+0x1b4>)
 8014fd8:	18d3      	adds	r3, r2, r3
 8014fda:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8014fdc:	2302      	movs	r3, #2
 8014fde:	60fb      	str	r3, [r7, #12]

  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 8014fe0:	1dfb      	adds	r3, r7, #7
 8014fe2:	781a      	ldrb	r2, [r3, #0]
 8014fe4:	4965      	ldr	r1, [pc, #404]	@ (801517c <ManageStateDetached_DRP+0x1b8>)
 8014fe6:	0013      	movs	r3, r2
 8014fe8:	011b      	lsls	r3, r3, #4
 8014fea:	1a9b      	subs	r3, r3, r2
 8014fec:	009b      	lsls	r3, r3, #2
 8014fee:	18cb      	adds	r3, r1, r3
 8014ff0:	3310      	adds	r3, #16
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	781b      	ldrb	r3, [r3, #0]
 8014ff6:	2204      	movs	r2, #4
 8014ff8:	4013      	ands	r3, r2
 8014ffa:	b2db      	uxtb	r3, r3
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d005      	beq.n	801500c <ManageStateDetached_DRP+0x48>
  {
    ManageStateDetached_SRC(PortNum);
 8015000:	1dfb      	adds	r3, r7, #7
 8015002:	781b      	ldrb	r3, [r3, #0]
 8015004:	0018      	movs	r0, r3
 8015006:	f7ff ff81 	bl	8014f0c <ManageStateDetached_SRC>
 801500a:	e004      	b.n	8015016 <ManageStateDetached_DRP+0x52>
  }
  else
  {
    ManageStateDetached_SNK(PortNum);
 801500c:	1dfb      	adds	r3, r7, #7
 801500e:	781b      	ldrb	r3, [r3, #0]
 8015010:	0018      	movs	r0, r3
 8015012:	f7ff ff2b 	bl	8014e6c <ManageStateDetached_SNK>
  }

  /* Manage the toggle */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	781b      	ldrb	r3, [r3, #0]
 801501a:	221c      	movs	r2, #28
 801501c:	4013      	ands	r3, r2
 801501e:	b2db      	uxtb	r3, r3
 8015020:	2b00      	cmp	r3, #0
 8015022:	d000      	beq.n	8015026 <ManageStateDetached_DRP+0x62>
 8015024:	e0a3      	b.n	801516e <ManageStateDetached_DRP+0x1aa>
  {
    switch (Ports[PortNum].params->PE_PowerRole)
 8015026:	1dfb      	adds	r3, r7, #7
 8015028:	781a      	ldrb	r2, [r3, #0]
 801502a:	4954      	ldr	r1, [pc, #336]	@ (801517c <ManageStateDetached_DRP+0x1b8>)
 801502c:	0013      	movs	r3, r2
 801502e:	011b      	lsls	r3, r3, #4
 8015030:	1a9b      	subs	r3, r3, r2
 8015032:	009b      	lsls	r3, r3, #2
 8015034:	18cb      	adds	r3, r1, r3
 8015036:	3310      	adds	r3, #16
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	781b      	ldrb	r3, [r3, #0]
 801503c:	075b      	lsls	r3, r3, #29
 801503e:	0fdb      	lsrs	r3, r3, #31
 8015040:	b2db      	uxtb	r3, r3
 8015042:	2b00      	cmp	r3, #0
 8015044:	d048      	beq.n	80150d8 <ManageStateDetached_DRP+0x114>
 8015046:	2b01      	cmp	r3, #1
 8015048:	d000      	beq.n	801504c <ManageStateDetached_DRP+0x88>
 801504a:	e08b      	b.n	8015164 <ManageStateDetached_DRP+0x1a0>
    {
      case USBPD_PORTPOWERROLE_SRC :
        if ((HAL_GetTick() - _handle->CAD_tToggle_start) > Ports[PortNum].settings->CAD_SRCToggleTime)
 801504c:	f7f3 fae0 	bl	8008610 <HAL_GetTick>
 8015050:	0002      	movs	r2, r0
 8015052:	68bb      	ldr	r3, [r7, #8]
 8015054:	685b      	ldr	r3, [r3, #4]
 8015056:	1ad1      	subs	r1, r2, r3
 8015058:	1dfb      	adds	r3, r7, #7
 801505a:	781a      	ldrb	r2, [r3, #0]
 801505c:	4847      	ldr	r0, [pc, #284]	@ (801517c <ManageStateDetached_DRP+0x1b8>)
 801505e:	0013      	movs	r3, r2
 8015060:	011b      	lsls	r3, r3, #4
 8015062:	1a9b      	subs	r3, r3, r2
 8015064:	009b      	lsls	r3, r3, #2
 8015066:	18c3      	adds	r3, r0, r3
 8015068:	330c      	adds	r3, #12
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	79db      	ldrb	r3, [r3, #7]
 801506e:	4299      	cmp	r1, r3
 8015070:	d97a      	bls.n	8015168 <ManageStateDetached_DRP+0x1a4>
        {
          _handle->CAD_tToggle_start = HAL_GetTick();
 8015072:	f7f3 facd 	bl	8008610 <HAL_GetTick>
 8015076:	0002      	movs	r2, r0
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	605a      	str	r2, [r3, #4]
          Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SNK;
 801507c:	1dfb      	adds	r3, r7, #7
 801507e:	781a      	ldrb	r2, [r3, #0]
 8015080:	493e      	ldr	r1, [pc, #248]	@ (801517c <ManageStateDetached_DRP+0x1b8>)
 8015082:	0013      	movs	r3, r2
 8015084:	011b      	lsls	r3, r3, #4
 8015086:	1a9b      	subs	r3, r3, r2
 8015088:	009b      	lsls	r3, r3, #2
 801508a:	18cb      	adds	r3, r1, r3
 801508c:	3310      	adds	r3, #16
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	781a      	ldrb	r2, [r3, #0]
 8015092:	2104      	movs	r1, #4
 8015094:	438a      	bics	r2, r1
 8015096:	701a      	strb	r2, [r3, #0]
          Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_UFP;
 8015098:	1dfb      	adds	r3, r7, #7
 801509a:	781a      	ldrb	r2, [r3, #0]
 801509c:	4937      	ldr	r1, [pc, #220]	@ (801517c <ManageStateDetached_DRP+0x1b8>)
 801509e:	0013      	movs	r3, r2
 80150a0:	011b      	lsls	r3, r3, #4
 80150a2:	1a9b      	subs	r3, r3, r2
 80150a4:	009b      	lsls	r3, r3, #2
 80150a6:	18cb      	adds	r3, r1, r3
 80150a8:	3310      	adds	r3, #16
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	781a      	ldrb	r2, [r3, #0]
 80150ae:	2108      	movs	r1, #8
 80150b0:	438a      	bics	r2, r1
 80150b2:	701a      	strb	r2, [r3, #0]
          _timing = Ports[PortNum].settings->CAD_SNKToggleTime;
 80150b4:	1dfb      	adds	r3, r7, #7
 80150b6:	781a      	ldrb	r2, [r3, #0]
 80150b8:	4930      	ldr	r1, [pc, #192]	@ (801517c <ManageStateDetached_DRP+0x1b8>)
 80150ba:	0013      	movs	r3, r2
 80150bc:	011b      	lsls	r3, r3, #4
 80150be:	1a9b      	subs	r3, r3, r2
 80150c0:	009b      	lsls	r3, r3, #2
 80150c2:	18cb      	adds	r3, r1, r3
 80150c4:	330c      	adds	r3, #12
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	799b      	ldrb	r3, [r3, #6]
 80150ca:	60fb      	str	r3, [r7, #12]
          USBPDM1_AssertRd(PortNum);
 80150cc:	1dfb      	adds	r3, r7, #7
 80150ce:	781b      	ldrb	r3, [r3, #0]
 80150d0:	0018      	movs	r0, r3
 80150d2:	f001 fe21 	bl	8016d18 <USBPDM1_AssertRd>
        }
        break;
 80150d6:	e047      	b.n	8015168 <ManageStateDetached_DRP+0x1a4>
      case USBPD_PORTPOWERROLE_SNK :
        if ((HAL_GetTick() - _handle->CAD_tToggle_start) > Ports[PortNum].settings->CAD_SNKToggleTime)
 80150d8:	f7f3 fa9a 	bl	8008610 <HAL_GetTick>
 80150dc:	0002      	movs	r2, r0
 80150de:	68bb      	ldr	r3, [r7, #8]
 80150e0:	685b      	ldr	r3, [r3, #4]
 80150e2:	1ad1      	subs	r1, r2, r3
 80150e4:	1dfb      	adds	r3, r7, #7
 80150e6:	781a      	ldrb	r2, [r3, #0]
 80150e8:	4824      	ldr	r0, [pc, #144]	@ (801517c <ManageStateDetached_DRP+0x1b8>)
 80150ea:	0013      	movs	r3, r2
 80150ec:	011b      	lsls	r3, r3, #4
 80150ee:	1a9b      	subs	r3, r3, r2
 80150f0:	009b      	lsls	r3, r3, #2
 80150f2:	18c3      	adds	r3, r0, r3
 80150f4:	330c      	adds	r3, #12
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	799b      	ldrb	r3, [r3, #6]
 80150fa:	4299      	cmp	r1, r3
 80150fc:	d936      	bls.n	801516c <ManageStateDetached_DRP+0x1a8>
        {
          _handle->CAD_tToggle_start = HAL_GetTick();
 80150fe:	f7f3 fa87 	bl	8008610 <HAL_GetTick>
 8015102:	0002      	movs	r2, r0
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	605a      	str	r2, [r3, #4]
          Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SRC;
 8015108:	1dfb      	adds	r3, r7, #7
 801510a:	781a      	ldrb	r2, [r3, #0]
 801510c:	491b      	ldr	r1, [pc, #108]	@ (801517c <ManageStateDetached_DRP+0x1b8>)
 801510e:	0013      	movs	r3, r2
 8015110:	011b      	lsls	r3, r3, #4
 8015112:	1a9b      	subs	r3, r3, r2
 8015114:	009b      	lsls	r3, r3, #2
 8015116:	18cb      	adds	r3, r1, r3
 8015118:	3310      	adds	r3, #16
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	781a      	ldrb	r2, [r3, #0]
 801511e:	2104      	movs	r1, #4
 8015120:	430a      	orrs	r2, r1
 8015122:	701a      	strb	r2, [r3, #0]
          Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_DFP;
 8015124:	1dfb      	adds	r3, r7, #7
 8015126:	781a      	ldrb	r2, [r3, #0]
 8015128:	4914      	ldr	r1, [pc, #80]	@ (801517c <ManageStateDetached_DRP+0x1b8>)
 801512a:	0013      	movs	r3, r2
 801512c:	011b      	lsls	r3, r3, #4
 801512e:	1a9b      	subs	r3, r3, r2
 8015130:	009b      	lsls	r3, r3, #2
 8015132:	18cb      	adds	r3, r1, r3
 8015134:	3310      	adds	r3, #16
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	781a      	ldrb	r2, [r3, #0]
 801513a:	2108      	movs	r1, #8
 801513c:	430a      	orrs	r2, r1
 801513e:	701a      	strb	r2, [r3, #0]
          _timing = Ports[PortNum].settings->CAD_SRCToggleTime;
 8015140:	1dfb      	adds	r3, r7, #7
 8015142:	781a      	ldrb	r2, [r3, #0]
 8015144:	490d      	ldr	r1, [pc, #52]	@ (801517c <ManageStateDetached_DRP+0x1b8>)
 8015146:	0013      	movs	r3, r2
 8015148:	011b      	lsls	r3, r3, #4
 801514a:	1a9b      	subs	r3, r3, r2
 801514c:	009b      	lsls	r3, r3, #2
 801514e:	18cb      	adds	r3, r1, r3
 8015150:	330c      	adds	r3, #12
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	79db      	ldrb	r3, [r3, #7]
 8015156:	60fb      	str	r3, [r7, #12]
          USBPDM1_AssertRp(PortNum);
 8015158:	1dfb      	adds	r3, r7, #7
 801515a:	781b      	ldrb	r3, [r3, #0]
 801515c:	0018      	movs	r0, r3
 801515e:	f001 fd19 	bl	8016b94 <USBPDM1_AssertRp>
        }
        break;
 8015162:	e003      	b.n	801516c <ManageStateDetached_DRP+0x1a8>
      default:
        break;
 8015164:	46c0      	nop			@ (mov r8, r8)
 8015166:	e002      	b.n	801516e <ManageStateDetached_DRP+0x1aa>
        break;
 8015168:	46c0      	nop			@ (mov r8, r8)
 801516a:	e000      	b.n	801516e <ManageStateDetached_DRP+0x1aa>
        break;
 801516c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return _timing;
 801516e:	68fb      	ldr	r3, [r7, #12]
}
 8015170:	0018      	movs	r0, r3
 8015172:	46bd      	mov	sp, r7
 8015174:	b004      	add	sp, #16
 8015176:	bd80      	pop	{r7, pc}
 8015178:	200117a0 	.word	0x200117a0
 801517c:	200117d4 	.word	0x200117d4

08015180 <ManageStateAttachedWait_SRC>:
#endif /* _DRP */

#if defined(_DRP) || defined(_SRC)
static uint32_t ManageStateAttachedWait_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8015180:	b590      	push	{r4, r7, lr}
 8015182:	b089      	sub	sp, #36	@ 0x24
 8015184:	af00      	add	r7, sp, #0
 8015186:	60b9      	str	r1, [r7, #8]
 8015188:	607a      	str	r2, [r7, #4]
 801518a:	240f      	movs	r4, #15
 801518c:	193b      	adds	r3, r7, r4
 801518e:	1c02      	adds	r2, r0, #0
 8015190:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015192:	193b      	adds	r3, r7, r4
 8015194:	781b      	ldrb	r3, [r3, #0]
 8015196:	011a      	lsls	r2, r3, #4
 8015198:	4b6f      	ldr	r3, [pc, #444]	@ (8015358 <ManageStateAttachedWait_SRC+0x1d8>)
 801519a:	18d3      	adds	r3, r2, r3
 801519c:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = 2;
 801519e:	2302      	movs	r3, #2
 80151a0:	61fb      	str	r3, [r7, #28]

  /* Evaluate elapsed time in Attach_Wait state */
  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 80151a2:	f7f3 fa35 	bl	8008610 <HAL_GetTick>
 80151a6:	0002      	movs	r2, r0
 80151a8:	69bb      	ldr	r3, [r7, #24]
 80151aa:	689b      	ldr	r3, [r3, #8]
 80151ac:	1ad3      	subs	r3, r2, r3
 80151ae:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SRC(PortNum);
 80151b0:	193b      	adds	r3, r7, r4
 80151b2:	781b      	ldrb	r3, [r3, #0]
 80151b4:	0018      	movs	r0, r3
 80151b6:	f7ff fdbd 	bl	8014d34 <CAD_Check_HW_SRC>

  if ((_handle->CurrentHWcondition != HW_Detachment) && (_handle->CurrentHWcondition != HW_PwrCable_NoSink_Attachment))
 80151ba:	69bb      	ldr	r3, [r7, #24]
 80151bc:	781b      	ldrb	r3, [r3, #0]
 80151be:	221c      	movs	r2, #28
 80151c0:	4013      	ands	r3, r2
 80151c2:	b2db      	uxtb	r3, r3
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d100      	bne.n	80151ca <ManageStateAttachedWait_SRC+0x4a>
 80151c8:	e094      	b.n	80152f4 <ManageStateAttachedWait_SRC+0x174>
 80151ca:	69bb      	ldr	r3, [r7, #24]
 80151cc:	781b      	ldrb	r3, [r3, #0]
 80151ce:	221c      	movs	r2, #28
 80151d0:	4013      	ands	r3, r2
 80151d2:	b2db      	uxtb	r3, r3
 80151d4:	2b08      	cmp	r3, #8
 80151d6:	d100      	bne.n	80151da <ManageStateAttachedWait_SRC+0x5a>
 80151d8:	e08c      	b.n	80152f4 <ManageStateAttachedWait_SRC+0x174>
  {
    if (USBPD_FALSE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_BELOWVSAFE0V))
 80151da:	193b      	adds	r3, r7, r4
 80151dc:	781b      	ldrb	r3, [r3, #0]
 80151de:	2100      	movs	r1, #0
 80151e0:	0018      	movs	r0, r3
 80151e2:	f008 fa67 	bl	801d6b4 <USBPD_PWR_IF_GetVBUSStatus>
 80151e6:	1e03      	subs	r3, r0, #0
 80151e8:	d106      	bne.n	80151f8 <ManageStateAttachedWait_SRC+0x78>
    {
      /* reset the timing because VBUS threshold not yet reach */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 80151ea:	f7f3 fa11 	bl	8008610 <HAL_GetTick>
 80151ee:	0002      	movs	r2, r0
 80151f0:	69bb      	ldr	r3, [r7, #24]
 80151f2:	609a      	str	r2, [r3, #8]
      return CAD_TCCDEBOUCE_THRESHOLD;
 80151f4:	2378      	movs	r3, #120	@ 0x78
 80151f6:	e0ab      	b.n	8015350 <ManageStateAttachedWait_SRC+0x1d0>
    }

    /* Check tCCDebounce */
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 80151f8:	697b      	ldr	r3, [r7, #20]
 80151fa:	2b78      	cmp	r3, #120	@ 0x78
 80151fc:	d800      	bhi.n	8015200 <ManageStateAttachedWait_SRC+0x80>
 80151fe:	e073      	b.n	80152e8 <ManageStateAttachedWait_SRC+0x168>
    {
      switch (_handle->CurrentHWcondition)
 8015200:	69bb      	ldr	r3, [r7, #24]
 8015202:	781b      	ldrb	r3, [r3, #0]
 8015204:	06db      	lsls	r3, r3, #27
 8015206:	0f5b      	lsrs	r3, r3, #29
 8015208:	b2db      	uxtb	r3, r3
 801520a:	2b03      	cmp	r3, #3
 801520c:	d026      	beq.n	801525c <ManageStateAttachedWait_SRC+0xdc>
 801520e:	dc58      	bgt.n	80152c2 <ManageStateAttachedWait_SRC+0x142>
 8015210:	2b01      	cmp	r3, #1
 8015212:	d002      	beq.n	801521a <ManageStateAttachedWait_SRC+0x9a>
 8015214:	2b02      	cmp	r3, #2
 8015216:	d03a      	beq.n	801528e <ManageStateAttachedWait_SRC+0x10e>
 8015218:	e053      	b.n	80152c2 <ManageStateAttachedWait_SRC+0x142>
      {
        case HW_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 801521a:	69bb      	ldr	r3, [r7, #24]
 801521c:	781b      	ldrb	r3, [r3, #0]
 801521e:	079b      	lsls	r3, r3, #30
 8015220:	0f9b      	lsrs	r3, r3, #30
 8015222:	b2db      	uxtb	r3, r3
 8015224:	001a      	movs	r2, r3
 8015226:	230f      	movs	r3, #15
 8015228:	18fb      	adds	r3, r7, r3
 801522a:	781b      	ldrb	r3, [r3, #0]
 801522c:	0011      	movs	r1, r2
 801522e:	0018      	movs	r0, r3
 8015230:	f001 fec4 	bl	8016fbc <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8015234:	69bb      	ldr	r3, [r7, #24]
 8015236:	785a      	ldrb	r2, [r3, #1]
 8015238:	213e      	movs	r1, #62	@ 0x3e
 801523a:	438a      	bics	r2, r1
 801523c:	1c11      	adds	r1, r2, #0
 801523e:	2206      	movs	r2, #6
 8015240:	430a      	orrs	r2, r1
 8015242:	705a      	strb	r2, [r3, #1]
          *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8015244:	68bb      	ldr	r3, [r7, #8]
 8015246:	2202      	movs	r2, #2
 8015248:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 801524a:	69bb      	ldr	r3, [r7, #24]
 801524c:	781b      	ldrb	r3, [r3, #0]
 801524e:	079b      	lsls	r3, r3, #30
 8015250:	0f9b      	lsrs	r3, r3, #30
 8015252:	b2db      	uxtb	r3, r3
 8015254:	001a      	movs	r2, r3
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	601a      	str	r2, [r3, #0]
          break;
 801525a:	e03b      	b.n	80152d4 <ManageStateAttachedWait_SRC+0x154>

        case HW_PwrCable_Sink_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 801525c:	69bb      	ldr	r3, [r7, #24]
 801525e:	781b      	ldrb	r3, [r3, #0]
 8015260:	079b      	lsls	r3, r3, #30
 8015262:	0f9b      	lsrs	r3, r3, #30
 8015264:	b2db      	uxtb	r3, r3
 8015266:	001a      	movs	r2, r3
 8015268:	230f      	movs	r3, #15
 801526a:	18fb      	adds	r3, r7, r3
 801526c:	781b      	ldrb	r3, [r3, #0]
 801526e:	0011      	movs	r1, r2
 8015270:	0018      	movs	r0, r3
 8015272:	f001 fea3 	bl	8016fbc <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTEMC;
 8015276:	69bb      	ldr	r3, [r7, #24]
 8015278:	785a      	ldrb	r2, [r3, #1]
 801527a:	213e      	movs	r1, #62	@ 0x3e
 801527c:	438a      	bics	r2, r1
 801527e:	1c11      	adds	r1, r2, #0
 8015280:	220a      	movs	r2, #10
 8015282:	430a      	orrs	r2, r1
 8015284:	705a      	strb	r2, [r3, #1]
          *pEvent = USBPD_CAD_EVENT_ATTEMC;
 8015286:	68bb      	ldr	r3, [r7, #8]
 8015288:	2204      	movs	r2, #4
 801528a:	701a      	strb	r2, [r3, #0]
          break;
 801528c:	e022      	b.n	80152d4 <ManageStateAttachedWait_SRC+0x154>

        case HW_PwrCable_NoSink_Attachment:
          BSP_USBPD_PWR_VBUSDeInit(PortNum);
 801528e:	230f      	movs	r3, #15
 8015290:	18fb      	adds	r3, r7, r3
 8015292:	781b      	ldrb	r3, [r3, #0]
 8015294:	0018      	movs	r0, r3
 8015296:	f008 fbb6 	bl	801da06 <BSP_USBPD_PWR_VBUSDeInit>
          _handle->cstate = USBPD_CAD_STATE_EMC;
 801529a:	69bb      	ldr	r3, [r7, #24]
 801529c:	785a      	ldrb	r2, [r3, #1]
 801529e:	213e      	movs	r1, #62	@ 0x3e
 80152a0:	438a      	bics	r2, r1
 80152a2:	1c11      	adds	r1, r2, #0
 80152a4:	2208      	movs	r2, #8
 80152a6:	430a      	orrs	r2, r1
 80152a8:	705a      	strb	r2, [r3, #1]
          *pEvent = USBPD_CAD_EVENT_EMC;
 80152aa:	68bb      	ldr	r3, [r7, #8]
 80152ac:	2203      	movs	r2, #3
 80152ae:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 80152b0:	69bb      	ldr	r3, [r7, #24]
 80152b2:	781b      	ldrb	r3, [r3, #0]
 80152b4:	079b      	lsls	r3, r3, #30
 80152b6:	0f9b      	lsrs	r3, r3, #30
 80152b8:	b2db      	uxtb	r3, r3
 80152ba:	001a      	movs	r2, r3
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	601a      	str	r2, [r3, #0]
          break;
 80152c0:	e008      	b.n	80152d4 <ManageStateAttachedWait_SRC+0x154>
#endif /* _ACCESSORY_SRC */

        case HW_Detachment:
        default:
#if !defined(_ACCESSORY_SRC)
          _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 80152c2:	69bb      	ldr	r3, [r7, #24]
 80152c4:	785a      	ldrb	r2, [r3, #1]
 80152c6:	213e      	movs	r1, #62	@ 0x3e
 80152c8:	438a      	bics	r2, r1
 80152ca:	1c11      	adds	r1, r2, #0
 80152cc:	2216      	movs	r2, #22
 80152ce:	430a      	orrs	r2, r1
 80152d0:	705a      	strb	r2, [r3, #1]
#endif /* _ACCESSORY_SRC */
          break;
 80152d2:	46c0      	nop			@ (mov r8, r8)
      } /* end of switch */
      *pCCXX = _handle->cc;
 80152d4:	69bb      	ldr	r3, [r7, #24]
 80152d6:	781b      	ldrb	r3, [r3, #0]
 80152d8:	079b      	lsls	r3, r3, #30
 80152da:	0f9b      	lsrs	r3, r3, #30
 80152dc:	b2db      	uxtb	r3, r3
 80152de:	001a      	movs	r2, r3
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	601a      	str	r2, [r3, #0]
      _timing = 2;
 80152e4:	2302      	movs	r3, #2
 80152e6:	61fb      	str	r3, [r7, #28]
    }
    /* reset the flag for CAD_tDebounce */
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 80152e8:	69bb      	ldr	r3, [r7, #24]
 80152ea:	781a      	ldrb	r2, [r3, #0]
 80152ec:	2120      	movs	r1, #32
 80152ee:	438a      	bics	r2, r1
 80152f0:	701a      	strb	r2, [r3, #0]
 80152f2:	e02c      	b.n	801534e <ManageStateAttachedWait_SRC+0x1ce>
  }
  else /* CAD_HW_Condition[PortNum] = HW_Detachment */
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 80152f4:	69bb      	ldr	r3, [r7, #24]
 80152f6:	781b      	ldrb	r3, [r3, #0]
 80152f8:	2220      	movs	r2, #32
 80152fa:	4013      	ands	r3, r2
 80152fc:	b2db      	uxtb	r3, r3
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d10c      	bne.n	801531c <ManageStateAttachedWait_SRC+0x19c>
    {
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 8015302:	f7f3 f985 	bl	8008610 <HAL_GetTick>
 8015306:	0002      	movs	r2, r0
 8015308:	69bb      	ldr	r3, [r7, #24]
 801530a:	609a      	str	r2, [r3, #8]
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 801530c:	69bb      	ldr	r3, [r7, #24]
 801530e:	781a      	ldrb	r2, [r3, #0]
 8015310:	2120      	movs	r1, #32
 8015312:	430a      	orrs	r2, r1
 8015314:	701a      	strb	r2, [r3, #0]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 8015316:	2302      	movs	r3, #2
 8015318:	61fb      	str	r3, [r7, #28]
 801531a:	e018      	b.n	801534e <ManageStateAttachedWait_SRC+0x1ce>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 801531c:	f7f3 f978 	bl	8008610 <HAL_GetTick>
 8015320:	0002      	movs	r2, r0
 8015322:	69bb      	ldr	r3, [r7, #24]
 8015324:	689b      	ldr	r3, [r3, #8]
 8015326:	1ad3      	subs	r3, r2, r3
 8015328:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 801532a:	697b      	ldr	r3, [r7, #20]
 801532c:	2b02      	cmp	r3, #2
 801532e:	d90e      	bls.n	801534e <ManageStateAttachedWait_SRC+0x1ce>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8015330:	69bb      	ldr	r3, [r7, #24]
 8015332:	781a      	ldrb	r2, [r3, #0]
 8015334:	2120      	movs	r1, #32
 8015336:	438a      	bics	r2, r1
 8015338:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 801533a:	69bb      	ldr	r3, [r7, #24]
 801533c:	785a      	ldrb	r2, [r3, #1]
 801533e:	213e      	movs	r1, #62	@ 0x3e
 8015340:	438a      	bics	r2, r1
 8015342:	1c11      	adds	r1, r2, #0
 8015344:	2216      	movs	r2, #22
 8015346:	430a      	orrs	r2, r1
 8015348:	705a      	strb	r2, [r3, #1]
        _timing = 0;
 801534a:	2300      	movs	r3, #0
 801534c:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return _timing;
 801534e:	69fb      	ldr	r3, [r7, #28]
}
 8015350:	0018      	movs	r0, r3
 8015352:	46bd      	mov	sp, r7
 8015354:	b009      	add	sp, #36	@ 0x24
 8015356:	bd90      	pop	{r4, r7, pc}
 8015358:	200117a0 	.word	0x200117a0

0801535c <ManageStateEMC>:
#endif /* _DRP || _SRC || (_ACCESSORY && _SNK) */

#if defined(_DRP) || defined(_SRC)
static uint32_t ManageStateEMC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 801535c:	b590      	push	{r4, r7, lr}
 801535e:	b087      	sub	sp, #28
 8015360:	af00      	add	r7, sp, #0
 8015362:	60b9      	str	r1, [r7, #8]
 8015364:	607a      	str	r2, [r7, #4]
 8015366:	210f      	movs	r1, #15
 8015368:	187b      	adds	r3, r7, r1
 801536a:	1c02      	adds	r2, r0, #0
 801536c:	701a      	strb	r2, [r3, #0]
  uint32_t _timing = CAD_INFINITE_TIME;
 801536e:	2301      	movs	r3, #1
 8015370:	425b      	negs	r3, r3
 8015372:	617b      	str	r3, [r7, #20]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8015374:	187b      	adds	r3, r7, r1
 8015376:	781b      	ldrb	r3, [r3, #0]
 8015378:	011a      	lsls	r2, r3, #4
 801537a:	4b35      	ldr	r3, [pc, #212]	@ (8015450 <ManageStateEMC+0xf4>)
 801537c:	18d3      	adds	r3, r2, r3
 801537e:	613b      	str	r3, [r7, #16]

  CAD_Check_HW_SRC(PortNum);
 8015380:	187b      	adds	r3, r7, r1
 8015382:	781b      	ldrb	r3, [r3, #0]
 8015384:	0018      	movs	r0, r3
 8015386:	f7ff fcd5 	bl	8014d34 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  switch (_handle->CurrentHWcondition)
 801538a:	693b      	ldr	r3, [r7, #16]
 801538c:	781b      	ldrb	r3, [r3, #0]
 801538e:	06db      	lsls	r3, r3, #27
 8015390:	0f5b      	lsrs	r3, r3, #29
 8015392:	b2db      	uxtb	r3, r3
 8015394:	2b03      	cmp	r3, #3
 8015396:	d010      	beq.n	80153ba <ManageStateEMC+0x5e>
 8015398:	dc26      	bgt.n	80153e8 <ManageStateEMC+0x8c>
 801539a:	2b00      	cmp	r3, #0
 801539c:	d002      	beq.n	80153a4 <ManageStateEMC+0x48>
 801539e:	2b01      	cmp	r3, #1
 80153a0:	d00b      	beq.n	80153ba <ManageStateEMC+0x5e>
 80153a2:	e021      	b.n	80153e8 <ManageStateEMC+0x8c>
  {
    case HW_Detachment :
      _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 80153a4:	693b      	ldr	r3, [r7, #16]
 80153a6:	785a      	ldrb	r2, [r3, #1]
 80153a8:	213e      	movs	r1, #62	@ 0x3e
 80153aa:	438a      	bics	r2, r1
 80153ac:	1c11      	adds	r1, r2, #0
 80153ae:	2212      	movs	r2, #18
 80153b0:	430a      	orrs	r2, r1
 80153b2:	705a      	strb	r2, [r3, #1]
      _timing = 1;
 80153b4:	2301      	movs	r3, #1
 80153b6:	617b      	str	r3, [r7, #20]
      break;
 80153b8:	e045      	b.n	8015446 <ManageStateEMC+0xea>
    case HW_PwrCable_Sink_Attachment:
    case HW_Attachment :
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 80153ba:	693b      	ldr	r3, [r7, #16]
 80153bc:	785a      	ldrb	r2, [r3, #1]
 80153be:	213e      	movs	r1, #62	@ 0x3e
 80153c0:	438a      	bics	r2, r1
 80153c2:	1c11      	adds	r1, r2, #0
 80153c4:	2204      	movs	r2, #4
 80153c6:	430a      	orrs	r2, r1
 80153c8:	705a      	strb	r2, [r3, #1]
      _handle->CAD_tDebounce_start = HAL_GetTick() - 5u;  /* this is only to check cable presence */
 80153ca:	f7f3 f921 	bl	8008610 <HAL_GetTick>
 80153ce:	0003      	movs	r3, r0
 80153d0:	1f5a      	subs	r2, r3, #5
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	609a      	str	r2, [r3, #8]
      BSP_USBPD_PWR_VBUSInit(PortNum);
 80153d6:	230f      	movs	r3, #15
 80153d8:	18fb      	adds	r3, r7, r3
 80153da:	781b      	ldrb	r3, [r3, #0]
 80153dc:	0018      	movs	r0, r3
 80153de:	f008 fb01 	bl	801d9e4 <BSP_USBPD_PWR_VBUSInit>
      _timing = 2;
 80153e2:	2302      	movs	r3, #2
 80153e4:	617b      	str	r3, [r7, #20]
      break;
 80153e6:	e02e      	b.n	8015446 <ManageStateEMC+0xea>
    case HW_PwrCable_NoSink_Attachment:
    default :
      /* nothing to do still the same status */
#if defined(_DRP)
      if (USBPD_TRUE == Ports[PortNum].settings->CAD_RoleToggle)
 80153e8:	240f      	movs	r4, #15
 80153ea:	193b      	adds	r3, r7, r4
 80153ec:	781a      	ldrb	r2, [r3, #0]
 80153ee:	4919      	ldr	r1, [pc, #100]	@ (8015454 <ManageStateEMC+0xf8>)
 80153f0:	0013      	movs	r3, r2
 80153f2:	011b      	lsls	r3, r3, #4
 80153f4:	1a9b      	subs	r3, r3, r2
 80153f6:	009b      	lsls	r3, r3, #2
 80153f8:	18cb      	adds	r3, r1, r3
 80153fa:	330c      	adds	r3, #12
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	795b      	ldrb	r3, [r3, #5]
 8015400:	2220      	movs	r2, #32
 8015402:	4013      	ands	r3, r2
 8015404:	b2db      	uxtb	r3, r3
 8015406:	2b00      	cmp	r3, #0
 8015408:	d01c      	beq.n	8015444 <ManageStateEMC+0xe8>
      {
        if ((HAL_GetTick() - _handle->CAD_tToggle_start) > Ports[PortNum].settings->CAD_SRCToggleTime)
 801540a:	f7f3 f901 	bl	8008610 <HAL_GetTick>
 801540e:	0002      	movs	r2, r0
 8015410:	693b      	ldr	r3, [r7, #16]
 8015412:	685b      	ldr	r3, [r3, #4]
 8015414:	1ad1      	subs	r1, r2, r3
 8015416:	193b      	adds	r3, r7, r4
 8015418:	781a      	ldrb	r2, [r3, #0]
 801541a:	480e      	ldr	r0, [pc, #56]	@ (8015454 <ManageStateEMC+0xf8>)
 801541c:	0013      	movs	r3, r2
 801541e:	011b      	lsls	r3, r3, #4
 8015420:	1a9b      	subs	r3, r3, r2
 8015422:	009b      	lsls	r3, r3, #2
 8015424:	18c3      	adds	r3, r0, r3
 8015426:	330c      	adds	r3, #12
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	79db      	ldrb	r3, [r3, #7]
 801542c:	4299      	cmp	r1, r3
 801542e:	d907      	bls.n	8015440 <ManageStateEMC+0xe4>
        {
          _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 8015430:	693b      	ldr	r3, [r7, #16]
 8015432:	785a      	ldrb	r2, [r3, #1]
 8015434:	213e      	movs	r1, #62	@ 0x3e
 8015436:	438a      	bics	r2, r1
 8015438:	1c11      	adds	r1, r2, #0
 801543a:	2212      	movs	r2, #18
 801543c:	430a      	orrs	r2, r1
 801543e:	705a      	strb	r2, [r3, #1]
        }
        _timing = 0;
 8015440:	2300      	movs	r3, #0
 8015442:	617b      	str	r3, [r7, #20]
      }
#else
      _timing = 2;
#endif /* _DRP */
      break;
 8015444:	46c0      	nop			@ (mov r8, r8)
  }
  return _timing;
 8015446:	697b      	ldr	r3, [r7, #20]
}
 8015448:	0018      	movs	r0, r3
 801544a:	46bd      	mov	sp, r7
 801544c:	b007      	add	sp, #28
 801544e:	bd90      	pop	{r4, r7, pc}
 8015450:	200117a0 	.word	0x200117a0
 8015454:	200117d4 	.word	0x200117d4

08015458 <ManageStateAttached_DRP>:
#endif /* _DRP || _SRC */

#if defined(_DRP)
static uint32_t ManageStateAttached_DRP(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b086      	sub	sp, #24
 801545c:	af00      	add	r7, sp, #0
 801545e:	60b9      	str	r1, [r7, #8]
 8015460:	607a      	str	r2, [r7, #4]
 8015462:	210f      	movs	r1, #15
 8015464:	187b      	adds	r3, r7, r1
 8015466:	1c02      	adds	r2, r0, #0
 8015468:	701a      	strb	r2, [r3, #0]
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 801546a:	0008      	movs	r0, r1
 801546c:	187b      	adds	r3, r7, r1
 801546e:	781a      	ldrb	r2, [r3, #0]
 8015470:	491e      	ldr	r1, [pc, #120]	@ (80154ec <ManageStateAttached_DRP+0x94>)
 8015472:	0013      	movs	r3, r2
 8015474:	011b      	lsls	r3, r3, #4
 8015476:	1a9b      	subs	r3, r3, r2
 8015478:	009b      	lsls	r3, r3, #2
 801547a:	18cb      	adds	r3, r1, r3
 801547c:	3310      	adds	r3, #16
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	781b      	ldrb	r3, [r3, #0]
 8015482:	2204      	movs	r2, #4
 8015484:	4013      	ands	r3, r2
 8015486:	b2db      	uxtb	r3, r3
 8015488:	2b00      	cmp	r3, #0
 801548a:	d008      	beq.n	801549e <ManageStateAttached_DRP+0x46>
  {
    return ManageStateAttached_SRC(PortNum, pEvent, pCCXX);
 801548c:	687a      	ldr	r2, [r7, #4]
 801548e:	68b9      	ldr	r1, [r7, #8]
 8015490:	183b      	adds	r3, r7, r0
 8015492:	781b      	ldrb	r3, [r3, #0]
 8015494:	0018      	movs	r0, r3
 8015496:	f000 f85f 	bl	8015558 <ManageStateAttached_SRC>
 801549a:	0003      	movs	r3, r0
 801549c:	e021      	b.n	80154e2 <ManageStateAttached_DRP+0x8a>
  }
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801549e:	200f      	movs	r0, #15
 80154a0:	183b      	adds	r3, r7, r0
 80154a2:	781b      	ldrb	r3, [r3, #0]
 80154a4:	011a      	lsls	r2, r3, #4
 80154a6:	4b12      	ldr	r3, [pc, #72]	@ (80154f0 <ManageStateAttached_DRP+0x98>)
 80154a8:	18d3      	adds	r3, r2, r3
 80154aa:	613b      	str	r3, [r7, #16]
  uint32_t _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 80154ac:	687a      	ldr	r2, [r7, #4]
 80154ae:	68b9      	ldr	r1, [r7, #8]
 80154b0:	183b      	adds	r3, r7, r0
 80154b2:	781b      	ldrb	r3, [r3, #0]
 80154b4:	0018      	movs	r0, r3
 80154b6:	f000 f98d 	bl	80157d4 <ManageStateAttached_SNK>
 80154ba:	0003      	movs	r3, r0
 80154bc:	617b      	str	r3, [r7, #20]

  /* Toggle management */
  if (_handle->CurrentHWcondition == HW_Detachment)
 80154be:	693b      	ldr	r3, [r7, #16]
 80154c0:	781b      	ldrb	r3, [r3, #0]
 80154c2:	221c      	movs	r2, #28
 80154c4:	4013      	ands	r3, r2
 80154c6:	b2db      	uxtb	r3, r3
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d109      	bne.n	80154e0 <ManageStateAttached_DRP+0x88>
  {
    _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SRC;
 80154cc:	693b      	ldr	r3, [r7, #16]
 80154ce:	785a      	ldrb	r2, [r3, #1]
 80154d0:	213e      	movs	r1, #62	@ 0x3e
 80154d2:	438a      	bics	r2, r1
 80154d4:	1c11      	adds	r1, r2, #0
 80154d6:	2210      	movs	r2, #16
 80154d8:	430a      	orrs	r2, r1
 80154da:	705a      	strb	r2, [r3, #1]
    _timing = 0;
 80154dc:	2300      	movs	r3, #0
 80154de:	617b      	str	r3, [r7, #20]
  }
  return _timing;
 80154e0:	697b      	ldr	r3, [r7, #20]
}
 80154e2:	0018      	movs	r0, r3
 80154e4:	46bd      	mov	sp, r7
 80154e6:	b006      	add	sp, #24
 80154e8:	bd80      	pop	{r7, pc}
 80154ea:	46c0      	nop			@ (mov r8, r8)
 80154ec:	200117d4 	.word	0x200117d4
 80154f0:	200117a0 	.word	0x200117a0

080154f4 <ManageStateAttachedWait_DRP>:
#endif /* _DRP */

#if defined(_DRP) || (defined(_ACCESSORY) && defined(_SNK))
static uint32_t ManageStateAttachedWait_DRP(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b084      	sub	sp, #16
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	60b9      	str	r1, [r7, #8]
 80154fc:	607a      	str	r2, [r7, #4]
 80154fe:	210f      	movs	r1, #15
 8015500:	187b      	adds	r3, r7, r1
 8015502:	1c02      	adds	r2, r0, #0
 8015504:	701a      	strb	r2, [r3, #0]
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 8015506:	0008      	movs	r0, r1
 8015508:	187b      	adds	r3, r7, r1
 801550a:	781a      	ldrb	r2, [r3, #0]
 801550c:	4911      	ldr	r1, [pc, #68]	@ (8015554 <ManageStateAttachedWait_DRP+0x60>)
 801550e:	0013      	movs	r3, r2
 8015510:	011b      	lsls	r3, r3, #4
 8015512:	1a9b      	subs	r3, r3, r2
 8015514:	009b      	lsls	r3, r3, #2
 8015516:	18cb      	adds	r3, r1, r3
 8015518:	3310      	adds	r3, #16
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	781b      	ldrb	r3, [r3, #0]
 801551e:	2204      	movs	r2, #4
 8015520:	4013      	ands	r3, r2
 8015522:	b2db      	uxtb	r3, r3
 8015524:	2b00      	cmp	r3, #0
 8015526:	d008      	beq.n	801553a <ManageStateAttachedWait_DRP+0x46>
  {
    return ManageStateAttachedWait_SRC(PortNum, pEvent, pCCXX);
 8015528:	687a      	ldr	r2, [r7, #4]
 801552a:	68b9      	ldr	r1, [r7, #8]
 801552c:	183b      	adds	r3, r7, r0
 801552e:	781b      	ldrb	r3, [r3, #0]
 8015530:	0018      	movs	r0, r3
 8015532:	f7ff fe25 	bl	8015180 <ManageStateAttachedWait_SRC>
 8015536:	0003      	movs	r3, r0
 8015538:	e008      	b.n	801554c <ManageStateAttachedWait_DRP+0x58>
  }
  return ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 801553a:	687a      	ldr	r2, [r7, #4]
 801553c:	68b9      	ldr	r1, [r7, #8]
 801553e:	230f      	movs	r3, #15
 8015540:	18fb      	adds	r3, r7, r3
 8015542:	781b      	ldrb	r3, [r3, #0]
 8015544:	0018      	movs	r0, r3
 8015546:	f000 f8b9 	bl	80156bc <ManageStateAttachedWait_SNK>
 801554a:	0003      	movs	r3, r0
}
 801554c:	0018      	movs	r0, r3
 801554e:	46bd      	mov	sp, r7
 8015550:	b004      	add	sp, #16
 8015552:	bd80      	pop	{r7, pc}
 8015554:	200117d4 	.word	0x200117d4

08015558 <ManageStateAttached_SRC>:
#endif /* _DRP || (_ACCESSORY && _SNK) */

#if defined(_SRC) || defined(_DRP)
static uint32_t ManageStateAttached_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8015558:	b590      	push	{r4, r7, lr}
 801555a:	b08b      	sub	sp, #44	@ 0x2c
 801555c:	af00      	add	r7, sp, #0
 801555e:	60b9      	str	r1, [r7, #8]
 8015560:	607a      	str	r2, [r7, #4]
 8015562:	210f      	movs	r1, #15
 8015564:	187b      	adds	r3, r7, r1
 8015566:	1c02      	adds	r2, r0, #0
 8015568:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801556a:	0008      	movs	r0, r1
 801556c:	183b      	adds	r3, r7, r0
 801556e:	781b      	ldrb	r3, [r3, #0]
 8015570:	011a      	lsls	r2, r3, #4
 8015572:	4b50      	ldr	r3, [pc, #320]	@ (80156b4 <ManageStateAttached_SRC+0x15c>)
 8015574:	18d3      	adds	r3, r2, r3
 8015576:	623b      	str	r3, [r7, #32]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8015578:	2302      	movs	r3, #2
 801557a:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 801557c:	183b      	adds	r3, r7, r0
 801557e:	781a      	ldrb	r2, [r3, #0]
 8015580:	494d      	ldr	r1, [pc, #308]	@ (80156b8 <ManageStateAttached_SRC+0x160>)
 8015582:	0013      	movs	r3, r2
 8015584:	011b      	lsls	r3, r3, #4
 8015586:	1a9b      	subs	r3, r3, r2
 8015588:	009b      	lsls	r3, r3, #2
 801558a:	18cb      	adds	r3, r1, r3
 801558c:	3334      	adds	r3, #52	@ 0x34
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	2b01      	cmp	r3, #1
 8015592:	d10c      	bne.n	80155ae <ManageStateAttached_SRC+0x56>
 8015594:	183b      	adds	r3, r7, r0
 8015596:	781a      	ldrb	r2, [r3, #0]
 8015598:	4947      	ldr	r1, [pc, #284]	@ (80156b8 <ManageStateAttached_SRC+0x160>)
 801559a:	0013      	movs	r3, r2
 801559c:	011b      	lsls	r3, r3, #4
 801559e:	1a9b      	subs	r3, r3, r2
 80155a0:	009b      	lsls	r3, r3, #2
 80155a2:	585b      	ldr	r3, [r3, r1]
 80155a4:	695a      	ldr	r2, [r3, #20]
 80155a6:	23c0      	movs	r3, #192	@ 0xc0
 80155a8:	029b      	lsls	r3, r3, #10
 80155aa:	4013      	ands	r3, r2
 80155ac:	e00c      	b.n	80155c8 <ManageStateAttached_SRC+0x70>
                  (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 80155ae:	230f      	movs	r3, #15
 80155b0:	18fb      	adds	r3, r7, r3
 80155b2:	781a      	ldrb	r2, [r3, #0]
 80155b4:	4940      	ldr	r1, [pc, #256]	@ (80156b8 <ManageStateAttached_SRC+0x160>)
 80155b6:	0013      	movs	r3, r2
 80155b8:	011b      	lsls	r3, r3, #4
 80155ba:	1a9b      	subs	r3, r3, r2
 80155bc:	009b      	lsls	r3, r3, #2
 80155be:	585b      	ldr	r3, [r3, r1]
 80155c0:	695a      	ldr	r2, [r3, #20]
  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 80155c2:	23c0      	movs	r3, #192	@ 0xc0
 80155c4:	031b      	lsls	r3, r3, #12
 80155c6:	4013      	ands	r3, r2
 80155c8:	61fb      	str	r3, [r7, #28]
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SRC_CC1_VRD : LL_UCPD_SRC_CC2_VRD;
 80155ca:	230f      	movs	r3, #15
 80155cc:	18fb      	adds	r3, r7, r3
 80155ce:	781a      	ldrb	r2, [r3, #0]
 80155d0:	4939      	ldr	r1, [pc, #228]	@ (80156b8 <ManageStateAttached_SRC+0x160>)
 80155d2:	0013      	movs	r3, r2
 80155d4:	011b      	lsls	r3, r3, #4
 80155d6:	1a9b      	subs	r3, r3, r2
 80155d8:	009b      	lsls	r3, r3, #2
 80155da:	18cb      	adds	r3, r1, r3
 80155dc:	3334      	adds	r3, #52	@ 0x34
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	2b01      	cmp	r3, #1
 80155e2:	d102      	bne.n	80155ea <ManageStateAttached_SRC+0x92>
 80155e4:	2380      	movs	r3, #128	@ 0x80
 80155e6:	025b      	lsls	r3, r3, #9
 80155e8:	e001      	b.n	80155ee <ManageStateAttached_SRC+0x96>
 80155ea:	2380      	movs	r3, #128	@ 0x80
 80155ec:	02db      	lsls	r3, r3, #11
 80155ee:	61bb      	str	r3, [r7, #24]

  /* Check if CC lines is opened or switch to debug accessory */
  if (comp != ccx)
 80155f0:	69ba      	ldr	r2, [r7, #24]
 80155f2:	69fb      	ldr	r3, [r7, #28]
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d04f      	beq.n	8015698 <ManageStateAttached_SRC+0x140>
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 80155f8:	6a3b      	ldr	r3, [r7, #32]
 80155fa:	781b      	ldrb	r3, [r3, #0]
 80155fc:	2220      	movs	r2, #32
 80155fe:	4013      	ands	r3, r2
 8015600:	b2db      	uxtb	r3, r3
 8015602:	2b00      	cmp	r3, #0
 8015604:	d10c      	bne.n	8015620 <ManageStateAttached_SRC+0xc8>
    {
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 8015606:	6a3b      	ldr	r3, [r7, #32]
 8015608:	781a      	ldrb	r2, [r3, #0]
 801560a:	2120      	movs	r1, #32
 801560c:	430a      	orrs	r2, r1
 801560e:	701a      	strb	r2, [r3, #0]
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 8015610:	f7f2 fffe 	bl	8008610 <HAL_GetTick>
 8015614:	0002      	movs	r2, r0
 8015616:	6a3b      	ldr	r3, [r7, #32]
 8015618:	609a      	str	r2, [r3, #8]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 801561a:	2302      	movs	r3, #2
 801561c:	627b      	str	r3, [r7, #36]	@ 0x24
 801561e:	e043      	b.n	80156a8 <ManageStateAttached_SRC+0x150>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8015620:	f7f2 fff6 	bl	8008610 <HAL_GetTick>
 8015624:	0002      	movs	r2, r0
 8015626:	6a3b      	ldr	r3, [r7, #32]
 8015628:	689b      	ldr	r3, [r3, #8]
 801562a:	1ad3      	subs	r3, r2, r3
 801562c:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 801562e:	697b      	ldr	r3, [r7, #20]
 8015630:	2b02      	cmp	r3, #2
 8015632:	d939      	bls.n	80156a8 <ManageStateAttached_SRC+0x150>
      {
        HW_SignalDetachment(PortNum);
 8015634:	240f      	movs	r4, #15
 8015636:	193b      	adds	r3, r7, r4
 8015638:	781b      	ldrb	r3, [r3, #0]
 801563a:	0018      	movs	r0, r3
 801563c:	f001 fe20 	bl	8017280 <HW_SignalDetachment>
#ifdef _DRP
        if (USBPD_TRUE == Ports[PortNum].settings->CAD_RoleToggle)
 8015640:	0020      	movs	r0, r4
 8015642:	183b      	adds	r3, r7, r0
 8015644:	781a      	ldrb	r2, [r3, #0]
 8015646:	491c      	ldr	r1, [pc, #112]	@ (80156b8 <ManageStateAttached_SRC+0x160>)
 8015648:	0013      	movs	r3, r2
 801564a:	011b      	lsls	r3, r3, #4
 801564c:	1a9b      	subs	r3, r3, r2
 801564e:	009b      	lsls	r3, r3, #2
 8015650:	18cb      	adds	r3, r1, r3
 8015652:	330c      	adds	r3, #12
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	795b      	ldrb	r3, [r3, #5]
 8015658:	2220      	movs	r2, #32
 801565a:	4013      	ands	r3, r2
 801565c:	b2db      	uxtb	r3, r3
 801565e:	2b00      	cmp	r3, #0
 8015660:	d004      	beq.n	801566c <ManageStateAttached_SRC+0x114>
        {
          USBPDM1_AssertRd(PortNum);
 8015662:	183b      	adds	r3, r7, r0
 8015664:	781b      	ldrb	r3, [r3, #0]
 8015666:	0018      	movs	r0, r3
 8015668:	f001 fb56 	bl	8016d18 <USBPDM1_AssertRd>
        }
#endif /* _DRP */
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 801566c:	6a3b      	ldr	r3, [r7, #32]
 801566e:	781a      	ldrb	r2, [r3, #0]
 8015670:	2120      	movs	r1, #32
 8015672:	438a      	bics	r2, r1
 8015674:	701a      	strb	r2, [r3, #0]
        /* move inside state DETACH to avoid wrong VCONN level*/
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 8015676:	6a3b      	ldr	r3, [r7, #32]
 8015678:	785a      	ldrb	r2, [r3, #1]
 801567a:	213e      	movs	r1, #62	@ 0x3e
 801567c:	438a      	bics	r2, r1
 801567e:	1c11      	adds	r1, r2, #0
 8015680:	2216      	movs	r2, #22
 8015682:	430a      	orrs	r2, r1
 8015684:	705a      	strb	r2, [r3, #1]
        *pEvent                     = USBPD_CAD_EVENT_DETACHED;
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	2201      	movs	r2, #1
 801568a:	701a      	strb	r2, [r3, #0]
        *pCCXX                      = CCNONE;
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2200      	movs	r2, #0
 8015690:	601a      	str	r2, [r3, #0]
        _timing                     = 0;
 8015692:	2300      	movs	r3, #0
 8015694:	627b      	str	r3, [r7, #36]	@ 0x24
 8015696:	e007      	b.n	80156a8 <ManageStateAttached_SRC+0x150>
    }
  }
  else
  {
    /* Reset tPDDebounce flag*/
    _handle->CAD_tDebounce_flag   = USBPD_FALSE;
 8015698:	6a3b      	ldr	r3, [r7, #32]
 801569a:	781a      	ldrb	r2, [r3, #0]
 801569c:	2120      	movs	r1, #32
 801569e:	438a      	bics	r2, r1
 80156a0:	701a      	strb	r2, [r3, #0]
    _timing = CAD_INFINITE_TIME;
 80156a2:	2301      	movs	r3, #1
 80156a4:	425b      	negs	r3, r3
 80156a6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  return _timing;
 80156a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80156aa:	0018      	movs	r0, r3
 80156ac:	46bd      	mov	sp, r7
 80156ae:	b00b      	add	sp, #44	@ 0x2c
 80156b0:	bd90      	pop	{r4, r7, pc}
 80156b2:	46c0      	nop			@ (mov r8, r8)
 80156b4:	200117a0 	.word	0x200117a0
 80156b8:	200117d4 	.word	0x200117d4

080156bc <ManageStateAttachedWait_SNK>:
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80156bc:	b590      	push	{r4, r7, lr}
 80156be:	b089      	sub	sp, #36	@ 0x24
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	60b9      	str	r1, [r7, #8]
 80156c4:	607a      	str	r2, [r7, #4]
 80156c6:	240f      	movs	r4, #15
 80156c8:	193b      	adds	r3, r7, r4
 80156ca:	1c02      	adds	r2, r0, #0
 80156cc:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80156ce:	193b      	adds	r3, r7, r4
 80156d0:	781b      	ldrb	r3, [r3, #0]
 80156d2:	011a      	lsls	r2, r3, #4
 80156d4:	4b3e      	ldr	r3, [pc, #248]	@ (80157d0 <ManageStateAttachedWait_SNK+0x114>)
 80156d6:	18d3      	adds	r3, r2, r3
 80156d8:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80156da:	2302      	movs	r3, #2
 80156dc:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 80156de:	f7f2 ff97 	bl	8008610 <HAL_GetTick>
 80156e2:	0002      	movs	r2, r0
 80156e4:	69bb      	ldr	r3, [r7, #24]
 80156e6:	689b      	ldr	r3, [r3, #8]
 80156e8:	1ad3      	subs	r3, r2, r3
 80156ea:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 80156ec:	193b      	adds	r3, r7, r4
 80156ee:	781b      	ldrb	r3, [r3, #0]
 80156f0:	0018      	movs	r0, r3
 80156f2:	f7ff fa87 	bl	8014c04 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 80156f6:	69bb      	ldr	r3, [r7, #24]
 80156f8:	781b      	ldrb	r3, [r3, #0]
 80156fa:	221c      	movs	r2, #28
 80156fc:	4013      	ands	r3, r2
 80156fe:	b2db      	uxtb	r3, r3
 8015700:	2b04      	cmp	r3, #4
 8015702:	d130      	bne.n	8015766 <ManageStateAttachedWait_SNK+0xaa>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	2b78      	cmp	r3, #120	@ 0x78
 8015708:	d927      	bls.n	801575a <ManageStateAttachedWait_SNK+0x9e>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 801570a:	193b      	adds	r3, r7, r4
 801570c:	781b      	ldrb	r3, [r3, #0]
 801570e:	2101      	movs	r1, #1
 8015710:	0018      	movs	r0, r3
 8015712:	f007 ffcf 	bl	801d6b4 <USBPD_PWR_IF_GetVBUSStatus>
 8015716:	0003      	movs	r3, r0
 8015718:	2b01      	cmp	r3, #1
 801571a:	d11e      	bne.n	801575a <ManageStateAttachedWait_SNK+0x9e>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 801571c:	69bb      	ldr	r3, [r7, #24]
 801571e:	781b      	ldrb	r3, [r3, #0]
 8015720:	079b      	lsls	r3, r3, #30
 8015722:	0f9b      	lsrs	r3, r3, #30
 8015724:	b2db      	uxtb	r3, r3
 8015726:	001a      	movs	r2, r3
 8015728:	193b      	adds	r3, r7, r4
 801572a:	781b      	ldrb	r3, [r3, #0]
 801572c:	0011      	movs	r1, r2
 801572e:	0018      	movs	r0, r3
 8015730:	f001 fc44 	bl	8016fbc <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8015734:	69bb      	ldr	r3, [r7, #24]
 8015736:	785a      	ldrb	r2, [r3, #1]
 8015738:	213e      	movs	r1, #62	@ 0x3e
 801573a:	438a      	bics	r2, r1
 801573c:	1c11      	adds	r1, r2, #0
 801573e:	2206      	movs	r2, #6
 8015740:	430a      	orrs	r2, r1
 8015742:	705a      	strb	r2, [r3, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	2202      	movs	r2, #2
 8015748:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 801574a:	69bb      	ldr	r3, [r7, #24]
 801574c:	781b      	ldrb	r3, [r3, #0]
 801574e:	079b      	lsls	r3, r3, #30
 8015750:	0f9b      	lsrs	r3, r3, #30
 8015752:	b2db      	uxtb	r3, r3
 8015754:	001a      	movs	r2, r3
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 801575a:	69bb      	ldr	r3, [r7, #24]
 801575c:	781a      	ldrb	r2, [r3, #0]
 801575e:	2120      	movs	r1, #32
 8015760:	438a      	bics	r2, r1
 8015762:	701a      	strb	r2, [r3, #0]
 8015764:	e02e      	b.n	80157c4 <ManageStateAttachedWait_SNK+0x108>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8015766:	69bb      	ldr	r3, [r7, #24]
 8015768:	781b      	ldrb	r3, [r3, #0]
 801576a:	2220      	movs	r2, #32
 801576c:	4013      	ands	r3, r2
 801576e:	b2db      	uxtb	r3, r3
 8015770:	2b00      	cmp	r3, #0
 8015772:	d10c      	bne.n	801578e <ManageStateAttachedWait_SNK+0xd2>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8015774:	f7f2 ff4c 	bl	8008610 <HAL_GetTick>
 8015778:	0002      	movs	r2, r0
 801577a:	69bb      	ldr	r3, [r7, #24]
 801577c:	609a      	str	r2, [r3, #8]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 801577e:	69bb      	ldr	r3, [r7, #24]
 8015780:	781a      	ldrb	r2, [r3, #0]
 8015782:	2120      	movs	r1, #32
 8015784:	430a      	orrs	r2, r1
 8015786:	701a      	strb	r2, [r3, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 8015788:	230c      	movs	r3, #12
 801578a:	61fb      	str	r3, [r7, #28]
 801578c:	e01a      	b.n	80157c4 <ManageStateAttachedWait_SNK+0x108>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 801578e:	f7f2 ff3f 	bl	8008610 <HAL_GetTick>
 8015792:	0002      	movs	r2, r0
 8015794:	69bb      	ldr	r3, [r7, #24]
 8015796:	689b      	ldr	r3, [r3, #8]
 8015798:	1ad3      	subs	r3, r2, r3
 801579a:	2b0c      	cmp	r3, #12
 801579c:	d912      	bls.n	80157c4 <ManageStateAttachedWait_SNK+0x108>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 801579e:	69bb      	ldr	r3, [r7, #24]
 80157a0:	781a      	ldrb	r2, [r3, #0]
 80157a2:	2120      	movs	r1, #32
 80157a4:	438a      	bics	r2, r1
 80157a6:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 80157a8:	69bb      	ldr	r3, [r7, #24]
 80157aa:	785a      	ldrb	r2, [r3, #1]
 80157ac:	213e      	movs	r1, #62	@ 0x3e
 80157ae:	438a      	bics	r2, r1
 80157b0:	1c11      	adds	r1, r2, #0
 80157b2:	2202      	movs	r2, #2
 80157b4:	430a      	orrs	r2, r1
 80157b6:	705a      	strb	r2, [r3, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 80157b8:	230f      	movs	r3, #15
 80157ba:	18fb      	adds	r3, r7, r3
 80157bc:	781b      	ldrb	r3, [r3, #0]
 80157be:	0018      	movs	r0, r3
 80157c0:	f008 f921 	bl	801da06 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 80157c4:	69fb      	ldr	r3, [r7, #28]
}
 80157c6:	0018      	movs	r0, r3
 80157c8:	46bd      	mov	sp, r7
 80157ca:	b009      	add	sp, #36	@ 0x24
 80157cc:	bd90      	pop	{r4, r7, pc}
 80157ce:	46c0      	nop			@ (mov r8, r8)
 80157d0:	200117a0 	.word	0x200117a0

080157d4 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80157d4:	b590      	push	{r4, r7, lr}
 80157d6:	b089      	sub	sp, #36	@ 0x24
 80157d8:	af00      	add	r7, sp, #0
 80157da:	60b9      	str	r1, [r7, #8]
 80157dc:	607a      	str	r2, [r7, #4]
 80157de:	210f      	movs	r1, #15
 80157e0:	187b      	adds	r3, r7, r1
 80157e2:	1c02      	adds	r2, r0, #0
 80157e4:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80157e6:	0008      	movs	r0, r1
 80157e8:	183b      	adds	r3, r7, r0
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	011a      	lsls	r2, r3, #4
 80157ee:	4b2f      	ldr	r3, [pc, #188]	@ (80158ac <ManageStateAttached_SNK+0xd8>)
 80157f0:	18d3      	adds	r3, r2, r3
 80157f2:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80157f4:	2302      	movs	r3, #2
 80157f6:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 80157f8:	2300      	movs	r3, #0
 80157fa:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 80157fc:	183b      	adds	r3, r7, r0
 80157fe:	781a      	ldrb	r2, [r3, #0]
 8015800:	492b      	ldr	r1, [pc, #172]	@ (80158b0 <ManageStateAttached_SNK+0xdc>)
 8015802:	0013      	movs	r3, r2
 8015804:	011b      	lsls	r3, r3, #4
 8015806:	1a9b      	subs	r3, r3, r2
 8015808:	009b      	lsls	r3, r3, #2
 801580a:	18cb      	adds	r3, r1, r3
 801580c:	3334      	adds	r3, #52	@ 0x34
 801580e:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8015810:	2b01      	cmp	r3, #1
 8015812:	d10c      	bne.n	801582e <ManageStateAttached_SNK+0x5a>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8015814:	183b      	adds	r3, r7, r0
 8015816:	781a      	ldrb	r2, [r3, #0]
 8015818:	4925      	ldr	r1, [pc, #148]	@ (80158b0 <ManageStateAttached_SNK+0xdc>)
 801581a:	0013      	movs	r3, r2
 801581c:	011b      	lsls	r3, r3, #4
 801581e:	1a9b      	subs	r3, r3, r2
 8015820:	009b      	lsls	r3, r3, #2
 8015822:	585b      	ldr	r3, [r3, r1]
 8015824:	695a      	ldr	r2, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8015826:	23c0      	movs	r3, #192	@ 0xc0
 8015828:	029b      	lsls	r3, r3, #10
 801582a:	4013      	ands	r3, r2
 801582c:	e00c      	b.n	8015848 <ManageStateAttached_SNK+0x74>
 801582e:	230f      	movs	r3, #15
 8015830:	18fb      	adds	r3, r7, r3
 8015832:	781a      	ldrb	r2, [r3, #0]
 8015834:	491e      	ldr	r1, [pc, #120]	@ (80158b0 <ManageStateAttached_SNK+0xdc>)
 8015836:	0013      	movs	r3, r2
 8015838:	011b      	lsls	r3, r3, #4
 801583a:	1a9b      	subs	r3, r3, r2
 801583c:	009b      	lsls	r3, r3, #2
 801583e:	585b      	ldr	r3, [r3, r1]
 8015840:	695a      	ldr	r2, [r3, #20]
 8015842:	23c0      	movs	r3, #192	@ 0xc0
 8015844:	031b      	lsls	r3, r3, #12
 8015846:	4013      	ands	r3, r2
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8015848:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 801584a:	240f      	movs	r4, #15
 801584c:	193b      	adds	r3, r7, r4
 801584e:	781b      	ldrb	r3, [r3, #0]
 8015850:	2102      	movs	r1, #2
 8015852:	0018      	movs	r0, r3
 8015854:	f007 ff2e 	bl	801d6b4 <USBPD_PWR_IF_GetVBUSStatus>
 8015858:	0003      	movs	r3, r0
 801585a:	2b01      	cmp	r3, #1
 801585c:	d11e      	bne.n	801589c <ManageStateAttached_SNK+0xc8>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 801585e:	697a      	ldr	r2, [r7, #20]
 8015860:	693b      	ldr	r3, [r7, #16]
 8015862:	429a      	cmp	r2, r3
 8015864:	d11a      	bne.n	801589c <ManageStateAttached_SNK+0xc8>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 8015866:	193b      	adds	r3, r7, r4
 8015868:	781b      	ldrb	r3, [r3, #0]
 801586a:	0018      	movs	r0, r3
 801586c:	f001 fd08 	bl	8017280 <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 8015870:	69bb      	ldr	r3, [r7, #24]
 8015872:	781a      	ldrb	r2, [r3, #0]
 8015874:	211c      	movs	r1, #28
 8015876:	438a      	bics	r2, r1
 8015878:	701a      	strb	r2, [r3, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 801587a:	69bb      	ldr	r3, [r7, #24]
 801587c:	785a      	ldrb	r2, [r3, #1]
 801587e:	213e      	movs	r1, #62	@ 0x3e
 8015880:	438a      	bics	r2, r1
 8015882:	1c11      	adds	r1, r2, #0
 8015884:	2202      	movs	r2, #2
 8015886:	430a      	orrs	r2, r1
 8015888:	705a      	strb	r2, [r3, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 801588a:	68bb      	ldr	r3, [r7, #8]
 801588c:	2201      	movs	r2, #1
 801588e:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2200      	movs	r2, #0
 8015894:	601a      	str	r2, [r3, #0]
    _timing = 0;
 8015896:	2300      	movs	r3, #0
 8015898:	61fb      	str	r3, [r7, #28]
 801589a:	e001      	b.n	80158a0 <ManageStateAttached_SNK+0xcc>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 801589c:	230a      	movs	r3, #10
 801589e:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 80158a0:	69fb      	ldr	r3, [r7, #28]
}
 80158a2:	0018      	movs	r0, r3
 80158a4:	46bd      	mov	sp, r7
 80158a6:	b009      	add	sp, #36	@ 0x24
 80158a8:	bd90      	pop	{r4, r7, pc}
 80158aa:	46c0      	nop			@ (mov r8, r8)
 80158ac:	200117a0 	.word	0x200117a0
 80158b0:	200117d4 	.word	0x200117d4

080158b4 <LL_AHB1_GRP1_EnableClock>:
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b084      	sub	sp, #16
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80158bc:	4b07      	ldr	r3, [pc, #28]	@ (80158dc <LL_AHB1_GRP1_EnableClock+0x28>)
 80158be:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80158c0:	4b06      	ldr	r3, [pc, #24]	@ (80158dc <LL_AHB1_GRP1_EnableClock+0x28>)
 80158c2:	687a      	ldr	r2, [r7, #4]
 80158c4:	430a      	orrs	r2, r1
 80158c6:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80158c8:	4b04      	ldr	r3, [pc, #16]	@ (80158dc <LL_AHB1_GRP1_EnableClock+0x28>)
 80158ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158cc:	687a      	ldr	r2, [r7, #4]
 80158ce:	4013      	ands	r3, r2
 80158d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80158d2:	68fb      	ldr	r3, [r7, #12]
}
 80158d4:	46c0      	nop			@ (mov r8, r8)
 80158d6:	46bd      	mov	sp, r7
 80158d8:	b004      	add	sp, #16
 80158da:	bd80      	pop	{r7, pc}
 80158dc:	40021000 	.word	0x40021000

080158e0 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b082      	sub	sp, #8
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	0002      	movs	r2, r0
 80158e8:	1dfb      	adds	r3, r7, #7
 80158ea:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
 80158ec:	1dfb      	adds	r3, r7, #7
 80158ee:	781b      	ldrb	r3, [r3, #0]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d101      	bne.n	80158f8 <USBPD_HW_GetUSPDInstance+0x18>
 80158f4:	4b03      	ldr	r3, [pc, #12]	@ (8015904 <USBPD_HW_GetUSPDInstance+0x24>)
 80158f6:	e000      	b.n	80158fa <USBPD_HW_GetUSPDInstance+0x1a>
 80158f8:	4b03      	ldr	r3, [pc, #12]	@ (8015908 <USBPD_HW_GetUSPDInstance+0x28>)
#else
  return UCPD_INSTANCE0;
#endif /* UCPD_INSTANCE0 && UCPD_INSTANCE1 */
}
 80158fa:	0018      	movs	r0, r3
 80158fc:	46bd      	mov	sp, r7
 80158fe:	b002      	add	sp, #8
 8015900:	bd80      	pop	{r7, pc}
 8015902:	46c0      	nop			@ (mov r8, r8)
 8015904:	4000a000 	.word	0x4000a000
 8015908:	4000a400 	.word	0x4000a400

0801590c <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 801590c:	b590      	push	{r4, r7, lr}
 801590e:	b08f      	sub	sp, #60	@ 0x3c
 8015910:	af00      	add	r7, sp, #0
 8015912:	0002      	movs	r2, r0
 8015914:	1dfb      	adds	r3, r7, #7
 8015916:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8015918:	240c      	movs	r4, #12
 801591a:	193b      	adds	r3, r7, r4
 801591c:	0018      	movs	r0, r3
 801591e:	f7f7 fd9d 	bl	800d45c <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8015922:	0021      	movs	r1, r4
 8015924:	187b      	adds	r3, r7, r1
 8015926:	2200      	movs	r2, #0
 8015928:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 801592a:	187b      	adds	r3, r7, r1
 801592c:	2200      	movs	r2, #0
 801592e:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8015930:	187b      	adds	r3, r7, r1
 8015932:	2200      	movs	r2, #0
 8015934:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8015936:	187b      	adds	r3, r7, r1
 8015938:	2280      	movs	r2, #128	@ 0x80
 801593a:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 801593c:	187b      	adds	r3, r7, r1
 801593e:	2200      	movs	r2, #0
 8015940:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8015942:	187b      	adds	r3, r7, r1
 8015944:	2200      	movs	r2, #0
 8015946:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 8015948:	187b      	adds	r3, r7, r1
 801594a:	2200      	movs	r2, #0
 801594c:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 801594e:	187b      	adds	r3, r7, r1
 8015950:	2200      	movs	r2, #0
 8015952:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8015954:	187b      	adds	r3, r7, r1
 8015956:	2200      	movs	r2, #0
 8015958:	601a      	str	r2, [r3, #0]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 801595a:	187b      	adds	r3, r7, r1
 801595c:	2280      	movs	r2, #128	@ 0x80
 801595e:	0192      	lsls	r2, r2, #6
 8015960:	629a      	str	r2, [r3, #40]	@ 0x28

  switch (PortNum)
 8015962:	1dfb      	adds	r3, r7, #7
 8015964:	781b      	ldrb	r3, [r3, #0]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d002      	beq.n	8015970 <USBPD_HW_Init_DMARxInstance+0x64>
 801596a:	2b01      	cmp	r3, #1
 801596c:	d00e      	beq.n	801598c <USBPD_HW_Init_DMARxInstance+0x80>

      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 801596e:	e01b      	b.n	80159a8 <USBPD_HW_Init_DMARxInstance+0x9c>
      UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 8015970:	2001      	movs	r0, #1
 8015972:	f7ff ff9f 	bl	80158b4 <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 8015976:	210c      	movs	r1, #12
 8015978:	187b      	adds	r3, r7, r1
 801597a:	223a      	movs	r2, #58	@ 0x3a
 801597c:	625a      	str	r2, [r3, #36]	@ 0x24
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 801597e:	187b      	adds	r3, r7, r1
 8015980:	480f      	ldr	r0, [pc, #60]	@ (80159c0 <USBPD_HW_Init_DMARxInstance+0xb4>)
 8015982:	001a      	movs	r2, r3
 8015984:	2100      	movs	r1, #0
 8015986:	f7f7 fd29 	bl	800d3dc <LL_DMA_Init>
      break;
 801598a:	e00d      	b.n	80159a8 <USBPD_HW_Init_DMARxInstance+0x9c>
      UCPDDMA_INSTANCE1_CLOCKENABLE_RX;
 801598c:	2001      	movs	r0, #1
 801598e:	f7ff ff91 	bl	80158b4 <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE1_REQUEST_RX;
 8015992:	210c      	movs	r1, #12
 8015994:	187b      	adds	r3, r7, r1
 8015996:	223c      	movs	r2, #60	@ 0x3c
 8015998:	625a      	str	r2, [r3, #36]	@ 0x24
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
 801599a:	187b      	adds	r3, r7, r1
 801599c:	4808      	ldr	r0, [pc, #32]	@ (80159c0 <USBPD_HW_Init_DMARxInstance+0xb4>)
 801599e:	001a      	movs	r2, r3
 80159a0:	2102      	movs	r1, #2
 80159a2:	f7f7 fd1b 	bl	800d3dc <LL_DMA_Init>
      break;
 80159a6:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_RX : UCPDDMA_INSTANCE1_CHANNEL_RX;
 80159a8:	1dfb      	adds	r3, r7, #7
 80159aa:	781b      	ldrb	r3, [r3, #0]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d101      	bne.n	80159b4 <USBPD_HW_Init_DMARxInstance+0xa8>
 80159b0:	4b04      	ldr	r3, [pc, #16]	@ (80159c4 <USBPD_HW_Init_DMARxInstance+0xb8>)
 80159b2:	e000      	b.n	80159b6 <USBPD_HW_Init_DMARxInstance+0xaa>
 80159b4:	4b04      	ldr	r3, [pc, #16]	@ (80159c8 <USBPD_HW_Init_DMARxInstance+0xbc>)
#else
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
#endif /* UCPD_INSTANCE1 */
}
 80159b6:	0018      	movs	r0, r3
 80159b8:	46bd      	mov	sp, r7
 80159ba:	b00f      	add	sp, #60	@ 0x3c
 80159bc:	bd90      	pop	{r4, r7, pc}
 80159be:	46c0      	nop			@ (mov r8, r8)
 80159c0:	40020000 	.word	0x40020000
 80159c4:	40020008 	.word	0x40020008
 80159c8:	40020030 	.word	0x40020030

080159cc <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	0002      	movs	r2, r0
 80159d4:	1dfb      	adds	r3, r7, #7
 80159d6:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 80159d8:	46c0      	nop			@ (mov r8, r8)
 80159da:	46bd      	mov	sp, r7
 80159dc:	b002      	add	sp, #8
 80159de:	bd80      	pop	{r7, pc}

080159e0 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 80159e0:	b590      	push	{r4, r7, lr}
 80159e2:	b08f      	sub	sp, #60	@ 0x3c
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	0002      	movs	r2, r0
 80159e8:	1dfb      	adds	r3, r7, #7
 80159ea:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 80159ec:	240c      	movs	r4, #12
 80159ee:	193b      	adds	r3, r7, r4
 80159f0:	0018      	movs	r0, r3
 80159f2:	f7f7 fd33 	bl	800d45c <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 80159f6:	0021      	movs	r1, r4
 80159f8:	187b      	adds	r3, r7, r1
 80159fa:	2210      	movs	r2, #16
 80159fc:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 80159fe:	187b      	adds	r3, r7, r1
 8015a00:	2200      	movs	r2, #0
 8015a02:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8015a04:	187b      	adds	r3, r7, r1
 8015a06:	2200      	movs	r2, #0
 8015a08:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8015a0a:	187b      	adds	r3, r7, r1
 8015a0c:	2280      	movs	r2, #128	@ 0x80
 8015a0e:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8015a10:	187b      	adds	r3, r7, r1
 8015a12:	2200      	movs	r2, #0
 8015a14:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8015a16:	187b      	adds	r3, r7, r1
 8015a18:	2200      	movs	r2, #0
 8015a1a:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 8015a1c:	187b      	adds	r3, r7, r1
 8015a1e:	2200      	movs	r2, #0
 8015a20:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8015a22:	187b      	adds	r3, r7, r1
 8015a24:	2200      	movs	r2, #0
 8015a26:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8015a28:	187b      	adds	r3, r7, r1
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	601a      	str	r2, [r3, #0]

  switch (PortNum)
 8015a2e:	1dfb      	adds	r3, r7, #7
 8015a30:	781b      	ldrb	r3, [r3, #0]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d002      	beq.n	8015a3c <USBPD_HW_Init_DMATxInstance+0x5c>
 8015a36:	2b01      	cmp	r3, #1
 8015a38:	d012      	beq.n	8015a60 <USBPD_HW_Init_DMATxInstance+0x80>
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8015a3a:	e023      	b.n	8015a84 <USBPD_HW_Init_DMATxInstance+0xa4>
      UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 8015a3c:	2001      	movs	r0, #1
 8015a3e:	f7ff ff39 	bl	80158b4 <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 8015a42:	210c      	movs	r1, #12
 8015a44:	187b      	adds	r3, r7, r1
 8015a46:	223b      	movs	r2, #59	@ 0x3b
 8015a48:	625a      	str	r2, [r3, #36]	@ 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 8015a4a:	187b      	adds	r3, r7, r1
 8015a4c:	2280      	movs	r2, #128	@ 0x80
 8015a4e:	0152      	lsls	r2, r2, #5
 8015a50:	629a      	str	r2, [r3, #40]	@ 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 8015a52:	187b      	adds	r3, r7, r1
 8015a54:	4811      	ldr	r0, [pc, #68]	@ (8015a9c <USBPD_HW_Init_DMATxInstance+0xbc>)
 8015a56:	001a      	movs	r2, r3
 8015a58:	2101      	movs	r1, #1
 8015a5a:	f7f7 fcbf 	bl	800d3dc <LL_DMA_Init>
      break;
 8015a5e:	e011      	b.n	8015a84 <USBPD_HW_Init_DMATxInstance+0xa4>
      UCPDDMA_INSTANCE1_CLOCKENABLE_TX;
 8015a60:	2001      	movs	r0, #1
 8015a62:	f7ff ff27 	bl	80158b4 <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE1_REQUEST_TX;
 8015a66:	210c      	movs	r1, #12
 8015a68:	187b      	adds	r3, r7, r1
 8015a6a:	223d      	movs	r2, #61	@ 0x3d
 8015a6c:	625a      	str	r2, [r3, #36]	@ 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 8015a6e:	187b      	adds	r3, r7, r1
 8015a70:	2280      	movs	r2, #128	@ 0x80
 8015a72:	0152      	lsls	r2, r2, #5
 8015a74:	629a      	str	r2, [r3, #40]	@ 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
 8015a76:	187b      	adds	r3, r7, r1
 8015a78:	4808      	ldr	r0, [pc, #32]	@ (8015a9c <USBPD_HW_Init_DMATxInstance+0xbc>)
 8015a7a:	001a      	movs	r2, r3
 8015a7c:	2103      	movs	r1, #3
 8015a7e:	f7f7 fcad 	bl	800d3dc <LL_DMA_Init>
      break;
 8015a82:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_TX : UCPDDMA_INSTANCE1_CHANNEL_TX;
 8015a84:	1dfb      	adds	r3, r7, #7
 8015a86:	781b      	ldrb	r3, [r3, #0]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d101      	bne.n	8015a90 <USBPD_HW_Init_DMATxInstance+0xb0>
 8015a8c:	4b04      	ldr	r3, [pc, #16]	@ (8015aa0 <USBPD_HW_Init_DMATxInstance+0xc0>)
 8015a8e:	e000      	b.n	8015a92 <USBPD_HW_Init_DMATxInstance+0xb2>
 8015a90:	4b04      	ldr	r3, [pc, #16]	@ (8015aa4 <USBPD_HW_Init_DMATxInstance+0xc4>)
#else
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
#endif /* UCPD_INSTANCE1 */
}
 8015a92:	0018      	movs	r0, r3
 8015a94:	46bd      	mov	sp, r7
 8015a96:	b00f      	add	sp, #60	@ 0x3c
 8015a98:	bd90      	pop	{r4, r7, pc}
 8015a9a:	46c0      	nop			@ (mov r8, r8)
 8015a9c:	40020000 	.word	0x40020000
 8015aa0:	4002001c 	.word	0x4002001c
 8015aa4:	40020044 	.word	0x40020044

08015aa8 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b082      	sub	sp, #8
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	0002      	movs	r2, r0
 8015ab0:	1dfb      	adds	r3, r7, #7
 8015ab2:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 8015ab4:	46c0      	nop			@ (mov r8, r8)
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	b002      	add	sp, #8
 8015aba:	bd80      	pop	{r7, pc}

08015abc <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b082      	sub	sp, #8
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	0002      	movs	r2, r0
 8015ac4:	1dfb      	adds	r3, r7, #7
 8015ac6:	701a      	strb	r2, [r3, #0]
 8015ac8:	1dbb      	adds	r3, r7, #6
 8015aca:	1c0a      	adds	r2, r1, #0
 8015acc:	701a      	strb	r2, [r3, #0]
  switch (PortNum)
 8015ace:	1dfb      	adds	r3, r7, #7
 8015ad0:	781b      	ldrb	r3, [r3, #0]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d002      	beq.n	8015adc <USBPD_HW_SetFRSSignalling+0x20>
 8015ad6:	2b01      	cmp	r3, #1
 8015ad8:	d002      	beq.n	8015ae0 <USBPD_HW_SetFRSSignalling+0x24>
      }
      break;
    }
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8015ada:	e002      	b.n	8015ae2 <USBPD_HW_SetFRSSignalling+0x26>
      break;
 8015adc:	46c0      	nop			@ (mov r8, r8)
 8015ade:	e000      	b.n	8015ae2 <USBPD_HW_SetFRSSignalling+0x26>
      break;
 8015ae0:	46c0      	nop			@ (mov r8, r8)
  }
}
 8015ae2:	46c0      	nop			@ (mov r8, r8)
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	b002      	add	sp, #8
 8015ae8:	bd80      	pop	{r7, pc}

08015aea <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8015aea:	b580      	push	{r7, lr}
 8015aec:	b082      	sub	sp, #8
 8015aee:	af00      	add	r7, sp, #0
 8015af0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	699b      	ldr	r3, [r3, #24]
 8015af6:	2280      	movs	r2, #128	@ 0x80
 8015af8:	0212      	lsls	r2, r2, #8
 8015afa:	431a      	orrs	r2, r3
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	619a      	str	r2, [r3, #24]
}
 8015b00:	46c0      	nop			@ (mov r8, r8)
 8015b02:	46bd      	mov	sp, r7
 8015b04:	b002      	add	sp, #8
 8015b06:	bd80      	pop	{r7, pc}

08015b08 <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b082      	sub	sp, #8
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	699b      	ldr	r3, [r3, #24]
 8015b14:	2280      	movs	r2, #128	@ 0x80
 8015b16:	01d2      	lsls	r2, r2, #7
 8015b18:	431a      	orrs	r2, r3
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	619a      	str	r2, [r3, #24]
}
 8015b1e:	46c0      	nop			@ (mov r8, r8)
 8015b20:	46bd      	mov	sp, r7
 8015b22:	b002      	add	sp, #8
 8015b24:	bd80      	pop	{r7, pc}

08015b26 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 8015b26:	b580      	push	{r7, lr}
 8015b28:	b082      	sub	sp, #8
 8015b2a:	af00      	add	r7, sp, #0
 8015b2c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	699b      	ldr	r3, [r3, #24]
 8015b32:	2280      	movs	r2, #128	@ 0x80
 8015b34:	0152      	lsls	r2, r2, #5
 8015b36:	431a      	orrs	r2, r3
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	619a      	str	r2, [r3, #24]
}
 8015b3c:	46c0      	nop			@ (mov r8, r8)
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	b002      	add	sp, #8
 8015b42:	bd80      	pop	{r7, pc}

08015b44 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b082      	sub	sp, #8
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	699b      	ldr	r3, [r3, #24]
 8015b50:	2280      	movs	r2, #128	@ 0x80
 8015b52:	0112      	lsls	r2, r2, #4
 8015b54:	431a      	orrs	r2, r3
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	619a      	str	r2, [r3, #24]
}
 8015b5a:	46c0      	nop			@ (mov r8, r8)
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	b002      	add	sp, #8
 8015b60:	bd80      	pop	{r7, pc}

08015b62 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 8015b62:	b580      	push	{r7, lr}
 8015b64:	b082      	sub	sp, #8
 8015b66:	af00      	add	r7, sp, #0
 8015b68:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	699b      	ldr	r3, [r3, #24]
 8015b6e:	2280      	movs	r2, #128	@ 0x80
 8015b70:	00d2      	lsls	r2, r2, #3
 8015b72:	431a      	orrs	r2, r3
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	619a      	str	r2, [r3, #24]
}
 8015b78:	46c0      	nop			@ (mov r8, r8)
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	b002      	add	sp, #8
 8015b7e:	bd80      	pop	{r7, pc}

08015b80 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b082      	sub	sp, #8
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	699b      	ldr	r3, [r3, #24]
 8015b8c:	2280      	movs	r2, #128	@ 0x80
 8015b8e:	0092      	lsls	r2, r2, #2
 8015b90:	431a      	orrs	r2, r3
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	619a      	str	r2, [r3, #24]
}
 8015b96:	46c0      	nop			@ (mov r8, r8)
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	b002      	add	sp, #8
 8015b9c:	bd80      	pop	{r7, pc}

08015b9e <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 8015b9e:	b580      	push	{r7, lr}
 8015ba0:	b082      	sub	sp, #8
 8015ba2:	af00      	add	r7, sp, #0
 8015ba4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	699b      	ldr	r3, [r3, #24]
 8015baa:	2240      	movs	r2, #64	@ 0x40
 8015bac:	431a      	orrs	r2, r3
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	619a      	str	r2, [r3, #24]
}
 8015bb2:	46c0      	nop			@ (mov r8, r8)
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	b002      	add	sp, #8
 8015bb8:	bd80      	pop	{r7, pc}

08015bba <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 8015bba:	b580      	push	{r7, lr}
 8015bbc:	b082      	sub	sp, #8
 8015bbe:	af00      	add	r7, sp, #0
 8015bc0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	699b      	ldr	r3, [r3, #24]
 8015bc6:	2220      	movs	r2, #32
 8015bc8:	431a      	orrs	r2, r3
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	619a      	str	r2, [r3, #24]
}
 8015bce:	46c0      	nop			@ (mov r8, r8)
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	b002      	add	sp, #8
 8015bd4:	bd80      	pop	{r7, pc}

08015bd6 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 8015bd6:	b580      	push	{r7, lr}
 8015bd8:	b082      	sub	sp, #8
 8015bda:	af00      	add	r7, sp, #0
 8015bdc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	699b      	ldr	r3, [r3, #24]
 8015be2:	2210      	movs	r2, #16
 8015be4:	431a      	orrs	r2, r3
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	619a      	str	r2, [r3, #24]
}
 8015bea:	46c0      	nop			@ (mov r8, r8)
 8015bec:	46bd      	mov	sp, r7
 8015bee:	b002      	add	sp, #8
 8015bf0:	bd80      	pop	{r7, pc}

08015bf2 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 8015bf2:	b580      	push	{r7, lr}
 8015bf4:	b082      	sub	sp, #8
 8015bf6:	af00      	add	r7, sp, #0
 8015bf8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	699b      	ldr	r3, [r3, #24]
 8015bfe:	2208      	movs	r2, #8
 8015c00:	431a      	orrs	r2, r3
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	619a      	str	r2, [r3, #24]
}
 8015c06:	46c0      	nop			@ (mov r8, r8)
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	b002      	add	sp, #8
 8015c0c:	bd80      	pop	{r7, pc}

08015c0e <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 8015c0e:	b580      	push	{r7, lr}
 8015c10:	b082      	sub	sp, #8
 8015c12:	af00      	add	r7, sp, #0
 8015c14:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	699b      	ldr	r3, [r3, #24]
 8015c1a:	2204      	movs	r2, #4
 8015c1c:	431a      	orrs	r2, r3
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	619a      	str	r2, [r3, #24]
}
 8015c22:	46c0      	nop			@ (mov r8, r8)
 8015c24:	46bd      	mov	sp, r7
 8015c26:	b002      	add	sp, #8
 8015c28:	bd80      	pop	{r7, pc}

08015c2a <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 8015c2a:	b580      	push	{r7, lr}
 8015c2c:	b082      	sub	sp, #8
 8015c2e:	af00      	add	r7, sp, #0
 8015c30:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	699b      	ldr	r3, [r3, #24]
 8015c36:	2202      	movs	r2, #2
 8015c38:	431a      	orrs	r2, r3
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	619a      	str	r2, [r3, #24]
}
 8015c3e:	46c0      	nop			@ (mov r8, r8)
 8015c40:	46bd      	mov	sp, r7
 8015c42:	b002      	add	sp, #8
 8015c44:	bd80      	pop	{r7, pc}

08015c46 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 8015c46:	b580      	push	{r7, lr}
 8015c48:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 8015c4a:	2000      	movs	r0, #0
 8015c4c:	f000 f80c 	bl	8015c68 <PORTx_IRQHandler>
}
 8015c50:	46c0      	nop			@ (mov r8, r8)
 8015c52:	46bd      	mov	sp, r7
 8015c54:	bd80      	pop	{r7, pc}

08015c56 <USBPD_PORT1_IRQHandler>:

void USBPD_PORT1_IRQHandler(void)
{
 8015c56:	b580      	push	{r7, lr}
 8015c58:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_1);
 8015c5a:	2001      	movs	r0, #1
 8015c5c:	f000 f804 	bl	8015c68 <PORTx_IRQHandler>
}
 8015c60:	46c0      	nop			@ (mov r8, r8)
 8015c62:	46bd      	mov	sp, r7
 8015c64:	bd80      	pop	{r7, pc}
	...

08015c68 <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b084      	sub	sp, #16
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	0002      	movs	r2, r0
 8015c70:	1dfb      	adds	r3, r7, #7
 8015c72:	701a      	strb	r2, [r3, #0]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 8015c74:	1dfb      	adds	r3, r7, #7
 8015c76:	781a      	ldrb	r2, [r3, #0]
 8015c78:	49a6      	ldr	r1, [pc, #664]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015c7a:	0013      	movs	r3, r2
 8015c7c:	011b      	lsls	r3, r3, #4
 8015c7e:	1a9b      	subs	r3, r3, r2
 8015c80:	009b      	lsls	r3, r3, #2
 8015c82:	585b      	ldr	r3, [r3, r1]
 8015c84:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	695b      	ldr	r3, [r3, #20]
 8015c8a:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag[2] = {0, 0};

  if ((hucpd->IMR & _interrupt) != 0u)
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	691b      	ldr	r3, [r3, #16]
 8015c90:	68ba      	ldr	r2, [r7, #8]
 8015c92:	4013      	ands	r3, r2
 8015c94:	d100      	bne.n	8015c98 <PORTx_IRQHandler+0x30>
 8015c96:	e1fc      	b.n	8016092 <PORTx_IRQHandler+0x42a>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8015c98:	68bb      	ldr	r3, [r7, #8]
 8015c9a:	2202      	movs	r2, #2
 8015c9c:	4013      	ands	r3, r2
 8015c9e:	d03c      	beq.n	8015d1a <PORTx_IRQHandler+0xb2>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	0018      	movs	r0, r3
 8015ca4:	f7ff ffc1 	bl	8015c2a <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8015ca8:	1dfb      	adds	r3, r7, #7
 8015caa:	781a      	ldrb	r2, [r3, #0]
 8015cac:	4999      	ldr	r1, [pc, #612]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015cae:	0013      	movs	r3, r2
 8015cb0:	011b      	lsls	r3, r3, #4
 8015cb2:	1a9b      	subs	r3, r3, r2
 8015cb4:	009b      	lsls	r3, r3, #2
 8015cb6:	18cb      	adds	r3, r1, r3
 8015cb8:	3304      	adds	r3, #4
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	6819      	ldr	r1, [r3, #0]
 8015cbe:	1dfb      	adds	r3, r7, #7
 8015cc0:	781a      	ldrb	r2, [r3, #0]
 8015cc2:	4894      	ldr	r0, [pc, #592]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015cc4:	0013      	movs	r3, r2
 8015cc6:	011b      	lsls	r3, r3, #4
 8015cc8:	1a9b      	subs	r3, r3, r2
 8015cca:	009b      	lsls	r3, r3, #2
 8015ccc:	18c3      	adds	r3, r0, r3
 8015cce:	3304      	adds	r3, #4
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	2201      	movs	r2, #1
 8015cd4:	4391      	bics	r1, r2
 8015cd6:	000a      	movs	r2, r1
 8015cd8:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8015cda:	46c0      	nop			@ (mov r8, r8)
 8015cdc:	1dfb      	adds	r3, r7, #7
 8015cde:	781a      	ldrb	r2, [r3, #0]
 8015ce0:	498c      	ldr	r1, [pc, #560]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015ce2:	0013      	movs	r3, r2
 8015ce4:	011b      	lsls	r3, r3, #4
 8015ce6:	1a9b      	subs	r3, r3, r2
 8015ce8:	009b      	lsls	r3, r3, #2
 8015cea:	18cb      	adds	r3, r1, r3
 8015cec:	3304      	adds	r3, #4
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	2201      	movs	r2, #1
 8015cf4:	4013      	ands	r3, r2
 8015cf6:	2b01      	cmp	r3, #1
 8015cf8:	d0f0      	beq.n	8015cdc <PORTx_IRQHandler+0x74>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8015cfa:	1dfb      	adds	r3, r7, #7
 8015cfc:	781a      	ldrb	r2, [r3, #0]
 8015cfe:	4985      	ldr	r1, [pc, #532]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015d00:	0013      	movs	r3, r2
 8015d02:	011b      	lsls	r3, r3, #4
 8015d04:	1a9b      	subs	r3, r3, r2
 8015d06:	009b      	lsls	r3, r3, #2
 8015d08:	18cb      	adds	r3, r1, r3
 8015d0a:	3314      	adds	r3, #20
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	1dfa      	adds	r2, r7, #7
 8015d10:	7812      	ldrb	r2, [r2, #0]
 8015d12:	2101      	movs	r1, #1
 8015d14:	0010      	movs	r0, r2
 8015d16:	4798      	blx	r3
      return;
 8015d18:	e1bb      	b.n	8016092 <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	2204      	movs	r2, #4
 8015d1e:	4013      	ands	r3, r2
 8015d20:	d03c      	beq.n	8015d9c <PORTx_IRQHandler+0x134>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	0018      	movs	r0, r3
 8015d26:	f7ff ff72 	bl	8015c0e <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8015d2a:	1dfb      	adds	r3, r7, #7
 8015d2c:	781a      	ldrb	r2, [r3, #0]
 8015d2e:	4979      	ldr	r1, [pc, #484]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015d30:	0013      	movs	r3, r2
 8015d32:	011b      	lsls	r3, r3, #4
 8015d34:	1a9b      	subs	r3, r3, r2
 8015d36:	009b      	lsls	r3, r3, #2
 8015d38:	18cb      	adds	r3, r1, r3
 8015d3a:	3304      	adds	r3, #4
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	6819      	ldr	r1, [r3, #0]
 8015d40:	1dfb      	adds	r3, r7, #7
 8015d42:	781a      	ldrb	r2, [r3, #0]
 8015d44:	4873      	ldr	r0, [pc, #460]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015d46:	0013      	movs	r3, r2
 8015d48:	011b      	lsls	r3, r3, #4
 8015d4a:	1a9b      	subs	r3, r3, r2
 8015d4c:	009b      	lsls	r3, r3, #2
 8015d4e:	18c3      	adds	r3, r0, r3
 8015d50:	3304      	adds	r3, #4
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	2201      	movs	r2, #1
 8015d56:	4391      	bics	r1, r2
 8015d58:	000a      	movs	r2, r1
 8015d5a:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8015d5c:	46c0      	nop			@ (mov r8, r8)
 8015d5e:	1dfb      	adds	r3, r7, #7
 8015d60:	781a      	ldrb	r2, [r3, #0]
 8015d62:	496c      	ldr	r1, [pc, #432]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015d64:	0013      	movs	r3, r2
 8015d66:	011b      	lsls	r3, r3, #4
 8015d68:	1a9b      	subs	r3, r3, r2
 8015d6a:	009b      	lsls	r3, r3, #2
 8015d6c:	18cb      	adds	r3, r1, r3
 8015d6e:	3304      	adds	r3, #4
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	2201      	movs	r2, #1
 8015d76:	4013      	ands	r3, r2
 8015d78:	2b01      	cmp	r3, #1
 8015d7a:	d0f0      	beq.n	8015d5e <PORTx_IRQHandler+0xf6>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 8015d7c:	1dfb      	adds	r3, r7, #7
 8015d7e:	781a      	ldrb	r2, [r3, #0]
 8015d80:	4964      	ldr	r1, [pc, #400]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015d82:	0013      	movs	r3, r2
 8015d84:	011b      	lsls	r3, r3, #4
 8015d86:	1a9b      	subs	r3, r3, r2
 8015d88:	009b      	lsls	r3, r3, #2
 8015d8a:	18cb      	adds	r3, r1, r3
 8015d8c:	3314      	adds	r3, #20
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	1dfa      	adds	r2, r7, #7
 8015d92:	7812      	ldrb	r2, [r2, #0]
 8015d94:	2100      	movs	r1, #0
 8015d96:	0010      	movs	r0, r2
 8015d98:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 8015d9a:	e17a      	b.n	8016092 <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 8015d9c:	68bb      	ldr	r3, [r7, #8]
 8015d9e:	2208      	movs	r2, #8
 8015da0:	4013      	ands	r3, r2
 8015da2:	d03c      	beq.n	8015e1e <PORTx_IRQHandler+0x1b6>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	0018      	movs	r0, r3
 8015da8:	f7ff ff23 	bl	8015bf2 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8015dac:	1dfb      	adds	r3, r7, #7
 8015dae:	781a      	ldrb	r2, [r3, #0]
 8015db0:	4958      	ldr	r1, [pc, #352]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015db2:	0013      	movs	r3, r2
 8015db4:	011b      	lsls	r3, r3, #4
 8015db6:	1a9b      	subs	r3, r3, r2
 8015db8:	009b      	lsls	r3, r3, #2
 8015dba:	18cb      	adds	r3, r1, r3
 8015dbc:	3304      	adds	r3, #4
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	6819      	ldr	r1, [r3, #0]
 8015dc2:	1dfb      	adds	r3, r7, #7
 8015dc4:	781a      	ldrb	r2, [r3, #0]
 8015dc6:	4853      	ldr	r0, [pc, #332]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015dc8:	0013      	movs	r3, r2
 8015dca:	011b      	lsls	r3, r3, #4
 8015dcc:	1a9b      	subs	r3, r3, r2
 8015dce:	009b      	lsls	r3, r3, #2
 8015dd0:	18c3      	adds	r3, r0, r3
 8015dd2:	3304      	adds	r3, #4
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	2201      	movs	r2, #1
 8015dd8:	4391      	bics	r1, r2
 8015dda:	000a      	movs	r2, r1
 8015ddc:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8015dde:	46c0      	nop			@ (mov r8, r8)
 8015de0:	1dfb      	adds	r3, r7, #7
 8015de2:	781a      	ldrb	r2, [r3, #0]
 8015de4:	494b      	ldr	r1, [pc, #300]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015de6:	0013      	movs	r3, r2
 8015de8:	011b      	lsls	r3, r3, #4
 8015dea:	1a9b      	subs	r3, r3, r2
 8015dec:	009b      	lsls	r3, r3, #2
 8015dee:	18cb      	adds	r3, r1, r3
 8015df0:	3304      	adds	r3, #4
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	2201      	movs	r2, #1
 8015df8:	4013      	ands	r3, r2
 8015dfa:	2b01      	cmp	r3, #1
 8015dfc:	d0f0      	beq.n	8015de0 <PORTx_IRQHandler+0x178>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 8015dfe:	1dfb      	adds	r3, r7, #7
 8015e00:	781a      	ldrb	r2, [r3, #0]
 8015e02:	4944      	ldr	r1, [pc, #272]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015e04:	0013      	movs	r3, r2
 8015e06:	011b      	lsls	r3, r3, #4
 8015e08:	1a9b      	subs	r3, r3, r2
 8015e0a:	009b      	lsls	r3, r3, #2
 8015e0c:	18cb      	adds	r3, r1, r3
 8015e0e:	3314      	adds	r3, #20
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	1dfa      	adds	r2, r7, #7
 8015e14:	7812      	ldrb	r2, [r2, #0]
 8015e16:	2102      	movs	r1, #2
 8015e18:	0010      	movs	r0, r2
 8015e1a:	4798      	blx	r3
      return;
 8015e1c:	e139      	b.n	8016092 <PORTx_IRQHandler+0x42a>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 8015e1e:	68bb      	ldr	r3, [r7, #8]
 8015e20:	2210      	movs	r2, #16
 8015e22:	4013      	ands	r3, r2
 8015e24:	d004      	beq.n	8015e30 <PORTx_IRQHandler+0x1c8>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	0018      	movs	r0, r3
 8015e2a:	f7ff fed4 	bl	8015bd6 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 8015e2e:	e130      	b.n	8016092 <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 8015e30:	68bb      	ldr	r3, [r7, #8]
 8015e32:	2220      	movs	r2, #32
 8015e34:	4013      	ands	r3, r2
 8015e36:	d013      	beq.n	8015e60 <PORTx_IRQHandler+0x1f8>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	0018      	movs	r0, r3
 8015e3c:	f7ff febd 	bl	8015bba <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8015e40:	1dfb      	adds	r3, r7, #7
 8015e42:	781a      	ldrb	r2, [r3, #0]
 8015e44:	4933      	ldr	r1, [pc, #204]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015e46:	0013      	movs	r3, r2
 8015e48:	011b      	lsls	r3, r3, #4
 8015e4a:	1a9b      	subs	r3, r3, r2
 8015e4c:	009b      	lsls	r3, r3, #2
 8015e4e:	18cb      	adds	r3, r1, r3
 8015e50:	3324      	adds	r3, #36	@ 0x24
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	1dfa      	adds	r2, r7, #7
 8015e56:	7812      	ldrb	r2, [r2, #0]
 8015e58:	2105      	movs	r1, #5
 8015e5a:	0010      	movs	r0, r2
 8015e5c:	4798      	blx	r3
      return;
 8015e5e:	e118      	b.n	8016092 <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 8015e60:	68bb      	ldr	r3, [r7, #8]
 8015e62:	2240      	movs	r2, #64	@ 0x40
 8015e64:	4013      	ands	r3, r2
 8015e66:	d004      	beq.n	8015e72 <PORTx_IRQHandler+0x20a>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	0018      	movs	r0, r3
 8015e6c:	f7ff fe97 	bl	8015b9e <LL_UCPD_ClearFlag_TxUND>
      return;
 8015e70:	e10f      	b.n	8016092 <PORTx_IRQHandler+0x42a>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 8015e72:	68ba      	ldr	r2, [r7, #8]
 8015e74:	2380      	movs	r3, #128	@ 0x80
 8015e76:	009b      	lsls	r3, r3, #2
 8015e78:	4013      	ands	r3, r2
 8015e7a:	d023      	beq.n	8015ec4 <PORTx_IRQHandler+0x25c>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e80:	2b05      	cmp	r3, #5
 8015e82:	d10e      	bne.n	8015ea2 <PORTx_IRQHandler+0x23a>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8015e84:	1dfb      	adds	r3, r7, #7
 8015e86:	781a      	ldrb	r2, [r3, #0]
 8015e88:	4922      	ldr	r1, [pc, #136]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015e8a:	0013      	movs	r3, r2
 8015e8c:	011b      	lsls	r3, r3, #4
 8015e8e:	1a9b      	subs	r3, r3, r2
 8015e90:	009b      	lsls	r3, r3, #2
 8015e92:	18cb      	adds	r3, r1, r3
 8015e94:	331c      	adds	r3, #28
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	1dfa      	adds	r2, r7, #7
 8015e9a:	7812      	ldrb	r2, [r2, #0]
 8015e9c:	2106      	movs	r1, #6
 8015e9e:	0010      	movs	r0, r2
 8015ea0:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	0018      	movs	r0, r3
 8015ea6:	f7ff fe6b 	bl	8015b80 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 8015eaa:	1dfb      	adds	r3, r7, #7
 8015eac:	781a      	ldrb	r2, [r3, #0]
 8015eae:	4919      	ldr	r1, [pc, #100]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015eb0:	2038      	movs	r0, #56	@ 0x38
 8015eb2:	0013      	movs	r3, r2
 8015eb4:	011b      	lsls	r3, r3, #4
 8015eb6:	1a9b      	subs	r3, r3, r2
 8015eb8:	009b      	lsls	r3, r3, #2
 8015eba:	18cb      	adds	r3, r1, r3
 8015ebc:	181b      	adds	r3, r3, r0
 8015ebe:	2201      	movs	r2, #1
 8015ec0:	701a      	strb	r2, [r3, #0]
      return;
 8015ec2:	e0e6      	b.n	8016092 <PORTx_IRQHandler+0x42a>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 8015ec4:	68ba      	ldr	r2, [r7, #8]
 8015ec6:	2380      	movs	r3, #128	@ 0x80
 8015ec8:	00db      	lsls	r3, r3, #3
 8015eca:	4013      	ands	r3, r2
 8015ecc:	d013      	beq.n	8015ef6 <PORTx_IRQHandler+0x28e>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8015ece:	1dfb      	adds	r3, r7, #7
 8015ed0:	781a      	ldrb	r2, [r3, #0]
 8015ed2:	4910      	ldr	r1, [pc, #64]	@ (8015f14 <PORTx_IRQHandler+0x2ac>)
 8015ed4:	0013      	movs	r3, r2
 8015ed6:	011b      	lsls	r3, r3, #4
 8015ed8:	1a9b      	subs	r3, r3, r2
 8015eda:	009b      	lsls	r3, r3, #2
 8015edc:	18cb      	adds	r3, r1, r3
 8015ede:	331c      	adds	r3, #28
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	1dfa      	adds	r2, r7, #7
 8015ee4:	7812      	ldrb	r2, [r2, #0]
 8015ee6:	2105      	movs	r1, #5
 8015ee8:	0010      	movs	r0, r2
 8015eea:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	0018      	movs	r0, r3
 8015ef0:	f7ff fe37 	bl	8015b62 <LL_UCPD_ClearFlag_RxHRST>
      return;
 8015ef4:	e0cd      	b.n	8016092 <PORTx_IRQHandler+0x42a>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 8015ef6:	68ba      	ldr	r2, [r7, #8]
 8015ef8:	2380      	movs	r3, #128	@ 0x80
 8015efa:	011b      	lsls	r3, r3, #4
 8015efc:	4013      	ands	r3, r2
 8015efe:	d00d      	beq.n	8015f1c <PORTx_IRQHandler+0x2b4>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag[PortNum] = 1;
 8015f00:	1dfb      	adds	r3, r7, #7
 8015f02:	781b      	ldrb	r3, [r3, #0]
 8015f04:	4a04      	ldr	r2, [pc, #16]	@ (8015f18 <PORTx_IRQHandler+0x2b0>)
 8015f06:	2101      	movs	r1, #1
 8015f08:	54d1      	strb	r1, [r2, r3]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	0018      	movs	r0, r3
 8015f0e:	f7ff fe19 	bl	8015b44 <LL_UCPD_ClearFlag_RxOvr>
      return;
 8015f12:	e0be      	b.n	8016092 <PORTx_IRQHandler+0x42a>
 8015f14:	200117d4 	.word	0x200117d4
 8015f18:	200117c0 	.word	0x200117c0
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 8015f1c:	68ba      	ldr	r2, [r7, #8]
 8015f1e:	2380      	movs	r3, #128	@ 0x80
 8015f20:	015b      	lsls	r3, r3, #5
 8015f22:	4013      	ands	r3, r2
 8015f24:	d100      	bne.n	8015f28 <PORTx_IRQHandler+0x2c0>
 8015f26:	e096      	b.n	8016056 <PORTx_IRQHandler+0x3ee>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 8015f28:	1dfb      	adds	r3, r7, #7
 8015f2a:	781a      	ldrb	r2, [r3, #0]
 8015f2c:	495a      	ldr	r1, [pc, #360]	@ (8016098 <PORTx_IRQHandler+0x430>)
 8015f2e:	2038      	movs	r0, #56	@ 0x38
 8015f30:	0013      	movs	r3, r2
 8015f32:	011b      	lsls	r3, r3, #4
 8015f34:	1a9b      	subs	r3, r3, r2
 8015f36:	009b      	lsls	r3, r3, #2
 8015f38:	18cb      	adds	r3, r1, r3
 8015f3a:	181b      	adds	r3, r3, r0
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	0018      	movs	r0, r3
 8015f44:	f7ff fdef 	bl	8015b26 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8015f48:	1dfb      	adds	r3, r7, #7
 8015f4a:	781a      	ldrb	r2, [r3, #0]
 8015f4c:	4952      	ldr	r1, [pc, #328]	@ (8016098 <PORTx_IRQHandler+0x430>)
 8015f4e:	0013      	movs	r3, r2
 8015f50:	011b      	lsls	r3, r3, #4
 8015f52:	1a9b      	subs	r3, r3, r2
 8015f54:	009b      	lsls	r3, r3, #2
 8015f56:	18cb      	adds	r3, r1, r3
 8015f58:	3308      	adds	r3, #8
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	6819      	ldr	r1, [r3, #0]
 8015f5e:	1dfb      	adds	r3, r7, #7
 8015f60:	781a      	ldrb	r2, [r3, #0]
 8015f62:	484d      	ldr	r0, [pc, #308]	@ (8016098 <PORTx_IRQHandler+0x430>)
 8015f64:	0013      	movs	r3, r2
 8015f66:	011b      	lsls	r3, r3, #4
 8015f68:	1a9b      	subs	r3, r3, r2
 8015f6a:	009b      	lsls	r3, r3, #2
 8015f6c:	18c3      	adds	r3, r0, r3
 8015f6e:	3308      	adds	r3, #8
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	2201      	movs	r2, #1
 8015f74:	4391      	bics	r1, r2
 8015f76:	000a      	movs	r2, r1
 8015f78:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8015f7a:	46c0      	nop			@ (mov r8, r8)
 8015f7c:	1dfb      	adds	r3, r7, #7
 8015f7e:	781a      	ldrb	r2, [r3, #0]
 8015f80:	4945      	ldr	r1, [pc, #276]	@ (8016098 <PORTx_IRQHandler+0x430>)
 8015f82:	0013      	movs	r3, r2
 8015f84:	011b      	lsls	r3, r3, #4
 8015f86:	1a9b      	subs	r3, r3, r2
 8015f88:	009b      	lsls	r3, r3, #2
 8015f8a:	18cb      	adds	r3, r1, r3
 8015f8c:	3308      	adds	r3, #8
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	2201      	movs	r2, #1
 8015f94:	4013      	ands	r3, r2
 8015f96:	2b01      	cmp	r3, #1
 8015f98:	d0f0      	beq.n	8015f7c <PORTx_IRQHandler+0x314>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8015f9a:	1dfb      	adds	r3, r7, #7
 8015f9c:	781a      	ldrb	r2, [r3, #0]
 8015f9e:	493e      	ldr	r1, [pc, #248]	@ (8016098 <PORTx_IRQHandler+0x430>)
 8015fa0:	0013      	movs	r3, r2
 8015fa2:	011b      	lsls	r3, r3, #4
 8015fa4:	1a9b      	subs	r3, r3, r2
 8015fa6:	009b      	lsls	r3, r3, #2
 8015fa8:	18cb      	adds	r3, r1, r3
 8015faa:	3330      	adds	r3, #48	@ 0x30
 8015fac:	6818      	ldr	r0, [r3, #0]
 8015fae:	1dfb      	adds	r3, r7, #7
 8015fb0:	781a      	ldrb	r2, [r3, #0]
 8015fb2:	4939      	ldr	r1, [pc, #228]	@ (8016098 <PORTx_IRQHandler+0x430>)
 8015fb4:	0013      	movs	r3, r2
 8015fb6:	011b      	lsls	r3, r3, #4
 8015fb8:	1a9b      	subs	r3, r3, r2
 8015fba:	009b      	lsls	r3, r3, #2
 8015fbc:	18cb      	adds	r3, r1, r3
 8015fbe:	3308      	adds	r3, #8
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	0002      	movs	r2, r0
 8015fc4:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 8015fc6:	1dfb      	adds	r3, r7, #7
 8015fc8:	781a      	ldrb	r2, [r3, #0]
 8015fca:	4933      	ldr	r1, [pc, #204]	@ (8016098 <PORTx_IRQHandler+0x430>)
 8015fcc:	0013      	movs	r3, r2
 8015fce:	011b      	lsls	r3, r3, #4
 8015fd0:	1a9b      	subs	r3, r3, r2
 8015fd2:	009b      	lsls	r3, r3, #2
 8015fd4:	18cb      	adds	r3, r1, r3
 8015fd6:	3308      	adds	r3, #8
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	2284      	movs	r2, #132	@ 0x84
 8015fdc:	0052      	lsls	r2, r2, #1
 8015fde:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8015fe0:	1dfb      	adds	r3, r7, #7
 8015fe2:	781a      	ldrb	r2, [r3, #0]
 8015fe4:	492c      	ldr	r1, [pc, #176]	@ (8016098 <PORTx_IRQHandler+0x430>)
 8015fe6:	0013      	movs	r3, r2
 8015fe8:	011b      	lsls	r3, r3, #4
 8015fea:	1a9b      	subs	r3, r3, r2
 8015fec:	009b      	lsls	r3, r3, #2
 8015fee:	18cb      	adds	r3, r1, r3
 8015ff0:	3308      	adds	r3, #8
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	6819      	ldr	r1, [r3, #0]
 8015ff6:	1dfb      	adds	r3, r7, #7
 8015ff8:	781a      	ldrb	r2, [r3, #0]
 8015ffa:	4827      	ldr	r0, [pc, #156]	@ (8016098 <PORTx_IRQHandler+0x430>)
 8015ffc:	0013      	movs	r3, r2
 8015ffe:	011b      	lsls	r3, r3, #4
 8016000:	1a9b      	subs	r3, r3, r2
 8016002:	009b      	lsls	r3, r3, #2
 8016004:	18c3      	adds	r3, r0, r3
 8016006:	3308      	adds	r3, #8
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	2201      	movs	r2, #1
 801600c:	430a      	orrs	r2, r1
 801600e:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag[PortNum] == 0u))
 8016010:	68ba      	ldr	r2, [r7, #8]
 8016012:	2380      	movs	r3, #128	@ 0x80
 8016014:	019b      	lsls	r3, r3, #6
 8016016:	4013      	ands	r3, r2
 8016018:	d117      	bne.n	801604a <PORTx_IRQHandler+0x3e2>
 801601a:	1dfb      	adds	r3, r7, #7
 801601c:	781b      	ldrb	r3, [r3, #0]
 801601e:	4a1f      	ldr	r2, [pc, #124]	@ (801609c <PORTx_IRQHandler+0x434>)
 8016020:	5cd3      	ldrb	r3, [r2, r3]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d111      	bne.n	801604a <PORTx_IRQHandler+0x3e2>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 8016026:	1dfb      	adds	r3, r7, #7
 8016028:	781a      	ldrb	r2, [r3, #0]
 801602a:	491b      	ldr	r1, [pc, #108]	@ (8016098 <PORTx_IRQHandler+0x430>)
 801602c:	0013      	movs	r3, r2
 801602e:	011b      	lsls	r3, r3, #4
 8016030:	1a9b      	subs	r3, r3, r2
 8016032:	009b      	lsls	r3, r3, #2
 8016034:	18cb      	adds	r3, r1, r3
 8016036:	3320      	adds	r3, #32
 8016038:	681a      	ldr	r2, [r3, #0]
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801603e:	2107      	movs	r1, #7
 8016040:	4019      	ands	r1, r3
 8016042:	1dfb      	adds	r3, r7, #7
 8016044:	781b      	ldrb	r3, [r3, #0]
 8016046:	0018      	movs	r0, r3
 8016048:	4790      	blx	r2
      }
      ovrflag[PortNum] = 0;
 801604a:	1dfb      	adds	r3, r7, #7
 801604c:	781b      	ldrb	r3, [r3, #0]
 801604e:	4a13      	ldr	r2, [pc, #76]	@ (801609c <PORTx_IRQHandler+0x434>)
 8016050:	2100      	movs	r1, #0
 8016052:	54d1      	strb	r1, [r2, r3]
      return;
 8016054:	e01d      	b.n	8016092 <PORTx_IRQHandler+0x42a>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 8016056:	68ba      	ldr	r2, [r7, #8]
 8016058:	2380      	movs	r3, #128	@ 0x80
 801605a:	01db      	lsls	r3, r3, #7
 801605c:	4013      	ands	r3, r2
 801605e:	d104      	bne.n	801606a <PORTx_IRQHandler+0x402>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 8016060:	68ba      	ldr	r2, [r7, #8]
 8016062:	2380      	movs	r3, #128	@ 0x80
 8016064:	021b      	lsls	r3, r3, #8
 8016066:	4013      	ands	r3, r2
 8016068:	d013      	beq.n	8016092 <PORTx_IRQHandler+0x42a>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	0018      	movs	r0, r3
 801606e:	f7ff fd4b 	bl	8015b08 <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	0018      	movs	r0, r3
 8016076:	f7ff fd38 	bl	8015aea <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 801607a:	1dfb      	adds	r3, r7, #7
 801607c:	781a      	ldrb	r2, [r3, #0]
 801607e:	4906      	ldr	r1, [pc, #24]	@ (8016098 <PORTx_IRQHandler+0x430>)
 8016080:	0013      	movs	r3, r2
 8016082:	011b      	lsls	r3, r3, #4
 8016084:	1a9b      	subs	r3, r3, r2
 8016086:	009b      	lsls	r3, r3, #2
 8016088:	18cb      	adds	r3, r1, r3
 801608a:	332c      	adds	r3, #44	@ 0x2c
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 8016090:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
#endif /* _FRS */
  }
}
 8016092:	46bd      	mov	sp, r7
 8016094:	b004      	add	sp, #16
 8016096:	bd80      	pop	{r7, pc}
 8016098:	200117d4 	.word	0x200117d4
 801609c:	200117c0 	.word	0x200117c0

080160a0 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 80160a0:	b590      	push	{r4, r7, lr}
 80160a2:	b085      	sub	sp, #20
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	60b9      	str	r1, [r7, #8]
 80160a8:	607a      	str	r2, [r7, #4]
 80160aa:	603b      	str	r3, [r7, #0]
 80160ac:	240f      	movs	r4, #15
 80160ae:	193b      	adds	r3, r7, r4
 80160b0:	1c02      	adds	r2, r0, #0
 80160b2:	701a      	strb	r2, [r3, #0]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 80160b4:	193b      	adds	r3, r7, r4
 80160b6:	781a      	ldrb	r2, [r3, #0]
 80160b8:	68bb      	ldr	r3, [r7, #8]
 80160ba:	6919      	ldr	r1, [r3, #16]
 80160bc:	4830      	ldr	r0, [pc, #192]	@ (8016180 <USBPD_PHY_Init+0xe0>)
 80160be:	0013      	movs	r3, r2
 80160c0:	011b      	lsls	r3, r3, #4
 80160c2:	1a9b      	subs	r3, r3, r2
 80160c4:	009b      	lsls	r3, r3, #2
 80160c6:	18c3      	adds	r3, r0, r3
 80160c8:	3314      	adds	r3, #20
 80160ca:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 80160cc:	193b      	adds	r3, r7, r4
 80160ce:	781a      	ldrb	r2, [r3, #0]
 80160d0:	68bb      	ldr	r3, [r7, #8]
 80160d2:	68d9      	ldr	r1, [r3, #12]
 80160d4:	482a      	ldr	r0, [pc, #168]	@ (8016180 <USBPD_PHY_Init+0xe0>)
 80160d6:	0013      	movs	r3, r2
 80160d8:	011b      	lsls	r3, r3, #4
 80160da:	1a9b      	subs	r3, r3, r2
 80160dc:	009b      	lsls	r3, r3, #2
 80160de:	18c3      	adds	r3, r0, r3
 80160e0:	3318      	adds	r3, #24
 80160e2:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 80160e4:	193b      	adds	r3, r7, r4
 80160e6:	781a      	ldrb	r2, [r3, #0]
 80160e8:	68bb      	ldr	r3, [r7, #8]
 80160ea:	6859      	ldr	r1, [r3, #4]
 80160ec:	4824      	ldr	r0, [pc, #144]	@ (8016180 <USBPD_PHY_Init+0xe0>)
 80160ee:	0013      	movs	r3, r2
 80160f0:	011b      	lsls	r3, r3, #4
 80160f2:	1a9b      	subs	r3, r3, r2
 80160f4:	009b      	lsls	r3, r3, #2
 80160f6:	18c3      	adds	r3, r0, r3
 80160f8:	331c      	adds	r3, #28
 80160fa:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 80160fc:	193b      	adds	r3, r7, r4
 80160fe:	781a      	ldrb	r2, [r3, #0]
 8016100:	491f      	ldr	r1, [pc, #124]	@ (8016180 <USBPD_PHY_Init+0xe0>)
 8016102:	0013      	movs	r3, r2
 8016104:	011b      	lsls	r3, r3, #4
 8016106:	1a9b      	subs	r3, r3, r2
 8016108:	009b      	lsls	r3, r3, #2
 801610a:	18cb      	adds	r3, r1, r3
 801610c:	3320      	adds	r3, #32
 801610e:	4a1d      	ldr	r2, [pc, #116]	@ (8016184 <USBPD_PHY_Init+0xe4>)
 8016110:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 8016112:	193b      	adds	r3, r7, r4
 8016114:	781a      	ldrb	r2, [r3, #0]
 8016116:	68bb      	ldr	r3, [r7, #8]
 8016118:	6899      	ldr	r1, [r3, #8]
 801611a:	4819      	ldr	r0, [pc, #100]	@ (8016180 <USBPD_PHY_Init+0xe0>)
 801611c:	0013      	movs	r3, r2
 801611e:	011b      	lsls	r3, r3, #4
 8016120:	1a9b      	subs	r3, r3, r2
 8016122:	009b      	lsls	r3, r3, #2
 8016124:	18c3      	adds	r3, r0, r3
 8016126:	3324      	adds	r3, #36	@ 0x24
 8016128:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 801612a:	193b      	adds	r3, r7, r4
 801612c:	781a      	ldrb	r2, [r3, #0]
 801612e:	68bb      	ldr	r3, [r7, #8]
 8016130:	6959      	ldr	r1, [r3, #20]
 8016132:	4813      	ldr	r0, [pc, #76]	@ (8016180 <USBPD_PHY_Init+0xe0>)
 8016134:	0013      	movs	r3, r2
 8016136:	011b      	lsls	r3, r3, #4
 8016138:	1a9b      	subs	r3, r3, r2
 801613a:	009b      	lsls	r3, r3, #2
 801613c:	18c3      	adds	r3, r0, r3
 801613e:	3328      	adds	r3, #40	@ 0x28
 8016140:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 8016142:	193b      	adds	r3, r7, r4
 8016144:	781a      	ldrb	r2, [r3, #0]
 8016146:	490e      	ldr	r1, [pc, #56]	@ (8016180 <USBPD_PHY_Init+0xe0>)
 8016148:	0013      	movs	r3, r2
 801614a:	011b      	lsls	r3, r3, #4
 801614c:	1a9b      	subs	r3, r3, r2
 801614e:	009b      	lsls	r3, r3, #2
 8016150:	18cb      	adds	r3, r1, r3
 8016152:	3330      	adds	r3, #48	@ 0x30
 8016154:	687a      	ldr	r2, [r7, #4]
 8016156:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 8016158:	193b      	adds	r3, r7, r4
 801615a:	781b      	ldrb	r3, [r3, #0]
 801615c:	4a0a      	ldr	r2, [pc, #40]	@ (8016188 <USBPD_PHY_Init+0xe8>)
 801615e:	00db      	lsls	r3, r3, #3
 8016160:	18d3      	adds	r3, r2, r3
 8016162:	3304      	adds	r3, #4
 8016164:	6a3a      	ldr	r2, [r7, #32]
 8016166:	601a      	str	r2, [r3, #0]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 8016168:	193b      	adds	r3, r7, r4
 801616a:	781a      	ldrb	r2, [r3, #0]
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	6819      	ldr	r1, [r3, #0]
 8016170:	4b05      	ldr	r3, [pc, #20]	@ (8016188 <USBPD_PHY_Init+0xe8>)
 8016172:	00d2      	lsls	r2, r2, #3
 8016174:	50d1      	str	r1, [r2, r3]

  return USBPD_OK;
 8016176:	2300      	movs	r3, #0
}
 8016178:	0018      	movs	r0, r3
 801617a:	46bd      	mov	sp, r7
 801617c:	b005      	add	sp, #20
 801617e:	bd90      	pop	{r4, r7, pc}
 8016180:	200117d4 	.word	0x200117d4
 8016184:	08016371 	.word	0x08016371
 8016188:	200117c4 	.word	0x200117c4

0801618c <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b082      	sub	sp, #8
 8016190:	af00      	add	r7, sp, #0
 8016192:	0002      	movs	r2, r0
 8016194:	1dfb      	adds	r3, r7, #7
 8016196:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  return 905u;
 8016198:	4b02      	ldr	r3, [pc, #8]	@ (80161a4 <USBPD_PHY_GetRetryTimerValue+0x18>)
}
 801619a:	0018      	movs	r0, r3
 801619c:	46bd      	mov	sp, r7
 801619e:	b002      	add	sp, #8
 80161a0:	bd80      	pop	{r7, pc}
 80161a2:	46c0      	nop			@ (mov r8, r8)
 80161a4:	00000389 	.word	0x00000389

080161a8 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b082      	sub	sp, #8
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	0002      	movs	r2, r0
 80161b0:	1dfb      	adds	r3, r7, #7
 80161b2:	701a      	strb	r2, [r3, #0]
  return 30u;
 80161b4:	231e      	movs	r3, #30
}
 80161b6:	0018      	movs	r0, r3
 80161b8:	46bd      	mov	sp, r7
 80161ba:	b002      	add	sp, #8
 80161bc:	bd80      	pop	{r7, pc}

080161be <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 80161be:	b580      	push	{r7, lr}
 80161c0:	b082      	sub	sp, #8
 80161c2:	af00      	add	r7, sp, #0
 80161c4:	0002      	movs	r2, r0
 80161c6:	1dfb      	adds	r3, r7, #7
 80161c8:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 80161ca:	46c0      	nop			@ (mov r8, r8)
 80161cc:	46bd      	mov	sp, r7
 80161ce:	b002      	add	sp, #8
 80161d0:	bd80      	pop	{r7, pc}

080161d2 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 80161d2:	b580      	push	{r7, lr}
 80161d4:	b082      	sub	sp, #8
 80161d6:	af00      	add	r7, sp, #0
 80161d8:	0002      	movs	r2, r0
 80161da:	1dfb      	adds	r3, r7, #7
 80161dc:	701a      	strb	r2, [r3, #0]
 80161de:	1dbb      	adds	r3, r7, #6
 80161e0:	1c0a      	adds	r2, r1, #0
 80161e2:	701a      	strb	r2, [r3, #0]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 80161e4:	1dbb      	adds	r3, r7, #6
 80161e6:	7819      	ldrb	r1, [r3, #0]
 80161e8:	1dfb      	adds	r3, r7, #7
 80161ea:	7818      	ldrb	r0, [r3, #0]
 80161ec:	2300      	movs	r3, #0
 80161ee:	2200      	movs	r2, #0
 80161f0:	f000 f805 	bl	80161fe <USBPD_PHY_SendMessage>
 80161f4:	0003      	movs	r3, r0
}
 80161f6:	0018      	movs	r0, r3
 80161f8:	46bd      	mov	sp, r7
 80161fa:	b002      	add	sp, #8
 80161fc:	bd80      	pop	{r7, pc}

080161fe <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 80161fe:	b590      	push	{r4, r7, lr}
 8016200:	b083      	sub	sp, #12
 8016202:	af00      	add	r7, sp, #0
 8016204:	0004      	movs	r4, r0
 8016206:	0008      	movs	r0, r1
 8016208:	603a      	str	r2, [r7, #0]
 801620a:	0019      	movs	r1, r3
 801620c:	1dfb      	adds	r3, r7, #7
 801620e:	1c22      	adds	r2, r4, #0
 8016210:	701a      	strb	r2, [r3, #0]
 8016212:	1dbb      	adds	r3, r7, #6
 8016214:	1c02      	adds	r2, r0, #0
 8016216:	701a      	strb	r2, [r3, #0]
 8016218:	1d3b      	adds	r3, r7, #4
 801621a:	1c0a      	adds	r2, r1, #0
 801621c:	801a      	strh	r2, [r3, #0]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 801621e:	1d3b      	adds	r3, r7, #4
 8016220:	881c      	ldrh	r4, [r3, #0]
 8016222:	683a      	ldr	r2, [r7, #0]
 8016224:	1dbb      	adds	r3, r7, #6
 8016226:	7819      	ldrb	r1, [r3, #0]
 8016228:	1dfb      	adds	r3, r7, #7
 801622a:	7818      	ldrb	r0, [r3, #0]
 801622c:	0023      	movs	r3, r4
 801622e:	f000 fb2f 	bl	8016890 <USBPD_HW_IF_SendBuffer>
 8016232:	0003      	movs	r3, r0
}
 8016234:	0018      	movs	r0, r3
 8016236:	46bd      	mov	sp, r7
 8016238:	b003      	add	sp, #12
 801623a:	bd90      	pop	{r4, r7, pc}

0801623c <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b082      	sub	sp, #8
 8016240:	af00      	add	r7, sp, #0
 8016242:	0002      	movs	r2, r0
 8016244:	1dfb      	adds	r3, r7, #7
 8016246:	701a      	strb	r2, [r3, #0]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 8016248:	1dfb      	adds	r3, r7, #7
 801624a:	781b      	ldrb	r3, [r3, #0]
 801624c:	0018      	movs	r0, r3
 801624e:	f000 fc7d 	bl	8016b4c <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 8016252:	2300      	movs	r3, #0
}
 8016254:	0018      	movs	r0, r3
 8016256:	46bd      	mov	sp, r7
 8016258:	b002      	add	sp, #8
 801625a:	bd80      	pop	{r7, pc}

0801625c <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b082      	sub	sp, #8
 8016260:	af00      	add	r7, sp, #0
 8016262:	0002      	movs	r2, r0
 8016264:	1dfb      	adds	r3, r7, #7
 8016266:	701a      	strb	r2, [r3, #0]
 8016268:	1dbb      	adds	r3, r7, #6
 801626a:	1c0a      	adds	r2, r1, #0
 801626c:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 801626e:	1dbb      	adds	r3, r7, #6
 8016270:	781b      	ldrb	r3, [r3, #0]
 8016272:	2b07      	cmp	r3, #7
 8016274:	d104      	bne.n	8016280 <USBPD_PHY_ExitTransmit+0x24>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 8016276:	1dfb      	adds	r3, r7, #7
 8016278:	781b      	ldrb	r3, [r3, #0]
 801627a:	0018      	movs	r0, r3
 801627c:	f000 fad0 	bl	8016820 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 8016280:	2300      	movs	r3, #0
}
 8016282:	0018      	movs	r0, r3
 8016284:	46bd      	mov	sp, r7
 8016286:	b002      	add	sp, #8
 8016288:	bd80      	pop	{r7, pc}

0801628a <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 801628a:	b580      	push	{r7, lr}
 801628c:	b082      	sub	sp, #8
 801628e:	af00      	add	r7, sp, #0
 8016290:	0002      	movs	r2, r0
 8016292:	1dfb      	adds	r3, r7, #7
 8016294:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 8016296:	1dfb      	adds	r3, r7, #7
 8016298:	781b      	ldrb	r3, [r3, #0]
 801629a:	0018      	movs	r0, r3
 801629c:	f001 f87e 	bl	801739c <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 80162a0:	46c0      	nop			@ (mov r8, r8)
 80162a2:	46bd      	mov	sp, r7
 80162a4:	b002      	add	sp, #8
 80162a6:	bd80      	pop	{r7, pc}

080162a8 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b082      	sub	sp, #8
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	0002      	movs	r2, r0
 80162b0:	1dfb      	adds	r3, r7, #7
 80162b2:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 80162b4:	1dfb      	adds	r3, r7, #7
 80162b6:	781b      	ldrb	r3, [r3, #0]
 80162b8:	0018      	movs	r0, r3
 80162ba:	f001 f889 	bl	80173d0 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 80162be:	46c0      	nop			@ (mov r8, r8)
 80162c0:	46bd      	mov	sp, r7
 80162c2:	b002      	add	sp, #8
 80162c4:	bd80      	pop	{r7, pc}
	...

080162c8 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b082      	sub	sp, #8
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	0002      	movs	r2, r0
 80162d0:	6039      	str	r1, [r7, #0]
 80162d2:	1dfb      	adds	r3, r7, #7
 80162d4:	701a      	strb	r2, [r3, #0]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 80162d6:	1dfb      	adds	r3, r7, #7
 80162d8:	781b      	ldrb	r3, [r3, #0]
 80162da:	4a05      	ldr	r2, [pc, #20]	@ (80162f0 <USBPD_PHY_SOPSupported+0x28>)
 80162dc:	00db      	lsls	r3, r3, #3
 80162de:	18d3      	adds	r3, r2, r3
 80162e0:	3304      	adds	r3, #4
 80162e2:	683a      	ldr	r2, [r7, #0]
 80162e4:	601a      	str	r2, [r3, #0]
}
 80162e6:	46c0      	nop			@ (mov r8, r8)
 80162e8:	46bd      	mov	sp, r7
 80162ea:	b002      	add	sp, #8
 80162ec:	bd80      	pop	{r7, pc}
 80162ee:	46c0      	nop			@ (mov r8, r8)
 80162f0:	200117c4 	.word	0x200117c4

080162f4 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b082      	sub	sp, #8
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	0002      	movs	r2, r0
 80162fc:	1dfb      	adds	r3, r7, #7
 80162fe:	701a      	strb	r2, [r3, #0]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 8016300:	1dfb      	adds	r3, r7, #7
 8016302:	781b      	ldrb	r3, [r3, #0]
 8016304:	0018      	movs	r0, r3
 8016306:	f001 f87d 	bl	8017404 <USBPD_HW_IF_IsResistor_SinkTxOk>
 801630a:	0003      	movs	r3, r0
}
 801630c:	0018      	movs	r0, r3
 801630e:	46bd      	mov	sp, r7
 8016310:	b002      	add	sp, #8
 8016312:	bd80      	pop	{r7, pc}

08016314 <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b082      	sub	sp, #8
 8016318:	af00      	add	r7, sp, #0
 801631a:	0002      	movs	r2, r0
 801631c:	1dfb      	adds	r3, r7, #7
 801631e:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 8016320:	1dfb      	adds	r3, r7, #7
 8016322:	781b      	ldrb	r3, [r3, #0]
 8016324:	0018      	movs	r0, r3
 8016326:	f001 f8b1 	bl	801748c <USBPD_HW_IF_FastRoleSwapSignalling>
}
 801632a:	46c0      	nop			@ (mov r8, r8)
 801632c:	46bd      	mov	sp, r7
 801632e:	b002      	add	sp, #8
 8016330:	bd80      	pop	{r7, pc}

08016332 <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 8016332:	b580      	push	{r7, lr}
 8016334:	b082      	sub	sp, #8
 8016336:	af00      	add	r7, sp, #0
 8016338:	0002      	movs	r2, r0
 801633a:	1dfb      	adds	r3, r7, #7
 801633c:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_EnableRX(PortNum);
 801633e:	1dfb      	adds	r3, r7, #7
 8016340:	781b      	ldrb	r3, [r3, #0]
 8016342:	0018      	movs	r0, r3
 8016344:	f000 fe0a 	bl	8016f5c <USBPD_HW_IF_EnableRX>
}
 8016348:	46c0      	nop			@ (mov r8, r8)
 801634a:	46bd      	mov	sp, r7
 801634c:	b002      	add	sp, #8
 801634e:	bd80      	pop	{r7, pc}

08016350 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 8016350:	b580      	push	{r7, lr}
 8016352:	b082      	sub	sp, #8
 8016354:	af00      	add	r7, sp, #0
 8016356:	0002      	movs	r2, r0
 8016358:	1dfb      	adds	r3, r7, #7
 801635a:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_DisableRX(PortNum);
 801635c:	1dfb      	adds	r3, r7, #7
 801635e:	781b      	ldrb	r3, [r3, #0]
 8016360:	0018      	movs	r0, r3
 8016362:	f000 fe13 	bl	8016f8c <USBPD_HW_IF_DisableRX>
}
 8016366:	46c0      	nop			@ (mov r8, r8)
 8016368:	46bd      	mov	sp, r7
 801636a:	b002      	add	sp, #8
 801636c:	bd80      	pop	{r7, pc}
	...

08016370 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 8016370:	b590      	push	{r4, r7, lr}
 8016372:	b085      	sub	sp, #20
 8016374:	af00      	add	r7, sp, #0
 8016376:	0002      	movs	r2, r0
 8016378:	6039      	str	r1, [r7, #0]
 801637a:	1dfb      	adds	r3, r7, #7
 801637c:	701a      	strb	r2, [r3, #0]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 801637e:	2008      	movs	r0, #8
 8016380:	183b      	adds	r3, r7, r0
 8016382:	4a2e      	ldr	r2, [pc, #184]	@ (801643c <PHY_Rx_Completed+0xcc>)
 8016384:	6811      	ldr	r1, [r2, #0]
 8016386:	6019      	str	r1, [r3, #0]
 8016388:	8892      	ldrh	r2, [r2, #4]
 801638a:	809a      	strh	r2, [r3, #4]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 801638c:	240f      	movs	r4, #15
 801638e:	193b      	adds	r3, r7, r4
 8016390:	1839      	adds	r1, r7, r0
 8016392:	683a      	ldr	r2, [r7, #0]
 8016394:	188a      	adds	r2, r1, r2
 8016396:	7812      	ldrb	r2, [r2, #0]
 8016398:	701a      	strb	r2, [r3, #0]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 801639a:	193b      	adds	r3, r7, r4
 801639c:	781b      	ldrb	r3, [r3, #0]
 801639e:	2b04      	cmp	r3, #4
 80163a0:	dc02      	bgt.n	80163a8 <PHY_Rx_Completed+0x38>
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	da1d      	bge.n	80163e2 <PHY_Rx_Completed+0x72>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 80163a6:	e040      	b.n	801642a <PHY_Rx_Completed+0xba>
  switch (_msgtype)
 80163a8:	2b06      	cmp	r3, #6
 80163aa:	d13e      	bne.n	801642a <PHY_Rx_Completed+0xba>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 80163ac:	1dfb      	adds	r3, r7, #7
 80163ae:	781b      	ldrb	r3, [r3, #0]
 80163b0:	4a23      	ldr	r2, [pc, #140]	@ (8016440 <PHY_Rx_Completed+0xd0>)
 80163b2:	00db      	lsls	r3, r3, #3
 80163b4:	18d3      	adds	r3, r2, r3
 80163b6:	3304      	adds	r3, #4
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	221e      	movs	r2, #30
 80163bc:	4013      	ands	r3, r2
 80163be:	2b1e      	cmp	r3, #30
 80163c0:	d135      	bne.n	801642e <PHY_Rx_Completed+0xbe>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 80163c2:	1dfb      	adds	r3, r7, #7
 80163c4:	781a      	ldrb	r2, [r3, #0]
 80163c6:	491f      	ldr	r1, [pc, #124]	@ (8016444 <PHY_Rx_Completed+0xd4>)
 80163c8:	0013      	movs	r3, r2
 80163ca:	011b      	lsls	r3, r3, #4
 80163cc:	1a9b      	subs	r3, r3, r2
 80163ce:	009b      	lsls	r3, r3, #2
 80163d0:	18cb      	adds	r3, r1, r3
 80163d2:	331c      	adds	r3, #28
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	1dfa      	adds	r2, r7, #7
 80163d8:	7812      	ldrb	r2, [r2, #0]
 80163da:	2106      	movs	r1, #6
 80163dc:	0010      	movs	r0, r2
 80163de:	4798      	blx	r3
      break;
 80163e0:	e025      	b.n	801642e <PHY_Rx_Completed+0xbe>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 80163e2:	240f      	movs	r4, #15
 80163e4:	193b      	adds	r3, r7, r4
 80163e6:	781b      	ldrb	r3, [r3, #0]
 80163e8:	2201      	movs	r2, #1
 80163ea:	409a      	lsls	r2, r3
 80163ec:	0013      	movs	r3, r2
 80163ee:	b2db      	uxtb	r3, r3
 80163f0:	0018      	movs	r0, r3
 80163f2:	1dfb      	adds	r3, r7, #7
 80163f4:	781b      	ldrb	r3, [r3, #0]
 80163f6:	4a12      	ldr	r2, [pc, #72]	@ (8016440 <PHY_Rx_Completed+0xd0>)
 80163f8:	00db      	lsls	r3, r3, #3
 80163fa:	18d3      	adds	r3, r2, r3
 80163fc:	3304      	adds	r3, #4
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	193a      	adds	r2, r7, r4
 8016402:	7812      	ldrb	r2, [r2, #0]
 8016404:	2101      	movs	r1, #1
 8016406:	4091      	lsls	r1, r2
 8016408:	000a      	movs	r2, r1
 801640a:	b2d2      	uxtb	r2, r2
 801640c:	4013      	ands	r3, r2
 801640e:	4298      	cmp	r0, r3
 8016410:	d10f      	bne.n	8016432 <PHY_Rx_Completed+0xc2>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 8016412:	1dfb      	adds	r3, r7, #7
 8016414:	781a      	ldrb	r2, [r3, #0]
 8016416:	4b0a      	ldr	r3, [pc, #40]	@ (8016440 <PHY_Rx_Completed+0xd0>)
 8016418:	00d2      	lsls	r2, r2, #3
 801641a:	58d3      	ldr	r3, [r2, r3]
 801641c:	193a      	adds	r2, r7, r4
 801641e:	7811      	ldrb	r1, [r2, #0]
 8016420:	1dfa      	adds	r2, r7, #7
 8016422:	7812      	ldrb	r2, [r2, #0]
 8016424:	0010      	movs	r0, r2
 8016426:	4798      	blx	r3
      break;
 8016428:	e003      	b.n	8016432 <PHY_Rx_Completed+0xc2>
      break;
 801642a:	46c0      	nop			@ (mov r8, r8)
 801642c:	e002      	b.n	8016434 <PHY_Rx_Completed+0xc4>
      break;
 801642e:	46c0      	nop			@ (mov r8, r8)
 8016430:	e000      	b.n	8016434 <PHY_Rx_Completed+0xc4>
      break;
 8016432:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016434:	46c0      	nop			@ (mov r8, r8)
 8016436:	46bd      	mov	sp, r7
 8016438:	b005      	add	sp, #20
 801643a:	bd90      	pop	{r4, r7, pc}
 801643c:	0801efb8 	.word	0x0801efb8
 8016440:	200117c4 	.word	0x200117c4
 8016444:	200117d4 	.word	0x200117d4

08016448 <LL_AHB1_GRP1_EnableClock>:
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b084      	sub	sp, #16
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8016450:	4b07      	ldr	r3, [pc, #28]	@ (8016470 <LL_AHB1_GRP1_EnableClock+0x28>)
 8016452:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8016454:	4b06      	ldr	r3, [pc, #24]	@ (8016470 <LL_AHB1_GRP1_EnableClock+0x28>)
 8016456:	687a      	ldr	r2, [r7, #4]
 8016458:	430a      	orrs	r2, r1
 801645a:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 801645c:	4b04      	ldr	r3, [pc, #16]	@ (8016470 <LL_AHB1_GRP1_EnableClock+0x28>)
 801645e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016460:	687a      	ldr	r2, [r7, #4]
 8016462:	4013      	ands	r3, r2
 8016464:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016466:	68fb      	ldr	r3, [r7, #12]
}
 8016468:	46c0      	nop			@ (mov r8, r8)
 801646a:	46bd      	mov	sp, r7
 801646c:	b004      	add	sp, #16
 801646e:	bd80      	pop	{r7, pc}
 8016470:	40021000 	.word	0x40021000

08016474 <LL_APB1_GRP1_EnableClock>:
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b084      	sub	sp, #16
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 801647c:	4b07      	ldr	r3, [pc, #28]	@ (801649c <LL_APB1_GRP1_EnableClock+0x28>)
 801647e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8016480:	4b06      	ldr	r3, [pc, #24]	@ (801649c <LL_APB1_GRP1_EnableClock+0x28>)
 8016482:	687a      	ldr	r2, [r7, #4]
 8016484:	430a      	orrs	r2, r1
 8016486:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8016488:	4b04      	ldr	r3, [pc, #16]	@ (801649c <LL_APB1_GRP1_EnableClock+0x28>)
 801648a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801648c:	687a      	ldr	r2, [r7, #4]
 801648e:	4013      	ands	r3, r2
 8016490:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016492:	68fb      	ldr	r3, [r7, #12]
}
 8016494:	46c0      	nop			@ (mov r8, r8)
 8016496:	46bd      	mov	sp, r7
 8016498:	b004      	add	sp, #16
 801649a:	bd80      	pop	{r7, pc}
 801649c:	40021000 	.word	0x40021000

080164a0 <LL_APB2_GRP1_EnableClock>:
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b084      	sub	sp, #16
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 80164a8:	4b07      	ldr	r3, [pc, #28]	@ (80164c8 <LL_APB2_GRP1_EnableClock+0x28>)
 80164aa:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80164ac:	4b06      	ldr	r3, [pc, #24]	@ (80164c8 <LL_APB2_GRP1_EnableClock+0x28>)
 80164ae:	687a      	ldr	r2, [r7, #4]
 80164b0:	430a      	orrs	r2, r1
 80164b2:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80164b4:	4b04      	ldr	r3, [pc, #16]	@ (80164c8 <LL_APB2_GRP1_EnableClock+0x28>)
 80164b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80164b8:	687a      	ldr	r2, [r7, #4]
 80164ba:	4013      	ands	r3, r2
 80164bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80164be:	68fb      	ldr	r3, [r7, #12]
}
 80164c0:	46c0      	nop			@ (mov r8, r8)
 80164c2:	46bd      	mov	sp, r7
 80164c4:	b004      	add	sp, #16
 80164c6:	bd80      	pop	{r7, pc}
 80164c8:	40021000 	.word	0x40021000

080164cc <LL_UCPD_Enable>:
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b082      	sub	sp, #8
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	2280      	movs	r2, #128	@ 0x80
 80164da:	0612      	lsls	r2, r2, #24
 80164dc:	431a      	orrs	r2, r3
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	601a      	str	r2, [r3, #0]
}
 80164e2:	46c0      	nop			@ (mov r8, r8)
 80164e4:	46bd      	mov	sp, r7
 80164e6:	b002      	add	sp, #8
 80164e8:	bd80      	pop	{r7, pc}

080164ea <LL_UCPD_Disable>:
{
 80164ea:	b580      	push	{r7, lr}
 80164ec:	b082      	sub	sp, #8
 80164ee:	af00      	add	r7, sp, #0
 80164f0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	005b      	lsls	r3, r3, #1
 80164f8:	085a      	lsrs	r2, r3, #1
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	601a      	str	r2, [r3, #0]
}
 80164fe:	46c0      	nop			@ (mov r8, r8)
 8016500:	46bd      	mov	sp, r7
 8016502:	b002      	add	sp, #8
 8016504:	bd80      	pop	{r7, pc}
	...

08016508 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b082      	sub	sp, #8
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	68db      	ldr	r3, [r3, #12]
 8016514:	4a03      	ldr	r2, [pc, #12]	@ (8016524 <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 8016516:	401a      	ands	r2, r3
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	60da      	str	r2, [r3, #12]
}
 801651c:	46c0      	nop			@ (mov r8, r8)
 801651e:	46bd      	mov	sp, r7
 8016520:	b002      	add	sp, #8
 8016522:	bd80      	pop	{r7, pc}
 8016524:	ffdfffff 	.word	0xffdfffff

08016528 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b082      	sub	sp, #8
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	68db      	ldr	r3, [r3, #12]
 8016534:	2280      	movs	r2, #128	@ 0x80
 8016536:	0392      	lsls	r2, r2, #14
 8016538:	431a      	orrs	r2, r3
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	60da      	str	r2, [r3, #12]
}
 801653e:	46c0      	nop			@ (mov r8, r8)
 8016540:	46bd      	mov	sp, r7
 8016542:	b002      	add	sp, #8
 8016544:	bd80      	pop	{r7, pc}
	...

08016548 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b082      	sub	sp, #8
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	68db      	ldr	r3, [r3, #12]
 8016554:	4a03      	ldr	r2, [pc, #12]	@ (8016564 <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 8016556:	401a      	ands	r2, r3
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	60da      	str	r2, [r3, #12]
}
 801655c:	46c0      	nop			@ (mov r8, r8)
 801655e:	46bd      	mov	sp, r7
 8016560:	b002      	add	sp, #8
 8016562:	bd80      	pop	{r7, pc}
 8016564:	ffefffff 	.word	0xffefffff

08016568 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 8016568:	b580      	push	{r7, lr}
 801656a:	b082      	sub	sp, #8
 801656c:	af00      	add	r7, sp, #0
 801656e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	68db      	ldr	r3, [r3, #12]
 8016574:	2280      	movs	r2, #128	@ 0x80
 8016576:	0352      	lsls	r2, r2, #13
 8016578:	431a      	orrs	r2, r3
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	60da      	str	r2, [r3, #12]
}
 801657e:	46c0      	nop			@ (mov r8, r8)
 8016580:	46bd      	mov	sp, r7
 8016582:	b002      	add	sp, #8
 8016584:	bd80      	pop	{r7, pc}

08016586 <LL_UCPD_SignalFRSTX>:
{
 8016586:	b580      	push	{r7, lr}
 8016588:	b082      	sub	sp, #8
 801658a:	af00      	add	r7, sp, #0
 801658c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	68db      	ldr	r3, [r3, #12]
 8016592:	2280      	movs	r2, #128	@ 0x80
 8016594:	0292      	lsls	r2, r2, #10
 8016596:	431a      	orrs	r2, r3
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	60da      	str	r2, [r3, #12]
}
 801659c:	46c0      	nop			@ (mov r8, r8)
 801659e:	46bd      	mov	sp, r7
 80165a0:	b002      	add	sp, #8
 80165a2:	bd80      	pop	{r7, pc}

080165a4 <LL_UCPD_FRSDetectionEnable>:
{
 80165a4:	b580      	push	{r7, lr}
 80165a6:	b082      	sub	sp, #8
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	68db      	ldr	r3, [r3, #12]
 80165b0:	2280      	movs	r2, #128	@ 0x80
 80165b2:	0252      	lsls	r2, r2, #9
 80165b4:	431a      	orrs	r2, r3
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	60da      	str	r2, [r3, #12]
}
 80165ba:	46c0      	nop			@ (mov r8, r8)
 80165bc:	46bd      	mov	sp, r7
 80165be:	b002      	add	sp, #8
 80165c0:	bd80      	pop	{r7, pc}
	...

080165c4 <LL_UCPD_FRSDetectionDisable>:
{
 80165c4:	b580      	push	{r7, lr}
 80165c6:	b082      	sub	sp, #8
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	68db      	ldr	r3, [r3, #12]
 80165d0:	4a03      	ldr	r2, [pc, #12]	@ (80165e0 <LL_UCPD_FRSDetectionDisable+0x1c>)
 80165d2:	401a      	ands	r2, r3
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	60da      	str	r2, [r3, #12]
}
 80165d8:	46c0      	nop			@ (mov r8, r8)
 80165da:	46bd      	mov	sp, r7
 80165dc:	b002      	add	sp, #8
 80165de:	bd80      	pop	{r7, pc}
 80165e0:	fffeffff 	.word	0xfffeffff

080165e4 <LL_UCPD_SetccEnable>:
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b082      	sub	sp, #8
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
 80165ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	68db      	ldr	r3, [r3, #12]
 80165f2:	4a05      	ldr	r2, [pc, #20]	@ (8016608 <LL_UCPD_SetccEnable+0x24>)
 80165f4:	401a      	ands	r2, r3
 80165f6:	683b      	ldr	r3, [r7, #0]
 80165f8:	431a      	orrs	r2, r3
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	60da      	str	r2, [r3, #12]
}
 80165fe:	46c0      	nop			@ (mov r8, r8)
 8016600:	46bd      	mov	sp, r7
 8016602:	b002      	add	sp, #8
 8016604:	bd80      	pop	{r7, pc}
 8016606:	46c0      	nop			@ (mov r8, r8)
 8016608:	fffff3ff 	.word	0xfffff3ff

0801660c <LL_UCPD_SetSNKRole>:
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b082      	sub	sp, #8
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	68db      	ldr	r3, [r3, #12]
 8016618:	2280      	movs	r2, #128	@ 0x80
 801661a:	0092      	lsls	r2, r2, #2
 801661c:	431a      	orrs	r2, r3
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	60da      	str	r2, [r3, #12]
}
 8016622:	46c0      	nop			@ (mov r8, r8)
 8016624:	46bd      	mov	sp, r7
 8016626:	b002      	add	sp, #8
 8016628:	bd80      	pop	{r7, pc}
	...

0801662c <LL_UCPD_SetSRCRole>:
{
 801662c:	b580      	push	{r7, lr}
 801662e:	b082      	sub	sp, #8
 8016630:	af00      	add	r7, sp, #0
 8016632:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	68db      	ldr	r3, [r3, #12]
 8016638:	4a03      	ldr	r2, [pc, #12]	@ (8016648 <LL_UCPD_SetSRCRole+0x1c>)
 801663a:	401a      	ands	r2, r3
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	60da      	str	r2, [r3, #12]
}
 8016640:	46c0      	nop			@ (mov r8, r8)
 8016642:	46bd      	mov	sp, r7
 8016644:	b002      	add	sp, #8
 8016646:	bd80      	pop	{r7, pc}
 8016648:	fffffdff 	.word	0xfffffdff

0801664c <LL_UCPD_SetRpResistor>:
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b082      	sub	sp, #8
 8016650:	af00      	add	r7, sp, #0
 8016652:	6078      	str	r0, [r7, #4]
 8016654:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	68db      	ldr	r3, [r3, #12]
 801665a:	4a05      	ldr	r2, [pc, #20]	@ (8016670 <LL_UCPD_SetRpResistor+0x24>)
 801665c:	401a      	ands	r2, r3
 801665e:	683b      	ldr	r3, [r7, #0]
 8016660:	431a      	orrs	r2, r3
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	60da      	str	r2, [r3, #12]
}
 8016666:	46c0      	nop			@ (mov r8, r8)
 8016668:	46bd      	mov	sp, r7
 801666a:	b002      	add	sp, #8
 801666c:	bd80      	pop	{r7, pc}
 801666e:	46c0      	nop			@ (mov r8, r8)
 8016670:	fffffe7f 	.word	0xfffffe7f

08016674 <LL_UCPD_SetCCPin>:
{
 8016674:	b580      	push	{r7, lr}
 8016676:	b082      	sub	sp, #8
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
 801667c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	68db      	ldr	r3, [r3, #12]
 8016682:	2240      	movs	r2, #64	@ 0x40
 8016684:	4393      	bics	r3, r2
 8016686:	001a      	movs	r2, r3
 8016688:	683b      	ldr	r3, [r7, #0]
 801668a:	431a      	orrs	r2, r3
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	60da      	str	r2, [r3, #12]
}
 8016690:	46c0      	nop			@ (mov r8, r8)
 8016692:	46bd      	mov	sp, r7
 8016694:	b002      	add	sp, #8
 8016696:	bd80      	pop	{r7, pc}

08016698 <LL_UCPD_RxEnable>:
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b082      	sub	sp, #8
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	68db      	ldr	r3, [r3, #12]
 80166a4:	2220      	movs	r2, #32
 80166a6:	431a      	orrs	r2, r3
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	60da      	str	r2, [r3, #12]
}
 80166ac:	46c0      	nop			@ (mov r8, r8)
 80166ae:	46bd      	mov	sp, r7
 80166b0:	b002      	add	sp, #8
 80166b2:	bd80      	pop	{r7, pc}

080166b4 <LL_UCPD_RxDisable>:
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b082      	sub	sp, #8
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	68db      	ldr	r3, [r3, #12]
 80166c0:	2220      	movs	r2, #32
 80166c2:	4393      	bics	r3, r2
 80166c4:	001a      	movs	r2, r3
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	60da      	str	r2, [r3, #12]
}
 80166ca:	46c0      	nop			@ (mov r8, r8)
 80166cc:	46bd      	mov	sp, r7
 80166ce:	b002      	add	sp, #8
 80166d0:	bd80      	pop	{r7, pc}

080166d2 <LL_UCPD_SetRxMode>:
{
 80166d2:	b580      	push	{r7, lr}
 80166d4:	b082      	sub	sp, #8
 80166d6:	af00      	add	r7, sp, #0
 80166d8:	6078      	str	r0, [r7, #4]
 80166da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	68db      	ldr	r3, [r3, #12]
 80166e0:	2210      	movs	r2, #16
 80166e2:	4393      	bics	r3, r2
 80166e4:	001a      	movs	r2, r3
 80166e6:	683b      	ldr	r3, [r7, #0]
 80166e8:	431a      	orrs	r2, r3
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	60da      	str	r2, [r3, #12]
}
 80166ee:	46c0      	nop			@ (mov r8, r8)
 80166f0:	46bd      	mov	sp, r7
 80166f2:	b002      	add	sp, #8
 80166f4:	bd80      	pop	{r7, pc}

080166f6 <LL_UCPD_SendHardReset>:
{
 80166f6:	b580      	push	{r7, lr}
 80166f8:	b082      	sub	sp, #8
 80166fa:	af00      	add	r7, sp, #0
 80166fc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	68db      	ldr	r3, [r3, #12]
 8016702:	2208      	movs	r2, #8
 8016704:	431a      	orrs	r2, r3
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	60da      	str	r2, [r3, #12]
}
 801670a:	46c0      	nop			@ (mov r8, r8)
 801670c:	46bd      	mov	sp, r7
 801670e:	b002      	add	sp, #8
 8016710:	bd80      	pop	{r7, pc}

08016712 <LL_UCPD_SendMessage>:
{
 8016712:	b580      	push	{r7, lr}
 8016714:	b082      	sub	sp, #8
 8016716:	af00      	add	r7, sp, #0
 8016718:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	68db      	ldr	r3, [r3, #12]
 801671e:	2204      	movs	r2, #4
 8016720:	431a      	orrs	r2, r3
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	60da      	str	r2, [r3, #12]
}
 8016726:	46c0      	nop			@ (mov r8, r8)
 8016728:	46bd      	mov	sp, r7
 801672a:	b002      	add	sp, #8
 801672c:	bd80      	pop	{r7, pc}

0801672e <LL_UCPD_SetTxMode>:
{
 801672e:	b580      	push	{r7, lr}
 8016730:	b082      	sub	sp, #8
 8016732:	af00      	add	r7, sp, #0
 8016734:	6078      	str	r0, [r7, #4]
 8016736:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	68db      	ldr	r3, [r3, #12]
 801673c:	2203      	movs	r2, #3
 801673e:	4393      	bics	r3, r2
 8016740:	001a      	movs	r2, r3
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	431a      	orrs	r2, r3
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	60da      	str	r2, [r3, #12]
}
 801674a:	46c0      	nop			@ (mov r8, r8)
 801674c:	46bd      	mov	sp, r7
 801674e:	b002      	add	sp, #8
 8016750:	bd80      	pop	{r7, pc}

08016752 <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8016752:	b580      	push	{r7, lr}
 8016754:	b082      	sub	sp, #8
 8016756:	af00      	add	r7, sp, #0
 8016758:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	2280      	movs	r2, #128	@ 0x80
 8016760:	05d2      	lsls	r2, r2, #23
 8016762:	431a      	orrs	r2, r3
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	601a      	str	r2, [r3, #0]
}
 8016768:	46c0      	nop			@ (mov r8, r8)
 801676a:	46bd      	mov	sp, r7
 801676c:	b002      	add	sp, #8
 801676e:	bd80      	pop	{r7, pc}

08016770 <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b082      	sub	sp, #8
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	4a03      	ldr	r2, [pc, #12]	@ (801678c <LL_UCPD_RxDMADisable+0x1c>)
 801677e:	401a      	ands	r2, r3
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	601a      	str	r2, [r3, #0]
}
 8016784:	46c0      	nop			@ (mov r8, r8)
 8016786:	46bd      	mov	sp, r7
 8016788:	b002      	add	sp, #8
 801678a:	bd80      	pop	{r7, pc}
 801678c:	bfffffff 	.word	0xbfffffff

08016790 <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b082      	sub	sp, #8
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	2280      	movs	r2, #128	@ 0x80
 801679e:	0592      	lsls	r2, r2, #22
 80167a0:	431a      	orrs	r2, r3
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	601a      	str	r2, [r3, #0]
}
 80167a6:	46c0      	nop			@ (mov r8, r8)
 80167a8:	46bd      	mov	sp, r7
 80167aa:	b002      	add	sp, #8
 80167ac:	bd80      	pop	{r7, pc}
	...

080167b0 <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 80167b0:	b580      	push	{r7, lr}
 80167b2:	b082      	sub	sp, #8
 80167b4:	af00      	add	r7, sp, #0
 80167b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	4a03      	ldr	r2, [pc, #12]	@ (80167cc <LL_UCPD_TxDMADisable+0x1c>)
 80167be:	401a      	ands	r2, r3
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	601a      	str	r2, [r3, #0]
}
 80167c4:	46c0      	nop			@ (mov r8, r8)
 80167c6:	46bd      	mov	sp, r7
 80167c8:	b002      	add	sp, #8
 80167ca:	bd80      	pop	{r7, pc}
 80167cc:	dfffffff 	.word	0xdfffffff

080167d0 <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b082      	sub	sp, #8
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
 80167d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	683a      	ldr	r2, [r7, #0]
 80167de:	61da      	str	r2, [r3, #28]
}
 80167e0:	46c0      	nop			@ (mov r8, r8)
 80167e2:	46bd      	mov	sp, r7
 80167e4:	b002      	add	sp, #8
 80167e6:	bd80      	pop	{r7, pc}

080167e8 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b082      	sub	sp, #8
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
 80167f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	683a      	ldr	r2, [r7, #0]
 80167f6:	621a      	str	r2, [r3, #32]
}
 80167f8:	46c0      	nop			@ (mov r8, r8)
 80167fa:	46bd      	mov	sp, r7
 80167fc:	b002      	add	sp, #8
 80167fe:	bd80      	pop	{r7, pc}

08016800 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 8016800:	b580      	push	{r7, lr}
 8016802:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8016804:	2380      	movs	r3, #128	@ 0x80
 8016806:	055b      	lsls	r3, r3, #21
 8016808:	0018      	movs	r0, r3
 801680a:	f7ff fe33 	bl	8016474 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 801680e:	2380      	movs	r3, #128	@ 0x80
 8016810:	015b      	lsls	r3, r3, #5
 8016812:	0018      	movs	r0, r3
 8016814:	f7ff fe18 	bl	8016448 <LL_AHB1_GRP1_EnableClock>
}
 8016818:	46c0      	nop			@ (mov r8, r8)
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}
	...

08016820 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b084      	sub	sp, #16
 8016824:	af00      	add	r7, sp, #0
 8016826:	0002      	movs	r2, r0
 8016828:	1dfb      	adds	r3, r7, #7
 801682a:	701a      	strb	r2, [r3, #0]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 801682c:	1dfb      	adds	r3, r7, #7
 801682e:	781a      	ldrb	r2, [r3, #0]
 8016830:	4916      	ldr	r1, [pc, #88]	@ (801688c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8016832:	0013      	movs	r3, r2
 8016834:	011b      	lsls	r3, r3, #4
 8016836:	1a9b      	subs	r3, r3, r2
 8016838:	009b      	lsls	r3, r3, #2
 801683a:	585b      	ldr	r3, [r3, r1]
 801683c:	68db      	ldr	r3, [r3, #12]
 801683e:	2207      	movs	r2, #7
 8016840:	4393      	bics	r3, r2
 8016842:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 8016844:	1dfb      	adds	r3, r7, #7
 8016846:	781a      	ldrb	r2, [r3, #0]
 8016848:	4910      	ldr	r1, [pc, #64]	@ (801688c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 801684a:	0013      	movs	r3, r2
 801684c:	011b      	lsls	r3, r3, #4
 801684e:	1a9b      	subs	r3, r3, r2
 8016850:	009b      	lsls	r3, r3, #2
 8016852:	585b      	ldr	r3, [r3, r1]
 8016854:	0018      	movs	r0, r3
 8016856:	f7ff fe48 	bl	80164ea <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 801685a:	1dfb      	adds	r3, r7, #7
 801685c:	781a      	ldrb	r2, [r3, #0]
 801685e:	490b      	ldr	r1, [pc, #44]	@ (801688c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8016860:	0013      	movs	r3, r2
 8016862:	011b      	lsls	r3, r3, #4
 8016864:	1a9b      	subs	r3, r3, r2
 8016866:	009b      	lsls	r3, r3, #2
 8016868:	585b      	ldr	r3, [r3, r1]
 801686a:	0018      	movs	r0, r3
 801686c:	f7ff fe2e 	bl	80164cc <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 8016870:	1dfb      	adds	r3, r7, #7
 8016872:	781a      	ldrb	r2, [r3, #0]
 8016874:	4905      	ldr	r1, [pc, #20]	@ (801688c <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8016876:	0013      	movs	r3, r2
 8016878:	011b      	lsls	r3, r3, #4
 801687a:	1a9b      	subs	r3, r3, r2
 801687c:	009b      	lsls	r3, r3, #2
 801687e:	585b      	ldr	r3, [r3, r1]
 8016880:	68fa      	ldr	r2, [r7, #12]
 8016882:	60da      	str	r2, [r3, #12]
}
 8016884:	46c0      	nop			@ (mov r8, r8)
 8016886:	46bd      	mov	sp, r7
 8016888:	b004      	add	sp, #16
 801688a:	bd80      	pop	{r7, pc}
 801688c:	200117d4 	.word	0x200117d4

08016890 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 8016890:	b590      	push	{r4, r7, lr}
 8016892:	b08b      	sub	sp, #44	@ 0x2c
 8016894:	af00      	add	r7, sp, #0
 8016896:	60ba      	str	r2, [r7, #8]
 8016898:	607b      	str	r3, [r7, #4]
 801689a:	240f      	movs	r4, #15
 801689c:	193b      	adds	r3, r7, r4
 801689e:	1c02      	adds	r2, r0, #0
 80168a0:	701a      	strb	r2, [r3, #0]
 80168a2:	200e      	movs	r0, #14
 80168a4:	183b      	adds	r3, r7, r0
 80168a6:	1c0a      	adds	r2, r1, #0
 80168a8:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_OK;
 80168aa:	2327      	movs	r3, #39	@ 0x27
 80168ac:	18fb      	adds	r3, r7, r3
 80168ae:	2200      	movs	r2, #0
 80168b0:	701a      	strb	r2, [r3, #0]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 80168b2:	183b      	adds	r3, r7, r0
 80168b4:	781b      	ldrb	r3, [r3, #0]
 80168b6:	2b05      	cmp	r3, #5
 80168b8:	d10b      	bne.n	80168d2 <USBPD_HW_IF_SendBuffer+0x42>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 80168ba:	193b      	adds	r3, r7, r4
 80168bc:	781a      	ldrb	r2, [r3, #0]
 80168be:	499e      	ldr	r1, [pc, #632]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80168c0:	0013      	movs	r3, r2
 80168c2:	011b      	lsls	r3, r3, #4
 80168c4:	1a9b      	subs	r3, r3, r2
 80168c6:	009b      	lsls	r3, r3, #2
 80168c8:	585b      	ldr	r3, [r3, r1]
 80168ca:	0018      	movs	r0, r3
 80168cc:	f7ff ff13 	bl	80166f6 <LL_UCPD_SendHardReset>
 80168d0:	e12a      	b.n	8016b28 <USBPD_HW_IF_SendBuffer+0x298>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80168d2:	f3ef 8310 	mrs	r3, PRIMASK
 80168d6:	61fb      	str	r3, [r7, #28]
  return(result);
 80168d8:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 80168da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80168dc:	b672      	cpsid	i
}
 80168de:	46c0      	nop			@ (mov r8, r8)

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 80168e0:	240f      	movs	r4, #15
 80168e2:	193b      	adds	r3, r7, r4
 80168e4:	781a      	ldrb	r2, [r3, #0]
 80168e6:	4994      	ldr	r1, [pc, #592]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80168e8:	2038      	movs	r0, #56	@ 0x38
 80168ea:	0013      	movs	r3, r2
 80168ec:	011b      	lsls	r3, r3, #4
 80168ee:	1a9b      	subs	r3, r3, r2
 80168f0:	009b      	lsls	r3, r3, #2
 80168f2:	18cb      	adds	r3, r1, r3
 80168f4:	181b      	adds	r3, r3, r0
 80168f6:	781b      	ldrb	r3, [r3, #0]
 80168f8:	b2db      	uxtb	r3, r3
 80168fa:	2b01      	cmp	r3, #1
 80168fc:	d00e      	beq.n	801691c <USBPD_HW_IF_SendBuffer+0x8c>
 80168fe:	193b      	adds	r3, r7, r4
 8016900:	781a      	ldrb	r2, [r3, #0]
 8016902:	498d      	ldr	r1, [pc, #564]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8016904:	0013      	movs	r3, r2
 8016906:	011b      	lsls	r3, r3, #4
 8016908:	1a9b      	subs	r3, r3, r2
 801690a:	009b      	lsls	r3, r3, #2
 801690c:	18cb      	adds	r3, r1, r3
 801690e:	3304      	adds	r3, #4
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	2201      	movs	r2, #1
 8016916:	4013      	ands	r3, r2
 8016918:	2b01      	cmp	r3, #1
 801691a:	d10a      	bne.n	8016932 <USBPD_HW_IF_SendBuffer+0xa2>
 801691c:	6a3b      	ldr	r3, [r7, #32]
 801691e:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016920:	69bb      	ldr	r3, [r7, #24]
 8016922:	f383 8810 	msr	PRIMASK, r3
}
 8016926:	46c0      	nop			@ (mov r8, r8)
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 8016928:	2327      	movs	r3, #39	@ 0x27
 801692a:	18fb      	adds	r3, r7, r3
 801692c:	2202      	movs	r2, #2
 801692e:	701a      	strb	r2, [r3, #0]
 8016930:	e0fa      	b.n	8016b28 <USBPD_HW_IF_SendBuffer+0x298>
 8016932:	6a3b      	ldr	r3, [r7, #32]
 8016934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016936:	697b      	ldr	r3, [r7, #20]
 8016938:	f383 8810 	msr	PRIMASK, r3
}
 801693c:	46c0      	nop			@ (mov r8, r8)
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 801693e:	230e      	movs	r3, #14
 8016940:	18fb      	adds	r3, r7, r3
 8016942:	781b      	ldrb	r3, [r3, #0]
 8016944:	2b07      	cmp	r3, #7
 8016946:	d871      	bhi.n	8016a2c <USBPD_HW_IF_SendBuffer+0x19c>
 8016948:	009a      	lsls	r2, r3, #2
 801694a:	4b7c      	ldr	r3, [pc, #496]	@ (8016b3c <USBPD_HW_IF_SendBuffer+0x2ac>)
 801694c:	18d3      	adds	r3, r2, r3
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	469f      	mov	pc, r3
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 8016952:	240f      	movs	r4, #15
 8016954:	193b      	adds	r3, r7, r4
 8016956:	781a      	ldrb	r2, [r3, #0]
 8016958:	4977      	ldr	r1, [pc, #476]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801695a:	0013      	movs	r3, r2
 801695c:	011b      	lsls	r3, r3, #4
 801695e:	1a9b      	subs	r3, r3, r2
 8016960:	009b      	lsls	r3, r3, #2
 8016962:	585b      	ldr	r3, [r3, r1]
 8016964:	4a76      	ldr	r2, [pc, #472]	@ (8016b40 <USBPD_HW_IF_SendBuffer+0x2b0>)
 8016966:	0011      	movs	r1, r2
 8016968:	0018      	movs	r0, r3
 801696a:	f7ff ff31 	bl	80167d0 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 801696e:	193b      	adds	r3, r7, r4
 8016970:	781a      	ldrb	r2, [r3, #0]
 8016972:	4971      	ldr	r1, [pc, #452]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8016974:	0013      	movs	r3, r2
 8016976:	011b      	lsls	r3, r3, #4
 8016978:	1a9b      	subs	r3, r3, r2
 801697a:	009b      	lsls	r3, r3, #2
 801697c:	585b      	ldr	r3, [r3, r1]
 801697e:	2100      	movs	r1, #0
 8016980:	0018      	movs	r0, r3
 8016982:	f7ff fed4 	bl	801672e <LL_UCPD_SetTxMode>
          break;
 8016986:	e056      	b.n	8016a36 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 8016988:	240f      	movs	r4, #15
 801698a:	193b      	adds	r3, r7, r4
 801698c:	781a      	ldrb	r2, [r3, #0]
 801698e:	496a      	ldr	r1, [pc, #424]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8016990:	0013      	movs	r3, r2
 8016992:	011b      	lsls	r3, r3, #4
 8016994:	1a9b      	subs	r3, r3, r2
 8016996:	009b      	lsls	r3, r3, #2
 8016998:	585b      	ldr	r3, [r3, r1]
 801699a:	4a6a      	ldr	r2, [pc, #424]	@ (8016b44 <USBPD_HW_IF_SendBuffer+0x2b4>)
 801699c:	0011      	movs	r1, r2
 801699e:	0018      	movs	r0, r3
 80169a0:	f7ff ff16 	bl	80167d0 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 80169a4:	193b      	adds	r3, r7, r4
 80169a6:	781a      	ldrb	r2, [r3, #0]
 80169a8:	4963      	ldr	r1, [pc, #396]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80169aa:	0013      	movs	r3, r2
 80169ac:	011b      	lsls	r3, r3, #4
 80169ae:	1a9b      	subs	r3, r3, r2
 80169b0:	009b      	lsls	r3, r3, #2
 80169b2:	585b      	ldr	r3, [r3, r1]
 80169b4:	2100      	movs	r1, #0
 80169b6:	0018      	movs	r0, r3
 80169b8:	f7ff feb9 	bl	801672e <LL_UCPD_SetTxMode>
          break;
 80169bc:	e03b      	b.n	8016a36 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 80169be:	240f      	movs	r4, #15
 80169c0:	193b      	adds	r3, r7, r4
 80169c2:	781a      	ldrb	r2, [r3, #0]
 80169c4:	495c      	ldr	r1, [pc, #368]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80169c6:	0013      	movs	r3, r2
 80169c8:	011b      	lsls	r3, r3, #4
 80169ca:	1a9b      	subs	r3, r3, r2
 80169cc:	009b      	lsls	r3, r3, #2
 80169ce:	585b      	ldr	r3, [r3, r1]
 80169d0:	4a5d      	ldr	r2, [pc, #372]	@ (8016b48 <USBPD_HW_IF_SendBuffer+0x2b8>)
 80169d2:	0011      	movs	r1, r2
 80169d4:	0018      	movs	r0, r3
 80169d6:	f7ff fefb 	bl	80167d0 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 80169da:	193b      	adds	r3, r7, r4
 80169dc:	781a      	ldrb	r2, [r3, #0]
 80169de:	4956      	ldr	r1, [pc, #344]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80169e0:	0013      	movs	r3, r2
 80169e2:	011b      	lsls	r3, r3, #4
 80169e4:	1a9b      	subs	r3, r3, r2
 80169e6:	009b      	lsls	r3, r3, #2
 80169e8:	585b      	ldr	r3, [r3, r1]
 80169ea:	2100      	movs	r1, #0
 80169ec:	0018      	movs	r0, r3
 80169ee:	f7ff fe9e 	bl	801672e <LL_UCPD_SetTxMode>
          break;
 80169f2:	e020      	b.n	8016a36 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 80169f4:	230f      	movs	r3, #15
 80169f6:	18fb      	adds	r3, r7, r3
 80169f8:	781a      	ldrb	r2, [r3, #0]
 80169fa:	494f      	ldr	r1, [pc, #316]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80169fc:	0013      	movs	r3, r2
 80169fe:	011b      	lsls	r3, r3, #4
 8016a00:	1a9b      	subs	r3, r3, r2
 8016a02:	009b      	lsls	r3, r3, #2
 8016a04:	585b      	ldr	r3, [r3, r1]
 8016a06:	2101      	movs	r1, #1
 8016a08:	0018      	movs	r0, r3
 8016a0a:	f7ff fe90 	bl	801672e <LL_UCPD_SetTxMode>
          break;
 8016a0e:	e012      	b.n	8016a36 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8016a10:	230f      	movs	r3, #15
 8016a12:	18fb      	adds	r3, r7, r3
 8016a14:	781a      	ldrb	r2, [r3, #0]
 8016a16:	4948      	ldr	r1, [pc, #288]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8016a18:	0013      	movs	r3, r2
 8016a1a:	011b      	lsls	r3, r3, #4
 8016a1c:	1a9b      	subs	r3, r3, r2
 8016a1e:	009b      	lsls	r3, r3, #2
 8016a20:	585b      	ldr	r3, [r3, r1]
 8016a22:	2102      	movs	r1, #2
 8016a24:	0018      	movs	r0, r3
 8016a26:	f7ff fe82 	bl	801672e <LL_UCPD_SetTxMode>
          break;
 8016a2a:	e004      	b.n	8016a36 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        default :
          _status = USBPD_ERROR;
 8016a2c:	2327      	movs	r3, #39	@ 0x27
 8016a2e:	18fb      	adds	r3, r7, r3
 8016a30:	2202      	movs	r2, #2
 8016a32:	701a      	strb	r2, [r3, #0]
          break;
 8016a34:	46c0      	nop			@ (mov r8, r8)
      }

      if (USBPD_OK == _status)
 8016a36:	2327      	movs	r3, #39	@ 0x27
 8016a38:	18fb      	adds	r3, r7, r3
 8016a3a:	781b      	ldrb	r3, [r3, #0]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d173      	bne.n	8016b28 <USBPD_HW_IF_SendBuffer+0x298>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8016a40:	200f      	movs	r0, #15
 8016a42:	183b      	adds	r3, r7, r0
 8016a44:	781a      	ldrb	r2, [r3, #0]
 8016a46:	493c      	ldr	r1, [pc, #240]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8016a48:	0013      	movs	r3, r2
 8016a4a:	011b      	lsls	r3, r3, #4
 8016a4c:	1a9b      	subs	r3, r3, r2
 8016a4e:	009b      	lsls	r3, r3, #2
 8016a50:	18cb      	adds	r3, r1, r3
 8016a52:	3304      	adds	r3, #4
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	6819      	ldr	r1, [r3, #0]
 8016a58:	183b      	adds	r3, r7, r0
 8016a5a:	781a      	ldrb	r2, [r3, #0]
 8016a5c:	4836      	ldr	r0, [pc, #216]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8016a5e:	0013      	movs	r3, r2
 8016a60:	011b      	lsls	r3, r3, #4
 8016a62:	1a9b      	subs	r3, r3, r2
 8016a64:	009b      	lsls	r3, r3, #2
 8016a66:	18c3      	adds	r3, r0, r3
 8016a68:	3304      	adds	r3, #4
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	2201      	movs	r2, #1
 8016a6e:	4391      	bics	r1, r2
 8016a70:	000a      	movs	r2, r1
 8016a72:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8016a74:	46c0      	nop			@ (mov r8, r8)
 8016a76:	200f      	movs	r0, #15
 8016a78:	183b      	adds	r3, r7, r0
 8016a7a:	781a      	ldrb	r2, [r3, #0]
 8016a7c:	492e      	ldr	r1, [pc, #184]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8016a7e:	0013      	movs	r3, r2
 8016a80:	011b      	lsls	r3, r3, #4
 8016a82:	1a9b      	subs	r3, r3, r2
 8016a84:	009b      	lsls	r3, r3, #2
 8016a86:	18cb      	adds	r3, r1, r3
 8016a88:	3304      	adds	r3, #4
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	2201      	movs	r2, #1
 8016a90:	4013      	ands	r3, r2
 8016a92:	2b01      	cmp	r3, #1
 8016a94:	d0ef      	beq.n	8016a76 <USBPD_HW_IF_SendBuffer+0x1e6>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 8016a96:	0004      	movs	r4, r0
 8016a98:	193b      	adds	r3, r7, r4
 8016a9a:	781a      	ldrb	r2, [r3, #0]
 8016a9c:	4926      	ldr	r1, [pc, #152]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8016a9e:	0013      	movs	r3, r2
 8016aa0:	011b      	lsls	r3, r3, #4
 8016aa2:	1a9b      	subs	r3, r3, r2
 8016aa4:	009b      	lsls	r3, r3, #2
 8016aa6:	18cb      	adds	r3, r1, r3
 8016aa8:	3304      	adds	r3, #4
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	68ba      	ldr	r2, [r7, #8]
 8016aae:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 8016ab0:	193b      	adds	r3, r7, r4
 8016ab2:	781a      	ldrb	r2, [r3, #0]
 8016ab4:	4920      	ldr	r1, [pc, #128]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8016ab6:	0013      	movs	r3, r2
 8016ab8:	011b      	lsls	r3, r3, #4
 8016aba:	1a9b      	subs	r3, r3, r2
 8016abc:	009b      	lsls	r3, r3, #2
 8016abe:	18cb      	adds	r3, r1, r3
 8016ac0:	3304      	adds	r3, #4
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	687a      	ldr	r2, [r7, #4]
 8016ac6:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8016ac8:	193b      	adds	r3, r7, r4
 8016aca:	781a      	ldrb	r2, [r3, #0]
 8016acc:	491a      	ldr	r1, [pc, #104]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8016ace:	0013      	movs	r3, r2
 8016ad0:	011b      	lsls	r3, r3, #4
 8016ad2:	1a9b      	subs	r3, r3, r2
 8016ad4:	009b      	lsls	r3, r3, #2
 8016ad6:	18cb      	adds	r3, r1, r3
 8016ad8:	3304      	adds	r3, #4
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	6819      	ldr	r1, [r3, #0]
 8016ade:	193b      	adds	r3, r7, r4
 8016ae0:	781a      	ldrb	r2, [r3, #0]
 8016ae2:	4815      	ldr	r0, [pc, #84]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8016ae4:	0013      	movs	r3, r2
 8016ae6:	011b      	lsls	r3, r3, #4
 8016ae8:	1a9b      	subs	r3, r3, r2
 8016aea:	009b      	lsls	r3, r3, #2
 8016aec:	18c3      	adds	r3, r0, r3
 8016aee:	3304      	adds	r3, #4
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	2201      	movs	r2, #1
 8016af4:	430a      	orrs	r2, r1
 8016af6:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8016af8:	193b      	adds	r3, r7, r4
 8016afa:	781a      	ldrb	r2, [r3, #0]
 8016afc:	490e      	ldr	r1, [pc, #56]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8016afe:	0013      	movs	r3, r2
 8016b00:	011b      	lsls	r3, r3, #4
 8016b02:	1a9b      	subs	r3, r3, r2
 8016b04:	009b      	lsls	r3, r3, #2
 8016b06:	585b      	ldr	r3, [r3, r1]
 8016b08:	687a      	ldr	r2, [r7, #4]
 8016b0a:	0011      	movs	r1, r2
 8016b0c:	0018      	movs	r0, r3
 8016b0e:	f7ff fe6b 	bl	80167e8 <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8016b12:	193b      	adds	r3, r7, r4
 8016b14:	781a      	ldrb	r2, [r3, #0]
 8016b16:	4908      	ldr	r1, [pc, #32]	@ (8016b38 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8016b18:	0013      	movs	r3, r2
 8016b1a:	011b      	lsls	r3, r3, #4
 8016b1c:	1a9b      	subs	r3, r3, r2
 8016b1e:	009b      	lsls	r3, r3, #2
 8016b20:	585b      	ldr	r3, [r3, r1]
 8016b22:	0018      	movs	r0, r3
 8016b24:	f7ff fdf5 	bl	8016712 <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 8016b28:	2327      	movs	r3, #39	@ 0x27
 8016b2a:	18fb      	adds	r3, r7, r3
 8016b2c:	781b      	ldrb	r3, [r3, #0]
}
 8016b2e:	0018      	movs	r0, r3
 8016b30:	46bd      	mov	sp, r7
 8016b32:	b00b      	add	sp, #44	@ 0x2c
 8016b34:	bd90      	pop	{r4, r7, pc}
 8016b36:	46c0      	nop			@ (mov r8, r8)
 8016b38:	200117d4 	.word	0x200117d4
 8016b3c:	0801f1b8 	.word	0x0801f1b8
 8016b40:	0008e318 	.word	0x0008e318
 8016b44:	00031b18 	.word	0x00031b18
 8016b48:	000360d8 	.word	0x000360d8

08016b4c <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b082      	sub	sp, #8
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	0002      	movs	r2, r0
 8016b54:	1dfb      	adds	r3, r7, #7
 8016b56:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8016b58:	1dfb      	adds	r3, r7, #7
 8016b5a:	781a      	ldrb	r2, [r3, #0]
 8016b5c:	490c      	ldr	r1, [pc, #48]	@ (8016b90 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 8016b5e:	0013      	movs	r3, r2
 8016b60:	011b      	lsls	r3, r3, #4
 8016b62:	1a9b      	subs	r3, r3, r2
 8016b64:	009b      	lsls	r3, r3, #2
 8016b66:	585b      	ldr	r3, [r3, r1]
 8016b68:	2102      	movs	r1, #2
 8016b6a:	0018      	movs	r0, r3
 8016b6c:	f7ff fddf 	bl	801672e <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8016b70:	1dfb      	adds	r3, r7, #7
 8016b72:	781a      	ldrb	r2, [r3, #0]
 8016b74:	4906      	ldr	r1, [pc, #24]	@ (8016b90 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 8016b76:	0013      	movs	r3, r2
 8016b78:	011b      	lsls	r3, r3, #4
 8016b7a:	1a9b      	subs	r3, r3, r2
 8016b7c:	009b      	lsls	r3, r3, #2
 8016b7e:	585b      	ldr	r3, [r3, r1]
 8016b80:	0018      	movs	r0, r3
 8016b82:	f7ff fdc6 	bl	8016712 <LL_UCPD_SendMessage>
}
 8016b86:	46c0      	nop			@ (mov r8, r8)
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	b002      	add	sp, #8
 8016b8c:	bd80      	pop	{r7, pc}
 8016b8e:	46c0      	nop			@ (mov r8, r8)
 8016b90:	200117d4 	.word	0x200117d4

08016b94 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 8016b94:	b580      	push	{r7, lr}
 8016b96:	b082      	sub	sp, #8
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	0002      	movs	r2, r0
 8016b9c:	1dfb      	adds	r3, r7, #7
 8016b9e:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8016ba0:	2001      	movs	r0, #1
 8016ba2:	f7ff fc7d 	bl	80164a0 <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 8016ba6:	1dfb      	adds	r3, r7, #7
 8016ba8:	781a      	ldrb	r2, [r3, #0]
 8016baa:	4953      	ldr	r1, [pc, #332]	@ (8016cf8 <USBPDM1_AssertRp+0x164>)
 8016bac:	0013      	movs	r3, r2
 8016bae:	011b      	lsls	r3, r3, #4
 8016bb0:	1a9b      	subs	r3, r3, r2
 8016bb2:	009b      	lsls	r3, r3, #2
 8016bb4:	18cb      	adds	r3, r1, r3
 8016bb6:	3310      	adds	r3, #16
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	789b      	ldrb	r3, [r3, #2]
 8016bbc:	079b      	lsls	r3, r3, #30
 8016bbe:	0f9b      	lsrs	r3, r3, #30
 8016bc0:	b2db      	uxtb	r3, r3
 8016bc2:	2b02      	cmp	r3, #2
 8016bc4:	d021      	beq.n	8016c0a <USBPDM1_AssertRp+0x76>
 8016bc6:	dc2f      	bgt.n	8016c28 <USBPDM1_AssertRp+0x94>
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d002      	beq.n	8016bd2 <USBPDM1_AssertRp+0x3e>
 8016bcc:	2b01      	cmp	r3, #1
 8016bce:	d00d      	beq.n	8016bec <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 8016bd0:	e02a      	b.n	8016c28 <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 8016bd2:	1dfb      	adds	r3, r7, #7
 8016bd4:	781a      	ldrb	r2, [r3, #0]
 8016bd6:	4948      	ldr	r1, [pc, #288]	@ (8016cf8 <USBPDM1_AssertRp+0x164>)
 8016bd8:	0013      	movs	r3, r2
 8016bda:	011b      	lsls	r3, r3, #4
 8016bdc:	1a9b      	subs	r3, r3, r2
 8016bde:	009b      	lsls	r3, r3, #2
 8016be0:	585b      	ldr	r3, [r3, r1]
 8016be2:	2180      	movs	r1, #128	@ 0x80
 8016be4:	0018      	movs	r0, r3
 8016be6:	f7ff fd31 	bl	801664c <LL_UCPD_SetRpResistor>
      break;
 8016bea:	e01e      	b.n	8016c2a <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8016bec:	1dfb      	adds	r3, r7, #7
 8016bee:	781a      	ldrb	r2, [r3, #0]
 8016bf0:	4941      	ldr	r1, [pc, #260]	@ (8016cf8 <USBPDM1_AssertRp+0x164>)
 8016bf2:	0013      	movs	r3, r2
 8016bf4:	011b      	lsls	r3, r3, #4
 8016bf6:	1a9b      	subs	r3, r3, r2
 8016bf8:	009b      	lsls	r3, r3, #2
 8016bfa:	585b      	ldr	r3, [r3, r1]
 8016bfc:	2280      	movs	r2, #128	@ 0x80
 8016bfe:	0052      	lsls	r2, r2, #1
 8016c00:	0011      	movs	r1, r2
 8016c02:	0018      	movs	r0, r3
 8016c04:	f7ff fd22 	bl	801664c <LL_UCPD_SetRpResistor>
      break;
 8016c08:	e00f      	b.n	8016c2a <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8016c0a:	1dfb      	adds	r3, r7, #7
 8016c0c:	781a      	ldrb	r2, [r3, #0]
 8016c0e:	493a      	ldr	r1, [pc, #232]	@ (8016cf8 <USBPDM1_AssertRp+0x164>)
 8016c10:	0013      	movs	r3, r2
 8016c12:	011b      	lsls	r3, r3, #4
 8016c14:	1a9b      	subs	r3, r3, r2
 8016c16:	009b      	lsls	r3, r3, #2
 8016c18:	585b      	ldr	r3, [r3, r1]
 8016c1a:	22c0      	movs	r2, #192	@ 0xc0
 8016c1c:	0052      	lsls	r2, r2, #1
 8016c1e:	0011      	movs	r1, r2
 8016c20:	0018      	movs	r0, r3
 8016c22:	f7ff fd13 	bl	801664c <LL_UCPD_SetRpResistor>
      break;
 8016c26:	e000      	b.n	8016c2a <USBPDM1_AssertRp+0x96>
      break;
 8016c28:	46c0      	nop			@ (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8016c2a:	1dfb      	adds	r3, r7, #7
 8016c2c:	781a      	ldrb	r2, [r3, #0]
 8016c2e:	4932      	ldr	r1, [pc, #200]	@ (8016cf8 <USBPDM1_AssertRp+0x164>)
 8016c30:	0013      	movs	r3, r2
 8016c32:	011b      	lsls	r3, r3, #4
 8016c34:	1a9b      	subs	r3, r3, r2
 8016c36:	009b      	lsls	r3, r3, #2
 8016c38:	585b      	ldr	r3, [r3, r1]
 8016c3a:	2100      	movs	r1, #0
 8016c3c:	0018      	movs	r0, r3
 8016c3e:	f7ff fcd1 	bl	80165e4 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8016c42:	1dfb      	adds	r3, r7, #7
 8016c44:	781a      	ldrb	r2, [r3, #0]
 8016c46:	492c      	ldr	r1, [pc, #176]	@ (8016cf8 <USBPDM1_AssertRp+0x164>)
 8016c48:	0013      	movs	r3, r2
 8016c4a:	011b      	lsls	r3, r3, #4
 8016c4c:	1a9b      	subs	r3, r3, r2
 8016c4e:	009b      	lsls	r3, r3, #2
 8016c50:	585b      	ldr	r3, [r3, r1]
 8016c52:	0018      	movs	r0, r3
 8016c54:	f7ff fcea 	bl	801662c <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8016c58:	1dfb      	adds	r3, r7, #7
 8016c5a:	781a      	ldrb	r2, [r3, #0]
 8016c5c:	4926      	ldr	r1, [pc, #152]	@ (8016cf8 <USBPDM1_AssertRp+0x164>)
 8016c5e:	0013      	movs	r3, r2
 8016c60:	011b      	lsls	r3, r3, #4
 8016c62:	1a9b      	subs	r3, r3, r2
 8016c64:	009b      	lsls	r3, r3, #2
 8016c66:	18cb      	adds	r3, r1, r3
 8016c68:	3334      	adds	r3, #52	@ 0x34
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d10e      	bne.n	8016c8e <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8016c70:	1dfb      	adds	r3, r7, #7
 8016c72:	781a      	ldrb	r2, [r3, #0]
 8016c74:	4920      	ldr	r1, [pc, #128]	@ (8016cf8 <USBPDM1_AssertRp+0x164>)
 8016c76:	0013      	movs	r3, r2
 8016c78:	011b      	lsls	r3, r3, #4
 8016c7a:	1a9b      	subs	r3, r3, r2
 8016c7c:	009b      	lsls	r3, r3, #2
 8016c7e:	585b      	ldr	r3, [r3, r1]
 8016c80:	22c0      	movs	r2, #192	@ 0xc0
 8016c82:	0112      	lsls	r2, r2, #4
 8016c84:	0011      	movs	r1, r2
 8016c86:	0018      	movs	r0, r3
 8016c88:	f7ff fcac 	bl	80165e4 <LL_UCPD_SetccEnable>
 8016c8c:	e01b      	b.n	8016cc6 <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8016c8e:	1dfb      	adds	r3, r7, #7
 8016c90:	781a      	ldrb	r2, [r3, #0]
 8016c92:	4919      	ldr	r1, [pc, #100]	@ (8016cf8 <USBPDM1_AssertRp+0x164>)
 8016c94:	0013      	movs	r3, r2
 8016c96:	011b      	lsls	r3, r3, #4
 8016c98:	1a9b      	subs	r3, r3, r2
 8016c9a:	009b      	lsls	r3, r3, #2
 8016c9c:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8016c9e:	1dfb      	adds	r3, r7, #7
 8016ca0:	781a      	ldrb	r2, [r3, #0]
 8016ca2:	4915      	ldr	r1, [pc, #84]	@ (8016cf8 <USBPDM1_AssertRp+0x164>)
 8016ca4:	0013      	movs	r3, r2
 8016ca6:	011b      	lsls	r3, r3, #4
 8016ca8:	1a9b      	subs	r3, r3, r2
 8016caa:	009b      	lsls	r3, r3, #2
 8016cac:	18cb      	adds	r3, r1, r3
 8016cae:	3334      	adds	r3, #52	@ 0x34
 8016cb0:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8016cb2:	2b01      	cmp	r3, #1
 8016cb4:	d102      	bne.n	8016cbc <USBPDM1_AssertRp+0x128>
 8016cb6:	2380      	movs	r3, #128	@ 0x80
 8016cb8:	00db      	lsls	r3, r3, #3
 8016cba:	e001      	b.n	8016cc0 <USBPDM1_AssertRp+0x12c>
 8016cbc:	2380      	movs	r3, #128	@ 0x80
 8016cbe:	011b      	lsls	r3, r3, #4
 8016cc0:	0019      	movs	r1, r3
 8016cc2:	f7ff fc8f 	bl	80165e4 <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8016cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8016cfc <USBPDM1_AssertRp+0x168>)
 8016cc8:	6819      	ldr	r1, [r3, #0]
 8016cca:	1dfb      	adds	r3, r7, #7
 8016ccc:	781a      	ldrb	r2, [r3, #0]
 8016cce:	480a      	ldr	r0, [pc, #40]	@ (8016cf8 <USBPDM1_AssertRp+0x164>)
 8016cd0:	0013      	movs	r3, r2
 8016cd2:	011b      	lsls	r3, r3, #4
 8016cd4:	1a9b      	subs	r3, r3, r2
 8016cd6:	009b      	lsls	r3, r3, #2
 8016cd8:	581b      	ldr	r3, [r3, r0]
 8016cda:	4a09      	ldr	r2, [pc, #36]	@ (8016d00 <USBPDM1_AssertRp+0x16c>)
 8016cdc:	4293      	cmp	r3, r2
 8016cde:	d102      	bne.n	8016ce6 <USBPDM1_AssertRp+0x152>
 8016ce0:	2380      	movs	r3, #128	@ 0x80
 8016ce2:	009b      	lsls	r3, r3, #2
 8016ce4:	e001      	b.n	8016cea <USBPDM1_AssertRp+0x156>
 8016ce6:	2380      	movs	r3, #128	@ 0x80
 8016ce8:	00db      	lsls	r3, r3, #3
 8016cea:	4a04      	ldr	r2, [pc, #16]	@ (8016cfc <USBPDM1_AssertRp+0x168>)
 8016cec:	430b      	orrs	r3, r1
 8016cee:	6013      	str	r3, [r2, #0]

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 8016cf0:	46c0      	nop			@ (mov r8, r8)
 8016cf2:	46bd      	mov	sp, r7
 8016cf4:	b002      	add	sp, #8
 8016cf6:	bd80      	pop	{r7, pc}
 8016cf8:	200117d4 	.word	0x200117d4
 8016cfc:	40010000 	.word	0x40010000
 8016d00:	4000a000 	.word	0x4000a000

08016d04 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b082      	sub	sp, #8
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	0002      	movs	r2, r0
 8016d0c:	1dfb      	adds	r3, r7, #7
 8016d0e:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8016d10:	46c0      	nop			@ (mov r8, r8)
 8016d12:	46bd      	mov	sp, r7
 8016d14:	b002      	add	sp, #8
 8016d16:	bd80      	pop	{r7, pc}

08016d18 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b082      	sub	sp, #8
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	0002      	movs	r2, r0
 8016d20:	1dfb      	adds	r3, r7, #7
 8016d22:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8016d24:	1dfb      	adds	r3, r7, #7
 8016d26:	781a      	ldrb	r2, [r3, #0]
 8016d28:	494b      	ldr	r1, [pc, #300]	@ (8016e58 <USBPDM1_AssertRd+0x140>)
 8016d2a:	0013      	movs	r3, r2
 8016d2c:	011b      	lsls	r3, r3, #4
 8016d2e:	1a9b      	subs	r3, r3, r2
 8016d30:	009b      	lsls	r3, r3, #2
 8016d32:	585b      	ldr	r3, [r3, r1]
 8016d34:	0018      	movs	r0, r3
 8016d36:	f7ff fbf7 	bl	8016528 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 8016d3a:	1dfb      	adds	r3, r7, #7
 8016d3c:	781a      	ldrb	r2, [r3, #0]
 8016d3e:	4946      	ldr	r1, [pc, #280]	@ (8016e58 <USBPDM1_AssertRd+0x140>)
 8016d40:	0013      	movs	r3, r2
 8016d42:	011b      	lsls	r3, r3, #4
 8016d44:	1a9b      	subs	r3, r3, r2
 8016d46:	009b      	lsls	r3, r3, #2
 8016d48:	585b      	ldr	r3, [r3, r1]
 8016d4a:	0018      	movs	r0, r3
 8016d4c:	f7ff fc0c 	bl	8016568 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8016d50:	2001      	movs	r0, #1
 8016d52:	f7ff fba5 	bl	80164a0 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8016d56:	1dfb      	adds	r3, r7, #7
 8016d58:	781a      	ldrb	r2, [r3, #0]
 8016d5a:	493f      	ldr	r1, [pc, #252]	@ (8016e58 <USBPDM1_AssertRd+0x140>)
 8016d5c:	0013      	movs	r3, r2
 8016d5e:	011b      	lsls	r3, r3, #4
 8016d60:	1a9b      	subs	r3, r3, r2
 8016d62:	009b      	lsls	r3, r3, #2
 8016d64:	585b      	ldr	r3, [r3, r1]
 8016d66:	2100      	movs	r1, #0
 8016d68:	0018      	movs	r0, r3
 8016d6a:	f7ff fc3b 	bl	80165e4 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 8016d6e:	1dfb      	adds	r3, r7, #7
 8016d70:	781a      	ldrb	r2, [r3, #0]
 8016d72:	4939      	ldr	r1, [pc, #228]	@ (8016e58 <USBPDM1_AssertRd+0x140>)
 8016d74:	0013      	movs	r3, r2
 8016d76:	011b      	lsls	r3, r3, #4
 8016d78:	1a9b      	subs	r3, r3, r2
 8016d7a:	009b      	lsls	r3, r3, #2
 8016d7c:	585b      	ldr	r3, [r3, r1]
 8016d7e:	0018      	movs	r0, r3
 8016d80:	f7ff fc44 	bl	801660c <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 8016d84:	1dfb      	adds	r3, r7, #7
 8016d86:	781a      	ldrb	r2, [r3, #0]
 8016d88:	4933      	ldr	r1, [pc, #204]	@ (8016e58 <USBPDM1_AssertRd+0x140>)
 8016d8a:	0013      	movs	r3, r2
 8016d8c:	011b      	lsls	r3, r3, #4
 8016d8e:	1a9b      	subs	r3, r3, r2
 8016d90:	009b      	lsls	r3, r3, #2
 8016d92:	18cb      	adds	r3, r1, r3
 8016d94:	3334      	adds	r3, #52	@ 0x34
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d10e      	bne.n	8016dba <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8016d9c:	1dfb      	adds	r3, r7, #7
 8016d9e:	781a      	ldrb	r2, [r3, #0]
 8016da0:	492d      	ldr	r1, [pc, #180]	@ (8016e58 <USBPDM1_AssertRd+0x140>)
 8016da2:	0013      	movs	r3, r2
 8016da4:	011b      	lsls	r3, r3, #4
 8016da6:	1a9b      	subs	r3, r3, r2
 8016da8:	009b      	lsls	r3, r3, #2
 8016daa:	585b      	ldr	r3, [r3, r1]
 8016dac:	22c0      	movs	r2, #192	@ 0xc0
 8016dae:	0112      	lsls	r2, r2, #4
 8016db0:	0011      	movs	r1, r2
 8016db2:	0018      	movs	r0, r3
 8016db4:	f7ff fc16 	bl	80165e4 <LL_UCPD_SetccEnable>
 8016db8:	e01b      	b.n	8016df2 <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8016dba:	1dfb      	adds	r3, r7, #7
 8016dbc:	781a      	ldrb	r2, [r3, #0]
 8016dbe:	4926      	ldr	r1, [pc, #152]	@ (8016e58 <USBPDM1_AssertRd+0x140>)
 8016dc0:	0013      	movs	r3, r2
 8016dc2:	011b      	lsls	r3, r3, #4
 8016dc4:	1a9b      	subs	r3, r3, r2
 8016dc6:	009b      	lsls	r3, r3, #2
 8016dc8:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8016dca:	1dfb      	adds	r3, r7, #7
 8016dcc:	781a      	ldrb	r2, [r3, #0]
 8016dce:	4922      	ldr	r1, [pc, #136]	@ (8016e58 <USBPDM1_AssertRd+0x140>)
 8016dd0:	0013      	movs	r3, r2
 8016dd2:	011b      	lsls	r3, r3, #4
 8016dd4:	1a9b      	subs	r3, r3, r2
 8016dd6:	009b      	lsls	r3, r3, #2
 8016dd8:	18cb      	adds	r3, r1, r3
 8016dda:	3334      	adds	r3, #52	@ 0x34
 8016ddc:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8016dde:	2b01      	cmp	r3, #1
 8016de0:	d102      	bne.n	8016de8 <USBPDM1_AssertRd+0xd0>
 8016de2:	2380      	movs	r3, #128	@ 0x80
 8016de4:	00db      	lsls	r3, r3, #3
 8016de6:	e001      	b.n	8016dec <USBPDM1_AssertRd+0xd4>
 8016de8:	2380      	movs	r3, #128	@ 0x80
 8016dea:	011b      	lsls	r3, r3, #4
 8016dec:	0019      	movs	r1, r3
 8016dee:	f7ff fbf9 	bl	80165e4 <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8016df2:	4b1a      	ldr	r3, [pc, #104]	@ (8016e5c <USBPDM1_AssertRd+0x144>)
 8016df4:	6819      	ldr	r1, [r3, #0]
 8016df6:	1dfb      	adds	r3, r7, #7
 8016df8:	781a      	ldrb	r2, [r3, #0]
 8016dfa:	4817      	ldr	r0, [pc, #92]	@ (8016e58 <USBPDM1_AssertRd+0x140>)
 8016dfc:	0013      	movs	r3, r2
 8016dfe:	011b      	lsls	r3, r3, #4
 8016e00:	1a9b      	subs	r3, r3, r2
 8016e02:	009b      	lsls	r3, r3, #2
 8016e04:	581b      	ldr	r3, [r3, r0]
 8016e06:	4a16      	ldr	r2, [pc, #88]	@ (8016e60 <USBPDM1_AssertRd+0x148>)
 8016e08:	4293      	cmp	r3, r2
 8016e0a:	d102      	bne.n	8016e12 <USBPDM1_AssertRd+0xfa>
 8016e0c:	2380      	movs	r3, #128	@ 0x80
 8016e0e:	009b      	lsls	r3, r3, #2
 8016e10:	e001      	b.n	8016e16 <USBPDM1_AssertRd+0xfe>
 8016e12:	2380      	movs	r3, #128	@ 0x80
 8016e14:	00db      	lsls	r3, r3, #3
 8016e16:	4a11      	ldr	r2, [pc, #68]	@ (8016e5c <USBPDM1_AssertRd+0x144>)
 8016e18:	430b      	orrs	r3, r1
 8016e1a:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 8016e1c:	2001      	movs	r0, #1
 8016e1e:	f7f1 fc01 	bl	8008624 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 8016e22:	1dfb      	adds	r3, r7, #7
 8016e24:	781a      	ldrb	r2, [r3, #0]
 8016e26:	490c      	ldr	r1, [pc, #48]	@ (8016e58 <USBPDM1_AssertRd+0x140>)
 8016e28:	0013      	movs	r3, r2
 8016e2a:	011b      	lsls	r3, r3, #4
 8016e2c:	1a9b      	subs	r3, r3, r2
 8016e2e:	009b      	lsls	r3, r3, #2
 8016e30:	585b      	ldr	r3, [r3, r1]
 8016e32:	0018      	movs	r0, r3
 8016e34:	f7ff fb68 	bl	8016508 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8016e38:	1dfb      	adds	r3, r7, #7
 8016e3a:	781a      	ldrb	r2, [r3, #0]
 8016e3c:	4906      	ldr	r1, [pc, #24]	@ (8016e58 <USBPDM1_AssertRd+0x140>)
 8016e3e:	0013      	movs	r3, r2
 8016e40:	011b      	lsls	r3, r3, #4
 8016e42:	1a9b      	subs	r3, r3, r2
 8016e44:	009b      	lsls	r3, r3, #2
 8016e46:	585b      	ldr	r3, [r3, r1]
 8016e48:	0018      	movs	r0, r3
 8016e4a:	f7ff fb7d 	bl	8016548 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 8016e4e:	46c0      	nop			@ (mov r8, r8)
 8016e50:	46bd      	mov	sp, r7
 8016e52:	b002      	add	sp, #8
 8016e54:	bd80      	pop	{r7, pc}
 8016e56:	46c0      	nop			@ (mov r8, r8)
 8016e58:	200117d4 	.word	0x200117d4
 8016e5c:	40010000 	.word	0x40010000
 8016e60:	4000a000 	.word	0x4000a000

08016e64 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8016e64:	b580      	push	{r7, lr}
 8016e66:	b082      	sub	sp, #8
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	0002      	movs	r2, r0
 8016e6c:	1dfb      	adds	r3, r7, #7
 8016e6e:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8016e70:	46c0      	nop			@ (mov r8, r8)
 8016e72:	46bd      	mov	sp, r7
 8016e74:	b002      	add	sp, #8
 8016e76:	bd80      	pop	{r7, pc}

08016e78 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b082      	sub	sp, #8
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	0002      	movs	r2, r0
 8016e80:	1dfb      	adds	r3, r7, #7
 8016e82:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8016e84:	2001      	movs	r0, #1
 8016e86:	f7ff fb0b 	bl	80164a0 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8016e8a:	1dfb      	adds	r3, r7, #7
 8016e8c:	781a      	ldrb	r2, [r3, #0]
 8016e8e:	4930      	ldr	r1, [pc, #192]	@ (8016f50 <USBPDM1_EnterErrorRecovery+0xd8>)
 8016e90:	0013      	movs	r3, r2
 8016e92:	011b      	lsls	r3, r3, #4
 8016e94:	1a9b      	subs	r3, r3, r2
 8016e96:	009b      	lsls	r3, r3, #2
 8016e98:	585b      	ldr	r3, [r3, r1]
 8016e9a:	0018      	movs	r0, r3
 8016e9c:	f7ff fbc6 	bl	801662c <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8016ea0:	1dfb      	adds	r3, r7, #7
 8016ea2:	781a      	ldrb	r2, [r3, #0]
 8016ea4:	492a      	ldr	r1, [pc, #168]	@ (8016f50 <USBPDM1_EnterErrorRecovery+0xd8>)
 8016ea6:	0013      	movs	r3, r2
 8016ea8:	011b      	lsls	r3, r3, #4
 8016eaa:	1a9b      	subs	r3, r3, r2
 8016eac:	009b      	lsls	r3, r3, #2
 8016eae:	585b      	ldr	r3, [r3, r1]
 8016eb0:	2100      	movs	r1, #0
 8016eb2:	0018      	movs	r0, r3
 8016eb4:	f7ff fbca 	bl	801664c <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8016eb8:	1dfb      	adds	r3, r7, #7
 8016eba:	781a      	ldrb	r2, [r3, #0]
 8016ebc:	4924      	ldr	r1, [pc, #144]	@ (8016f50 <USBPDM1_EnterErrorRecovery+0xd8>)
 8016ebe:	0013      	movs	r3, r2
 8016ec0:	011b      	lsls	r3, r3, #4
 8016ec2:	1a9b      	subs	r3, r3, r2
 8016ec4:	009b      	lsls	r3, r3, #2
 8016ec6:	585b      	ldr	r3, [r3, r1]
 8016ec8:	2100      	movs	r1, #0
 8016eca:	0018      	movs	r0, r3
 8016ecc:	f7ff fb8a 	bl	80165e4 <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8016ed0:	4b20      	ldr	r3, [pc, #128]	@ (8016f54 <USBPDM1_EnterErrorRecovery+0xdc>)
 8016ed2:	6819      	ldr	r1, [r3, #0]
 8016ed4:	1dfb      	adds	r3, r7, #7
 8016ed6:	781a      	ldrb	r2, [r3, #0]
 8016ed8:	481d      	ldr	r0, [pc, #116]	@ (8016f50 <USBPDM1_EnterErrorRecovery+0xd8>)
 8016eda:	0013      	movs	r3, r2
 8016edc:	011b      	lsls	r3, r3, #4
 8016ede:	1a9b      	subs	r3, r3, r2
 8016ee0:	009b      	lsls	r3, r3, #2
 8016ee2:	581b      	ldr	r3, [r3, r0]
 8016ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8016f58 <USBPDM1_EnterErrorRecovery+0xe0>)
 8016ee6:	4293      	cmp	r3, r2
 8016ee8:	d102      	bne.n	8016ef0 <USBPDM1_EnterErrorRecovery+0x78>
 8016eea:	2380      	movs	r3, #128	@ 0x80
 8016eec:	009b      	lsls	r3, r3, #2
 8016eee:	e001      	b.n	8016ef4 <USBPDM1_EnterErrorRecovery+0x7c>
 8016ef0:	2380      	movs	r3, #128	@ 0x80
 8016ef2:	00db      	lsls	r3, r3, #3
 8016ef4:	4a17      	ldr	r2, [pc, #92]	@ (8016f54 <USBPDM1_EnterErrorRecovery+0xdc>)
 8016ef6:	430b      	orrs	r3, r1
 8016ef8:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8016efa:	1dfb      	adds	r3, r7, #7
 8016efc:	781a      	ldrb	r2, [r3, #0]
 8016efe:	4914      	ldr	r1, [pc, #80]	@ (8016f50 <USBPDM1_EnterErrorRecovery+0xd8>)
 8016f00:	0013      	movs	r3, r2
 8016f02:	011b      	lsls	r3, r3, #4
 8016f04:	1a9b      	subs	r3, r3, r2
 8016f06:	009b      	lsls	r3, r3, #2
 8016f08:	585b      	ldr	r3, [r3, r1]
 8016f0a:	0018      	movs	r0, r3
 8016f0c:	f7ff fbd2 	bl	80166b4 <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8016f10:	1dfb      	adds	r3, r7, #7
 8016f12:	781a      	ldrb	r2, [r3, #0]
 8016f14:	490e      	ldr	r1, [pc, #56]	@ (8016f50 <USBPDM1_EnterErrorRecovery+0xd8>)
 8016f16:	0013      	movs	r3, r2
 8016f18:	011b      	lsls	r3, r3, #4
 8016f1a:	1a9b      	subs	r3, r3, r2
 8016f1c:	009b      	lsls	r3, r3, #2
 8016f1e:	18cb      	adds	r3, r1, r3
 8016f20:	330c      	adds	r3, #12
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	7a1b      	ldrb	r3, [r3, #8]
 8016f26:	2202      	movs	r2, #2
 8016f28:	4013      	ands	r3, r2
 8016f2a:	b2db      	uxtb	r3, r3
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d00a      	beq.n	8016f46 <USBPDM1_EnterErrorRecovery+0xce>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8016f30:	1dfb      	adds	r3, r7, #7
 8016f32:	781a      	ldrb	r2, [r3, #0]
 8016f34:	4906      	ldr	r1, [pc, #24]	@ (8016f50 <USBPDM1_EnterErrorRecovery+0xd8>)
 8016f36:	0013      	movs	r3, r2
 8016f38:	011b      	lsls	r3, r3, #4
 8016f3a:	1a9b      	subs	r3, r3, r2
 8016f3c:	009b      	lsls	r3, r3, #2
 8016f3e:	585b      	ldr	r3, [r3, r1]
 8016f40:	0018      	movs	r0, r3
 8016f42:	f7ff fb3f 	bl	80165c4 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 8016f46:	46c0      	nop			@ (mov r8, r8)
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	b002      	add	sp, #8
 8016f4c:	bd80      	pop	{r7, pc}
 8016f4e:	46c0      	nop			@ (mov r8, r8)
 8016f50:	200117d4 	.word	0x200117d4
 8016f54:	40010000 	.word	0x40010000
 8016f58:	4000a000 	.word	0x4000a000

08016f5c <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b082      	sub	sp, #8
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	0002      	movs	r2, r0
 8016f64:	1dfb      	adds	r3, r7, #7
 8016f66:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8016f68:	1dfb      	adds	r3, r7, #7
 8016f6a:	781a      	ldrb	r2, [r3, #0]
 8016f6c:	4906      	ldr	r1, [pc, #24]	@ (8016f88 <USBPD_HW_IF_EnableRX+0x2c>)
 8016f6e:	0013      	movs	r3, r2
 8016f70:	011b      	lsls	r3, r3, #4
 8016f72:	1a9b      	subs	r3, r3, r2
 8016f74:	009b      	lsls	r3, r3, #2
 8016f76:	585b      	ldr	r3, [r3, r1]
 8016f78:	0018      	movs	r0, r3
 8016f7a:	f7ff fb8d 	bl	8016698 <LL_UCPD_RxEnable>
}
 8016f7e:	46c0      	nop			@ (mov r8, r8)
 8016f80:	46bd      	mov	sp, r7
 8016f82:	b002      	add	sp, #8
 8016f84:	bd80      	pop	{r7, pc}
 8016f86:	46c0      	nop			@ (mov r8, r8)
 8016f88:	200117d4 	.word	0x200117d4

08016f8c <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b082      	sub	sp, #8
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	0002      	movs	r2, r0
 8016f94:	1dfb      	adds	r3, r7, #7
 8016f96:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8016f98:	1dfb      	adds	r3, r7, #7
 8016f9a:	781a      	ldrb	r2, [r3, #0]
 8016f9c:	4906      	ldr	r1, [pc, #24]	@ (8016fb8 <USBPD_HW_IF_DisableRX+0x2c>)
 8016f9e:	0013      	movs	r3, r2
 8016fa0:	011b      	lsls	r3, r3, #4
 8016fa2:	1a9b      	subs	r3, r3, r2
 8016fa4:	009b      	lsls	r3, r3, #2
 8016fa6:	585b      	ldr	r3, [r3, r1]
 8016fa8:	0018      	movs	r0, r3
 8016faa:	f7ff fb83 	bl	80166b4 <LL_UCPD_RxDisable>
}
 8016fae:	46c0      	nop			@ (mov r8, r8)
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	b002      	add	sp, #8
 8016fb4:	bd80      	pop	{r7, pc}
 8016fb6:	46c0      	nop			@ (mov r8, r8)
 8016fb8:	200117d4 	.word	0x200117d4

08016fbc <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 8016fbc:	b590      	push	{r4, r7, lr}
 8016fbe:	b085      	sub	sp, #20
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	0002      	movs	r2, r0
 8016fc4:	6039      	str	r1, [r7, #0]
 8016fc6:	1dfb      	adds	r3, r7, #7
 8016fc8:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 8016fca:	f000 fc51 	bl	8017870 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 8016fce:	1dfb      	adds	r3, r7, #7
 8016fd0:	781c      	ldrb	r4, [r3, #0]
 8016fd2:	1dfb      	adds	r3, r7, #7
 8016fd4:	781b      	ldrb	r3, [r3, #0]
 8016fd6:	0018      	movs	r0, r3
 8016fd8:	f7fe fd02 	bl	80159e0 <USBPD_HW_Init_DMATxInstance>
 8016fdc:	0001      	movs	r1, r0
 8016fde:	4aa6      	ldr	r2, [pc, #664]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 8016fe0:	0023      	movs	r3, r4
 8016fe2:	011b      	lsls	r3, r3, #4
 8016fe4:	1b1b      	subs	r3, r3, r4
 8016fe6:	009b      	lsls	r3, r3, #2
 8016fe8:	18d3      	adds	r3, r2, r3
 8016fea:	3304      	adds	r3, #4
 8016fec:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 8016fee:	1dfb      	adds	r3, r7, #7
 8016ff0:	781c      	ldrb	r4, [r3, #0]
 8016ff2:	1dfb      	adds	r3, r7, #7
 8016ff4:	781b      	ldrb	r3, [r3, #0]
 8016ff6:	0018      	movs	r0, r3
 8016ff8:	f7fe fc88 	bl	801590c <USBPD_HW_Init_DMARxInstance>
 8016ffc:	0001      	movs	r1, r0
 8016ffe:	4a9e      	ldr	r2, [pc, #632]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 8017000:	0023      	movs	r3, r4
 8017002:	011b      	lsls	r3, r3, #4
 8017004:	1b1b      	subs	r3, r3, r4
 8017006:	009b      	lsls	r3, r3, #2
 8017008:	18d3      	adds	r3, r2, r3
 801700a:	3308      	adds	r3, #8
 801700c:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 801700e:	1dfb      	adds	r3, r7, #7
 8017010:	781a      	ldrb	r2, [r3, #0]
 8017012:	4999      	ldr	r1, [pc, #612]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 8017014:	0013      	movs	r3, r2
 8017016:	011b      	lsls	r3, r3, #4
 8017018:	1a9b      	subs	r3, r3, r2
 801701a:	009b      	lsls	r3, r3, #2
 801701c:	585b      	ldr	r3, [r3, r1]
 801701e:	3330      	adds	r3, #48	@ 0x30
 8017020:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 8017022:	1dfb      	adds	r3, r7, #7
 8017024:	781a      	ldrb	r2, [r3, #0]
 8017026:	4994      	ldr	r1, [pc, #592]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 8017028:	0013      	movs	r3, r2
 801702a:	011b      	lsls	r3, r3, #4
 801702c:	1a9b      	subs	r3, r3, r2
 801702e:	009b      	lsls	r3, r3, #2
 8017030:	18cb      	adds	r3, r1, r3
 8017032:	3308      	adds	r3, #8
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	68fa      	ldr	r2, [r7, #12]
 8017038:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 801703a:	1dfb      	adds	r3, r7, #7
 801703c:	781a      	ldrb	r2, [r3, #0]
 801703e:	498e      	ldr	r1, [pc, #568]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 8017040:	0013      	movs	r3, r2
 8017042:	011b      	lsls	r3, r3, #4
 8017044:	1a9b      	subs	r3, r3, r2
 8017046:	009b      	lsls	r3, r3, #2
 8017048:	18cb      	adds	r3, r1, r3
 801704a:	3330      	adds	r3, #48	@ 0x30
 801704c:	6818      	ldr	r0, [r3, #0]
 801704e:	1dfb      	adds	r3, r7, #7
 8017050:	781a      	ldrb	r2, [r3, #0]
 8017052:	4989      	ldr	r1, [pc, #548]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 8017054:	0013      	movs	r3, r2
 8017056:	011b      	lsls	r3, r3, #4
 8017058:	1a9b      	subs	r3, r3, r2
 801705a:	009b      	lsls	r3, r3, #2
 801705c:	18cb      	adds	r3, r1, r3
 801705e:	3308      	adds	r3, #8
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	0002      	movs	r2, r0
 8017064:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 8017066:	1dfb      	adds	r3, r7, #7
 8017068:	781a      	ldrb	r2, [r3, #0]
 801706a:	4983      	ldr	r1, [pc, #524]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 801706c:	0013      	movs	r3, r2
 801706e:	011b      	lsls	r3, r3, #4
 8017070:	1a9b      	subs	r3, r3, r2
 8017072:	009b      	lsls	r3, r3, #2
 8017074:	18cb      	adds	r3, r1, r3
 8017076:	3308      	adds	r3, #8
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	2284      	movs	r2, #132	@ 0x84
 801707c:	0052      	lsls	r2, r2, #1
 801707e:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8017080:	1dfb      	adds	r3, r7, #7
 8017082:	781a      	ldrb	r2, [r3, #0]
 8017084:	497c      	ldr	r1, [pc, #496]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 8017086:	0013      	movs	r3, r2
 8017088:	011b      	lsls	r3, r3, #4
 801708a:	1a9b      	subs	r3, r3, r2
 801708c:	009b      	lsls	r3, r3, #2
 801708e:	18cb      	adds	r3, r1, r3
 8017090:	3308      	adds	r3, #8
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	6819      	ldr	r1, [r3, #0]
 8017096:	1dfb      	adds	r3, r7, #7
 8017098:	781a      	ldrb	r2, [r3, #0]
 801709a:	4877      	ldr	r0, [pc, #476]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 801709c:	0013      	movs	r3, r2
 801709e:	011b      	lsls	r3, r3, #4
 80170a0:	1a9b      	subs	r3, r3, r2
 80170a2:	009b      	lsls	r3, r3, #2
 80170a4:	18c3      	adds	r3, r0, r3
 80170a6:	3308      	adds	r3, #8
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	2201      	movs	r2, #1
 80170ac:	430a      	orrs	r2, r1
 80170ae:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 80170b0:	1dfb      	adds	r3, r7, #7
 80170b2:	781a      	ldrb	r2, [r3, #0]
 80170b4:	4970      	ldr	r1, [pc, #448]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 80170b6:	0013      	movs	r3, r2
 80170b8:	011b      	lsls	r3, r3, #4
 80170ba:	1a9b      	subs	r3, r3, r2
 80170bc:	009b      	lsls	r3, r3, #2
 80170be:	585b      	ldr	r3, [r3, r1]
 80170c0:	3324      	adds	r3, #36	@ 0x24
 80170c2:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 80170c4:	1dfb      	adds	r3, r7, #7
 80170c6:	781a      	ldrb	r2, [r3, #0]
 80170c8:	496b      	ldr	r1, [pc, #428]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 80170ca:	0013      	movs	r3, r2
 80170cc:	011b      	lsls	r3, r3, #4
 80170ce:	1a9b      	subs	r3, r3, r2
 80170d0:	009b      	lsls	r3, r3, #2
 80170d2:	18cb      	adds	r3, r1, r3
 80170d4:	3304      	adds	r3, #4
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	68fa      	ldr	r2, [r7, #12]
 80170da:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 80170dc:	1dfb      	adds	r3, r7, #7
 80170de:	781a      	ldrb	r2, [r3, #0]
 80170e0:	4965      	ldr	r1, [pc, #404]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 80170e2:	0013      	movs	r3, r2
 80170e4:	011b      	lsls	r3, r3, #4
 80170e6:	1a9b      	subs	r3, r3, r2
 80170e8:	009b      	lsls	r3, r3, #2
 80170ea:	585b      	ldr	r3, [r3, r1]
 80170ec:	6919      	ldr	r1, [r3, #16]
 80170ee:	1dfb      	adds	r3, r7, #7
 80170f0:	781a      	ldrb	r2, [r3, #0]
 80170f2:	4861      	ldr	r0, [pc, #388]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 80170f4:	0013      	movs	r3, r2
 80170f6:	011b      	lsls	r3, r3, #4
 80170f8:	1a9b      	subs	r3, r3, r2
 80170fa:	009b      	lsls	r3, r3, #2
 80170fc:	581b      	ldr	r3, [r3, r0]
 80170fe:	4a5f      	ldr	r2, [pc, #380]	@ (801727c <HW_SignalAttachement+0x2c0>)
 8017100:	430a      	orrs	r2, r1
 8017102:	611a      	str	r2, [r3, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 8017104:	1dfb      	adds	r3, r7, #7
 8017106:	781a      	ldrb	r2, [r3, #0]
 8017108:	495b      	ldr	r1, [pc, #364]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 801710a:	0013      	movs	r3, r2
 801710c:	011b      	lsls	r3, r3, #4
 801710e:	1a9b      	subs	r3, r3, r2
 8017110:	009b      	lsls	r3, r3, #2
 8017112:	18cb      	adds	r3, r1, r3
 8017114:	3334      	adds	r3, #52	@ 0x34
 8017116:	683a      	ldr	r2, [r7, #0]
 8017118:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 801711a:	1dfb      	adds	r3, r7, #7
 801711c:	781a      	ldrb	r2, [r3, #0]
 801711e:	4956      	ldr	r1, [pc, #344]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 8017120:	0013      	movs	r3, r2
 8017122:	011b      	lsls	r3, r3, #4
 8017124:	1a9b      	subs	r3, r3, r2
 8017126:	009b      	lsls	r3, r3, #2
 8017128:	5858      	ldr	r0, [r3, r1]
 801712a:	1dfb      	adds	r3, r7, #7
 801712c:	781a      	ldrb	r2, [r3, #0]
 801712e:	4952      	ldr	r1, [pc, #328]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 8017130:	0013      	movs	r3, r2
 8017132:	011b      	lsls	r3, r3, #4
 8017134:	1a9b      	subs	r3, r3, r2
 8017136:	009b      	lsls	r3, r3, #2
 8017138:	18cb      	adds	r3, r1, r3
 801713a:	3334      	adds	r3, #52	@ 0x34
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	2b01      	cmp	r3, #1
 8017140:	d101      	bne.n	8017146 <HW_SignalAttachement+0x18a>
 8017142:	2300      	movs	r3, #0
 8017144:	e000      	b.n	8017148 <HW_SignalAttachement+0x18c>
 8017146:	2340      	movs	r3, #64	@ 0x40
 8017148:	0019      	movs	r1, r3
 801714a:	f7ff fa93 	bl	8016674 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 801714e:	1dfb      	adds	r3, r7, #7
 8017150:	781a      	ldrb	r2, [r3, #0]
 8017152:	4949      	ldr	r1, [pc, #292]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 8017154:	0013      	movs	r3, r2
 8017156:	011b      	lsls	r3, r3, #4
 8017158:	1a9b      	subs	r3, r3, r2
 801715a:	009b      	lsls	r3, r3, #2
 801715c:	18cb      	adds	r3, r1, r3
 801715e:	330c      	adds	r3, #12
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	7a1b      	ldrb	r3, [r3, #8]
 8017164:	2202      	movs	r2, #2
 8017166:	4013      	ands	r3, r2
 8017168:	b2db      	uxtb	r3, r3
 801716a:	2b00      	cmp	r3, #0
 801716c:	d034      	beq.n	80171d8 <HW_SignalAttachement+0x21c>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 801716e:	1dfb      	adds	r3, r7, #7
 8017170:	781a      	ldrb	r2, [r3, #0]
 8017172:	4941      	ldr	r1, [pc, #260]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 8017174:	0013      	movs	r3, r2
 8017176:	011b      	lsls	r3, r3, #4
 8017178:	1a9b      	subs	r3, r3, r2
 801717a:	009b      	lsls	r3, r3, #2
 801717c:	18cb      	adds	r3, r1, r3
 801717e:	3334      	adds	r3, #52	@ 0x34
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	2b01      	cmp	r3, #1
 8017184:	d101      	bne.n	801718a <HW_SignalAttachement+0x1ce>
 8017186:	2301      	movs	r3, #1
 8017188:	e000      	b.n	801718c <HW_SignalAttachement+0x1d0>
 801718a:	2302      	movs	r3, #2
 801718c:	1dfa      	adds	r2, r7, #7
 801718e:	7812      	ldrb	r2, [r2, #0]
 8017190:	0019      	movs	r1, r3
 8017192:	0010      	movs	r0, r2
 8017194:	f7fe fc92 	bl	8015abc <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 8017198:	1dfb      	adds	r3, r7, #7
 801719a:	781a      	ldrb	r2, [r3, #0]
 801719c:	4936      	ldr	r1, [pc, #216]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 801719e:	0013      	movs	r3, r2
 80171a0:	011b      	lsls	r3, r3, #4
 80171a2:	1a9b      	subs	r3, r3, r2
 80171a4:	009b      	lsls	r3, r3, #2
 80171a6:	585b      	ldr	r3, [r3, r1]
 80171a8:	0018      	movs	r0, r3
 80171aa:	f7ff f9fb 	bl	80165a4 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 80171ae:	1dfb      	adds	r3, r7, #7
 80171b0:	781a      	ldrb	r2, [r3, #0]
 80171b2:	4931      	ldr	r1, [pc, #196]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 80171b4:	0013      	movs	r3, r2
 80171b6:	011b      	lsls	r3, r3, #4
 80171b8:	1a9b      	subs	r3, r3, r2
 80171ba:	009b      	lsls	r3, r3, #2
 80171bc:	585b      	ldr	r3, [r3, r1]
 80171be:	6919      	ldr	r1, [r3, #16]
 80171c0:	1dfb      	adds	r3, r7, #7
 80171c2:	781a      	ldrb	r2, [r3, #0]
 80171c4:	482c      	ldr	r0, [pc, #176]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 80171c6:	0013      	movs	r3, r2
 80171c8:	011b      	lsls	r3, r3, #4
 80171ca:	1a9b      	subs	r3, r3, r2
 80171cc:	009b      	lsls	r3, r3, #2
 80171ce:	581b      	ldr	r3, [r3, r0]
 80171d0:	2280      	movs	r2, #128	@ 0x80
 80171d2:	0352      	lsls	r2, r2, #13
 80171d4:	430a      	orrs	r2, r1
 80171d6:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 80171d8:	1dfb      	adds	r3, r7, #7
 80171da:	781a      	ldrb	r2, [r3, #0]
 80171dc:	4926      	ldr	r1, [pc, #152]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 80171de:	0013      	movs	r3, r2
 80171e0:	011b      	lsls	r3, r3, #4
 80171e2:	1a9b      	subs	r3, r3, r2
 80171e4:	009b      	lsls	r3, r3, #2
 80171e6:	18cb      	adds	r3, r1, r3
 80171e8:	3334      	adds	r3, #52	@ 0x34
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	2b01      	cmp	r3, #1
 80171ee:	d10e      	bne.n	801720e <HW_SignalAttachement+0x252>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 80171f0:	1dfb      	adds	r3, r7, #7
 80171f2:	781a      	ldrb	r2, [r3, #0]
 80171f4:	4920      	ldr	r1, [pc, #128]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 80171f6:	0013      	movs	r3, r2
 80171f8:	011b      	lsls	r3, r3, #4
 80171fa:	1a9b      	subs	r3, r3, r2
 80171fc:	009b      	lsls	r3, r3, #2
 80171fe:	585b      	ldr	r3, [r3, r1]
 8017200:	2280      	movs	r2, #128	@ 0x80
 8017202:	00d2      	lsls	r2, r2, #3
 8017204:	0011      	movs	r1, r2
 8017206:	0018      	movs	r0, r3
 8017208:	f7ff f9ec 	bl	80165e4 <LL_UCPD_SetccEnable>
 801720c:	e00d      	b.n	801722a <HW_SignalAttachement+0x26e>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 801720e:	1dfb      	adds	r3, r7, #7
 8017210:	781a      	ldrb	r2, [r3, #0]
 8017212:	4919      	ldr	r1, [pc, #100]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 8017214:	0013      	movs	r3, r2
 8017216:	011b      	lsls	r3, r3, #4
 8017218:	1a9b      	subs	r3, r3, r2
 801721a:	009b      	lsls	r3, r3, #2
 801721c:	585b      	ldr	r3, [r3, r1]
 801721e:	2280      	movs	r2, #128	@ 0x80
 8017220:	0112      	lsls	r2, r2, #4
 8017222:	0011      	movs	r1, r2
 8017224:	0018      	movs	r0, r3
 8017226:	f7ff f9dd 	bl	80165e4 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 801722a:	1dfb      	adds	r3, r7, #7
 801722c:	781a      	ldrb	r2, [r3, #0]
 801722e:	4912      	ldr	r1, [pc, #72]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 8017230:	0013      	movs	r3, r2
 8017232:	011b      	lsls	r3, r3, #4
 8017234:	1a9b      	subs	r3, r3, r2
 8017236:	009b      	lsls	r3, r3, #2
 8017238:	585b      	ldr	r3, [r3, r1]
 801723a:	2100      	movs	r1, #0
 801723c:	0018      	movs	r0, r3
 801723e:	f7ff fa48 	bl	80166d2 <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 8017242:	1dfb      	adds	r3, r7, #7
 8017244:	781a      	ldrb	r2, [r3, #0]
 8017246:	490c      	ldr	r1, [pc, #48]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 8017248:	0013      	movs	r3, r2
 801724a:	011b      	lsls	r3, r3, #4
 801724c:	1a9b      	subs	r3, r3, r2
 801724e:	009b      	lsls	r3, r3, #2
 8017250:	585b      	ldr	r3, [r3, r1]
 8017252:	0018      	movs	r0, r3
 8017254:	f7ff fa7d 	bl	8016752 <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 8017258:	1dfb      	adds	r3, r7, #7
 801725a:	781a      	ldrb	r2, [r3, #0]
 801725c:	4906      	ldr	r1, [pc, #24]	@ (8017278 <HW_SignalAttachement+0x2bc>)
 801725e:	0013      	movs	r3, r2
 8017260:	011b      	lsls	r3, r3, #4
 8017262:	1a9b      	subs	r3, r3, r2
 8017264:	009b      	lsls	r3, r3, #2
 8017266:	585b      	ldr	r3, [r3, r1]
 8017268:	0018      	movs	r0, r3
 801726a:	f7ff fa91 	bl	8016790 <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 801726e:	46c0      	nop			@ (mov r8, r8)
 8017270:	46bd      	mov	sp, r7
 8017272:	b005      	add	sp, #20
 8017274:	bd90      	pop	{r4, r7, pc}
 8017276:	46c0      	nop			@ (mov r8, r8)
 8017278:	200117d4 	.word	0x200117d4
 801727c:	00001e7e 	.word	0x00001e7e

08017280 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 8017280:	b580      	push	{r7, lr}
 8017282:	b082      	sub	sp, #8
 8017284:	af00      	add	r7, sp, #0
 8017286:	0002      	movs	r2, r0
 8017288:	1dfb      	adds	r3, r7, #7
 801728a:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 801728c:	1dfb      	adds	r3, r7, #7
 801728e:	781a      	ldrb	r2, [r3, #0]
 8017290:	4941      	ldr	r1, [pc, #260]	@ (8017398 <HW_SignalDetachment+0x118>)
 8017292:	0013      	movs	r3, r2
 8017294:	011b      	lsls	r3, r3, #4
 8017296:	1a9b      	subs	r3, r3, r2
 8017298:	009b      	lsls	r3, r3, #2
 801729a:	585b      	ldr	r3, [r3, r1]
 801729c:	0018      	movs	r0, r3
 801729e:	f7ff fa67 	bl	8016770 <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 80172a2:	1dfb      	adds	r3, r7, #7
 80172a4:	781a      	ldrb	r2, [r3, #0]
 80172a6:	493c      	ldr	r1, [pc, #240]	@ (8017398 <HW_SignalDetachment+0x118>)
 80172a8:	0013      	movs	r3, r2
 80172aa:	011b      	lsls	r3, r3, #4
 80172ac:	1a9b      	subs	r3, r3, r2
 80172ae:	009b      	lsls	r3, r3, #2
 80172b0:	585b      	ldr	r3, [r3, r1]
 80172b2:	0018      	movs	r0, r3
 80172b4:	f7ff fa7c 	bl	80167b0 <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80172b8:	1dfb      	adds	r3, r7, #7
 80172ba:	781a      	ldrb	r2, [r3, #0]
 80172bc:	4936      	ldr	r1, [pc, #216]	@ (8017398 <HW_SignalDetachment+0x118>)
 80172be:	0013      	movs	r3, r2
 80172c0:	011b      	lsls	r3, r3, #4
 80172c2:	1a9b      	subs	r3, r3, r2
 80172c4:	009b      	lsls	r3, r3, #2
 80172c6:	585b      	ldr	r3, [r3, r1]
 80172c8:	0018      	movs	r0, r3
 80172ca:	f7ff f9f3 	bl	80166b4 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 80172ce:	1dfb      	adds	r3, r7, #7
 80172d0:	781a      	ldrb	r2, [r3, #0]
 80172d2:	4931      	ldr	r1, [pc, #196]	@ (8017398 <HW_SignalDetachment+0x118>)
 80172d4:	0013      	movs	r3, r2
 80172d6:	011b      	lsls	r3, r3, #4
 80172d8:	1a9b      	subs	r3, r3, r2
 80172da:	009b      	lsls	r3, r3, #2
 80172dc:	585b      	ldr	r3, [r3, r1]
 80172de:	22c0      	movs	r2, #192	@ 0xc0
 80172e0:	0212      	lsls	r2, r2, #8
 80172e2:	611a      	str	r2, [r3, #16]
    /* Enable detection interrupt */
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 80172e4:	1dfb      	adds	r3, r7, #7
 80172e6:	781b      	ldrb	r3, [r3, #0]
 80172e8:	0018      	movs	r0, r3
 80172ea:	f7fe fbdd 	bl	8015aa8 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 80172ee:	1dfb      	adds	r3, r7, #7
 80172f0:	781b      	ldrb	r3, [r3, #0]
 80172f2:	0018      	movs	r0, r3
 80172f4:	f7fe fb6a 	bl	80159cc <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80172f8:	1dfb      	adds	r3, r7, #7
 80172fa:	781a      	ldrb	r2, [r3, #0]
 80172fc:	4926      	ldr	r1, [pc, #152]	@ (8017398 <HW_SignalDetachment+0x118>)
 80172fe:	0013      	movs	r3, r2
 8017300:	011b      	lsls	r3, r3, #4
 8017302:	1a9b      	subs	r3, r3, r2
 8017304:	009b      	lsls	r3, r3, #2
 8017306:	585b      	ldr	r3, [r3, r1]
 8017308:	22c0      	movs	r2, #192	@ 0xc0
 801730a:	0112      	lsls	r2, r2, #4
 801730c:	0011      	movs	r1, r2
 801730e:	0018      	movs	r0, r3
 8017310:	f7ff f968 	bl	80165e4 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 8017314:	1dfb      	adds	r3, r7, #7
 8017316:	781a      	ldrb	r2, [r3, #0]
 8017318:	491f      	ldr	r1, [pc, #124]	@ (8017398 <HW_SignalDetachment+0x118>)
 801731a:	0013      	movs	r3, r2
 801731c:	011b      	lsls	r3, r3, #4
 801731e:	1a9b      	subs	r3, r3, r2
 8017320:	009b      	lsls	r3, r3, #2
 8017322:	18cb      	adds	r3, r1, r3
 8017324:	3310      	adds	r3, #16
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	781b      	ldrb	r3, [r3, #0]
 801732a:	2204      	movs	r2, #4
 801732c:	4013      	ands	r3, r2
 801732e:	b2db      	uxtb	r3, r3
 8017330:	2b00      	cmp	r3, #0
 8017332:	d104      	bne.n	801733e <HW_SignalDetachment+0xbe>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8017334:	1dfb      	adds	r3, r7, #7
 8017336:	781b      	ldrb	r3, [r3, #0]
 8017338:	0018      	movs	r0, r3
 801733a:	f006 fb64 	bl	801da06 <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 801733e:	1dfb      	adds	r3, r7, #7
 8017340:	781a      	ldrb	r2, [r3, #0]
 8017342:	4915      	ldr	r1, [pc, #84]	@ (8017398 <HW_SignalDetachment+0x118>)
 8017344:	0013      	movs	r3, r2
 8017346:	011b      	lsls	r3, r3, #4
 8017348:	1a9b      	subs	r3, r3, r2
 801734a:	009b      	lsls	r3, r3, #2
 801734c:	18cb      	adds	r3, r1, r3
 801734e:	330c      	adds	r3, #12
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	7a1b      	ldrb	r3, [r3, #8]
 8017354:	2202      	movs	r2, #2
 8017356:	4013      	ands	r3, r2
 8017358:	b2db      	uxtb	r3, r3
 801735a:	2b00      	cmp	r3, #0
 801735c:	d00a      	beq.n	8017374 <HW_SignalDetachment+0xf4>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 801735e:	1dfb      	adds	r3, r7, #7
 8017360:	781a      	ldrb	r2, [r3, #0]
 8017362:	490d      	ldr	r1, [pc, #52]	@ (8017398 <HW_SignalDetachment+0x118>)
 8017364:	0013      	movs	r3, r2
 8017366:	011b      	lsls	r3, r3, #4
 8017368:	1a9b      	subs	r3, r3, r2
 801736a:	009b      	lsls	r3, r3, #2
 801736c:	585b      	ldr	r3, [r3, r1]
 801736e:	0018      	movs	r0, r3
 8017370:	f7ff f928 	bl	80165c4 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 8017374:	1dfb      	adds	r3, r7, #7
 8017376:	781a      	ldrb	r2, [r3, #0]
 8017378:	4907      	ldr	r1, [pc, #28]	@ (8017398 <HW_SignalDetachment+0x118>)
 801737a:	0013      	movs	r3, r2
 801737c:	011b      	lsls	r3, r3, #4
 801737e:	1a9b      	subs	r3, r3, r2
 8017380:	009b      	lsls	r3, r3, #2
 8017382:	18cb      	adds	r3, r1, r3
 8017384:	3334      	adds	r3, #52	@ 0x34
 8017386:	2200      	movs	r2, #0
 8017388:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 801738a:	f000 fb0f 	bl	80179ac <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 801738e:	46c0      	nop			@ (mov r8, r8)
 8017390:	46bd      	mov	sp, r7
 8017392:	b002      	add	sp, #8
 8017394:	bd80      	pop	{r7, pc}
 8017396:	46c0      	nop			@ (mov r8, r8)
 8017398:	200117d4 	.word	0x200117d4

0801739c <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b082      	sub	sp, #8
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	0002      	movs	r2, r0
 80173a4:	1dfb      	adds	r3, r7, #7
 80173a6:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 80173a8:	1dfb      	adds	r3, r7, #7
 80173aa:	781a      	ldrb	r2, [r3, #0]
 80173ac:	4907      	ldr	r1, [pc, #28]	@ (80173cc <USBPD_HW_IF_SetResistor_SinkTxNG+0x30>)
 80173ae:	0013      	movs	r3, r2
 80173b0:	011b      	lsls	r3, r3, #4
 80173b2:	1a9b      	subs	r3, r3, r2
 80173b4:	009b      	lsls	r3, r3, #2
 80173b6:	585b      	ldr	r3, [r3, r1]
 80173b8:	2280      	movs	r2, #128	@ 0x80
 80173ba:	0052      	lsls	r2, r2, #1
 80173bc:	0011      	movs	r1, r2
 80173be:	0018      	movs	r0, r3
 80173c0:	f7ff f944 	bl	801664c <LL_UCPD_SetRpResistor>
}
 80173c4:	46c0      	nop			@ (mov r8, r8)
 80173c6:	46bd      	mov	sp, r7
 80173c8:	b002      	add	sp, #8
 80173ca:	bd80      	pop	{r7, pc}
 80173cc:	200117d4 	.word	0x200117d4

080173d0 <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b082      	sub	sp, #8
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	0002      	movs	r2, r0
 80173d8:	1dfb      	adds	r3, r7, #7
 80173da:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 80173dc:	1dfb      	adds	r3, r7, #7
 80173de:	781a      	ldrb	r2, [r3, #0]
 80173e0:	4907      	ldr	r1, [pc, #28]	@ (8017400 <USBPD_HW_IF_SetResistor_SinkTxOK+0x30>)
 80173e2:	0013      	movs	r3, r2
 80173e4:	011b      	lsls	r3, r3, #4
 80173e6:	1a9b      	subs	r3, r3, r2
 80173e8:	009b      	lsls	r3, r3, #2
 80173ea:	585b      	ldr	r3, [r3, r1]
 80173ec:	22c0      	movs	r2, #192	@ 0xc0
 80173ee:	0052      	lsls	r2, r2, #1
 80173f0:	0011      	movs	r1, r2
 80173f2:	0018      	movs	r0, r3
 80173f4:	f7ff f92a 	bl	801664c <LL_UCPD_SetRpResistor>
}
 80173f8:	46c0      	nop			@ (mov r8, r8)
 80173fa:	46bd      	mov	sp, r7
 80173fc:	b002      	add	sp, #8
 80173fe:	bd80      	pop	{r7, pc}
 8017400:	200117d4 	.word	0x200117d4

08017404 <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b082      	sub	sp, #8
 8017408:	af00      	add	r7, sp, #0
 801740a:	0002      	movs	r2, r0
 801740c:	1dfb      	adds	r3, r7, #7
 801740e:	701a      	strb	r2, [r3, #0]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 8017410:	1dfb      	adds	r3, r7, #7
 8017412:	781a      	ldrb	r2, [r3, #0]
 8017414:	491c      	ldr	r1, [pc, #112]	@ (8017488 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8017416:	0013      	movs	r3, r2
 8017418:	011b      	lsls	r3, r3, #4
 801741a:	1a9b      	subs	r3, r3, r2
 801741c:	009b      	lsls	r3, r3, #2
 801741e:	18cb      	adds	r3, r1, r3
 8017420:	3334      	adds	r3, #52	@ 0x34
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	2b01      	cmp	r3, #1
 8017426:	d002      	beq.n	801742e <USBPD_HW_IF_IsResistor_SinkTxOk+0x2a>
 8017428:	2b02      	cmp	r3, #2
 801742a:	d012      	beq.n	8017452 <USBPD_HW_IF_IsResistor_SinkTxOk+0x4e>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 801742c:	e026      	b.n	801747c <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 801742e:	1dfb      	adds	r3, r7, #7
 8017430:	781a      	ldrb	r2, [r3, #0]
 8017432:	4915      	ldr	r1, [pc, #84]	@ (8017488 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8017434:	0013      	movs	r3, r2
 8017436:	011b      	lsls	r3, r3, #4
 8017438:	1a9b      	subs	r3, r3, r2
 801743a:	009b      	lsls	r3, r3, #2
 801743c:	585b      	ldr	r3, [r3, r1]
 801743e:	695a      	ldr	r2, [r3, #20]
 8017440:	23c0      	movs	r3, #192	@ 0xc0
 8017442:	029b      	lsls	r3, r3, #10
 8017444:	401a      	ands	r2, r3
 8017446:	23c0      	movs	r3, #192	@ 0xc0
 8017448:	029b      	lsls	r3, r3, #10
 801744a:	429a      	cmp	r2, r3
 801744c:	d113      	bne.n	8017476 <USBPD_HW_IF_IsResistor_SinkTxOk+0x72>
        return USBPD_TRUE;
 801744e:	2301      	movs	r3, #1
 8017450:	e015      	b.n	801747e <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 8017452:	1dfb      	adds	r3, r7, #7
 8017454:	781a      	ldrb	r2, [r3, #0]
 8017456:	490c      	ldr	r1, [pc, #48]	@ (8017488 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8017458:	0013      	movs	r3, r2
 801745a:	011b      	lsls	r3, r3, #4
 801745c:	1a9b      	subs	r3, r3, r2
 801745e:	009b      	lsls	r3, r3, #2
 8017460:	585b      	ldr	r3, [r3, r1]
 8017462:	695a      	ldr	r2, [r3, #20]
 8017464:	23c0      	movs	r3, #192	@ 0xc0
 8017466:	031b      	lsls	r3, r3, #12
 8017468:	401a      	ands	r2, r3
 801746a:	23c0      	movs	r3, #192	@ 0xc0
 801746c:	031b      	lsls	r3, r3, #12
 801746e:	429a      	cmp	r2, r3
 8017470:	d103      	bne.n	801747a <USBPD_HW_IF_IsResistor_SinkTxOk+0x76>
        return USBPD_TRUE;
 8017472:	2301      	movs	r3, #1
 8017474:	e003      	b.n	801747e <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      break;
 8017476:	46c0      	nop			@ (mov r8, r8)
 8017478:	e000      	b.n	801747c <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      break;
 801747a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBPD_FALSE;
 801747c:	2300      	movs	r3, #0
}
 801747e:	0018      	movs	r0, r3
 8017480:	46bd      	mov	sp, r7
 8017482:	b002      	add	sp, #8
 8017484:	bd80      	pop	{r7, pc}
 8017486:	46c0      	nop			@ (mov r8, r8)
 8017488:	200117d4 	.word	0x200117d4

0801748c <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b082      	sub	sp, #8
 8017490:	af00      	add	r7, sp, #0
 8017492:	0002      	movs	r2, r0
 8017494:	1dfb      	adds	r3, r7, #7
 8017496:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 8017498:	1dfb      	adds	r3, r7, #7
 801749a:	781a      	ldrb	r2, [r3, #0]
 801749c:	4906      	ldr	r1, [pc, #24]	@ (80174b8 <USBPD_HW_IF_FastRoleSwapSignalling+0x2c>)
 801749e:	0013      	movs	r3, r2
 80174a0:	011b      	lsls	r3, r3, #4
 80174a2:	1a9b      	subs	r3, r3, r2
 80174a4:	009b      	lsls	r3, r3, #2
 80174a6:	585b      	ldr	r3, [r3, r1]
 80174a8:	0018      	movs	r0, r3
 80174aa:	f7ff f86c 	bl	8016586 <LL_UCPD_SignalFRSTX>
}
 80174ae:	46c0      	nop			@ (mov r8, r8)
 80174b0:	46bd      	mov	sp, r7
 80174b2:	b002      	add	sp, #8
 80174b4:	bd80      	pop	{r7, pc}
 80174b6:	46c0      	nop			@ (mov r8, r8)
 80174b8:	200117d4 	.word	0x200117d4

080174bc <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b084      	sub	sp, #16
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	0002      	movs	r2, r0
 80174c4:	1dfb      	adds	r3, r7, #7
 80174c6:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 80174c8:	1dfb      	adds	r3, r7, #7
 80174ca:	781b      	ldrb	r3, [r3, #0]
 80174cc:	220c      	movs	r2, #12
 80174ce:	18ba      	adds	r2, r7, r2
 80174d0:	0011      	movs	r1, r2
 80174d2:	0018      	movs	r0, r3
 80174d4:	f006 faa9 	bl	801da2a <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	b29b      	uxth	r3, r3
}
 80174dc:	0018      	movs	r0, r3
 80174de:	46bd      	mov	sp, r7
 80174e0:	b004      	add	sp, #16
 80174e2:	bd80      	pop	{r7, pc}

080174e4 <LL_APB1_GRP1_EnableClock>:
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b084      	sub	sp, #16
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 80174ec:	4b07      	ldr	r3, [pc, #28]	@ (801750c <LL_APB1_GRP1_EnableClock+0x28>)
 80174ee:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80174f0:	4b06      	ldr	r3, [pc, #24]	@ (801750c <LL_APB1_GRP1_EnableClock+0x28>)
 80174f2:	687a      	ldr	r2, [r7, #4]
 80174f4:	430a      	orrs	r2, r1
 80174f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80174f8:	4b04      	ldr	r3, [pc, #16]	@ (801750c <LL_APB1_GRP1_EnableClock+0x28>)
 80174fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174fc:	687a      	ldr	r2, [r7, #4]
 80174fe:	4013      	ands	r3, r2
 8017500:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8017502:	68fb      	ldr	r3, [r7, #12]
}
 8017504:	46c0      	nop			@ (mov r8, r8)
 8017506:	46bd      	mov	sp, r7
 8017508:	b004      	add	sp, #16
 801750a:	bd80      	pop	{r7, pc}
 801750c:	40021000 	.word	0x40021000

08017510 <LL_APB1_GRP1_DisableClock>:
{
 8017510:	b580      	push	{r7, lr}
 8017512:	b082      	sub	sp, #8
 8017514:	af00      	add	r7, sp, #0
 8017516:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR1, Periphs);
 8017518:	4b05      	ldr	r3, [pc, #20]	@ (8017530 <LL_APB1_GRP1_DisableClock+0x20>)
 801751a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	43d9      	mvns	r1, r3
 8017520:	4b03      	ldr	r3, [pc, #12]	@ (8017530 <LL_APB1_GRP1_DisableClock+0x20>)
 8017522:	400a      	ands	r2, r1
 8017524:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8017526:	46c0      	nop			@ (mov r8, r8)
 8017528:	46bd      	mov	sp, r7
 801752a:	b002      	add	sp, #8
 801752c:	bd80      	pop	{r7, pc}
 801752e:	46c0      	nop			@ (mov r8, r8)
 8017530:	40021000 	.word	0x40021000

08017534 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b082      	sub	sp, #8
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	2201      	movs	r2, #1
 8017542:	431a      	orrs	r2, r3
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	601a      	str	r2, [r3, #0]
}
 8017548:	46c0      	nop			@ (mov r8, r8)
 801754a:	46bd      	mov	sp, r7
 801754c:	b002      	add	sp, #8
 801754e:	bd80      	pop	{r7, pc}

08017550 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8017550:	b580      	push	{r7, lr}
 8017552:	b082      	sub	sp, #8
 8017554:	af00      	add	r7, sp, #0
 8017556:	6078      	str	r0, [r7, #4]
 8017558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	2270      	movs	r2, #112	@ 0x70
 8017560:	4393      	bics	r3, r2
 8017562:	001a      	movs	r2, r3
 8017564:	683b      	ldr	r3, [r7, #0]
 8017566:	431a      	orrs	r2, r3
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	601a      	str	r2, [r3, #0]
}
 801756c:	46c0      	nop			@ (mov r8, r8)
 801756e:	46bd      	mov	sp, r7
 8017570:	b002      	add	sp, #8
 8017572:	bd80      	pop	{r7, pc}

08017574 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8017574:	b580      	push	{r7, lr}
 8017576:	b082      	sub	sp, #8
 8017578:	af00      	add	r7, sp, #0
 801757a:	6078      	str	r0, [r7, #4]
 801757c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	683a      	ldr	r2, [r7, #0]
 8017582:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8017584:	46c0      	nop			@ (mov r8, r8)
 8017586:	46bd      	mov	sp, r7
 8017588:	b002      	add	sp, #8
 801758a:	bd80      	pop	{r7, pc}

0801758c <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b082      	sub	sp, #8
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8017598:	0018      	movs	r0, r3
 801759a:	46bd      	mov	sp, r7
 801759c:	b002      	add	sp, #8
 801759e:	bd80      	pop	{r7, pc}

080175a0 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b082      	sub	sp, #8
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
 80175a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	683a      	ldr	r2, [r7, #0]
 80175ae:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80175b0:	46c0      	nop			@ (mov r8, r8)
 80175b2:	46bd      	mov	sp, r7
 80175b4:	b002      	add	sp, #8
 80175b6:	bd80      	pop	{r7, pc}

080175b8 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b086      	sub	sp, #24
 80175bc:	af00      	add	r7, sp, #0
 80175be:	60f8      	str	r0, [r7, #12]
 80175c0:	60b9      	str	r1, [r7, #8]
 80175c2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80175c4:	68bb      	ldr	r3, [r7, #8]
 80175c6:	2b01      	cmp	r3, #1
 80175c8:	d02c      	beq.n	8017624 <LL_TIM_OC_SetMode+0x6c>
 80175ca:	68bb      	ldr	r3, [r7, #8]
 80175cc:	2b04      	cmp	r3, #4
 80175ce:	d027      	beq.n	8017620 <LL_TIM_OC_SetMode+0x68>
 80175d0:	68bb      	ldr	r3, [r7, #8]
 80175d2:	2b10      	cmp	r3, #16
 80175d4:	d022      	beq.n	801761c <LL_TIM_OC_SetMode+0x64>
 80175d6:	68bb      	ldr	r3, [r7, #8]
 80175d8:	2b40      	cmp	r3, #64	@ 0x40
 80175da:	d01d      	beq.n	8017618 <LL_TIM_OC_SetMode+0x60>
 80175dc:	68ba      	ldr	r2, [r7, #8]
 80175de:	2380      	movs	r3, #128	@ 0x80
 80175e0:	005b      	lsls	r3, r3, #1
 80175e2:	429a      	cmp	r2, r3
 80175e4:	d016      	beq.n	8017614 <LL_TIM_OC_SetMode+0x5c>
 80175e6:	68ba      	ldr	r2, [r7, #8]
 80175e8:	2380      	movs	r3, #128	@ 0x80
 80175ea:	00db      	lsls	r3, r3, #3
 80175ec:	429a      	cmp	r2, r3
 80175ee:	d00f      	beq.n	8017610 <LL_TIM_OC_SetMode+0x58>
 80175f0:	68ba      	ldr	r2, [r7, #8]
 80175f2:	2380      	movs	r3, #128	@ 0x80
 80175f4:	015b      	lsls	r3, r3, #5
 80175f6:	429a      	cmp	r2, r3
 80175f8:	d008      	beq.n	801760c <LL_TIM_OC_SetMode+0x54>
 80175fa:	68ba      	ldr	r2, [r7, #8]
 80175fc:	2380      	movs	r3, #128	@ 0x80
 80175fe:	025b      	lsls	r3, r3, #9
 8017600:	429a      	cmp	r2, r3
 8017602:	d101      	bne.n	8017608 <LL_TIM_OC_SetMode+0x50>
 8017604:	2307      	movs	r3, #7
 8017606:	e00e      	b.n	8017626 <LL_TIM_OC_SetMode+0x6e>
 8017608:	2308      	movs	r3, #8
 801760a:	e00c      	b.n	8017626 <LL_TIM_OC_SetMode+0x6e>
 801760c:	2306      	movs	r3, #6
 801760e:	e00a      	b.n	8017626 <LL_TIM_OC_SetMode+0x6e>
 8017610:	2305      	movs	r3, #5
 8017612:	e008      	b.n	8017626 <LL_TIM_OC_SetMode+0x6e>
 8017614:	2304      	movs	r3, #4
 8017616:	e006      	b.n	8017626 <LL_TIM_OC_SetMode+0x6e>
 8017618:	2303      	movs	r3, #3
 801761a:	e004      	b.n	8017626 <LL_TIM_OC_SetMode+0x6e>
 801761c:	2302      	movs	r3, #2
 801761e:	e002      	b.n	8017626 <LL_TIM_OC_SetMode+0x6e>
 8017620:	2301      	movs	r3, #1
 8017622:	e000      	b.n	8017626 <LL_TIM_OC_SetMode+0x6e>
 8017624:	2300      	movs	r3, #0
 8017626:	2017      	movs	r0, #23
 8017628:	183a      	adds	r2, r7, r0
 801762a:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	3318      	adds	r3, #24
 8017630:	0019      	movs	r1, r3
 8017632:	183b      	adds	r3, r7, r0
 8017634:	781b      	ldrb	r3, [r3, #0]
 8017636:	4a0e      	ldr	r2, [pc, #56]	@ (8017670 <LL_TIM_OC_SetMode+0xb8>)
 8017638:	5cd3      	ldrb	r3, [r2, r3]
 801763a:	18cb      	adds	r3, r1, r3
 801763c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 801763e:	693b      	ldr	r3, [r7, #16]
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	183a      	adds	r2, r7, r0
 8017644:	7812      	ldrb	r2, [r2, #0]
 8017646:	490b      	ldr	r1, [pc, #44]	@ (8017674 <LL_TIM_OC_SetMode+0xbc>)
 8017648:	5c8a      	ldrb	r2, [r1, r2]
 801764a:	0011      	movs	r1, r2
 801764c:	4a0a      	ldr	r2, [pc, #40]	@ (8017678 <LL_TIM_OC_SetMode+0xc0>)
 801764e:	408a      	lsls	r2, r1
 8017650:	43d2      	mvns	r2, r2
 8017652:	401a      	ands	r2, r3
 8017654:	183b      	adds	r3, r7, r0
 8017656:	781b      	ldrb	r3, [r3, #0]
 8017658:	4906      	ldr	r1, [pc, #24]	@ (8017674 <LL_TIM_OC_SetMode+0xbc>)
 801765a:	5ccb      	ldrb	r3, [r1, r3]
 801765c:	0019      	movs	r1, r3
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	408b      	lsls	r3, r1
 8017662:	431a      	orrs	r2, r3
 8017664:	693b      	ldr	r3, [r7, #16]
 8017666:	601a      	str	r2, [r3, #0]
}
 8017668:	46c0      	nop			@ (mov r8, r8)
 801766a:	46bd      	mov	sp, r7
 801766c:	b006      	add	sp, #24
 801766e:	bd80      	pop	{r7, pc}
 8017670:	0801f1d8 	.word	0x0801f1d8
 8017674:	0801f1e4 	.word	0x0801f1e4
 8017678:	00010073 	.word	0x00010073

0801767c <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b086      	sub	sp, #24
 8017680:	af00      	add	r7, sp, #0
 8017682:	60f8      	str	r0, [r7, #12]
 8017684:	60b9      	str	r1, [r7, #8]
 8017686:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8017688:	68bb      	ldr	r3, [r7, #8]
 801768a:	2b01      	cmp	r3, #1
 801768c:	d02c      	beq.n	80176e8 <LL_TIM_OC_SetPolarity+0x6c>
 801768e:	68bb      	ldr	r3, [r7, #8]
 8017690:	2b04      	cmp	r3, #4
 8017692:	d027      	beq.n	80176e4 <LL_TIM_OC_SetPolarity+0x68>
 8017694:	68bb      	ldr	r3, [r7, #8]
 8017696:	2b10      	cmp	r3, #16
 8017698:	d022      	beq.n	80176e0 <LL_TIM_OC_SetPolarity+0x64>
 801769a:	68bb      	ldr	r3, [r7, #8]
 801769c:	2b40      	cmp	r3, #64	@ 0x40
 801769e:	d01d      	beq.n	80176dc <LL_TIM_OC_SetPolarity+0x60>
 80176a0:	68ba      	ldr	r2, [r7, #8]
 80176a2:	2380      	movs	r3, #128	@ 0x80
 80176a4:	005b      	lsls	r3, r3, #1
 80176a6:	429a      	cmp	r2, r3
 80176a8:	d016      	beq.n	80176d8 <LL_TIM_OC_SetPolarity+0x5c>
 80176aa:	68ba      	ldr	r2, [r7, #8]
 80176ac:	2380      	movs	r3, #128	@ 0x80
 80176ae:	00db      	lsls	r3, r3, #3
 80176b0:	429a      	cmp	r2, r3
 80176b2:	d00f      	beq.n	80176d4 <LL_TIM_OC_SetPolarity+0x58>
 80176b4:	68ba      	ldr	r2, [r7, #8]
 80176b6:	2380      	movs	r3, #128	@ 0x80
 80176b8:	015b      	lsls	r3, r3, #5
 80176ba:	429a      	cmp	r2, r3
 80176bc:	d008      	beq.n	80176d0 <LL_TIM_OC_SetPolarity+0x54>
 80176be:	68ba      	ldr	r2, [r7, #8]
 80176c0:	2380      	movs	r3, #128	@ 0x80
 80176c2:	025b      	lsls	r3, r3, #9
 80176c4:	429a      	cmp	r2, r3
 80176c6:	d101      	bne.n	80176cc <LL_TIM_OC_SetPolarity+0x50>
 80176c8:	2307      	movs	r3, #7
 80176ca:	e00e      	b.n	80176ea <LL_TIM_OC_SetPolarity+0x6e>
 80176cc:	2308      	movs	r3, #8
 80176ce:	e00c      	b.n	80176ea <LL_TIM_OC_SetPolarity+0x6e>
 80176d0:	2306      	movs	r3, #6
 80176d2:	e00a      	b.n	80176ea <LL_TIM_OC_SetPolarity+0x6e>
 80176d4:	2305      	movs	r3, #5
 80176d6:	e008      	b.n	80176ea <LL_TIM_OC_SetPolarity+0x6e>
 80176d8:	2304      	movs	r3, #4
 80176da:	e006      	b.n	80176ea <LL_TIM_OC_SetPolarity+0x6e>
 80176dc:	2303      	movs	r3, #3
 80176de:	e004      	b.n	80176ea <LL_TIM_OC_SetPolarity+0x6e>
 80176e0:	2302      	movs	r3, #2
 80176e2:	e002      	b.n	80176ea <LL_TIM_OC_SetPolarity+0x6e>
 80176e4:	2301      	movs	r3, #1
 80176e6:	e000      	b.n	80176ea <LL_TIM_OC_SetPolarity+0x6e>
 80176e8:	2300      	movs	r3, #0
 80176ea:	2017      	movs	r0, #23
 80176ec:	183a      	adds	r2, r7, r0
 80176ee:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	6a1b      	ldr	r3, [r3, #32]
 80176f4:	183a      	adds	r2, r7, r0
 80176f6:	7812      	ldrb	r2, [r2, #0]
 80176f8:	490a      	ldr	r1, [pc, #40]	@ (8017724 <LL_TIM_OC_SetPolarity+0xa8>)
 80176fa:	5c8a      	ldrb	r2, [r1, r2]
 80176fc:	0011      	movs	r1, r2
 80176fe:	2202      	movs	r2, #2
 8017700:	408a      	lsls	r2, r1
 8017702:	43d2      	mvns	r2, r2
 8017704:	401a      	ands	r2, r3
 8017706:	183b      	adds	r3, r7, r0
 8017708:	781b      	ldrb	r3, [r3, #0]
 801770a:	4906      	ldr	r1, [pc, #24]	@ (8017724 <LL_TIM_OC_SetPolarity+0xa8>)
 801770c:	5ccb      	ldrb	r3, [r1, r3]
 801770e:	0019      	movs	r1, r3
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	408b      	lsls	r3, r1
 8017714:	431a      	orrs	r2, r3
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	621a      	str	r2, [r3, #32]
}
 801771a:	46c0      	nop			@ (mov r8, r8)
 801771c:	46bd      	mov	sp, r7
 801771e:	b006      	add	sp, #24
 8017720:	bd80      	pop	{r7, pc}
 8017722:	46c0      	nop			@ (mov r8, r8)
 8017724:	0801f1f0 	.word	0x0801f1f0

08017728 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b082      	sub	sp, #8
 801772c:	af00      	add	r7, sp, #0
 801772e:	6078      	str	r0, [r7, #4]
 8017730:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	683a      	ldr	r2, [r7, #0]
 8017736:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8017738:	46c0      	nop			@ (mov r8, r8)
 801773a:	46bd      	mov	sp, r7
 801773c:	b002      	add	sp, #8
 801773e:	bd80      	pop	{r7, pc}

08017740 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8017740:	b580      	push	{r7, lr}
 8017742:	b082      	sub	sp, #8
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]
 8017748:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	683a      	ldr	r2, [r7, #0]
 801774e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8017750:	46c0      	nop			@ (mov r8, r8)
 8017752:	46bd      	mov	sp, r7
 8017754:	b002      	add	sp, #8
 8017756:	bd80      	pop	{r7, pc}

08017758 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b082      	sub	sp, #8
 801775c:	af00      	add	r7, sp, #0
 801775e:	6078      	str	r0, [r7, #4]
 8017760:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	683a      	ldr	r2, [r7, #0]
 8017766:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8017768:	46c0      	nop			@ (mov r8, r8)
 801776a:	46bd      	mov	sp, r7
 801776c:	b002      	add	sp, #8
 801776e:	bd80      	pop	{r7, pc}

08017770 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8017770:	b580      	push	{r7, lr}
 8017772:	b082      	sub	sp, #8
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
 8017778:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	683a      	ldr	r2, [r7, #0]
 801777e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8017780:	46c0      	nop			@ (mov r8, r8)
 8017782:	46bd      	mov	sp, r7
 8017784:	b002      	add	sp, #8
 8017786:	bd80      	pop	{r7, pc}

08017788 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8017788:	b580      	push	{r7, lr}
 801778a:	b082      	sub	sp, #8
 801778c:	af00      	add	r7, sp, #0
 801778e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	2203      	movs	r2, #3
 8017794:	4252      	negs	r2, r2
 8017796:	611a      	str	r2, [r3, #16]
}
 8017798:	46c0      	nop			@ (mov r8, r8)
 801779a:	46bd      	mov	sp, r7
 801779c:	b002      	add	sp, #8
 801779e:	bd80      	pop	{r7, pc}

080177a0 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 80177a0:	b580      	push	{r7, lr}
 80177a2:	b082      	sub	sp, #8
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	691b      	ldr	r3, [r3, #16]
 80177ac:	2202      	movs	r2, #2
 80177ae:	4013      	ands	r3, r2
 80177b0:	2b02      	cmp	r3, #2
 80177b2:	d101      	bne.n	80177b8 <LL_TIM_IsActiveFlag_CC1+0x18>
 80177b4:	2301      	movs	r3, #1
 80177b6:	e000      	b.n	80177ba <LL_TIM_IsActiveFlag_CC1+0x1a>
 80177b8:	2300      	movs	r3, #0
}
 80177ba:	0018      	movs	r0, r3
 80177bc:	46bd      	mov	sp, r7
 80177be:	b002      	add	sp, #8
 80177c0:	bd80      	pop	{r7, pc}

080177c2 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 80177c2:	b580      	push	{r7, lr}
 80177c4:	b082      	sub	sp, #8
 80177c6:	af00      	add	r7, sp, #0
 80177c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	2205      	movs	r2, #5
 80177ce:	4252      	negs	r2, r2
 80177d0:	611a      	str	r2, [r3, #16]
}
 80177d2:	46c0      	nop			@ (mov r8, r8)
 80177d4:	46bd      	mov	sp, r7
 80177d6:	b002      	add	sp, #8
 80177d8:	bd80      	pop	{r7, pc}

080177da <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 80177da:	b580      	push	{r7, lr}
 80177dc:	b082      	sub	sp, #8
 80177de:	af00      	add	r7, sp, #0
 80177e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	691b      	ldr	r3, [r3, #16]
 80177e6:	2204      	movs	r2, #4
 80177e8:	4013      	ands	r3, r2
 80177ea:	2b04      	cmp	r3, #4
 80177ec:	d101      	bne.n	80177f2 <LL_TIM_IsActiveFlag_CC2+0x18>
 80177ee:	2301      	movs	r3, #1
 80177f0:	e000      	b.n	80177f4 <LL_TIM_IsActiveFlag_CC2+0x1a>
 80177f2:	2300      	movs	r3, #0
}
 80177f4:	0018      	movs	r0, r3
 80177f6:	46bd      	mov	sp, r7
 80177f8:	b002      	add	sp, #8
 80177fa:	bd80      	pop	{r7, pc}

080177fc <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 80177fc:	b580      	push	{r7, lr}
 80177fe:	b082      	sub	sp, #8
 8017800:	af00      	add	r7, sp, #0
 8017802:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	2209      	movs	r2, #9
 8017808:	4252      	negs	r2, r2
 801780a:	611a      	str	r2, [r3, #16]
}
 801780c:	46c0      	nop			@ (mov r8, r8)
 801780e:	46bd      	mov	sp, r7
 8017810:	b002      	add	sp, #8
 8017812:	bd80      	pop	{r7, pc}

08017814 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 8017814:	b580      	push	{r7, lr}
 8017816:	b082      	sub	sp, #8
 8017818:	af00      	add	r7, sp, #0
 801781a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	691b      	ldr	r3, [r3, #16]
 8017820:	2208      	movs	r2, #8
 8017822:	4013      	ands	r3, r2
 8017824:	2b08      	cmp	r3, #8
 8017826:	d101      	bne.n	801782c <LL_TIM_IsActiveFlag_CC3+0x18>
 8017828:	2301      	movs	r3, #1
 801782a:	e000      	b.n	801782e <LL_TIM_IsActiveFlag_CC3+0x1a>
 801782c:	2300      	movs	r3, #0
}
 801782e:	0018      	movs	r0, r3
 8017830:	46bd      	mov	sp, r7
 8017832:	b002      	add	sp, #8
 8017834:	bd80      	pop	{r7, pc}

08017836 <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 8017836:	b580      	push	{r7, lr}
 8017838:	b082      	sub	sp, #8
 801783a:	af00      	add	r7, sp, #0
 801783c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	2211      	movs	r2, #17
 8017842:	4252      	negs	r2, r2
 8017844:	611a      	str	r2, [r3, #16]
}
 8017846:	46c0      	nop			@ (mov r8, r8)
 8017848:	46bd      	mov	sp, r7
 801784a:	b002      	add	sp, #8
 801784c:	bd80      	pop	{r7, pc}

0801784e <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 801784e:	b580      	push	{r7, lr}
 8017850:	b082      	sub	sp, #8
 8017852:	af00      	add	r7, sp, #0
 8017854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	691b      	ldr	r3, [r3, #16]
 801785a:	2210      	movs	r2, #16
 801785c:	4013      	ands	r3, r2
 801785e:	2b10      	cmp	r3, #16
 8017860:	d101      	bne.n	8017866 <LL_TIM_IsActiveFlag_CC4+0x18>
 8017862:	2301      	movs	r3, #1
 8017864:	e000      	b.n	8017868 <LL_TIM_IsActiveFlag_CC4+0x1a>
 8017866:	2300      	movs	r3, #0
}
 8017868:	0018      	movs	r0, r3
 801786a:	46bd      	mov	sp, r7
 801786c:	b002      	add	sp, #8
 801786e:	bd80      	pop	{r7, pc}

08017870 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8017870:	b5b0      	push	{r4, r5, r7, lr}
 8017872:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 8017874:	4b47      	ldr	r3, [pc, #284]	@ (8017994 <USBPD_TIM_Init+0x124>)
 8017876:	781b      	ldrb	r3, [r3, #0]
 8017878:	b25b      	sxtb	r3, r3
 801787a:	2b00      	cmp	r3, #0
 801787c:	d000      	beq.n	8017880 <USBPD_TIM_Init+0x10>
 801787e:	e07c      	b.n	801797a <USBPD_TIM_Init+0x10a>
  {
    TIMX_CLK_ENABLE;
 8017880:	2002      	movs	r0, #2
 8017882:	f7ff fe2f 	bl	80174e4 <LL_APB1_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 8017886:	4b44      	ldr	r3, [pc, #272]	@ (8017998 <USBPD_TIM_Init+0x128>)
 8017888:	2100      	movs	r1, #0
 801788a:	0018      	movs	r0, r3
 801788c:	f7ff fe60 	bl	8017550 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 8017890:	4b42      	ldr	r3, [pc, #264]	@ (801799c <USBPD_TIM_Init+0x12c>)
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	4a42      	ldr	r2, [pc, #264]	@ (80179a0 <USBPD_TIM_Init+0x130>)
 8017896:	4293      	cmp	r3, r2
 8017898:	d90b      	bls.n	80178b2 <USBPD_TIM_Init+0x42>
 801789a:	4b40      	ldr	r3, [pc, #256]	@ (801799c <USBPD_TIM_Init+0x12c>)
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	4a41      	ldr	r2, [pc, #260]	@ (80179a4 <USBPD_TIM_Init+0x134>)
 80178a0:	4694      	mov	ip, r2
 80178a2:	4463      	add	r3, ip
 80178a4:	4940      	ldr	r1, [pc, #256]	@ (80179a8 <USBPD_TIM_Init+0x138>)
 80178a6:	0018      	movs	r0, r3
 80178a8:	f7ee fdcc 	bl	8006444 <__udivsi3>
 80178ac:	0003      	movs	r3, r0
 80178ae:	3b01      	subs	r3, #1
 80178b0:	e000      	b.n	80178b4 <USBPD_TIM_Init+0x44>
 80178b2:	2300      	movs	r3, #0
 80178b4:	4a38      	ldr	r2, [pc, #224]	@ (8017998 <USBPD_TIM_Init+0x128>)
 80178b6:	0019      	movs	r1, r3
 80178b8:	0010      	movs	r0, r2
 80178ba:	f7ff fe5b 	bl	8017574 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 80178be:	4b37      	ldr	r3, [pc, #220]	@ (801799c <USBPD_TIM_Init+0x12c>)
 80178c0:	681c      	ldr	r4, [r3, #0]
 80178c2:	4b35      	ldr	r3, [pc, #212]	@ (8017998 <USBPD_TIM_Init+0x128>)
 80178c4:	0018      	movs	r0, r3
 80178c6:	f7ff fe61 	bl	801758c <LL_TIM_GetPrescaler>
 80178ca:	0003      	movs	r3, r0
 80178cc:	3301      	adds	r3, #1
 80178ce:	0019      	movs	r1, r3
 80178d0:	0020      	movs	r0, r4
 80178d2:	f7ee fdb7 	bl	8006444 <__udivsi3>
 80178d6:	0003      	movs	r3, r0
 80178d8:	2b63      	cmp	r3, #99	@ 0x63
 80178da:	d910      	bls.n	80178fe <USBPD_TIM_Init+0x8e>
 80178dc:	4b2f      	ldr	r3, [pc, #188]	@ (801799c <USBPD_TIM_Init+0x12c>)
 80178de:	681c      	ldr	r4, [r3, #0]
 80178e0:	4b2d      	ldr	r3, [pc, #180]	@ (8017998 <USBPD_TIM_Init+0x128>)
 80178e2:	0018      	movs	r0, r3
 80178e4:	f7ff fe52 	bl	801758c <LL_TIM_GetPrescaler>
 80178e8:	0003      	movs	r3, r0
 80178ea:	3301      	adds	r3, #1
 80178ec:	2264      	movs	r2, #100	@ 0x64
 80178ee:	4353      	muls	r3, r2
 80178f0:	0019      	movs	r1, r3
 80178f2:	0020      	movs	r0, r4
 80178f4:	f7ee fda6 	bl	8006444 <__udivsi3>
 80178f8:	0003      	movs	r3, r0
 80178fa:	3b01      	subs	r3, #1
 80178fc:	e000      	b.n	8017900 <USBPD_TIM_Init+0x90>
 80178fe:	2300      	movs	r3, #0
 8017900:	4a25      	ldr	r2, [pc, #148]	@ (8017998 <USBPD_TIM_Init+0x128>)
 8017902:	0019      	movs	r1, r3
 8017904:	0010      	movs	r0, r2
 8017906:	f7ff fe4b 	bl	80175a0 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 801790a:	4b23      	ldr	r3, [pc, #140]	@ (8017998 <USBPD_TIM_Init+0x128>)
 801790c:	2230      	movs	r2, #48	@ 0x30
 801790e:	2101      	movs	r1, #1
 8017910:	0018      	movs	r0, r3
 8017912:	f7ff fe51 	bl	80175b8 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 8017916:	4b20      	ldr	r3, [pc, #128]	@ (8017998 <USBPD_TIM_Init+0x128>)
 8017918:	2230      	movs	r2, #48	@ 0x30
 801791a:	2110      	movs	r1, #16
 801791c:	0018      	movs	r0, r3
 801791e:	f7ff fe4b 	bl	80175b8 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 8017922:	2380      	movs	r3, #128	@ 0x80
 8017924:	005b      	lsls	r3, r3, #1
 8017926:	481c      	ldr	r0, [pc, #112]	@ (8017998 <USBPD_TIM_Init+0x128>)
 8017928:	2230      	movs	r2, #48	@ 0x30
 801792a:	0019      	movs	r1, r3
 801792c:	f7ff fe44 	bl	80175b8 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 8017930:	2380      	movs	r3, #128	@ 0x80
 8017932:	015b      	lsls	r3, r3, #5
 8017934:	4818      	ldr	r0, [pc, #96]	@ (8017998 <USBPD_TIM_Init+0x128>)
 8017936:	2230      	movs	r2, #48	@ 0x30
 8017938:	0019      	movs	r1, r3
 801793a:	f7ff fe3d 	bl	80175b8 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 801793e:	4b16      	ldr	r3, [pc, #88]	@ (8017998 <USBPD_TIM_Init+0x128>)
 8017940:	2200      	movs	r2, #0
 8017942:	2101      	movs	r1, #1
 8017944:	0018      	movs	r0, r3
 8017946:	f7ff fe99 	bl	801767c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 801794a:	4b13      	ldr	r3, [pc, #76]	@ (8017998 <USBPD_TIM_Init+0x128>)
 801794c:	2200      	movs	r2, #0
 801794e:	2110      	movs	r1, #16
 8017950:	0018      	movs	r0, r3
 8017952:	f7ff fe93 	bl	801767c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 8017956:	2380      	movs	r3, #128	@ 0x80
 8017958:	005b      	lsls	r3, r3, #1
 801795a:	480f      	ldr	r0, [pc, #60]	@ (8017998 <USBPD_TIM_Init+0x128>)
 801795c:	2200      	movs	r2, #0
 801795e:	0019      	movs	r1, r3
 8017960:	f7ff fe8c 	bl	801767c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 8017964:	2380      	movs	r3, #128	@ 0x80
 8017966:	015b      	lsls	r3, r3, #5
 8017968:	480b      	ldr	r0, [pc, #44]	@ (8017998 <USBPD_TIM_Init+0x128>)
 801796a:	2200      	movs	r2, #0
 801796c:	0019      	movs	r1, r3
 801796e:	f7ff fe85 	bl	801767c <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 8017972:	4b09      	ldr	r3, [pc, #36]	@ (8017998 <USBPD_TIM_Init+0x128>)
 8017974:	0018      	movs	r0, r3
 8017976:	f7ff fddd 	bl	8017534 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 801797a:	4b06      	ldr	r3, [pc, #24]	@ (8017994 <USBPD_TIM_Init+0x124>)
 801797c:	781b      	ldrb	r3, [r3, #0]
 801797e:	b25b      	sxtb	r3, r3
 8017980:	b2db      	uxtb	r3, r3
 8017982:	3301      	adds	r3, #1
 8017984:	b2db      	uxtb	r3, r3
 8017986:	b25a      	sxtb	r2, r3
 8017988:	4b02      	ldr	r3, [pc, #8]	@ (8017994 <USBPD_TIM_Init+0x124>)
 801798a:	701a      	strb	r2, [r3, #0]
}
 801798c:	46c0      	nop			@ (mov r8, r8)
 801798e:	46bd      	mov	sp, r7
 8017990:	bdb0      	pop	{r4, r5, r7, pc}
 8017992:	46c0      	nop			@ (mov r8, r8)
 8017994:	2001184c 	.word	0x2001184c
 8017998:	40000400 	.word	0x40000400
 801799c:	20000004 	.word	0x20000004
 80179a0:	000f423f 	.word	0x000f423f
 80179a4:	0007a120 	.word	0x0007a120
 80179a8:	000f4240 	.word	0x000f4240

080179ac <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	af00      	add	r7, sp, #0
  timer_initcounter--;
 80179b0:	4b09      	ldr	r3, [pc, #36]	@ (80179d8 <USBPD_TIM_DeInit+0x2c>)
 80179b2:	781b      	ldrb	r3, [r3, #0]
 80179b4:	b25b      	sxtb	r3, r3
 80179b6:	b2db      	uxtb	r3, r3
 80179b8:	3b01      	subs	r3, #1
 80179ba:	b2db      	uxtb	r3, r3
 80179bc:	b25a      	sxtb	r2, r3
 80179be:	4b06      	ldr	r3, [pc, #24]	@ (80179d8 <USBPD_TIM_DeInit+0x2c>)
 80179c0:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 80179c2:	4b05      	ldr	r3, [pc, #20]	@ (80179d8 <USBPD_TIM_DeInit+0x2c>)
 80179c4:	781b      	ldrb	r3, [r3, #0]
 80179c6:	b25b      	sxtb	r3, r3
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d102      	bne.n	80179d2 <USBPD_TIM_DeInit+0x26>
  {
    TIMX_CLK_DISABLE;
 80179cc:	2002      	movs	r0, #2
 80179ce:	f7ff fd9f 	bl	8017510 <LL_APB1_GRP1_DisableClock>
  }
}
 80179d2:	46c0      	nop			@ (mov r8, r8)
 80179d4:	46bd      	mov	sp, r7
 80179d6:	bd80      	pop	{r7, pc}
 80179d8:	2001184c 	.word	0x2001184c

080179dc <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b082      	sub	sp, #8
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	0002      	movs	r2, r0
 80179e4:	6039      	str	r1, [r7, #0]
 80179e6:	1dfb      	adds	r3, r7, #7
 80179e8:	701a      	strb	r2, [r3, #0]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 80179ea:	1dfb      	adds	r3, r7, #7
 80179ec:	781b      	ldrb	r3, [r3, #0]
 80179ee:	2b03      	cmp	r3, #3
 80179f0:	d044      	beq.n	8017a7c <USBPD_TIM_Start+0xa0>
 80179f2:	dc57      	bgt.n	8017aa4 <USBPD_TIM_Start+0xc8>
 80179f4:	2b02      	cmp	r3, #2
 80179f6:	d02d      	beq.n	8017a54 <USBPD_TIM_Start+0x78>
 80179f8:	dc54      	bgt.n	8017aa4 <USBPD_TIM_Start+0xc8>
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d002      	beq.n	8017a04 <USBPD_TIM_Start+0x28>
 80179fe:	2b01      	cmp	r3, #1
 8017a00:	d014      	beq.n	8017a2c <USBPD_TIM_Start+0x50>
      break;
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
      break;
    default:
      break;
 8017a02:	e04f      	b.n	8017aa4 <USBPD_TIM_Start+0xc8>
      TIMX_CHANNEL1_SETEVENT;
 8017a04:	4b2a      	ldr	r3, [pc, #168]	@ (8017ab0 <USBPD_TIM_Start+0xd4>)
 8017a06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017a08:	683b      	ldr	r3, [r7, #0]
 8017a0a:	18d3      	adds	r3, r2, r3
 8017a0c:	4929      	ldr	r1, [pc, #164]	@ (8017ab4 <USBPD_TIM_Start+0xd8>)
 8017a0e:	0018      	movs	r0, r3
 8017a10:	f7ee fd9e 	bl	8006550 <__aeabi_uidivmod>
 8017a14:	000b      	movs	r3, r1
 8017a16:	001a      	movs	r2, r3
 8017a18:	4b25      	ldr	r3, [pc, #148]	@ (8017ab0 <USBPD_TIM_Start+0xd4>)
 8017a1a:	0011      	movs	r1, r2
 8017a1c:	0018      	movs	r0, r3
 8017a1e:	f7ff fe83 	bl	8017728 <LL_TIM_OC_SetCompareCH1>
 8017a22:	4b23      	ldr	r3, [pc, #140]	@ (8017ab0 <USBPD_TIM_Start+0xd4>)
 8017a24:	0018      	movs	r0, r3
 8017a26:	f7ff feaf 	bl	8017788 <LL_TIM_ClearFlag_CC1>
      break;
 8017a2a:	e03c      	b.n	8017aa6 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL2_SETEVENT;
 8017a2c:	4b20      	ldr	r3, [pc, #128]	@ (8017ab0 <USBPD_TIM_Start+0xd4>)
 8017a2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017a30:	683b      	ldr	r3, [r7, #0]
 8017a32:	18d3      	adds	r3, r2, r3
 8017a34:	491f      	ldr	r1, [pc, #124]	@ (8017ab4 <USBPD_TIM_Start+0xd8>)
 8017a36:	0018      	movs	r0, r3
 8017a38:	f7ee fd8a 	bl	8006550 <__aeabi_uidivmod>
 8017a3c:	000b      	movs	r3, r1
 8017a3e:	001a      	movs	r2, r3
 8017a40:	4b1b      	ldr	r3, [pc, #108]	@ (8017ab0 <USBPD_TIM_Start+0xd4>)
 8017a42:	0011      	movs	r1, r2
 8017a44:	0018      	movs	r0, r3
 8017a46:	f7ff fe7b 	bl	8017740 <LL_TIM_OC_SetCompareCH2>
 8017a4a:	4b19      	ldr	r3, [pc, #100]	@ (8017ab0 <USBPD_TIM_Start+0xd4>)
 8017a4c:	0018      	movs	r0, r3
 8017a4e:	f7ff feb8 	bl	80177c2 <LL_TIM_ClearFlag_CC2>
      break;
 8017a52:	e028      	b.n	8017aa6 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL3_SETEVENT;
 8017a54:	4b16      	ldr	r3, [pc, #88]	@ (8017ab0 <USBPD_TIM_Start+0xd4>)
 8017a56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017a58:	683b      	ldr	r3, [r7, #0]
 8017a5a:	18d3      	adds	r3, r2, r3
 8017a5c:	4915      	ldr	r1, [pc, #84]	@ (8017ab4 <USBPD_TIM_Start+0xd8>)
 8017a5e:	0018      	movs	r0, r3
 8017a60:	f7ee fd76 	bl	8006550 <__aeabi_uidivmod>
 8017a64:	000b      	movs	r3, r1
 8017a66:	001a      	movs	r2, r3
 8017a68:	4b11      	ldr	r3, [pc, #68]	@ (8017ab0 <USBPD_TIM_Start+0xd4>)
 8017a6a:	0011      	movs	r1, r2
 8017a6c:	0018      	movs	r0, r3
 8017a6e:	f7ff fe73 	bl	8017758 <LL_TIM_OC_SetCompareCH3>
 8017a72:	4b0f      	ldr	r3, [pc, #60]	@ (8017ab0 <USBPD_TIM_Start+0xd4>)
 8017a74:	0018      	movs	r0, r3
 8017a76:	f7ff fec1 	bl	80177fc <LL_TIM_ClearFlag_CC3>
      break;
 8017a7a:	e014      	b.n	8017aa6 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL4_SETEVENT;
 8017a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8017ab0 <USBPD_TIM_Start+0xd4>)
 8017a7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017a80:	683b      	ldr	r3, [r7, #0]
 8017a82:	18d3      	adds	r3, r2, r3
 8017a84:	490b      	ldr	r1, [pc, #44]	@ (8017ab4 <USBPD_TIM_Start+0xd8>)
 8017a86:	0018      	movs	r0, r3
 8017a88:	f7ee fd62 	bl	8006550 <__aeabi_uidivmod>
 8017a8c:	000b      	movs	r3, r1
 8017a8e:	001a      	movs	r2, r3
 8017a90:	4b07      	ldr	r3, [pc, #28]	@ (8017ab0 <USBPD_TIM_Start+0xd4>)
 8017a92:	0011      	movs	r1, r2
 8017a94:	0018      	movs	r0, r3
 8017a96:	f7ff fe6b 	bl	8017770 <LL_TIM_OC_SetCompareCH4>
 8017a9a:	4b05      	ldr	r3, [pc, #20]	@ (8017ab0 <USBPD_TIM_Start+0xd4>)
 8017a9c:	0018      	movs	r0, r3
 8017a9e:	f7ff feca 	bl	8017836 <LL_TIM_ClearFlag_CC4>
      break;
 8017aa2:	e000      	b.n	8017aa6 <USBPD_TIM_Start+0xca>
      break;
 8017aa4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8017aa6:	46c0      	nop			@ (mov r8, r8)
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	b002      	add	sp, #8
 8017aac:	bd80      	pop	{r7, pc}
 8017aae:	46c0      	nop			@ (mov r8, r8)
 8017ab0:	40000400 	.word	0x40000400
 8017ab4:	00002710 	.word	0x00002710

08017ab8 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b084      	sub	sp, #16
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	0002      	movs	r2, r0
 8017ac0:	1dfb      	adds	r3, r7, #7
 8017ac2:	701a      	strb	r2, [r3, #0]
  uint32_t _expired = 1u;
 8017ac4:	2301      	movs	r3, #1
 8017ac6:	60fb      	str	r3, [r7, #12]
  switch (Id)
 8017ac8:	1dfb      	adds	r3, r7, #7
 8017aca:	781b      	ldrb	r3, [r3, #0]
 8017acc:	2b03      	cmp	r3, #3
 8017ace:	d01d      	beq.n	8017b0c <USBPD_TIM_IsExpired+0x54>
 8017ad0:	dc23      	bgt.n	8017b1a <USBPD_TIM_IsExpired+0x62>
 8017ad2:	2b02      	cmp	r3, #2
 8017ad4:	d013      	beq.n	8017afe <USBPD_TIM_IsExpired+0x46>
 8017ad6:	dc20      	bgt.n	8017b1a <USBPD_TIM_IsExpired+0x62>
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d002      	beq.n	8017ae2 <USBPD_TIM_IsExpired+0x2a>
 8017adc:	2b01      	cmp	r3, #1
 8017ade:	d007      	beq.n	8017af0 <USBPD_TIM_IsExpired+0x38>
      break;
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
      break;
    default:
      break;
 8017ae0:	e01b      	b.n	8017b1a <USBPD_TIM_IsExpired+0x62>
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8017ae2:	4b11      	ldr	r3, [pc, #68]	@ (8017b28 <USBPD_TIM_IsExpired+0x70>)
 8017ae4:	0018      	movs	r0, r3
 8017ae6:	f7ff fe5b 	bl	80177a0 <LL_TIM_IsActiveFlag_CC1>
 8017aea:	0003      	movs	r3, r0
 8017aec:	60fb      	str	r3, [r7, #12]
      break;
 8017aee:	e015      	b.n	8017b1c <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8017af0:	4b0d      	ldr	r3, [pc, #52]	@ (8017b28 <USBPD_TIM_IsExpired+0x70>)
 8017af2:	0018      	movs	r0, r3
 8017af4:	f7ff fe71 	bl	80177da <LL_TIM_IsActiveFlag_CC2>
 8017af8:	0003      	movs	r3, r0
 8017afa:	60fb      	str	r3, [r7, #12]
      break;
 8017afc:	e00e      	b.n	8017b1c <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 8017afe:	4b0a      	ldr	r3, [pc, #40]	@ (8017b28 <USBPD_TIM_IsExpired+0x70>)
 8017b00:	0018      	movs	r0, r3
 8017b02:	f7ff fe87 	bl	8017814 <LL_TIM_IsActiveFlag_CC3>
 8017b06:	0003      	movs	r3, r0
 8017b08:	60fb      	str	r3, [r7, #12]
      break;
 8017b0a:	e007      	b.n	8017b1c <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 8017b0c:	4b06      	ldr	r3, [pc, #24]	@ (8017b28 <USBPD_TIM_IsExpired+0x70>)
 8017b0e:	0018      	movs	r0, r3
 8017b10:	f7ff fe9d 	bl	801784e <LL_TIM_IsActiveFlag_CC4>
 8017b14:	0003      	movs	r3, r0
 8017b16:	60fb      	str	r3, [r7, #12]
      break;
 8017b18:	e000      	b.n	8017b1c <USBPD_TIM_IsExpired+0x64>
      break;
 8017b1a:	46c0      	nop			@ (mov r8, r8)
  }
  return _expired;
 8017b1c:	68fb      	ldr	r3, [r7, #12]
}
 8017b1e:	0018      	movs	r0, r3
 8017b20:	46bd      	mov	sp, r7
 8017b22:	b004      	add	sp, #16
 8017b24:	bd80      	pop	{r7, pc}
 8017b26:	46c0      	nop			@ (mov r8, r8)
 8017b28:	40000400 	.word	0x40000400

08017b2c <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 8017b2c:	b580      	push	{r7, lr}
 8017b2e:	b084      	sub	sp, #16
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	60f8      	str	r0, [r7, #12]
 8017b34:	60b9      	str	r1, [r7, #8]
 8017b36:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 8017b38:	4b0c      	ldr	r3, [pc, #48]	@ (8017b6c <_ux_system_error_handler+0x40>)
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	687a      	ldr	r2, [r7, #4]
 8017b3e:	651a      	str	r2, [r3, #80]	@ 0x50
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 8017b40:	4b0a      	ldr	r3, [pc, #40]	@ (8017b6c <_ux_system_error_handler+0x40>)
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017b46:	3201      	adds	r2, #1
 8017b48:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 8017b4a:	4b08      	ldr	r3, [pc, #32]	@ (8017b6c <_ux_system_error_handler+0x40>)
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d006      	beq.n	8017b62 <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 8017b54:	4b05      	ldr	r3, [pc, #20]	@ (8017b6c <_ux_system_error_handler+0x40>)
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017b5a:	687a      	ldr	r2, [r7, #4]
 8017b5c:	68b9      	ldr	r1, [r7, #8]
 8017b5e:	68f8      	ldr	r0, [r7, #12]
 8017b60:	4798      	blx	r3
    }
}
 8017b62:	46c0      	nop			@ (mov r8, r8)
 8017b64:	46bd      	mov	sp, r7
 8017b66:	b004      	add	sp, #16
 8017b68:	bd80      	pop	{r7, pc}
 8017b6a:	46c0      	nop			@ (mov r8, r8)
 8017b6c:	20011850 	.word	0x20011850

08017b70 <_ux_system_initialize>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size, 
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b08a      	sub	sp, #40	@ 0x28
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	60f8      	str	r0, [r7, #12]
 8017b78:	60b9      	str	r1, [r7, #8]
 8017b7a:	607a      	str	r2, [r7, #4]
 8017b7c:	603b      	str	r3, [r7, #0]
UINT                status;
#endif


    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 8017b7e:	68ba      	ldr	r2, [r7, #8]
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	2100      	movs	r1, #0
 8017b84:	0018      	movs	r0, r3
 8017b86:	f000 fc27 	bl	80183d8 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 8017b8a:	4b50      	ldr	r3, [pc, #320]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017b8c:	68fa      	ldr	r2, [r7, #12]
 8017b8e:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 8017b90:	235c      	movs	r3, #92	@ 0x5c
 8017b92:	627b      	str	r3, [r7, #36]	@ 0x24
#endif 

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8017b94:	68fa      	ldr	r2, [r7, #12]
 8017b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b98:	18d2      	adds	r2, r2, r3
 8017b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8017cd0 <_ux_system_initialize+0x160>)
 8017b9c:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 8017b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ba0:	33d1      	adds	r3, #209	@ 0xd1
 8017ba2:	33ff      	adds	r3, #255	@ 0xff
 8017ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif 


    /* Set the cache safe memory for the dynamic pool */
    _ux_system -> ux_system_regular_memory_pool_start =  (UX_MEMORY_BLOCK *) (((UCHAR *) regular_memory_pool_start) 
 8017ba6:	4b49      	ldr	r3, [pc, #292]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	68f9      	ldr	r1, [r7, #12]
 8017bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017bae:	188a      	adds	r2, r1, r2
 8017bb0:	601a      	str	r2, [r3, #0]
                                                            + memory_pool_offset);

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start =   (ALIGN_TYPE) _ux_system -> ux_system_regular_memory_pool_start;
 8017bb2:	4b46      	ldr	r3, [pc, #280]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	623b      	str	r3, [r7, #32]
    int_memory_pool_start +=  UX_ALIGN_MIN;
 8017bba:	6a3b      	ldr	r3, [r7, #32]
 8017bbc:	330f      	adds	r3, #15
 8017bbe:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8017bc0:	6a3b      	ldr	r3, [r7, #32]
 8017bc2:	220f      	movs	r2, #15
 8017bc4:	4393      	bics	r3, r2
 8017bc6:	623b      	str	r3, [r7, #32]
    
    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 8017bc8:	68fa      	ldr	r2, [r7, #12]
 8017bca:	68bb      	ldr	r3, [r7, #8]
 8017bcc:	18d3      	adds	r3, r2, r3
 8017bce:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8017bd0:	69fb      	ldr	r3, [r7, #28]
 8017bd2:	6a3a      	ldr	r2, [r7, #32]
 8017bd4:	429a      	cmp	r2, r3
 8017bd6:	d301      	bcc.n	8017bdc <_ux_system_initialize+0x6c>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 8017bd8:	2312      	movs	r3, #18
 8017bda:	e073      	b.n	8017cc4 <_ux_system_initialize+0x154>
    }

    /* Now, we have a project structure allocated, save the regular memory allocation details */
    _ux_system -> ux_system_regular_memory_pool_size =     (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 8017bdc:	69f9      	ldr	r1, [r7, #28]
 8017bde:	4b3b      	ldr	r3, [pc, #236]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	6a3a      	ldr	r2, [r7, #32]
 8017be4:	1a8a      	subs	r2, r1, r2
 8017be6:	605a      	str	r2, [r3, #4]
    _ux_system -> ux_system_regular_memory_pool_free =     _ux_system -> ux_system_regular_memory_pool_size;
 8017be8:	4b38      	ldr	r3, [pc, #224]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017bea:	681a      	ldr	r2, [r3, #0]
 8017bec:	4b37      	ldr	r3, [pc, #220]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	6852      	ldr	r2, [r2, #4]
 8017bf2:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_regular_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 8017bf4:	4b35      	ldr	r3, [pc, #212]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	6a3a      	ldr	r2, [r7, #32]
 8017bfa:	601a      	str	r2, [r3, #0]

    /* Build the first free memory block */
    memory_block =                             _ux_system -> ux_system_regular_memory_pool_start;
 8017bfc:	4b33      	ldr	r3, [pc, #204]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	61bb      	str	r3, [r7, #24]
    memory_block -> ux_memory_block_size =     _ux_system -> ux_system_regular_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8017c04:	4b31      	ldr	r3, [pc, #196]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	685b      	ldr	r3, [r3, #4]
 8017c0a:	3b10      	subs	r3, #16
 8017c0c:	001a      	movs	r2, r3
 8017c0e:	69bb      	ldr	r3, [r7, #24]
 8017c10:	601a      	str	r2, [r3, #0]
    memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 8017c12:	69bb      	ldr	r3, [r7, #24]
 8017c14:	2200      	movs	r2, #0
 8017c16:	605a      	str	r2, [r3, #4]

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if (cache_safe_memory_pool_start == UX_NULL)
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d112      	bne.n	8017c44 <_ux_system_initialize+0xd4>
    {

        /* Cache safe memory is the same as regular memory.  */
        _ux_system -> ux_system_cache_safe_memory_pool_size =  _ux_system -> ux_system_regular_memory_pool_size;
 8017c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017c20:	681a      	ldr	r2, [r3, #0]
 8017c22:	4b2a      	ldr	r3, [pc, #168]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	6852      	ldr	r2, [r2, #4]
 8017c28:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =  _ux_system -> ux_system_regular_memory_pool_free;
 8017c2a:	4b28      	ldr	r3, [pc, #160]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017c2c:	681a      	ldr	r2, [r3, #0]
 8017c2e:	4b27      	ldr	r3, [pc, #156]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	6892      	ldr	r2, [r2, #8]
 8017c34:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start = _ux_system -> ux_system_regular_memory_pool_start;
 8017c36:	4b25      	ldr	r3, [pc, #148]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017c38:	681a      	ldr	r2, [r3, #0]
 8017c3a:	4b24      	ldr	r3, [pc, #144]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	6812      	ldr	r2, [r2, #0]
 8017c40:	60da      	str	r2, [r3, #12]
 8017c42:	e02f      	b.n	8017ca4 <_ux_system_initialize+0x134>
    }
    else
    {
    
        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 8017c48:	6a3b      	ldr	r3, [r7, #32]
 8017c4a:	330f      	adds	r3, #15
 8017c4c:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8017c4e:	6a3b      	ldr	r3, [r7, #32]
 8017c50:	220f      	movs	r2, #15
 8017c52:	4393      	bics	r3, r2
 8017c54:	623b      	str	r3, [r7, #32]
    
        /* Save the cache safe memory allocation details */
        _ux_system -> ux_system_cache_safe_memory_pool_size =     cache_safe_memory_size - UX_ALIGN_MIN;
 8017c56:	4b1d      	ldr	r3, [pc, #116]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	683a      	ldr	r2, [r7, #0]
 8017c5c:	3a0f      	subs	r2, #15
 8017c5e:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =     _ux_system -> ux_system_cache_safe_memory_pool_size;
 8017c60:	4b1a      	ldr	r3, [pc, #104]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017c62:	681a      	ldr	r2, [r3, #0]
 8017c64:	4b19      	ldr	r3, [pc, #100]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	6912      	ldr	r2, [r2, #16]
 8017c6a:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 8017c6c:	4b17      	ldr	r3, [pc, #92]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	6a3a      	ldr	r2, [r7, #32]
 8017c72:	60da      	str	r2, [r3, #12]
    
        /* Reset this memory block */
        _ux_utility_memory_set(_ux_system -> ux_system_cache_safe_memory_pool_start, 0, _ux_system -> ux_system_cache_safe_memory_pool_size); /* Use case of memset is verified. */
 8017c74:	4b15      	ldr	r3, [pc, #84]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	68d8      	ldr	r0, [r3, #12]
 8017c7a:	4b14      	ldr	r3, [pc, #80]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	691b      	ldr	r3, [r3, #16]
 8017c80:	001a      	movs	r2, r3
 8017c82:	2100      	movs	r1, #0
 8017c84:	f000 fba8 	bl	80183d8 <_ux_utility_memory_set>
    
        /* Build the first free memory block */
        memory_block =                             _ux_system -> ux_system_cache_safe_memory_pool_start;
 8017c88:	4b10      	ldr	r3, [pc, #64]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	68db      	ldr	r3, [r3, #12]
 8017c8e:	61bb      	str	r3, [r7, #24]
        memory_block -> ux_memory_block_size =     _ux_system -> ux_system_cache_safe_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8017c90:	4b0e      	ldr	r3, [pc, #56]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	691b      	ldr	r3, [r3, #16]
 8017c96:	3b10      	subs	r3, #16
 8017c98:	001a      	movs	r2, r3
 8017c9a:	69bb      	ldr	r3, [r7, #24]
 8017c9c:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 8017c9e:	69bb      	ldr	r3, [r7, #24]
 8017ca0:	2200      	movs	r2, #0
 8017ca2:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 8017ca4:	4b09      	ldr	r3, [pc, #36]	@ (8017ccc <_ux_system_initialize+0x15c>)
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	331c      	adds	r3, #28
 8017caa:	4a0a      	ldr	r2, [pc, #40]	@ (8017cd4 <_ux_system_initialize+0x164>)
 8017cac:	0011      	movs	r1, r2
 8017cae:	0018      	movs	r0, r3
 8017cb0:	f000 fbae 	bl	8018410 <_ux_utility_mutex_create>
 8017cb4:	0003      	movs	r3, r0
 8017cb6:	617b      	str	r3, [r7, #20]
    if(status != UX_SUCCESS)
 8017cb8:	697b      	ldr	r3, [r7, #20]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d001      	beq.n	8017cc2 <_ux_system_initialize+0x152>
        return(UX_MUTEX_ERROR);
 8017cbe:	2317      	movs	r3, #23
 8017cc0:	e000      	b.n	8017cc4 <_ux_system_initialize+0x154>
#endif

    return(UX_SUCCESS);
 8017cc2:	2300      	movs	r3, #0
}
 8017cc4:	0018      	movs	r0, r3
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	b00a      	add	sp, #40	@ 0x28
 8017cca:	bd80      	pop	{r7, pc}
 8017ccc:	20011850 	.word	0x20011850
 8017cd0:	20011854 	.word	0x20011854
 8017cd4:	0801efc0 	.word	0x0801efc0

08017cd8 <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b084      	sub	sp, #16
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	2264      	movs	r2, #100	@ 0x64
 8017ce4:	4353      	muls	r3, r2
 8017ce6:	22fa      	movs	r2, #250	@ 0xfa
 8017ce8:	0091      	lsls	r1, r2, #2
 8017cea:	0018      	movs	r0, r3
 8017cec:	f7ee fbaa 	bl	8006444 <__udivsi3>
 8017cf0:	0003      	movs	r3, r0
 8017cf2:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	3301      	adds	r3, #1
 8017cf8:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	0018      	movs	r0, r3
 8017cfe:	f7fa fc05 	bl	801250c <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 8017d02:	46c0      	nop			@ (mov r8, r8)
}
 8017d04:	46bd      	mov	sp, r7
 8017d06:	b004      	add	sp, #16
 8017d08:	bd80      	pop	{r7, pc}

08017d0a <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 8017d0a:	b580      	push	{r7, lr}
 8017d0c:	b084      	sub	sp, #16
 8017d0e:	af00      	add	r7, sp, #0
 8017d10:	60f8      	str	r0, [r7, #12]
 8017d12:	60b9      	str	r1, [r7, #8]
 8017d14:	607a      	str	r2, [r7, #4]
 8017d16:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 8017d18:	e028      	b.n	8017d6c <_ux_utility_descriptor_parse+0x62>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 8017d1a:	68bb      	ldr	r3, [r7, #8]
 8017d1c:	1c5a      	adds	r2, r3, #1
 8017d1e:	60ba      	str	r2, [r7, #8]
 8017d20:	781b      	ldrb	r3, [r3, #0]
 8017d22:	2b02      	cmp	r3, #2
 8017d24:	d00c      	beq.n	8017d40 <_ux_utility_descriptor_parse+0x36>
 8017d26:	2b04      	cmp	r3, #4
 8017d28:	d115      	bne.n	8017d56 <_ux_utility_descriptor_parse+0x4c>

        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	0018      	movs	r0, r3
 8017d2e:	f000 f87d 	bl	8017e2c <_ux_utility_long_get>
 8017d32:	0002      	movs	r2, r0
 8017d34:	683b      	ldr	r3, [r7, #0]
 8017d36:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	3304      	adds	r3, #4
 8017d3c:	60fb      	str	r3, [r7, #12]
            break;                   
 8017d3e:	e012      	b.n	8017d66 <_ux_utility_descriptor_parse+0x5c>

        case 2:

            *((ULONG *) descriptor) = (ULONG) _ux_utility_short_get(raw_descriptor);
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	0018      	movs	r0, r3
 8017d44:	f000 fc1d 	bl	8018582 <_ux_utility_short_get>
 8017d48:	0002      	movs	r2, r0
 8017d4a:	683b      	ldr	r3, [r7, #0]
 8017d4c:	601a      	str	r2, [r3, #0]
            raw_descriptor += 2;
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	3302      	adds	r3, #2
 8017d52:	60fb      	str	r3, [r7, #12]
            break;                   
 8017d54:	e007      	b.n	8017d66 <_ux_utility_descriptor_parse+0x5c>

        default:

            *((ULONG *) descriptor) =  (ULONG) *raw_descriptor;
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	781b      	ldrb	r3, [r3, #0]
 8017d5a:	001a      	movs	r2, r3
 8017d5c:	683b      	ldr	r3, [r7, #0]
 8017d5e:	601a      	str	r2, [r3, #0]
            raw_descriptor++;
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	3301      	adds	r3, #1
 8017d64:	60fb      	str	r3, [r7, #12]
        }

        /* Add the size of the component to the destination.  */
        descriptor +=  4;
 8017d66:	683b      	ldr	r3, [r7, #0]
 8017d68:	3304      	adds	r3, #4
 8017d6a:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	1e5a      	subs	r2, r3, #1
 8017d70:	607a      	str	r2, [r7, #4]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d1d1      	bne.n	8017d1a <_ux_utility_descriptor_parse+0x10>
    }

    /* Return to caller.  */
    return;
 8017d76:	46c0      	nop			@ (mov r8, r8)
}
 8017d78:	46bd      	mov	sp, r7
 8017d7a:	b004      	add	sp, #16
 8017d7c:	bd80      	pop	{r7, pc}

08017d7e <_ux_utility_event_flags_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_create(UX_EVENT_FLAGS_GROUP*group_ptr, CHAR *name)
{
 8017d7e:	b580      	push	{r7, lr}
 8017d80:	b084      	sub	sp, #16
 8017d82:	af00      	add	r7, sp, #0
 8017d84:	6078      	str	r0, [r7, #4]
 8017d86:	6039      	str	r1, [r7, #0]

UINT    status;

    /* Call ThreadX to create the event flags.  */
    status =  tx_event_flags_create(group_ptr, name);
 8017d88:	6839      	ldr	r1, [r7, #0]
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	2224      	movs	r2, #36	@ 0x24
 8017d8e:	0018      	movs	r0, r3
 8017d90:	f7fb fc00 	bl	8013594 <_txe_event_flags_create>
 8017d94:	0003      	movs	r3, r0
 8017d96:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d004      	beq.n	8017da8 <_ux_utility_event_flags_create+0x2a>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_EVENT_ERROR);
 8017d9e:	2218      	movs	r2, #24
 8017da0:	2108      	movs	r1, #8
 8017da2:	2002      	movs	r0, #2
 8017da4:	f7ff fec2 	bl	8017b2c <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_EVENT_ERROR, group_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 8017da8:	68fb      	ldr	r3, [r7, #12]
}
 8017daa:	0018      	movs	r0, r3
 8017dac:	46bd      	mov	sp, r7
 8017dae:	b004      	add	sp, #16
 8017db0:	bd80      	pop	{r7, pc}

08017db2 <_ux_utility_event_flags_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_delete(UX_EVENT_FLAGS_GROUP*group_ptr)            
{
 8017db2:	b580      	push	{r7, lr}
 8017db4:	b084      	sub	sp, #16
 8017db6:	af00      	add	r7, sp, #0
 8017db8:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to delete the event flags.  */
    status =  tx_event_flags_delete(group_ptr);
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	0018      	movs	r0, r3
 8017dbe:	f7fb fc7b 	bl	80136b8 <_txe_event_flags_delete>
 8017dc2:	0003      	movs	r3, r0
 8017dc4:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8017dc6:	68fb      	ldr	r3, [r7, #12]
}
 8017dc8:	0018      	movs	r0, r3
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	b004      	add	sp, #16
 8017dce:	bd80      	pop	{r7, pc}

08017dd0 <_ux_utility_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_get(UX_EVENT_FLAGS_GROUP*group_ptr, ULONG requested_flags, 
                                        UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8017dd0:	b590      	push	{r4, r7, lr}
 8017dd2:	b089      	sub	sp, #36	@ 0x24
 8017dd4:	af02      	add	r7, sp, #8
 8017dd6:	60f8      	str	r0, [r7, #12]
 8017dd8:	60b9      	str	r1, [r7, #8]
 8017dda:	607a      	str	r2, [r7, #4]
 8017ddc:	603b      	str	r3, [r7, #0]

UINT    status;
ULONG   local_actual_flags_ptr;

    /* Call ThreadX to get the event flags.  */
    status =  tx_event_flags_get(group_ptr, requested_flags, get_option, &local_actual_flags_ptr, wait_option);
 8017dde:	2310      	movs	r3, #16
 8017de0:	18fc      	adds	r4, r7, r3
 8017de2:	687a      	ldr	r2, [r7, #4]
 8017de4:	68b9      	ldr	r1, [r7, #8]
 8017de6:	68f8      	ldr	r0, [r7, #12]
 8017de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dea:	9300      	str	r3, [sp, #0]
 8017dec:	0023      	movs	r3, r4
 8017dee:	f7fb fca1 	bl	8013734 <_txe_event_flags_get>
 8017df2:	0003      	movs	r3, r0
 8017df4:	617b      	str	r3, [r7, #20]

    /* Update the actual flags.  */
    *actual_flags_ptr = local_actual_flags_ptr;
 8017df6:	693a      	ldr	r2, [r7, #16]
 8017df8:	683b      	ldr	r3, [r7, #0]
 8017dfa:	601a      	str	r2, [r3, #0]
    
    /* Return completion status.  */
    return(status);
 8017dfc:	697b      	ldr	r3, [r7, #20]
}
 8017dfe:	0018      	movs	r0, r3
 8017e00:	46bd      	mov	sp, r7
 8017e02:	b007      	add	sp, #28
 8017e04:	bd90      	pop	{r4, r7, pc}

08017e06 <_ux_utility_event_flags_set>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_set(UX_EVENT_FLAGS_GROUP*group_ptr, ULONG flags_to_set,
                                  UINT set_option)
{
 8017e06:	b580      	push	{r7, lr}
 8017e08:	b086      	sub	sp, #24
 8017e0a:	af00      	add	r7, sp, #0
 8017e0c:	60f8      	str	r0, [r7, #12]
 8017e0e:	60b9      	str	r1, [r7, #8]
 8017e10:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to set the event flags.  */
    status =  tx_event_flags_set(group_ptr, flags_to_set, set_option);
 8017e12:	687a      	ldr	r2, [r7, #4]
 8017e14:	68b9      	ldr	r1, [r7, #8]
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	0018      	movs	r0, r3
 8017e1a:	f7fb fce3 	bl	80137e4 <_txe_event_flags_set>
 8017e1e:	0003      	movs	r3, r0
 8017e20:	617b      	str	r3, [r7, #20]

    /* Return completion status.  */
    return(status);
 8017e22:	697b      	ldr	r3, [r7, #20]
}
 8017e24:	0018      	movs	r0, r3
 8017e26:	46bd      	mov	sp, r7
 8017e28:	b006      	add	sp, #24
 8017e2a:	bd80      	pop	{r7, pc}

08017e2c <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b084      	sub	sp, #16
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	1c5a      	adds	r2, r3, #1
 8017e38:	607a      	str	r2, [r7, #4]
 8017e3a:	781b      	ldrb	r3, [r3, #0]
 8017e3c:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	1c5a      	adds	r2, r3, #1
 8017e42:	607a      	str	r2, [r7, #4]
 8017e44:	781b      	ldrb	r3, [r3, #0]
 8017e46:	021b      	lsls	r3, r3, #8
 8017e48:	68fa      	ldr	r2, [r7, #12]
 8017e4a:	4313      	orrs	r3, r2
 8017e4c:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	1c5a      	adds	r2, r3, #1
 8017e52:	607a      	str	r2, [r7, #4]
 8017e54:	781b      	ldrb	r3, [r3, #0]
 8017e56:	041b      	lsls	r3, r3, #16
 8017e58:	68fa      	ldr	r2, [r7, #12]
 8017e5a:	4313      	orrs	r3, r2
 8017e5c:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	781b      	ldrb	r3, [r3, #0]
 8017e62:	061b      	lsls	r3, r3, #24
 8017e64:	68fa      	ldr	r2, [r7, #12]
 8017e66:	4313      	orrs	r3, r2
 8017e68:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 8017e6a:	68fb      	ldr	r3, [r7, #12]
}
 8017e6c:	0018      	movs	r0, r3
 8017e6e:	46bd      	mov	sp, r7
 8017e70:	b004      	add	sp, #16
 8017e72:	bd80      	pop	{r7, pc}

08017e74 <_ux_utility_long_get_big_endian>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get_big_endian(UCHAR * address)
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b084      	sub	sp, #16
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]

ULONG  value;


    /* We read a byte at a time from the address.  */
    value =  (ULONG) ((*address++) << 24);
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	1c5a      	adds	r2, r3, #1
 8017e80:	607a      	str	r2, [r7, #4]
 8017e82:	781b      	ldrb	r3, [r3, #0]
 8017e84:	061b      	lsls	r3, r3, #24
 8017e86:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG) ((*address++) << 16);
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	1c5a      	adds	r2, r3, #1
 8017e8c:	607a      	str	r2, [r7, #4]
 8017e8e:	781b      	ldrb	r3, [r3, #0]
 8017e90:	041b      	lsls	r3, r3, #16
 8017e92:	68fa      	ldr	r2, [r7, #12]
 8017e94:	4313      	orrs	r3, r2
 8017e96:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG) ((*address++) << 8);
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	1c5a      	adds	r2, r3, #1
 8017e9c:	607a      	str	r2, [r7, #4]
 8017e9e:	781b      	ldrb	r3, [r3, #0]
 8017ea0:	021b      	lsls	r3, r3, #8
 8017ea2:	68fa      	ldr	r2, [r7, #12]
 8017ea4:	4313      	orrs	r3, r2
 8017ea6:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG) *address;
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	781b      	ldrb	r3, [r3, #0]
 8017eac:	001a      	movs	r2, r3
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	4313      	orrs	r3, r2
 8017eb2:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 8017eb4:	68fb      	ldr	r3, [r7, #12]
}
 8017eb6:	0018      	movs	r0, r3
 8017eb8:	46bd      	mov	sp, r7
 8017eba:	b004      	add	sp, #16
 8017ebc:	bd80      	pop	{r7, pc}

08017ebe <_ux_utility_long_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{
 8017ebe:	b580      	push	{r7, lr}
 8017ec0:	b082      	sub	sp, #8
 8017ec2:	af00      	add	r7, sp, #0
 8017ec4:	6078      	str	r0, [r7, #4]
 8017ec6:	6039      	str	r1, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	1c5a      	adds	r2, r3, #1
 8017ecc:	607a      	str	r2, [r7, #4]
 8017ece:	683a      	ldr	r2, [r7, #0]
 8017ed0:	b2d2      	uxtb	r2, r2
 8017ed2:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8017ed4:	683b      	ldr	r3, [r7, #0]
 8017ed6:	0a19      	lsrs	r1, r3, #8
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	1c5a      	adds	r2, r3, #1
 8017edc:	607a      	str	r2, [r7, #4]
 8017ede:	b2ca      	uxtb	r2, r1
 8017ee0:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 8017ee2:	683b      	ldr	r3, [r7, #0]
 8017ee4:	0c19      	lsrs	r1, r3, #16
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	1c5a      	adds	r2, r3, #1
 8017eea:	607a      	str	r2, [r7, #4]
 8017eec:	b2ca      	uxtb	r2, r1
 8017eee:	701a      	strb	r2, [r3, #0]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 8017ef0:	683b      	ldr	r3, [r7, #0]
 8017ef2:	0e1b      	lsrs	r3, r3, #24
 8017ef4:	b2da      	uxtb	r2, r3
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 8017efa:	46c0      	nop			@ (mov r8, r8)
}
 8017efc:	46bd      	mov	sp, r7
 8017efe:	b002      	add	sp, #8
 8017f00:	bd80      	pop	{r7, pc}

08017f02 <_ux_utility_long_put_big_endian>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put_big_endian(UCHAR * address, ULONG value)
{
 8017f02:	b580      	push	{r7, lr}
 8017f04:	b084      	sub	sp, #16
 8017f06:	af00      	add	r7, sp, #0
 8017f08:	6078      	str	r0, [r7, #4]
 8017f0a:	6039      	str	r1, [r7, #0]

ULONG   low_word_value;
ULONG   high_word_value;

    /* First we swap the value words.  */
    low_word_value =  value >> 16;
 8017f0c:	683b      	ldr	r3, [r7, #0]
 8017f0e:	0c1b      	lsrs	r3, r3, #16
 8017f10:	60fb      	str	r3, [r7, #12]
    high_word_value =  value << 16;
 8017f12:	683b      	ldr	r3, [r7, #0]
 8017f14:	041b      	lsls	r3, r3, #16
 8017f16:	60bb      	str	r3, [r7, #8]
    value =  high_word_value | low_word_value;
 8017f18:	68ba      	ldr	r2, [r7, #8]
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	4313      	orrs	r3, r2
 8017f1e:	603b      	str	r3, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8017f20:	683b      	ldr	r3, [r7, #0]
 8017f22:	0a19      	lsrs	r1, r3, #8
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	1c5a      	adds	r2, r3, #1
 8017f28:	607a      	str	r2, [r7, #4]
 8017f2a:	b2ca      	uxtb	r2, r1
 8017f2c:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) (value & 0xff);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	1c5a      	adds	r2, r3, #1
 8017f32:	607a      	str	r2, [r7, #4]
 8017f34:	683a      	ldr	r2, [r7, #0]
 8017f36:	b2d2      	uxtb	r2, r2
 8017f38:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 24 ) & 0xff);
 8017f3a:	683b      	ldr	r3, [r7, #0]
 8017f3c:	0e19      	lsrs	r1, r3, #24
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	1c5a      	adds	r2, r3, #1
 8017f42:	607a      	str	r2, [r7, #4]
 8017f44:	b2ca      	uxtb	r2, r1
 8017f46:	701a      	strb	r2, [r3, #0]
    *address   =  (UCHAR) ((value >> 16) & 0xff);
 8017f48:	683b      	ldr	r3, [r7, #0]
 8017f4a:	0c1b      	lsrs	r3, r3, #16
 8017f4c:	b2da      	uxtb	r2, r3
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 8017f52:	46c0      	nop			@ (mov r8, r8)
}
 8017f54:	46bd      	mov	sp, r7
 8017f56:	b004      	add	sp, #16
 8017f58:	bd80      	pop	{r7, pc}
	...

08017f5c <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b08c      	sub	sp, #48	@ 0x30
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	60f8      	str	r0, [r7, #12]
 8017f64:	60b9      	str	r1, [r7, #8]
 8017f66:	607a      	str	r2, [r7, #4]
UCHAR               *memory_buffer;
ALIGN_TYPE          int_memory_buffer;


    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 8017f68:	4b7f      	ldr	r3, [pc, #508]	@ (8018168 <_ux_utility_memory_allocate+0x20c>)
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	331c      	adds	r3, #28
 8017f6e:	0018      	movs	r0, r3
 8017f70:	f000 fa75 	bl	801845e <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	3301      	adds	r3, #1
 8017f78:	d101      	bne.n	8017f7e <_ux_utility_memory_allocate+0x22>
        memory_alignment = UX_NO_ALIGN;
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	60fb      	str	r3, [r7, #12]
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	2b0e      	cmp	r3, #14
 8017f82:	d801      	bhi.n	8017f88 <_ux_utility_memory_allocate+0x2c>
        memory_alignment =  UX_ALIGN_MIN;
 8017f84:	230f      	movs	r3, #15
 8017f86:	60fb      	str	r3, [r7, #12]

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    memory_alignment++;
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	3301      	adds	r3, #1
 8017f90:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	330f      	adds	r3, #15
 8017f96:	220f      	movs	r2, #15
 8017f98:	4393      	bics	r3, r2
 8017f9a:	607b      	str	r3, [r7, #4]
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 8017f9c:	687a      	ldr	r2, [r7, #4]
 8017f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fa0:	18d3      	adds	r3, r2, r3
 8017fa2:	3310      	adds	r3, #16
 8017fa4:	001a      	movs	r2, r3
 8017fa6:	68bb      	ldr	r3, [r7, #8]
 8017fa8:	0011      	movs	r1, r2
 8017faa:	0018      	movs	r0, r3
 8017fac:	f000 f9d4 	bl	8018358 <_ux_utility_memory_free_block_best_get>
 8017fb0:	0003      	movs	r3, r0
 8017fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 8017fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d10c      	bne.n	8017fd4 <_ux_utility_memory_allocate+0x78>
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8017fba:	4b6b      	ldr	r3, [pc, #428]	@ (8018168 <_ux_utility_memory_allocate+0x20c>)
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	331c      	adds	r3, #28
 8017fc0:	0018      	movs	r0, r3
 8017fc2:	f000 fa40 	bl	8018446 <_ux_utility_mutex_off>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 8017fc6:	2212      	movs	r2, #18
 8017fc8:	2108      	movs	r1, #8
 8017fca:	2002      	movs	r0, #2
 8017fcc:	f7ff fdae 	bl	8017b2c <_ux_system_error_handler>

        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	e0c5      	b.n	8018160 <_ux_utility_memory_allocate+0x204>
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 8017fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fd6:	3310      	adds	r3, #16
 8017fd8:	623b      	str	r3, [r7, #32]

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	3b01      	subs	r3, #1
 8017fde:	6a3a      	ldr	r2, [r7, #32]
 8017fe0:	4013      	ands	r3, r2
 8017fe2:	d127      	bne.n	8018034 <_ux_utility_memory_allocate+0xd8>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	3310      	adds	r3, #16
 8017fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017fea:	18d3      	adds	r3, r2, r3
 8017fec:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8017fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ff0:	689a      	ldr	r2, [r3, #8]
 8017ff2:	69fb      	ldr	r3, [r7, #28]
 8017ff4:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8017ff6:	69fb      	ldr	r3, [r7, #28]
 8017ff8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017ffa:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8017ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ffe:	681a      	ldr	r2, [r3, #0]
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	1ad3      	subs	r3, r2, r3
 8018004:	3b10      	subs	r3, #16
 8018006:	001a      	movs	r2, r3
 8018008:	69fb      	ldr	r3, [r7, #28]
 801800a:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 801800c:	69fb      	ldr	r3, [r7, #28]
 801800e:	2200      	movs	r2, #0
 8018010:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 8018012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018014:	687a      	ldr	r2, [r7, #4]
 8018016:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 8018018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801801a:	69fa      	ldr	r2, [r7, #28]
 801801c:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 801801e:	68bb      	ldr	r3, [r7, #8]
 8018020:	2280      	movs	r2, #128	@ 0x80
 8018022:	0612      	lsls	r2, r2, #24
 8018024:	431a      	orrs	r2, r3
 8018026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018028:	605a      	str	r2, [r3, #4]

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 801802a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	3310      	adds	r3, #16
 8018030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018032:	e05f      	b.n	80180f4 <_ux_utility_memory_allocate+0x198>
    {

        /* Align the buffer. The first thing we do is increment by the size of a
           memory block because we have to make sure we have enough memory for at
           least that.  */
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 8018034:	6a3b      	ldr	r3, [r7, #32]
 8018036:	3310      	adds	r3, #16
 8018038:	623b      	str	r3, [r7, #32]
        int_memory_buffer +=  memory_alignment - 1;
 801803a:	68fa      	ldr	r2, [r7, #12]
 801803c:	6a3b      	ldr	r3, [r7, #32]
 801803e:	18d3      	adds	r3, r2, r3
 8018040:	3b01      	subs	r3, #1
 8018042:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	425a      	negs	r2, r3
 8018048:	6a3b      	ldr	r3, [r7, #32]
 801804a:	4013      	ands	r3, r2
 801804c:	623b      	str	r3, [r7, #32]

        /* Setup the new memory block. Note that its size is updated again later.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 801804e:	6a3b      	ldr	r3, [r7, #32]
 8018050:	3b10      	subs	r3, #16
 8018052:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8018054:	69fb      	ldr	r3, [r7, #28]
 8018056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018058:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 801805a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801805c:	689a      	ldr	r2, [r3, #8]
 801805e:	69fb      	ldr	r3, [r7, #28]
 8018060:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 8018062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018064:	681a      	ldr	r2, [r3, #0]
 8018066:	69fb      	ldr	r3, [r7, #28]
 8018068:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 801806a:	68bb      	ldr	r3, [r7, #8]
 801806c:	2280      	movs	r2, #128	@ 0x80
 801806e:	0612      	lsls	r2, r2, #24
 8018070:	431a      	orrs	r2, r3
 8018072:	69fb      	ldr	r3, [r7, #28]
 8018074:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        int_memory_buffer =  (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 8018076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018078:	3310      	adds	r3, #16
 801807a:	623b      	str	r3, [r7, #32]
        memory_block -> ux_memory_block_next =  new_memory_block;
 801807c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801807e:	69fa      	ldr	r2, [r7, #28]
 8018080:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 8018082:	69fa      	ldr	r2, [r7, #28]
 8018084:	6a3b      	ldr	r3, [r7, #32]
 8018086:	1ad2      	subs	r2, r2, r3
 8018088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801808a:	601a      	str	r2, [r3, #0]

        /* Update the new memory block's size.  */
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 801808c:	69fb      	ldr	r3, [r7, #28]
 801808e:	681a      	ldr	r2, [r3, #0]
 8018090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	1ad3      	subs	r3, r2, r3
 8018096:	3b10      	subs	r3, #16
 8018098:	001a      	movs	r2, r3
 801809a:	69fb      	ldr	r3, [r7, #28]
 801809c:	601a      	str	r2, [r3, #0]

        /* Calculate how much memory is leftover in the new memory block after doing
           the alignment.  */
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 801809e:	69fb      	ldr	r3, [r7, #28]
 80180a0:	681a      	ldr	r2, [r3, #0]
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	1ad3      	subs	r3, r2, r3
 80180a6:	61bb      	str	r3, [r7, #24]

        /* Can we fit another block after the new block? */
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 80180a8:	69bb      	ldr	r3, [r7, #24]
 80180aa:	2b10      	cmp	r3, #16
 80180ac:	d91c      	bls.n	80180e8 <_ux_utility_memory_allocate+0x18c>
        {

            /* Setup the leftover memory block.  */
            leftover_memory_block = (UX_MEMORY_BLOCK *) ((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 80180ae:	69fa      	ldr	r2, [r7, #28]
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	18d3      	adds	r3, r2, r3
 80180b4:	3310      	adds	r3, #16
 80180b6:	617b      	str	r3, [r7, #20]
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 80180b8:	69fb      	ldr	r3, [r7, #28]
 80180ba:	689a      	ldr	r2, [r3, #8]
 80180bc:	697b      	ldr	r3, [r7, #20]
 80180be:	609a      	str	r2, [r3, #8]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 80180c0:	697b      	ldr	r3, [r7, #20]
 80180c2:	69fa      	ldr	r2, [r7, #28]
 80180c4:	60da      	str	r2, [r3, #12]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 80180c6:	69bb      	ldr	r3, [r7, #24]
 80180c8:	3b10      	subs	r3, #16
 80180ca:	001a      	movs	r2, r3
 80180cc:	697b      	ldr	r3, [r7, #20]
 80180ce:	601a      	str	r2, [r3, #0]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 80180d0:	697b      	ldr	r3, [r7, #20]
 80180d2:	2200      	movs	r2, #0
 80180d4:	605a      	str	r2, [r3, #4]

            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 80180d6:	69fb      	ldr	r3, [r7, #28]
 80180d8:	697a      	ldr	r2, [r7, #20]
 80180da:	609a      	str	r2, [r3, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 80180dc:	69fb      	ldr	r3, [r7, #28]
 80180de:	681a      	ldr	r2, [r3, #0]
 80180e0:	69bb      	ldr	r3, [r7, #24]
 80180e2:	1ad2      	subs	r2, r2, r3
 80180e4:	69fb      	ldr	r3, [r7, #28]
 80180e6:	601a      	str	r2, [r3, #0]
        }

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 80180e8:	69fb      	ldr	r3, [r7, #28]
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	3310      	adds	r3, #16
 80180ee:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
 80180f0:	69fb      	ldr	r3, [r7, #28]
 80180f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 80180f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180f6:	3310      	adds	r3, #16
 80180f8:	613b      	str	r3, [r7, #16]

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested); /* Use case of memset is verified. */
 80180fa:	687a      	ldr	r2, [r7, #4]
 80180fc:	693b      	ldr	r3, [r7, #16]
 80180fe:	2100      	movs	r1, #0
 8018100:	0018      	movs	r0, r3
 8018102:	f000 f969 	bl	80183d8 <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 8018106:	4b18      	ldr	r3, [pc, #96]	@ (8018168 <_ux_utility_memory_allocate+0x20c>)
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	68da      	ldr	r2, [r3, #12]
 801810c:	4b16      	ldr	r3, [pc, #88]	@ (8018168 <_ux_utility_memory_allocate+0x20c>)
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	429a      	cmp	r2, r3
 8018114:	d108      	bne.n	8018128 <_ux_utility_memory_allocate+0x1cc>
    {

        /* There is only one memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8018116:	4b14      	ldr	r3, [pc, #80]	@ (8018168 <_ux_utility_memory_allocate+0x20c>)
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	6899      	ldr	r1, [r3, #8]
 801811c:	4b12      	ldr	r3, [pc, #72]	@ (8018168 <_ux_utility_memory_allocate+0x20c>)
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018122:	1a8a      	subs	r2, r1, r2
 8018124:	609a      	str	r2, [r3, #8]
 8018126:	e014      	b.n	8018152 <_ux_utility_memory_allocate+0x1f6>
    }
    else
    {

       switch (memory_cache_flag)
 8018128:	68bb      	ldr	r3, [r7, #8]
 801812a:	2b01      	cmp	r3, #1
 801812c:	d108      	bne.n	8018140 <_ux_utility_memory_allocate+0x1e4>
       {

            case UX_CACHE_SAFE_MEMORY:
                /* Update the amount of free memory in the cache safe memory pool.  */
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 801812e:	4b0e      	ldr	r3, [pc, #56]	@ (8018168 <_ux_utility_memory_allocate+0x20c>)
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	6959      	ldr	r1, [r3, #20]
 8018134:	4b0c      	ldr	r3, [pc, #48]	@ (8018168 <_ux_utility_memory_allocate+0x20c>)
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801813a:	1a8a      	subs	r2, r1, r2
 801813c:	615a      	str	r2, [r3, #20]

            break;
 801813e:	e008      	b.n	8018152 <_ux_utility_memory_allocate+0x1f6>

            default:
                /* Update the amount of free memory in the regular memory pool.  */
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8018140:	4b09      	ldr	r3, [pc, #36]	@ (8018168 <_ux_utility_memory_allocate+0x20c>)
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	6899      	ldr	r1, [r3, #8]
 8018146:	4b08      	ldr	r3, [pc, #32]	@ (8018168 <_ux_utility_memory_allocate+0x20c>)
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801814c:	1a8a      	subs	r2, r1, r2
 801814e:	609a      	str	r2, [r3, #8]
            break;
 8018150:	46c0      	nop			@ (mov r8, r8)
        _ux_system -> ux_system_cache_safe_memory_pool_min_free = _ux_system -> ux_system_cache_safe_memory_pool_free;

#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8018152:	4b05      	ldr	r3, [pc, #20]	@ (8018168 <_ux_utility_memory_allocate+0x20c>)
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	331c      	adds	r3, #28
 8018158:	0018      	movs	r0, r3
 801815a:	f000 f974 	bl	8018446 <_ux_utility_mutex_off>

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
 801815e:	693b      	ldr	r3, [r7, #16]
}                                
 8018160:	0018      	movs	r0, r3
 8018162:	46bd      	mov	sp, r7
 8018164:	b00c      	add	sp, #48	@ 0x30
 8018166:	bd80      	pop	{r7, pc}
 8018168:	20011850 	.word	0x20011850

0801816c <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 801816c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801816e:	b085      	sub	sp, #20
 8018170:	af00      	add	r7, sp, #0
 8018172:	60f8      	str	r0, [r7, #12]
 8018174:	60b9      	str	r1, [r7, #8]
 8018176:	607a      	str	r2, [r7, #4]
 8018178:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 801817a:	683b      	ldr	r3, [r7, #0]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d024      	beq.n	80181ca <_ux_utility_memory_allocate_mulc_safe+0x5e>
 8018180:	2000      	movs	r0, #0
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	0c19      	lsrs	r1, r3, #16
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	1c1e      	adds	r6, r3, #0
 801818a:	683b      	ldr	r3, [r7, #0]
 801818c:	0c1b      	lsrs	r3, r3, #16
 801818e:	683a      	ldr	r2, [r7, #0]
 8018190:	1c15      	adds	r5, r2, #0
 8018192:	b28a      	uxth	r2, r1
 8018194:	2a00      	cmp	r2, #0
 8018196:	d105      	bne.n	80181a4 <_ux_utility_memory_allocate_mulc_safe+0x38>
 8018198:	b29a      	uxth	r2, r3
 801819a:	2a00      	cmp	r2, #0
 801819c:	d013      	beq.n	80181c6 <_ux_utility_memory_allocate_mulc_safe+0x5a>
 801819e:	1c19      	adds	r1, r3, #0
 80181a0:	1c34      	adds	r4, r6, #0
 80181a2:	e003      	b.n	80181ac <_ux_utility_memory_allocate_mulc_safe+0x40>
 80181a4:	b29b      	uxth	r3, r3
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d10c      	bne.n	80181c4 <_ux_utility_memory_allocate_mulc_safe+0x58>
 80181aa:	1c2c      	adds	r4, r5, #0
 80181ac:	b2b3      	uxth	r3, r6
 80181ae:	b2aa      	uxth	r2, r5
 80181b0:	435a      	muls	r2, r3
 80181b2:	b2a3      	uxth	r3, r4
 80181b4:	b289      	uxth	r1, r1
 80181b6:	434b      	muls	r3, r1
 80181b8:	0c12      	lsrs	r2, r2, #16
 80181ba:	189b      	adds	r3, r3, r2
 80181bc:	141b      	asrs	r3, r3, #16
 80181be:	b29b      	uxth	r3, r3
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d000      	beq.n	80181c6 <_ux_utility_memory_allocate_mulc_safe+0x5a>
 80181c4:	2001      	movs	r0, #1
 80181c6:	1e03      	subs	r3, r0, #0
 80181c8:	d109      	bne.n	80181de <_ux_utility_memory_allocate_mulc_safe+0x72>
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	683a      	ldr	r2, [r7, #0]
 80181ce:	435a      	muls	r2, r3
 80181d0:	68b9      	ldr	r1, [r7, #8]
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	0018      	movs	r0, r3
 80181d6:	f7ff fec1 	bl	8017f5c <_ux_utility_memory_allocate>
 80181da:	0003      	movs	r3, r0
 80181dc:	e000      	b.n	80181e0 <_ux_utility_memory_allocate_mulc_safe+0x74>
 80181de:	2300      	movs	r3, #0
}
 80181e0:	0018      	movs	r0, r3
 80181e2:	46bd      	mov	sp, r7
 80181e4:	b005      	add	sp, #20
 80181e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080181e8 <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b086      	sub	sp, #24
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	60f8      	str	r0, [r7, #12]
 80181f0:	60b9      	str	r1, [r7, #8]
 80181f2:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 80181f4:	68bb      	ldr	r3, [r7, #8]
 80181f6:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 80181fc:	e007      	b.n	801820e <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 80181fe:	697a      	ldr	r2, [r7, #20]
 8018200:	1c53      	adds	r3, r2, #1
 8018202:	617b      	str	r3, [r7, #20]
 8018204:	693b      	ldr	r3, [r7, #16]
 8018206:	1c59      	adds	r1, r3, #1
 8018208:	6139      	str	r1, [r7, #16]
 801820a:	7812      	ldrb	r2, [r2, #0]
 801820c:	701a      	strb	r2, [r3, #0]
    while(length--)
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	1e5a      	subs	r2, r3, #1
 8018212:	607a      	str	r2, [r7, #4]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d1f2      	bne.n	80181fe <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 8018218:	46c0      	nop			@ (mov r8, r8)
}
 801821a:	46bd      	mov	sp, r7
 801821c:	b006      	add	sp, #24
 801821e:	bd80      	pop	{r7, pc}

08018220 <_ux_utility_memory_free>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b086      	sub	sp, #24
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
UCHAR               *regular_start, *regular_end;
UCHAR               *cache_safe_start, *cache_safe_end;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 8018228:	4b49      	ldr	r3, [pc, #292]	@ (8018350 <_ux_utility_memory_free+0x130>)
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	331c      	adds	r3, #28
 801822e:	0018      	movs	r0, r3
 8018230:	f000 f915 	bl	801845e <_ux_utility_mutex_on>
    }
#endif

    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	3b10      	subs	r3, #16
 8018238:	617b      	str	r3, [r7, #20]
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 801823a:	697b      	ldr	r3, [r7, #20]
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	3310      	adds	r3, #16
 8018240:	60fb      	str	r3, [r7, #12]

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 8018242:	697b      	ldr	r3, [r7, #20]
 8018244:	685a      	ldr	r2, [r3, #4]
 8018246:	2380      	movs	r3, #128	@ 0x80
 8018248:	061b      	lsls	r3, r3, #24
 801824a:	429a      	cmp	r2, r3
 801824c:	d010      	beq.n	8018270 <_ux_utility_memory_free+0x50>
        memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_CACHE_SAFE_MEMORY))
 801824e:	697b      	ldr	r3, [r7, #20]
 8018250:	685b      	ldr	r3, [r3, #4]
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 8018252:	4a40      	ldr	r2, [pc, #256]	@ (8018354 <_ux_utility_memory_free+0x134>)
 8018254:	4293      	cmp	r3, r2
 8018256:	d00b      	beq.n	8018270 <_ux_utility_memory_free+0x50>
    {

        /* Not valid. Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8018258:	4b3d      	ldr	r3, [pc, #244]	@ (8018350 <_ux_utility_memory_free+0x130>)
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	331c      	adds	r3, #28
 801825e:	0018      	movs	r0, r3
 8018260:	f000 f8f1 	bl	8018446 <_ux_utility_mutex_off>

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 8018264:	2219      	movs	r2, #25
 8018266:	2108      	movs	r1, #8
 8018268:	2002      	movs	r0, #2
 801826a:	f7ff fc5f 	bl	8017b2c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_CORRUPTED, memory, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return to caller.  */
        return;
 801826e:	e06c      	b.n	801834a <_ux_utility_memory_free+0x12a>
        _ux_system -> ux_system_cache_safe_memory_pool_alloc_total -= memory_block -> ux_memory_block_size;
    }
#endif

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8018270:	697b      	ldr	r3, [r7, #20]
 8018272:	2200      	movs	r2, #0
 8018274:	605a      	str	r2, [r3, #4]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 8018276:	e007      	b.n	8018288 <_ux_utility_memory_free+0x68>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 8018278:	697b      	ldr	r3, [r7, #20]
 801827a:	68db      	ldr	r3, [r3, #12]
 801827c:	685b      	ldr	r3, [r3, #4]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d107      	bne.n	8018292 <_ux_utility_memory_free+0x72>

            /* The memory block before is free. This will be our starting point to 
               concatenate memory.  */
            memory_block =  memory_block -> ux_memory_block_previous;
 8018282:	697b      	ldr	r3, [r7, #20]
 8018284:	68db      	ldr	r3, [r3, #12]
 8018286:	617b      	str	r3, [r7, #20]
     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 8018288:	697b      	ldr	r3, [r7, #20]
 801828a:	68db      	ldr	r3, [r3, #12]
 801828c:	2b00      	cmp	r3, #0
 801828e:	d1f3      	bne.n	8018278 <_ux_utility_memory_free+0x58>
 8018290:	e000      	b.n	8018294 <_ux_utility_memory_free+0x74>

        else

            /* The previous memory block is not free.  */
            break;
 8018292:	46c0      	nop			@ (mov r8, r8)
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 8018294:	697b      	ldr	r3, [r7, #20]
 8018296:	689b      	ldr	r3, [r3, #8]
 8018298:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 801829a:	e01a      	b.n	80182d2 <_ux_utility_memory_free+0xb2>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status != UX_MEMORY_UNUSED)
 801829c:	693b      	ldr	r3, [r7, #16]
 801829e:	685b      	ldr	r3, [r3, #4]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d006      	beq.n	80182b2 <_ux_utility_memory_free+0x92>
        {

            /* Yes, move to next block.  */
            memory_block -> ux_memory_block_next =  next_block;
 80182a4:	697b      	ldr	r3, [r7, #20]
 80182a6:	693a      	ldr	r2, [r7, #16]
 80182a8:	609a      	str	r2, [r3, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 80182aa:	693b      	ldr	r3, [r7, #16]
 80182ac:	697a      	ldr	r2, [r7, #20]
 80182ae:	60da      	str	r2, [r3, #12]
            break;
 80182b0:	e012      	b.n	80182d8 <_ux_utility_memory_free+0xb8>
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 80182b2:	693b      	ldr	r3, [r7, #16]
 80182b4:	689a      	ldr	r2, [r3, #8]
 80182b6:	697b      	ldr	r3, [r7, #20]
 80182b8:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 80182ba:	697b      	ldr	r3, [r7, #20]
 80182bc:	681a      	ldr	r2, [r3, #0]
 80182be:	693b      	ldr	r3, [r7, #16]
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	18d3      	adds	r3, r2, r3
 80182c4:	3310      	adds	r3, #16
 80182c6:	001a      	movs	r2, r3
 80182c8:	697b      	ldr	r3, [r7, #20]
 80182ca:	601a      	str	r2, [r3, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 80182cc:	693b      	ldr	r3, [r7, #16]
 80182ce:	689b      	ldr	r3, [r3, #8]
 80182d0:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 80182d2:	693b      	ldr	r3, [r7, #16]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d1e1      	bne.n	801829c <_ux_utility_memory_free+0x7c>
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 80182d8:	4b1d      	ldr	r3, [pc, #116]	@ (8018350 <_ux_utility_memory_free+0x130>)
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	68da      	ldr	r2, [r3, #12]
 80182de:	4b1c      	ldr	r3, [pc, #112]	@ (8018350 <_ux_utility_memory_free+0x130>)
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	429a      	cmp	r2, r3
 80182e6:	d108      	bne.n	80182fa <_ux_utility_memory_free+0xda>
    {

        /* There is only one regular memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 80182e8:	4b19      	ldr	r3, [pc, #100]	@ (8018350 <_ux_utility_memory_free+0x130>)
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	6899      	ldr	r1, [r3, #8]
 80182ee:	4b18      	ldr	r3, [pc, #96]	@ (8018350 <_ux_utility_memory_free+0x130>)
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	68fa      	ldr	r2, [r7, #12]
 80182f4:	188a      	adds	r2, r1, r2
 80182f6:	609a      	str	r2, [r3, #8]
 80182f8:	e020      	b.n	801833c <_ux_utility_memory_free+0x11c>
    }
    else
    {

        /* Which pool is this memory in ?  */
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
 80182fa:	4b15      	ldr	r3, [pc, #84]	@ (8018350 <_ux_utility_memory_free+0x130>)
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	60bb      	str	r3, [r7, #8]
        
        /* If the memory address is in this range, we are in the regular memory pool.  */
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 8018302:	697a      	ldr	r2, [r7, #20]
 8018304:	68bb      	ldr	r3, [r7, #8]
 8018306:	429a      	cmp	r2, r3
 8018308:	d310      	bcc.n	801832c <_ux_utility_memory_free+0x10c>
 801830a:	4b11      	ldr	r3, [pc, #68]	@ (8018350 <_ux_utility_memory_free+0x130>)
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	685b      	ldr	r3, [r3, #4]
 8018310:	68ba      	ldr	r2, [r7, #8]
 8018312:	18d3      	adds	r3, r2, r3
 8018314:	697a      	ldr	r2, [r7, #20]
 8018316:	429a      	cmp	r2, r3
 8018318:	d208      	bcs.n	801832c <_ux_utility_memory_free+0x10c>

            /* Update the regular memory pool.  */
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 801831a:	4b0d      	ldr	r3, [pc, #52]	@ (8018350 <_ux_utility_memory_free+0x130>)
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	6899      	ldr	r1, [r3, #8]
 8018320:	4b0b      	ldr	r3, [pc, #44]	@ (8018350 <_ux_utility_memory_free+0x130>)
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	68fa      	ldr	r2, [r7, #12]
 8018326:	188a      	adds	r2, r1, r2
 8018328:	609a      	str	r2, [r3, #8]
 801832a:	e007      	b.n	801833c <_ux_utility_memory_free+0x11c>

        else
        
            /* Update the cache safe memory pool.  */
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 801832c:	4b08      	ldr	r3, [pc, #32]	@ (8018350 <_ux_utility_memory_free+0x130>)
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	6959      	ldr	r1, [r3, #20]
 8018332:	4b07      	ldr	r3, [pc, #28]	@ (8018350 <_ux_utility_memory_free+0x130>)
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	68fa      	ldr	r2, [r7, #12]
 8018338:	188a      	adds	r2, r1, r2
 801833a:	615a      	str	r2, [r3, #20]
        
    }

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 801833c:	4b04      	ldr	r3, [pc, #16]	@ (8018350 <_ux_utility_memory_free+0x130>)
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	331c      	adds	r3, #28
 8018342:	0018      	movs	r0, r3
 8018344:	f000 f87f 	bl	8018446 <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 8018348:	46c0      	nop			@ (mov r8, r8)
}
 801834a:	46bd      	mov	sp, r7
 801834c:	b006      	add	sp, #24
 801834e:	bd80      	pop	{r7, pc}
 8018350:	20011850 	.word	0x20011850
 8018354:	80000001 	.word	0x80000001

08018358 <_ux_utility_memory_free_block_best_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UX_MEMORY_BLOCK  *_ux_utility_memory_free_block_best_get(ULONG memory_cache_flag, 
                                                        ULONG memory_size_requested)
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b084      	sub	sp, #16
 801835c:	af00      	add	r7, sp, #0
 801835e:	6078      	str	r0, [r7, #4]
 8018360:	6039      	str	r1, [r7, #0]
UX_MEMORY_BLOCK     *memory_block;
UX_MEMORY_BLOCK     *best_memory_block;
    

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
 8018362:	2300      	movs	r3, #0
 8018364:	60bb      	str	r3, [r7, #8]
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d003      	beq.n	8018374 <_ux_utility_memory_free_block_best_get+0x1c>
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	2b01      	cmp	r3, #1
 8018370:	d005      	beq.n	801837e <_ux_utility_memory_free_block_best_get+0x26>
 8018372:	e009      	b.n	8018388 <_ux_utility_memory_free_block_best_get+0x30>
    {

        case UX_REGULAR_MEMORY            :

            /* Start at the beginning of the regular memory pool.  */
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 8018374:	4b17      	ldr	r3, [pc, #92]	@ (80183d4 <_ux_utility_memory_free_block_best_get+0x7c>)
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	60fb      	str	r3, [r7, #12]
            break;
 801837c:	e006      	b.n	801838c <_ux_utility_memory_free_block_best_get+0x34>
            
        case UX_CACHE_SAFE_MEMORY       :

            /* Start at the beginning of the cache safe memory pool.  */
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 801837e:	4b15      	ldr	r3, [pc, #84]	@ (80183d4 <_ux_utility_memory_free_block_best_get+0x7c>)
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	68db      	ldr	r3, [r3, #12]
 8018384:	60fb      	str	r3, [r7, #12]
            break;
 8018386:	e001      	b.n	801838c <_ux_utility_memory_free_block_best_get+0x34>
        
        default                            :
        
            /* Wrong memory type.  */
            return(UX_NULL);
 8018388:	2300      	movs	r3, #0
 801838a:	e01e      	b.n	80183ca <_ux_utility_memory_free_block_best_get+0x72>

    }

    /* Loop on all memory blocks from the beginning.  */
    while (memory_block != UX_NULL)
 801838c:	e019      	b.n	80183c2 <_ux_utility_memory_free_block_best_get+0x6a>
    {

        /* Check the memory block status.  */
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	685b      	ldr	r3, [r3, #4]
 8018392:	2b00      	cmp	r3, #0
 8018394:	d112      	bne.n	80183bc <_ux_utility_memory_free_block_best_get+0x64>
        {

            /* Check the size of this free block and see if it will 
               fit the memory requirement.  */
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	683a      	ldr	r2, [r7, #0]
 801839c:	429a      	cmp	r2, r3
 801839e:	d20d      	bcs.n	80183bc <_ux_utility_memory_free_block_best_get+0x64>
            {
                
                /* This memory block will do. Now see if it is the best.
                   The best memory block is the one whose memory is closest
                   to the memory requested.  */
                if (best_memory_block == UX_NULL)
 80183a0:	68bb      	ldr	r3, [r7, #8]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d102      	bne.n	80183ac <_ux_utility_memory_free_block_best_get+0x54>

                    /* Initialize the best block with the first free one.  */
                    best_memory_block =  memory_block;
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	60bb      	str	r3, [r7, #8]
 80183aa:	e007      	b.n	80183bc <_ux_utility_memory_free_block_best_get+0x64>
                else
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	681a      	ldr	r2, [r3, #0]
 80183b0:	68bb      	ldr	r3, [r7, #8]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d201      	bcs.n	80183bc <_ux_utility_memory_free_block_best_get+0x64>

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	60bb      	str	r3, [r7, #8]
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	689b      	ldr	r3, [r3, #8]
 80183c0:	60fb      	str	r3, [r7, #12]
    while (memory_block != UX_NULL)
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d1e2      	bne.n	801838e <_ux_utility_memory_free_block_best_get+0x36>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
 80183c8:	68bb      	ldr	r3, [r7, #8]
}                                
 80183ca:	0018      	movs	r0, r3
 80183cc:	46bd      	mov	sp, r7
 80183ce:	b004      	add	sp, #16
 80183d0:	bd80      	pop	{r7, pc}
 80183d2:	46c0      	nop			@ (mov r8, r8)
 80183d4:	20011850 	.word	0x20011850

080183d8 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 80183d8:	b580      	push	{r7, lr}
 80183da:	b086      	sub	sp, #24
 80183dc:	af00      	add	r7, sp, #0
 80183de:	60f8      	str	r0, [r7, #12]
 80183e0:	607a      	str	r2, [r7, #4]
 80183e2:	230b      	movs	r3, #11
 80183e4:	18fb      	adds	r3, r7, r3
 80183e6:	1c0a      	adds	r2, r1, #0
 80183e8:	701a      	strb	r2, [r3, #0]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 80183ee:	e006      	b.n	80183fe <_ux_utility_memory_set+0x26>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 80183f0:	697b      	ldr	r3, [r7, #20]
 80183f2:	1c5a      	adds	r2, r3, #1
 80183f4:	617a      	str	r2, [r7, #20]
 80183f6:	220b      	movs	r2, #11
 80183f8:	18ba      	adds	r2, r7, r2
 80183fa:	7812      	ldrb	r2, [r2, #0]
 80183fc:	701a      	strb	r2, [r3, #0]
    while(length--)
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	1e5a      	subs	r2, r3, #1
 8018402:	607a      	str	r2, [r7, #4]
 8018404:	2b00      	cmp	r3, #0
 8018406:	d1f3      	bne.n	80183f0 <_ux_utility_memory_set+0x18>
    }

    /* Return to caller.  */
    return; 
 8018408:	46c0      	nop			@ (mov r8, r8)
}
 801840a:	46bd      	mov	sp, r7
 801840c:	b006      	add	sp, #24
 801840e:	bd80      	pop	{r7, pc}

08018410 <_ux_utility_mutex_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 8018410:	b580      	push	{r7, lr}
 8018412:	b084      	sub	sp, #16
 8018414:	af00      	add	r7, sp, #0
 8018416:	6078      	str	r0, [r7, #4]
 8018418:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 801841a:	6839      	ldr	r1, [r7, #0]
 801841c:	6878      	ldr	r0, [r7, #4]
 801841e:	2334      	movs	r3, #52	@ 0x34
 8018420:	2200      	movs	r2, #0
 8018422:	f7fb fa0f 	bl	8013844 <_txe_mutex_create>
 8018426:	0003      	movs	r3, r0
 8018428:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	2b00      	cmp	r3, #0
 801842e:	d005      	beq.n	801843c <_ux_utility_mutex_create+0x2c>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	001a      	movs	r2, r3
 8018434:	2108      	movs	r1, #8
 8018436:	2002      	movs	r0, #2
 8018438:	f7ff fb78 	bl	8017b2c <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 801843c:	68fb      	ldr	r3, [r7, #12]
}
 801843e:	0018      	movs	r0, r3
 8018440:	46bd      	mov	sp, r7
 8018442:	b004      	add	sp, #16
 8018444:	bd80      	pop	{r7, pc}

08018446 <_ux_utility_mutex_off>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 8018446:	b580      	push	{r7, lr}
 8018448:	b082      	sub	sp, #8
 801844a:	af00      	add	r7, sp, #0
 801844c:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	0018      	movs	r0, r3
 8018452:	f7fb faf3 	bl	8013a3c <_txe_mutex_put>

    /* Return to caller.  */
    return;
 8018456:	46c0      	nop			@ (mov r8, r8)
}
 8018458:	46bd      	mov	sp, r7
 801845a:	b002      	add	sp, #8
 801845c:	bd80      	pop	{r7, pc}

0801845e <_ux_utility_mutex_on>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 801845e:	b580      	push	{r7, lr}
 8018460:	b084      	sub	sp, #16
 8018462:	af00      	add	r7, sp, #0
 8018464:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 8018466:	2301      	movs	r3, #1
 8018468:	425a      	negs	r2, r3
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	0011      	movs	r1, r2
 801846e:	0018      	movs	r0, r3
 8018470:	f7fb fa86 	bl	8013980 <_txe_mutex_get>
 8018474:	0003      	movs	r3, r0
 8018476:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d006      	beq.n	801848c <_ux_utility_mutex_on+0x2e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	001a      	movs	r2, r3
 8018482:	2108      	movs	r1, #8
 8018484:	2002      	movs	r0, #2
 8018486:	f7ff fb51 	bl	8017b2c <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 801848a:	46c0      	nop			@ (mov r8, r8)
 801848c:	46c0      	nop			@ (mov r8, r8)
}
 801848e:	46bd      	mov	sp, r7
 8018490:	b004      	add	sp, #16
 8018492:	bd80      	pop	{r7, pc}

08018494 <_ux_utility_semaphore_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b086      	sub	sp, #24
 8018498:	af00      	add	r7, sp, #0
 801849a:	60f8      	str	r0, [r7, #12]
 801849c:	60b9      	str	r1, [r7, #8]
 801849e:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 80184a0:	687a      	ldr	r2, [r7, #4]
 80184a2:	68b9      	ldr	r1, [r7, #8]
 80184a4:	68f8      	ldr	r0, [r7, #12]
 80184a6:	231c      	movs	r3, #28
 80184a8:	f7fb fc4c 	bl	8013d44 <_txe_semaphore_create>
 80184ac:	0003      	movs	r3, r0
 80184ae:	617b      	str	r3, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 80184b0:	697b      	ldr	r3, [r7, #20]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d005      	beq.n	80184c2 <_ux_utility_semaphore_create+0x2e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80184b6:	697b      	ldr	r3, [r7, #20]
 80184b8:	001a      	movs	r2, r3
 80184ba:	2108      	movs	r1, #8
 80184bc:	2002      	movs	r0, #2
 80184be:	f7ff fb35 	bl	8017b2c <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 80184c2:	697b      	ldr	r3, [r7, #20]
}
 80184c4:	0018      	movs	r0, r3
 80184c6:	46bd      	mov	sp, r7
 80184c8:	b006      	add	sp, #24
 80184ca:	bd80      	pop	{r7, pc}

080184cc <_ux_utility_semaphore_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b084      	sub	sp, #16
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	0018      	movs	r0, r3
 80184d8:	f7fb fcca 	bl	8013e70 <_txe_semaphore_delete>
 80184dc:	0003      	movs	r3, r0
 80184de:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 80184e0:	68fb      	ldr	r3, [r7, #12]
}
 80184e2:	0018      	movs	r0, r3
 80184e4:	46bd      	mov	sp, r7
 80184e6:	b004      	add	sp, #16
 80184e8:	bd80      	pop	{r7, pc}
	...

080184ec <_ux_utility_semaphore_get>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(UX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 80184ec:	b590      	push	{r4, r7, lr}
 80184ee:	b093      	sub	sp, #76	@ 0x4c
 80184f0:	af06      	add	r7, sp, #24
 80184f2:	6078      	str	r0, [r7, #4]
 80184f4:	6039      	str	r1, [r7, #0]
ULONG       time_slice;
UX_THREAD   *next_thread;
UX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 80184f6:	f7f9 fe33 	bl	8012160 <_tx_thread_identify>
 80184fa:	0003      	movs	r3, r0
 80184fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 80184fe:	231c      	movs	r3, #28
 8018500:	18fc      	adds	r4, r7, r3
 8018502:	2320      	movs	r3, #32
 8018504:	18fa      	adds	r2, r7, r3
 8018506:	2324      	movs	r3, #36	@ 0x24
 8018508:	18f9      	adds	r1, r7, r3
 801850a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801850c:	2308      	movs	r3, #8
 801850e:	18fb      	adds	r3, r7, r3
 8018510:	9304      	str	r3, [sp, #16]
 8018512:	230c      	movs	r3, #12
 8018514:	18fb      	adds	r3, r7, r3
 8018516:	9303      	str	r3, [sp, #12]
 8018518:	2310      	movs	r3, #16
 801851a:	18fb      	adds	r3, r7, r3
 801851c:	9302      	str	r3, [sp, #8]
 801851e:	2314      	movs	r3, #20
 8018520:	18fb      	adds	r3, r7, r3
 8018522:	9301      	str	r3, [sp, #4]
 8018524:	2318      	movs	r3, #24
 8018526:	18fb      	adds	r3, r7, r3
 8018528:	9300      	str	r3, [sp, #0]
 801852a:	0023      	movs	r3, r4
 801852c:	f7fb fe60 	bl	80141f0 <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 8018530:	4b0b      	ldr	r3, [pc, #44]	@ (8018560 <_ux_utility_semaphore_get+0x74>)
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	699a      	ldr	r2, [r3, #24]
 8018536:	69bb      	ldr	r3, [r7, #24]
 8018538:	429a      	cmp	r2, r3
 801853a:	d203      	bcs.n	8018544 <_ux_utility_semaphore_get+0x58>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 801853c:	4b08      	ldr	r3, [pc, #32]	@ (8018560 <_ux_utility_semaphore_get+0x74>)
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	69ba      	ldr	r2, [r7, #24]
 8018542:	619a      	str	r2, [r3, #24]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 8018544:	683a      	ldr	r2, [r7, #0]
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	0011      	movs	r1, r2
 801854a:	0018      	movs	r0, r3
 801854c:	f7fb fcce 	bl	8013eec <_txe_semaphore_get>
 8018550:	0003      	movs	r3, r0
 8018552:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Return completion status.  */
    return(status);
 8018554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8018556:	0018      	movs	r0, r3
 8018558:	46bd      	mov	sp, r7
 801855a:	b00d      	add	sp, #52	@ 0x34
 801855c:	bd90      	pop	{r4, r7, pc}
 801855e:	46c0      	nop			@ (mov r8, r8)
 8018560:	20011850 	.word	0x20011850

08018564 <_ux_utility_semaphore_put>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 8018564:	b580      	push	{r7, lr}
 8018566:	b084      	sub	sp, #16
 8018568:	af00      	add	r7, sp, #0
 801856a:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	0018      	movs	r0, r3
 8018570:	f7fb fd00 	bl	8013f74 <_txe_semaphore_put>
 8018574:	0003      	movs	r3, r0
 8018576:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8018578:	68fb      	ldr	r3, [r7, #12]
}
 801857a:	0018      	movs	r0, r3
 801857c:	46bd      	mov	sp, r7
 801857e:	b004      	add	sp, #16
 8018580:	bd80      	pop	{r7, pc}

08018582 <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 8018582:	b580      	push	{r7, lr}
 8018584:	b084      	sub	sp, #16
 8018586:	af00      	add	r7, sp, #0
 8018588:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	1c5a      	adds	r2, r3, #1
 801858e:	607a      	str	r2, [r7, #4]
 8018590:	781a      	ldrb	r2, [r3, #0]
 8018592:	200e      	movs	r0, #14
 8018594:	183b      	adds	r3, r7, r0
 8018596:	801a      	strh	r2, [r3, #0]
    value |=  (USHORT)(*address << 8);
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	781b      	ldrb	r3, [r3, #0]
 801859c:	021b      	lsls	r3, r3, #8
 801859e:	b299      	uxth	r1, r3
 80185a0:	183b      	adds	r3, r7, r0
 80185a2:	183a      	adds	r2, r7, r0
 80185a4:	8812      	ldrh	r2, [r2, #0]
 80185a6:	430a      	orrs	r2, r1
 80185a8:	801a      	strh	r2, [r3, #0]

    /* Return to caller.  */
    return((ULONG) value);
 80185aa:	183b      	adds	r3, r7, r0
 80185ac:	881b      	ldrh	r3, [r3, #0]
}
 80185ae:	0018      	movs	r0, r3
 80185b0:	46bd      	mov	sp, r7
 80185b2:	b004      	add	sp, #16
 80185b4:	bd80      	pop	{r7, pc}

080185b6 <_ux_utility_short_get_big_endian>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG   _ux_utility_short_get_big_endian(UCHAR * address)
{
 80185b6:	b580      	push	{r7, lr}
 80185b8:	b084      	sub	sp, #16
 80185ba:	af00      	add	r7, sp, #0
 80185bc:	6078      	str	r0, [r7, #4]

USHORT  value;

    /* We read a byte at a time from the address.  */
    value =  (USHORT)((*address++) << 8);
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	1c5a      	adds	r2, r3, #1
 80185c2:	607a      	str	r2, [r7, #4]
 80185c4:	781b      	ldrb	r3, [r3, #0]
 80185c6:	001a      	movs	r2, r3
 80185c8:	200e      	movs	r0, #14
 80185ca:	183b      	adds	r3, r7, r0
 80185cc:	0212      	lsls	r2, r2, #8
 80185ce:	801a      	strh	r2, [r3, #0]
    value =  (USHORT)(value | *address);
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	781b      	ldrb	r3, [r3, #0]
 80185d4:	0019      	movs	r1, r3
 80185d6:	183b      	adds	r3, r7, r0
 80185d8:	183a      	adds	r2, r7, r0
 80185da:	8812      	ldrh	r2, [r2, #0]
 80185dc:	430a      	orrs	r2, r1
 80185de:	801a      	strh	r2, [r3, #0]

    /* Return 16-bit value.  */
    return((ULONG) value);
 80185e0:	183b      	adds	r3, r7, r0
 80185e2:	881b      	ldrh	r3, [r3, #0]
}
 80185e4:	0018      	movs	r0, r3
 80185e6:	46bd      	mov	sp, r7
 80185e8:	b004      	add	sp, #16
 80185ea:	bd80      	pop	{r7, pc}

080185ec <_ux_utility_short_put_big_endian>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_short_put_big_endian(UCHAR * address, USHORT value)
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b084      	sub	sp, #16
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	6078      	str	r0, [r7, #4]
 80185f4:	000a      	movs	r2, r1
 80185f6:	1cbb      	adds	r3, r7, #2
 80185f8:	801a      	strh	r2, [r3, #0]
USHORT  low_byte_value;
USHORT  high_byte_value;

    
    /* First we swap the value bytes. */
    low_byte_value =  value >> 8;
 80185fa:	200e      	movs	r0, #14
 80185fc:	183b      	adds	r3, r7, r0
 80185fe:	1cba      	adds	r2, r7, #2
 8018600:	8812      	ldrh	r2, [r2, #0]
 8018602:	0a12      	lsrs	r2, r2, #8
 8018604:	801a      	strh	r2, [r3, #0]
    high_byte_value =  (USHORT)(value<< 8);
 8018606:	210c      	movs	r1, #12
 8018608:	187b      	adds	r3, r7, r1
 801860a:	1cba      	adds	r2, r7, #2
 801860c:	8812      	ldrh	r2, [r2, #0]
 801860e:	0212      	lsls	r2, r2, #8
 8018610:	801a      	strh	r2, [r3, #0]
    value =  high_byte_value | low_byte_value;
 8018612:	1cbb      	adds	r3, r7, #2
 8018614:	1879      	adds	r1, r7, r1
 8018616:	183a      	adds	r2, r7, r0
 8018618:	8809      	ldrh	r1, [r1, #0]
 801861a:	8812      	ldrh	r2, [r2, #0]
 801861c:	430a      	orrs	r2, r1
 801861e:	801a      	strh	r2, [r3, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	1c5a      	adds	r2, r3, #1
 8018624:	607a      	str	r2, [r7, #4]
 8018626:	1cba      	adds	r2, r7, #2
 8018628:	8812      	ldrh	r2, [r2, #0]
 801862a:	b2d2      	uxtb	r2, r2
 801862c:	701a      	strb	r2, [r3, #0]
    *address=     (UCHAR) ((value >> 8) & 0xff);
 801862e:	1cbb      	adds	r3, r7, #2
 8018630:	881b      	ldrh	r3, [r3, #0]
 8018632:	0a1b      	lsrs	r3, r3, #8
 8018634:	b29b      	uxth	r3, r3
 8018636:	b2da      	uxtb	r2, r3
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	701a      	strb	r2, [r3, #0]

    /* Return to caller. */
    return;
 801863c:	46c0      	nop			@ (mov r8, r8)
}
 801863e:	46bd      	mov	sp, r7
 8018640:	b004      	add	sp, #16
 8018642:	bd80      	pop	{r7, pc}

08018644 <_ux_utility_string_length_check>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 8018644:	b580      	push	{r7, lr}
 8018646:	b086      	sub	sp, #24
 8018648:	af00      	add	r7, sp, #0
 801864a:	60f8      	str	r0, [r7, #12]
 801864c:	60b9      	str	r1, [r7, #8]
 801864e:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d101      	bne.n	801865a <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 8018656:	23ff      	movs	r3, #255	@ 0xff
 8018658:	e01d      	b.n	8018696 <_ux_utility_string_length_check+0x52>

    string_length = 0;
 801865a:	2300      	movs	r3, #0
 801865c:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 801865e:	68fa      	ldr	r2, [r7, #12]
 8018660:	697b      	ldr	r3, [r7, #20]
 8018662:	18d3      	adds	r3, r2, r3
 8018664:	781b      	ldrb	r3, [r3, #0]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d00d      	beq.n	8018686 <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 801866a:	697b      	ldr	r3, [r7, #20]
 801866c:	3301      	adds	r3, #1
 801866e:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 8018670:	697a      	ldr	r2, [r7, #20]
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	429a      	cmp	r2, r3
 8018676:	d9f2      	bls.n	801865e <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 8018678:	22ff      	movs	r2, #255	@ 0xff
 801867a:	2108      	movs	r1, #8
 801867c:	2002      	movs	r0, #2
 801867e:	f7ff fa55 	bl	8017b2c <_ux_system_error_handler>

            return(UX_ERROR);
 8018682:	23ff      	movs	r3, #255	@ 0xff
 8018684:	e007      	b.n	8018696 <_ux_utility_string_length_check+0x52>
            break;
 8018686:	46c0      	nop			@ (mov r8, r8)
        }
    }

    if (string_length_ptr)
 8018688:	68bb      	ldr	r3, [r7, #8]
 801868a:	2b00      	cmp	r3, #0
 801868c:	d002      	beq.n	8018694 <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	697a      	ldr	r2, [r7, #20]
 8018692:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 8018694:	2300      	movs	r3, #0
}
 8018696:	0018      	movs	r0, r3
 8018698:	46bd      	mov	sp, r7
 801869a:	b006      	add	sp, #24
 801869c:	bd80      	pop	{r7, pc}

0801869e <_ux_utility_thread_create>:
UINT  _ux_utility_thread_create(UX_THREAD *thread_ptr, CHAR *name, 
                VOID (*entry_function)(ULONG), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start)
{
 801869e:	b590      	push	{r4, r7, lr}
 80186a0:	b08f      	sub	sp, #60	@ 0x3c
 80186a2:	af08      	add	r7, sp, #32
 80186a4:	60f8      	str	r0, [r7, #12]
 80186a6:	60b9      	str	r1, [r7, #8]
 80186a8:	607a      	str	r2, [r7, #4]
 80186aa:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Call ThreadX to create USBX thread.  */
    status =  tx_thread_create(thread_ptr,name,entry_function,entry_input,
 80186ac:	683c      	ldr	r4, [r7, #0]
 80186ae:	687a      	ldr	r2, [r7, #4]
 80186b0:	68b9      	ldr	r1, [r7, #8]
 80186b2:	68f8      	ldr	r0, [r7, #12]
 80186b4:	23b0      	movs	r3, #176	@ 0xb0
 80186b6:	9306      	str	r3, [sp, #24]
 80186b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80186ba:	9305      	str	r3, [sp, #20]
 80186bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186be:	9304      	str	r3, [sp, #16]
 80186c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80186c2:	9303      	str	r3, [sp, #12]
 80186c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186c6:	9302      	str	r3, [sp, #8]
 80186c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186ca:	9301      	str	r3, [sp, #4]
 80186cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186ce:	9300      	str	r3, [sp, #0]
 80186d0:	0023      	movs	r3, r4
 80186d2:	f7fb fc6f 	bl	8013fb4 <_txe_thread_create>
 80186d6:	0003      	movs	r3, r0
 80186d8:	617b      	str	r3, [r7, #20]
                    stack_start,stack_size, priority,preempt_threshold,time_slice,auto_start);

    /* Check for status.  */
    if (status != UX_SUCCESS)
 80186da:	697b      	ldr	r3, [r7, #20]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d005      	beq.n	80186ec <_ux_utility_thread_create+0x4e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80186e0:	697b      	ldr	r3, [r7, #20]
 80186e2:	001a      	movs	r2, r3
 80186e4:	2108      	movs	r1, #8
 80186e6:	2002      	movs	r0, #2
 80186e8:	f7ff fa20 	bl	8017b2c <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_THREAD_ERROR, thread_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 80186ec:	697b      	ldr	r3, [r7, #20]
}
 80186ee:	0018      	movs	r0, r3
 80186f0:	46bd      	mov	sp, r7
 80186f2:	b007      	add	sp, #28
 80186f4:	bd90      	pop	{r4, r7, pc}

080186f6 <_ux_utility_thread_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_delete(UX_THREAD *thread_ptr)
{
 80186f6:	b580      	push	{r7, lr}
 80186f8:	b084      	sub	sp, #16
 80186fa:	af00      	add	r7, sp, #0
 80186fc:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to terminate the USBX thread.  */
    tx_thread_terminate(thread_ptr);
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	0018      	movs	r0, r3
 8018702:	f7fb fe01 	bl	8014308 <_txe_thread_terminate>

    /* Call ThreadX to delete the USBX thread.  */
    status =  tx_thread_delete(thread_ptr);
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	0018      	movs	r0, r3
 801870a:	f7fb fd45 	bl	8014198 <_txe_thread_delete>
 801870e:	0003      	movs	r3, r0
 8018710:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8018712:	68fb      	ldr	r3, [r7, #12]
}
 8018714:	0018      	movs	r0, r3
 8018716:	46bd      	mov	sp, r7
 8018718:	b004      	add	sp, #16
 801871a:	bd80      	pop	{r7, pc}

0801871c <_ux_utility_thread_relinquish>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_thread_relinquish(VOID)
{
 801871c:	b580      	push	{r7, lr}
 801871e:	af00      	add	r7, sp, #0

    /* Call ThreadX to relinquish a USBX thread.  */
    tx_thread_relinquish();
 8018720:	f7fb fd96 	bl	8014250 <_txe_thread_relinquish>

}
 8018724:	46c0      	nop			@ (mov r8, r8)
 8018726:	46bd      	mov	sp, r7
 8018728:	bd80      	pop	{r7, pc}

0801872a <_ux_utility_thread_resume>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_resume(UX_THREAD *thread_ptr)
{
 801872a:	b580      	push	{r7, lr}
 801872c:	b084      	sub	sp, #16
 801872e:	af00      	add	r7, sp, #0
 8018730:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to resume USBX thread.  */
    status =  tx_thread_resume(thread_ptr);
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	0018      	movs	r0, r3
 8018736:	f7fb fda7 	bl	8014288 <_txe_thread_resume>
 801873a:	0003      	movs	r3, r0
 801873c:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 801873e:	68fb      	ldr	r3, [r7, #12]
}
 8018740:	0018      	movs	r0, r3
 8018742:	46bd      	mov	sp, r7
 8018744:	b004      	add	sp, #16
 8018746:	bd80      	pop	{r7, pc}

08018748 <_ux_utility_thread_suspend>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_suspend(UX_THREAD *thread_ptr)
{
 8018748:	b580      	push	{r7, lr}
 801874a:	b084      	sub	sp, #16
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to suspend USBX thread.  */
    status =  tx_thread_suspend(thread_ptr);
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	0018      	movs	r0, r3
 8018754:	f7fb fdb8 	bl	80142c8 <_txe_thread_suspend>
 8018758:	0003      	movs	r3, r0
 801875a:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 801875c:	68fb      	ldr	r3, [r7, #12]
}
 801875e:	0018      	movs	r0, r3
 8018760:	46bd      	mov	sp, r7
 8018762:	b004      	add	sp, #16
 8018764:	bd80      	pop	{r7, pc}

08018766 <_ux_device_class_hid_activate>:
/*                                            added packet size assert,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 8018766:	b580      	push	{r7, lr}
 8018768:	b088      	sub	sp, #32
 801876a:	af00      	add	r7, sp, #0
 801876c:	6078      	str	r0, [r7, #4]

UX_SLAVE_INTERFACE                      *interface;
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS                          *class_inst;
UX_SLAVE_ENDPOINT                       *endpoint_interrupt;
UX_SLAVE_ENDPOINT                       *endpoint_in = UX_NULL;
 801876e:	2300      	movs	r3, #0
 8018770:	61bb      	str	r3, [r7, #24]
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
UX_SLAVE_ENDPOINT                       *endpoint_out = UX_NULL;
#endif

    /* Get the class container.  */
    class_inst =  command -> ux_slave_class_command_class_ptr;
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	6a1b      	ldr	r3, [r3, #32]
 8018776:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_inst -> ux_slave_class_instance;
 8018778:	697b      	ldr	r3, [r7, #20]
 801877a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801877c:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	689b      	ldr	r3, [r3, #8]
 8018782:	60fb      	str	r3, [r7, #12]

    /* Store the class instance into the interface.  */
    interface -> ux_slave_interface_class_instance =  (VOID *)hid;
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	693a      	ldr	r2, [r7, #16]
 8018788:	609a      	str	r2, [r3, #8]

    /* Now the opposite, store the interface in the class instance.  */
    hid -> ux_slave_class_hid_interface =  interface;
 801878a:	693b      	ldr	r3, [r7, #16]
 801878c:	68fa      	ldr	r2, [r7, #12]
 801878e:	601a      	str	r2, [r3, #0]

    /* Locate the endpoints.  */
    endpoint_interrupt =  interface -> ux_slave_interface_first_endpoint;
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018794:	61fb      	str	r3, [r7, #28]

    /* Check if interrupt IN endpoint exists.  */
    while (endpoint_interrupt != UX_NULL)
 8018796:	e010      	b.n	80187ba <_ux_device_class_hid_activate+0x54>
    {
        if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bmAttributes &
 8018798:	69fb      	ldr	r3, [r7, #28]
 801879a:	699b      	ldr	r3, [r3, #24]
 801879c:	2203      	movs	r2, #3
 801879e:	4013      	ands	r3, r2
 80187a0:	2b03      	cmp	r3, #3
 80187a2:	d107      	bne.n	80187b4 <_ux_device_class_hid_activate+0x4e>
             UX_MASK_ENDPOINT_TYPE) == UX_INTERRUPT_ENDPOINT)
        {
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 80187a4:	69fb      	ldr	r3, [r7, #28]
 80187a6:	695b      	ldr	r3, [r3, #20]
 80187a8:	2280      	movs	r2, #128	@ 0x80
 80187aa:	4013      	ands	r3, r2
 80187ac:	d002      	beq.n	80187b4 <_ux_device_class_hid_activate+0x4e>
                 UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
            {

                /* It's interrupt IN endpoint we need.  */
                endpoint_in = endpoint_interrupt;
 80187ae:	69fb      	ldr	r3, [r7, #28]
 80187b0:	61bb      	str	r3, [r7, #24]
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
                if (endpoint_out != UX_NULL)
#endif
                    break;
 80187b2:	e005      	b.n	80187c0 <_ux_device_class_hid_activate+0x5a>
            }
#endif
        }

        /* Try next endpoint.  */
        endpoint_interrupt =  endpoint_interrupt -> ux_slave_endpoint_next_endpoint;
 80187b4:	69fb      	ldr	r3, [r7, #28]
 80187b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80187b8:	61fb      	str	r3, [r7, #28]
    while (endpoint_interrupt != UX_NULL)
 80187ba:	69fb      	ldr	r3, [r7, #28]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d1eb      	bne.n	8018798 <_ux_device_class_hid_activate+0x32>
    }

    /* Check if we found right endpoint.  */
    if (endpoint_in == UX_NULL)
 80187c0:	69bb      	ldr	r3, [r7, #24]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d101      	bne.n	80187ca <_ux_device_class_hid_activate+0x64>
        return (UX_ERROR);
 80187c6:	23ff      	movs	r3, #255	@ 0xff
 80187c8:	e014      	b.n	80187f4 <_ux_device_class_hid_activate+0x8e>
    UX_ASSERT(UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH >=
              endpoint_in -> ux_slave_endpoint_transfer_request.
                            ux_slave_transfer_request_transfer_length);

    /* Default HID protocol is report protocol.  */
    hid -> ux_device_class_hid_protocol = UX_DEVICE_CLASS_HID_PROTOCOL_REPORT;
 80187ca:	693b      	ldr	r3, [r7, #16]
 80187cc:	2201      	movs	r2, #1
 80187ce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Save the endpoints in the hid instance.  */
    hid -> ux_device_class_hid_interrupt_endpoint         = endpoint_in;
 80187d0:	693b      	ldr	r3, [r7, #16]
 80187d2:	69ba      	ldr	r2, [r7, #24]
 80187d4:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_DEVICE_STANDALONE)

    /* Resume thread.  */
    _ux_device_thread_resume(&class_inst -> ux_slave_class_thread);
 80187d6:	697b      	ldr	r3, [r7, #20]
 80187d8:	3350      	adds	r3, #80	@ 0x50
 80187da:	0018      	movs	r0, r3
 80187dc:	f7ff ffa5 	bl	801872a <_ux_utility_thread_resume>
    hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
#endif


    /* If there is a activate function call it.  */
    if (hid -> ux_slave_class_hid_instance_activate != UX_NULL)
 80187e0:	693b      	ldr	r3, [r7, #16]
 80187e2:	695b      	ldr	r3, [r3, #20]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d004      	beq.n	80187f2 <_ux_device_class_hid_activate+0x8c>
    {

        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_activate(hid);
 80187e8:	693b      	ldr	r3, [r7, #16]
 80187ea:	695b      	ldr	r3, [r3, #20]
 80187ec:	693a      	ldr	r2, [r7, #16]
 80187ee:	0010      	movs	r0, r2
 80187f0:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, hid, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 80187f2:	2300      	movs	r3, #0
}
 80187f4:	0018      	movs	r0, r3
 80187f6:	46bd      	mov	sp, r7
 80187f8:	b008      	add	sp, #32
 80187fa:	bd80      	pop	{r7, pc}

080187fc <_ux_device_class_hid_control_request>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b08c      	sub	sp, #48	@ 0x30
 8018800:	af00      	add	r7, sp, #0
 8018802:	6078      	str	r0, [r7, #4]
ULONG                       descriptor_type;
UCHAR                       duration;
UX_SLAVE_CLASS_HID          *hid;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8018804:	4b5a      	ldr	r3, [pc, #360]	@ (8018970 <_ux_device_class_hid_control_request+0x174>)
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	3320      	adds	r3, #32
 801880a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 801880c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801880e:	336c      	adds	r3, #108	@ 0x6c
 8018810:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8018812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018814:	2255      	movs	r2, #85	@ 0x55
 8018816:	5c9b      	ldrb	r3, [r3, r2]
 8018818:	627b      	str	r3, [r7, #36]	@ 0x24
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 801881a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801881c:	3354      	adds	r3, #84	@ 0x54
 801881e:	3302      	adds	r3, #2
 8018820:	0018      	movs	r0, r3
 8018822:	f7ff feae 	bl	8018582 <_ux_utility_short_get>
 8018826:	0003      	movs	r3, r0
 8018828:	623b      	str	r3, [r7, #32]
    request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 801882a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801882c:	3354      	adds	r3, #84	@ 0x54
 801882e:	3304      	adds	r3, #4
 8018830:	0018      	movs	r0, r3
 8018832:	f7ff fea6 	bl	8018582 <_ux_utility_short_get>
 8018836:	0003      	movs	r3, r0
 8018838:	61fb      	str	r3, [r7, #28]
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 801883a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801883c:	3354      	adds	r3, #84	@ 0x54
 801883e:	3306      	adds	r3, #6
 8018840:	0018      	movs	r0, r3
 8018842:	f7ff fe9e 	bl	8018582 <_ux_utility_short_get>
 8018846:	0003      	movs	r3, r0
 8018848:	61bb      	str	r3, [r7, #24]

    /* Duration - upper byte of wValue.  */
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 801884a:	2317      	movs	r3, #23
 801884c:	18fb      	adds	r3, r7, r3
 801884e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018850:	2157      	movs	r1, #87	@ 0x57
 8018852:	5c52      	ldrb	r2, [r2, r1]
 8018854:	701a      	strb	r2, [r3, #0]
    
     /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	6a1b      	ldr	r3, [r3, #32]
 801885a:	613b      	str	r3, [r7, #16]
    
    /* Get the storage instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 801885c:	693b      	ldr	r3, [r7, #16]
 801885e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018860:	60fb      	str	r3, [r7, #12]

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 8018862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018864:	2b0b      	cmp	r3, #11
 8018866:	d900      	bls.n	801886a <_ux_device_class_hid_control_request+0x6e>
 8018868:	e079      	b.n	801895e <_ux_device_class_hid_control_request+0x162>
 801886a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801886c:	009a      	lsls	r2, r3, #2
 801886e:	4b41      	ldr	r3, [pc, #260]	@ (8018974 <_ux_device_class_hid_control_request+0x178>)
 8018870:	18d3      	adds	r3, r2, r3
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	469f      	mov	pc, r3
    {

        case UX_DEVICE_CLASS_HID_COMMAND_GET_REPORT:

            /* Send the requested report to the host.  */
            _ux_device_class_hid_report_get(hid, request_value, request_index, request_length);
 8018876:	69bb      	ldr	r3, [r7, #24]
 8018878:	69fa      	ldr	r2, [r7, #28]
 801887a:	6a39      	ldr	r1, [r7, #32]
 801887c:	68f8      	ldr	r0, [r7, #12]
 801887e:	f000 fbc1 	bl	8019004 <_ux_device_class_hid_report_get>
            break;
 8018882:	e06f      	b.n	8018964 <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_REPORT:

            /* Extract the descriptor type.  */
            descriptor_type =  (request_value & 0xff00) >> 8;
 8018884:	6a3b      	ldr	r3, [r7, #32]
 8018886:	0a1b      	lsrs	r3, r3, #8
 8018888:	22ff      	movs	r2, #255	@ 0xff
 801888a:	4013      	ands	r3, r2
 801888c:	60bb      	str	r3, [r7, #8]

            /* Get the requested report from the host.  */
            _ux_device_class_hid_report_set(hid, descriptor_type, request_index, request_length);
 801888e:	69bb      	ldr	r3, [r7, #24]
 8018890:	69fa      	ldr	r2, [r7, #28]
 8018892:	68b9      	ldr	r1, [r7, #8]
 8018894:	68f8      	ldr	r0, [r7, #12]
 8018896:	f000 fc4b 	bl	8019130 <_ux_device_class_hid_report_set>
            break;
 801889a:	e063      	b.n	8018964 <_ux_device_class_hid_control_request+0x168>

        case UX_GET_DESCRIPTOR:

            /* Send the requested descriptor to the host.  */
            _ux_device_class_hid_descriptor_send(hid, request_value, request_index, request_length);
 801889c:	69bb      	ldr	r3, [r7, #24]
 801889e:	69fa      	ldr	r2, [r7, #28]
 80188a0:	6a39      	ldr	r1, [r7, #32]
 80188a2:	68f8      	ldr	r0, [r7, #12]
 80188a4:	f000 f886 	bl	80189b4 <_ux_device_class_hid_descriptor_send>
            break;            
 80188a8:	e05c      	b.n	8018964 <_ux_device_class_hid_control_request+0x168>
        case UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE:
        case UX_DEVICE_CLASS_HID_COMMAND_SET_IDLE:

            /* Ignore Report ID for now.  */

            if (request == UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE)
 80188aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188ac:	2b02      	cmp	r3, #2
 80188ae:	d10c      	bne.n	80188ca <_ux_device_class_hid_control_request+0xce>
            {

                /* Send the idle rate.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80188b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188b6:	68db      	ldr	r3, [r3, #12]
 80188b8:	b2d2      	uxtb	r2, r2
 80188ba:	701a      	strb	r2, [r3, #0]
                _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 80188bc:	69ba      	ldr	r2, [r7, #24]
 80188be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188c0:	2101      	movs	r1, #1
 80188c2:	0018      	movs	r0, r3
 80188c4:	f004 fc56 	bl	801d174 <_ux_device_stack_transfer_request>
                        _ux_utility_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_IDLE_RATE, UX_OR);
#endif
                    }
                }
            }
            break;
 80188c8:	e04b      	b.n	8018962 <_ux_device_class_hid_control_request+0x166>
                if ((UCHAR)hid -> ux_device_class_hid_event_idle_rate != duration)
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80188ce:	b2db      	uxtb	r3, r3
 80188d0:	2117      	movs	r1, #23
 80188d2:	187a      	adds	r2, r7, r1
 80188d4:	7812      	ldrb	r2, [r2, #0]
 80188d6:	429a      	cmp	r2, r3
 80188d8:	d043      	beq.n	8018962 <_ux_device_class_hid_control_request+0x166>
                    hid -> ux_device_class_hid_event_idle_rate = duration;
 80188da:	187b      	adds	r3, r7, r1
 80188dc:	781a      	ldrb	r2, [r3, #0]
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	64da      	str	r2, [r3, #76]	@ 0x4c
                    if (duration == 0)
 80188e2:	187b      	adds	r3, r7, r1
 80188e4:	781b      	ldrb	r3, [r3, #0]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d104      	bne.n	80188f4 <_ux_device_class_hid_control_request+0xf8>
                        hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	2201      	movs	r2, #1
 80188ee:	4252      	negs	r2, r2
 80188f0:	651a      	str	r2, [r3, #80]	@ 0x50
            break;
 80188f2:	e036      	b.n	8018962 <_ux_device_class_hid_control_request+0x166>
                        hid -> ux_device_class_hid_event_wait_timeout = (ULONG)UX_MS_TO_TICK((ULONG)duration << 2u);
 80188f4:	2317      	movs	r3, #23
 80188f6:	18fb      	adds	r3, r7, r3
 80188f8:	781a      	ldrb	r2, [r3, #0]
 80188fa:	0013      	movs	r3, r2
 80188fc:	009b      	lsls	r3, r3, #2
 80188fe:	189b      	adds	r3, r3, r2
 8018900:	009a      	lsls	r2, r3, #2
 8018902:	189b      	adds	r3, r3, r2
 8018904:	011b      	lsls	r3, r3, #4
 8018906:	001a      	movs	r2, r3
 8018908:	23fa      	movs	r3, #250	@ 0xfa
 801890a:	0099      	lsls	r1, r3, #2
 801890c:	0010      	movs	r0, r2
 801890e:	f7ed fd99 	bl	8006444 <__udivsi3>
 8018912:	0003      	movs	r3, r0
 8018914:	001a      	movs	r2, r3
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	651a      	str	r2, [r3, #80]	@ 0x50
                        if (hid -> ux_device_class_hid_event_wait_timeout == 0)
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801891e:	2b00      	cmp	r3, #0
 8018920:	d104      	bne.n	801892c <_ux_device_class_hid_control_request+0x130>
                            hid -> ux_device_class_hid_event_wait_timeout ++;
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018926:	1c5a      	adds	r2, r3, #1
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	651a      	str	r2, [r3, #80]	@ 0x50
                        _ux_utility_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_IDLE_RATE, UX_OR);
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	3328      	adds	r3, #40	@ 0x28
 8018930:	2200      	movs	r2, #0
 8018932:	2102      	movs	r1, #2
 8018934:	0018      	movs	r0, r3
 8018936:	f7ff fa66 	bl	8017e06 <_ux_utility_event_flags_set>
            break;
 801893a:	e012      	b.n	8018962 <_ux_device_class_hid_control_request+0x166>

        case UX_DEVICE_CLASS_HID_COMMAND_GET_PROTOCOL:

            /* Send the protocol.  */
            *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_protocol;
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018942:	68db      	ldr	r3, [r3, #12]
 8018944:	b2d2      	uxtb	r2, r2
 8018946:	701a      	strb	r2, [r3, #0]
            _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 8018948:	69ba      	ldr	r2, [r7, #24]
 801894a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801894c:	2101      	movs	r1, #1
 801894e:	0018      	movs	r0, r3
 8018950:	f004 fc10 	bl	801d174 <_ux_device_stack_transfer_request>
            break;
 8018954:	e006      	b.n	8018964 <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_PROTOCOL:

            /* Accept the protocol.  */
            hid -> ux_device_class_hid_protocol = request_value;
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	6a3a      	ldr	r2, [r7, #32]
 801895a:	655a      	str	r2, [r3, #84]	@ 0x54
            break;
 801895c:	e002      	b.n	8018964 <_ux_device_class_hid_control_request+0x168>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 801895e:	23ff      	movs	r3, #255	@ 0xff
 8018960:	e001      	b.n	8018966 <_ux_device_class_hid_control_request+0x16a>
            break;
 8018962:	46c0      	nop			@ (mov r8, r8)
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 8018964:	2300      	movs	r3, #0
}
 8018966:	0018      	movs	r0, r3
 8018968:	46bd      	mov	sp, r7
 801896a:	b00c      	add	sp, #48	@ 0x30
 801896c:	bd80      	pop	{r7, pc}
 801896e:	46c0      	nop			@ (mov r8, r8)
 8018970:	20011854 	.word	0x20011854
 8018974:	0801f1fc 	.word	0x0801f1fc

08018978 <_ux_device_class_hid_deactivate>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b084      	sub	sp, #16
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID         *hid;
UX_SLAVE_CLASS             *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	6a1b      	ldr	r3, [r3, #32]
 8018984:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801898a:	60bb      	str	r3, [r7, #8]

    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(hid -> ux_device_class_hid_interrupt_endpoint, UX_TRANSFER_BUS_RESET);
 801898c:	68bb      	ldr	r3, [r7, #8]
 801898e:	685b      	ldr	r3, [r3, #4]
 8018990:	2126      	movs	r1, #38	@ 0x26
 8018992:	0018      	movs	r0, r3
 8018994:	f004 fbda 	bl	801d14c <_ux_device_stack_transfer_all_request_abort>

    /* If there is a deactivate function call it.  */
    if (hid -> ux_slave_class_hid_instance_deactivate != UX_NULL)
 8018998:	68bb      	ldr	r3, [r7, #8]
 801899a:	699b      	ldr	r3, [r3, #24]
 801899c:	2b00      	cmp	r3, #0
 801899e:	d004      	beq.n	80189aa <_ux_device_class_hid_deactivate+0x32>
    {
        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_deactivate(hid);
 80189a0:	68bb      	ldr	r3, [r7, #8]
 80189a2:	699b      	ldr	r3, [r3, #24]
 80189a4:	68ba      	ldr	r2, [r7, #8]
 80189a6:	0010      	movs	r0, r2
 80189a8:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(hid);

    /* Return completion status.  */
    return(UX_SUCCESS);
 80189aa:	2300      	movs	r3, #0
}
 80189ac:	0018      	movs	r0, r3
 80189ae:	46bd      	mov	sp, r7
 80189b0:	b004      	add	sp, #16
 80189b2:	bd80      	pop	{r7, pc}

080189b4 <_ux_device_class_hid_descriptor_send>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_descriptor_send(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 80189b4:	b580      	push	{r7, lr}
 80189b6:	b08e      	sub	sp, #56	@ 0x38
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	60f8      	str	r0, [r7, #12]
 80189bc:	60b9      	str	r1, [r7, #8]
 80189be:	607a      	str	r2, [r7, #4]
 80189c0:	603b      	str	r3, [r7, #0]
UX_SLAVE_TRANSFER               *transfer_request;
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR *                         device_framework;
UCHAR *                         device_framework_end;
ULONG                           descriptor_length;
UINT                            status =  UX_ERROR;
 80189c2:	23ff      	movs	r3, #255	@ 0xff
 80189c4:	633b      	str	r3, [r7, #48]	@ 0x30
ULONG                           length;
UCHAR                           interface_number = 0xFF;
 80189c6:	232b      	movs	r3, #43	@ 0x2b
 80189c8:	18fb      	adds	r3, r7, r3
 80189ca:	22ff      	movs	r2, #255	@ 0xff
 80189cc:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_DESCRIPTOR_SEND, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80189ce:	4b61      	ldr	r3, [pc, #388]	@ (8018b54 <_ux_device_class_hid_descriptor_send+0x1a0>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80189d4:	4b5f      	ldr	r3, [pc, #380]	@ (8018b54 <_ux_device_class_hid_descriptor_send+0x1a0>)
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	3320      	adds	r3, #32
 80189da:	623b      	str	r3, [r7, #32]
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80189dc:	6a3b      	ldr	r3, [r7, #32]
 80189de:	333c      	adds	r3, #60	@ 0x3c
 80189e0:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80189e2:	69fb      	ldr	r3, [r7, #28]
 80189e4:	3330      	adds	r3, #48	@ 0x30
 80189e6:	61bb      	str	r3, [r7, #24]

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80189e8:	69bb      	ldr	r3, [r7, #24]
 80189ea:	2203      	movs	r2, #3
 80189ec:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 80189ee:	68bb      	ldr	r3, [r7, #8]
 80189f0:	0a1b      	lsrs	r3, r3, #8
 80189f2:	b2db      	uxtb	r3, r3
 80189f4:	60bb      	str	r3, [r7, #8]

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 80189f6:	68bb      	ldr	r3, [r7, #8]
 80189f8:	2b21      	cmp	r3, #33	@ 0x21
 80189fa:	d003      	beq.n	8018a04 <_ux_device_class_hid_descriptor_send+0x50>
 80189fc:	68bb      	ldr	r3, [r7, #8]
 80189fe:	2b22      	cmp	r3, #34	@ 0x22
 8018a00:	d069      	beq.n	8018ad6 <_ux_device_class_hid_descriptor_send+0x122>
 8018a02:	e098      	b.n	8018b36 <_ux_device_class_hid_descriptor_send+0x182>
    {

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_HID:
    
        /* We should have a HID descriptor as part of the config descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8018a04:	4b53      	ldr	r3, [pc, #332]	@ (8018b54 <_ux_device_class_hid_descriptor_send+0x1a0>)
 8018a06:	681a      	ldr	r2, [r3, #0]
 8018a08:	2394      	movs	r3, #148	@ 0x94
 8018a0a:	005b      	lsls	r3, r3, #1
 8018a0c:	58d3      	ldr	r3, [r2, r3]
 8018a0e:	637b      	str	r3, [r7, #52]	@ 0x34
        device_framework_end = device_framework + _ux_system_slave -> ux_system_slave_device_framework_length;
 8018a10:	4b50      	ldr	r3, [pc, #320]	@ (8018b54 <_ux_device_class_hid_descriptor_send+0x1a0>)
 8018a12:	681a      	ldr	r2, [r3, #0]
 8018a14:	2396      	movs	r3, #150	@ 0x96
 8018a16:	005b      	lsls	r3, r3, #1
 8018a18:	58d3      	ldr	r3, [r2, r3]
 8018a1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018a1c:	18d3      	adds	r3, r2, r3
 8018a1e:	613b      	str	r3, [r7, #16]

        /* Parse the device framework and locate the HID descriptor.  
           There is only one HID descriptor.  */
        while (device_framework < device_framework_end)
 8018a20:	e048      	b.n	8018ab4 <_ux_device_class_hid_descriptor_send+0x100>
        {

            /* Get the type of the current descriptor.  */
            descriptor_type =  *(device_framework + 1);
 8018a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a24:	3301      	adds	r3, #1
 8018a26:	781b      	ldrb	r3, [r3, #0]
 8018a28:	60bb      	str	r3, [r7, #8]

            /* And its length.  */
            descriptor_length =  (ULONG) *device_framework;
 8018a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a2c:	781b      	ldrb	r3, [r3, #0]
 8018a2e:	617b      	str	r3, [r7, #20]

            /* Save interface number for later check.  */
            if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8018a30:	68bb      	ldr	r3, [r7, #8]
 8018a32:	2b04      	cmp	r3, #4
 8018a34:	d104      	bne.n	8018a40 <_ux_device_class_hid_descriptor_send+0x8c>
                interface_number = *(device_framework + 2);
 8018a36:	232b      	movs	r3, #43	@ 0x2b
 8018a38:	18fb      	adds	r3, r7, r3
 8018a3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018a3c:	7892      	ldrb	r2, [r2, #2]
 8018a3e:	701a      	strb	r2, [r3, #0]

            /* Check if this is a HID report descriptor.  */
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 8018a40:	68bb      	ldr	r3, [r7, #8]
 8018a42:	2b21      	cmp	r3, #33	@ 0x21
 8018a44:	d132      	bne.n	8018aac <_ux_device_class_hid_descriptor_send+0xf8>
                (interface_number == (UCHAR)request_index))
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	b2db      	uxtb	r3, r3
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 8018a4a:	222b      	movs	r2, #43	@ 0x2b
 8018a4c:	18ba      	adds	r2, r7, r2
 8018a4e:	7812      	ldrb	r2, [r2, #0]
 8018a50:	429a      	cmp	r2, r3
 8018a52:	d12b      	bne.n	8018aac <_ux_device_class_hid_descriptor_send+0xf8>
            {

                /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                   and do not return more than what is allowed.  */
                if (descriptor_length < host_length)
 8018a54:	697a      	ldr	r2, [r7, #20]
 8018a56:	683b      	ldr	r3, [r7, #0]
 8018a58:	429a      	cmp	r2, r3
 8018a5a:	d202      	bcs.n	8018a62 <_ux_device_class_hid_descriptor_send+0xae>
                    length =  descriptor_length;
 8018a5c:	697b      	ldr	r3, [r7, #20]
 8018a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018a60:	e001      	b.n	8018a66 <_ux_device_class_hid_descriptor_send+0xb2>
                else                            
                    length =  host_length;                
 8018a62:	683b      	ldr	r3, [r7, #0]
 8018a64:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Check buffer length, since descriptor length may exceed buffer...  */
                if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8018a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018a68:	2380      	movs	r3, #128	@ 0x80
 8018a6a:	005b      	lsls	r3, r3, #1
 8018a6c:	429a      	cmp	r2, r3
 8018a6e:	d90d      	bls.n	8018a8c <_ux_device_class_hid_descriptor_send+0xd8>
                {

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8018a70:	2212      	movs	r2, #18
 8018a72:	2107      	movs	r1, #7
 8018a74:	2002      	movs	r0, #2
 8018a76:	f7ff f859 	bl	8017b2c <_ux_system_error_handler>

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

                    /* Stall the endpoint.  */
                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8018a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a7c:	699b      	ldr	r3, [r3, #24]
 8018a7e:	69fa      	ldr	r2, [r7, #28]
 8018a80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018a82:	2114      	movs	r1, #20
 8018a84:	4798      	blx	r3
 8018a86:	0003      	movs	r3, r0
 8018a88:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 8018a8a:	e017      	b.n	8018abc <_ux_device_class_hid_descriptor_send+0x108>
                }

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8018a8c:	69bb      	ldr	r3, [r7, #24]
 8018a8e:	68db      	ldr	r3, [r3, #12]
 8018a90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018a92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018a94:	0018      	movs	r0, r3
 8018a96:	f7ff fba7 	bl	80181e8 <_ux_utility_memory_copy>
                                            device_framework, length); /* Use case of memcpy is verified. */

                /* We can return the configuration descriptor.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8018a9a:	683a      	ldr	r2, [r7, #0]
 8018a9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018a9e:	69bb      	ldr	r3, [r7, #24]
 8018aa0:	0018      	movs	r0, r3
 8018aa2:	f004 fb67 	bl	801d174 <_ux_device_stack_transfer_request>
 8018aa6:	0003      	movs	r3, r0
 8018aa8:	633b      	str	r3, [r7, #48]	@ 0x30
                break;
 8018aaa:	e007      	b.n	8018abc <_ux_device_class_hid_descriptor_send+0x108>
                
            }

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8018aac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018aae:	697b      	ldr	r3, [r7, #20]
 8018ab0:	18d3      	adds	r3, r2, r3
 8018ab2:	637b      	str	r3, [r7, #52]	@ 0x34
        while (device_framework < device_framework_end)
 8018ab4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018ab6:	693b      	ldr	r3, [r7, #16]
 8018ab8:	429a      	cmp	r2, r3
 8018aba:	d3b2      	bcc.n	8018a22 <_ux_device_class_hid_descriptor_send+0x6e>
        }

        /* Stall the endpoint if not found or corrupt.  */
        if (device_framework >= device_framework_end)
 8018abc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018abe:	693b      	ldr	r3, [r7, #16]
 8018ac0:	429a      	cmp	r2, r3
 8018ac2:	d340      	bcc.n	8018b46 <_ux_device_class_hid_descriptor_send+0x192>
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8018ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ac6:	699b      	ldr	r3, [r3, #24]
 8018ac8:	69fa      	ldr	r2, [r7, #28]
 8018aca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018acc:	2114      	movs	r1, #20
 8018ace:	4798      	blx	r3
 8018ad0:	0003      	movs	r3, r0
 8018ad2:	633b      	str	r3, [r7, #48]	@ 0x30

        break;
 8018ad4:	e037      	b.n	8018b46 <_ux_device_class_hid_descriptor_send+0x192>

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_REPORT:
        
        /* Get the length of entire configuration descriptor.  */
        descriptor_length =  hid -> ux_device_class_hid_report_length;
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ada:	617b      	str	r3, [r7, #20]

        /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
           and do not return more than what is allowed.  */
        if (descriptor_length < host_length)
 8018adc:	697a      	ldr	r2, [r7, #20]
 8018ade:	683b      	ldr	r3, [r7, #0]
 8018ae0:	429a      	cmp	r2, r3
 8018ae2:	d202      	bcs.n	8018aea <_ux_device_class_hid_descriptor_send+0x136>
            length =  descriptor_length;
 8018ae4:	697b      	ldr	r3, [r7, #20]
 8018ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018ae8:	e001      	b.n	8018aee <_ux_device_class_hid_descriptor_send+0x13a>
        else                            
            length =  host_length;                
 8018aea:	683b      	ldr	r3, [r7, #0]
 8018aec:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Check buffer length, since total descriptors length may exceed buffer...  */
        if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8018aee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018af0:	2380      	movs	r3, #128	@ 0x80
 8018af2:	005b      	lsls	r3, r3, #1
 8018af4:	429a      	cmp	r2, r3
 8018af6:	d90d      	bls.n	8018b14 <_ux_device_class_hid_descriptor_send+0x160>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8018af8:	2212      	movs	r2, #18
 8018afa:	2107      	movs	r1, #7
 8018afc:	2002      	movs	r0, #2
 8018afe:	f7ff f815 	bl	8017b2c <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Stall the endpoint.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8018b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b04:	699b      	ldr	r3, [r3, #24]
 8018b06:	69fa      	ldr	r2, [r7, #28]
 8018b08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018b0a:	2114      	movs	r1, #20
 8018b0c:	4798      	blx	r3
 8018b0e:	0003      	movs	r3, r0
 8018b10:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8018b12:	e019      	b.n	8018b48 <_ux_device_class_hid_descriptor_send+0x194>
        }

        /* Copy the device descriptor into the transfer request memory.  */
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8018b14:	69bb      	ldr	r3, [r7, #24]
 8018b16:	68d8      	ldr	r0, [r3, #12]
                                    hid -> ux_device_class_hid_report_address, length); /* Use case of memcpy is verified. */
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	69db      	ldr	r3, [r3, #28]
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8018b1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018b1e:	0019      	movs	r1, r3
 8018b20:	f7ff fb62 	bl	80181e8 <_ux_utility_memory_copy>

        /* We can return the report descriptor.  */
        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8018b24:	683a      	ldr	r2, [r7, #0]
 8018b26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018b28:	69bb      	ldr	r3, [r7, #24]
 8018b2a:	0018      	movs	r0, r3
 8018b2c:	f004 fb22 	bl	801d174 <_ux_device_stack_transfer_request>
 8018b30:	0003      	movs	r3, r0
 8018b32:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 8018b34:	e008      	b.n	8018b48 <_ux_device_class_hid_descriptor_send+0x194>
        /* Not treated for now.  Fall through and Stall endpoint.  */
        
    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8018b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b38:	699b      	ldr	r3, [r3, #24]
 8018b3a:	69fa      	ldr	r2, [r7, #28]
 8018b3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018b3e:	2114      	movs	r1, #20
 8018b40:	4798      	blx	r3
        return(UX_ERROR);
 8018b42:	23ff      	movs	r3, #255	@ 0xff
 8018b44:	e001      	b.n	8018b4a <_ux_device_class_hid_descriptor_send+0x196>
        break;
 8018b46:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return the status to the caller.  */
    return(status);
 8018b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8018b4a:	0018      	movs	r0, r3
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	b00e      	add	sp, #56	@ 0x38
 8018b50:	bd80      	pop	{r7, pc}
 8018b52:	46c0      	nop			@ (mov r8, r8)
 8018b54:	20011854 	.word	0x20011854

08018b58 <_ux_device_class_hid_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 8018b58:	b580      	push	{r7, lr}
 8018b5a:	b084      	sub	sp, #16
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	2b07      	cmp	r3, #7
 8018b66:	d834      	bhi.n	8018bd2 <_ux_device_class_hid_entry+0x7a>
 8018b68:	009a      	lsls	r2, r3, #2
 8018b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8018bdc <_ux_device_class_hid_entry+0x84>)
 8018b6c:	18d3      	adds	r3, r2, r3
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	469f      	mov	pc, r3
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the HID class.  */
        status =  _ux_device_class_hid_initialize(command);
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	0018      	movs	r0, r3
 8018b76:	f000 f8e7 	bl	8018d48 <_ux_device_class_hid_initialize>
 8018b7a:	0003      	movs	r3, r0
 8018b7c:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	e028      	b.n	8018bd4 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the HID class.  */
        status =  _ux_device_class_hid_uninitialize(command);
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	0018      	movs	r0, r3
 8018b86:	f000 fb27 	bl	80191d8 <_ux_device_class_hid_uninitialize>
 8018b8a:	0003      	movs	r3, r0
 8018b8c:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	e020      	b.n	8018bd4 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_DEVICE_CLASS_HID_CLASS)
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	695b      	ldr	r3, [r3, #20]
 8018b96:	2b03      	cmp	r3, #3
 8018b98:	d101      	bne.n	8018b9e <_ux_device_class_hid_entry+0x46>
            return(UX_SUCCESS);
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	e01a      	b.n	8018bd4 <_ux_device_class_hid_entry+0x7c>
        else
            return(UX_NO_CLASS_MATCH);
 8018b9e:	2357      	movs	r3, #87	@ 0x57
 8018ba0:	e018      	b.n	8018bd4 <_ux_device_class_hid_entry+0x7c>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the hid thread needs to be activated.  */
        status =  _ux_device_class_hid_activate(command);
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	0018      	movs	r0, r3
 8018ba6:	f7ff fdde 	bl	8018766 <_ux_device_class_hid_activate>
 8018baa:	0003      	movs	r3, r0
 8018bac:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	e010      	b.n	8018bd4 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the hid thread canceled.  */
        status =  _ux_device_class_hid_deactivate(command);
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	0018      	movs	r0, r3
 8018bb6:	f7ff fedf 	bl	8018978 <_ux_device_class_hid_deactivate>
 8018bba:	0003      	movs	r3, r0
 8018bbc:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	e008      	b.n	8018bd4 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_hid_control_request(command);
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	0018      	movs	r0, r3
 8018bc6:	f7ff fe19 	bl	80187fc <_ux_device_class_hid_control_request>
 8018bca:	0003      	movs	r3, r0
 8018bcc:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	e000      	b.n	8018bd4 <_ux_device_class_hid_entry+0x7c>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 8018bd2:	2354      	movs	r3, #84	@ 0x54
    }   
}
 8018bd4:	0018      	movs	r0, r3
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	b004      	add	sp, #16
 8018bda:	bd80      	pop	{r7, pc}
 8018bdc:	0801f22c 	.word	0x0801f22c

08018be0 <_ux_device_class_hid_event_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_get(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8018be0:	b580      	push	{r7, lr}
 8018be2:	b084      	sub	sp, #16
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	6078      	str	r0, [r7, #4]
 8018be8:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_GET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */                   
    device =  &_ux_system_slave -> ux_system_slave_device;
 8018bea:	4b21      	ldr	r3, [pc, #132]	@ (8018c70 <_ux_device_class_hid_event_get+0x90>)
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	3320      	adds	r3, #32
 8018bf0:	60fb      	str	r3, [r7, #12]
    
    /* Check the device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	2b03      	cmp	r3, #3
 8018bf8:	d001      	beq.n	8018bfe <_ux_device_class_hid_event_get+0x1e>
        return(UX_DEVICE_HANDLE_UNKNOWN);
 8018bfa:	2350      	movs	r3, #80	@ 0x50
 8018bfc:	e033      	b.n	8018c66 <_ux_device_class_hid_event_get+0x86>

    /* Check if the head and the tail of the event array is the same.  */
    if (hid -> ux_device_class_hid_event_array_head == 
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
        hid -> ux_device_class_hid_event_array_tail)
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    if (hid -> ux_device_class_hid_event_array_head == 
 8018c06:	429a      	cmp	r2, r3
 8018c08:	d101      	bne.n	8018c0e <_ux_device_class_hid_event_get+0x2e>

        /* No event to report.  */
        return(UX_ERROR);        
 8018c0a:	23ff      	movs	r3, #255	@ 0xff
 8018c0c:	e02b      	b.n	8018c66 <_ux_device_class_hid_event_get+0x86>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_tail;
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018c12:	60bb      	str	r3, [r7, #8]

    /* Keep the event data length inside buffer area.  */
    if (current_hid_event -> ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8018c14:	68bb      	ldr	r3, [r7, #8]
 8018c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c18:	2b20      	cmp	r3, #32
 8018c1a:	d902      	bls.n	8018c22 <_ux_device_class_hid_event_get+0x42>
        current_hid_event -> ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8018c1c:	68bb      	ldr	r3, [r7, #8]
 8018c1e:	2220      	movs	r2, #32
 8018c20:	629a      	str	r2, [r3, #40]	@ 0x28

    /* fill in the event structure from the user.  */
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;
 8018c22:	68bb      	ldr	r3, [r7, #8]
 8018c24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018c26:	683b      	ldr	r3, [r7, #0]
 8018c28:	629a      	str	r2, [r3, #40]	@ 0x28
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer, current_hid_event -> ux_device_class_hid_event_buffer,
 8018c2a:	683b      	ldr	r3, [r7, #0]
 8018c2c:	3308      	adds	r3, #8
 8018c2e:	0018      	movs	r0, r3
 8018c30:	68bb      	ldr	r3, [r7, #8]
 8018c32:	3308      	adds	r3, #8
 8018c34:	0019      	movs	r1, r3
 8018c36:	68bb      	ldr	r3, [r7, #8]
 8018c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c3a:	001a      	movs	r2, r3
 8018c3c:	f7ff fad4 	bl	80181e8 <_ux_utility_memory_copy>
                                current_hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* Adjust the tail pointer.  Check if we are at the end.  */
    if ((current_hid_event + 1) == hid -> ux_device_class_hid_event_array_end)
 8018c40:	68bb      	ldr	r3, [r7, #8]
 8018c42:	332c      	adds	r3, #44	@ 0x2c
 8018c44:	001a      	movs	r2, r3
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018c4a:	429a      	cmp	r2, r3
 8018c4c:	d104      	bne.n	8018c58 <_ux_device_class_hid_event_get+0x78>

        /* We are at the end, go back to the beginning.  */
        hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	661a      	str	r2, [r3, #96]	@ 0x60
 8018c56:	e005      	b.n	8018c64 <_ux_device_class_hid_event_get+0x84>
        
    else        
        /* We are not at the end, increment the tail position.  */
        hid -> ux_device_class_hid_event_array_tail++;
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018c5c:	332c      	adds	r3, #44	@ 0x2c
 8018c5e:	001a      	movs	r2, r3
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 8018c64:	2300      	movs	r3, #0
}
 8018c66:	0018      	movs	r0, r3
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	b004      	add	sp, #16
 8018c6c:	bd80      	pop	{r7, pc}
 8018c6e:	46c0      	nop			@ (mov r8, r8)
 8018c70:	20011854 	.word	0x20011854

08018c74 <_ux_device_class_hid_event_set>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_set(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b084      	sub	sp, #16
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
 8018c7c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_SET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Current position of the head.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018c82:	60bb      	str	r3, [r7, #8]
    
    /* If the pointer is NULL, the round robin buffer has not been activated.  */
    if (current_hid_event == UX_NULL)
 8018c84:	68bb      	ldr	r3, [r7, #8]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d101      	bne.n	8018c8e <_ux_device_class_hid_event_set+0x1a>
        return (UX_ERROR);
 8018c8a:	23ff      	movs	r3, #255	@ 0xff
 8018c8c:	e057      	b.n	8018d3e <_ux_device_class_hid_event_set+0xca>
    
    /* Calculate the next position.  */
    if ((current_hid_event + 1) == hid -> ux_device_class_hid_event_array_end)
 8018c8e:	68bb      	ldr	r3, [r7, #8]
 8018c90:	332c      	adds	r3, #44	@ 0x2c
 8018c92:	001a      	movs	r2, r3
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018c98:	429a      	cmp	r2, r3
 8018c9a:	d103      	bne.n	8018ca4 <_ux_device_class_hid_event_set+0x30>

        /* We are at the end, go back to the beginning.  */
        next_hid_event =  hid -> ux_device_class_hid_event_array;
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018ca0:	60fb      	str	r3, [r7, #12]
 8018ca2:	e002      	b.n	8018caa <_ux_device_class_hid_event_set+0x36>
        
    else        

        /* We are not at the end, increment the head position.  */
        next_hid_event = current_hid_event + 1;
 8018ca4:	68bb      	ldr	r3, [r7, #8]
 8018ca6:	332c      	adds	r3, #44	@ 0x2c
 8018ca8:	60fb      	str	r3, [r7, #12]
    

    /* Any place left for this event ? */
    if (next_hid_event == hid -> ux_device_class_hid_event_array_tail)
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018cae:	68fa      	ldr	r2, [r7, #12]
 8018cb0:	429a      	cmp	r2, r3
 8018cb2:	d101      	bne.n	8018cb8 <_ux_device_class_hid_event_set+0x44>
        return (UX_ERROR);
 8018cb4:	23ff      	movs	r3, #255	@ 0xff
 8018cb6:	e042      	b.n	8018d3e <_ux_device_class_hid_event_set+0xca>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018cbc:	60bb      	str	r3, [r7, #8]

    /* Update the head.  */
    hid -> ux_device_class_hid_event_array_head = next_hid_event;
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	68fa      	ldr	r2, [r7, #12]
 8018cc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if this event has a report ID.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	6a1b      	ldr	r3, [r3, #32]
 8018cc8:	2b01      	cmp	r3, #1
 8018cca:	d121      	bne.n	8018d10 <_ux_device_class_hid_event_set+0x9c>
    {

        /* Yes, there's a report ID. Check to see if our event buffer can also
           fit the extra byte.  */
        if (hid_event -> ux_device_class_hid_event_length + 1 > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8018ccc:	683b      	ldr	r3, [r7, #0]
 8018cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018cd0:	3301      	adds	r3, #1
 8018cd2:	2b20      	cmp	r3, #32
 8018cd4:	d906      	bls.n	8018ce4 <_ux_device_class_hid_event_set+0x70>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8018cd6:	2212      	movs	r2, #18
 8018cd8:	2107      	movs	r1, #7
 8018cda:	2002      	movs	r0, #2
 8018cdc:	f7fe ff26 	bl	8017b2c <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Return overflow error.  */
            return(UX_MEMORY_INSUFFICIENT);
 8018ce0:	2312      	movs	r3, #18
 8018ce2:	e02c      	b.n	8018d3e <_ux_device_class_hid_event_set+0xca>
        }

        /* Store the report ID.  */
        *current_hid_event -> ux_device_class_hid_event_buffer =  (UCHAR)(hid_event -> ux_device_class_hid_event_report_id);  
 8018ce4:	683b      	ldr	r3, [r7, #0]
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	b2da      	uxtb	r2, r3
 8018cea:	68bb      	ldr	r3, [r7, #8]
 8018cec:	721a      	strb	r2, [r3, #8]
                
        /* Store the data itself.  */
        _ux_utility_memory_copy(current_hid_event -> ux_device_class_hid_event_buffer + 1, hid_event -> ux_device_class_hid_event_buffer,
 8018cee:	68bb      	ldr	r3, [r7, #8]
 8018cf0:	3308      	adds	r3, #8
 8018cf2:	1c58      	adds	r0, r3, #1
 8018cf4:	683b      	ldr	r3, [r7, #0]
 8018cf6:	3308      	adds	r3, #8
 8018cf8:	0019      	movs	r1, r3
 8018cfa:	683b      	ldr	r3, [r7, #0]
 8018cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018cfe:	001a      	movs	r2, r3
 8018d00:	f7ff fa72 	bl	80181e8 <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
    
        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length =  hid_event -> ux_device_class_hid_event_length + 1;    
 8018d04:	683b      	ldr	r3, [r7, #0]
 8018d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018d08:	1c5a      	adds	r2, r3, #1
 8018d0a:	68bb      	ldr	r3, [r7, #8]
 8018d0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8018d0e:	e00e      	b.n	8018d2e <_ux_device_class_hid_event_set+0xba>
    }
    else
    {
    
        /* No report ID to consider.  */
        _ux_utility_memory_copy(current_hid_event -> ux_device_class_hid_event_buffer, hid_event -> ux_device_class_hid_event_buffer,
 8018d10:	68bb      	ldr	r3, [r7, #8]
 8018d12:	3308      	adds	r3, #8
 8018d14:	0018      	movs	r0, r3
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	3308      	adds	r3, #8
 8018d1a:	0019      	movs	r1, r3
 8018d1c:	683b      	ldr	r3, [r7, #0]
 8018d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018d20:	001a      	movs	r2, r3
 8018d22:	f7ff fa61 	bl	80181e8 <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length = hid_event -> ux_device_class_hid_event_length;    
 8018d26:	683b      	ldr	r3, [r7, #0]
 8018d28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018d2a:	68bb      	ldr	r3, [r7, #8]
 8018d2c:	629a      	str	r2, [r3, #40]	@ 0x28
        hid -> ux_device_class_hid_event_state != UX_STATE_EXIT)
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
#else

    /* Set an event to wake up the interrupt thread.  */
    _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_EVENT, UX_OR);                
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	3328      	adds	r3, #40	@ 0x28
 8018d32:	2200      	movs	r2, #0
 8018d34:	2101      	movs	r1, #1
 8018d36:	0018      	movs	r0, r3
 8018d38:	f7ff f865 	bl	8017e06 <_ux_utility_event_flags_set>
#endif

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 8018d3c:	2300      	movs	r3, #0
}
 8018d3e:	0018      	movs	r0, r3
 8018d40:	46bd      	mov	sp, r7
 8018d42:	b004      	add	sp, #16
 8018d44:	bd80      	pop	{r7, pc}
	...

08018d48 <_ux_device_class_hid_initialize>:
/*                                            added interrupt OUT support,*/
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8018d48:	b5b0      	push	{r4, r5, r7, lr}
 8018d4a:	b08c      	sub	sp, #48	@ 0x30
 8018d4c:	af06      	add	r7, sp, #24
 8018d4e:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS_HID_PARAMETER            *hid_parameter;
UX_SLAVE_CLASS                          *class;
UINT                                    status = UX_SUCCESS;
 8018d50:	2300      	movs	r3, #0
 8018d52:	617b      	str	r3, [r7, #20]


    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	6a1b      	ldr	r3, [r3, #32]
 8018d58:	613b      	str	r3, [r7, #16]

    /* Create an instance of the device hid class.  */
    hid =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID));
 8018d5a:	2268      	movs	r2, #104	@ 0x68
 8018d5c:	2100      	movs	r1, #0
 8018d5e:	2000      	movs	r0, #0
 8018d60:	f7ff f8fc 	bl	8017f5c <_ux_utility_memory_allocate>
 8018d64:	0003      	movs	r3, r0
 8018d66:	60fb      	str	r3, [r7, #12]

    /* Check for successful allocation.  */
    if (hid == UX_NULL)
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d101      	bne.n	8018d72 <_ux_device_class_hid_initialize+0x2a>
        return(UX_MEMORY_INSUFFICIENT);
 8018d6e:	2312      	movs	r3, #18
 8018d70:	e0ac      	b.n	8018ecc <_ux_device_class_hid_initialize+0x184>

    /* Save the address of the HID instance inside the HID container.  */
    class -> ux_slave_class_instance = (VOID *) hid;
 8018d72:	693b      	ldr	r3, [r7, #16]
 8018d74:	68fa      	ldr	r2, [r7, #12]
 8018d76:	649a      	str	r2, [r3, #72]	@ 0x48

#if !defined(UX_DEVICE_STANDALONE)

    /* Allocate some memory for the thread stack. */
    class -> ux_slave_class_thread_stack =  
            _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, UX_DEVICE_CLASS_HID_THREAD_STACK_SIZE);
 8018d78:	2380      	movs	r3, #128	@ 0x80
 8018d7a:	00db      	lsls	r3, r3, #3
 8018d7c:	001a      	movs	r2, r3
 8018d7e:	2100      	movs	r1, #0
 8018d80:	2000      	movs	r0, #0
 8018d82:	f7ff f8eb 	bl	8017f5c <_ux_utility_memory_allocate>
 8018d86:	0001      	movs	r1, r0
    class -> ux_slave_class_thread_stack =  
 8018d88:	693a      	ldr	r2, [r7, #16]
 8018d8a:	2380      	movs	r3, #128	@ 0x80
 8018d8c:	005b      	lsls	r3, r3, #1
 8018d8e:	50d1      	str	r1, [r2, r3]
    
    /* Check for successful allocation.  */
    if (class -> ux_slave_class_thread_stack == UX_NULL)
 8018d90:	693a      	ldr	r2, [r7, #16]
 8018d92:	2380      	movs	r3, #128	@ 0x80
 8018d94:	005b      	lsls	r3, r3, #1
 8018d96:	58d3      	ldr	r3, [r2, r3]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d101      	bne.n	8018da0 <_ux_device_class_hid_initialize+0x58>
        status = UX_MEMORY_INSUFFICIENT;
 8018d9c:	2312      	movs	r3, #18
 8018d9e:	617b      	str	r3, [r7, #20]

    /* This instance needs to be running in a different thread. So start
       a new thread. We pass a pointer to the class to the new thread.  This thread
       does not start until we have a instance of the class. */
    if (status == UX_SUCCESS)
 8018da0:	697b      	ldr	r3, [r7, #20]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d11b      	bne.n	8018dde <_ux_device_class_hid_initialize+0x96>
        status =  _ux_device_thread_create(&class -> ux_slave_class_thread, "ux_slave_hid_thread", 
 8018da6:	693b      	ldr	r3, [r7, #16]
 8018da8:	3350      	adds	r3, #80	@ 0x50
 8018daa:	0018      	movs	r0, r3
 8018dac:	693d      	ldr	r5, [r7, #16]
 8018dae:	693a      	ldr	r2, [r7, #16]
 8018db0:	2380      	movs	r3, #128	@ 0x80
 8018db2:	005b      	lsls	r3, r3, #1
 8018db4:	58d3      	ldr	r3, [r2, r3]
 8018db6:	4c47      	ldr	r4, [pc, #284]	@ (8018ed4 <_ux_device_class_hid_initialize+0x18c>)
 8018db8:	4947      	ldr	r1, [pc, #284]	@ (8018ed8 <_ux_device_class_hid_initialize+0x190>)
 8018dba:	2200      	movs	r2, #0
 8018dbc:	9205      	str	r2, [sp, #20]
 8018dbe:	2200      	movs	r2, #0
 8018dc0:	9204      	str	r2, [sp, #16]
 8018dc2:	2214      	movs	r2, #20
 8018dc4:	9203      	str	r2, [sp, #12]
 8018dc6:	2214      	movs	r2, #20
 8018dc8:	9202      	str	r2, [sp, #8]
 8018dca:	2280      	movs	r2, #128	@ 0x80
 8018dcc:	00d2      	lsls	r2, r2, #3
 8018dce:	9201      	str	r2, [sp, #4]
 8018dd0:	9300      	str	r3, [sp, #0]
 8018dd2:	002b      	movs	r3, r5
 8018dd4:	0022      	movs	r2, r4
 8018dd6:	f7ff fc62 	bl	801869e <_ux_utility_thread_create>
 8018dda:	0003      	movs	r3, r0
 8018ddc:	617b      	str	r3, [r7, #20]
    /* Set task function.  */
    class -> ux_slave_class_task_function = _ux_device_class_hid_tasks_run;
#endif

    /* Check the creation of this thread.  */
    if (status == UX_SUCCESS)
 8018dde:	697b      	ldr	r3, [r7, #20]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d15c      	bne.n	8018e9e <_ux_device_class_hid_initialize+0x156>
#if !defined(UX_DEVICE_STANDALONE)
        UX_THREAD_EXTENSION_PTR_SET(&(class -> ux_slave_class_thread), class)
#endif

        /* Get the pointer to the application parameters for the hid class.  */
        hid_parameter =  command -> ux_slave_class_command_parameter;
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018de8:	60bb      	str	r3, [r7, #8]

        /* Store all the application parameter information about the report.  */
        hid -> ux_device_class_hid_report_address             = hid_parameter -> ux_device_class_hid_parameter_report_address;
 8018dea:	68bb      	ldr	r3, [r7, #8]
 8018dec:	689a      	ldr	r2, [r3, #8]
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	61da      	str	r2, [r3, #28]
        hid -> ux_device_class_hid_report_length              = hid_parameter -> ux_device_class_hid_parameter_report_length;
 8018df2:	68bb      	ldr	r3, [r7, #8]
 8018df4:	691a      	ldr	r2, [r3, #16]
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	625a      	str	r2, [r3, #36]	@ 0x24
        hid -> ux_device_class_hid_report_id                  = hid_parameter -> ux_device_class_hid_parameter_report_id;
 8018dfa:	68bb      	ldr	r3, [r7, #8]
 8018dfc:	68da      	ldr	r2, [r3, #12]
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	621a      	str	r2, [r3, #32]

        /* Store the callback function.  */
        hid -> ux_device_class_hid_callback                   = hid_parameter -> ux_device_class_hid_parameter_callback;
 8018e02:	68bb      	ldr	r3, [r7, #8]
 8018e04:	695a      	ldr	r2, [r3, #20]
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	60da      	str	r2, [r3, #12]
        hid -> ux_device_class_hid_get_callback               = hid_parameter -> ux_device_class_hid_parameter_get_callback;
 8018e0a:	68bb      	ldr	r3, [r7, #8]
 8018e0c:	699a      	ldr	r2, [r3, #24]
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	611a      	str	r2, [r3, #16]

        /* Create the event array.  */
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID_EVENT), UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE);
 8018e12:	2310      	movs	r3, #16
 8018e14:	222c      	movs	r2, #44	@ 0x2c
 8018e16:	2100      	movs	r1, #0
 8018e18:	2000      	movs	r0, #0
 8018e1a:	f7ff f9a7 	bl	801816c <_ux_utility_memory_allocate_mulc_safe>
 8018e1e:	0002      	movs	r2, r0
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Check for successful allocation.  */
        if (hid -> ux_device_class_hid_event_array != UX_NULL)
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d030      	beq.n	8018e8e <_ux_device_class_hid_initialize+0x146>
        {

            /* Initialize the head and tail of the notification round robin buffers. 
               At first, the head and tail are pointing to the beginning of the array.  */
            hid -> ux_device_class_hid_event_array_head =  hid -> ux_device_class_hid_event_array;
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	65da      	str	r2, [r3, #92]	@ 0x5c
            hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 8018e34:	68fb      	ldr	r3, [r7, #12]
 8018e36:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	661a      	str	r2, [r3, #96]	@ 0x60
            hid -> ux_device_class_hid_event_array_end  =  hid -> ux_device_class_hid_event_array + UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE;
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018e40:	22b0      	movs	r2, #176	@ 0xb0
 8018e42:	0092      	lsls	r2, r2, #2
 8018e44:	189a      	adds	r2, r3, r2
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	665a      	str	r2, [r3, #100]	@ 0x64

            /* Store the start and stop signals if needed by the application.  */
            hid -> ux_slave_class_hid_instance_activate = hid_parameter -> ux_slave_class_hid_instance_activate;
 8018e4a:	68bb      	ldr	r3, [r7, #8]
 8018e4c:	681a      	ldr	r2, [r3, #0]
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	615a      	str	r2, [r3, #20]
            hid -> ux_slave_class_hid_instance_deactivate = hid_parameter -> ux_slave_class_hid_instance_deactivate;
 8018e52:	68bb      	ldr	r3, [r7, #8]
 8018e54:	685a      	ldr	r2, [r3, #4]
 8018e56:	68fb      	ldr	r3, [r7, #12]
 8018e58:	619a      	str	r2, [r3, #24]

            /* By default no event wait timeout.  */
            hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	2201      	movs	r2, #1
 8018e5e:	4252      	negs	r2, r2
 8018e60:	651a      	str	r2, [r3, #80]	@ 0x50

            return(UX_SUCCESS);
#else

            /* Create a event flag group for the hid class to synchronize with the event interrupt thread.  */
            status =  _ux_utility_event_flags_create(&hid -> ux_device_class_hid_event_flags_group, "ux_device_class_hid_event_flag");
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	3328      	adds	r3, #40	@ 0x28
 8018e66:	4a1d      	ldr	r2, [pc, #116]	@ (8018edc <_ux_device_class_hid_initialize+0x194>)
 8018e68:	0011      	movs	r1, r2
 8018e6a:	0018      	movs	r0, r3
 8018e6c:	f7fe ff87 	bl	8017d7e <_ux_utility_event_flags_create>
 8018e70:	0003      	movs	r3, r0
 8018e72:	617b      	str	r3, [r7, #20]

            /* Check status.  */
            if (status == UX_SUCCESS)
 8018e74:	697b      	ldr	r3, [r7, #20]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d101      	bne.n	8018e7e <_ux_device_class_hid_initialize+0x136>

                /* There is error, delete event flags.  */
                _ux_utility_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
#endif
#else
                return(status);
 8018e7a:	697b      	ldr	r3, [r7, #20]
 8018e7c:	e026      	b.n	8018ecc <_ux_device_class_hid_initialize+0x184>

            }
            else

                /* It's event error. */
                status =  UX_EVENT_ERROR;
 8018e7e:	2318      	movs	r3, #24
 8018e80:	617b      	str	r3, [r7, #20]

            /* Free allocated event array memory.  */
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018e86:	0018      	movs	r0, r3
 8018e88:	f7ff f9ca 	bl	8018220 <_ux_utility_memory_free>
 8018e8c:	e001      	b.n	8018e92 <_ux_device_class_hid_initialize+0x14a>
#endif
        }
        else
            status =  UX_MEMORY_INSUFFICIENT;
 8018e8e:	2312      	movs	r3, #18
 8018e90:	617b      	str	r3, [r7, #20]

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete thread.  */
        _ux_device_thread_delete(&class -> ux_slave_class_thread);
 8018e92:	693b      	ldr	r3, [r7, #16]
 8018e94:	3350      	adds	r3, #80	@ 0x50
 8018e96:	0018      	movs	r0, r3
 8018e98:	f7ff fc2d 	bl	80186f6 <_ux_utility_thread_delete>
 8018e9c:	e001      	b.n	8018ea2 <_ux_device_class_hid_initialize+0x15a>
#endif
    }
    else
        status = (UX_THREAD_ERROR);
 8018e9e:	2316      	movs	r3, #22
 8018ea0:	617b      	str	r3, [r7, #20]

#if !defined(UX_DEVICE_STANDALONE)

    /* Free stack. */
    if (class -> ux_slave_class_thread_stack)
 8018ea2:	693a      	ldr	r2, [r7, #16]
 8018ea4:	2380      	movs	r3, #128	@ 0x80
 8018ea6:	005b      	lsls	r3, r3, #1
 8018ea8:	58d3      	ldr	r3, [r2, r3]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d006      	beq.n	8018ebc <_ux_device_class_hid_initialize+0x174>
        _ux_utility_memory_free(class -> ux_slave_class_thread_stack);
 8018eae:	693a      	ldr	r2, [r7, #16]
 8018eb0:	2380      	movs	r3, #128	@ 0x80
 8018eb2:	005b      	lsls	r3, r3, #1
 8018eb4:	58d3      	ldr	r3, [r2, r3]
 8018eb6:	0018      	movs	r0, r3
 8018eb8:	f7ff f9b2 	bl	8018220 <_ux_utility_memory_free>
#endif

    /* Unmount instance. */
    class -> ux_slave_class_instance =  UX_NULL;
 8018ebc:	693b      	ldr	r3, [r7, #16]
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Free HID instance. */
    _ux_utility_memory_free(hid);
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	0018      	movs	r0, r3
 8018ec6:	f7ff f9ab 	bl	8018220 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 8018eca:	697b      	ldr	r3, [r7, #20]
}
 8018ecc:	0018      	movs	r0, r3
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	b006      	add	sp, #24
 8018ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8018ed4:	08018ee1 	.word	0x08018ee1
 8018ed8:	0801efd0 	.word	0x0801efd0
 8018edc:	0801efe4 	.word	0x0801efe4

08018ee0 <_ux_device_class_hid_interrupt_thread>:
/*                                            off for standalone compile, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_device_class_hid_interrupt_thread(ULONG hid_class)
{
 8018ee0:	b590      	push	{r4, r7, lr}
 8018ee2:	b097      	sub	sp, #92	@ 0x5c
 8018ee4:	af02      	add	r7, sp, #8
 8018ee6:	6078      	str	r0, [r7, #4]
UCHAR                       *buffer;
ULONG                       actual_flags;


    /* Cast properly the hid instance.  */
    UX_THREAD_EXTENSION_PTR_GET(class, UX_SLAVE_CLASS, hid_class)
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    
    /* Get the hid instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 8018eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
    
    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8018ef2:	4b43      	ldr	r3, [pc, #268]	@ (8019000 <_ux_device_class_hid_interrupt_thread+0x120>)
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	3320      	adds	r3, #32
 8018ef8:	647b      	str	r3, [r7, #68]	@ 0x44
    /* This thread runs forever but can be suspended or resumed.  */
    while(1)
    {

        /* All HID events are on the interrupt endpoint IN, from the host.  */
        transfer_request_in =  &hid -> ux_device_class_hid_interrupt_endpoint -> ux_slave_endpoint_transfer_request;
 8018efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018efc:	685b      	ldr	r3, [r3, #4]
 8018efe:	3330      	adds	r3, #48	@ 0x30
 8018f00:	643b      	str	r3, [r7, #64]	@ 0x40

        /* As long as the device is in the CONFIGURED state.  */
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8018f02:	e070      	b.n	8018fe6 <_ux_device_class_hid_interrupt_thread+0x106>
        { 

            /* Wait until we have a event sent by the application
               or a change in the idle state to send last or empty report.  */
            status =  _ux_utility_event_flags_get(&hid -> ux_device_class_hid_event_flags_group,
 8018f04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018f06:	3328      	adds	r3, #40	@ 0x28
 8018f08:	0018      	movs	r0, r3
 8018f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018f0e:	2208      	movs	r2, #8
 8018f10:	18ba      	adds	r2, r7, r2
 8018f12:	9300      	str	r3, [sp, #0]
 8018f14:	0013      	movs	r3, r2
 8018f16:	2201      	movs	r2, #1
 8018f18:	2103      	movs	r1, #3
 8018f1a:	f7fe ff59 	bl	8017dd0 <_ux_utility_event_flags_get>
 8018f1e:	0003      	movs	r3, r0
 8018f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                                    UX_DEVICE_CLASS_HID_EVENTS_MASK, UX_OR_CLEAR, &actual_flags,
                                                    hid -> ux_device_class_hid_event_wait_timeout);

            /* If there is no event, check if we have timeout defined.  */
            if (status == UX_NO_EVENTS)
 8018f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f24:	2b07      	cmp	r3, #7
 8018f26:	d126      	bne.n	8018f76 <_ux_device_class_hid_interrupt_thread+0x96>
            {

                /* There is no event exists on timeout, insert last.  */

                /* Check if no request been ready.  */
                if (transfer_request_in -> ux_slave_transfer_request_requested_length == 0)
 8018f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f2a:	695b      	ldr	r3, [r3, #20]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d10b      	bne.n	8018f48 <_ux_device_class_hid_interrupt_thread+0x68>
                {

                    /* Assume the request use whole interrupt transfer payload.  */
                    transfer_request_in -> ux_slave_transfer_request_requested_length =
                            transfer_request_in -> ux_slave_transfer_request_transfer_length;
 8018f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f32:	6a1a      	ldr	r2, [r3, #32]
                    transfer_request_in -> ux_slave_transfer_request_requested_length =
 8018f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f36:	615a      	str	r2, [r3, #20]

                    /* Set the data to zeros.  */
                    _ux_utility_memory_set(
                        transfer_request_in -> ux_slave_transfer_request_data_pointer, 0,
 8018f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f3a:	68d8      	ldr	r0, [r3, #12]
                    _ux_utility_memory_set(
 8018f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f3e:	695b      	ldr	r3, [r3, #20]
 8018f40:	001a      	movs	r2, r3
 8018f42:	2100      	movs	r1, #0
 8018f44:	f7ff fa48 	bl	80183d8 <_ux_utility_memory_set>
                        transfer_request_in -> ux_slave_transfer_request_requested_length); /* Use case of memset is verified. */
                }

                /* Send the request to the device controller.  */
                status =  _ux_device_stack_transfer_request(transfer_request_in, 
 8018f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f4a:	6959      	ldr	r1, [r3, #20]
 8018f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f4e:	695a      	ldr	r2, [r3, #20]
 8018f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f52:	0018      	movs	r0, r3
 8018f54:	f004 f90e 	bl	801d174 <_ux_device_stack_transfer_request>
 8018f58:	0003      	movs	r3, r0
 8018f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                transfer_request_in -> ux_slave_transfer_request_requested_length,
                                transfer_request_in -> ux_slave_transfer_request_requested_length);

                /* Check error code. We don't want to invoke the error callback
                   if the device was disconnected, since that's expected.  */
                if (status != UX_SUCCESS && status != UX_TRANSFER_BUS_RESET)
 8018f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d040      	beq.n	8018fe4 <_ux_device_class_hid_interrupt_thread+0x104>
 8018f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f64:	2b26      	cmp	r3, #38	@ 0x26
 8018f66:	d03d      	beq.n	8018fe4 <_ux_device_class_hid_interrupt_thread+0x104>

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 8018f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f6a:	001a      	movs	r2, r3
 8018f6c:	2107      	movs	r1, #7
 8018f6e:	2002      	movs	r0, #2
 8018f70:	f7fe fddc 	bl	8017b2c <_ux_system_error_handler>

                /* Next: check events.  */
                continue;
 8018f74:	e036      	b.n	8018fe4 <_ux_device_class_hid_interrupt_thread+0x104>
            }

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 8018f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d029      	beq.n	8018fd0 <_ux_device_class_hid_interrupt_thread+0xf0>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 8018f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f7e:	001a      	movs	r2, r3
 8018f80:	2107      	movs	r1, #7
 8018f82:	2002      	movs	r0, #2
 8018f84:	f7fe fdd2 	bl	8017b2c <_ux_system_error_handler>

                /* Do not proceed.  */
                return;
 8018f88:	e037      	b.n	8018ffa <_ux_device_class_hid_interrupt_thread+0x11a>
            /* Check if we have an event to report.  */
            while (_ux_device_class_hid_event_get(hid, &hid_event) == UX_SUCCESS)
            {

                /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
                buffer =  transfer_request_in -> ux_slave_transfer_request_data_pointer;
 8018f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f8c:	68db      	ldr	r3, [r3, #12]
 8018f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
            
                /* Copy the event buffer into the target buffer.  */
                _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
 8018f90:	240c      	movs	r4, #12
 8018f92:	193b      	adds	r3, r7, r4
 8018f94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018f96:	193b      	adds	r3, r7, r4
 8018f98:	3308      	adds	r3, #8
 8018f9a:	0019      	movs	r1, r3
 8018f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f9e:	0018      	movs	r0, r3
 8018fa0:	f7ff f922 	bl	80181e8 <_ux_utility_memory_copy>
            
                /* Send the request to the device controller.  */
                status =  _ux_device_stack_transfer_request(transfer_request_in, hid_event.ux_device_class_hid_event_length, 
 8018fa4:	193b      	adds	r3, r7, r4
 8018fa6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8018fa8:	193b      	adds	r3, r7, r4
 8018faa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018fae:	0018      	movs	r0, r3
 8018fb0:	f004 f8e0 	bl	801d174 <_ux_device_stack_transfer_request>
 8018fb4:	0003      	movs	r3, r0
 8018fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                                                hid_event.ux_device_class_hid_event_length);
                
                /* Check error code. We don't want to invoke the error callback
                   if the device was disconnected, since that's expected.  */
                if (status != UX_SUCCESS && status != UX_TRANSFER_BUS_RESET)
 8018fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d008      	beq.n	8018fd0 <_ux_device_class_hid_interrupt_thread+0xf0>
 8018fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018fc0:	2b26      	cmp	r3, #38	@ 0x26
 8018fc2:	d005      	beq.n	8018fd0 <_ux_device_class_hid_interrupt_thread+0xf0>

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 8018fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018fc6:	001a      	movs	r2, r3
 8018fc8:	2107      	movs	r1, #7
 8018fca:	2002      	movs	r0, #2
 8018fcc:	f7fe fdae 	bl	8017b2c <_ux_system_error_handler>
            while (_ux_device_class_hid_event_get(hid, &hid_event) == UX_SUCCESS)
 8018fd0:	230c      	movs	r3, #12
 8018fd2:	18fa      	adds	r2, r7, r3
 8018fd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018fd6:	0011      	movs	r1, r2
 8018fd8:	0018      	movs	r0, r3
 8018fda:	f7ff fe01 	bl	8018be0 <_ux_device_class_hid_event_get>
 8018fde:	1e03      	subs	r3, r0, #0
 8018fe0:	d0d3      	beq.n	8018f8a <_ux_device_class_hid_interrupt_thread+0xaa>
 8018fe2:	e000      	b.n	8018fe6 <_ux_device_class_hid_interrupt_thread+0x106>
                continue;
 8018fe4:	46c0      	nop			@ (mov r8, r8)
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8018fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	2b03      	cmp	r3, #3
 8018fec:	d08a      	beq.n	8018f04 <_ux_device_class_hid_interrupt_thread+0x24>
            }                
        }
             
        /* We need to suspend ourselves. We will be resumed by the device enumeration module.  */
        _ux_device_thread_suspend(&class -> ux_slave_class_thread);
 8018fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ff0:	3350      	adds	r3, #80	@ 0x50
 8018ff2:	0018      	movs	r0, r3
 8018ff4:	f7ff fba8 	bl	8018748 <_ux_utility_thread_suspend>
        transfer_request_in =  &hid -> ux_device_class_hid_interrupt_endpoint -> ux_slave_endpoint_transfer_request;
 8018ff8:	e77f      	b.n	8018efa <_ux_device_class_hid_interrupt_thread+0x1a>
    }
}
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	b015      	add	sp, #84	@ 0x54
 8018ffe:	bd90      	pop	{r4, r7, pc}
 8019000:	20011854 	.word	0x20011854

08019004 <_ux_device_class_hid_report_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_get(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8019004:	b590      	push	{r4, r7, lr}
 8019006:	b097      	sub	sp, #92	@ 0x5c
 8019008:	af00      	add	r7, sp, #0
 801900a:	60f8      	str	r0, [r7, #12]
 801900c:	60b9      	str	r1, [r7, #8]
 801900e:	607a      	str	r2, [r7, #4]
 8019010:	603b      	str	r3, [r7, #0]
UCHAR                           report_id;
UCHAR                           report_type;
UX_SLAVE_CLASS_HID_EVENT        hid_event;
ULONG                           hid_event_length;
UCHAR                           *buffer;
UINT                            status =  UX_ERROR;
 8019012:	23ff      	movs	r3, #255	@ 0xff
 8019014:	653b      	str	r3, [r7, #80]	@ 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_GET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8019016:	4b45      	ldr	r3, [pc, #276]	@ (801912c <_ux_device_class_hid_report_get+0x128>)
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	3320      	adds	r3, #32
 801901c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801901e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019020:	333c      	adds	r3, #60	@ 0x3c
 8019022:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8019024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019026:	3330      	adds	r3, #48	@ 0x30
 8019028:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Get report ID (wValue.lower) and report type (wValue.higher).  */
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
 801902a:	2443      	movs	r4, #67	@ 0x43
 801902c:	193b      	adds	r3, r7, r4
 801902e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019030:	2156      	movs	r1, #86	@ 0x56
 8019032:	5c52      	ldrb	r2, [r2, r1]
 8019034:	701a      	strb	r2, [r3, #0]
    report_type = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8019036:	2042      	movs	r0, #66	@ 0x42
 8019038:	183b      	adds	r3, r7, r0
 801903a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801903c:	2157      	movs	r1, #87	@ 0x57
 801903e:	5c52      	ldrb	r2, [r2, r1]
 8019040:	701a      	strb	r2, [r3, #0]

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8019042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019044:	2203      	movs	r2, #3
 8019046:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
    buffer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8019048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801904a:	68db      	ldr	r3, [r3, #12]
 801904c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Initialize event fields.  */
    hid_event.ux_device_class_hid_event_report_id   = report_id;
 801904e:	193b      	adds	r3, r7, r4
 8019050:	781a      	ldrb	r2, [r3, #0]
 8019052:	2110      	movs	r1, #16
 8019054:	187b      	adds	r3, r7, r1
 8019056:	601a      	str	r2, [r3, #0]
    hid_event.ux_device_class_hid_event_report_type = report_type;
 8019058:	183b      	adds	r3, r7, r0
 801905a:	781a      	ldrb	r2, [r3, #0]
 801905c:	187b      	adds	r3, r7, r1
 801905e:	605a      	str	r2, [r3, #4]
    hid_event.ux_device_class_hid_event_length      = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8019060:	187b      	adds	r3, r7, r1
 8019062:	2220      	movs	r2, #32
 8019064:	629a      	str	r2, [r3, #40]	@ 0x28

    /* If it's input report without ID try to get it from event queue head.  */
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 8019066:	183b      	adds	r3, r7, r0
 8019068:	781b      	ldrb	r3, [r3, #0]
 801906a:	2b01      	cmp	r3, #1
 801906c:	d10c      	bne.n	8019088 <_ux_device_class_hid_report_get+0x84>
        hid -> ux_device_class_hid_report_id != UX_TRUE)
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	6a1b      	ldr	r3, [r3, #32]
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 8019072:	2b01      	cmp	r3, #1
 8019074:	d008      	beq.n	8019088 <_ux_device_class_hid_report_get+0x84>

        /* Check if we have an event to report.  */
        status = _ux_device_class_hid_event_get(hid, &hid_event);
 8019076:	187a      	adds	r2, r7, r1
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	0011      	movs	r1, r2
 801907c:	0018      	movs	r0, r3
 801907e:	f7ff fdaf 	bl	8018be0 <_ux_device_class_hid_event_get>
 8019082:	0003      	movs	r3, r0
 8019084:	653b      	str	r3, [r7, #80]	@ 0x50
 8019086:	e00c      	b.n	80190a2 <_ux_device_class_hid_report_get+0x9e>
    /* Try to get event from application callback.  */
    else
    {
        
        /* Let application fill event.  */
        if (hid -> ux_device_class_hid_get_callback != UX_NULL)
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	691b      	ldr	r3, [r3, #16]
 801908c:	2b00      	cmp	r3, #0
 801908e:	d008      	beq.n	80190a2 <_ux_device_class_hid_report_get+0x9e>
            status = hid -> ux_device_class_hid_get_callback(hid, &hid_event);
 8019090:	68fb      	ldr	r3, [r7, #12]
 8019092:	691b      	ldr	r3, [r3, #16]
 8019094:	2210      	movs	r2, #16
 8019096:	18b9      	adds	r1, r7, r2
 8019098:	68fa      	ldr	r2, [r7, #12]
 801909a:	0010      	movs	r0, r2
 801909c:	4798      	blx	r3
 801909e:	0003      	movs	r3, r0
 80190a0:	653b      	str	r3, [r7, #80]	@ 0x50
    }

    if (status == UX_SUCCESS)
 80190a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d124      	bne.n	80190f2 <_ux_device_class_hid_report_get+0xee>
    {

        /* Get the length to send back to the host.  */
        if (host_length < hid_event.ux_device_class_hid_event_length)
 80190a8:	2310      	movs	r3, #16
 80190aa:	18fb      	adds	r3, r7, r3
 80190ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80190ae:	683a      	ldr	r2, [r7, #0]
 80190b0:	429a      	cmp	r2, r3
 80190b2:	d202      	bcs.n	80190ba <_ux_device_class_hid_report_get+0xb6>
            hid_event_length =  host_length;
 80190b4:	683b      	ldr	r3, [r7, #0]
 80190b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80190b8:	e003      	b.n	80190c2 <_ux_device_class_hid_report_get+0xbe>
        else
            hid_event_length =  hid_event.ux_device_class_hid_event_length;
 80190ba:	2310      	movs	r3, #16
 80190bc:	18fb      	adds	r3, r7, r3
 80190be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80190c0:	657b      	str	r3, [r7, #84]	@ 0x54
        if (hid_event_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80190c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80190c4:	2380      	movs	r3, #128	@ 0x80
 80190c6:	005b      	lsls	r3, r3, #1
 80190c8:	429a      	cmp	r2, r3
 80190ca:	d902      	bls.n	80190d2 <_ux_device_class_hid_report_get+0xce>
            hid_event_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 80190cc:	2380      	movs	r3, #128	@ 0x80
 80190ce:	005b      	lsls	r3, r3, #1
 80190d0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* First reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 80190d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80190d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190d6:	2100      	movs	r1, #0
 80190d8:	0018      	movs	r0, r3
 80190da:	f7ff f97d 	bl	80183d8 <_ux_utility_memory_set>

        /* Copy the event buffer into the target buffer.  */
        _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event_length); /* Use case of memcpy is verified. */
 80190de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80190e0:	2310      	movs	r3, #16
 80190e2:	18fb      	adds	r3, r7, r3
 80190e4:	3308      	adds	r3, #8
 80190e6:	0019      	movs	r1, r3
 80190e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190ea:	0018      	movs	r0, r3
 80190ec:	f7ff f87c 	bl	80181e8 <_ux_utility_memory_copy>
 80190f0:	e00e      	b.n	8019110 <_ux_device_class_hid_report_get+0x10c>
    {

        /* There's no event, so send back zero'd memory.  */

        /* Get the length to send back to the host.  */
        if (host_length < UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80190f2:	683b      	ldr	r3, [r7, #0]
 80190f4:	2bff      	cmp	r3, #255	@ 0xff
 80190f6:	d802      	bhi.n	80190fe <_ux_device_class_hid_report_get+0xfa>
            hid_event_length =  host_length;
 80190f8:	683b      	ldr	r3, [r7, #0]
 80190fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80190fc:	e002      	b.n	8019104 <_ux_device_class_hid_report_get+0x100>
        else
            hid_event_length =  UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 80190fe:	2380      	movs	r3, #128	@ 0x80
 8019100:	005b      	lsls	r3, r3, #1
 8019102:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8019104:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019108:	2100      	movs	r1, #0
 801910a:	0018      	movs	r0, r3
 801910c:	f7ff f964 	bl	80183d8 <_ux_utility_memory_set>
    }

    /* We can send the report.  */
    status =  _ux_device_stack_transfer_request(transfer_request, hid_event_length, host_length);
 8019110:	683a      	ldr	r2, [r7, #0]
 8019112:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019116:	0018      	movs	r0, r3
 8019118:	f004 f82c 	bl	801d174 <_ux_device_stack_transfer_request>
 801911c:	0003      	movs	r3, r0
 801911e:	653b      	str	r3, [r7, #80]	@ 0x50

    /* Return the status to the caller.  */
    return(status);
 8019120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8019122:	0018      	movs	r0, r3
 8019124:	46bd      	mov	sp, r7
 8019126:	b017      	add	sp, #92	@ 0x5c
 8019128:	bd90      	pop	{r4, r7, pc}
 801912a:	46c0      	nop			@ (mov r8, r8)
 801912c:	20011854 	.word	0x20011854

08019130 <_ux_device_class_hid_report_set>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_set(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8019130:	b590      	push	{r4, r7, lr}
 8019132:	b095      	sub	sp, #84	@ 0x54
 8019134:	af00      	add	r7, sp, #0
 8019136:	60f8      	str	r0, [r7, #12]
 8019138:	60b9      	str	r1, [r7, #8]
 801913a:	607a      	str	r2, [r7, #4]
 801913c:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_SET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801913e:	4b25      	ldr	r3, [pc, #148]	@ (80191d4 <_ux_device_class_hid_report_set+0xa4>)
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	3320      	adds	r3, #32
 8019144:	64bb      	str	r3, [r7, #72]	@ 0x48
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8019146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019148:	333c      	adds	r3, #60	@ 0x3c
 801914a:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801914c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801914e:	3330      	adds	r3, #48	@ 0x30
 8019150:	643b      	str	r3, [r7, #64]	@ 0x40
    
    /* Set the event type to OUTPUT.  */
    hid_event.ux_device_class_hid_event_report_type =  descriptor_type;
 8019152:	2114      	movs	r1, #20
 8019154:	187b      	adds	r3, r7, r1
 8019156:	68ba      	ldr	r2, [r7, #8]
 8019158:	605a      	str	r2, [r3, #4]
    
    /* Get HID data address.  */
    hid_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 801915a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801915c:	68db      	ldr	r3, [r3, #12]
 801915e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for report ID in this HID descriptor.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	6a1b      	ldr	r3, [r3, #32]
 8019164:	2b01      	cmp	r3, #1
 8019166:	d10d      	bne.n	8019184 <_ux_device_class_hid_report_set+0x54>
    {
        /* Set the report ID, First byte of data payload.  */
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;
 8019168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801916a:	781b      	ldrb	r3, [r3, #0]
 801916c:	001a      	movs	r2, r3
 801916e:	187b      	adds	r3, r7, r1
 8019170:	601a      	str	r2, [r3, #0]

        /* Set the length = total length - report ID. */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length -1;
 8019172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019174:	699b      	ldr	r3, [r3, #24]
 8019176:	1e5a      	subs	r2, r3, #1
 8019178:	187b      	adds	r3, r7, r1
 801917a:	629a      	str	r2, [r3, #40]	@ 0x28
    
        /* Set HID data after report ID.  */
        hid_buffer++;
 801917c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801917e:	3301      	adds	r3, #1
 8019180:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019182:	e007      	b.n	8019194 <_ux_device_class_hid_report_set+0x64>
    }
        
    else
    {    
        /* Set the report ID, not used here.  */
        hid_event.ux_device_class_hid_event_report_id = 0;
 8019184:	2114      	movs	r1, #20
 8019186:	187b      	adds	r3, r7, r1
 8019188:	2200      	movs	r2, #0
 801918a:	601a      	str	r2, [r3, #0]

        /* Set the length.  */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length;
 801918c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801918e:	699a      	ldr	r2, [r3, #24]
 8019190:	187b      	adds	r3, r7, r1
 8019192:	629a      	str	r2, [r3, #40]	@ 0x28
    }
        
    /* Copy the buffer received from the host.  Check for overflow. */
    if (hid_event.ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8019194:	2214      	movs	r2, #20
 8019196:	18bb      	adds	r3, r7, r2
 8019198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801919a:	2b20      	cmp	r3, #32
 801919c:	d902      	bls.n	80191a4 <_ux_device_class_hid_report_set+0x74>
    
        /* Overflow detected.  */
        hid_event.ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;        
 801919e:	18bb      	adds	r3, r7, r2
 80191a0:	2220      	movs	r2, #32
 80191a2:	629a      	str	r2, [r3, #40]	@ 0x28
        
    /* Now we can safely copy the payload.  */
    _ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, hid_buffer, 
 80191a4:	2414      	movs	r4, #20
 80191a6:	193b      	adds	r3, r7, r4
 80191a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80191aa:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80191ac:	193b      	adds	r3, r7, r4
 80191ae:	3308      	adds	r3, #8
 80191b0:	0018      	movs	r0, r3
 80191b2:	f7ff f819 	bl	80181e8 <_ux_utility_memory_copy>
                                hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* If there is a callback defined by the application, send the hid event to it.  */
    if (hid -> ux_device_class_hid_callback != UX_NULL)
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	68db      	ldr	r3, [r3, #12]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d005      	beq.n	80191ca <_ux_device_class_hid_report_set+0x9a>
    
        /* Callback exists. */
        hid -> ux_device_class_hid_callback(hid, &hid_event);
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	68db      	ldr	r3, [r3, #12]
 80191c2:	1939      	adds	r1, r7, r4
 80191c4:	68fa      	ldr	r2, [r7, #12]
 80191c6:	0010      	movs	r0, r2
 80191c8:	4798      	blx	r3
        
    /* Return the status to the caller.  */
    return(UX_SUCCESS);
 80191ca:	2300      	movs	r3, #0
}
 80191cc:	0018      	movs	r0, r3
 80191ce:	46bd      	mov	sp, r7
 80191d0:	b015      	add	sp, #84	@ 0x54
 80191d2:	bd90      	pop	{r4, r7, pc}
 80191d4:	20011854 	.word	0x20011854

080191d8 <_ux_device_class_hid_uninitialize>:
/*                                            added interrupt OUT support,*/
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 80191d8:	b580      	push	{r7, lr}
 80191da:	b084      	sub	sp, #16
 80191dc:	af00      	add	r7, sp, #0
 80191de:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS                          *class;


    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	6a1b      	ldr	r3, [r3, #32]
 80191e4:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80191ea:	60bb      	str	r3, [r7, #8]

#if !defined(UX_DEVICE_STANDALONE)

    /* Remove HID thread.  */
    _ux_device_thread_delete(&class -> ux_slave_class_thread);
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	3350      	adds	r3, #80	@ 0x50
 80191f0:	0018      	movs	r0, r3
 80191f2:	f7ff fa80 	bl	80186f6 <_ux_utility_thread_delete>

    /* Remove the thread used by HID.  */
    _ux_utility_memory_free(class -> ux_slave_class_thread_stack);
 80191f6:	68fa      	ldr	r2, [r7, #12]
 80191f8:	2380      	movs	r3, #128	@ 0x80
 80191fa:	005b      	lsls	r3, r3, #1
 80191fc:	58d3      	ldr	r3, [r2, r3]
 80191fe:	0018      	movs	r0, r3
 8019200:	f7ff f80e 	bl	8018220 <_ux_utility_memory_free>

    /* Delete the event flag group for the hid class.  */
    _ux_device_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
 8019204:	68bb      	ldr	r3, [r7, #8]
 8019206:	3328      	adds	r3, #40	@ 0x28
 8019208:	0018      	movs	r0, r3
 801920a:	f7fe fdd2 	bl	8017db2 <_ux_utility_event_flags_delete>
#endif

    /* Free memory for the array. */
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 801920e:	68bb      	ldr	r3, [r7, #8]
 8019210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019212:	0018      	movs	r0, r3
 8019214:	f7ff f804 	bl	8018220 <_ux_utility_memory_free>
        hid -> ux_device_class_hid_receiver ->
            ux_device_class_hid_receiver_uninitialize(hid -> ux_device_class_hid_receiver);
#endif

    /* Free the resources.  */
    _ux_utility_memory_free(hid);
 8019218:	68bb      	ldr	r3, [r7, #8]
 801921a:	0018      	movs	r0, r3
 801921c:	f7ff f800 	bl	8018220 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(UX_SUCCESS);
 8019220:	2300      	movs	r3, #0
}
 8019222:	0018      	movs	r0, r3
 8019224:	46bd      	mov	sp, r7
 8019226:	b004      	add	sp, #16
 8019228:	bd80      	pop	{r7, pc}

0801922a <_ux_device_class_storage_activate>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 801922a:	b580      	push	{r7, lr}
 801922c:	b086      	sub	sp, #24
 801922e:	af00      	add	r7, sp, #0
 8019230:	6078      	str	r0, [r7, #4]
                                          
UINT                                    status = UX_SUCCESS;
 8019232:	2300      	movs	r3, #0
 8019234:	617b      	str	r3, [r7, #20]
UX_SLAVE_ENDPOINT                       *endpoint;
#endif


    /* Get the class container.  */
    class_inst =  command -> ux_slave_class_command_class_ptr;
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	6a1b      	ldr	r3, [r3, #32]
 801923a:	613b      	str	r3, [r7, #16]

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *)class_inst -> ux_slave_class_instance;
 801923c:	693b      	ldr	r3, [r7, #16]
 801923e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019240:	60fb      	str	r3, [r7, #12]

    /* Get the interface that owns this instance.  */
    interface =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	689b      	ldr	r3, [r3, #8]
 8019246:	60bb      	str	r3, [r7, #8]
    
    /* Store the class instance into the interface.  */
    interface -> ux_slave_interface_class_instance =  (VOID *)storage;
 8019248:	68bb      	ldr	r3, [r7, #8]
 801924a:	68fa      	ldr	r2, [r7, #12]
 801924c:	609a      	str	r2, [r3, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    storage -> ux_slave_class_storage_interface =  interface;
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	68ba      	ldr	r2, [r7, #8]
 8019252:	601a      	str	r2, [r3, #0]

#if !defined(UX_DEVICE_STANDALONE)

    /* Resume thread.  */
    _ux_device_thread_resume(&class_inst -> ux_slave_class_thread); 
 8019254:	693b      	ldr	r3, [r7, #16]
 8019256:	3350      	adds	r3, #80	@ 0x50
 8019258:	0018      	movs	r0, r3
 801925a:	f7ff fa66 	bl	801872a <_ux_utility_thread_resume>

    status = UX_SUCCESS;
#endif

    /* If there is a activate function call it.  */
    if (storage -> ux_slave_class_storage_instance_activate != UX_NULL)
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019262:	2b00      	cmp	r3, #0
 8019264:	d004      	beq.n	8019270 <_ux_device_class_storage_activate+0x46>
    {        
        /* Invoke the application.  */
        storage -> ux_slave_class_storage_instance_activate(storage);
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801926a:	68fa      	ldr	r2, [r7, #12]
 801926c:	0010      	movs	r0, r2
 801926e:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, storage, 0, 0, 0)

    /* Return completion status.  */
    return(status);
 8019270:	697b      	ldr	r3, [r7, #20]
}
 8019272:	0018      	movs	r0, r3
 8019274:	46bd      	mov	sp, r7
 8019276:	b006      	add	sp, #24
 8019278:	bd80      	pop	{r7, pc}
	...

0801927c <_ux_device_class_storage_control_request>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 801927c:	b580      	push	{r7, lr}
 801927e:	b08c      	sub	sp, #48	@ 0x30
 8019280:	af00      	add	r7, sp, #0
 8019282:	6078      	str	r0, [r7, #4]
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;


    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8019284:	4b3b      	ldr	r3, [pc, #236]	@ (8019374 <_ux_device_class_storage_control_request+0xf8>)
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	3320      	adds	r3, #32
 801928a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 801928c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801928e:	336c      	adds	r3, #108	@ 0x6c
 8019290:	623b      	str	r3, [r7, #32]
    
    /* Extract the request type from the SETUP packet..   */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8019292:	6a3b      	ldr	r3, [r7, #32]
 8019294:	2255      	movs	r2, #85	@ 0x55
 8019296:	5c9b      	ldrb	r3, [r3, r2]
 8019298:	61fb      	str	r3, [r7, #28]
    request_value = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 801929a:	6a3b      	ldr	r3, [r7, #32]
 801929c:	3354      	adds	r3, #84	@ 0x54
 801929e:	3302      	adds	r3, #2
 80192a0:	0018      	movs	r0, r3
 80192a2:	f7ff f96e 	bl	8018582 <_ux_utility_short_get>
 80192a6:	0003      	movs	r3, r0
 80192a8:	61bb      	str	r3, [r7, #24]
    request_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 80192aa:	6a3b      	ldr	r3, [r7, #32]
 80192ac:	3354      	adds	r3, #84	@ 0x54
 80192ae:	3306      	adds	r3, #6
 80192b0:	0018      	movs	r0, r3
 80192b2:	f7ff f966 	bl	8018582 <_ux_utility_short_get>
 80192b6:	0003      	movs	r3, r0
 80192b8:	617b      	str	r3, [r7, #20]

    /* Check if wValue is valid.  */
    if (request_value != 0)
 80192ba:	69bb      	ldr	r3, [r7, #24]
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d001      	beq.n	80192c4 <_ux_device_class_storage_control_request+0x48>
        return(UX_ERROR);
 80192c0:	23ff      	movs	r3, #255	@ 0xff
 80192c2:	e052      	b.n	801936a <_ux_device_class_storage_control_request+0xee>

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	6a1b      	ldr	r3, [r3, #32]
 80192c8:	613b      	str	r3, [r7, #16]
    
    /* Get the storage instance from this class container.  */
    storage =  (UX_SLAVE_CLASS_STORAGE *) class -> ux_slave_class_instance;
 80192ca:	693b      	ldr	r3, [r7, #16]
 80192cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80192ce:	60fb      	str	r3, [r7, #12]

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 80192d0:	69fb      	ldr	r3, [r7, #28]
 80192d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80192d4:	d02f      	beq.n	8019336 <_ux_device_class_storage_control_request+0xba>
 80192d6:	69fb      	ldr	r3, [r7, #28]
 80192d8:	2bff      	cmp	r3, #255	@ 0xff
 80192da:	d143      	bne.n	8019364 <_ux_device_class_storage_control_request+0xe8>
    {

    case UX_SLAVE_CLASS_STORAGE_RESET:

        /* Check if wLength is valid.  */
        if (request_length != 0)
 80192dc:	697b      	ldr	r3, [r7, #20]
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d001      	beq.n	80192e6 <_ux_device_class_storage_control_request+0x6a>
            return(UX_ERROR);
 80192e2:	23ff      	movs	r3, #255	@ 0xff
 80192e4:	e041      	b.n	801936a <_ux_device_class_storage_control_request+0xee>
        endpoint_in = storage -> ux_device_class_storage_ep_in;
        endpoint_out = storage -> ux_device_class_storage_ep_out;
#else

        /* We need the interface to the class.  */
        interface =  storage -> ux_slave_class_storage_interface;
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	60bb      	str	r3, [r7, #8]
        
        /* Locate the endpoints.  */
        endpoint_in =  interface -> ux_slave_interface_first_endpoint;
 80192ec:	68bb      	ldr	r3, [r7, #8]
 80192ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80192f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        
        /* Check the endpoint direction, if IN we have the correct endpoint.  */
        if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 80192f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80192f4:	695b      	ldr	r3, [r3, #20]
 80192f6:	2280      	movs	r2, #128	@ 0x80
 80192f8:	4013      	ands	r3, r2
 80192fa:	d105      	bne.n	8019308 <_ux_device_class_storage_control_request+0x8c>
        {

            /* Wrong direction, we found the OUT endpoint first.  */
            endpoint_out =  endpoint_in;
 80192fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80192fe:	62bb      	str	r3, [r7, #40]	@ 0x28
                
            /* So the next endpoint has to be the IN endpoint.  */
            endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 8019300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019306:	e002      	b.n	801930e <_ux_device_class_storage_control_request+0x92>
        }
        else
        {

            /* We found the endpoint IN first, so next endpoint is OUT.  */
            endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 8019308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801930a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801930c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
#endif
            
        /* First cancel any transfer on the endpoint OUT, from the host.  */
        transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 801930e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019310:	3330      	adds	r3, #48	@ 0x30
 8019312:	623b      	str	r3, [r7, #32]
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 8019314:	6a3b      	ldr	r3, [r7, #32]
 8019316:	2128      	movs	r1, #40	@ 0x28
 8019318:	0018      	movs	r0, r3
 801931a:	f003 fedf 	bl	801d0dc <_ux_device_stack_transfer_abort>

        /* Then cancel any transfer on the endpoint IN, from the host.  */
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 801931e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019320:	3330      	adds	r3, #48	@ 0x30
 8019322:	623b      	str	r3, [r7, #32]
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 8019324:	6a3b      	ldr	r3, [r7, #32]
 8019326:	2128      	movs	r1, #40	@ 0x28
 8019328:	0018      	movs	r0, r3
 801932a:	f003 fed7 	bl	801d0dc <_ux_device_stack_transfer_abort>

        /* Reset phase error.  */
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	2200      	movs	r2, #0
 8019332:	651a      	str	r2, [r3, #80]	@ 0x50

        break;
 8019334:	e018      	b.n	8019368 <_ux_device_class_storage_control_request+0xec>

    case UX_SLAVE_CLASS_STORAGE_GET_MAX_LUN:

        /* Check if wLength is valid.  */
        if (request_length < 1)
 8019336:	697b      	ldr	r3, [r7, #20]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d101      	bne.n	8019340 <_ux_device_class_storage_control_request+0xc4>
            return(UX_ERROR);
 801933c:	23ff      	movs	r3, #255	@ 0xff
 801933e:	e014      	b.n	801936a <_ux_device_class_storage_control_request+0xee>

        /* Set the value of the number of LUN in the buffer. The max number of LUN is the
           number of declared LUN - 1.  */
        *transfer_request -> ux_slave_transfer_request_data_pointer =  (UCHAR)(storage -> ux_slave_class_storage_number_lun -1);
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	685b      	ldr	r3, [r3, #4]
 8019344:	b2da      	uxtb	r2, r3
 8019346:	6a3b      	ldr	r3, [r7, #32]
 8019348:	68db      	ldr	r3, [r3, #12]
 801934a:	3a01      	subs	r2, #1
 801934c:	b2d2      	uxtb	r2, r2
 801934e:	701a      	strb	r2, [r3, #0]

        /* Set the phase of the transfer to data out.  */
        transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8019350:	6a3b      	ldr	r3, [r7, #32]
 8019352:	2203      	movs	r2, #3
 8019354:	629a      	str	r2, [r3, #40]	@ 0x28

        /* We can return the LUN number.  */
        _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8019356:	6a3b      	ldr	r3, [r7, #32]
 8019358:	2201      	movs	r2, #1
 801935a:	2101      	movs	r1, #1
 801935c:	0018      	movs	r0, r3
 801935e:	f003 ff09 	bl	801d174 <_ux_device_stack_transfer_request>
        break;
 8019362:	e001      	b.n	8019368 <_ux_device_class_storage_control_request+0xec>

    default:

        /* Unknown function. It's not handled.  */
        return(UX_ERROR);
 8019364:	23ff      	movs	r3, #255	@ 0xff
 8019366:	e000      	b.n	801936a <_ux_device_class_storage_control_request+0xee>
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 8019368:	2300      	movs	r3, #0
}
 801936a:	0018      	movs	r0, r3
 801936c:	46bd      	mov	sp, r7
 801936e:	b00c      	add	sp, #48	@ 0x30
 8019370:	bd80      	pop	{r7, pc}
 8019372:	46c0      	nop			@ (mov r8, r8)
 8019374:	20011854 	.word	0x20011854

08019378 <_ux_device_class_storage_csw_send>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_csw_send(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                UX_SLAVE_ENDPOINT *endpoint_in, UCHAR csw_status)
{
 8019378:	b580      	push	{r7, lr}
 801937a:	b088      	sub	sp, #32
 801937c:	af00      	add	r7, sp, #0
 801937e:	60f8      	str	r0, [r7, #12]
 8019380:	60b9      	str	r1, [r7, #8]
 8019382:	607a      	str	r2, [r7, #4]
 8019384:	001a      	movs	r2, r3
 8019386:	1cfb      	adds	r3, r7, #3
 8019388:	701a      	strb	r2, [r3, #0]

UINT                    status = UX_SUCCESS;
 801938a:	2300      	movs	r3, #0
 801938c:	61fb      	str	r3, [r7, #28]
    storage -> ux_device_class_storage_ep_in -> ux_slave_endpoint_transfer_request.
            ux_slave_transfer_request_data_pointer = storage -> ux_device_class_storage_buffer[1];
#endif

    /* If CSW skipped, just return.  */
    if (UX_DEVICE_CLASS_STORAGE_CSW_SKIP(&storage -> ux_slave_class_storage_csw_status))
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	3350      	adds	r3, #80	@ 0x50
 8019392:	3303      	adds	r3, #3
 8019394:	781b      	ldrb	r3, [r3, #0]
 8019396:	2b00      	cmp	r3, #0
 8019398:	d001      	beq.n	801939e <_ux_device_class_storage_csw_send+0x26>
        return(UX_SUCCESS);
 801939a:	2300      	movs	r3, #0
 801939c:	e031      	b.n	8019402 <_ux_device_class_storage_csw_send+0x8a>

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	3330      	adds	r3, #48	@ 0x30
 80193a2:	61bb      	str	r3, [r7, #24]

    /* Get CSW buffer pointer.  */
    csw_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 80193a4:	69bb      	ldr	r3, [r7, #24]
 80193a6:	68db      	ldr	r3, [r3, #12]
 80193a8:	617b      	str	r3, [r7, #20]

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(csw_buffer, 0, UX_SLAVE_CLASS_STORAGE_CSW_LENGTH); /* Use case of memset is verified. */
 80193aa:	697b      	ldr	r3, [r7, #20]
 80193ac:	220d      	movs	r2, #13
 80193ae:	2100      	movs	r1, #0
 80193b0:	0018      	movs	r0, r3
 80193b2:	f7ff f811 	bl	80183d8 <_ux_utility_memory_set>

    /* Store the signature of the CSW.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_SIGNATURE], UX_SLAVE_CLASS_STORAGE_CSW_SIGNATURE_MASK);
 80193b6:	4a15      	ldr	r2, [pc, #84]	@ (801940c <_ux_device_class_storage_csw_send+0x94>)
 80193b8:	697b      	ldr	r3, [r7, #20]
 80193ba:	0011      	movs	r1, r2
 80193bc:	0018      	movs	r0, r3
 80193be:	f7fe fd7e 	bl	8017ebe <_ux_utility_long_put>

    /* Store the SCSI tag from the CBW.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_TAG], storage -> ux_slave_class_storage_scsi_tag);
 80193c2:	697b      	ldr	r3, [r7, #20]
 80193c4:	1d1a      	adds	r2, r3, #4
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80193ca:	0019      	movs	r1, r3
 80193cc:	0010      	movs	r0, r2
 80193ce:	f7fe fd76 	bl	8017ebe <_ux_utility_long_put>

    /* Store the dCSWDataResidue.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_DATA_RESIDUE], storage -> ux_slave_class_storage_csw_residue);
 80193d2:	697b      	ldr	r3, [r7, #20]
 80193d4:	3308      	adds	r3, #8
 80193d6:	001a      	movs	r2, r3
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80193dc:	0019      	movs	r1, r3
 80193de:	0010      	movs	r0, r2
 80193e0:	f7fe fd6d 	bl	8017ebe <_ux_utility_long_put>

    /* Store the status of the previous operation.  */
    csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_STATUS] = (UCHAR)storage -> ux_slave_class_storage_csw_status;
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80193e8:	697b      	ldr	r3, [r7, #20]
 80193ea:	330c      	adds	r3, #12
 80193ec:	b2d2      	uxtb	r2, r2
 80193ee:	701a      	strb	r2, [r3, #0]

    /* We may be in a special state machine condition where the endpoint is stalled waiting for
       a CLEAR_FEATURE.  We will wait until the host clears the endpoint.  
       The transfer_request function does that.  */
    /* Send the CSW back to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, UX_SLAVE_CLASS_STORAGE_CSW_LENGTH, 
 80193f0:	69bb      	ldr	r3, [r7, #24]
 80193f2:	220d      	movs	r2, #13
 80193f4:	210d      	movs	r1, #13
 80193f6:	0018      	movs	r0, r3
 80193f8:	f003 febc 	bl	801d174 <_ux_device_stack_transfer_request>
 80193fc:	0003      	movs	r3, r0
 80193fe:	61fb      	str	r3, [r7, #28]
                                    UX_SLAVE_CLASS_STORAGE_CSW_LENGTH);
#endif

    /* Return completion status.  */
    return(status);
 8019400:	69fb      	ldr	r3, [r7, #28]
}
 8019402:	0018      	movs	r0, r3
 8019404:	46bd      	mov	sp, r7
 8019406:	b008      	add	sp, #32
 8019408:	bd80      	pop	{r7, pc}
 801940a:	46c0      	nop			@ (mov r8, r8)
 801940c:	53425355 	.word	0x53425355

08019410 <_ux_device_class_storage_deactivate>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 8019410:	b580      	push	{r7, lr}
 8019412:	b086      	sub	sp, #24
 8019414:	af00      	add	r7, sp, #0
 8019416:	6078      	str	r0, [r7, #4]
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;
UX_SLAVE_CLASS              *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	6a1b      	ldr	r3, [r3, #32]
 801941c:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *)class -> ux_slave_class_instance;
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019422:	60bb      	str	r3, [r7, #8]
    endpoint_in -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =
                                storage -> ux_device_class_storage_buffer[1];
#else

    /* Locate the endpoints.  */
    endpoint_in =  storage -> ux_slave_class_storage_interface -> ux_slave_interface_first_endpoint;
 8019424:	68bb      	ldr	r3, [r7, #8]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801942a:	617b      	str	r3, [r7, #20]
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 801942c:	697b      	ldr	r3, [r7, #20]
 801942e:	695b      	ldr	r3, [r3, #20]
 8019430:	2280      	movs	r2, #128	@ 0x80
 8019432:	4013      	ands	r3, r2
 8019434:	d105      	bne.n	8019442 <_ux_device_class_storage_deactivate+0x32>
    {

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
 8019436:	697b      	ldr	r3, [r7, #20]
 8019438:	613b      	str	r3, [r7, #16]
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 801943a:	693b      	ldr	r3, [r7, #16]
 801943c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801943e:	617b      	str	r3, [r7, #20]
 8019440:	e002      	b.n	8019448 <_ux_device_class_storage_deactivate+0x38>
    }
    else
    {

        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 8019442:	697b      	ldr	r3, [r7, #20]
 8019444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019446:	613b      	str	r3, [r7, #16]
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 8019448:	697b      	ldr	r3, [r7, #20]
 801944a:	2126      	movs	r1, #38	@ 0x26
 801944c:	0018      	movs	r0, r3
 801944e:	f003 fe7d 	bl	801d14c <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 8019452:	693b      	ldr	r3, [r7, #16]
 8019454:	2126      	movs	r1, #38	@ 0x26
 8019456:	0018      	movs	r0, r3
 8019458:	f003 fe78 	bl	801d14c <_ux_device_stack_transfer_all_request_abort>
#endif

    /* If there is a deactivate function call it.  */
    if (storage -> ux_slave_class_storage_instance_deactivate != UX_NULL)
 801945c:	68bb      	ldr	r3, [r7, #8]
 801945e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019460:	2b00      	cmp	r3, #0
 8019462:	d004      	beq.n	801946e <_ux_device_class_storage_deactivate+0x5e>
    {

        /* Invoke the application.  */
        storage -> ux_slave_class_storage_instance_deactivate(storage);
 8019464:	68bb      	ldr	r3, [r7, #8]
 8019466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019468:	68ba      	ldr	r2, [r7, #8]
 801946a:	0010      	movs	r0, r2
 801946c:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(storage);

    /* Return completion status.  */
    return(UX_SUCCESS);
 801946e:	2300      	movs	r3, #0
}
 8019470:	0018      	movs	r0, r3
 8019472:	46bd      	mov	sp, r7
 8019474:	b006      	add	sp, #24
 8019476:	bd80      	pop	{r7, pc}

08019478 <_ux_device_class_storage_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 8019478:	b580      	push	{r7, lr}
 801947a:	b084      	sub	sp, #16
 801947c:	af00      	add	r7, sp, #0
 801947e:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	2b07      	cmp	r3, #7
 8019486:	d834      	bhi.n	80194f2 <_ux_device_class_storage_entry+0x7a>
 8019488:	009a      	lsls	r2, r3, #2
 801948a:	4b1f      	ldr	r3, [pc, #124]	@ (8019508 <_ux_device_class_storage_entry+0x90>)
 801948c:	18d3      	adds	r3, r2, r3
 801948e:	681b      	ldr	r3, [r3, #0]
 8019490:	469f      	mov	pc, r3
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the Storage class.  */
        status =  _ux_device_class_storage_initialize(command);
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	0018      	movs	r0, r3
 8019496:	f000 f859 	bl	801954c <_ux_device_class_storage_initialize>
 801949a:	0003      	movs	r3, r0
 801949c:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	e02d      	b.n	80194fe <_ux_device_class_storage_entry+0x86>
        
    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the Storage class.  */
        status =  _ux_device_class_storage_uninitialize(command);
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	0018      	movs	r0, r3
 80194a6:	f001 f8bd 	bl	801a624 <_ux_device_class_storage_uninitialize>
 80194aa:	0003      	movs	r3, r0
 80194ac:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	e025      	b.n	80194fe <_ux_device_class_storage_entry+0x86>
        

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_STORAGE_CLASS)
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	695b      	ldr	r3, [r3, #20]
 80194b6:	2b08      	cmp	r3, #8
 80194b8:	d101      	bne.n	80194be <_ux_device_class_storage_entry+0x46>
            return(UX_SUCCESS);
 80194ba:	2300      	movs	r3, #0
 80194bc:	e01f      	b.n	80194fe <_ux_device_class_storage_entry+0x86>
        else
            return(UX_NO_CLASS_MATCH);
 80194be:	2357      	movs	r3, #87	@ 0x57
 80194c0:	e01d      	b.n	80194fe <_ux_device_class_storage_entry+0x86>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the storage thread needs to be activated.  */
        status =  _ux_device_class_storage_activate(command);
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	0018      	movs	r0, r3
 80194c6:	f7ff feb0 	bl	801922a <_ux_device_class_storage_activate>
 80194ca:	0003      	movs	r3, r0
 80194cc:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	e015      	b.n	80194fe <_ux_device_class_storage_entry+0x86>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the storage thread canceled.  */
        status =  _ux_device_class_storage_deactivate(command);
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	0018      	movs	r0, r3
 80194d6:	f7ff ff9b 	bl	8019410 <_ux_device_class_storage_deactivate>
 80194da:	0003      	movs	r3, r0
 80194dc:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	e00d      	b.n	80194fe <_ux_device_class_storage_entry+0x86>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_storage_control_request(command);
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	0018      	movs	r0, r3
 80194e6:	f7ff fec9 	bl	801927c <_ux_device_class_storage_control_request>
 80194ea:	0003      	movs	r3, r0
 80194ec:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 80194ee:	68fb      	ldr	r3, [r7, #12]
 80194f0:	e005      	b.n	80194fe <_ux_device_class_storage_entry+0x86>

    default: 

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 80194f2:	2254      	movs	r2, #84	@ 0x54
 80194f4:	2107      	movs	r1, #7
 80194f6:	2002      	movs	r0, #2
 80194f8:	f7fe fb18 	bl	8017b2c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 80194fc:	2354      	movs	r3, #84	@ 0x54
    }   
}
 80194fe:	0018      	movs	r0, r3
 8019500:	46bd      	mov	sp, r7
 8019502:	b004      	add	sp, #16
 8019504:	bd80      	pop	{r7, pc}
 8019506:	46c0      	nop			@ (mov r8, r8)
 8019508:	0801f24c 	.word	0x0801f24c

0801950c <_ux_device_class_storage_format>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_format(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR *cbwcb)
{
 801950c:	b580      	push	{r7, lr}
 801950e:	b084      	sub	sp, #16
 8019510:	af00      	add	r7, sp, #0
 8019512:	60f8      	str	r0, [r7, #12]
 8019514:	60b9      	str	r1, [r7, #8]
 8019516:	607a      	str	r2, [r7, #4]
 8019518:	603b      	str	r3, [r7, #0]

#if !defined(UX_DEVICE_STANDALONE)

    /* This command is not yet supported. So Stall the endpoint. We stall the
       OUT endpoint because we expect the host to send parameters.  */
    _ux_device_stack_endpoint_stall(endpoint_out);
 801951a:	683b      	ldr	r3, [r7, #0]
 801951c:	0018      	movs	r0, r3
 801951e:	f003 f93d 	bl	801c79c <_ux_device_stack_endpoint_stall>

    UX_PARAMETER_NOT_USED(endpoint_out);
#endif

    /* And update the REQUEST_SENSE codes.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8019522:	68f9      	ldr	r1, [r7, #12]
 8019524:	68ba      	ldr	r2, [r7, #8]
 8019526:	0013      	movs	r3, r2
 8019528:	00db      	lsls	r3, r3, #3
 801952a:	1a9b      	subs	r3, r3, r2
 801952c:	00db      	lsls	r3, r3, #3
 801952e:	18cb      	adds	r3, r1, r3
 8019530:	3320      	adds	r3, #32
 8019532:	4a05      	ldr	r2, [pc, #20]	@ (8019548 <_ux_device_class_storage_format+0x3c>)
 8019534:	601a      	str	r2, [r3, #0]
                                               UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x05,0x26,0x01);

    /* Now we set the CSW with failure.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	2201      	movs	r2, #1
 801953a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Return not supported error.  */
    return(UX_FUNCTION_NOT_SUPPORTED);
 801953c:	2354      	movs	r3, #84	@ 0x54
}
 801953e:	0018      	movs	r0, r3
 8019540:	46bd      	mov	sp, r7
 8019542:	b004      	add	sp, #16
 8019544:	bd80      	pop	{r7, pc}
 8019546:	46c0      	nop			@ (mov r8, r8)
 8019548:	00012605 	.word	0x00012605

0801954c <_ux_device_class_storage_initialize>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 801954c:	b5b0      	push	{r4, r5, r7, lr}
 801954e:	b08e      	sub	sp, #56	@ 0x38
 8019550:	af06      	add	r7, sp, #24
 8019552:	6078      	str	r0, [r7, #4]

UINT                                    status = UX_SUCCESS;
 8019554:	2300      	movs	r3, #0
 8019556:	61fb      	str	r3, [r7, #28]
UX_SLAVE_CLASS                          *class_inst;
ULONG                                   lun_index;


    /* Get the pointer to the application parameters for the storage class.  */
    storage_parameter =  command -> ux_slave_class_command_parameter;
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801955c:	617b      	str	r3, [r7, #20]

    /* Ensure the number of LUN declared by the caller does not exceed the
       max number allowed for LUN storage.  */
    if (storage_parameter -> ux_slave_class_storage_parameter_number_lun > UX_MAX_SLAVE_LUN)
 801955e:	697b      	ldr	r3, [r7, #20]
 8019560:	689b      	ldr	r3, [r3, #8]
 8019562:	2b01      	cmp	r3, #1
 8019564:	d901      	bls.n	801956a <_ux_device_class_storage_initialize+0x1e>
        return UX_ERROR;
 8019566:	23ff      	movs	r3, #255	@ 0xff
 8019568:	e16f      	b.n	801984a <_ux_device_class_storage_initialize+0x2fe>

    /* Get the class container.  */
    class_inst =  command -> ux_slave_class_command_class_ptr;
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	6a1b      	ldr	r3, [r3, #32]
 801956e:	613b      	str	r3, [r7, #16]

    /* Create an instance of the device storage class.  */
    storage =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_STORAGE));
 8019570:	226c      	movs	r2, #108	@ 0x6c
 8019572:	2100      	movs	r1, #0
 8019574:	2000      	movs	r0, #0
 8019576:	f7fe fcf1 	bl	8017f5c <_ux_utility_memory_allocate>
 801957a:	0003      	movs	r3, r0
 801957c:	60fb      	str	r3, [r7, #12]

    /* Check for successful allocation.  */
    if (storage == UX_NULL)
 801957e:	68fb      	ldr	r3, [r7, #12]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d101      	bne.n	8019588 <_ux_device_class_storage_initialize+0x3c>
        return(UX_MEMORY_INSUFFICIENT);
 8019584:	2312      	movs	r3, #18
 8019586:	e160      	b.n	801984a <_ux_device_class_storage_initialize+0x2fe>

#if !defined(UX_DEVICE_STANDALONE)

    /* Allocate some memory for the thread stack. */
    class_inst -> ux_slave_class_thread_stack = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, UX_THREAD_STACK_SIZE);
 8019588:	2380      	movs	r3, #128	@ 0x80
 801958a:	00db      	lsls	r3, r3, #3
 801958c:	001a      	movs	r2, r3
 801958e:	2100      	movs	r1, #0
 8019590:	2000      	movs	r0, #0
 8019592:	f7fe fce3 	bl	8017f5c <_ux_utility_memory_allocate>
 8019596:	0001      	movs	r1, r0
 8019598:	693a      	ldr	r2, [r7, #16]
 801959a:	2380      	movs	r3, #128	@ 0x80
 801959c:	005b      	lsls	r3, r3, #1
 801959e:	50d1      	str	r1, [r2, r3]

    /* If it's OK, create thread.  */
    if (class_inst -> ux_slave_class_thread_stack != UX_NULL)
 80195a0:	693a      	ldr	r2, [r7, #16]
 80195a2:	2380      	movs	r3, #128	@ 0x80
 80195a4:	005b      	lsls	r3, r3, #1
 80195a6:	58d3      	ldr	r3, [r2, r3]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d01c      	beq.n	80195e6 <_ux_device_class_storage_initialize+0x9a>

        /* This instance needs to be running in a different thread. So start
           a new thread. We pass a pointer to the class to the new thread.  This thread
           does not start until we have a instance of the class. */
        status =  _ux_device_thread_create(&class_inst -> ux_slave_class_thread, "ux_slave_storage_thread",
 80195ac:	693b      	ldr	r3, [r7, #16]
 80195ae:	3350      	adds	r3, #80	@ 0x50
 80195b0:	0018      	movs	r0, r3
 80195b2:	693d      	ldr	r5, [r7, #16]
 80195b4:	693a      	ldr	r2, [r7, #16]
 80195b6:	2380      	movs	r3, #128	@ 0x80
 80195b8:	005b      	lsls	r3, r3, #1
 80195ba:	58d3      	ldr	r3, [r2, r3]
 80195bc:	4ca5      	ldr	r4, [pc, #660]	@ (8019854 <_ux_device_class_storage_initialize+0x308>)
 80195be:	49a6      	ldr	r1, [pc, #664]	@ (8019858 <_ux_device_class_storage_initialize+0x30c>)
 80195c0:	2200      	movs	r2, #0
 80195c2:	9205      	str	r2, [sp, #20]
 80195c4:	2200      	movs	r2, #0
 80195c6:	9204      	str	r2, [sp, #16]
 80195c8:	2214      	movs	r2, #20
 80195ca:	9203      	str	r2, [sp, #12]
 80195cc:	2214      	movs	r2, #20
 80195ce:	9202      	str	r2, [sp, #8]
 80195d0:	2280      	movs	r2, #128	@ 0x80
 80195d2:	00d2      	lsls	r2, r2, #3
 80195d4:	9201      	str	r2, [sp, #4]
 80195d6:	9300      	str	r3, [sp, #0]
 80195d8:	002b      	movs	r3, r5
 80195da:	0022      	movs	r2, r4
 80195dc:	f7ff f85f 	bl	801869e <_ux_utility_thread_create>
 80195e0:	0003      	movs	r3, r0
 80195e2:	61fb      	str	r3, [r7, #28]
 80195e4:	e001      	b.n	80195ea <_ux_device_class_storage_initialize+0x9e>
                    _ux_device_class_storage_thread,
                    (ULONG) (ALIGN_TYPE) class_inst, (VOID *) class_inst -> ux_slave_class_thread_stack,
                    UX_THREAD_STACK_SIZE, UX_THREAD_PRIORITY_CLASS,
                    UX_THREAD_PRIORITY_CLASS, UX_NO_TIME_SLICE, UX_DONT_START);
    else
        status = UX_MEMORY_INSUFFICIENT;
 80195e6:	2312      	movs	r3, #18
 80195e8:	61fb      	str	r3, [r7, #28]

    status = UX_SUCCESS;
#endif

    /* If thread resources allocated, go on.  */
    if (status == UX_SUCCESS)
 80195ea:	69fb      	ldr	r3, [r7, #28]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d000      	beq.n	80195f2 <_ux_device_class_storage_initialize+0xa6>
 80195f0:	e11a      	b.n	8019828 <_ux_device_class_storage_initialize+0x2dc>
    {

        UX_THREAD_EXTENSION_PTR_SET(&(class_inst -> ux_slave_class_thread), class_inst)

        /* Store the number of LUN declared.  */
        storage -> ux_slave_class_storage_number_lun = storage_parameter -> ux_slave_class_storage_parameter_number_lun;
 80195f2:	697b      	ldr	r3, [r7, #20]
 80195f4:	689a      	ldr	r2, [r3, #8]
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	605a      	str	r2, [r3, #4]

        /* Copy each individual LUN parameters.  */
        for (lun_index = 0; lun_index < storage -> ux_slave_class_storage_number_lun; lun_index++)
 80195fa:	2300      	movs	r3, #0
 80195fc:	61bb      	str	r3, [r7, #24]
 80195fe:	e0c8      	b.n	8019792 <_ux_device_class_storage_initialize+0x246>
        {

            /* Check block length size. */
            if (storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_block_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8019600:	6979      	ldr	r1, [r7, #20]
 8019602:	69ba      	ldr	r2, [r7, #24]
 8019604:	0013      	movs	r3, r2
 8019606:	00db      	lsls	r3, r3, #3
 8019608:	1a9b      	subs	r3, r3, r2
 801960a:	00db      	lsls	r3, r3, #3
 801960c:	18cb      	adds	r3, r1, r3
 801960e:	3310      	adds	r3, #16
 8019610:	681a      	ldr	r2, [r3, #0]
 8019612:	2380      	movs	r3, #128	@ 0x80
 8019614:	011b      	lsls	r3, r3, #4
 8019616:	429a      	cmp	r2, r3
 8019618:	d902      	bls.n	8019620 <_ux_device_class_storage_initialize+0xd4>
            {
                /* Cannot proceed.  */
                status = (UX_MEMORY_INSUFFICIENT);
 801961a:	2312      	movs	r3, #18
 801961c:	61fb      	str	r3, [r7, #28]
                break;
 801961e:	e0be      	b.n	801979e <_ux_device_class_storage_initialize+0x252>
            }

            /* Store all the application parameter information about the media.  */
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_last_lba       = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_last_lba;
 8019620:	6979      	ldr	r1, [r7, #20]
 8019622:	69ba      	ldr	r2, [r7, #24]
 8019624:	0013      	movs	r3, r2
 8019626:	00db      	lsls	r3, r3, #3
 8019628:	1a9b      	subs	r3, r3, r2
 801962a:	00db      	lsls	r3, r3, #3
 801962c:	18cb      	adds	r3, r1, r3
 801962e:	330c      	adds	r3, #12
 8019630:	6819      	ldr	r1, [r3, #0]
 8019632:	68f8      	ldr	r0, [r7, #12]
 8019634:	69ba      	ldr	r2, [r7, #24]
 8019636:	0013      	movs	r3, r2
 8019638:	00db      	lsls	r3, r3, #3
 801963a:	1a9b      	subs	r3, r3, r2
 801963c:	00db      	lsls	r3, r3, #3
 801963e:	18c3      	adds	r3, r0, r3
 8019640:	3308      	adds	r3, #8
 8019642:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_block_length   = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_block_length;
 8019644:	6979      	ldr	r1, [r7, #20]
 8019646:	69ba      	ldr	r2, [r7, #24]
 8019648:	0013      	movs	r3, r2
 801964a:	00db      	lsls	r3, r3, #3
 801964c:	1a9b      	subs	r3, r3, r2
 801964e:	00db      	lsls	r3, r3, #3
 8019650:	18cb      	adds	r3, r1, r3
 8019652:	3310      	adds	r3, #16
 8019654:	6819      	ldr	r1, [r3, #0]
 8019656:	68f8      	ldr	r0, [r7, #12]
 8019658:	69ba      	ldr	r2, [r7, #24]
 801965a:	0013      	movs	r3, r2
 801965c:	00db      	lsls	r3, r3, #3
 801965e:	1a9b      	subs	r3, r3, r2
 8019660:	00db      	lsls	r3, r3, #3
 8019662:	18c3      	adds	r3, r0, r3
 8019664:	330c      	adds	r3, #12
 8019666:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_type           = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_type;
 8019668:	6979      	ldr	r1, [r7, #20]
 801966a:	69ba      	ldr	r2, [r7, #24]
 801966c:	0013      	movs	r3, r2
 801966e:	00db      	lsls	r3, r3, #3
 8019670:	1a9b      	subs	r3, r3, r2
 8019672:	00db      	lsls	r3, r3, #3
 8019674:	18cb      	adds	r3, r1, r3
 8019676:	3314      	adds	r3, #20
 8019678:	6819      	ldr	r1, [r3, #0]
 801967a:	68f8      	ldr	r0, [r7, #12]
 801967c:	69ba      	ldr	r2, [r7, #24]
 801967e:	0013      	movs	r3, r2
 8019680:	00db      	lsls	r3, r3, #3
 8019682:	1a9b      	subs	r3, r3, r2
 8019684:	00db      	lsls	r3, r3, #3
 8019686:	18c3      	adds	r3, r0, r3
 8019688:	3310      	adds	r3, #16
 801968a:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_removable_flag = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_removable_flag;
 801968c:	6979      	ldr	r1, [r7, #20]
 801968e:	69ba      	ldr	r2, [r7, #24]
 8019690:	0013      	movs	r3, r2
 8019692:	00db      	lsls	r3, r3, #3
 8019694:	1a9b      	subs	r3, r3, r2
 8019696:	00db      	lsls	r3, r3, #3
 8019698:	18cb      	adds	r3, r1, r3
 801969a:	3318      	adds	r3, #24
 801969c:	6819      	ldr	r1, [r3, #0]
 801969e:	68f8      	ldr	r0, [r7, #12]
 80196a0:	69ba      	ldr	r2, [r7, #24]
 80196a2:	0013      	movs	r3, r2
 80196a4:	00db      	lsls	r3, r3, #3
 80196a6:	1a9b      	subs	r3, r3, r2
 80196a8:	00db      	lsls	r3, r3, #3
 80196aa:	18c3      	adds	r3, r0, r3
 80196ac:	3314      	adds	r3, #20
 80196ae:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_read_only_flag = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_read_only_flag;
 80196b0:	6979      	ldr	r1, [r7, #20]
 80196b2:	69ba      	ldr	r2, [r7, #24]
 80196b4:	0013      	movs	r3, r2
 80196b6:	00db      	lsls	r3, r3, #3
 80196b8:	1a9b      	subs	r3, r3, r2
 80196ba:	00db      	lsls	r3, r3, #3
 80196bc:	18cb      	adds	r3, r1, r3
 80196be:	331c      	adds	r3, #28
 80196c0:	6819      	ldr	r1, [r3, #0]
 80196c2:	68f8      	ldr	r0, [r7, #12]
 80196c4:	69ba      	ldr	r2, [r7, #24]
 80196c6:	0013      	movs	r3, r2
 80196c8:	00db      	lsls	r3, r3, #3
 80196ca:	1a9b      	subs	r3, r3, r2
 80196cc:	00db      	lsls	r3, r3, #3
 80196ce:	18c3      	adds	r3, r0, r3
 80196d0:	3318      	adds	r3, #24
 80196d2:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_read           = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_read;
 80196d4:	6979      	ldr	r1, [r7, #20]
 80196d6:	69ba      	ldr	r2, [r7, #24]
 80196d8:	0013      	movs	r3, r2
 80196da:	00db      	lsls	r3, r3, #3
 80196dc:	1a9b      	subs	r3, r3, r2
 80196de:	00db      	lsls	r3, r3, #3
 80196e0:	18cb      	adds	r3, r1, r3
 80196e2:	3330      	adds	r3, #48	@ 0x30
 80196e4:	6819      	ldr	r1, [r3, #0]
 80196e6:	68f8      	ldr	r0, [r7, #12]
 80196e8:	69ba      	ldr	r2, [r7, #24]
 80196ea:	0013      	movs	r3, r2
 80196ec:	00db      	lsls	r3, r3, #3
 80196ee:	1a9b      	subs	r3, r3, r2
 80196f0:	00db      	lsls	r3, r3, #3
 80196f2:	18c3      	adds	r3, r0, r3
 80196f4:	332c      	adds	r3, #44	@ 0x2c
 80196f6:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_flush          = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_flush;
 80196f8:	6979      	ldr	r1, [r7, #20]
 80196fa:	69ba      	ldr	r2, [r7, #24]
 80196fc:	0013      	movs	r3, r2
 80196fe:	00db      	lsls	r3, r3, #3
 8019700:	1a9b      	subs	r3, r3, r2
 8019702:	00db      	lsls	r3, r3, #3
 8019704:	18cb      	adds	r3, r1, r3
 8019706:	3338      	adds	r3, #56	@ 0x38
 8019708:	6819      	ldr	r1, [r3, #0]
 801970a:	68f8      	ldr	r0, [r7, #12]
 801970c:	69ba      	ldr	r2, [r7, #24]
 801970e:	0013      	movs	r3, r2
 8019710:	00db      	lsls	r3, r3, #3
 8019712:	1a9b      	subs	r3, r3, r2
 8019714:	00db      	lsls	r3, r3, #3
 8019716:	18c3      	adds	r3, r0, r3
 8019718:	3334      	adds	r3, #52	@ 0x34
 801971a:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_write          = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_write;
 801971c:	6979      	ldr	r1, [r7, #20]
 801971e:	69ba      	ldr	r2, [r7, #24]
 8019720:	0013      	movs	r3, r2
 8019722:	00db      	lsls	r3, r3, #3
 8019724:	1a9b      	subs	r3, r3, r2
 8019726:	00db      	lsls	r3, r3, #3
 8019728:	18cb      	adds	r3, r1, r3
 801972a:	3334      	adds	r3, #52	@ 0x34
 801972c:	6819      	ldr	r1, [r3, #0]
 801972e:	68f8      	ldr	r0, [r7, #12]
 8019730:	69ba      	ldr	r2, [r7, #24]
 8019732:	0013      	movs	r3, r2
 8019734:	00db      	lsls	r3, r3, #3
 8019736:	1a9b      	subs	r3, r3, r2
 8019738:	00db      	lsls	r3, r3, #3
 801973a:	18c3      	adds	r3, r0, r3
 801973c:	3330      	adds	r3, #48	@ 0x30
 801973e:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_status         = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_status;
 8019740:	6979      	ldr	r1, [r7, #20]
 8019742:	69bb      	ldr	r3, [r7, #24]
 8019744:	1c5a      	adds	r2, r3, #1
 8019746:	0013      	movs	r3, r2
 8019748:	00db      	lsls	r3, r3, #3
 801974a:	1a9b      	subs	r3, r3, r2
 801974c:	00db      	lsls	r3, r3, #3
 801974e:	18cb      	adds	r3, r1, r3
 8019750:	3304      	adds	r3, #4
 8019752:	6818      	ldr	r0, [r3, #0]
 8019754:	68f9      	ldr	r1, [r7, #12]
 8019756:	69bb      	ldr	r3, [r7, #24]
 8019758:	1c5a      	adds	r2, r3, #1
 801975a:	0013      	movs	r3, r2
 801975c:	00db      	lsls	r3, r3, #3
 801975e:	1a9b      	subs	r3, r3, r2
 8019760:	00db      	lsls	r3, r3, #3
 8019762:	5058      	str	r0, [r3, r1]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_notification   = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_notification;
 8019764:	6979      	ldr	r1, [r7, #20]
 8019766:	69bb      	ldr	r3, [r7, #24]
 8019768:	1c5a      	adds	r2, r3, #1
 801976a:	0013      	movs	r3, r2
 801976c:	00db      	lsls	r3, r3, #3
 801976e:	1a9b      	subs	r3, r3, r2
 8019770:	00db      	lsls	r3, r3, #3
 8019772:	18cb      	adds	r3, r1, r3
 8019774:	3308      	adds	r3, #8
 8019776:	6819      	ldr	r1, [r3, #0]
 8019778:	68f8      	ldr	r0, [r7, #12]
 801977a:	69bb      	ldr	r3, [r7, #24]
 801977c:	1c5a      	adds	r2, r3, #1
 801977e:	0013      	movs	r3, r2
 8019780:	00db      	lsls	r3, r3, #3
 8019782:	1a9b      	subs	r3, r3, r2
 8019784:	00db      	lsls	r3, r3, #3
 8019786:	18c3      	adds	r3, r0, r3
 8019788:	3304      	adds	r3, #4
 801978a:	6019      	str	r1, [r3, #0]
        for (lun_index = 0; lun_index < storage -> ux_slave_class_storage_number_lun; lun_index++)
 801978c:	69bb      	ldr	r3, [r7, #24]
 801978e:	3301      	adds	r3, #1
 8019790:	61bb      	str	r3, [r7, #24]
 8019792:	68fb      	ldr	r3, [r7, #12]
 8019794:	685b      	ldr	r3, [r3, #4]
 8019796:	69ba      	ldr	r2, [r7, #24]
 8019798:	429a      	cmp	r2, r3
 801979a:	d200      	bcs.n	801979e <_ux_device_class_storage_initialize+0x252>
 801979c:	e730      	b.n	8019600 <_ux_device_class_storage_initialize+0xb4>
        }

        /* If it's OK, complete it.  */
        if (status == UX_SUCCESS)
 801979e:	69fb      	ldr	r3, [r7, #28]
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d13c      	bne.n	801981e <_ux_device_class_storage_initialize+0x2d2>
        {

            /* Store the start and stop signals if needed by the application.  */
            storage -> ux_slave_class_storage_instance_activate = storage_parameter -> ux_slave_class_storage_instance_activate;
 80197a4:	697b      	ldr	r3, [r7, #20]
 80197a6:	681a      	ldr	r2, [r3, #0]
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	655a      	str	r2, [r3, #84]	@ 0x54
            storage -> ux_slave_class_storage_instance_deactivate = storage_parameter -> ux_slave_class_storage_instance_deactivate;
 80197ac:	697b      	ldr	r3, [r7, #20]
 80197ae:	685a      	ldr	r2, [r3, #4]
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Store the vendor id, product id, product revision and product serial.  */
            if (storage_parameter -> ux_slave_class_storage_parameter_vendor_id)
 80197b4:	697b      	ldr	r3, [r7, #20]
 80197b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d004      	beq.n	80197c6 <_ux_device_class_storage_initialize+0x27a>
                storage -> ux_slave_class_storage_vendor_id = storage_parameter -> ux_slave_class_storage_parameter_vendor_id;
 80197bc:	697b      	ldr	r3, [r7, #20]
 80197be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80197c4:	e002      	b.n	80197cc <_ux_device_class_storage_initialize+0x280>
            else
                storage -> ux_slave_class_storage_vendor_id = _ux_system_slave_class_storage_vendor_id;
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	4a24      	ldr	r2, [pc, #144]	@ (801985c <_ux_device_class_storage_initialize+0x310>)
 80197ca:	65da      	str	r2, [r3, #92]	@ 0x5c

            if (storage_parameter -> ux_slave_class_storage_parameter_product_id)
 80197cc:	697b      	ldr	r3, [r7, #20]
 80197ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d004      	beq.n	80197de <_ux_device_class_storage_initialize+0x292>
                storage -> ux_slave_class_storage_product_id = storage_parameter -> ux_slave_class_storage_parameter_product_id;
 80197d4:	697b      	ldr	r3, [r7, #20]
 80197d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	661a      	str	r2, [r3, #96]	@ 0x60
 80197dc:	e002      	b.n	80197e4 <_ux_device_class_storage_initialize+0x298>
            else
                storage -> ux_slave_class_storage_product_id = _ux_system_slave_class_storage_product_id;
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	4a1f      	ldr	r2, [pc, #124]	@ (8019860 <_ux_device_class_storage_initialize+0x314>)
 80197e2:	661a      	str	r2, [r3, #96]	@ 0x60

            if (storage_parameter -> ux_slave_class_storage_parameter_product_rev)
 80197e4:	697b      	ldr	r3, [r7, #20]
 80197e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d004      	beq.n	80197f6 <_ux_device_class_storage_initialize+0x2aa>
                storage -> ux_slave_class_storage_product_rev = storage_parameter -> ux_slave_class_storage_parameter_product_rev;
 80197ec:	697b      	ldr	r3, [r7, #20]
 80197ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	665a      	str	r2, [r3, #100]	@ 0x64
 80197f4:	e002      	b.n	80197fc <_ux_device_class_storage_initialize+0x2b0>
            else
                storage -> ux_slave_class_storage_product_rev = _ux_system_slave_class_storage_product_rev;
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	4a1a      	ldr	r2, [pc, #104]	@ (8019864 <_ux_device_class_storage_initialize+0x318>)
 80197fa:	665a      	str	r2, [r3, #100]	@ 0x64

            if (storage_parameter -> ux_slave_class_storage_parameter_product_serial)
 80197fc:	697b      	ldr	r3, [r7, #20]
 80197fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019800:	2b00      	cmp	r3, #0
 8019802:	d004      	beq.n	801980e <_ux_device_class_storage_initialize+0x2c2>
                storage -> ux_slave_class_storage_product_serial = storage_parameter -> ux_slave_class_storage_parameter_product_serial;
 8019804:	697b      	ldr	r3, [r7, #20]
 8019806:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019808:	68fb      	ldr	r3, [r7, #12]
 801980a:	669a      	str	r2, [r3, #104]	@ 0x68
 801980c:	e002      	b.n	8019814 <_ux_device_class_storage_initialize+0x2c8>
            else
                storage -> ux_slave_class_storage_product_serial = _ux_system_slave_class_storage_product_serial;
 801980e:	68fb      	ldr	r3, [r7, #12]
 8019810:	4a15      	ldr	r2, [pc, #84]	@ (8019868 <_ux_device_class_storage_initialize+0x31c>)
 8019812:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Save the address of the STORAGE instance inside the STORAGE container.  */
            class_inst -> ux_slave_class_instance = (VOID *) storage;
 8019814:	693b      	ldr	r3, [r7, #16]
 8019816:	68fa      	ldr	r2, [r7, #12]
 8019818:	649a      	str	r2, [r3, #72]	@ 0x48

            return(UX_SUCCESS);
 801981a:	2300      	movs	r3, #0
 801981c:	e015      	b.n	801984a <_ux_device_class_storage_initialize+0x2fe>
        }

        /* Free thread resources.  */
        _ux_device_thread_delete(&class_inst -> ux_slave_class_thread);
 801981e:	693b      	ldr	r3, [r7, #16]
 8019820:	3350      	adds	r3, #80	@ 0x50
 8019822:	0018      	movs	r0, r3
 8019824:	f7fe ff67 	bl	80186f6 <_ux_utility_thread_delete>
    }

#if !defined(UX_DEVICE_STANDALONE)
    if (class_inst -> ux_slave_class_thread_stack != UX_NULL)
 8019828:	693a      	ldr	r2, [r7, #16]
 801982a:	2380      	movs	r3, #128	@ 0x80
 801982c:	005b      	lsls	r3, r3, #1
 801982e:	58d3      	ldr	r3, [r2, r3]
 8019830:	2b00      	cmp	r3, #0
 8019832:	d005      	beq.n	8019840 <_ux_device_class_storage_initialize+0x2f4>
        _ux_utility_memory_free(&class_inst -> ux_slave_class_thread_stack);
 8019834:	693b      	ldr	r3, [r7, #16]
 8019836:	3301      	adds	r3, #1
 8019838:	33ff      	adds	r3, #255	@ 0xff
 801983a:	0018      	movs	r0, r3
 801983c:	f7fe fcf0 	bl	8018220 <_ux_utility_memory_free>
#endif

    /* Free instance.  */
    _ux_utility_memory_free(storage);
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	0018      	movs	r0, r3
 8019844:	f7fe fcec 	bl	8018220 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 8019848:	69fb      	ldr	r3, [r7, #28]
}
 801984a:	0018      	movs	r0, r3
 801984c:	46bd      	mov	sp, r7
 801984e:	b008      	add	sp, #32
 8019850:	bdb0      	pop	{r4, r5, r7, pc}
 8019852:	46c0      	nop			@ (mov r8, r8)
 8019854:	0801a2b1 	.word	0x0801a2b1
 8019858:	0801f004 	.word	0x0801f004
 801985c:	20000044 	.word	0x20000044
 8019860:	20000050 	.word	0x20000050
 8019864:	20000064 	.word	0x20000064
 8019868:	2000006c 	.word	0x2000006c

0801986c <_ux_device_class_storage_inquiry>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_inquiry(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 801986c:	b580      	push	{r7, lr}
 801986e:	b08a      	sub	sp, #40	@ 0x28
 8019870:	af00      	add	r7, sp, #0
 8019872:	60f8      	str	r0, [r7, #12]
 8019874:	60b9      	str	r1, [r7, #8]
 8019876:	607a      	str	r2, [r7, #4]
 8019878:	603b      	str	r3, [r7, #0]

UINT                    status = UX_SUCCESS;
 801987a:	2300      	movs	r3, #0
 801987c:	627b      	str	r3, [r7, #36]	@ 0x24
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_INQUIRY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

#if !defined(UX_DEVICE_STANDALONE)

    /* Check direction.  */
    if (storage -> ux_slave_class_storage_host_length &&
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019882:	2b00      	cmp	r3, #0
 8019884:	d00e      	beq.n	80198a4 <_ux_device_class_storage_inquiry+0x38>
        (storage -> ux_slave_class_storage_cbw_flags & 0x80) == 0)
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	2244      	movs	r2, #68	@ 0x44
 801988a:	5c9b      	ldrb	r3, [r3, r2]
 801988c:	b25b      	sxtb	r3, r3
    if (storage -> ux_slave_class_storage_host_length &&
 801988e:	2b00      	cmp	r3, #0
 8019890:	db08      	blt.n	80198a4 <_ux_device_class_storage_inquiry+0x38>
    {
        _ux_device_stack_endpoint_stall(endpoint_out);
 8019892:	683b      	ldr	r3, [r7, #0]
 8019894:	0018      	movs	r0, r3
 8019896:	f002 ff81 	bl	801c79c <_ux_device_stack_endpoint_stall>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 801989a:	68fb      	ldr	r3, [r7, #12]
 801989c:	2202      	movs	r2, #2
 801989e:	651a      	str	r2, [r3, #80]	@ 0x50
        return(UX_ERROR);
 80198a0:	23ff      	movs	r3, #255	@ 0xff
 80198a2:	e0c9      	b.n	8019a38 <_ux_device_class_storage_inquiry+0x1cc>
    }
#endif

    /* From the SCSI Inquiry payload, get the page code.  */
    inquiry_page_code =  *(cbwcb + UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE);
 80198a4:	231f      	movs	r3, #31
 80198a6:	18fb      	adds	r3, r7, r3
 80198a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80198aa:	7892      	ldrb	r2, [r2, #2]
 80198ac:	701a      	strb	r2, [r3, #0]
    
    /* And the length to be returned. */
    inquiry_length =  storage -> ux_slave_class_storage_host_length;
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80198b2:	623b      	str	r3, [r7, #32]

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	3330      	adds	r3, #48	@ 0x30
 80198b8:	61bb      	str	r3, [r7, #24]

    /* Obtain inquiry buffer pointer.  */
    inquiry_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 80198ba:	69bb      	ldr	r3, [r7, #24]
 80198bc:	68db      	ldr	r3, [r3, #12]
 80198be:	617b      	str	r3, [r7, #20]

    /* Ensure the data buffer is cleaned.  */
    _ux_utility_memory_set(inquiry_buffer, 0, UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 80198c0:	697b      	ldr	r3, [r7, #20]
 80198c2:	2224      	movs	r2, #36	@ 0x24
 80198c4:	2100      	movs	r1, #0
 80198c6:	0018      	movs	r0, r3
 80198c8:	f7fe fd86 	bl	80183d8 <_ux_utility_memory_set>

    /* Check for the maximum length to be returned. */
    if (inquiry_length > UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH)
 80198cc:	6a3b      	ldr	r3, [r7, #32]
 80198ce:	2b24      	cmp	r3, #36	@ 0x24
 80198d0:	d901      	bls.n	80198d6 <_ux_device_class_storage_inquiry+0x6a>
        inquiry_length = UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH;
 80198d2:	2324      	movs	r3, #36	@ 0x24
 80198d4:	623b      	str	r3, [r7, #32]

    /* Default CSW to passed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	2200      	movs	r2, #0
 80198da:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Ensure we know about the page code.  */
    switch (inquiry_page_code)
 80198dc:	231f      	movs	r3, #31
 80198de:	18fb      	adds	r3, r7, r3
 80198e0:	781b      	ldrb	r3, [r3, #0]
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d002      	beq.n	80198ec <_ux_device_class_storage_inquiry+0x80>
 80198e6:	2b80      	cmp	r3, #128	@ 0x80
 80198e8:	d05d      	beq.n	80199a6 <_ux_device_class_storage_inquiry+0x13a>
 80198ea:	e078      	b.n	80199de <_ux_device_class_storage_inquiry+0x172>
    {

    case UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE_STANDARD:
            
        /* Store the product type.  */
        inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PERIPHERAL_TYPE] =  (UCHAR)storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type;
 80198ec:	68f9      	ldr	r1, [r7, #12]
 80198ee:	68ba      	ldr	r2, [r7, #8]
 80198f0:	0013      	movs	r3, r2
 80198f2:	00db      	lsls	r3, r3, #3
 80198f4:	1a9b      	subs	r3, r3, r2
 80198f6:	00db      	lsls	r3, r3, #3
 80198f8:	18cb      	adds	r3, r1, r3
 80198fa:	3310      	adds	r3, #16
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	b2da      	uxtb	r2, r3
 8019900:	697b      	ldr	r3, [r7, #20]
 8019902:	701a      	strb	r2, [r3, #0]

        /* Store the Media Removable bit.  */
        inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_REMOVABLE_MEDIA] =  (UCHAR)storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_removable_flag;
 8019904:	68f9      	ldr	r1, [r7, #12]
 8019906:	68ba      	ldr	r2, [r7, #8]
 8019908:	0013      	movs	r3, r2
 801990a:	00db      	lsls	r3, r3, #3
 801990c:	1a9b      	subs	r3, r3, r2
 801990e:	00db      	lsls	r3, r3, #3
 8019910:	18cb      	adds	r3, r1, r3
 8019912:	3314      	adds	r3, #20
 8019914:	681a      	ldr	r2, [r3, #0]
 8019916:	697b      	ldr	r3, [r7, #20]
 8019918:	3301      	adds	r3, #1
 801991a:	b2d2      	uxtb	r2, r2
 801991c:	701a      	strb	r2, [r3, #0]

        /* Store the Data Format bit.  */
        if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type == UX_SLAVE_CLASS_STORAGE_MEDIA_CDROM)
 801991e:	68f9      	ldr	r1, [r7, #12]
 8019920:	68ba      	ldr	r2, [r7, #8]
 8019922:	0013      	movs	r3, r2
 8019924:	00db      	lsls	r3, r3, #3
 8019926:	1a9b      	subs	r3, r3, r2
 8019928:	00db      	lsls	r3, r3, #3
 801992a:	18cb      	adds	r3, r1, r3
 801992c:	3310      	adds	r3, #16
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	2b05      	cmp	r3, #5
 8019932:	d104      	bne.n	801993e <_ux_device_class_storage_inquiry+0xd2>
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_DATA_FORMAT] =  0x32;
 8019934:	697b      	ldr	r3, [r7, #20]
 8019936:	3303      	adds	r3, #3
 8019938:	2232      	movs	r2, #50	@ 0x32
 801993a:	701a      	strb	r2, [r3, #0]
 801993c:	e003      	b.n	8019946 <_ux_device_class_storage_inquiry+0xda>
        else
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_DATA_FORMAT] =  0x00;
 801993e:	697b      	ldr	r3, [r7, #20]
 8019940:	3303      	adds	r3, #3
 8019942:	2200      	movs	r2, #0
 8019944:	701a      	strb	r2, [r3, #0]

        /* Store the length of the response.  There is a hack here. For CD-ROM, the data lg is fixed to 0x5B !  */
        if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type != UX_SLAVE_CLASS_STORAGE_MEDIA_CDROM)
 8019946:	68f9      	ldr	r1, [r7, #12]
 8019948:	68ba      	ldr	r2, [r7, #8]
 801994a:	0013      	movs	r3, r2
 801994c:	00db      	lsls	r3, r3, #3
 801994e:	1a9b      	subs	r3, r3, r2
 8019950:	00db      	lsls	r3, r3, #3
 8019952:	18cb      	adds	r3, r1, r3
 8019954:	3310      	adds	r3, #16
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	2b05      	cmp	r3, #5
 801995a:	d004      	beq.n	8019966 <_ux_device_class_storage_inquiry+0xfa>
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_ADDITIONAL_LENGTH] =  UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH;
 801995c:	697b      	ldr	r3, [r7, #20]
 801995e:	3304      	adds	r3, #4
 8019960:	2224      	movs	r2, #36	@ 0x24
 8019962:	701a      	strb	r2, [r3, #0]
 8019964:	e003      	b.n	801996e <_ux_device_class_storage_inquiry+0x102>
        else            
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_ADDITIONAL_LENGTH] =  UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH_CD_ROM;
 8019966:	697b      	ldr	r3, [r7, #20]
 8019968:	3304      	adds	r3, #4
 801996a:	225b      	movs	r2, #91	@ 0x5b
 801996c:	701a      	strb	r2, [r3, #0]

        /* Fill in the storage vendor ID.  */
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_VENDOR_INFORMATION,
 801996e:	697b      	ldr	r3, [r7, #20]
 8019970:	3308      	adds	r3, #8
 8019972:	0018      	movs	r0, r3
                                                                    storage -> ux_slave_class_storage_vendor_id, 8); /* Use case of memcpy is verified. */
 8019974:	68fb      	ldr	r3, [r7, #12]
 8019976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_VENDOR_INFORMATION,
 8019978:	2208      	movs	r2, #8
 801997a:	0019      	movs	r1, r3
 801997c:	f7fe fc34 	bl	80181e8 <_ux_utility_memory_copy>

        /* Fill in the product vendor ID.  */
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_ID,
 8019980:	697b      	ldr	r3, [r7, #20]
 8019982:	3310      	adds	r3, #16
 8019984:	0018      	movs	r0, r3
                                                                    storage -> ux_slave_class_storage_product_id, 16); /* Use case of memcpy is verified. */
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_ID,
 801998a:	2210      	movs	r2, #16
 801998c:	0019      	movs	r1, r3
 801998e:	f7fe fc2b 	bl	80181e8 <_ux_utility_memory_copy>

        /* Fill in the product revision number.  */
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_REVISION,
 8019992:	697b      	ldr	r3, [r7, #20]
 8019994:	3320      	adds	r3, #32
 8019996:	0018      	movs	r0, r3
                                                                    storage -> ux_slave_class_storage_product_rev, 4); /* Use case of memcpy is verified. */
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_REVISION,
 801999c:	2204      	movs	r2, #4
 801999e:	0019      	movs	r1, r3
 80199a0:	f7fe fc22 	bl	80181e8 <_ux_utility_memory_copy>

        break;
 80199a4:	e030      	b.n	8019a08 <_ux_device_class_storage_inquiry+0x19c>

    case UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE_SERIAL:

        /* Initialize the page code in response buffer.  */
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer, UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE_SERIAL);
 80199a6:	69bb      	ldr	r3, [r7, #24]
 80199a8:	68db      	ldr	r3, [r3, #12]
 80199aa:	2180      	movs	r1, #128	@ 0x80
 80199ac:	0018      	movs	r0, r3
 80199ae:	f7fe fe1d 	bl	80185ec <_ux_utility_short_put_big_endian>

        /* Initialize the length of the serial number in response buffer.  */
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer + 2, 20);
 80199b2:	69bb      	ldr	r3, [r7, #24]
 80199b4:	68db      	ldr	r3, [r3, #12]
 80199b6:	3302      	adds	r3, #2
 80199b8:	2114      	movs	r1, #20
 80199ba:	0018      	movs	r0, r3
 80199bc:	f7fe fe16 	bl	80185ec <_ux_utility_short_put_big_endian>

        /* Copy the serial number buffer into the transfer request memory.  */
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer + 4, storage -> ux_slave_class_storage_product_serial, 20); /* Use case of memcpy is verified. */
 80199c0:	69bb      	ldr	r3, [r7, #24]
 80199c2:	68db      	ldr	r3, [r3, #12]
 80199c4:	1d18      	adds	r0, r3, #4
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80199ca:	2214      	movs	r2, #20
 80199cc:	0019      	movs	r1, r3
 80199ce:	f7fe fc0b 	bl	80181e8 <_ux_utility_memory_copy>

        /* Send a data payload with the inquiry response buffer.  */
        if (inquiry_length > 24)
 80199d2:	6a3b      	ldr	r3, [r7, #32]
 80199d4:	2b18      	cmp	r3, #24
 80199d6:	d916      	bls.n	8019a06 <_ux_device_class_storage_inquiry+0x19a>
            inquiry_length = 24;
 80199d8:	2318      	movs	r3, #24
 80199da:	623b      	str	r3, [r7, #32]
    
        break;
 80199dc:	e013      	b.n	8019a06 <_ux_device_class_storage_inquiry+0x19a>

    default:
            
#if !defined(UX_DEVICE_STANDALONE)
        /* The page code is not supported.  */
        _ux_device_stack_endpoint_stall(endpoint_in);
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	0018      	movs	r0, r3
 80199e2:	f002 fedb 	bl	801c79c <_ux_device_stack_endpoint_stall>
#endif

        /* And update the REQUEST_SENSE codes.  */
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 80199e6:	68f9      	ldr	r1, [r7, #12]
 80199e8:	68ba      	ldr	r2, [r7, #8]
 80199ea:	0013      	movs	r3, r2
 80199ec:	00db      	lsls	r3, r3, #3
 80199ee:	1a9b      	subs	r3, r3, r2
 80199f0:	00db      	lsls	r3, r3, #3
 80199f2:	18cb      	adds	r3, r1, r3
 80199f4:	3320      	adds	r3, #32
 80199f6:	4a12      	ldr	r2, [pc, #72]	@ (8019a40 <_ux_device_class_storage_inquiry+0x1d4>)
 80199f8:	601a      	str	r2, [r3, #0]
                                               UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x05,0x26,0x01);

        /* Now we set the CSW with failure.  */
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	2201      	movs	r2, #1
 80199fe:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Return error.  */
        status =  UX_ERROR;
 8019a00:	23ff      	movs	r3, #255	@ 0xff
 8019a02:	627b      	str	r3, [r7, #36]	@ 0x24

        break;            
 8019a04:	e000      	b.n	8019a08 <_ux_device_class_storage_inquiry+0x19c>
        break;
 8019a06:	46c0      	nop			@ (mov r8, r8)
    }    

    /* Error cases.  */
    if (status != UX_SUCCESS)
 8019a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d001      	beq.n	8019a12 <_ux_device_class_storage_inquiry+0x1a6>
        return(status);
 8019a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a10:	e012      	b.n	8019a38 <_ux_device_class_storage_inquiry+0x1cc>
    storage -> ux_device_class_storage_data_count = 0;

#else

    /* Send a data payload with the inquiry response buffer.  */
    if (inquiry_length)
 8019a12:	6a3b      	ldr	r3, [r7, #32]
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d005      	beq.n	8019a24 <_ux_device_class_storage_inquiry+0x1b8>
        _ux_device_stack_transfer_request(transfer_request, inquiry_length, inquiry_length);
 8019a18:	6a3a      	ldr	r2, [r7, #32]
 8019a1a:	6a39      	ldr	r1, [r7, #32]
 8019a1c:	69bb      	ldr	r3, [r7, #24]
 8019a1e:	0018      	movs	r0, r3
 8019a20:	f003 fba8 	bl	801d174 <_ux_device_stack_transfer_request>

    /* Check length.  */
    if (storage -> ux_slave_class_storage_host_length != inquiry_length)
 8019a24:	68fb      	ldr	r3, [r7, #12]
 8019a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019a28:	6a3a      	ldr	r2, [r7, #32]
 8019a2a:	429a      	cmp	r2, r3
 8019a2c:	d003      	beq.n	8019a36 <_ux_device_class_storage_inquiry+0x1ca>
    {
        _ux_device_stack_endpoint_stall(endpoint_in);
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	0018      	movs	r0, r3
 8019a32:	f002 feb3 	bl	801c79c <_ux_device_stack_endpoint_stall>
    }
#endif

    /* Return completion status.  */
    return(status);
 8019a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8019a38:	0018      	movs	r0, r3
 8019a3a:	46bd      	mov	sp, r7
 8019a3c:	b00a      	add	sp, #40	@ 0x28
 8019a3e:	bd80      	pop	{r7, pc}
 8019a40:	00012605 	.word	0x00012605

08019a44 <_ux_device_class_storage_mode_select>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_mode_select(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8019a44:	b580      	push	{r7, lr}
 8019a46:	b084      	sub	sp, #16
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	60f8      	str	r0, [r7, #12]
 8019a4c:	60b9      	str	r1, [r7, #8]
 8019a4e:	607a      	str	r2, [r7, #4]
 8019a50:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_MODE_SELECT, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* This command is not yet supported. So Stall the endpoint.  */
    if (storage -> ux_slave_class_storage_host_length)
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d007      	beq.n	8019a6a <_ux_device_class_storage_mode_select+0x26>
    {

#if !defined(UX_DEVICE_STANDALONE)
        _ux_device_stack_endpoint_stall(endpoint_out);
 8019a5a:	683b      	ldr	r3, [r7, #0]
 8019a5c:	0018      	movs	r0, r3
 8019a5e:	f002 fe9d 	bl	801c79c <_ux_device_stack_endpoint_stall>
#else
        UX_PARAMETER_NOT_USED(endpoint_out);
#endif

        storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length;
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* And update the REQUEST_SENSE codes.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8019a6a:	68f9      	ldr	r1, [r7, #12]
 8019a6c:	68ba      	ldr	r2, [r7, #8]
 8019a6e:	0013      	movs	r3, r2
 8019a70:	00db      	lsls	r3, r3, #3
 8019a72:	1a9b      	subs	r3, r3, r2
 8019a74:	00db      	lsls	r3, r3, #3
 8019a76:	18cb      	adds	r3, r1, r3
 8019a78:	3320      	adds	r3, #32
 8019a7a:	4a07      	ldr	r2, [pc, #28]	@ (8019a98 <_ux_device_class_storage_mode_select+0x54>)
 8019a7c:	601a      	str	r2, [r3, #0]
                                            UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x05,0x26,0x01);

    /* Now we set the CSW with failure.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8019a7e:	68fb      	ldr	r3, [r7, #12]
 8019a80:	2201      	movs	r2, #1
 8019a82:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Error trap. */
    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 8019a84:	2254      	movs	r2, #84	@ 0x54
 8019a86:	2107      	movs	r1, #7
 8019a88:	2002      	movs	r0, #2
 8019a8a:	f7fe f84f 	bl	8017b2c <_ux_system_error_handler>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Return not supported error!  */
    return(UX_FUNCTION_NOT_SUPPORTED);
 8019a8e:	2354      	movs	r3, #84	@ 0x54
}    
 8019a90:	0018      	movs	r0, r3
 8019a92:	46bd      	mov	sp, r7
 8019a94:	b004      	add	sp, #16
 8019a96:	bd80      	pop	{r7, pc}
 8019a98:	00012605 	.word	0x00012605

08019a9c <_ux_device_class_storage_mode_sense>:
UINT  _ux_device_class_storage_mode_sense(UX_SLAVE_CLASS_STORAGE *storage, 
                      ULONG               lun, 
                      UX_SLAVE_ENDPOINT   *endpoint_in,
                      UX_SLAVE_ENDPOINT   *endpoint_out, 
                      UCHAR               *cbwcb)
{
 8019a9c:	b580      	push	{r7, lr}
 8019a9e:	b090      	sub	sp, #64	@ 0x40
 8019aa0:	af00      	add	r7, sp, #0
 8019aa2:	60f8      	str	r0, [r7, #12]
 8019aa4:	60b9      	str	r1, [r7, #8]
 8019aa6:	607a      	str	r2, [r7, #4]
 8019aa8:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_MODE_SENSE, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	3330      	adds	r3, #48	@ 0x30
 8019aae:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the command format : we have 1a and 5a.  */
    mode_sense_command =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_OPERATION);
 8019ab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019ab2:	781b      	ldrb	r3, [r3, #0]
 8019ab4:	623b      	str	r3, [r7, #32]
    
    /* Extract the notification from the cbwcb.  */
    page_code =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PC_PAGE_CODE);
 8019ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019ab8:	3302      	adds	r3, #2
 8019aba:	781b      	ldrb	r3, [r3, #0]
 8019abc:	61fb      	str	r3, [r7, #28]

    /* Check the command.  */
    if (mode_sense_command == UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT)
 8019abe:	6a3b      	ldr	r3, [r7, #32]
 8019ac0:	2b1a      	cmp	r3, #26
 8019ac2:	d108      	bne.n	8019ad6 <_ux_device_class_storage_mode_sense+0x3a>
    {

        /* Extract the length to be returned by the cbwcb.  */
        mode_sense_reply_length =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_6);
 8019ac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019ac6:	3304      	adds	r3, #4
 8019ac8:	781b      	ldrb	r3, [r3, #0]
 8019aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        flags_index = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_FLAGS_6;
 8019acc:	2302      	movs	r3, #2
 8019ace:	633b      	str	r3, [r7, #48]	@ 0x30
        response_header_length = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_HEADER_LENGTH_6;
 8019ad0:	2304      	movs	r3, #4
 8019ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8019ad4:	e00a      	b.n	8019aec <_ux_device_class_storage_mode_sense+0x50>

    else
    {

        /* Extract the length to be returned by the cbwcb.  */
        mode_sense_reply_length =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_10);
 8019ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019ad8:	3307      	adds	r3, #7
 8019ada:	0018      	movs	r0, r3
 8019adc:	f7fe fd6b 	bl	80185b6 <_ux_utility_short_get_big_endian>
 8019ae0:	0003      	movs	r3, r0
 8019ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        flags_index = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_FLAGS_10;
 8019ae4:	2303      	movs	r3, #3
 8019ae6:	633b      	str	r3, [r7, #48]	@ 0x30
        response_header_length = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_HEADER_LENGTH_10;
 8019ae8:	2308      	movs	r3, #8
 8019aea:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Ensure reply not exceed storage buffer.  */
    if (mode_sense_reply_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8019aec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019aee:	2380      	movs	r3, #128	@ 0x80
 8019af0:	011b      	lsls	r3, r3, #4
 8019af2:	429a      	cmp	r2, r3
 8019af4:	d902      	bls.n	8019afc <_ux_device_class_storage_mode_sense+0x60>
        mode_sense_reply_length = UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE;
 8019af6:	2380      	movs	r3, #128	@ 0x80
 8019af8:	011b      	lsls	r3, r3, #4
 8019afa:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Ensure memory buffer cleaned.  */
    _ux_utility_memory_set(transfer_request -> ux_slave_transfer_request_data_pointer, 0, mode_sense_reply_length); /* Use case of memset is verified. */
 8019afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019afe:	68db      	ldr	r3, [r3, #12]
 8019b00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019b02:	2100      	movs	r1, #0
 8019b04:	0018      	movs	r0, r3
 8019b06:	f7fe fc67 	bl	80183d8 <_ux_utility_memory_set>

    /* Establish READ ONLY flag.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read_only_flag == UX_TRUE)
 8019b0a:	68f9      	ldr	r1, [r7, #12]
 8019b0c:	68ba      	ldr	r2, [r7, #8]
 8019b0e:	0013      	movs	r3, r2
 8019b10:	00db      	lsls	r3, r3, #3
 8019b12:	1a9b      	subs	r3, r3, r2
 8019b14:	00db      	lsls	r3, r3, #3
 8019b16:	18cb      	adds	r3, r1, r3
 8019b18:	3318      	adds	r3, #24
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	2b01      	cmp	r3, #1
 8019b1e:	d104      	bne.n	8019b2a <_ux_device_class_storage_mode_sense+0x8e>
    
        /* This device is Read Only.  */
        read_only_flag = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_FLAG_WP;
 8019b20:	233b      	movs	r3, #59	@ 0x3b
 8019b22:	18fb      	adds	r3, r7, r3
 8019b24:	2280      	movs	r2, #128	@ 0x80
 8019b26:	701a      	strb	r2, [r3, #0]
 8019b28:	e003      	b.n	8019b32 <_ux_device_class_storage_mode_sense+0x96>
    
    else
    
        /* This device can be written to.  */
        read_only_flag = 0;        
 8019b2a:	233b      	movs	r3, #59	@ 0x3b
 8019b2c:	18fb      	adds	r3, r7, r3
 8019b2e:	2200      	movs	r2, #0
 8019b30:	701a      	strb	r2, [r3, #0]

    /* Build response based on expected page codes.  */

    /* Initialize length and page pointer.  */
    mode_data_length = response_header_length;
 8019b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    page_pointer = transfer_request -> ux_slave_transfer_request_data_pointer + response_header_length;
 8019b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b38:	68da      	ldr	r2, [r3, #12]
 8019b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b3c:	18d3      	adds	r3, r2, r3
 8019b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
        page_pointer += page_length;
    }
#endif

    /* Caching mode page is returned if cache flush callback implemented.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush != UX_NULL &&
 8019b40:	68f9      	ldr	r1, [r7, #12]
 8019b42:	68ba      	ldr	r2, [r7, #8]
 8019b44:	0013      	movs	r3, r2
 8019b46:	00db      	lsls	r3, r3, #3
 8019b48:	1a9b      	subs	r3, r3, r2
 8019b4a:	00db      	lsls	r3, r3, #3
 8019b4c:	18cb      	adds	r3, r1, r3
 8019b4e:	3334      	adds	r3, #52	@ 0x34
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d01f      	beq.n	8019b96 <_ux_device_class_storage_mode_sense+0xfa>
 8019b56:	69fb      	ldr	r3, [r7, #28]
 8019b58:	2b08      	cmp	r3, #8
 8019b5a:	d002      	beq.n	8019b62 <_ux_device_class_storage_mode_sense+0xc6>
        (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_CACHE ||
 8019b5c:	69fb      	ldr	r3, [r7, #28]
 8019b5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8019b60:	d119      	bne.n	8019b96 <_ux_device_class_storage_mode_sense+0xfa>
        page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_ALL))
    {
        page_length = USBX_DEVICE_CLASS_STORAGE_MODE_SENSE_PAGE_CACHE_LENGTH;
 8019b62:	2314      	movs	r3, #20
 8019b64:	61bb      	str	r3, [r7, #24]

        /* Store page code.  */
        *(page_pointer) = UX_SLAVE_CLASS_STORAGE_PAGE_CODE_CACHE;
 8019b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b68:	2208      	movs	r2, #8
 8019b6a:	701a      	strb	r2, [r3, #0]

        /* Store the length of the page data.  */
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_LENGTH) =
 8019b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b6e:	3301      	adds	r3, #1
 8019b70:	2212      	movs	r2, #18
 8019b72:	701a      	strb	r2, [r3, #0]
                            UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_PAGE_LENGTH;

        /* Set the Write Cache Enabled (WCE) bit.  */
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_FLAGS) |=
 8019b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b76:	3302      	adds	r3, #2
 8019b78:	781a      	ldrb	r2, [r3, #0]
 8019b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b7c:	3302      	adds	r3, #2
 8019b7e:	2104      	movs	r1, #4
 8019b80:	430a      	orrs	r2, r1
 8019b82:	b2d2      	uxtb	r2, r2
 8019b84:	701a      	strb	r2, [r3, #0]
                            UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_FLAG_WCE;

        mode_data_length += page_length;
 8019b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019b88:	69bb      	ldr	r3, [r7, #24]
 8019b8a:	18d3      	adds	r3, r2, r3
 8019b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        page_pointer += page_length;
 8019b8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019b90:	69bb      	ldr	r3, [r7, #24]
 8019b92:	18d3      	adds	r3, r2, r3
 8019b94:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Informational Exceptions Control mode page.  */
    if (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC ||
 8019b96:	69fb      	ldr	r3, [r7, #28]
 8019b98:	2b1c      	cmp	r3, #28
 8019b9a:	d002      	beq.n	8019ba2 <_ux_device_class_storage_mode_sense+0x106>
 8019b9c:	69fb      	ldr	r3, [r7, #28]
 8019b9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8019ba0:	d110      	bne.n	8019bc4 <_ux_device_class_storage_mode_sense+0x128>
        page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_ALL)
    {
        page_length = USBX_DEVICE_CLASS_STORAGE_MODE_SENSE_PAGE_IEC_LENGTH;
 8019ba2:	230c      	movs	r3, #12
 8019ba4:	61bb      	str	r3, [r7, #24]

        /* Store page code.  */
        *(page_pointer) = UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC;
 8019ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ba8:	221c      	movs	r2, #28
 8019baa:	701a      	strb	r2, [r3, #0]

        /* Store the length of the page data.  */
        *(page_pointer + 1) = UX_SLAVE_CLASS_STORAGE_IEC_MODE_PAGE_PAGE_LENGTH;
 8019bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019bae:	3301      	adds	r3, #1
 8019bb0:	220a      	movs	r2, #10
 8019bb2:	701a      	strb	r2, [r3, #0]

        mode_data_length += page_length;
 8019bb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019bb6:	69bb      	ldr	r3, [r7, #24]
 8019bb8:	18d3      	adds	r3, r2, r3
 8019bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        page_pointer += page_length;
 8019bbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019bbe:	69bb      	ldr	r3, [r7, #24]
 8019bc0:	18d3      	adds	r3, r2, r3
 8019bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Put the payload length in the header.  */
    if (mode_sense_command == UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT)
 8019bc4:	6a3b      	ldr	r3, [r7, #32]
 8019bc6:	2b1a      	cmp	r3, #26
 8019bc8:	d105      	bne.n	8019bd6 <_ux_device_class_storage_mode_sense+0x13a>
        * transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)(mode_data_length);
 8019bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bcc:	68db      	ldr	r3, [r3, #12]
 8019bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019bd0:	b2d2      	uxtb	r2, r2
 8019bd2:	701a      	strb	r2, [r3, #0]
 8019bd4:	e007      	b.n	8019be6 <_ux_device_class_storage_mode_sense+0x14a>
    else
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer, (USHORT)mode_data_length);
 8019bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bd8:	68db      	ldr	r3, [r3, #12]
 8019bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019bdc:	b292      	uxth	r2, r2
 8019bde:	0011      	movs	r1, r2
 8019be0:	0018      	movs	r0, r3
 8019be2:	f7fe fd03 	bl	80185ec <_ux_utility_short_put_big_endian>

    /* Store the write protection flag.  */
    *(transfer_request -> ux_slave_transfer_request_data_pointer + flags_index) = read_only_flag;
 8019be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019be8:	68da      	ldr	r2, [r3, #12]
 8019bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bec:	18d3      	adds	r3, r2, r3
 8019bee:	223b      	movs	r2, #59	@ 0x3b
 8019bf0:	18ba      	adds	r2, r7, r2
 8019bf2:	7812      	ldrb	r2, [r2, #0]
 8019bf4:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_data_count = 0;

#else

    /* Send a payload with the response buffer.  */
    _ux_device_stack_transfer_request(transfer_request, mode_sense_reply_length, mode_sense_reply_length); 
 8019bf6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019bf8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bfc:	0018      	movs	r0, r3
 8019bfe:	f003 fab9 	bl	801d174 <_ux_device_stack_transfer_request>
#endif

    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	2200      	movs	r2, #0
 8019c06:	651a      	str	r2, [r3, #80]	@ 0x50
    status = UX_SUCCESS;
 8019c08:	2300      	movs	r3, #0
 8019c0a:	617b      	str	r3, [r7, #20]

    /* Return completion status.  */
    return(status);
 8019c0c:	697b      	ldr	r3, [r7, #20]
}
 8019c0e:	0018      	movs	r0, r3
 8019c10:	46bd      	mov	sp, r7
 8019c12:	b010      	add	sp, #64	@ 0x40
 8019c14:	bd80      	pop	{r7, pc}

08019c16 <_ux_device_class_storage_prevent_allow_media_removal>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_prevent_allow_media_removal(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8019c16:	b580      	push	{r7, lr}
 8019c18:	b084      	sub	sp, #16
 8019c1a:	af00      	add	r7, sp, #0
 8019c1c:	60f8      	str	r0, [r7, #12]
 8019c1e:	60b9      	str	r1, [r7, #8]
 8019c20:	607a      	str	r2, [r7, #4]
 8019c22:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_PREVENT_ALLOW_MEDIA_REMOVAL, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	2200      	movs	r2, #0
 8019c28:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Return successful completion.  */
    return(UX_SUCCESS);
 8019c2a:	2300      	movs	r3, #0
}
 8019c2c:	0018      	movs	r0, r3
 8019c2e:	46bd      	mov	sp, r7
 8019c30:	b004      	add	sp, #16
 8019c32:	bd80      	pop	{r7, pc}

08019c34 <_ux_device_class_storage_read>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_read(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb, UCHAR scsi_command)
{
 8019c34:	b5b0      	push	{r4, r5, r7, lr}
 8019c36:	b090      	sub	sp, #64	@ 0x40
 8019c38:	af02      	add	r7, sp, #8
 8019c3a:	60f8      	str	r0, [r7, #12]
 8019c3c:	60b9      	str	r1, [r7, #8]
 8019c3e:	607a      	str	r2, [r7, #4]
 8019c40:	603b      	str	r3, [r7, #0]


    UX_PARAMETER_NOT_USED(endpoint_out);

    /* Get the LBA from the CBWCB.  */
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_LBA);
 8019c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019c44:	3302      	adds	r3, #2
 8019c46:	0018      	movs	r0, r3
 8019c48:	f7fe f914 	bl	8017e74 <_ux_utility_long_get_big_endian>
 8019c4c:	0003      	movs	r3, r0
 8019c4e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* The type of commands will tell us the width of the field containing the number
       of sectors to read.  */
    if (scsi_command == UX_SLAVE_CLASS_STORAGE_SCSI_READ16)
 8019c50:	234c      	movs	r3, #76	@ 0x4c
 8019c52:	18fb      	adds	r3, r7, r3
 8019c54:	781b      	ldrb	r3, [r3, #0]
 8019c56:	2b28      	cmp	r3, #40	@ 0x28
 8019c58:	d107      	bne.n	8019c6a <_ux_device_class_storage_read+0x36>

        /* Get the number of blocks from the CBWCB in 16 bits.  */
        total_number_blocks =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_16);
 8019c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019c5c:	3307      	adds	r3, #7
 8019c5e:	0018      	movs	r0, r3
 8019c60:	f7fe fca9 	bl	80185b6 <_ux_utility_short_get_big_endian>
 8019c64:	0003      	movs	r3, r0
 8019c66:	633b      	str	r3, [r7, #48]	@ 0x30
 8019c68:	e006      	b.n	8019c78 <_ux_device_class_storage_read+0x44>

    else        

        /* Get the number of blocks from the CBWCB in 32 bits.  */
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_32);
 8019c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019c6c:	3306      	adds	r3, #6
 8019c6e:	0018      	movs	r0, r3
 8019c70:	f7fe f900 	bl	8017e74 <_ux_utility_long_get_big_endian>
 8019c74:	0003      	movs	r3, r0
 8019c76:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	3330      	adds	r3, #48	@ 0x30
 8019c7c:	623b      	str	r3, [r7, #32]

    /* Compute the total length to transfer and how much remains.  */
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 8019c7e:	68f9      	ldr	r1, [r7, #12]
 8019c80:	68ba      	ldr	r2, [r7, #8]
 8019c82:	0013      	movs	r3, r2
 8019c84:	00db      	lsls	r3, r3, #3
 8019c86:	1a9b      	subs	r3, r3, r2
 8019c88:	00db      	lsls	r3, r3, #3
 8019c8a:	18cb      	adds	r3, r1, r3
 8019c8c:	330c      	adds	r3, #12
 8019c8e:	681a      	ldr	r2, [r3, #0]
 8019c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c92:	4353      	muls	r3, r2
 8019c94:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Default CSW to failed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8019c96:	68fb      	ldr	r3, [r7, #12]
 8019c98:	2201      	movs	r2, #1
 8019c9a:	651a      	str	r2, [r3, #80]	@ 0x50
#else

    /* Check transfer length.  */

    /* Case (7).  Host length < device length.  */
    if (total_length > storage -> ux_slave_class_storage_host_length)
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019ca0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019ca2:	429a      	cmp	r2, r3
 8019ca4:	d908      	bls.n	8019cb8 <_ux_device_class_storage_read+0x84>
    {
        _ux_device_stack_endpoint_stall(endpoint_in);
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	0018      	movs	r0, r3
 8019caa:	f002 fd77 	bl	801c79c <_ux_device_stack_endpoint_stall>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	2202      	movs	r2, #2
 8019cb2:	651a      	str	r2, [r3, #80]	@ 0x50
        return(UX_ERROR);
 8019cb4:	23ff      	movs	r3, #255	@ 0xff
 8019cb6:	e0d4      	b.n	8019e62 <_ux_device_class_storage_read+0x22e>
    }

    /* Case (8). Hi <> Do.  */
    if ((storage -> ux_slave_class_storage_cbw_flags & 0x80) == 0)
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	2244      	movs	r2, #68	@ 0x44
 8019cbc:	5c9b      	ldrb	r3, [r3, r2]
 8019cbe:	b25b      	sxtb	r3, r3
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	db08      	blt.n	8019cd6 <_ux_device_class_storage_read+0xa2>
    {
        _ux_device_stack_endpoint_stall(endpoint_out);
 8019cc4:	683b      	ldr	r3, [r7, #0]
 8019cc6:	0018      	movs	r0, r3
 8019cc8:	f002 fd68 	bl	801c79c <_ux_device_stack_endpoint_stall>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	2202      	movs	r2, #2
 8019cd0:	651a      	str	r2, [r3, #80]	@ 0x50
        return(UX_ERROR);
 8019cd2:	23ff      	movs	r3, #255	@ 0xff
 8019cd4:	e0c5      	b.n	8019e62 <_ux_device_class_storage_read+0x22e>
    }

    /* It may take several transfers to send the requested data.  */
    done_length = 0;
 8019cd6:	2300      	movs	r3, #0
 8019cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    while (total_number_blocks)
 8019cda:	e0ab      	b.n	8019e34 <_ux_device_class_storage_read+0x200>
    {

        /* Obtain the status of the device.  */
        status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8019cdc:	68f9      	ldr	r1, [r7, #12]
 8019cde:	68bb      	ldr	r3, [r7, #8]
 8019ce0:	1c5a      	adds	r2, r3, #1
 8019ce2:	0013      	movs	r3, r2
 8019ce4:	00db      	lsls	r3, r3, #3
 8019ce6:	1a9b      	subs	r3, r3, r2
 8019ce8:	00db      	lsls	r3, r3, #3
 8019cea:	585c      	ldr	r4, [r3, r1]
 8019cec:	68f9      	ldr	r1, [r7, #12]
 8019cee:	68ba      	ldr	r2, [r7, #8]
 8019cf0:	0013      	movs	r3, r2
 8019cf2:	00db      	lsls	r3, r3, #3
 8019cf4:	1a9b      	subs	r3, r3, r2
 8019cf6:	00db      	lsls	r3, r3, #3
 8019cf8:	18cb      	adds	r3, r1, r3
 8019cfa:	331c      	adds	r3, #28
 8019cfc:	681a      	ldr	r2, [r3, #0]
 8019cfe:	2314      	movs	r3, #20
 8019d00:	18fb      	adds	r3, r7, r3
 8019d02:	68b9      	ldr	r1, [r7, #8]
 8019d04:	68f8      	ldr	r0, [r7, #12]
 8019d06:	47a0      	blx	r4
 8019d08:	0003      	movs	r3, r0
 8019d0a:	61fb      	str	r3, [r7, #28]
                                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);
    
        /* Update the request sense.  */
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8019d0c:	6979      	ldr	r1, [r7, #20]
 8019d0e:	68f8      	ldr	r0, [r7, #12]
 8019d10:	68ba      	ldr	r2, [r7, #8]
 8019d12:	0013      	movs	r3, r2
 8019d14:	00db      	lsls	r3, r3, #3
 8019d16:	1a9b      	subs	r3, r3, r2
 8019d18:	00db      	lsls	r3, r3, #3
 8019d1a:	18c3      	adds	r3, r0, r3
 8019d1c:	3320      	adds	r3, #32
 8019d1e:	6019      	str	r1, [r3, #0]
    
        /* If there is a problem, return a failed command.  */
        if (status != UX_SUCCESS)
 8019d20:	69fb      	ldr	r3, [r7, #28]
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d00b      	beq.n	8019d3e <_ux_device_class_storage_read+0x10a>
        {
    
            /* We have a problem, media status error. Return a bad completion and wait for the
               REQUEST_SENSE command.  */
            _ux_device_stack_endpoint_stall(endpoint_in);
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	0018      	movs	r0, r3
 8019d2a:	f002 fd37 	bl	801c79c <_ux_device_stack_endpoint_stall>

            /* Update residue.  */
            storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length - done_length;
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d34:	1ad2      	subs	r2, r2, r3
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	64da      	str	r2, [r3, #76]	@ 0x4c
    
            /* Return an error.  */
            return(UX_ERROR);
 8019d3a:	23ff      	movs	r3, #255	@ 0xff
 8019d3c:	e091      	b.n	8019e62 <_ux_device_class_storage_read+0x22e>
        }

        /* How much can we send in this transfer?  */
        if (total_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8019d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019d40:	2380      	movs	r3, #128	@ 0x80
 8019d42:	011b      	lsls	r3, r3, #4
 8019d44:	429a      	cmp	r2, r3
 8019d46:	d903      	bls.n	8019d50 <_ux_device_class_storage_read+0x11c>

            /* Compute the transfer length based on the maximum allowed.  */
            transfer_length =  UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE;
 8019d48:	2380      	movs	r3, #128	@ 0x80
 8019d4a:	011b      	lsls	r3, r3, #4
 8019d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019d4e:	e001      	b.n	8019d54 <_ux_device_class_storage_read+0x120>
            
        else

            /* Compute the transfer length based on what is left to transfer.  */
            transfer_length =  total_length;
 8019d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d52:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Compute the number of blocks to transfer.  */
        number_blocks = transfer_length / storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 8019d54:	68f9      	ldr	r1, [r7, #12]
 8019d56:	68ba      	ldr	r2, [r7, #8]
 8019d58:	0013      	movs	r3, r2
 8019d5a:	00db      	lsls	r3, r3, #3
 8019d5c:	1a9b      	subs	r3, r3, r2
 8019d5e:	00db      	lsls	r3, r3, #3
 8019d60:	18cb      	adds	r3, r1, r3
 8019d62:	330c      	adds	r3, #12
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	0019      	movs	r1, r3
 8019d68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019d6a:	f7ec fb6b 	bl	8006444 <__udivsi3>
 8019d6e:	0003      	movs	r3, r0
 8019d70:	61bb      	str	r3, [r7, #24]
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_READ, storage, lun, transfer_request -> ux_slave_transfer_request_data_pointer, 
                                number_blocks, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

        /* Execute the read command from the local media.  */
        status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read(storage, lun, 
 8019d72:	68f9      	ldr	r1, [r7, #12]
 8019d74:	68ba      	ldr	r2, [r7, #8]
 8019d76:	0013      	movs	r3, r2
 8019d78:	00db      	lsls	r3, r3, #3
 8019d7a:	1a9b      	subs	r3, r3, r2
 8019d7c:	00db      	lsls	r3, r3, #3
 8019d7e:	18cb      	adds	r3, r1, r3
 8019d80:	332c      	adds	r3, #44	@ 0x2c
 8019d82:	681c      	ldr	r4, [r3, #0]
 8019d84:	6a3b      	ldr	r3, [r7, #32]
 8019d86:	68da      	ldr	r2, [r3, #12]
 8019d88:	69bd      	ldr	r5, [r7, #24]
 8019d8a:	68b9      	ldr	r1, [r7, #8]
 8019d8c:	68f8      	ldr	r0, [r7, #12]
 8019d8e:	2314      	movs	r3, #20
 8019d90:	18fb      	adds	r3, r7, r3
 8019d92:	9301      	str	r3, [sp, #4]
 8019d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d96:	9300      	str	r3, [sp, #0]
 8019d98:	002b      	movs	r3, r5
 8019d9a:	47a0      	blx	r4
 8019d9c:	0003      	movs	r3, r0
 8019d9e:	61fb      	str	r3, [r7, #28]
                                                    transfer_request -> ux_slave_transfer_request_data_pointer, number_blocks, lba, &media_status); 

        /* If there is a problem, return a failed command.  */
        if (status != UX_SUCCESS)
 8019da0:	69fb      	ldr	r3, [r7, #28]
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d015      	beq.n	8019dd2 <_ux_device_class_storage_read+0x19e>
        {
    
            /* We have a problem, request error. Return a bad completion and wait for the
               REQUEST_SENSE command.  */
            _ux_device_stack_endpoint_stall(endpoint_in);
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	0018      	movs	r0, r3
 8019daa:	f002 fcf7 	bl	801c79c <_ux_device_stack_endpoint_stall>
    
            /* Update residue.  */
            storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length - done_length;
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019db4:	1ad2      	subs	r2, r2, r3
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* And update the REQUEST_SENSE codes.  */
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8019dba:	6979      	ldr	r1, [r7, #20]
 8019dbc:	68f8      	ldr	r0, [r7, #12]
 8019dbe:	68ba      	ldr	r2, [r7, #8]
 8019dc0:	0013      	movs	r3, r2
 8019dc2:	00db      	lsls	r3, r3, #3
 8019dc4:	1a9b      	subs	r3, r3, r2
 8019dc6:	00db      	lsls	r3, r3, #3
 8019dc8:	18c3      	adds	r3, r0, r3
 8019dca:	3320      	adds	r3, #32
 8019dcc:	6019      	str	r1, [r3, #0]
    
            /* Return an error.  */
            return(UX_ERROR);
 8019dce:	23ff      	movs	r3, #255	@ 0xff
 8019dd0:	e047      	b.n	8019e62 <_ux_device_class_storage_read+0x22e>
        }

        /* Sends the data payload back to the caller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, transfer_length, transfer_length);
 8019dd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019dd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019dd6:	6a3b      	ldr	r3, [r7, #32]
 8019dd8:	0018      	movs	r0, r3
 8019dda:	f003 f9cb 	bl	801d174 <_ux_device_stack_transfer_request>
 8019dde:	0003      	movs	r3, r0
 8019de0:	61fb      	str	r3, [r7, #28]

        /* Check the status.  */
        if(status != UX_SUCCESS)
 8019de2:	69fb      	ldr	r3, [r7, #28]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d015      	beq.n	8019e14 <_ux_device_class_storage_read+0x1e0>
        {

            /* We have a problem, request error. Return a bad completion and wait for the
               REQUEST_SENSE command.  */
            _ux_device_stack_endpoint_stall(endpoint_in);
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	0018      	movs	r0, r3
 8019dec:	f002 fcd6 	bl	801c79c <_ux_device_stack_endpoint_stall>
    
            /* Update residue.  */
            storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length - done_length;
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019df6:	1ad2      	subs	r2, r2, r3
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Update the REQUEST_SENSE codes.  */
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8019dfc:	68f9      	ldr	r1, [r7, #12]
 8019dfe:	68ba      	ldr	r2, [r7, #8]
 8019e00:	0013      	movs	r3, r2
 8019e02:	00db      	lsls	r3, r3, #3
 8019e04:	1a9b      	subs	r3, r3, r2
 8019e06:	00db      	lsls	r3, r3, #3
 8019e08:	18cb      	adds	r3, r1, r3
 8019e0a:	3320      	adds	r3, #32
 8019e0c:	4a17      	ldr	r2, [pc, #92]	@ (8019e6c <_ux_device_class_storage_read+0x238>)
 8019e0e:	601a      	str	r2, [r3, #0]
                                                UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x02,0x54,0x00);

            /* Return an error.  */
            return(UX_ERROR);
 8019e10:	23ff      	movs	r3, #255	@ 0xff
 8019e12:	e026      	b.n	8019e62 <_ux_device_class_storage_read+0x22e>

        }

        /* Update the LBA address.  */
        lba += number_blocks;
 8019e14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019e16:	69bb      	ldr	r3, [r7, #24]
 8019e18:	18d3      	adds	r3, r2, r3
 8019e1a:	637b      	str	r3, [r7, #52]	@ 0x34
        
        /* Update the length to remain.  */
        total_length -= transfer_length;        
 8019e1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e20:	1ad3      	subs	r3, r2, r3
 8019e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        done_length += transfer_length;
 8019e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e28:	18d3      	adds	r3, r2, r3
 8019e2a:	627b      	str	r3, [r7, #36]	@ 0x24
        
        /* Update the number of blocks to read.  */
        total_number_blocks -= number_blocks;
 8019e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019e2e:	69bb      	ldr	r3, [r7, #24]
 8019e30:	1ad3      	subs	r3, r2, r3
 8019e32:	633b      	str	r3, [r7, #48]	@ 0x30
    while (total_number_blocks)
 8019e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d000      	beq.n	8019e3c <_ux_device_class_storage_read+0x208>
 8019e3a:	e74f      	b.n	8019cdc <_ux_device_class_storage_read+0xa8>
    }

    /* Case (4), (5). Host length too large.  */
    if (storage -> ux_slave_class_storage_host_length > done_length)
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019e42:	429a      	cmp	r2, r3
 8019e44:	d209      	bcs.n	8019e5a <_ux_device_class_storage_read+0x226>
    {

        /* Stall Bulk-In.  */
        _ux_device_stack_endpoint_stall(endpoint_in);
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	0018      	movs	r0, r3
 8019e4a:	f002 fca7 	bl	801c79c <_ux_device_stack_endpoint_stall>

        /* Update residure.  */
        storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length - done_length;
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e54:	1ad2      	subs	r2, r2, r3
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

#endif /* else defined(UX_DEVICE_STANDALONE) */

    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	2200      	movs	r2, #0
 8019e5e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Return completion status.  */
    return(UX_SUCCESS);
 8019e60:	2300      	movs	r3, #0
}
 8019e62:	0018      	movs	r0, r3
 8019e64:	46bd      	mov	sp, r7
 8019e66:	b00e      	add	sp, #56	@ 0x38
 8019e68:	bdb0      	pop	{r4, r5, r7, pc}
 8019e6a:	46c0      	nop			@ (mov r8, r8)
 8019e6c:	00005402 	.word	0x00005402

08019e70 <_ux_device_class_storage_read_capacity>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_read_capacity(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun,
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8019e70:	b590      	push	{r4, r7, lr}
 8019e72:	b089      	sub	sp, #36	@ 0x24
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	60f8      	str	r0, [r7, #12]
 8019e78:	60b9      	str	r1, [r7, #8]
 8019e7a:	607a      	str	r2, [r7, #4]
 8019e7c:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_READ_CAPACITY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8019e7e:	68f9      	ldr	r1, [r7, #12]
 8019e80:	68bb      	ldr	r3, [r7, #8]
 8019e82:	1c5a      	adds	r2, r3, #1
 8019e84:	0013      	movs	r3, r2
 8019e86:	00db      	lsls	r3, r3, #3
 8019e88:	1a9b      	subs	r3, r3, r2
 8019e8a:	00db      	lsls	r3, r3, #3
 8019e8c:	585c      	ldr	r4, [r3, r1]
 8019e8e:	68f9      	ldr	r1, [r7, #12]
 8019e90:	68ba      	ldr	r2, [r7, #8]
 8019e92:	0013      	movs	r3, r2
 8019e94:	00db      	lsls	r3, r3, #3
 8019e96:	1a9b      	subs	r3, r3, r2
 8019e98:	00db      	lsls	r3, r3, #3
 8019e9a:	18cb      	adds	r3, r1, r3
 8019e9c:	331c      	adds	r3, #28
 8019e9e:	681a      	ldr	r2, [r3, #0]
 8019ea0:	2310      	movs	r3, #16
 8019ea2:	18fb      	adds	r3, r7, r3
 8019ea4:	68b9      	ldr	r1, [r7, #8]
 8019ea6:	68f8      	ldr	r0, [r7, #12]
 8019ea8:	47a0      	blx	r4
 8019eaa:	0003      	movs	r3, r0
 8019eac:	61fb      	str	r3, [r7, #28]
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8019eae:	6939      	ldr	r1, [r7, #16]
 8019eb0:	68f8      	ldr	r0, [r7, #12]
 8019eb2:	68ba      	ldr	r2, [r7, #8]
 8019eb4:	0013      	movs	r3, r2
 8019eb6:	00db      	lsls	r3, r3, #3
 8019eb8:	1a9b      	subs	r3, r3, r2
 8019eba:	00db      	lsls	r3, r3, #3
 8019ebc:	18c3      	adds	r3, r0, r3
 8019ebe:	3320      	adds	r3, #32
 8019ec0:	6019      	str	r1, [r3, #0]

    /* Check the status for error.  */
    if (status != UX_SUCCESS)
 8019ec2:	69fb      	ldr	r3, [r7, #28]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d009      	beq.n	8019edc <_ux_device_class_storage_read_capacity+0x6c>
    {

#if !defined(UX_DEVICE_STANDALONE)

        /* We need to STALL the IN endpoint.  The endpoint will be reset by the host.  */
        _ux_device_stack_endpoint_stall(endpoint_in);
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	0018      	movs	r0, r3
 8019ecc:	f002 fc66 	bl	801c79c <_ux_device_stack_endpoint_stall>
#endif

        /* Now we set the CSW with Error.  */
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8019ed0:	68fb      	ldr	r3, [r7, #12]
 8019ed2:	2201      	movs	r2, #1
 8019ed4:	651a      	str	r2, [r3, #80]	@ 0x50
        status = UX_SUCCESS;
 8019ed6:	2300      	movs	r3, #0
 8019ed8:	61fb      	str	r3, [r7, #28]
 8019eda:	e032      	b.n	8019f42 <_ux_device_class_storage_read_capacity+0xd2>
    }
    else
    {
    
        /* Obtain the pointer to the transfer request.  */
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	3330      	adds	r3, #48	@ 0x30
 8019ee0:	61bb      	str	r3, [r7, #24]

        /* Obtain read capacity response buffer.  */
        read_capacity_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8019ee2:	69bb      	ldr	r3, [r7, #24]
 8019ee4:	68db      	ldr	r3, [r3, #12]
 8019ee6:	617b      	str	r3, [r7, #20]
    
        /* Ensure it is cleaned.  */
        _ux_utility_memory_set(read_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH); /* Use case of memcpy is verified. */
 8019ee8:	697b      	ldr	r3, [r7, #20]
 8019eea:	2208      	movs	r2, #8
 8019eec:	2100      	movs	r1, #0
 8019eee:	0018      	movs	r0, r3
 8019ef0:	f7fe fa72 	bl	80183d8 <_ux_utility_memory_set>
    
        /* Insert the last LBA address in the response.  */
        _ux_utility_long_put_big_endian(&read_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LAST_LBA],
 8019ef4:	68f9      	ldr	r1, [r7, #12]
 8019ef6:	68ba      	ldr	r2, [r7, #8]
 8019ef8:	0013      	movs	r3, r2
 8019efa:	00db      	lsls	r3, r3, #3
 8019efc:	1a9b      	subs	r3, r3, r2
 8019efe:	00db      	lsls	r3, r3, #3
 8019f00:	18cb      	adds	r3, r1, r3
 8019f02:	3308      	adds	r3, #8
 8019f04:	681a      	ldr	r2, [r3, #0]
 8019f06:	697b      	ldr	r3, [r7, #20]
 8019f08:	0011      	movs	r1, r2
 8019f0a:	0018      	movs	r0, r3
 8019f0c:	f7fd fff9 	bl	8017f02 <_ux_utility_long_put_big_endian>
                                        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_last_lba);
    
        /* Insert the block length in the response.  */
        _ux_utility_long_put_big_endian(&read_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_BLOCK_SIZE],
 8019f10:	697b      	ldr	r3, [r7, #20]
 8019f12:	1d18      	adds	r0, r3, #4
 8019f14:	68f9      	ldr	r1, [r7, #12]
 8019f16:	68ba      	ldr	r2, [r7, #8]
 8019f18:	0013      	movs	r3, r2
 8019f1a:	00db      	lsls	r3, r3, #3
 8019f1c:	1a9b      	subs	r3, r3, r2
 8019f1e:	00db      	lsls	r3, r3, #3
 8019f20:	18cb      	adds	r3, r1, r3
 8019f22:	330c      	adds	r3, #12
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	0019      	movs	r1, r3
 8019f28:	f7fd ffeb 	bl	8017f02 <_ux_utility_long_put_big_endian>
        UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);

#else

        /* Send a data payload with the read_capacity response buffer.  */
        _ux_device_stack_transfer_request(transfer_request, 
 8019f2c:	69bb      	ldr	r3, [r7, #24]
 8019f2e:	2208      	movs	r2, #8
 8019f30:	2108      	movs	r1, #8
 8019f32:	0018      	movs	r0, r3
 8019f34:	f003 f91e 	bl	801d174 <_ux_device_stack_transfer_request>
                                      UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH,
                                      UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH);
#endif

        /* Now we set the CSW with success.  */
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	2200      	movs	r2, #0
 8019f3c:	651a      	str	r2, [r3, #80]	@ 0x50
        status = UX_SUCCESS;
 8019f3e:	2300      	movs	r3, #0
 8019f40:	61fb      	str	r3, [r7, #28]
    }
        
    /* Return completion status.  */
    return(status);
 8019f42:	69fb      	ldr	r3, [r7, #28]
}
 8019f44:	0018      	movs	r0, r3
 8019f46:	46bd      	mov	sp, r7
 8019f48:	b009      	add	sp, #36	@ 0x24
 8019f4a:	bd90      	pop	{r4, r7, pc}

08019f4c <_ux_device_class_storage_read_format_capacity>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_read_format_capacity(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun,
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8019f4c:	b580      	push	{r7, lr}
 8019f4e:	b088      	sub	sp, #32
 8019f50:	af00      	add	r7, sp, #0
 8019f52:	60f8      	str	r0, [r7, #12]
 8019f54:	60b9      	str	r1, [r7, #8]
 8019f56:	607a      	str	r2, [r7, #4]
 8019f58:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_READ_FORMAT_CAPACITY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	3330      	adds	r3, #48	@ 0x30
 8019f5e:	61fb      	str	r3, [r7, #28]

    /* Get read format capacity response buffer.  */
    read_format_capacity_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8019f60:	69fb      	ldr	r3, [r7, #28]
 8019f62:	68db      	ldr	r3, [r3, #12]
 8019f64:	61bb      	str	r3, [r7, #24]

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(read_format_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 8019f66:	69bb      	ldr	r3, [r7, #24]
 8019f68:	220c      	movs	r2, #12
 8019f6a:	2100      	movs	r1, #0
 8019f6c:	0018      	movs	r0, r3
 8019f6e:	f7fe fa33 	bl	80183d8 <_ux_utility_memory_set>

    /* Insert the size of the response block.  */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_SIZE], 8);
 8019f72:	69bb      	ldr	r3, [r7, #24]
 8019f74:	2108      	movs	r1, #8
 8019f76:	0018      	movs	r0, r3
 8019f78:	f7fd ffc3 	bl	8017f02 <_ux_utility_long_put_big_endian>

    /* Insert the last LBA address in the response.  */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LAST_LBA],
 8019f7c:	69bb      	ldr	r3, [r7, #24]
 8019f7e:	1d18      	adds	r0, r3, #4
 8019f80:	68f9      	ldr	r1, [r7, #12]
 8019f82:	68ba      	ldr	r2, [r7, #8]
 8019f84:	0013      	movs	r3, r2
 8019f86:	00db      	lsls	r3, r3, #3
 8019f88:	1a9b      	subs	r3, r3, r2
 8019f8a:	00db      	lsls	r3, r3, #3
 8019f8c:	18cb      	adds	r3, r1, r3
 8019f8e:	3308      	adds	r3, #8
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	0019      	movs	r1, r3
 8019f94:	f7fd ffb5 	bl	8017f02 <_ux_utility_long_put_big_endian>
                                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_last_lba);

    /* Insert the block length in the response.  This is in 3 bytes. */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_BLOCK_SIZE],
 8019f98:	69bb      	ldr	r3, [r7, #24]
 8019f9a:	3308      	adds	r3, #8
 8019f9c:	0018      	movs	r0, r3
 8019f9e:	68f9      	ldr	r1, [r7, #12]
 8019fa0:	68ba      	ldr	r2, [r7, #8]
 8019fa2:	0013      	movs	r3, r2
 8019fa4:	00db      	lsls	r3, r3, #3
 8019fa6:	1a9b      	subs	r3, r3, r2
 8019fa8:	00db      	lsls	r3, r3, #3
 8019faa:	18cb      	adds	r3, r1, r3
 8019fac:	330c      	adds	r3, #12
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	0019      	movs	r1, r3
 8019fb2:	f7fd ffa6 	bl	8017f02 <_ux_utility_long_put_big_endian>
                                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length);

    /* Insert the response code : always 2.  */
    read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_DESC_CODE] =  2;    
 8019fb6:	69bb      	ldr	r3, [r7, #24]
 8019fb8:	3308      	adds	r3, #8
 8019fba:	2202      	movs	r2, #2
 8019fbc:	701a      	strb	r2, [r3, #0]
    UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);

#else

    /* Send a data payload with the read_capacity response buffer.  */
    _ux_device_stack_transfer_request(transfer_request, 
 8019fbe:	69fb      	ldr	r3, [r7, #28]
 8019fc0:	220c      	movs	r2, #12
 8019fc2:	210c      	movs	r1, #12
 8019fc4:	0018      	movs	r0, r3
 8019fc6:	f003 f8d5 	bl	801d174 <_ux_device_stack_transfer_request>
                                  UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH,
                                  UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH);
#endif

    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	2200      	movs	r2, #0
 8019fce:	651a      	str	r2, [r3, #80]	@ 0x50
    status = UX_SUCCESS;
 8019fd0:	2300      	movs	r3, #0
 8019fd2:	617b      	str	r3, [r7, #20]

    /* Return completion status.  */
    return(status);
 8019fd4:	697b      	ldr	r3, [r7, #20]
}
 8019fd6:	0018      	movs	r0, r3
 8019fd8:	46bd      	mov	sp, r7
 8019fda:	b008      	add	sp, #32
 8019fdc:	bd80      	pop	{r7, pc}

08019fde <_ux_device_class_storage_request_sense>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_request_sense(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8019fde:	b590      	push	{r4, r7, lr}
 8019fe0:	b08b      	sub	sp, #44	@ 0x2c
 8019fe2:	af00      	add	r7, sp, #0
 8019fe4:	60f8      	str	r0, [r7, #12]
 8019fe6:	60b9      	str	r1, [r7, #8]
 8019fe8:	607a      	str	r2, [r7, #4]
 8019fea:	603b      	str	r3, [r7, #0]

UINT                    status = UX_SUCCESS;
 8019fec:	2300      	movs	r3, #0
 8019fee:	623b      	str	r3, [r7, #32]

    UX_PARAMETER_NOT_USED(cbwcb);
    UX_PARAMETER_NOT_USED(endpoint_out);

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	3330      	adds	r3, #48	@ 0x30
 8019ff4:	61fb      	str	r3, [r7, #28]

    /* Get length.  */
    sense_length = storage -> ux_slave_class_storage_host_length;
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    if (sense_length > UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH)
 8019ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ffe:	2b12      	cmp	r3, #18
 801a000:	d901      	bls.n	801a006 <_ux_device_class_storage_request_sense+0x28>
        sense_length = UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH;
 801a002:	2312      	movs	r3, #18
 801a004:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Obtain sense buffer.  */
    sense_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 801a006:	69fb      	ldr	r3, [r7, #28]
 801a008:	68db      	ldr	r3, [r3, #12]
 801a00a:	61bb      	str	r3, [r7, #24]

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(sense_buffer, 0, sense_length); /* Use case of memset is verified. */
 801a00c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a00e:	69bb      	ldr	r3, [r7, #24]
 801a010:	2100      	movs	r1, #0
 801a012:	0018      	movs	r0, r3
 801a014:	f7fe f9e0 	bl	80183d8 <_ux_utility_memory_set>
    
    /* Initialize the response buffer with the error code.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ERROR_CODE] = 
 801a018:	69bb      	ldr	r3, [r7, #24]
 801a01a:	2270      	movs	r2, #112	@ 0x70
 801a01c:	701a      	strb	r2, [r3, #0]
                    UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ERROR_CODE_VALUE;

    /* Extract sense key, code, qualifier.  */
    key = UX_DEVICE_CLASS_STORAGE_SENSE_KEY(storage -> ux_slave_class_storage_lun[lun].
 801a01e:	68f9      	ldr	r1, [r7, #12]
 801a020:	68ba      	ldr	r2, [r7, #8]
 801a022:	0013      	movs	r3, r2
 801a024:	00db      	lsls	r3, r3, #3
 801a026:	1a9b      	subs	r3, r3, r2
 801a028:	00db      	lsls	r3, r3, #3
 801a02a:	18cb      	adds	r3, r1, r3
 801a02c:	3320      	adds	r3, #32
 801a02e:	681a      	ldr	r2, [r3, #0]
 801a030:	2017      	movs	r0, #23
 801a032:	183b      	adds	r3, r7, r0
 801a034:	701a      	strb	r2, [r3, #0]
                                            ux_slave_class_storage_request_sense_status);
    code = UX_DEVICE_CLASS_STORAGE_SENSE_CODE(storage -> ux_slave_class_storage_lun[lun].
 801a036:	68f9      	ldr	r1, [r7, #12]
 801a038:	68ba      	ldr	r2, [r7, #8]
 801a03a:	0013      	movs	r3, r2
 801a03c:	00db      	lsls	r3, r3, #3
 801a03e:	1a9b      	subs	r3, r3, r2
 801a040:	00db      	lsls	r3, r3, #3
 801a042:	18cb      	adds	r3, r1, r3
 801a044:	3320      	adds	r3, #32
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	0a1a      	lsrs	r2, r3, #8
 801a04a:	2416      	movs	r4, #22
 801a04c:	193b      	adds	r3, r7, r4
 801a04e:	701a      	strb	r2, [r3, #0]
                                            ux_slave_class_storage_request_sense_status);
    qualifier = UX_DEVICE_CLASS_STORAGE_SENSE_QUALIFIER(storage -> ux_slave_class_storage_lun[lun].
 801a050:	68f9      	ldr	r1, [r7, #12]
 801a052:	68ba      	ldr	r2, [r7, #8]
 801a054:	0013      	movs	r3, r2
 801a056:	00db      	lsls	r3, r3, #3
 801a058:	1a9b      	subs	r3, r3, r2
 801a05a:	00db      	lsls	r3, r3, #3
 801a05c:	18cb      	adds	r3, r1, r3
 801a05e:	3320      	adds	r3, #32
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	0c1a      	lsrs	r2, r3, #16
 801a064:	2115      	movs	r1, #21
 801a066:	187b      	adds	r3, r7, r1
 801a068:	701a      	strb	r2, [r3, #0]
                                            ux_slave_class_storage_request_sense_status);

    /* Initialize the response buffer with the sense key.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_SENSE_KEY] = key;
 801a06a:	69bb      	ldr	r3, [r7, #24]
 801a06c:	3302      	adds	r3, #2
 801a06e:	183a      	adds	r2, r7, r0
 801a070:	7812      	ldrb	r2, [r2, #0]
 801a072:	701a      	strb	r2, [r3, #0]

    /* Initialize the response buffer with the code.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_CODE] = code;
 801a074:	69bb      	ldr	r3, [r7, #24]
 801a076:	330c      	adds	r3, #12
 801a078:	193a      	adds	r2, r7, r4
 801a07a:	7812      	ldrb	r2, [r2, #0]
 801a07c:	701a      	strb	r2, [r3, #0]

    /* Initialize the response buffer with the code qualifier.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_CODE_QUALIFIER] = qualifier;
 801a07e:	69bb      	ldr	r3, [r7, #24]
 801a080:	330d      	adds	r3, #13
 801a082:	187a      	adds	r2, r7, r1
 801a084:	7812      	ldrb	r2, [r2, #0]
 801a086:	701a      	strb	r2, [r3, #0]
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_REQUEST_SENSE, storage, lun, 
                            key, code, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Initialize the response buffer with the additional length.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ADD_LENGTH] =  10;
 801a088:	69bb      	ldr	r3, [r7, #24]
 801a08a:	3307      	adds	r3, #7
 801a08c:	220a      	movs	r2, #10
 801a08e:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_data_count = 0;

#else

    /* Send a data payload with the sense codes.  */
    if (sense_length)
 801a090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a092:	2b00      	cmp	r3, #0
 801a094:	d005      	beq.n	801a0a2 <_ux_device_class_storage_request_sense+0xc4>
        _ux_device_stack_transfer_request(transfer_request, sense_length, sense_length);
 801a096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a098:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a09a:	69fb      	ldr	r3, [r7, #28]
 801a09c:	0018      	movs	r0, r3
 801a09e:	f003 f869 	bl	801d174 <_ux_device_stack_transfer_request>

    /* Check length.  */
    if (storage -> ux_slave_class_storage_host_length != sense_length)
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a0a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a0a8:	429a      	cmp	r2, r3
 801a0aa:	d006      	beq.n	801a0ba <_ux_device_class_storage_request_sense+0xdc>
    {
        _ux_device_stack_endpoint_stall(endpoint_in);
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	0018      	movs	r0, r3
 801a0b0:	f002 fb74 	bl	801c79c <_ux_device_stack_endpoint_stall>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	2202      	movs	r2, #2
 801a0b8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
#endif

    /* Return completion status.  */    
    return(status);
 801a0ba:	6a3b      	ldr	r3, [r7, #32]
}
 801a0bc:	0018      	movs	r0, r3
 801a0be:	46bd      	mov	sp, r7
 801a0c0:	b00b      	add	sp, #44	@ 0x2c
 801a0c2:	bd90      	pop	{r4, r7, pc}

0801a0c4 <_ux_device_class_storage_start_stop>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_start_stop(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 801a0c4:	b580      	push	{r7, lr}
 801a0c6:	b084      	sub	sp, #16
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	60f8      	str	r0, [r7, #12]
 801a0cc:	60b9      	str	r1, [r7, #8]
 801a0ce:	607a      	str	r2, [r7, #4]
 801a0d0:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_START_STOP, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	2200      	movs	r2, #0
 801a0d6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Return successful completion.  */
    return(UX_SUCCESS);
 801a0d8:	2300      	movs	r3, #0
}
 801a0da:	0018      	movs	r0, r3
 801a0dc:	46bd      	mov	sp, r7
 801a0de:	b004      	add	sp, #16
 801a0e0:	bd80      	pop	{r7, pc}

0801a0e2 <_ux_device_class_storage_synchronize_cache>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_synchronize_cache(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                                 UX_SLAVE_ENDPOINT *endpoint_in,
                                                 UX_SLAVE_ENDPOINT *endpoint_out, UCHAR *cbwcb, UCHAR scsi_command)
{
 801a0e2:	b5b0      	push	{r4, r5, r7, lr}
 801a0e4:	b08c      	sub	sp, #48	@ 0x30
 801a0e6:	af02      	add	r7, sp, #8
 801a0e8:	60f8      	str	r0, [r7, #12]
 801a0ea:	60b9      	str	r1, [r7, #8]
 801a0ec:	607a      	str	r2, [r7, #4]
 801a0ee:	603b      	str	r3, [r7, #0]

    UX_PARAMETER_NOT_USED(endpoint_out);
    UX_PARAMETER_NOT_USED(scsi_command);

    /* By default status is passed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	2200      	movs	r2, #0
 801a0f4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Is there not an implementation?  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush == UX_NULL)
 801a0f6:	68f9      	ldr	r1, [r7, #12]
 801a0f8:	68ba      	ldr	r2, [r7, #8]
 801a0fa:	0013      	movs	r3, r2
 801a0fc:	00db      	lsls	r3, r3, #3
 801a0fe:	1a9b      	subs	r3, r3, r2
 801a100:	00db      	lsls	r3, r3, #3
 801a102:	18cb      	adds	r3, r1, r3
 801a104:	3334      	adds	r3, #52	@ 0x34
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d101      	bne.n	801a110 <_ux_device_class_storage_synchronize_cache+0x2e>
    {

        /* This means the application is not using a cache.  */

        /* Return success.  */
        return(UX_SUCCESS);
 801a10c:	2300      	movs	r3, #0
 801a10e:	e087      	b.n	801a220 <_ux_device_class_storage_synchronize_cache+0x13e>
    }

    /* Get the LBA and number of blocks from the CBWCB in 16 bits.  */
    lba           =         _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_LBA);
 801a110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a112:	3302      	adds	r3, #2
 801a114:	0018      	movs	r0, r3
 801a116:	f7fd fead 	bl	8017e74 <_ux_utility_long_get_big_endian>
 801a11a:	0003      	movs	r3, r0
 801a11c:	627b      	str	r3, [r7, #36]	@ 0x24
    number_blocks = (USHORT)_ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_NUMBER_OF_BLOCKS);
 801a11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a120:	3307      	adds	r3, #7
 801a122:	0018      	movs	r0, r3
 801a124:	f7fe fa47 	bl	80185b6 <_ux_utility_short_get_big_endian>
 801a128:	0002      	movs	r2, r0
 801a12a:	2322      	movs	r3, #34	@ 0x22
 801a12c:	18fb      	adds	r3, r7, r3
 801a12e:	801a      	strh	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_SYNCHRONIZE_CACHE, storage, lun, lba, number_blocks, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 801a130:	68f9      	ldr	r1, [r7, #12]
 801a132:	68bb      	ldr	r3, [r7, #8]
 801a134:	1c5a      	adds	r2, r3, #1
 801a136:	0013      	movs	r3, r2
 801a138:	00db      	lsls	r3, r3, #3
 801a13a:	1a9b      	subs	r3, r3, r2
 801a13c:	00db      	lsls	r3, r3, #3
 801a13e:	585c      	ldr	r4, [r3, r1]
 801a140:	68f9      	ldr	r1, [r7, #12]
 801a142:	68ba      	ldr	r2, [r7, #8]
 801a144:	0013      	movs	r3, r2
 801a146:	00db      	lsls	r3, r3, #3
 801a148:	1a9b      	subs	r3, r3, r2
 801a14a:	00db      	lsls	r3, r3, #3
 801a14c:	18cb      	adds	r3, r1, r3
 801a14e:	331c      	adds	r3, #28
 801a150:	681a      	ldr	r2, [r3, #0]
 801a152:	2314      	movs	r3, #20
 801a154:	18fb      	adds	r3, r7, r3
 801a156:	68b9      	ldr	r1, [r7, #8]
 801a158:	68f8      	ldr	r0, [r7, #12]
 801a15a:	47a0      	blx	r4
 801a15c:	0003      	movs	r3, r0
 801a15e:	61fb      	str	r3, [r7, #28]
                            lun, storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 801a160:	6979      	ldr	r1, [r7, #20]
 801a162:	68f8      	ldr	r0, [r7, #12]
 801a164:	68ba      	ldr	r2, [r7, #8]
 801a166:	0013      	movs	r3, r2
 801a168:	00db      	lsls	r3, r3, #3
 801a16a:	1a9b      	subs	r3, r3, r2
 801a16c:	00db      	lsls	r3, r3, #3
 801a16e:	18c3      	adds	r3, r0, r3
 801a170:	3320      	adds	r3, #32
 801a172:	6019      	str	r1, [r3, #0]

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 801a174:	69fb      	ldr	r3, [r7, #28]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d008      	beq.n	801a18c <_ux_device_class_storage_synchronize_cache+0xaa>
    {

        /* We have a problem, media status error. Return a bad completion and wait for the
           REQUEST_SENSE command.  */
#if !defined(UX_DEVICE_STANDALONE)
        _ux_device_stack_endpoint_stall(endpoint_in);
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	0018      	movs	r0, r3
 801a17e:	f002 fb0d 	bl	801c79c <_ux_device_stack_endpoint_stall>
#else
        UX_PARAMETER_NOT_USED(endpoint_in);
        storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_ERR;
#endif

        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	2201      	movs	r2, #1
 801a186:	651a      	str	r2, [r3, #80]	@ 0x50

        /* We are done here.  */
        return(UX_ERROR);
 801a188:	23ff      	movs	r3, #255	@ 0xff
 801a18a:	e049      	b.n	801a220 <_ux_device_class_storage_synchronize_cache+0x13e>
    storage -> ux_device_class_storage_cmd_n_lb = number_blocks;

#else

    /* Get the flags.  */
    flags =  *(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_FLAGS);
 801a18c:	211b      	movs	r1, #27
 801a18e:	187b      	adds	r3, r7, r1
 801a190:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a192:	7852      	ldrb	r2, [r2, #1]
 801a194:	701a      	strb	r2, [r3, #0]

    /* If the immediate bit is set, we return a CSW before flush.  */
    if ((flags & UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_FLAGS_IMMED) != 0)
 801a196:	187b      	adds	r3, r7, r1
 801a198:	781b      	ldrb	r3, [r3, #0]
 801a19a:	2202      	movs	r2, #2
 801a19c:	4013      	ands	r3, r2
 801a19e:	d005      	beq.n	801a1ac <_ux_device_class_storage_synchronize_cache+0xca>
        _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 801a1a0:	687a      	ldr	r2, [r7, #4]
 801a1a2:	68b9      	ldr	r1, [r7, #8]
 801a1a4:	68f8      	ldr	r0, [r7, #12]
 801a1a6:	2300      	movs	r3, #0
 801a1a8:	f7ff f8e6 	bl	8019378 <_ux_device_class_storage_csw_send>

    /* Send the flush command to the local media.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush(storage, lun, number_blocks, lba, &media_status);
 801a1ac:	68f9      	ldr	r1, [r7, #12]
 801a1ae:	68ba      	ldr	r2, [r7, #8]
 801a1b0:	0013      	movs	r3, r2
 801a1b2:	00db      	lsls	r3, r3, #3
 801a1b4:	1a9b      	subs	r3, r3, r2
 801a1b6:	00db      	lsls	r3, r3, #3
 801a1b8:	18cb      	adds	r3, r1, r3
 801a1ba:	3334      	adds	r3, #52	@ 0x34
 801a1bc:	681c      	ldr	r4, [r3, #0]
 801a1be:	2322      	movs	r3, #34	@ 0x22
 801a1c0:	18fb      	adds	r3, r7, r3
 801a1c2:	881a      	ldrh	r2, [r3, #0]
 801a1c4:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 801a1c6:	68b9      	ldr	r1, [r7, #8]
 801a1c8:	68f8      	ldr	r0, [r7, #12]
 801a1ca:	2314      	movs	r3, #20
 801a1cc:	18fb      	adds	r3, r7, r3
 801a1ce:	9300      	str	r3, [sp, #0]
 801a1d0:	002b      	movs	r3, r5
 801a1d2:	47a0      	blx	r4
 801a1d4:	0003      	movs	r3, r0
 801a1d6:	61fb      	str	r3, [r7, #28]

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 801a1d8:	6979      	ldr	r1, [r7, #20]
 801a1da:	68f8      	ldr	r0, [r7, #12]
 801a1dc:	68ba      	ldr	r2, [r7, #8]
 801a1de:	0013      	movs	r3, r2
 801a1e0:	00db      	lsls	r3, r3, #3
 801a1e2:	1a9b      	subs	r3, r3, r2
 801a1e4:	00db      	lsls	r3, r3, #3
 801a1e6:	18c3      	adds	r3, r0, r3
 801a1e8:	3320      	adds	r3, #32
 801a1ea:	6019      	str	r1, [r3, #0]

    /* If the immediate bit is set, we are already done, no matter what local operation status is.  */
    if ((flags & UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_FLAGS_IMMED) != 0)
 801a1ec:	231b      	movs	r3, #27
 801a1ee:	18fb      	adds	r3, r7, r3
 801a1f0:	781b      	ldrb	r3, [r3, #0]
 801a1f2:	2202      	movs	r2, #2
 801a1f4:	4013      	ands	r3, r2
 801a1f6:	d006      	beq.n	801a206 <_ux_device_class_storage_synchronize_cache+0x124>
    {

        /* CSW skipped since already sent in this function.  */
        UX_DEVICE_CLASS_STORAGE_CSW_SKIP(&storage -> ux_slave_class_storage_csw_status) = UX_TRUE;
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	3350      	adds	r3, #80	@ 0x50
 801a1fc:	3303      	adds	r3, #3
 801a1fe:	2201      	movs	r2, #1
 801a200:	701a      	strb	r2, [r3, #0]
        return(status);
 801a202:	69fb      	ldr	r3, [r7, #28]
 801a204:	e00c      	b.n	801a220 <_ux_device_class_storage_synchronize_cache+0x13e>
    }

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 801a206:	69fb      	ldr	r3, [r7, #28]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d008      	beq.n	801a21e <_ux_device_class_storage_synchronize_cache+0x13c>
    {

        /* We have a problem, request error. Return a bad completion and wait for the
           REQUEST_SENSE command.  */
        _ux_device_stack_endpoint_stall(endpoint_in);
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	0018      	movs	r0, r3
 801a210:	f002 fac4 	bl	801c79c <_ux_device_stack_endpoint_stall>

        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	2201      	movs	r2, #1
 801a218:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Return an error.  */
        return(UX_ERROR);
 801a21a:	23ff      	movs	r3, #255	@ 0xff
 801a21c:	e000      	b.n	801a220 <_ux_device_class_storage_synchronize_cache+0x13e>
    }
#endif

    /* Return completion status.  */
    return(status);
 801a21e:	69fb      	ldr	r3, [r7, #28]
}
 801a220:	0018      	movs	r0, r3
 801a222:	46bd      	mov	sp, r7
 801a224:	b00a      	add	sp, #40	@ 0x28
 801a226:	bdb0      	pop	{r4, r5, r7, pc}

0801a228 <_ux_device_class_storage_test_ready>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_test_ready(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                          UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 801a228:	b590      	push	{r4, r7, lr}
 801a22a:	b087      	sub	sp, #28
 801a22c:	af00      	add	r7, sp, #0
 801a22e:	60f8      	str	r0, [r7, #12]
 801a230:	60b9      	str	r1, [r7, #8]
 801a232:	607a      	str	r2, [r7, #4]
 801a234:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_TEST_READY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 801a236:	68f9      	ldr	r1, [r7, #12]
 801a238:	68bb      	ldr	r3, [r7, #8]
 801a23a:	1c5a      	adds	r2, r3, #1
 801a23c:	0013      	movs	r3, r2
 801a23e:	00db      	lsls	r3, r3, #3
 801a240:	1a9b      	subs	r3, r3, r2
 801a242:	00db      	lsls	r3, r3, #3
 801a244:	585c      	ldr	r4, [r3, r1]
 801a246:	68f9      	ldr	r1, [r7, #12]
 801a248:	68ba      	ldr	r2, [r7, #8]
 801a24a:	0013      	movs	r3, r2
 801a24c:	00db      	lsls	r3, r3, #3
 801a24e:	1a9b      	subs	r3, r3, r2
 801a250:	00db      	lsls	r3, r3, #3
 801a252:	18cb      	adds	r3, r1, r3
 801a254:	331c      	adds	r3, #28
 801a256:	681a      	ldr	r2, [r3, #0]
 801a258:	2310      	movs	r3, #16
 801a25a:	18fb      	adds	r3, r7, r3
 801a25c:	68b9      	ldr	r1, [r7, #8]
 801a25e:	68f8      	ldr	r0, [r7, #12]
 801a260:	47a0      	blx	r4
 801a262:	0003      	movs	r3, r0
 801a264:	617b      	str	r3, [r7, #20]
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Set the sense/code/qualifier codes for the REQUEST_SENSE command.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 801a266:	6939      	ldr	r1, [r7, #16]
 801a268:	68f8      	ldr	r0, [r7, #12]
 801a26a:	68ba      	ldr	r2, [r7, #8]
 801a26c:	0013      	movs	r3, r2
 801a26e:	00db      	lsls	r3, r3, #3
 801a270:	1a9b      	subs	r3, r3, r2
 801a272:	00db      	lsls	r3, r3, #3
 801a274:	18c3      	adds	r3, r0, r3
 801a276:	3320      	adds	r3, #32
 801a278:	6019      	str	r1, [r3, #0]

    /* Return CSW with success/error.  */
    storage -> ux_slave_class_storage_csw_status = (status == UX_SUCCESS) ?
                            UX_SLAVE_CLASS_STORAGE_CSW_PASSED : UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 801a27a:	697b      	ldr	r3, [r7, #20]
 801a27c:	1e5a      	subs	r2, r3, #1
 801a27e:	4193      	sbcs	r3, r2
 801a280:	b2db      	uxtb	r3, r3
 801a282:	001a      	movs	r2, r3
    storage -> ux_slave_class_storage_csw_status = (status == UX_SUCCESS) ?
 801a284:	68fb      	ldr	r3, [r7, #12]
 801a286:	651a      	str	r2, [r3, #80]	@ 0x50
    status = UX_SUCCESS;
 801a288:	2300      	movs	r3, #0
 801a28a:	617b      	str	r3, [r7, #20]

#if !defined(UX_DEVICE_STANDALONE)

    /* Case (9) Ho > Dn.  */
    if (storage -> ux_slave_class_storage_host_length)
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a290:	2b00      	cmp	r3, #0
 801a292:	d007      	beq.n	801a2a4 <_ux_device_class_storage_test_ready+0x7c>
    {
        _ux_device_stack_endpoint_stall(endpoint_out);
 801a294:	683b      	ldr	r3, [r7, #0]
 801a296:	0018      	movs	r0, r3
 801a298:	f002 fa80 	bl	801c79c <_ux_device_stack_endpoint_stall>
        storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length;
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
#endif

    /* Return completion status.  */
    return(status);
 801a2a4:	697b      	ldr	r3, [r7, #20]
}
 801a2a6:	0018      	movs	r0, r3
 801a2a8:	46bd      	mov	sp, r7
 801a2aa:	b007      	add	sp, #28
 801a2ac:	bd90      	pop	{r4, r7, pc}
	...

0801a2b0 <_ux_device_class_storage_thread>:
/*                                            refined macros names,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_device_class_storage_thread(ULONG storage_class)
{
 801a2b0:	b590      	push	{r4, r7, lr}
 801a2b2:	b093      	sub	sp, #76	@ 0x4c
 801a2b4:	af02      	add	r7, sp, #8
 801a2b6:	6078      	str	r0, [r7, #4]
    /* This thread runs forever but can be suspended or resumed.  */
    while(1)
    {

        /* Cast properly the storage instance.  */
        UX_THREAD_EXTENSION_PTR_GET(class, UX_SLAVE_CLASS, storage_class)
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	633b      	str	r3, [r7, #48]	@ 0x30
        
        /* Get the storage instance from this class container.  */
        storage =  (UX_SLAVE_CLASS_STORAGE *) class -> ux_slave_class_instance;
 801a2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a2c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
        /* Get the pointer to the device.  */
        device =  &_ux_system_slave -> ux_system_slave_device;
 801a2c2:	4bd4      	ldr	r3, [pc, #848]	@ (801a614 <_ux_device_class_storage_thread+0x364>)
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	3320      	adds	r3, #32
 801a2c8:	62bb      	str	r3, [r7, #40]	@ 0x28
        
        /* As long as the device is in the CONFIGURED state.  */
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 801a2ca:	e197      	b.n	801a5fc <_ux_device_class_storage_thread+0x34c>
        { 

            /* We assume the worst situation.  */
            status =  UX_ERROR;
 801a2cc:	23ff      	movs	r3, #255	@ 0xff
 801a2ce:	637b      	str	r3, [r7, #52]	@ 0x34

            /* We are activated. We need the interface to the class.  */
            interface =  storage -> ux_slave_class_storage_interface;
 801a2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* We assume the worst situation.  */
            status =  UX_ERROR;
 801a2d6:	23ff      	movs	r3, #255	@ 0xff
 801a2d8:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Locate the endpoints.  */
            endpoint_in =  interface -> ux_slave_interface_first_endpoint;
 801a2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a2de:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Check the endpoint direction, if IN we have the correct endpoint.  */
            if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 801a2e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a2e2:	695b      	ldr	r3, [r3, #20]
 801a2e4:	2280      	movs	r2, #128	@ 0x80
 801a2e6:	4013      	ands	r3, r2
 801a2e8:	d105      	bne.n	801a2f6 <_ux_device_class_storage_thread+0x46>
            {

                /* Wrong direction, we found the OUT endpoint first.  */
                endpoint_out =  endpoint_in;
 801a2ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a2ec:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* So the next endpoint has to be the IN endpoint.  */
                endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 801a2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a2f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a2f4:	e002      	b.n	801a2fc <_ux_device_class_storage_thread+0x4c>
            }
            else
            {

                /* We found the endpoint IN first, so next endpoint is OUT.  */
                endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 801a2f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a2fa:	63bb      	str	r3, [r7, #56]	@ 0x38
            }

            /* All SCSI commands are on the endpoint OUT, from the host.  */
            transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 801a2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a2fe:	3330      	adds	r3, #48	@ 0x30
 801a300:	623b      	str	r3, [r7, #32]

            /* Check state, they must be both RESET.  */
            if (endpoint_out -> ux_slave_endpoint_state == UX_ENDPOINT_RESET &&
 801a302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a304:	685b      	ldr	r3, [r3, #4]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d10c      	bne.n	801a324 <_ux_device_class_storage_thread+0x74>
                (UCHAR)storage -> ux_slave_class_storage_csw_status != UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR)
 801a30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a30c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a30e:	b2db      	uxtb	r3, r3
            if (endpoint_out -> ux_slave_endpoint_state == UX_ENDPOINT_RESET &&
 801a310:	2b02      	cmp	r3, #2
 801a312:	d007      	beq.n	801a324 <_ux_device_class_storage_thread+0x74>
            {

                /* Send the request to the device controller.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 64, 64);
 801a314:	6a3b      	ldr	r3, [r7, #32]
 801a316:	2240      	movs	r2, #64	@ 0x40
 801a318:	2140      	movs	r1, #64	@ 0x40
 801a31a:	0018      	movs	r0, r3
 801a31c:	f002 ff2a 	bl	801d174 <_ux_device_stack_transfer_request>
 801a320:	0003      	movs	r3, r0
 801a322:	637b      	str	r3, [r7, #52]	@ 0x34

            }                
    
            /* Check the status. Our status is UX_ERROR if one of the endpoint was STALLED. We must wait for the host
               to clear the mess.   */    
            if (status == UX_SUCCESS)
 801a324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a326:	2b00      	cmp	r3, #0
 801a328:	d000      	beq.n	801a32c <_ux_device_class_storage_thread+0x7c>
 801a32a:	e155      	b.n	801a5d8 <_ux_device_class_storage_thread+0x328>
            {

                /* Obtain the length of the transaction.  */
                length =  transfer_request -> ux_slave_transfer_request_actual_length;
 801a32c:	6a3b      	ldr	r3, [r7, #32]
 801a32e:	699b      	ldr	r3, [r3, #24]
 801a330:	61fb      	str	r3, [r7, #28]
                
                /* Obtain the buffer address containing the SCSI command.  */
                scsi_command =  transfer_request -> ux_slave_transfer_request_data_pointer;
 801a332:	6a3b      	ldr	r3, [r7, #32]
 801a334:	68db      	ldr	r3, [r3, #12]
 801a336:	61bb      	str	r3, [r7, #24]
                
                /* Obtain the lun from the CBW.  */
                lun =  (ULONG) *(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_LUN);
 801a338:	69bb      	ldr	r3, [r7, #24]
 801a33a:	330d      	adds	r3, #13
 801a33c:	781b      	ldrb	r3, [r3, #0]
 801a33e:	617b      	str	r3, [r7, #20]
                storage -> ux_slave_class_storage_cbw_lun = (UCHAR)lun;
 801a340:	697b      	ldr	r3, [r7, #20]
 801a342:	b2d9      	uxtb	r1, r3
 801a344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a346:	2245      	movs	r2, #69	@ 0x45
 801a348:	5499      	strb	r1, [r3, r2]
                
                /* We have to memorize the SCSI command tag for the CSW phase.  */
                storage -> ux_slave_class_storage_scsi_tag =  _ux_utility_long_get(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_TAG);
 801a34a:	69bb      	ldr	r3, [r7, #24]
 801a34c:	3304      	adds	r3, #4
 801a34e:	0018      	movs	r0, r3
 801a350:	f7fd fd6c 	bl	8017e2c <_ux_utility_long_get>
 801a354:	0002      	movs	r2, r0
 801a356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a358:	649a      	str	r2, [r3, #72]	@ 0x48

                /* Get dCBWDataTransferLength: number of bytes to transfer.  */
                storage -> ux_slave_class_storage_host_length = _ux_utility_long_get(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_DATA_LENGTH);
 801a35a:	69bb      	ldr	r3, [r7, #24]
 801a35c:	3308      	adds	r3, #8
 801a35e:	0018      	movs	r0, r3
 801a360:	f7fd fd64 	bl	8017e2c <_ux_utility_long_get>
 801a364:	0002      	movs	r2, r0
 801a366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a368:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Save bmCBWFlags.  */
                storage -> ux_slave_class_storage_cbw_flags = *(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_FLAGS);
 801a36a:	69bb      	ldr	r3, [r7, #24]
 801a36c:	7b19      	ldrb	r1, [r3, #12]
 801a36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a370:	2244      	movs	r2, #68	@ 0x44
 801a372:	5499      	strb	r1, [r3, r2]

                /* Reset CSW status.  */
                storage -> ux_slave_class_storage_csw_residue = 0;
 801a374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a376:	2200      	movs	r2, #0
 801a378:	64da      	str	r2, [r3, #76]	@ 0x4c
                storage -> ux_slave_class_storage_csw_status = 0;
 801a37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a37c:	2200      	movs	r2, #0
 801a37e:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Ensure the LUN number is within our declared values and check the command 
                   content and format. First we make sure we have a complete CBW.  */
                if ((lun < storage -> ux_slave_class_storage_number_lun) && (length == UX_SLAVE_CLASS_STORAGE_CBW_LENGTH))
 801a380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a382:	685b      	ldr	r3, [r3, #4]
 801a384:	697a      	ldr	r2, [r7, #20]
 801a386:	429a      	cmp	r2, r3
 801a388:	d300      	bcc.n	801a38c <_ux_device_class_storage_thread+0xdc>
 801a38a:	e121      	b.n	801a5d0 <_ux_device_class_storage_thread+0x320>
 801a38c:	69fb      	ldr	r3, [r7, #28]
 801a38e:	2b1f      	cmp	r3, #31
 801a390:	d000      	beq.n	801a394 <_ux_device_class_storage_thread+0xe4>
 801a392:	e11d      	b.n	801a5d0 <_ux_device_class_storage_thread+0x320>
                {

                    /* The length of the CBW is correct, analyze the header.  */
                    if (_ux_utility_long_get(scsi_command) == UX_SLAVE_CLASS_STORAGE_CBW_SIGNATURE_MASK)
 801a394:	69bb      	ldr	r3, [r7, #24]
 801a396:	0018      	movs	r0, r3
 801a398:	f7fd fd48 	bl	8017e2c <_ux_utility_long_get>
 801a39c:	0003      	movs	r3, r0
 801a39e:	4a9e      	ldr	r2, [pc, #632]	@ (801a618 <_ux_device_class_storage_thread+0x368>)
 801a3a0:	4293      	cmp	r3, r2
 801a3a2:	d000      	beq.n	801a3a6 <_ux_device_class_storage_thread+0xf6>
 801a3a4:	e110      	b.n	801a5c8 <_ux_device_class_storage_thread+0x318>
                    {

                        /* Get the length of the CBWCB.  */
                        cbwcb_length =  (ULONG) *(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB_LENGTH);
 801a3a6:	69bb      	ldr	r3, [r7, #24]
 801a3a8:	330e      	adds	r3, #14
 801a3aa:	781b      	ldrb	r3, [r3, #0]
 801a3ac:	613b      	str	r3, [r7, #16]
    
                        /* Check the length of the CBWCB to ensure there is at least a command.  */
                        if (cbwcb_length != 0)
 801a3ae:	693b      	ldr	r3, [r7, #16]
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d100      	bne.n	801a3b6 <_ux_device_class_storage_thread+0x106>
 801a3b4:	e104      	b.n	801a5c0 <_ux_device_class_storage_thread+0x310>
                        {

                            /* Analyze the command stored in the CBWCB.  */
                            cbw_cb = scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB;
 801a3b6:	69bb      	ldr	r3, [r7, #24]
 801a3b8:	330f      	adds	r3, #15
 801a3ba:	60fb      	str	r3, [r7, #12]
                            switch (*(cbw_cb))
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	781b      	ldrb	r3, [r3, #0]
 801a3c0:	2baa      	cmp	r3, #170	@ 0xaa
 801a3c2:	d100      	bne.n	801a3c6 <_ux_device_class_storage_thread+0x116>
 801a3c4:	e097      	b.n	801a4f6 <_ux_device_class_storage_thread+0x246>
 801a3c6:	dd00      	ble.n	801a3ca <_ux_device_class_storage_thread+0x11a>
 801a3c8:	e0ba      	b.n	801a540 <_ux_device_class_storage_thread+0x290>
 801a3ca:	2b5a      	cmp	r3, #90	@ 0x5a
 801a3cc:	dc0a      	bgt.n	801a3e4 <_ux_device_class_storage_thread+0x134>
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	da00      	bge.n	801a3d4 <_ux_device_class_storage_thread+0x124>
 801a3d2:	e0b5      	b.n	801a540 <_ux_device_class_storage_thread+0x290>
 801a3d4:	2b5a      	cmp	r3, #90	@ 0x5a
 801a3d6:	d900      	bls.n	801a3da <_ux_device_class_storage_thread+0x12a>
 801a3d8:	e0b2      	b.n	801a540 <_ux_device_class_storage_thread+0x290>
 801a3da:	009a      	lsls	r2, r3, #2
 801a3dc:	4b8f      	ldr	r3, [pc, #572]	@ (801a61c <_ux_device_class_storage_thread+0x36c>)
 801a3de:	18d3      	adds	r3, r2, r3
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	469f      	mov	pc, r3
 801a3e4:	2ba8      	cmp	r3, #168	@ 0xa8
 801a3e6:	d06e      	beq.n	801a4c6 <_ux_device_class_storage_thread+0x216>
 801a3e8:	e0aa      	b.n	801a540 <_ux_device_class_storage_thread+0x290>
                            {

                            case UX_SLAVE_CLASS_STORAGE_SCSI_TEST_READY:

                                _ux_device_class_storage_test_ready(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 801a3ea:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a3ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a3ee:	6979      	ldr	r1, [r7, #20]
 801a3f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a3f2:	68fb      	ldr	r3, [r7, #12]
 801a3f4:	9300      	str	r3, [sp, #0]
 801a3f6:	0023      	movs	r3, r4
 801a3f8:	f7ff ff16 	bl	801a228 <_ux_device_class_storage_test_ready>
                                break;
 801a3fc:	e0ce      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>
                                    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_REQUEST_SENSE:

                                _ux_device_class_storage_request_sense(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 801a3fe:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a400:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a402:	6979      	ldr	r1, [r7, #20]
 801a404:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a406:	68fb      	ldr	r3, [r7, #12]
 801a408:	9300      	str	r3, [sp, #0]
 801a40a:	0023      	movs	r3, r4
 801a40c:	f7ff fde7 	bl	8019fde <_ux_device_class_storage_request_sense>
                                break;
 801a410:	e0c4      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_FORMAT:

                                _ux_device_class_storage_format(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 801a412:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a414:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a416:	6979      	ldr	r1, [r7, #20]
 801a418:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a41a:	68fb      	ldr	r3, [r7, #12]
 801a41c:	9300      	str	r3, [sp, #0]
 801a41e:	0023      	movs	r3, r4
 801a420:	f7ff f874 	bl	801950c <_ux_device_class_storage_format>
                                break;
 801a424:	e0ba      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_INQUIRY:

                                _ux_device_class_storage_inquiry(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 801a426:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a428:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a42a:	6979      	ldr	r1, [r7, #20]
 801a42c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	9300      	str	r3, [sp, #0]
 801a432:	0023      	movs	r3, r4
 801a434:	f7ff fa1a 	bl	801986c <_ux_device_class_storage_inquiry>
                                break;
 801a438:	e0b0      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_START_STOP:

                                _ux_device_class_storage_start_stop(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 801a43a:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a43c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a43e:	6979      	ldr	r1, [r7, #20]
 801a440:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	9300      	str	r3, [sp, #0]
 801a446:	0023      	movs	r3, r4
 801a448:	f7ff fe3c 	bl	801a0c4 <_ux_device_class_storage_start_stop>
                                break;
 801a44c:	e0a6      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>
                                    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_PREVENT_ALLOW_MEDIA_REMOVAL:

                                _ux_device_class_storage_prevent_allow_media_removal(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 801a44e:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a450:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a452:	6979      	ldr	r1, [r7, #20]
 801a454:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	9300      	str	r3, [sp, #0]
 801a45a:	0023      	movs	r3, r4
 801a45c:	f7ff fbdb 	bl	8019c16 <_ux_device_class_storage_prevent_allow_media_removal>
                                break;
 801a460:	e09c      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_READ_FORMAT_CAPACITY:

                                _ux_device_class_storage_read_format_capacity(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 801a462:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a464:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a466:	6979      	ldr	r1, [r7, #20]
 801a468:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a46a:	68fb      	ldr	r3, [r7, #12]
 801a46c:	9300      	str	r3, [sp, #0]
 801a46e:	0023      	movs	r3, r4
 801a470:	f7ff fd6c 	bl	8019f4c <_ux_device_class_storage_read_format_capacity>
                                break;
 801a474:	e092      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_READ_CAPACITY:

                                _ux_device_class_storage_read_capacity(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 801a476:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a478:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a47a:	6979      	ldr	r1, [r7, #20]
 801a47c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	9300      	str	r3, [sp, #0]
 801a482:	0023      	movs	r3, r4
 801a484:	f7ff fcf4 	bl	8019e70 <_ux_device_class_storage_read_capacity>
                                break;
 801a488:	e088      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_VERIFY:

                                _ux_device_class_storage_verify(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 801a48a:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a48c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a48e:	6979      	ldr	r1, [r7, #20]
 801a490:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a492:	68fb      	ldr	r3, [r7, #12]
 801a494:	9300      	str	r3, [sp, #0]
 801a496:	0023      	movs	r3, r4
 801a498:	f000 f8e6 	bl	801a668 <_ux_device_class_storage_verify>
                                break;
 801a49c:	e07e      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SELECT:

                                _ux_device_class_storage_mode_select(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 801a49e:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a4a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a4a2:	6979      	ldr	r1, [r7, #20]
 801a4a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a4a6:	68fb      	ldr	r3, [r7, #12]
 801a4a8:	9300      	str	r3, [sp, #0]
 801a4aa:	0023      	movs	r3, r4
 801a4ac:	f7ff faca 	bl	8019a44 <_ux_device_class_storage_mode_select>
                                break;
 801a4b0:	e074      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT:
                            case UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE:

                                _ux_device_class_storage_mode_sense(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 801a4b2:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a4b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a4b6:	6979      	ldr	r1, [r7, #20]
 801a4b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	9300      	str	r3, [sp, #0]
 801a4be:	0023      	movs	r3, r4
 801a4c0:	f7ff faec 	bl	8019a9c <_ux_device_class_storage_mode_sense>
                                break;
 801a4c4:	e06a      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_READ32:

                                _ux_device_class_storage_read(storage, lun, endpoint_in, endpoint_out, cbw_cb, 
 801a4c6:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a4c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a4ca:	6979      	ldr	r1, [r7, #20]
 801a4cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a4ce:	23a8      	movs	r3, #168	@ 0xa8
 801a4d0:	9301      	str	r3, [sp, #4]
 801a4d2:	68fb      	ldr	r3, [r7, #12]
 801a4d4:	9300      	str	r3, [sp, #0]
 801a4d6:	0023      	movs	r3, r4
 801a4d8:	f7ff fbac 	bl	8019c34 <_ux_device_class_storage_read>
                                                                UX_SLAVE_CLASS_STORAGE_SCSI_READ32);
                                break;
 801a4dc:	e05e      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_READ16:

                                _ux_device_class_storage_read(storage, lun, endpoint_in, endpoint_out, cbw_cb, 
 801a4de:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a4e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a4e2:	6979      	ldr	r1, [r7, #20]
 801a4e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a4e6:	2328      	movs	r3, #40	@ 0x28
 801a4e8:	9301      	str	r3, [sp, #4]
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	9300      	str	r3, [sp, #0]
 801a4ee:	0023      	movs	r3, r4
 801a4f0:	f7ff fba0 	bl	8019c34 <_ux_device_class_storage_read>
                                                                UX_SLAVE_CLASS_STORAGE_SCSI_READ16);
                                break;
 801a4f4:	e052      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_WRITE32:

                                _ux_device_class_storage_write(storage, lun, endpoint_in, endpoint_out, cbw_cb,
 801a4f6:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a4f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a4fa:	6979      	ldr	r1, [r7, #20]
 801a4fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a4fe:	23aa      	movs	r3, #170	@ 0xaa
 801a500:	9301      	str	r3, [sp, #4]
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	9300      	str	r3, [sp, #0]
 801a506:	0023      	movs	r3, r4
 801a508:	f000 f8be 	bl	801a688 <_ux_device_class_storage_write>
                                                                UX_SLAVE_CLASS_STORAGE_SCSI_WRITE32);
                                break;
 801a50c:	e046      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_WRITE16:

                                _ux_device_class_storage_write(storage, lun, endpoint_in, endpoint_out, cbw_cb, 
 801a50e:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a510:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a512:	6979      	ldr	r1, [r7, #20]
 801a514:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a516:	232a      	movs	r3, #42	@ 0x2a
 801a518:	9301      	str	r3, [sp, #4]
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	9300      	str	r3, [sp, #0]
 801a51e:	0023      	movs	r3, r4
 801a520:	f000 f8b2 	bl	801a688 <_ux_device_class_storage_write>
                                                                UX_SLAVE_CLASS_STORAGE_SCSI_WRITE16);
                                break;
 801a524:	e03a      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>

                            case UX_SLAVE_CLASS_STORAGE_SCSI_SYNCHRONIZE_CACHE:

                                _ux_device_class_storage_synchronize_cache(storage, lun, endpoint_in, endpoint_out, cbw_cb, *(cbw_cb));
 801a526:	68fb      	ldr	r3, [r7, #12]
 801a528:	781b      	ldrb	r3, [r3, #0]
 801a52a:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801a52c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a52e:	6979      	ldr	r1, [r7, #20]
 801a530:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a532:	9301      	str	r3, [sp, #4]
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	9300      	str	r3, [sp, #0]
 801a538:	0023      	movs	r3, r4
 801a53a:	f7ff fdd2 	bl	801a0e2 <_ux_device_class_storage_synchronize_cache>
                                break;
 801a53e:	e02d      	b.n	801a59c <_ux_device_class_storage_thread+0x2ec>
                            /* fall through */
                            default:
    
                                /* The command is unknown or unsupported, so we stall the endpoint.  */

                                if (storage -> ux_slave_class_storage_host_length > 0 &&
 801a540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a544:	2b00      	cmp	r3, #0
 801a546:	d00a      	beq.n	801a55e <_ux_device_class_storage_thread+0x2ae>
                                    ((storage -> ux_slave_class_storage_cbw_flags & 0x80) == 0))
 801a548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a54a:	2244      	movs	r2, #68	@ 0x44
 801a54c:	5c9b      	ldrb	r3, [r3, r2]
 801a54e:	b25b      	sxtb	r3, r3
                                if (storage -> ux_slave_class_storage_host_length > 0 &&
 801a550:	2b00      	cmp	r3, #0
 801a552:	db04      	blt.n	801a55e <_ux_device_class_storage_thread+0x2ae>

                                    /* Data-Out from host to device, stall OUT.  */
                                    _ux_device_stack_endpoint_stall(endpoint_out);
 801a554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a556:	0018      	movs	r0, r3
 801a558:	f002 f920 	bl	801c79c <_ux_device_stack_endpoint_stall>
 801a55c:	e003      	b.n	801a566 <_ux_device_class_storage_thread+0x2b6>
                                else

                                    /* Data-In from device to host, stall IN.  */
                                    _ux_device_stack_endpoint_stall(endpoint_in);
 801a55e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a560:	0018      	movs	r0, r3
 801a562:	f002 f91b 	bl	801c79c <_ux_device_stack_endpoint_stall>
                                
                                /* Initialize the request sense keys.  */
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 801a566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a568:	697a      	ldr	r2, [r7, #20]
 801a56a:	0013      	movs	r3, r2
 801a56c:	00db      	lsls	r3, r3, #3
 801a56e:	1a9b      	subs	r3, r3, r2
 801a570:	00db      	lsls	r3, r3, #3
 801a572:	18cb      	adds	r3, r1, r3
 801a574:	3320      	adds	r3, #32
 801a576:	4a2a      	ldr	r2, [pc, #168]	@ (801a620 <_ux_device_class_storage_thread+0x370>)
 801a578:	601a      	str	r2, [r3, #0]
                                    UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(UX_SLAVE_CLASS_STORAGE_SENSE_KEY_ILLEGAL_REQUEST,
                                                                         UX_SLAVE_CLASS_STORAGE_ASC_KEY_INVALID_COMMAND,0);

                                /* This is the tricky part of the SCSI state machine. We must send the CSW BUT need to wait
                                   for the endpoint_in to be reset by the host.  */
                                while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 801a57a:	e00a      	b.n	801a592 <_ux_device_class_storage_thread+0x2e2>
                                { 

                                    /* Check the endpoint state.  */
                                    if (endpoint_in -> ux_slave_endpoint_state == UX_ENDPOINT_RESET)
 801a57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a57e:	685b      	ldr	r3, [r3, #4]
 801a580:	2b00      	cmp	r3, #0
 801a582:	d104      	bne.n	801a58e <_ux_device_class_storage_thread+0x2de>
                                    {

                                        /* Now we set the CSW with failure.  */
                                        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 801a584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a586:	2201      	movs	r2, #1
 801a588:	651a      	str	r2, [r3, #80]	@ 0x50
                                        break;
 801a58a:	46c0      	nop			@ (mov r8, r8)
                                    else

                                        /* We must therefore wait a while.  */
                                        _ux_device_thread_relinquish();
                                }
                                break;
 801a58c:	e005      	b.n	801a59a <_ux_device_class_storage_thread+0x2ea>
                                        _ux_device_thread_relinquish();
 801a58e:	f7fe f8c5 	bl	801871c <_ux_utility_thread_relinquish>
                                while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 801a592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	2b03      	cmp	r3, #3
 801a598:	d0f0      	beq.n	801a57c <_ux_device_class_storage_thread+0x2cc>
                                break;
 801a59a:	46c0      	nop			@ (mov r8, r8)
                            }

                            /* Send CSW if not SYNC_CACHE.  */
                            status = _ux_device_class_storage_csw_send(storage, lun, endpoint_in, 0 /* Don't care */);
 801a59c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a59e:	6979      	ldr	r1, [r7, #20]
 801a5a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a5a2:	2300      	movs	r3, #0
 801a5a4:	f7fe fee8 	bl	8019378 <_ux_device_class_storage_csw_send>
 801a5a8:	0003      	movs	r3, r0
 801a5aa:	637b      	str	r3, [r7, #52]	@ 0x34

                            /* Check error code. */
                            if (status != UX_SUCCESS)
 801a5ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d023      	beq.n	801a5fa <_ux_device_class_storage_thread+0x34a>

                                /* Error trap. */
                                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 801a5b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5b4:	001a      	movs	r2, r3
 801a5b6:	2107      	movs	r1, #7
 801a5b8:	2002      	movs	r0, #2
 801a5ba:	f7fd fab7 	bl	8017b2c <_ux_system_error_handler>
                    if (_ux_utility_long_get(scsi_command) == UX_SLAVE_CLASS_STORAGE_CBW_SIGNATURE_MASK)
 801a5be:	e01c      	b.n	801a5fa <_ux_device_class_storage_thread+0x34a>
                        }
                        else

                            /* Phase error!  */
                            storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 801a5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5c2:	2202      	movs	r2, #2
 801a5c4:	651a      	str	r2, [r3, #80]	@ 0x50
                    if (_ux_utility_long_get(scsi_command) == UX_SLAVE_CLASS_STORAGE_CBW_SIGNATURE_MASK)
 801a5c6:	e018      	b.n	801a5fa <_ux_device_class_storage_thread+0x34a>
                    }
                    
                    else

                        /* Phase error!  */
                        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 801a5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5ca:	2202      	movs	r2, #2
 801a5cc:	651a      	str	r2, [r3, #80]	@ 0x50
                    if (_ux_utility_long_get(scsi_command) == UX_SLAVE_CLASS_STORAGE_CBW_SIGNATURE_MASK)
 801a5ce:	e014      	b.n	801a5fa <_ux_device_class_storage_thread+0x34a>
                }
                else

                    /* Phase error!  */
                    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 801a5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5d2:	2202      	movs	r2, #2
 801a5d4:	651a      	str	r2, [r3, #80]	@ 0x50
 801a5d6:	e011      	b.n	801a5fc <_ux_device_class_storage_thread+0x34c>
            }
            else
            {

                if ((UCHAR)storage -> ux_slave_class_storage_csw_status == UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR)
 801a5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a5dc:	b2db      	uxtb	r3, r3
 801a5de:	2b02      	cmp	r3, #2
 801a5e0:	d107      	bne.n	801a5f2 <_ux_device_class_storage_thread+0x342>
                {

                    /* We should keep the endpoints stalled.  */
                    _ux_device_stack_endpoint_stall(endpoint_out);
 801a5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a5e4:	0018      	movs	r0, r3
 801a5e6:	f002 f8d9 	bl	801c79c <_ux_device_stack_endpoint_stall>
                    _ux_device_stack_endpoint_stall(endpoint_in);
 801a5ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a5ec:	0018      	movs	r0, r3
 801a5ee:	f002 f8d5 	bl	801c79c <_ux_device_stack_endpoint_stall>
                }

                /* We must therefore wait a while.  */
                _ux_utility_delay_ms(2);
 801a5f2:	2002      	movs	r0, #2
 801a5f4:	f7fd fb70 	bl	8017cd8 <_ux_utility_delay_ms>
 801a5f8:	e000      	b.n	801a5fc <_ux_device_class_storage_thread+0x34c>
                    if (_ux_utility_long_get(scsi_command) == UX_SLAVE_CLASS_STORAGE_CBW_SIGNATURE_MASK)
 801a5fa:	46c0      	nop			@ (mov r8, r8)
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 801a5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	2b03      	cmp	r3, #3
 801a602:	d100      	bne.n	801a606 <_ux_device_class_storage_thread+0x356>
 801a604:	e662      	b.n	801a2cc <_ux_device_class_storage_thread+0x1c>
            }
        }

        /* We need to suspend ourselves. We will be resumed by the 
           device enumeration module.  */
        _ux_device_thread_suspend(&class -> ux_slave_class_thread);
 801a606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a608:	3350      	adds	r3, #80	@ 0x50
 801a60a:	0018      	movs	r0, r3
 801a60c:	f7fe f89c 	bl	8018748 <_ux_utility_thread_suspend>
        UX_THREAD_EXTENSION_PTR_GET(class, UX_SLAVE_CLASS, storage_class)
 801a610:	e652      	b.n	801a2b8 <_ux_device_class_storage_thread+0x8>
 801a612:	46c0      	nop			@ (mov r8, r8)
 801a614:	20011854 	.word	0x20011854
 801a618:	43425355 	.word	0x43425355
 801a61c:	0801f26c 	.word	0x0801f26c
 801a620:	00002005 	.word	0x00002005

0801a624 <_ux_device_class_storage_uninitialize>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 801a624:	b580      	push	{r7, lr}
 801a626:	b084      	sub	sp, #16
 801a628:	af00      	add	r7, sp, #0
 801a62a:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_STORAGE                  *storage;
UX_SLAVE_CLASS                          *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	6a1b      	ldr	r3, [r3, #32]
 801a630:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *) class -> ux_slave_class_instance;
 801a632:	68fb      	ldr	r3, [r7, #12]
 801a634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a636:	60bb      	str	r3, [r7, #8]
    
    /* Sanity check.  */
    if (storage != UX_NULL)
 801a638:	68bb      	ldr	r3, [r7, #8]
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d00f      	beq.n	801a65e <_ux_device_class_storage_uninitialize+0x3a>
    {

        /* Remove STORAGE thread.  */
        _ux_device_thread_delete(&class -> ux_slave_class_thread);
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	3350      	adds	r3, #80	@ 0x50
 801a642:	0018      	movs	r0, r3
 801a644:	f7fe f857 	bl	80186f6 <_ux_utility_thread_delete>

#if !(defined(UX_DEVICE_STANDALONE) || defined(UX_STANDALONE))    
        /* Remove the thread used by STORAGE.  */
        _ux_utility_memory_free(class -> ux_slave_class_thread_stack);
 801a648:	68fa      	ldr	r2, [r7, #12]
 801a64a:	2380      	movs	r3, #128	@ 0x80
 801a64c:	005b      	lsls	r3, r3, #1
 801a64e:	58d3      	ldr	r3, [r2, r3]
 801a650:	0018      	movs	r0, r3
 801a652:	f7fd fde5 	bl	8018220 <_ux_utility_memory_free>
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(storage);
 801a656:	68bb      	ldr	r3, [r7, #8]
 801a658:	0018      	movs	r0, r3
 801a65a:	f7fd fde1 	bl	8018220 <_ux_utility_memory_free>
    }
    
    /* Return completion status.  */
    return(UX_SUCCESS);
 801a65e:	2300      	movs	r3, #0
}
 801a660:	0018      	movs	r0, r3
 801a662:	46bd      	mov	sp, r7
 801a664:	b004      	add	sp, #16
 801a666:	bd80      	pop	{r7, pc}

0801a668 <_ux_device_class_storage_verify>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_verify(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                      UX_SLAVE_ENDPOINT *endpoint_in,
                                      UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 801a668:	b580      	push	{r7, lr}
 801a66a:	b084      	sub	sp, #16
 801a66c:	af00      	add	r7, sp, #0
 801a66e:	60f8      	str	r0, [r7, #12]
 801a670:	60b9      	str	r1, [r7, #8]
 801a672:	607a      	str	r2, [r7, #4]
 801a674:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_VERIFY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	2200      	movs	r2, #0
 801a67a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Return success!  */
    return(UX_SUCCESS);
 801a67c:	2300      	movs	r3, #0
}
 801a67e:	0018      	movs	r0, r3
 801a680:	46bd      	mov	sp, r7
 801a682:	b004      	add	sp, #16
 801a684:	bd80      	pop	{r7, pc}
	...

0801a688 <_ux_device_class_storage_write>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_write(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                    UX_SLAVE_ENDPOINT *endpoint_in,
                                    UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb, UCHAR scsi_command)
{
 801a688:	b5b0      	push	{r4, r5, r7, lr}
 801a68a:	b090      	sub	sp, #64	@ 0x40
 801a68c:	af02      	add	r7, sp, #8
 801a68e:	60f8      	str	r0, [r7, #12]
 801a690:	60b9      	str	r1, [r7, #8]
 801a692:	607a      	str	r2, [r7, #4]
 801a694:	603b      	str	r3, [r7, #0]


    UX_PARAMETER_NOT_USED(endpoint_in);

    /* Get the LBA from the CBWCB.  */
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_LBA);
 801a696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a698:	3302      	adds	r3, #2
 801a69a:	0018      	movs	r0, r3
 801a69c:	f7fd fbea 	bl	8017e74 <_ux_utility_long_get_big_endian>
 801a6a0:	0003      	movs	r3, r0
 801a6a2:	633b      	str	r3, [r7, #48]	@ 0x30
    
    /* The type of commands will tell us the width of the field containing the number
       of sectors to read.   */
    if (scsi_command == UX_SLAVE_CLASS_STORAGE_SCSI_WRITE16)
 801a6a4:	234c      	movs	r3, #76	@ 0x4c
 801a6a6:	18fb      	adds	r3, r7, r3
 801a6a8:	781b      	ldrb	r3, [r3, #0]
 801a6aa:	2b2a      	cmp	r3, #42	@ 0x2a
 801a6ac:	d107      	bne.n	801a6be <_ux_device_class_storage_write+0x36>

        /* Get the number of blocks from the CBWCB in 16 bits.  */
        total_number_blocks =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_16);
 801a6ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a6b0:	3307      	adds	r3, #7
 801a6b2:	0018      	movs	r0, r3
 801a6b4:	f7fd ff7f 	bl	80185b6 <_ux_utility_short_get_big_endian>
 801a6b8:	0003      	movs	r3, r0
 801a6ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a6bc:	e006      	b.n	801a6cc <_ux_device_class_storage_write+0x44>

    else        

        /* Get the number of blocks from the CBWCB in 32 bits.  */
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_32);
 801a6be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a6c0:	3306      	adds	r3, #6
 801a6c2:	0018      	movs	r0, r3
 801a6c4:	f7fd fbd6 	bl	8017e74 <_ux_utility_long_get_big_endian>
 801a6c8:	0003      	movs	r3, r0
 801a6ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_WRITE, storage, lun, lba, total_number_blocks, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 801a6cc:	683b      	ldr	r3, [r7, #0]
 801a6ce:	3330      	adds	r3, #48	@ 0x30
 801a6d0:	61fb      	str	r3, [r7, #28]

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 801a6d2:	68f9      	ldr	r1, [r7, #12]
 801a6d4:	68bb      	ldr	r3, [r7, #8]
 801a6d6:	1c5a      	adds	r2, r3, #1
 801a6d8:	0013      	movs	r3, r2
 801a6da:	00db      	lsls	r3, r3, #3
 801a6dc:	1a9b      	subs	r3, r3, r2
 801a6de:	00db      	lsls	r3, r3, #3
 801a6e0:	585c      	ldr	r4, [r3, r1]
 801a6e2:	68f9      	ldr	r1, [r7, #12]
 801a6e4:	68ba      	ldr	r2, [r7, #8]
 801a6e6:	0013      	movs	r3, r2
 801a6e8:	00db      	lsls	r3, r3, #3
 801a6ea:	1a9b      	subs	r3, r3, r2
 801a6ec:	00db      	lsls	r3, r3, #3
 801a6ee:	18cb      	adds	r3, r1, r3
 801a6f0:	331c      	adds	r3, #28
 801a6f2:	681a      	ldr	r2, [r3, #0]
 801a6f4:	2314      	movs	r3, #20
 801a6f6:	18fb      	adds	r3, r7, r3
 801a6f8:	68b9      	ldr	r1, [r7, #8]
 801a6fa:	68f8      	ldr	r0, [r7, #12]
 801a6fc:	47a0      	blx	r4
 801a6fe:	0003      	movs	r3, r0
 801a700:	637b      	str	r3, [r7, #52]	@ 0x34
                            lun, storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);
    
    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 801a702:	6979      	ldr	r1, [r7, #20]
 801a704:	68f8      	ldr	r0, [r7, #12]
 801a706:	68ba      	ldr	r2, [r7, #8]
 801a708:	0013      	movs	r3, r2
 801a70a:	00db      	lsls	r3, r3, #3
 801a70c:	1a9b      	subs	r3, r3, r2
 801a70e:	00db      	lsls	r3, r3, #3
 801a710:	18c3      	adds	r3, r0, r3
 801a712:	3320      	adds	r3, #32
 801a714:	6019      	str	r1, [r3, #0]

    /* Default CSW to failed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 801a716:	68fb      	ldr	r3, [r7, #12]
 801a718:	2201      	movs	r2, #1
 801a71a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 801a71c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d005      	beq.n	801a72e <_ux_device_class_storage_write+0xa6>
    {

        /* We have a problem, media status error. Return a bad completion and wait for the
           REQUEST_SENSE command.  */
#if !defined(UX_DEVICE_STANDALONE)
        _ux_device_stack_endpoint_stall(endpoint_out);
 801a722:	683b      	ldr	r3, [r7, #0]
 801a724:	0018      	movs	r0, r3
 801a726:	f002 f839 	bl	801c79c <_ux_device_stack_endpoint_stall>
#endif

        /* We are done here.  */
        return(UX_ERROR);
 801a72a:	23ff      	movs	r3, #255	@ 0xff
 801a72c:	e0d4      	b.n	801a8d8 <_ux_device_class_storage_write+0x250>
    }

    /* Check Read Only flag.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read_only_flag == UX_TRUE)
 801a72e:	68f9      	ldr	r1, [r7, #12]
 801a730:	68ba      	ldr	r2, [r7, #8]
 801a732:	0013      	movs	r3, r2
 801a734:	00db      	lsls	r3, r3, #3
 801a736:	1a9b      	subs	r3, r3, r2
 801a738:	00db      	lsls	r3, r3, #3
 801a73a:	18cb      	adds	r3, r1, r3
 801a73c:	3318      	adds	r3, #24
 801a73e:	681b      	ldr	r3, [r3, #0]
 801a740:	2b01      	cmp	r3, #1
 801a742:	d10f      	bne.n	801a764 <_ux_device_class_storage_write+0xdc>
    {

        /* Update the request sense.  */
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 801a744:	68f9      	ldr	r1, [r7, #12]
 801a746:	68ba      	ldr	r2, [r7, #8]
 801a748:	0013      	movs	r3, r2
 801a74a:	00db      	lsls	r3, r3, #3
 801a74c:	1a9b      	subs	r3, r3, r2
 801a74e:	00db      	lsls	r3, r3, #3
 801a750:	18cb      	adds	r3, r1, r3
 801a752:	3320      	adds	r3, #32
 801a754:	4a62      	ldr	r2, [pc, #392]	@ (801a8e0 <_ux_device_class_storage_write+0x258>)
 801a756:	601a      	str	r2, [r3, #0]
                                            UX_SLAVE_CLASS_STORAGE_REQUEST_CODE_MEDIA_PROTECTED,0);

        /* We have a problem, cannot write to RO drive. Return a bad completion and wait for the
           REQUEST_SENSE command.  */
#if !defined(UX_DEVICE_STANDALONE)
        _ux_device_stack_endpoint_stall(endpoint_out);
 801a758:	683b      	ldr	r3, [r7, #0]
 801a75a:	0018      	movs	r0, r3
 801a75c:	f002 f81e 	bl	801c79c <_ux_device_stack_endpoint_stall>
#endif

        /* We are done here.  */
        return(UX_ERROR);
 801a760:	23ff      	movs	r3, #255	@ 0xff
 801a762:	e0b9      	b.n	801a8d8 <_ux_device_class_storage_write+0x250>
    }

    /* Compute the total length to transfer and how much remains.  */
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 801a764:	68f9      	ldr	r1, [r7, #12]
 801a766:	68ba      	ldr	r2, [r7, #8]
 801a768:	0013      	movs	r3, r2
 801a76a:	00db      	lsls	r3, r3, #3
 801a76c:	1a9b      	subs	r3, r3, r2
 801a76e:	00db      	lsls	r3, r3, #3
 801a770:	18cb      	adds	r3, r1, r3
 801a772:	330c      	adds	r3, #12
 801a774:	681a      	ldr	r2, [r3, #0]
 801a776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a778:	4353      	muls	r3, r2
 801a77a:	62bb      	str	r3, [r7, #40]	@ 0x28
#else

    /* Check transfer length.  */

    /* Case (3) Hn < Do.  */
    if (total_length > storage -> ux_slave_class_storage_host_length)
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a780:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a782:	429a      	cmp	r2, r3
 801a784:	d908      	bls.n	801a798 <_ux_device_class_storage_write+0x110>
    {
        _ux_device_stack_endpoint_stall(endpoint_out);
 801a786:	683b      	ldr	r3, [r7, #0]
 801a788:	0018      	movs	r0, r3
 801a78a:	f002 f807 	bl	801c79c <_ux_device_stack_endpoint_stall>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	2202      	movs	r2, #2
 801a792:	651a      	str	r2, [r3, #80]	@ 0x50
        return(UX_ERROR);
 801a794:	23ff      	movs	r3, #255	@ 0xff
 801a796:	e09f      	b.n	801a8d8 <_ux_device_class_storage_write+0x250>
    }

    /* Case (8). Hi <> Do.  */
    if ((storage -> ux_slave_class_storage_cbw_flags & 0x80) != 0)
 801a798:	68fb      	ldr	r3, [r7, #12]
 801a79a:	2244      	movs	r2, #68	@ 0x44
 801a79c:	5c9b      	ldrb	r3, [r3, r2]
 801a79e:	b25b      	sxtb	r3, r3
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	da08      	bge.n	801a7b6 <_ux_device_class_storage_write+0x12e>
    {
        _ux_device_stack_endpoint_stall(endpoint_in);
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	0018      	movs	r0, r3
 801a7a8:	f001 fff8 	bl	801c79c <_ux_device_stack_endpoint_stall>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	2202      	movs	r2, #2
 801a7b0:	651a      	str	r2, [r3, #80]	@ 0x50
        return(UX_ERROR);
 801a7b2:	23ff      	movs	r3, #255	@ 0xff
 801a7b4:	e090      	b.n	801a8d8 <_ux_device_class_storage_write+0x250>
    }

    /* Default status to success.  */
    status =  UX_SUCCESS;
 801a7b6:	2300      	movs	r3, #0
 801a7b8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* It may take several transfers to send the requested data.  */
    done_length = 0;
 801a7ba:	2300      	movs	r3, #0
 801a7bc:	623b      	str	r3, [r7, #32]
    while (total_length)
 801a7be:	e076      	b.n	801a8ae <_ux_device_class_storage_write+0x226>
    {

        /* How much can we receive in this transfer?  */
        if (total_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 801a7c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a7c2:	2380      	movs	r3, #128	@ 0x80
 801a7c4:	011b      	lsls	r3, r3, #4
 801a7c6:	429a      	cmp	r2, r3
 801a7c8:	d903      	bls.n	801a7d2 <_ux_device_class_storage_write+0x14a>
            transfer_length =  UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE;
 801a7ca:	2380      	movs	r3, #128	@ 0x80
 801a7cc:	011b      	lsls	r3, r3, #4
 801a7ce:	627b      	str	r3, [r7, #36]	@ 0x24
 801a7d0:	e001      	b.n	801a7d6 <_ux_device_class_storage_write+0x14e>
        else
            transfer_length =  total_length;
 801a7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7d4:	627b      	str	r3, [r7, #36]	@ 0x24
        
        /* Get the data payload from the host.  */
        status =  _ux_device_stack_transfer_request(transfer_request, transfer_length, transfer_length);
 801a7d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a7d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a7da:	69fb      	ldr	r3, [r7, #28]
 801a7dc:	0018      	movs	r0, r3
 801a7de:	f002 fcc9 	bl	801d174 <_ux_device_stack_transfer_request>
 801a7e2:	0003      	movs	r3, r0
 801a7e4:	637b      	str	r3, [r7, #52]	@ 0x34
        
        /* Check the status.  */
        if (status != UX_SUCCESS)
 801a7e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d015      	beq.n	801a818 <_ux_device_class_storage_write+0x190>
        {

            /* We have a problem, request error. Return a bad completion and wait for the
               REQUEST_SENSE command.  */
            _ux_device_stack_endpoint_stall(endpoint_out);
 801a7ec:	683b      	ldr	r3, [r7, #0]
 801a7ee:	0018      	movs	r0, r3
 801a7f0:	f001 ffd4 	bl	801c79c <_ux_device_stack_endpoint_stall>

            /* Update residue.  */
            storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length - done_length;
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a7f8:	6a3b      	ldr	r3, [r7, #32]
 801a7fa:	1ad2      	subs	r2, r2, r3
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* And update the REQUEST_SENSE codes.  */
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 801a800:	68f9      	ldr	r1, [r7, #12]
 801a802:	68ba      	ldr	r2, [r7, #8]
 801a804:	0013      	movs	r3, r2
 801a806:	00db      	lsls	r3, r3, #3
 801a808:	1a9b      	subs	r3, r3, r2
 801a80a:	00db      	lsls	r3, r3, #3
 801a80c:	18cb      	adds	r3, r1, r3
 801a80e:	3320      	adds	r3, #32
 801a810:	4a34      	ldr	r2, [pc, #208]	@ (801a8e4 <_ux_device_class_storage_write+0x25c>)
 801a812:	601a      	str	r2, [r3, #0]
                                                UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x02,0x54,0x00);
    
            /* Return an error.  */
            return(UX_ERROR);
 801a814:	23ff      	movs	r3, #255	@ 0xff
 801a816:	e05f      	b.n	801a8d8 <_ux_device_class_storage_write+0x250>
        }

        /* Compute the number of blocks to transfer.  */
        number_blocks = transfer_length / storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 801a818:	68f9      	ldr	r1, [r7, #12]
 801a81a:	68ba      	ldr	r2, [r7, #8]
 801a81c:	0013      	movs	r3, r2
 801a81e:	00db      	lsls	r3, r3, #3
 801a820:	1a9b      	subs	r3, r3, r2
 801a822:	00db      	lsls	r3, r3, #3
 801a824:	18cb      	adds	r3, r1, r3
 801a826:	330c      	adds	r3, #12
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	0019      	movs	r1, r3
 801a82c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a82e:	f7eb fe09 	bl	8006444 <__udivsi3>
 801a832:	0003      	movs	r3, r0
 801a834:	61bb      	str	r3, [r7, #24]
        
        /* Execute the write command to the local media.  */
        status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_write(storage, lun, transfer_request -> ux_slave_transfer_request_data_pointer, number_blocks, lba, &media_status);
 801a836:	68f9      	ldr	r1, [r7, #12]
 801a838:	68ba      	ldr	r2, [r7, #8]
 801a83a:	0013      	movs	r3, r2
 801a83c:	00db      	lsls	r3, r3, #3
 801a83e:	1a9b      	subs	r3, r3, r2
 801a840:	00db      	lsls	r3, r3, #3
 801a842:	18cb      	adds	r3, r1, r3
 801a844:	3330      	adds	r3, #48	@ 0x30
 801a846:	681c      	ldr	r4, [r3, #0]
 801a848:	69fb      	ldr	r3, [r7, #28]
 801a84a:	68da      	ldr	r2, [r3, #12]
 801a84c:	69bd      	ldr	r5, [r7, #24]
 801a84e:	68b9      	ldr	r1, [r7, #8]
 801a850:	68f8      	ldr	r0, [r7, #12]
 801a852:	2314      	movs	r3, #20
 801a854:	18fb      	adds	r3, r7, r3
 801a856:	9301      	str	r3, [sp, #4]
 801a858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a85a:	9300      	str	r3, [sp, #0]
 801a85c:	002b      	movs	r3, r5
 801a85e:	47a0      	blx	r4
 801a860:	0003      	movs	r3, r0
 801a862:	637b      	str	r3, [r7, #52]	@ 0x34
    
        /* If there is a problem, return a failed command.  */
        if (status != UX_SUCCESS)
 801a864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a866:	2b00      	cmp	r3, #0
 801a868:	d015      	beq.n	801a896 <_ux_device_class_storage_write+0x20e>
        {
    
            /* We have a problem, request error. Return a bad completion and wait for the
               REQUEST_SENSE command.  */
            _ux_device_stack_endpoint_stall(endpoint_out);
 801a86a:	683b      	ldr	r3, [r7, #0]
 801a86c:	0018      	movs	r0, r3
 801a86e:	f001 ff95 	bl	801c79c <_ux_device_stack_endpoint_stall>
    
            /* Update residue.  */
            storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length - done_length;
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a876:	6a3b      	ldr	r3, [r7, #32]
 801a878:	1ad2      	subs	r2, r2, r3
 801a87a:	68fb      	ldr	r3, [r7, #12]
 801a87c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* And update the REQUEST_SENSE codes.  */
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 801a87e:	6979      	ldr	r1, [r7, #20]
 801a880:	68f8      	ldr	r0, [r7, #12]
 801a882:	68ba      	ldr	r2, [r7, #8]
 801a884:	0013      	movs	r3, r2
 801a886:	00db      	lsls	r3, r3, #3
 801a888:	1a9b      	subs	r3, r3, r2
 801a88a:	00db      	lsls	r3, r3, #3
 801a88c:	18c3      	adds	r3, r0, r3
 801a88e:	3320      	adds	r3, #32
 801a890:	6019      	str	r1, [r3, #0]
    
            /* Return an error.  */
            return(UX_ERROR);
 801a892:	23ff      	movs	r3, #255	@ 0xff
 801a894:	e020      	b.n	801a8d8 <_ux_device_class_storage_write+0x250>
        }

        /* Update the lba.  */
        lba += number_blocks;
 801a896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a898:	69bb      	ldr	r3, [r7, #24]
 801a89a:	18d3      	adds	r3, r2, r3
 801a89c:	633b      	str	r3, [r7, #48]	@ 0x30
        
        /* Update the length to remain.  */
        total_length -= transfer_length;
 801a89e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8a2:	1ad3      	subs	r3, r2, r3
 801a8a4:	62bb      	str	r3, [r7, #40]	@ 0x28
        done_length += transfer_length;
 801a8a6:	6a3a      	ldr	r2, [r7, #32]
 801a8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8aa:	18d3      	adds	r3, r2, r3
 801a8ac:	623b      	str	r3, [r7, #32]
    while (total_length)
 801a8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	d185      	bne.n	801a7c0 <_ux_device_class_storage_write+0x138>
    }

    /* Update residue.  */
    storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length - done_length;
 801a8b4:	68fb      	ldr	r3, [r7, #12]
 801a8b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a8b8:	6a3b      	ldr	r3, [r7, #32]
 801a8ba:	1ad2      	subs	r2, r2, r3
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Case (9), (11). If host expects more transfer, stall it.  */
    if (storage -> ux_slave_class_storage_csw_residue)
 801a8c0:	68fb      	ldr	r3, [r7, #12]
 801a8c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d003      	beq.n	801a8d0 <_ux_device_class_storage_write+0x248>
        _ux_device_stack_endpoint_stall(endpoint_out);
 801a8c8:	683b      	ldr	r3, [r7, #0]
 801a8ca:	0018      	movs	r0, r3
 801a8cc:	f001 ff66 	bl	801c79c <_ux_device_stack_endpoint_stall>

#endif /* else defined(UX_DEVICE_STANDALONE) */

    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 801a8d0:	68fb      	ldr	r3, [r7, #12]
 801a8d2:	2200      	movs	r2, #0
 801a8d4:	651a      	str	r2, [r3, #80]	@ 0x50
                                    
    /* Return completion status.  */
    return(status);
 801a8d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801a8d8:	0018      	movs	r0, r3
 801a8da:	46bd      	mov	sp, r7
 801a8dc:	b00e      	add	sp, #56	@ 0x38
 801a8de:	bdb0      	pop	{r4, r5, r7, pc}
 801a8e0:	00002707 	.word	0x00002707
 801a8e4:	00005402 	.word	0x00005402

0801a8e8 <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 801a8e8:	b580      	push	{r7, lr}
 801a8ea:	b082      	sub	sp, #8
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	6078      	str	r0, [r7, #4]
 801a8f0:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	2280      	movs	r2, #128	@ 0x80
 801a8f6:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	2201      	movs	r2, #1
 801a8fc:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 801a8fe:	683b      	ldr	r3, [r7, #0]
 801a900:	0018      	movs	r0, r3
 801a902:	f001 fb53 	bl	801bfac <_ux_device_stack_control_request_process>
}
 801a906:	46c0      	nop			@ (mov r8, r8)
 801a908:	46bd      	mov	sp, r7
 801a90a:	b002      	add	sp, #8
 801a90c:	bd80      	pop	{r7, pc}

0801a90e <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 801a90e:	b580      	push	{r7, lr}
 801a910:	b084      	sub	sp, #16
 801a912:	af00      	add	r7, sp, #0
 801a914:	60f8      	str	r0, [r7, #12]
 801a916:	60b9      	str	r1, [r7, #8]
 801a918:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801a91a:	68bb      	ldr	r3, [r7, #8]
 801a91c:	2200      	movs	r2, #0
 801a91e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 801a920:	68fb      	ldr	r3, [r7, #12]
 801a922:	2280      	movs	r2, #128	@ 0x80
 801a924:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 801a926:	68bb      	ldr	r3, [r7, #8]
 801a928:	0018      	movs	r0, r3
 801a92a:	f001 fb3f 	bl	801bfac <_ux_device_stack_control_request_process>
 801a92e:	1e03      	subs	r3, r0, #0
 801a930:	d108      	bne.n	801a944 <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 801a932:	68fb      	ldr	r3, [r7, #12]
 801a934:	2203      	movs	r2, #3
 801a936:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 801a938:	6878      	ldr	r0, [r7, #4]
 801a93a:	2300      	movs	r3, #0
 801a93c:	2200      	movs	r2, #0
 801a93e:	2100      	movs	r1, #0
 801a940:	f7ef f9ff 	bl	8009d42 <HAL_PCD_EP_Transmit>
    }
}
 801a944:	46c0      	nop			@ (mov r8, r8)
 801a946:	46bd      	mov	sp, r7
 801a948:	b004      	add	sp, #16
 801a94a:	bd80      	pop	{r7, pc}

0801a94c <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 801a94c:	b580      	push	{r7, lr}
 801a94e:	b084      	sub	sp, #16
 801a950:	af00      	add	r7, sp, #0
 801a952:	60f8      	str	r0, [r7, #12]
 801a954:	60b9      	str	r1, [r7, #8]
 801a956:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	2280      	movs	r2, #128	@ 0x80
 801a95c:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 801a95e:	68bb      	ldr	r3, [r7, #8]
 801a960:	0018      	movs	r0, r3
 801a962:	f001 fb23 	bl	801bfac <_ux_device_stack_control_request_process>
 801a966:	1e03      	subs	r3, r0, #0
 801a968:	d108      	bne.n	801a97c <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	2204      	movs	r2, #4
 801a96e:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 801a970:	6878      	ldr	r0, [r7, #4]
 801a972:	2300      	movs	r3, #0
 801a974:	2200      	movs	r2, #0
 801a976:	2100      	movs	r1, #0
 801a978:	f7ef f9e3 	bl	8009d42 <HAL_PCD_EP_Transmit>
    }
}
 801a97c:	46c0      	nop			@ (mov r8, r8)
 801a97e:	46bd      	mov	sp, r7
 801a980:	b004      	add	sp, #16
 801a982:	bd80      	pop	{r7, pc}

0801a984 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 801a984:	b580      	push	{r7, lr}
 801a986:	b088      	sub	sp, #32
 801a988:	af00      	add	r7, sp, #0
 801a98a:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801a98c:	4b3e      	ldr	r3, [pc, #248]	@ (801aa88 <HAL_PCD_SetupStageCallback+0x104>)
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801a992:	69fb      	ldr	r3, [r7, #28]
 801a994:	69db      	ldr	r3, [r3, #28]
 801a996:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 801a998:	69bb      	ldr	r3, [r7, #24]
 801a99a:	3304      	adds	r3, #4
 801a99c:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 801a99e:	697b      	ldr	r3, [r7, #20]
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	3330      	adds	r3, #48	@ 0x30
 801a9a4:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 801a9a6:	693b      	ldr	r3, [r7, #16]
 801a9a8:	3354      	adds	r3, #84	@ 0x54
 801a9aa:	0018      	movs	r0, r3
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	22a7      	movs	r2, #167	@ 0xa7
 801a9b0:	0092      	lsls	r2, r2, #2
 801a9b2:	4694      	mov	ip, r2
 801a9b4:	4463      	add	r3, ip
 801a9b6:	2208      	movs	r2, #8
 801a9b8:	0019      	movs	r1, r3
 801a9ba:	f7fd fc15 	bl	80181e8 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 801a9be:	693b      	ldr	r3, [r7, #16]
 801a9c0:	2200      	movs	r2, #0
 801a9c2:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 801a9c4:	693b      	ldr	r3, [r7, #16]
 801a9c6:	2201      	movs	r2, #1
 801a9c8:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801a9ca:	693b      	ldr	r3, [r7, #16]
 801a9cc:	2200      	movs	r2, #0
 801a9ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 801a9d0:	697b      	ldr	r3, [r7, #20]
 801a9d2:	685b      	ldr	r3, [r3, #4]
 801a9d4:	220e      	movs	r2, #14
 801a9d6:	4393      	bics	r3, r2
 801a9d8:	001a      	movs	r2, r3
 801a9da:	697b      	ldr	r3, [r7, #20]
 801a9dc:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 801a9de:	693b      	ldr	r3, [r7, #16]
 801a9e0:	2254      	movs	r2, #84	@ 0x54
 801a9e2:	5c9b      	ldrb	r3, [r3, r2]
 801a9e4:	b25b      	sxtb	r3, r3
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	da06      	bge.n	801a9f8 <HAL_PCD_SetupStageCallback+0x74>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 801a9ea:	693a      	ldr	r2, [r7, #16]
 801a9ec:	697b      	ldr	r3, [r7, #20]
 801a9ee:	0011      	movs	r1, r2
 801a9f0:	0018      	movs	r0, r3
 801a9f2:	f7ff ff79 	bl	801a8e8 <_ux_dcd_stm32_setup_in>
 801a9f6:	e043      	b.n	801aa80 <HAL_PCD_SetupStageCallback+0xfc>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 801a9f8:	697b      	ldr	r3, [r7, #20]
 801a9fa:	2200      	movs	r2, #0
 801a9fc:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 801a9fe:	693b      	ldr	r3, [r7, #16]
 801aa00:	225a      	movs	r2, #90	@ 0x5a
 801aa02:	5c9b      	ldrb	r3, [r3, r2]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d10b      	bne.n	801aa20 <HAL_PCD_SetupStageCallback+0x9c>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 801aa08:	693b      	ldr	r3, [r7, #16]
 801aa0a:	225b      	movs	r2, #91	@ 0x5b
 801aa0c:	5c9b      	ldrb	r3, [r3, r2]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d106      	bne.n	801aa20 <HAL_PCD_SetupStageCallback+0x9c>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 801aa12:	687a      	ldr	r2, [r7, #4]
 801aa14:	6939      	ldr	r1, [r7, #16]
 801aa16:	697b      	ldr	r3, [r7, #20]
 801aa18:	0018      	movs	r0, r3
 801aa1a:	f7ff ff97 	bl	801a94c <_ux_dcd_stm32_setup_status>
 801aa1e:	e02f      	b.n	801aa80 <HAL_PCD_SetupStageCallback+0xfc>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801aa20:	693b      	ldr	r3, [r7, #16]
 801aa22:	689b      	ldr	r3, [r3, #8]
 801aa24:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 801aa26:	693b      	ldr	r3, [r7, #16]
 801aa28:	3354      	adds	r3, #84	@ 0x54
 801aa2a:	3306      	adds	r3, #6
 801aa2c:	0018      	movs	r0, r3
 801aa2e:	f7fd fda8 	bl	8018582 <_ux_utility_short_get>
 801aa32:	0002      	movs	r2, r0
 801aa34:	693b      	ldr	r3, [r7, #16]
 801aa36:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 801aa38:	693b      	ldr	r3, [r7, #16]
 801aa3a:	695a      	ldr	r2, [r3, #20]
 801aa3c:	2380      	movs	r3, #128	@ 0x80
 801aa3e:	005b      	lsls	r3, r3, #1
 801aa40:	429a      	cmp	r2, r3
 801aa42:	d909      	bls.n	801aa58 <HAL_PCD_SetupStageCallback+0xd4>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 801aa44:	68fa      	ldr	r2, [r7, #12]
 801aa46:	69bb      	ldr	r3, [r7, #24]
 801aa48:	0011      	movs	r1, r2
 801aa4a:	0018      	movs	r0, r3
 801aa4c:	f000 fa32 	bl	801aeb4 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 801aa50:	697b      	ldr	r3, [r7, #20]
 801aa52:	2200      	movs	r2, #0
 801aa54:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 801aa56:	e013      	b.n	801aa80 <HAL_PCD_SetupStageCallback+0xfc>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 801aa58:	693b      	ldr	r3, [r7, #16]
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 801aa5e:	693b      	ldr	r3, [r7, #16]
 801aa60:	68da      	ldr	r2, [r3, #12]
 801aa62:	693b      	ldr	r3, [r7, #16]
 801aa64:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 801aa66:	68fb      	ldr	r3, [r7, #12]
 801aa68:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Receive(hpcd,
 801aa6a:	b2d9      	uxtb	r1, r3
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 801aa6c:	693b      	ldr	r3, [r7, #16]
 801aa6e:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 801aa70:	693b      	ldr	r3, [r7, #16]
 801aa72:	695b      	ldr	r3, [r3, #20]
 801aa74:	6878      	ldr	r0, [r7, #4]
 801aa76:	f7ef f913 	bl	8009ca0 <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 801aa7a:	697b      	ldr	r3, [r7, #20]
 801aa7c:	2202      	movs	r2, #2
 801aa7e:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 801aa80:	46bd      	mov	sp, r7
 801aa82:	b008      	add	sp, #32
 801aa84:	bd80      	pop	{r7, pc}
 801aa86:	46c0      	nop			@ (mov r8, r8)
 801aa88:	20011854 	.word	0x20011854

0801aa8c <HAL_PCD_DataInStageCallback>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 801aa8c:	b580      	push	{r7, lr}
 801aa8e:	b088      	sub	sp, #32
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	6078      	str	r0, [r7, #4]
 801aa94:	000a      	movs	r2, r1
 801aa96:	1cfb      	adds	r3, r7, #3
 801aa98:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801aa9a:	4b46      	ldr	r3, [pc, #280]	@ (801abb4 <HAL_PCD_DataInStageCallback+0x128>)
 801aa9c:	681b      	ldr	r3, [r3, #0]
 801aa9e:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801aaa0:	69bb      	ldr	r3, [r7, #24]
 801aaa2:	69db      	ldr	r3, [r3, #28]
 801aaa4:	617b      	str	r3, [r7, #20]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 801aaa6:	1cfb      	adds	r3, r7, #3
 801aaa8:	781b      	ldrb	r3, [r3, #0]
 801aaaa:	220f      	movs	r2, #15
 801aaac:	401a      	ands	r2, r3
 801aaae:	0013      	movs	r3, r2
 801aab0:	005b      	lsls	r3, r3, #1
 801aab2:	189b      	adds	r3, r3, r2
 801aab4:	009b      	lsls	r3, r3, #2
 801aab6:	697a      	ldr	r2, [r7, #20]
 801aab8:	18d3      	adds	r3, r2, r3
 801aaba:	3304      	adds	r3, #4
 801aabc:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 801aabe:	693b      	ldr	r3, [r7, #16]
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	3330      	adds	r3, #48	@ 0x30
 801aac4:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 801aac6:	1cfb      	adds	r3, r7, #3
 801aac8:	781b      	ldrb	r3, [r3, #0]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d15e      	bne.n	801ab8c <HAL_PCD_DataInStageCallback+0x100>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	689b      	ldr	r3, [r3, #8]
 801aad2:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 801aad4:	693b      	ldr	r3, [r7, #16]
 801aad6:	7a1b      	ldrb	r3, [r3, #8]
 801aad8:	2b01      	cmp	r3, #1
 801aada:	d166      	bne.n	801abaa <HAL_PCD_DataInStageCallback+0x11e>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 801aadc:	6878      	ldr	r0, [r7, #4]
 801aade:	2300      	movs	r3, #0
 801aae0:	2200      	movs	r2, #0
 801aae2:	2100      	movs	r1, #0
 801aae4:	f7ef f8dc 	bl	8009ca0 <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	69da      	ldr	r2, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 801aaec:	68bb      	ldr	r3, [r7, #8]
 801aaee:	69db      	ldr	r3, [r3, #28]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 801aaf0:	429a      	cmp	r2, r3
 801aaf2:	d826      	bhi.n	801ab42 <HAL_PCD_DataInStageCallback+0xb6>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aaf8:	2b01      	cmp	r3, #1
 801aafa:	d10b      	bne.n	801ab14 <HAL_PCD_DataInStageCallback+0x88>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);
 801aafc:	68bb      	ldr	r3, [r7, #8]
 801aafe:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Transmit(hpcd,
 801ab00:	b2d9      	uxtb	r1, r3
 801ab02:	6878      	ldr	r0, [r7, #4]
 801ab04:	2300      	movs	r3, #0
 801ab06:	2200      	movs	r2, #0
 801ab08:	f7ef f91b 	bl	8009d42 <HAL_PCD_EP_Transmit>

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 801ab0c:	68fb      	ldr	r3, [r7, #12]
 801ab0e:	2200      	movs	r2, #0
 801ab10:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
    }
}
 801ab12:	e04a      	b.n	801abaa <HAL_PCD_DataInStageCallback+0x11e>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	2200      	movs	r2, #0
 801ab18:	625a      	str	r2, [r3, #36]	@ 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	2202      	movs	r2, #2
 801ab1e:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 801ab24:	68fb      	ldr	r3, [r7, #12]
 801ab26:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d004      	beq.n	801ab3a <HAL_PCD_DataInStageCallback+0xae>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab34:	68fa      	ldr	r2, [r7, #12]
 801ab36:	0010      	movs	r0, r2
 801ab38:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 801ab3a:	693b      	ldr	r3, [r7, #16]
 801ab3c:	2204      	movs	r2, #4
 801ab3e:	721a      	strb	r2, [r3, #8]
}
 801ab40:	e033      	b.n	801abaa <HAL_PCD_DataInStageCallback+0x11e>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	69da      	ldr	r2, [r3, #28]
 801ab46:	68bb      	ldr	r3, [r7, #8]
 801ab48:	69db      	ldr	r3, [r3, #28]
 801ab4a:	1ad3      	subs	r3, r2, r3
 801ab4c:	61fb      	str	r3, [r7, #28]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 801ab4e:	68bb      	ldr	r3, [r7, #8]
 801ab50:	69db      	ldr	r3, [r3, #28]
 801ab52:	69fa      	ldr	r2, [r7, #28]
 801ab54:	429a      	cmp	r2, r3
 801ab56:	d902      	bls.n	801ab5e <HAL_PCD_DataInStageCallback+0xd2>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 801ab58:	68bb      	ldr	r3, [r7, #8]
 801ab5a:	69db      	ldr	r3, [r3, #28]
 801ab5c:	61fb      	str	r3, [r7, #28]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	691a      	ldr	r2, [r3, #16]
 801ab62:	68bb      	ldr	r3, [r7, #8]
 801ab64:	69db      	ldr	r3, [r3, #28]
 801ab66:	18d2      	adds	r2, r2, r3
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	69da      	ldr	r2, [r3, #28]
 801ab70:	69fb      	ldr	r3, [r7, #28]
 801ab72:	1ad2      	subs	r2, r2, r3
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	61da      	str	r2, [r3, #28]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 801ab78:	68bb      	ldr	r3, [r7, #8]
 801ab7a:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Transmit(hpcd,
 801ab7c:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 801ab7e:	68fb      	ldr	r3, [r7, #12]
 801ab80:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 801ab82:	69fb      	ldr	r3, [r7, #28]
 801ab84:	6878      	ldr	r0, [r7, #4]
 801ab86:	f7ef f8dc 	bl	8009d42 <HAL_PCD_EP_Transmit>
}
 801ab8a:	e00e      	b.n	801abaa <HAL_PCD_DataInStageCallback+0x11e>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	2200      	movs	r2, #0
 801ab90:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801ab92:	68fb      	ldr	r3, [r7, #12]
 801ab94:	2202      	movs	r2, #2
 801ab96:	601a      	str	r2, [r3, #0]
            transfer_request -> ux_slave_transfer_request_requested_length;
 801ab98:	68fb      	ldr	r3, [r7, #12]
 801ab9a:	695a      	ldr	r2, [r3, #20]
        transfer_request -> ux_slave_transfer_request_actual_length =
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	3330      	adds	r3, #48	@ 0x30
 801aba4:	0018      	movs	r0, r3
 801aba6:	f7fd fcdd 	bl	8018564 <_ux_utility_semaphore_put>
}
 801abaa:	46c0      	nop			@ (mov r8, r8)
 801abac:	46bd      	mov	sp, r7
 801abae:	b008      	add	sp, #32
 801abb0:	bd80      	pop	{r7, pc}
 801abb2:	46c0      	nop			@ (mov r8, r8)
 801abb4:	20011854 	.word	0x20011854

0801abb8 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 801abb8:	b580      	push	{r7, lr}
 801abba:	b088      	sub	sp, #32
 801abbc:	af00      	add	r7, sp, #0
 801abbe:	6078      	str	r0, [r7, #4]
 801abc0:	000a      	movs	r2, r1
 801abc2:	1cfb      	adds	r3, r7, #3
 801abc4:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 801abc6:	4b40      	ldr	r3, [pc, #256]	@ (801acc8 <HAL_PCD_DataOutStageCallback+0x110>)
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801abcc:	69fb      	ldr	r3, [r7, #28]
 801abce:	69db      	ldr	r3, [r3, #28]
 801abd0:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 801abd2:	1cfb      	adds	r3, r7, #3
 801abd4:	781b      	ldrb	r3, [r3, #0]
 801abd6:	220f      	movs	r2, #15
 801abd8:	401a      	ands	r2, r3
 801abda:	0013      	movs	r3, r2
 801abdc:	005b      	lsls	r3, r3, #1
 801abde:	189b      	adds	r3, r3, r2
 801abe0:	009b      	lsls	r3, r3, #2
 801abe2:	69ba      	ldr	r2, [r7, #24]
 801abe4:	18d3      	adds	r3, r2, r3
 801abe6:	3304      	adds	r3, #4
 801abe8:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 801abea:	697b      	ldr	r3, [r7, #20]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	3330      	adds	r3, #48	@ 0x30
 801abf0:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 801abf2:	1cfb      	adds	r3, r7, #3
 801abf4:	781b      	ldrb	r3, [r3, #0]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d14c      	bne.n	801ac94 <HAL_PCD_DataOutStageCallback+0xdc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 801abfa:	697b      	ldr	r3, [r7, #20]
 801abfc:	7a1b      	ldrb	r3, [r3, #8]
 801abfe:	2b02      	cmp	r3, #2
 801ac00:	d15d      	bne.n	801acbe <HAL_PCD_DataOutStageCallback+0x106>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 801ac02:	693b      	ldr	r3, [r7, #16]
 801ac04:	689b      	ldr	r3, [r3, #8]
 801ac06:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 801ac08:	1cfb      	adds	r3, r7, #3
 801ac0a:	781a      	ldrb	r2, [r3, #0]
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	0011      	movs	r1, r2
 801ac10:	0018      	movs	r0, r3
 801ac12:	f7ef f87d 	bl	8009d10 <HAL_PCD_EP_GetRxCount>
 801ac16:	0003      	movs	r3, r0
 801ac18:	60bb      	str	r3, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 801ac1a:	693b      	ldr	r3, [r7, #16]
 801ac1c:	699a      	ldr	r2, [r3, #24]
 801ac1e:	68bb      	ldr	r3, [r7, #8]
 801ac20:	18d2      	adds	r2, r2, r3
 801ac22:	693b      	ldr	r3, [r7, #16]
 801ac24:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 801ac26:	693b      	ldr	r3, [r7, #16]
 801ac28:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 801ac2a:	693b      	ldr	r3, [r7, #16]
 801ac2c:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 801ac2e:	429a      	cmp	r2, r3
 801ac30:	d823      	bhi.n	801ac7a <HAL_PCD_DataOutStageCallback+0xc2>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 801ac32:	693b      	ldr	r3, [r7, #16]
 801ac34:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 801ac36:	693b      	ldr	r3, [r7, #16]
 801ac38:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 801ac3a:	429a      	cmp	r2, r3
 801ac3c:	d004      	beq.n	801ac48 <HAL_PCD_DataOutStageCallback+0x90>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 801ac3e:	68fb      	ldr	r3, [r7, #12]
 801ac40:	69db      	ldr	r3, [r3, #28]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 801ac42:	68ba      	ldr	r2, [r7, #8]
 801ac44:	429a      	cmp	r2, r3
 801ac46:	d006      	beq.n	801ac56 <HAL_PCD_DataOutStageCallback+0x9e>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 801ac48:	687a      	ldr	r2, [r7, #4]
 801ac4a:	6939      	ldr	r1, [r7, #16]
 801ac4c:	697b      	ldr	r3, [r7, #20]
 801ac4e:	0018      	movs	r0, r3
 801ac50:	f7ff fe5d 	bl	801a90e <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 801ac54:	e033      	b.n	801acbe <HAL_PCD_DataOutStageCallback+0x106>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 801ac56:	693b      	ldr	r3, [r7, #16]
 801ac58:	691a      	ldr	r2, [r3, #16]
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	69db      	ldr	r3, [r3, #28]
 801ac5e:	18d2      	adds	r2, r2, r3
 801ac60:	693b      	ldr	r3, [r7, #16]
 801ac62:	611a      	str	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Receive(hpcd,
 801ac68:	b2d9      	uxtb	r1, r3
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 801ac6a:	693b      	ldr	r3, [r7, #16]
 801ac6c:	691a      	ldr	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 801ac6e:	68fb      	ldr	r3, [r7, #12]
 801ac70:	69db      	ldr	r3, [r3, #28]
 801ac72:	6878      	ldr	r0, [r7, #4]
 801ac74:	f7ef f814 	bl	8009ca0 <HAL_PCD_EP_Receive>
}
 801ac78:	e021      	b.n	801acbe <HAL_PCD_DataOutStageCallback+0x106>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 801ac7a:	693b      	ldr	r3, [r7, #16]
 801ac7c:	2227      	movs	r2, #39	@ 0x27
 801ac7e:	625a      	str	r2, [r3, #36]	@ 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 801ac80:	693b      	ldr	r3, [r7, #16]
 801ac82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d01a      	beq.n	801acbe <HAL_PCD_DataOutStageCallback+0x106>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 801ac88:	693b      	ldr	r3, [r7, #16]
 801ac8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ac8c:	693a      	ldr	r2, [r7, #16]
 801ac8e:	0010      	movs	r0, r2
 801ac90:	4798      	blx	r3
}
 801ac92:	e014      	b.n	801acbe <HAL_PCD_DataOutStageCallback+0x106>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 801ac94:	1cfb      	adds	r3, r7, #3
 801ac96:	781a      	ldrb	r2, [r3, #0]
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	0011      	movs	r1, r2
 801ac9c:	0018      	movs	r0, r3
 801ac9e:	f7ef f837 	bl	8009d10 <HAL_PCD_EP_GetRxCount>
 801aca2:	0002      	movs	r2, r0
 801aca4:	693b      	ldr	r3, [r7, #16]
 801aca6:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801aca8:	693b      	ldr	r3, [r7, #16]
 801acaa:	2200      	movs	r2, #0
 801acac:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801acae:	693b      	ldr	r3, [r7, #16]
 801acb0:	2202      	movs	r2, #2
 801acb2:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 801acb4:	693b      	ldr	r3, [r7, #16]
 801acb6:	3330      	adds	r3, #48	@ 0x30
 801acb8:	0018      	movs	r0, r3
 801acba:	f7fd fc53 	bl	8018564 <_ux_utility_semaphore_put>
}
 801acbe:	46c0      	nop			@ (mov r8, r8)
 801acc0:	46bd      	mov	sp, r7
 801acc2:	b008      	add	sp, #32
 801acc4:	bd80      	pop	{r7, pc}
 801acc6:	46c0      	nop			@ (mov r8, r8)
 801acc8:	20011854 	.word	0x20011854

0801accc <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 801accc:	b580      	push	{r7, lr}
 801acce:	b082      	sub	sp, #8
 801acd0:	af00      	add	r7, sp, #0
 801acd2:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 801acd4:	4b11      	ldr	r3, [pc, #68]	@ (801ad1c <HAL_PCD_ResetCallback+0x50>)
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	6a1b      	ldr	r3, [r3, #32]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d001      	beq.n	801ace2 <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 801acde:	f001 fcfb 	bl	801c6d8 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	79db      	ldrb	r3, [r3, #7]
 801ace6:	2b02      	cmp	r3, #2
 801ace8:	d106      	bne.n	801acf8 <HAL_PCD_ResetCallback+0x2c>
        break;
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 801acea:	4b0c      	ldr	r3, [pc, #48]	@ (801ad1c <HAL_PCD_ResetCallback+0x50>)
 801acec:	681a      	ldr	r2, [r3, #0]
 801acee:	23d0      	movs	r3, #208	@ 0xd0
 801acf0:	005b      	lsls	r3, r3, #1
 801acf2:	2101      	movs	r1, #1
 801acf4:	50d1      	str	r1, [r2, r3]
        break;
 801acf6:	e006      	b.n	801ad06 <HAL_PCD_ResetCallback+0x3a>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 801acf8:	4b08      	ldr	r3, [pc, #32]	@ (801ad1c <HAL_PCD_ResetCallback+0x50>)
 801acfa:	681a      	ldr	r2, [r3, #0]
 801acfc:	23d0      	movs	r3, #208	@ 0xd0
 801acfe:	005b      	lsls	r3, r3, #1
 801ad00:	2101      	movs	r1, #1
 801ad02:	50d1      	str	r1, [r2, r3]
        break;
 801ad04:	46c0      	nop			@ (mov r8, r8)
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 801ad06:	f000 f9fd 	bl	801b104 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801ad0a:	4b04      	ldr	r3, [pc, #16]	@ (801ad1c <HAL_PCD_ResetCallback+0x50>)
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	2201      	movs	r2, #1
 801ad10:	621a      	str	r2, [r3, #32]
}
 801ad12:	46c0      	nop			@ (mov r8, r8)
 801ad14:	46bd      	mov	sp, r7
 801ad16:	b002      	add	sp, #8
 801ad18:	bd80      	pop	{r7, pc}
 801ad1a:	46c0      	nop			@ (mov r8, r8)
 801ad1c:	20011854 	.word	0x20011854

0801ad20 <_stm32_ed_get>:
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    PCD_HandleTypeDef   *pcd_handle;
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b084      	sub	sp, #16
 801ad24:	af00      	add	r7, sp, #0
 801ad26:	6078      	str	r0, [r7, #4]
 801ad28:	6039      	str	r1, [r7, #0]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 801ad2a:	683b      	ldr	r3, [r7, #0]
 801ad2c:	227f      	movs	r2, #127	@ 0x7f
 801ad2e:	4013      	ands	r3, r2
 801ad30:	60fb      	str	r3, [r7, #12]

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	2b07      	cmp	r3, #7
 801ad36:	d806      	bhi.n	801ad46 <_stm32_ed_get+0x26>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad3c:	791b      	ldrb	r3, [r3, #4]
 801ad3e:	001a      	movs	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801ad40:	68fb      	ldr	r3, [r7, #12]
 801ad42:	4293      	cmp	r3, r2
 801ad44:	d301      	bcc.n	801ad4a <_stm32_ed_get+0x2a>
        return(UX_NULL);
 801ad46:	2300      	movs	r3, #0
 801ad48:	e007      	b.n	801ad5a <_stm32_ed_get+0x3a>
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 801ad4a:	68fa      	ldr	r2, [r7, #12]
 801ad4c:	0013      	movs	r3, r2
 801ad4e:	005b      	lsls	r3, r3, #1
 801ad50:	189b      	adds	r3, r3, r2
 801ad52:	009b      	lsls	r3, r3, #2
 801ad54:	687a      	ldr	r2, [r7, #4]
 801ad56:	18d3      	adds	r3, r2, r3
 801ad58:	3304      	adds	r3, #4
}
 801ad5a:	0018      	movs	r0, r3
 801ad5c:	46bd      	mov	sp, r7
 801ad5e:	b004      	add	sp, #16
 801ad60:	bd80      	pop	{r7, pc}

0801ad62 <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 801ad62:	b590      	push	{r4, r7, lr}
 801ad64:	b085      	sub	sp, #20
 801ad66:	af00      	add	r7, sp, #0
 801ad68:	6078      	str	r0, [r7, #4]
 801ad6a:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 801ad6c:	683b      	ldr	r3, [r7, #0]
 801ad6e:	695b      	ldr	r3, [r3, #20]
 801ad70:	2280      	movs	r2, #128	@ 0x80
 801ad72:	4393      	bics	r3, r2
 801ad74:	60fb      	str	r3, [r7, #12]

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 801ad76:	683b      	ldr	r3, [r7, #0]
 801ad78:	695a      	ldr	r2, [r3, #20]
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	0011      	movs	r1, r2
 801ad7e:	0018      	movs	r0, r3
 801ad80:	f7ff ffce 	bl	801ad20 <_stm32_ed_get>
 801ad84:	0003      	movs	r3, r0
 801ad86:	60bb      	str	r3, [r7, #8]

    if (ed == UX_NULL)
 801ad88:	68bb      	ldr	r3, [r7, #8]
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d101      	bne.n	801ad92 <_ux_dcd_stm32_endpoint_create+0x30>
        return(UX_NO_ED_AVAILABLE);
 801ad8e:	2314      	movs	r3, #20
 801ad90:	e032      	b.n	801adf8 <_ux_dcd_stm32_endpoint_create+0x96>

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 801ad92:	68bb      	ldr	r3, [r7, #8]
 801ad94:	685b      	ldr	r3, [r3, #4]
 801ad96:	2201      	movs	r2, #1
 801ad98:	4013      	ands	r3, r2
 801ad9a:	d12c      	bne.n	801adf6 <_ux_dcd_stm32_endpoint_create+0x94>
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 801ad9c:	68bb      	ldr	r3, [r7, #8]
 801ad9e:	685b      	ldr	r3, [r3, #4]
 801ada0:	2201      	movs	r2, #1
 801ada2:	431a      	orrs	r2, r3
 801ada4:	68bb      	ldr	r3, [r7, #8]
 801ada6:	605a      	str	r2, [r3, #4]

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 801ada8:	683b      	ldr	r3, [r7, #0]
 801adaa:	68ba      	ldr	r2, [r7, #8]
 801adac:	609a      	str	r2, [r3, #8]

        /* Save the endpoint pointer.  */
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 801adae:	68bb      	ldr	r3, [r7, #8]
 801adb0:	683a      	ldr	r2, [r7, #0]
 801adb2:	601a      	str	r2, [r3, #0]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	b2da      	uxtb	r2, r3
 801adb8:	68bb      	ldr	r3, [r7, #8]
 801adba:	725a      	strb	r2, [r3, #9]

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 801adbc:	683b      	ldr	r3, [r7, #0]
 801adbe:	695b      	ldr	r3, [r3, #20]
 801adc0:	b2db      	uxtb	r3, r3
 801adc2:	227f      	movs	r2, #127	@ 0x7f
 801adc4:	4393      	bics	r3, r2
 801adc6:	b2da      	uxtb	r2, r3
 801adc8:	68bb      	ldr	r3, [r7, #8]
 801adca:	729a      	strb	r2, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	2b00      	cmp	r3, #0
 801add0:	d00f      	beq.n	801adf2 <_ux_dcd_stm32_endpoint_create+0x90>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 801add6:	683b      	ldr	r3, [r7, #0]
 801add8:	695b      	ldr	r3, [r3, #20]
 801adda:	b2d9      	uxtb	r1, r3
                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
 801addc:	683b      	ldr	r3, [r7, #0]
 801adde:	69db      	ldr	r3, [r3, #28]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 801ade0:	b29a      	uxth	r2, r3
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 801ade2:	683b      	ldr	r3, [r7, #0]
 801ade4:	699b      	ldr	r3, [r3, #24]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 801ade6:	b2db      	uxtb	r3, r3
 801ade8:	2403      	movs	r4, #3
 801adea:	4023      	ands	r3, r4
 801adec:	b2db      	uxtb	r3, r3
 801adee:	f7ee fe93 	bl	8009b18 <HAL_PCD_EP_Open>
        }

        /* Return successful completion.  */
        return(UX_SUCCESS);
 801adf2:	2300      	movs	r3, #0
 801adf4:	e000      	b.n	801adf8 <_ux_dcd_stm32_endpoint_create+0x96>
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 801adf6:	2314      	movs	r3, #20
}
 801adf8:	0018      	movs	r0, r3
 801adfa:	46bd      	mov	sp, r7
 801adfc:	b005      	add	sp, #20
 801adfe:	bd90      	pop	{r4, r7, pc}

0801ae00 <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 801ae00:	b580      	push	{r7, lr}
 801ae02:	b084      	sub	sp, #16
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	6078      	str	r0, [r7, #4]
 801ae08:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801ae0a:	683b      	ldr	r3, [r7, #0]
 801ae0c:	689b      	ldr	r3, [r3, #8]
 801ae0e:	60fb      	str	r3, [r7, #12]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 801ae10:	68fb      	ldr	r3, [r7, #12]
 801ae12:	2200      	movs	r2, #0
 801ae14:	605a      	str	r2, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801ae1a:	683b      	ldr	r3, [r7, #0]
 801ae1c:	695b      	ldr	r3, [r3, #20]
 801ae1e:	b2db      	uxtb	r3, r3
 801ae20:	0019      	movs	r1, r3
 801ae22:	0010      	movs	r0, r2
 801ae24:	f7ee fee9 	bl	8009bfa <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
 801ae28:	2300      	movs	r3, #0
}
 801ae2a:	0018      	movs	r0, r3
 801ae2c:	46bd      	mov	sp, r7
 801ae2e:	b004      	add	sp, #16
 801ae30:	bd80      	pop	{r7, pc}
	...

0801ae34 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 801ae34:	b580      	push	{r7, lr}
 801ae36:	b086      	sub	sp, #24
 801ae38:	af00      	add	r7, sp, #0
 801ae3a:	6078      	str	r0, [r7, #4]
 801ae3c:	6039      	str	r1, [r7, #0]
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801ae3e:	683b      	ldr	r3, [r7, #0]
 801ae40:	689b      	ldr	r3, [r3, #8]
 801ae42:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801ae44:	f3ef 8310 	mrs	r3, PRIMASK
 801ae48:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801ae4a:	b672      	cpsid	i
    return(primask_value);
 801ae4c:	68fb      	ldr	r3, [r7, #12]

    UX_DISABLE
 801ae4e:	613b      	str	r3, [r7, #16]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 801ae50:	697b      	ldr	r3, [r7, #20]
 801ae52:	685b      	ldr	r3, [r3, #4]
 801ae54:	4a16      	ldr	r2, [pc, #88]	@ (801aeb0 <_ux_dcd_stm32_endpoint_reset+0x7c>)
 801ae56:	401a      	ands	r2, r3
 801ae58:	697b      	ldr	r3, [r7, #20]
 801ae5a:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 801ae5c:	697b      	ldr	r3, [r7, #20]
 801ae5e:	2200      	movs	r2, #0
 801ae60:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801ae66:	683b      	ldr	r3, [r7, #0]
 801ae68:	695b      	ldr	r3, [r3, #20]
 801ae6a:	b2db      	uxtb	r3, r3
 801ae6c:	0019      	movs	r1, r3
 801ae6e:	0010      	movs	r0, r2
 801ae70:	f7ef f802 	bl	8009e78 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801ae78:	683b      	ldr	r3, [r7, #0]
 801ae7a:	695b      	ldr	r3, [r3, #20]
 801ae7c:	b2db      	uxtb	r3, r3
 801ae7e:	0019      	movs	r1, r3
 801ae80:	0010      	movs	r0, r2
 801ae82:	f7ef f892 	bl	8009faa <HAL_PCD_EP_Flush>

#ifndef UX_DEVICE_STANDALONE

    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
 801ae86:	683b      	ldr	r3, [r7, #0]
 801ae88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d004      	beq.n	801ae98 <_ux_dcd_stm32_endpoint_reset+0x64>
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 801ae8e:	683b      	ldr	r3, [r7, #0]
 801ae90:	3360      	adds	r3, #96	@ 0x60
 801ae92:	0018      	movs	r0, r3
 801ae94:	f7fd fb66 	bl	8018564 <_ux_utility_semaphore_put>
 801ae98:	693b      	ldr	r3, [r7, #16]
 801ae9a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801ae9c:	68bb      	ldr	r3, [r7, #8]
 801ae9e:	f383 8810 	msr	PRIMASK, r3
}
 801aea2:	46c0      	nop			@ (mov r8, r8)
#endif

    UX_RESTORE

    /* This function never fails.  */
    return(UX_SUCCESS);
 801aea4:	2300      	movs	r3, #0
}
 801aea6:	0018      	movs	r0, r3
 801aea8:	46bd      	mov	sp, r7
 801aeaa:	b006      	add	sp, #24
 801aeac:	bd80      	pop	{r7, pc}
 801aeae:	46c0      	nop			@ (mov r8, r8)
 801aeb0:	fffffcf3 	.word	0xfffffcf3

0801aeb4 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 801aeb4:	b580      	push	{r7, lr}
 801aeb6:	b084      	sub	sp, #16
 801aeb8:	af00      	add	r7, sp, #0
 801aeba:	6078      	str	r0, [r7, #4]
 801aebc:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801aebe:	683b      	ldr	r3, [r7, #0]
 801aec0:	689b      	ldr	r3, [r3, #8]
 801aec2:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 801aec4:	68fb      	ldr	r3, [r7, #12]
 801aec6:	685b      	ldr	r3, [r3, #4]
 801aec8:	2204      	movs	r2, #4
 801aeca:	431a      	orrs	r2, r3
 801aecc:	68fb      	ldr	r3, [r7, #12]
 801aece:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 801aed4:	683b      	ldr	r3, [r7, #0]
 801aed6:	695b      	ldr	r3, [r3, #20]
 801aed8:	b2da      	uxtb	r2, r3
 801aeda:	68fb      	ldr	r3, [r7, #12]
 801aedc:	7a9b      	ldrb	r3, [r3, #10]
 801aede:	4313      	orrs	r3, r2
 801aee0:	b2db      	uxtb	r3, r3
 801aee2:	0019      	movs	r1, r3
 801aee4:	f7ee ff6a 	bl	8009dbc <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 801aee8:	2300      	movs	r3, #0
}
 801aeea:	0018      	movs	r0, r3
 801aeec:	46bd      	mov	sp, r7
 801aeee:	b004      	add	sp, #16
 801aef0:	bd80      	pop	{r7, pc}

0801aef2 <_stm32_ed_get>:
{
 801aef2:	b580      	push	{r7, lr}
 801aef4:	b084      	sub	sp, #16
 801aef6:	af00      	add	r7, sp, #0
 801aef8:	6078      	str	r0, [r7, #4]
 801aefa:	6039      	str	r1, [r7, #0]
ULONG ep_num = ep_addr & 0x7Fu;
 801aefc:	683b      	ldr	r3, [r7, #0]
 801aefe:	227f      	movs	r2, #127	@ 0x7f
 801af00:	4013      	ands	r3, r2
 801af02:	60fb      	str	r3, [r7, #12]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801af04:	68fb      	ldr	r3, [r7, #12]
 801af06:	2b07      	cmp	r3, #7
 801af08:	d806      	bhi.n	801af18 <_stm32_ed_get+0x26>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801af0e:	791b      	ldrb	r3, [r3, #4]
 801af10:	001a      	movs	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	4293      	cmp	r3, r2
 801af16:	d301      	bcc.n	801af1c <_stm32_ed_get+0x2a>
        return(UX_NULL);
 801af18:	2300      	movs	r3, #0
 801af1a:	e007      	b.n	801af2c <_stm32_ed_get+0x3a>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 801af1c:	68fa      	ldr	r2, [r7, #12]
 801af1e:	0013      	movs	r3, r2
 801af20:	005b      	lsls	r3, r3, #1
 801af22:	189b      	adds	r3, r3, r2
 801af24:	009b      	lsls	r3, r3, #2
 801af26:	687a      	ldr	r2, [r7, #4]
 801af28:	18d3      	adds	r3, r2, r3
 801af2a:	3304      	adds	r3, #4
}
 801af2c:	0018      	movs	r0, r3
 801af2e:	46bd      	mov	sp, r7
 801af30:	b004      	add	sp, #16
 801af32:	bd80      	pop	{r7, pc}

0801af34 <_ux_dcd_stm32_endpoint_status>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_status(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index)
{
 801af34:	b580      	push	{r7, lr}
 801af36:	b084      	sub	sp, #16
 801af38:	af00      	add	r7, sp, #0
 801af3a:	6078      	str	r0, [r7, #4]
 801af3c:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED      *ed;


    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);
 801af3e:	683a      	ldr	r2, [r7, #0]
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	0011      	movs	r1, r2
 801af44:	0018      	movs	r0, r3
 801af46:	f7ff ffd4 	bl	801aef2 <_stm32_ed_get>
 801af4a:	0003      	movs	r3, r0
 801af4c:	60fb      	str	r3, [r7, #12]

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 801af4e:	68fb      	ldr	r3, [r7, #12]
 801af50:	685b      	ldr	r3, [r3, #4]
 801af52:	2201      	movs	r2, #1
 801af54:	4013      	ands	r3, r2
 801af56:	d101      	bne.n	801af5c <_ux_dcd_stm32_endpoint_status+0x28>
        return(UX_ERROR);
 801af58:	23ff      	movs	r3, #255	@ 0xff
 801af5a:	e007      	b.n	801af6c <_ux_dcd_stm32_endpoint_status+0x38>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	685b      	ldr	r3, [r3, #4]
 801af60:	2204      	movs	r2, #4
 801af62:	4013      	ands	r3, r2
 801af64:	d101      	bne.n	801af6a <_ux_dcd_stm32_endpoint_status+0x36>
        return(UX_FALSE);
 801af66:	2300      	movs	r3, #0
 801af68:	e000      	b.n	801af6c <_ux_dcd_stm32_endpoint_status+0x38>
    else
        return(UX_TRUE);
 801af6a:	2301      	movs	r3, #1
}
 801af6c:	0018      	movs	r0, r3
 801af6e:	46bd      	mov	sp, r7
 801af70:	b004      	add	sp, #16
 801af72:	bd80      	pop	{r7, pc}

0801af74 <_ux_dcd_stm32_frame_number_get>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b082      	sub	sp, #8
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
 801af7c:	6039      	str	r1, [r7, #0]

    /* This function never fails. */
    return(UX_SUCCESS);
 801af7e:	2300      	movs	r3, #0
}
 801af80:	0018      	movs	r0, r3
 801af82:	46bd      	mov	sp, r7
 801af84:	b002      	add	sp, #8
 801af86:	bd80      	pop	{r7, pc}

0801af88 <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 801af88:	b580      	push	{r7, lr}
 801af8a:	b086      	sub	sp, #24
 801af8c:	af00      	add	r7, sp, #0
 801af8e:	60f8      	str	r0, [r7, #12]
 801af90:	60b9      	str	r1, [r7, #8]
 801af92:	607a      	str	r2, [r7, #4]
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	681b      	ldr	r3, [r3, #0]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d106      	bne.n	801afaa <_ux_dcd_stm32_function+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 801af9c:	2255      	movs	r2, #85	@ 0x55
 801af9e:	2102      	movs	r1, #2
 801afa0:	2002      	movs	r0, #2
 801afa2:	f7fc fdc3 	bl	8017b2c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 801afa6:	2355      	movs	r3, #85	@ 0x55
 801afa8:	e075      	b.n	801b096 <_ux_dcd_stm32_function+0x10e>
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	69db      	ldr	r3, [r3, #28]
 801afae:	613b      	str	r3, [r7, #16]

    /* Look at the function and route it.  */
    switch(function)
 801afb0:	68bb      	ldr	r3, [r7, #8]
 801afb2:	3b0a      	subs	r3, #10
 801afb4:	2b0b      	cmp	r3, #11
 801afb6:	d865      	bhi.n	801b084 <_ux_dcd_stm32_function+0xfc>
 801afb8:	009a      	lsls	r2, r3, #2
 801afba:	4b39      	ldr	r3, [pc, #228]	@ (801b0a0 <_ux_dcd_stm32_function+0x118>)
 801afbc:	18d3      	adds	r3, r2, r3
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	469f      	mov	pc, r3
    {

    case UX_DCD_GET_FRAME_NUMBER:

        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 801afc2:	687a      	ldr	r2, [r7, #4]
 801afc4:	693b      	ldr	r3, [r7, #16]
 801afc6:	0011      	movs	r1, r2
 801afc8:	0018      	movs	r0, r3
 801afca:	f7ff ffd3 	bl	801af74 <_ux_dcd_stm32_frame_number_get>
 801afce:	0003      	movs	r3, r0
 801afd0:	617b      	str	r3, [r7, #20]
        break;
 801afd2:	e05f      	b.n	801b094 <_ux_dcd_stm32_function+0x10c>
    case UX_DCD_TRANSFER_REQUEST:

#if defined(UX_DEVICE_STANDALONE)
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
#else
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 801afd4:	687a      	ldr	r2, [r7, #4]
 801afd6:	693b      	ldr	r3, [r7, #16]
 801afd8:	0011      	movs	r1, r2
 801afda:	0018      	movs	r0, r3
 801afdc:	f000 f989 	bl	801b2f2 <_ux_dcd_stm32_transfer_request>
 801afe0:	0003      	movs	r3, r0
 801afe2:	617b      	str	r3, [r7, #20]
#endif /* defined(UX_DEVICE_STANDALONE) */
        break;
 801afe4:	e056      	b.n	801b094 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_TRANSFER_ABORT:
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 801afe6:	687a      	ldr	r2, [r7, #4]
 801afe8:	693b      	ldr	r3, [r7, #16]
 801afea:	0011      	movs	r1, r2
 801afec:	0018      	movs	r0, r3
 801afee:	f000 f961 	bl	801b2b4 <_ux_dcd_stm32_transfer_abort>
 801aff2:	0003      	movs	r3, r0
 801aff4:	617b      	str	r3, [r7, #20]
        break;
 801aff6:	e04d      	b.n	801b094 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_CREATE_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 801aff8:	687a      	ldr	r2, [r7, #4]
 801affa:	693b      	ldr	r3, [r7, #16]
 801affc:	0011      	movs	r1, r2
 801affe:	0018      	movs	r0, r3
 801b000:	f7ff feaf 	bl	801ad62 <_ux_dcd_stm32_endpoint_create>
 801b004:	0003      	movs	r3, r0
 801b006:	617b      	str	r3, [r7, #20]
        break;
 801b008:	e044      	b.n	801b094 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_DESTROY_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 801b00a:	687a      	ldr	r2, [r7, #4]
 801b00c:	693b      	ldr	r3, [r7, #16]
 801b00e:	0011      	movs	r1, r2
 801b010:	0018      	movs	r0, r3
 801b012:	f7ff fef5 	bl	801ae00 <_ux_dcd_stm32_endpoint_destroy>
 801b016:	0003      	movs	r3, r0
 801b018:	617b      	str	r3, [r7, #20]
        break;
 801b01a:	e03b      	b.n	801b094 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_RESET_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 801b01c:	687a      	ldr	r2, [r7, #4]
 801b01e:	693b      	ldr	r3, [r7, #16]
 801b020:	0011      	movs	r1, r2
 801b022:	0018      	movs	r0, r3
 801b024:	f7ff ff06 	bl	801ae34 <_ux_dcd_stm32_endpoint_reset>
 801b028:	0003      	movs	r3, r0
 801b02a:	617b      	str	r3, [r7, #20]
        break;
 801b02c:	e032      	b.n	801b094 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_STALL_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 801b02e:	687a      	ldr	r2, [r7, #4]
 801b030:	693b      	ldr	r3, [r7, #16]
 801b032:	0011      	movs	r1, r2
 801b034:	0018      	movs	r0, r3
 801b036:	f7ff ff3d 	bl	801aeb4 <_ux_dcd_stm32_endpoint_stall>
 801b03a:	0003      	movs	r3, r0
 801b03c:	617b      	str	r3, [r7, #20]
        break;
 801b03e:	e029      	b.n	801b094 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_SET_DEVICE_ADDRESS:

        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 801b040:	693b      	ldr	r3, [r7, #16]
 801b042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b044:	687a      	ldr	r2, [r7, #4]
 801b046:	b2d2      	uxtb	r2, r2
 801b048:	0011      	movs	r1, r2
 801b04a:	0018      	movs	r0, r3
 801b04c:	f7ee fd3a 	bl	8009ac4 <HAL_PCD_SetAddress>
 801b050:	0003      	movs	r3, r0
 801b052:	617b      	str	r3, [r7, #20]
        break;
 801b054:	e01e      	b.n	801b094 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_CHANGE_STATE:

        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	2b0b      	cmp	r3, #11
 801b05a:	d107      	bne.n	801b06c <_ux_dcd_stm32_function+0xe4>
        {
          /* Disconnect the USB device */
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 801b05c:	693b      	ldr	r3, [r7, #16]
 801b05e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b060:	0018      	movs	r0, r3
 801b062:	f7ee fbdc 	bl	800981e <HAL_PCD_Stop>
 801b066:	0003      	movs	r3, r0
 801b068:	617b      	str	r3, [r7, #20]
        else
        {
          status = UX_SUCCESS;
        }

        break;
 801b06a:	e013      	b.n	801b094 <_ux_dcd_stm32_function+0x10c>
          status = UX_SUCCESS;
 801b06c:	2300      	movs	r3, #0
 801b06e:	617b      	str	r3, [r7, #20]
        break;
 801b070:	e010      	b.n	801b094 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_ENDPOINT_STATUS:

        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 801b072:	687a      	ldr	r2, [r7, #4]
 801b074:	693b      	ldr	r3, [r7, #16]
 801b076:	0011      	movs	r1, r2
 801b078:	0018      	movs	r0, r3
 801b07a:	f7ff ff5b 	bl	801af34 <_ux_dcd_stm32_endpoint_status>
 801b07e:	0003      	movs	r3, r0
 801b080:	617b      	str	r3, [r7, #20]
        break;
 801b082:	e007      	b.n	801b094 <_ux_dcd_stm32_function+0x10c>
#endif /* defined(UX_DEVICE_STANDALONE) */

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 801b084:	2254      	movs	r2, #84	@ 0x54
 801b086:	2102      	movs	r1, #2
 801b088:	2002      	movs	r0, #2
 801b08a:	f7fc fd4f 	bl	8017b2c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        status =  UX_FUNCTION_NOT_SUPPORTED;
 801b08e:	2354      	movs	r3, #84	@ 0x54
 801b090:	617b      	str	r3, [r7, #20]
        break;
 801b092:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return completion status.  */
    return(status);
 801b094:	697b      	ldr	r3, [r7, #20]
}
 801b096:	0018      	movs	r0, r3
 801b098:	46bd      	mov	sp, r7
 801b09a:	b006      	add	sp, #24
 801b09c:	bd80      	pop	{r7, pc}
 801b09e:	46c0      	nop			@ (mov r8, r8)
 801b0a0:	0801f3d8 	.word	0x0801f3d8

0801b0a4 <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 801b0a4:	b580      	push	{r7, lr}
 801b0a6:	b084      	sub	sp, #16
 801b0a8:	af00      	add	r7, sp, #0
 801b0aa:	6078      	str	r0, [r7, #4]
 801b0ac:	6039      	str	r1, [r7, #0]


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801b0ae:	4b13      	ldr	r3, [pc, #76]	@ (801b0fc <_ux_dcd_stm32_initialize+0x58>)
 801b0b0:	681b      	ldr	r3, [r3, #0]
 801b0b2:	60fb      	str	r3, [r7, #12]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	2280      	movs	r2, #128	@ 0x80
 801b0b8:	605a      	str	r2, [r3, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 801b0ba:	2268      	movs	r2, #104	@ 0x68
 801b0bc:	2100      	movs	r1, #0
 801b0be:	2000      	movs	r0, #0
 801b0c0:	f7fc ff4c 	bl	8017f5c <_ux_utility_memory_allocate>
 801b0c4:	0003      	movs	r3, r0
 801b0c6:	60bb      	str	r3, [r7, #8]

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 801b0c8:	68bb      	ldr	r3, [r7, #8]
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	d101      	bne.n	801b0d2 <_ux_dcd_stm32_initialize+0x2e>
        return(UX_MEMORY_INSUFFICIENT);
 801b0ce:	2312      	movs	r3, #18
 801b0d0:	e00f      	b.n	801b0f2 <_ux_dcd_stm32_initialize+0x4e>

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	68ba      	ldr	r2, [r7, #8]
 801b0d6:	61da      	str	r2, [r3, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 801b0d8:	68bb      	ldr	r3, [r7, #8]
 801b0da:	68fa      	ldr	r2, [r7, #12]
 801b0dc:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 801b0de:	68fb      	ldr	r3, [r7, #12]
 801b0e0:	4a07      	ldr	r2, [pc, #28]	@ (801b100 <_ux_dcd_stm32_initialize+0x5c>)
 801b0e2:	619a      	str	r2, [r3, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 801b0e4:	683a      	ldr	r2, [r7, #0]
 801b0e6:	68bb      	ldr	r3, [r7, #8]
 801b0e8:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	2201      	movs	r2, #1
 801b0ee:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 801b0f0:	2300      	movs	r3, #0
}
 801b0f2:	0018      	movs	r0, r3
 801b0f4:	46bd      	mov	sp, r7
 801b0f6:	b004      	add	sp, #16
 801b0f8:	bd80      	pop	{r7, pc}
 801b0fa:	46c0      	nop			@ (mov r8, r8)
 801b0fc:	20011854 	.word	0x20011854
 801b100:	0801af89 	.word	0x0801af89

0801b104 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 801b104:	b580      	push	{r7, lr}
 801b106:	b086      	sub	sp, #24
 801b108:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801b10a:	4b68      	ldr	r3, [pc, #416]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801b110:	697b      	ldr	r3, [r7, #20]
 801b112:	69db      	ldr	r3, [r3, #28]
 801b114:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801b116:	4b65      	ldr	r3, [pc, #404]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	3320      	adds	r3, #32
 801b11c:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 801b11e:	4b63      	ldr	r3, [pc, #396]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b120:	681a      	ldr	r2, [r3, #0]
 801b122:	23de      	movs	r3, #222	@ 0xde
 801b124:	005b      	lsls	r3, r3, #1
 801b126:	58d3      	ldr	r3, [r2, r3]
 801b128:	2b01      	cmp	r3, #1
 801b12a:	d114      	bne.n	801b156 <_ux_dcd_stm32_initialize_complete+0x52>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 801b12c:	4b5f      	ldr	r3, [pc, #380]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b12e:	6819      	ldr	r1, [r3, #0]
 801b130:	4b5e      	ldr	r3, [pc, #376]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b132:	681a      	ldr	r2, [r3, #0]
 801b134:	23a8      	movs	r3, #168	@ 0xa8
 801b136:	005b      	lsls	r3, r3, #1
 801b138:	58c9      	ldr	r1, [r1, r3]
 801b13a:	2394      	movs	r3, #148	@ 0x94
 801b13c:	005b      	lsls	r3, r3, #1
 801b13e:	50d1      	str	r1, [r2, r3]
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 801b140:	4b5a      	ldr	r3, [pc, #360]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b142:	6819      	ldr	r1, [r3, #0]
 801b144:	4b59      	ldr	r3, [pc, #356]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b146:	681a      	ldr	r2, [r3, #0]
 801b148:	23aa      	movs	r3, #170	@ 0xaa
 801b14a:	005b      	lsls	r3, r3, #1
 801b14c:	58c9      	ldr	r1, [r1, r3]
 801b14e:	2396      	movs	r3, #150	@ 0x96
 801b150:	005b      	lsls	r3, r3, #1
 801b152:	50d1      	str	r1, [r2, r3]
 801b154:	e035      	b.n	801b1c2 <_ux_dcd_stm32_initialize_complete+0xbe>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 801b156:	4b55      	ldr	r3, [pc, #340]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b158:	681a      	ldr	r2, [r3, #0]
 801b15a:	23de      	movs	r3, #222	@ 0xde
 801b15c:	005b      	lsls	r3, r3, #1
 801b15e:	2100      	movs	r1, #0
 801b160:	50d1      	str	r1, [r2, r3]

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 801b162:	4b52      	ldr	r3, [pc, #328]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b164:	681a      	ldr	r2, [r3, #0]
 801b166:	23d0      	movs	r3, #208	@ 0xd0
 801b168:	005b      	lsls	r3, r3, #1
 801b16a:	58d3      	ldr	r3, [r2, r3]
 801b16c:	2b01      	cmp	r3, #1
 801b16e:	d114      	bne.n	801b19a <_ux_dcd_stm32_initialize_complete+0x96>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 801b170:	4b4e      	ldr	r3, [pc, #312]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b172:	6819      	ldr	r1, [r3, #0]
 801b174:	4b4d      	ldr	r3, [pc, #308]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b176:	681a      	ldr	r2, [r3, #0]
 801b178:	2398      	movs	r3, #152	@ 0x98
 801b17a:	005b      	lsls	r3, r3, #1
 801b17c:	58c9      	ldr	r1, [r1, r3]
 801b17e:	2394      	movs	r3, #148	@ 0x94
 801b180:	005b      	lsls	r3, r3, #1
 801b182:	50d1      	str	r1, [r2, r3]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 801b184:	4b49      	ldr	r3, [pc, #292]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b186:	6819      	ldr	r1, [r3, #0]
 801b188:	4b48      	ldr	r3, [pc, #288]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b18a:	681a      	ldr	r2, [r3, #0]
 801b18c:	239a      	movs	r3, #154	@ 0x9a
 801b18e:	005b      	lsls	r3, r3, #1
 801b190:	58c9      	ldr	r1, [r1, r3]
 801b192:	2396      	movs	r3, #150	@ 0x96
 801b194:	005b      	lsls	r3, r3, #1
 801b196:	50d1      	str	r1, [r2, r3]
 801b198:	e013      	b.n	801b1c2 <_ux_dcd_stm32_initialize_complete+0xbe>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 801b19a:	4b44      	ldr	r3, [pc, #272]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b19c:	6819      	ldr	r1, [r3, #0]
 801b19e:	4b43      	ldr	r3, [pc, #268]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b1a0:	681a      	ldr	r2, [r3, #0]
 801b1a2:	239c      	movs	r3, #156	@ 0x9c
 801b1a4:	005b      	lsls	r3, r3, #1
 801b1a6:	58c9      	ldr	r1, [r1, r3]
 801b1a8:	2394      	movs	r3, #148	@ 0x94
 801b1aa:	005b      	lsls	r3, r3, #1
 801b1ac:	50d1      	str	r1, [r2, r3]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 801b1ae:	4b3f      	ldr	r3, [pc, #252]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b1b0:	6819      	ldr	r1, [r3, #0]
 801b1b2:	4b3e      	ldr	r3, [pc, #248]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b1b4:	681a      	ldr	r2, [r3, #0]
 801b1b6:	239e      	movs	r3, #158	@ 0x9e
 801b1b8:	005b      	lsls	r3, r3, #1
 801b1ba:	58c9      	ldr	r1, [r1, r3]
 801b1bc:	2396      	movs	r3, #150	@ 0x96
 801b1be:	005b      	lsls	r3, r3, #1
 801b1c0:	50d1      	str	r1, [r2, r3]
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801b1c2:	4b3a      	ldr	r3, [pc, #232]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b1c4:	681a      	ldr	r2, [r3, #0]
 801b1c6:	2394      	movs	r3, #148	@ 0x94
 801b1c8:	005b      	lsls	r3, r3, #1
 801b1ca:	58d3      	ldr	r3, [r2, r3]
 801b1cc:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 801b1d2:	4937      	ldr	r1, [pc, #220]	@ (801b2b0 <_ux_dcd_stm32_initialize_complete+0x1ac>)
 801b1d4:	68b8      	ldr	r0, [r7, #8]
 801b1d6:	220e      	movs	r2, #14
 801b1d8:	f7fc fd97 	bl	8017d0a <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 801b1dc:	68fb      	ldr	r3, [r7, #12]
 801b1de:	336c      	adds	r3, #108	@ 0x6c
 801b1e0:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	22fa      	movs	r2, #250	@ 0xfa
 801b1e6:	0092      	lsls	r2, r2, #2
 801b1e8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 801b1f2:	68fb      	ldr	r3, [r7, #12]
 801b1f4:	333c      	adds	r3, #60	@ 0x3c
 801b1f6:	001a      	movs	r2, r3
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	689b      	ldr	r3, [r3, #8]
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 801b200:	68fa      	ldr	r2, [r7, #12]
 801b202:	69d2      	ldr	r2, [r2, #28]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 801b204:	61da      	str	r2, [r3, #28]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 801b206:	68fb      	ldr	r3, [r7, #12]
 801b208:	69da      	ldr	r2, [r3, #28]
    transfer_request -> ux_slave_transfer_request_requested_length =
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 801b20e:	68fb      	ldr	r3, [r7, #12]
 801b210:	333c      	adds	r3, #60	@ 0x3c
 801b212:	001a      	movs	r2, r3
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 801b218:	697b      	ldr	r3, [r7, #20]
 801b21a:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 801b21c:	68fa      	ldr	r2, [r7, #12]
 801b21e:	323c      	adds	r2, #60	@ 0x3c
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 801b220:	6978      	ldr	r0, [r7, #20]
 801b222:	210e      	movs	r1, #14
 801b224:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 801b226:	693b      	ldr	r3, [r7, #16]
 801b228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b22a:	2100      	movs	r1, #0
 801b22c:	0018      	movs	r0, r3
 801b22e:	f7ee febc 	bl	8009faa <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 801b232:	693b      	ldr	r3, [r7, #16]
 801b234:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 801b236:	68fb      	ldr	r3, [r7, #12]
 801b238:	69db      	ldr	r3, [r3, #28]
 801b23a:	b29a      	uxth	r2, r3
 801b23c:	2300      	movs	r3, #0
 801b23e:	2100      	movs	r1, #0
 801b240:	f7ee fc6a 	bl	8009b18 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 801b244:	693b      	ldr	r3, [r7, #16]
 801b246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b248:	2180      	movs	r1, #128	@ 0x80
 801b24a:	0018      	movs	r0, r3
 801b24c:	f7ee fead 	bl	8009faa <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 801b250:	693b      	ldr	r3, [r7, #16]
 801b252:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 801b254:	68fb      	ldr	r3, [r7, #12]
 801b256:	69db      	ldr	r3, [r3, #28]
 801b258:	b29a      	uxth	r2, r3
 801b25a:	2300      	movs	r3, #0
 801b25c:	2180      	movs	r1, #128	@ 0x80
 801b25e:	f7ee fc5b 	bl	8009b18 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 801b262:	68fb      	ldr	r3, [r7, #12]
 801b264:	2200      	movs	r2, #0
 801b266:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	2201      	movs	r2, #1
 801b26c:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	2201      	movs	r2, #1
 801b272:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	2208      	movs	r2, #8
 801b278:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	2208      	movs	r2, #8
 801b27e:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	2200      	movs	r2, #0
 801b284:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 801b286:	4b09      	ldr	r3, [pc, #36]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b288:	681a      	ldr	r2, [r3, #0]
 801b28a:	23e2      	movs	r3, #226	@ 0xe2
 801b28c:	005b      	lsls	r3, r3, #1
 801b28e:	58d3      	ldr	r3, [r2, r3]
 801b290:	2b00      	cmp	r3, #0
 801b292:	d006      	beq.n	801b2a2 <_ux_dcd_stm32_initialize_complete+0x19e>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 801b294:	4b05      	ldr	r3, [pc, #20]	@ (801b2ac <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801b296:	681a      	ldr	r2, [r3, #0]
 801b298:	23e2      	movs	r3, #226	@ 0xe2
 801b29a:	005b      	lsls	r3, r3, #1
 801b29c:	58d3      	ldr	r3, [r2, r3]
 801b29e:	2001      	movs	r0, #1
 801b2a0:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 801b2a2:	2300      	movs	r3, #0
}
 801b2a4:	0018      	movs	r0, r3
 801b2a6:	46bd      	mov	sp, r7
 801b2a8:	b006      	add	sp, #24
 801b2aa:	bd80      	pop	{r7, pc}
 801b2ac:	20011854 	.word	0x20011854
 801b2b0:	2000001c 	.word	0x2000001c

0801b2b4 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 801b2b4:	b580      	push	{r7, lr}
 801b2b6:	b084      	sub	sp, #16
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	6078      	str	r0, [r7, #4]
 801b2bc:	6039      	str	r1, [r7, #0]

UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801b2be:	683b      	ldr	r3, [r7, #0]
 801b2c0:	689b      	ldr	r3, [r3, #8]
 801b2c2:	60fb      	str	r3, [r7, #12]

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801b2c8:	68fb      	ldr	r3, [r7, #12]
 801b2ca:	695b      	ldr	r3, [r3, #20]
 801b2cc:	b2db      	uxtb	r3, r3
 801b2ce:	0019      	movs	r1, r3
 801b2d0:	0010      	movs	r0, r2
 801b2d2:	f7ee fe31 	bl	8009f38 <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801b2da:	68fb      	ldr	r3, [r7, #12]
 801b2dc:	695b      	ldr	r3, [r3, #20]
 801b2de:	b2db      	uxtb	r3, r3
 801b2e0:	0019      	movs	r1, r3
 801b2e2:	0010      	movs	r0, r2
 801b2e4:	f7ee fe61 	bl	8009faa <HAL_PCD_EP_Flush>

    /* No semaphore put here since it's already done in stack.  */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 801b2e8:	2300      	movs	r3, #0
}
 801b2ea:	0018      	movs	r0, r3
 801b2ec:	46bd      	mov	sp, r7
 801b2ee:	b004      	add	sp, #16
 801b2f0:	bd80      	pop	{r7, pc}

0801b2f2 <_ux_dcd_stm32_transfer_request>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_request(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 801b2f2:	b580      	push	{r7, lr}
 801b2f4:	b084      	sub	sp, #16
 801b2f6:	af00      	add	r7, sp, #0
 801b2f8:	6078      	str	r0, [r7, #4]
 801b2fa:	6039      	str	r1, [r7, #0]
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801b2fc:	683b      	ldr	r3, [r7, #0]
 801b2fe:	689b      	ldr	r3, [r3, #8]
 801b300:	60fb      	str	r3, [r7, #12]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 801b302:	683b      	ldr	r3, [r7, #0]
 801b304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b306:	2b03      	cmp	r3, #3
 801b308:	d12c      	bne.n	801b364 <_ux_dcd_stm32_transfer_request+0x72>
    {

        /* Transmit data.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	6e58      	ldr	r0, [r3, #100]	@ 0x64
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 801b30e:	68fb      	ldr	r3, [r7, #12]
 801b310:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 801b312:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 801b314:	683b      	ldr	r3, [r7, #0]
 801b316:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 801b318:	683b      	ldr	r3, [r7, #0]
 801b31a:	695b      	ldr	r3, [r3, #20]
 801b31c:	f7ee fd11 	bl	8009d42 <HAL_PCD_EP_Transmit>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 801b320:	68fb      	ldr	r3, [r7, #12]
 801b322:	695b      	ldr	r3, [r3, #20]
 801b324:	2280      	movs	r2, #128	@ 0x80
 801b326:	4393      	bics	r3, r2
 801b328:	d045      	beq.n	801b3b6 <_ux_dcd_stm32_transfer_request+0xc4>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 801b32a:	683b      	ldr	r3, [r7, #0]
 801b32c:	3330      	adds	r3, #48	@ 0x30
 801b32e:	001a      	movs	r2, r3
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 801b330:	683b      	ldr	r3, [r7, #0]
 801b332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 801b334:	0019      	movs	r1, r3
 801b336:	0010      	movs	r0, r2
 801b338:	f7fd f8d8 	bl	80184ec <_ux_utility_semaphore_get>
 801b33c:	0003      	movs	r3, r0
 801b33e:	60bb      	str	r3, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 801b340:	68bb      	ldr	r3, [r7, #8]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d001      	beq.n	801b34a <_ux_dcd_stm32_transfer_request+0x58>
                return(status);
 801b346:	68bb      	ldr	r3, [r7, #8]
 801b348:	e036      	b.n	801b3b8 <_ux_dcd_stm32_transfer_request+0xc6>

            transfer_request -> ux_slave_transfer_request_actual_length = transfer_request->ux_slave_transfer_request_requested_length;
 801b34a:	683b      	ldr	r3, [r7, #0]
 801b34c:	695a      	ldr	r2, [r3, #20]
 801b34e:	683b      	ldr	r3, [r7, #0]
 801b350:	619a      	str	r2, [r3, #24]

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 801b352:	683b      	ldr	r3, [r7, #0]
 801b354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b356:	2b00      	cmp	r3, #0
 801b358:	d002      	beq.n	801b360 <_ux_dcd_stm32_transfer_request+0x6e>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 801b35a:	683b      	ldr	r3, [r7, #0]
 801b35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b35e:	e02b      	b.n	801b3b8 <_ux_dcd_stm32_transfer_request+0xc6>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 801b360:	2300      	movs	r3, #0
 801b362:	e029      	b.n	801b3b8 <_ux_dcd_stm32_transfer_request+0xc6>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	6e58      	ldr	r0, [r3, #100]	@ 0x64
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 801b368:	68fb      	ldr	r3, [r7, #12]
 801b36a:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 801b36c:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 801b36e:	683b      	ldr	r3, [r7, #0]
 801b370:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 801b372:	683b      	ldr	r3, [r7, #0]
 801b374:	695b      	ldr	r3, [r3, #20]
 801b376:	f7ee fc93 	bl	8009ca0 <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 801b37a:	68fb      	ldr	r3, [r7, #12]
 801b37c:	695b      	ldr	r3, [r3, #20]
 801b37e:	2280      	movs	r2, #128	@ 0x80
 801b380:	4393      	bics	r3, r2
 801b382:	d018      	beq.n	801b3b6 <_ux_dcd_stm32_transfer_request+0xc4>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 801b384:	683b      	ldr	r3, [r7, #0]
 801b386:	3330      	adds	r3, #48	@ 0x30
 801b388:	001a      	movs	r2, r3
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 801b38a:	683b      	ldr	r3, [r7, #0]
 801b38c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 801b38e:	0019      	movs	r1, r3
 801b390:	0010      	movs	r0, r2
 801b392:	f7fd f8ab 	bl	80184ec <_ux_utility_semaphore_get>
 801b396:	0003      	movs	r3, r0
 801b398:	60bb      	str	r3, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 801b39a:	68bb      	ldr	r3, [r7, #8]
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d001      	beq.n	801b3a4 <_ux_dcd_stm32_transfer_request+0xb2>
                return(status);
 801b3a0:	68bb      	ldr	r3, [r7, #8]
 801b3a2:	e009      	b.n	801b3b8 <_ux_dcd_stm32_transfer_request+0xc6>

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 801b3a4:	683b      	ldr	r3, [r7, #0]
 801b3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d002      	beq.n	801b3b2 <_ux_dcd_stm32_transfer_request+0xc0>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 801b3ac:	683b      	ldr	r3, [r7, #0]
 801b3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b3b0:	e002      	b.n	801b3b8 <_ux_dcd_stm32_transfer_request+0xc6>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	e000      	b.n	801b3b8 <_ux_dcd_stm32_transfer_request+0xc6>
        }
    }

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 801b3b6:	2300      	movs	r3, #0
}
 801b3b8:	0018      	movs	r0, r3
 801b3ba:	46bd      	mov	sp, r7
 801b3bc:	b004      	add	sp, #16
 801b3be:	bd80      	pop	{r7, pc}

0801b3c0 <_ux_device_stack_alternate_setting_get>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 801b3c0:	b580      	push	{r7, lr}
 801b3c2:	b088      	sub	sp, #32
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801b3c8:	4b1c      	ldr	r3, [pc, #112]	@ (801b43c <_ux_device_stack_alternate_setting_get+0x7c>)
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	3320      	adds	r3, #32
 801b3ce:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 801b3d0:	69bb      	ldr	r3, [r7, #24]
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	2b03      	cmp	r3, #3
 801b3d6:	d12b      	bne.n	801b430 <_ux_device_stack_alternate_setting_get+0x70>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface =  device -> ux_slave_device_first_interface;
 801b3d8:	69bb      	ldr	r3, [r7, #24]
 801b3da:	22f0      	movs	r2, #240	@ 0xf0
 801b3dc:	589b      	ldr	r3, [r3, r2]
 801b3de:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface != UX_NULL)
 801b3e0:	e023      	b.n	801b42a <_ux_device_stack_alternate_setting_get+0x6a>
        if (interface != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 801b3e2:	69fb      	ldr	r3, [r7, #28]
 801b3e4:	695b      	ldr	r3, [r3, #20]
 801b3e6:	687a      	ldr	r2, [r7, #4]
 801b3e8:	429a      	cmp	r2, r3
 801b3ea:	d11b      	bne.n	801b424 <_ux_device_stack_alternate_setting_get+0x64>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 801b3ec:	69bb      	ldr	r3, [r7, #24]
 801b3ee:	333c      	adds	r3, #60	@ 0x3c
 801b3f0:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801b3f2:	697b      	ldr	r3, [r7, #20]
 801b3f4:	3330      	adds	r3, #48	@ 0x30
 801b3f6:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 801b3f8:	69fb      	ldr	r3, [r7, #28]
 801b3fa:	699a      	ldr	r2, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 801b3fc:	693b      	ldr	r3, [r7, #16]
 801b3fe:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 801b400:	b2d2      	uxtb	r2, r2
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 801b402:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 801b404:	693b      	ldr	r3, [r7, #16]
 801b406:	2201      	movs	r2, #1
 801b408:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801b40a:	693b      	ldr	r3, [r7, #16]
 801b40c:	2203      	movs	r2, #3
 801b40e:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 801b410:	693b      	ldr	r3, [r7, #16]
 801b412:	2201      	movs	r2, #1
 801b414:	2101      	movs	r1, #1
 801b416:	0018      	movs	r0, r3
 801b418:	f001 feac 	bl	801d174 <_ux_device_stack_transfer_request>
 801b41c:	0003      	movs	r3, r0
 801b41e:	60fb      	str	r3, [r7, #12]

                /* Return the function status.  */
                return(status);
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	e006      	b.n	801b432 <_ux_device_stack_alternate_setting_get+0x72>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 801b424:	69fb      	ldr	r3, [r7, #28]
 801b426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b428:	61fb      	str	r3, [r7, #28]
        while (interface != UX_NULL)
 801b42a:	69fb      	ldr	r3, [r7, #28]
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d1d8      	bne.n	801b3e2 <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 801b430:	23ff      	movs	r3, #255	@ 0xff
}
 801b432:	0018      	movs	r0, r3
 801b434:	46bd      	mov	sp, r7
 801b436:	b008      	add	sp, #32
 801b438:	bd80      	pop	{r7, pc}
 801b43a:	46c0      	nop			@ (mov r8, r8)
 801b43c:	20011854 	.word	0x20011854

0801b440 <_ux_device_stack_alternate_setting_set>:
/*                                            calculated payload size,    */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 801b440:	b590      	push	{r4, r7, lr}
 801b442:	b0af      	sub	sp, #188	@ 0xbc
 801b444:	af00      	add	r7, sp, #0
 801b446:	6078      	str	r0, [r7, #4]
 801b448:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801b44a:	4bdd      	ldr	r3, [pc, #884]	@ (801b7c0 <_ux_device_stack_alternate_setting_set+0x380>)
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	3320      	adds	r3, #32
 801b450:	2298      	movs	r2, #152	@ 0x98
 801b452:	18b9      	adds	r1, r7, r2
 801b454:	600b      	str	r3, [r1, #0]

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 801b456:	18bb      	adds	r3, r7, r2
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	681b      	ldr	r3, [r3, #0]
 801b45c:	2b03      	cmp	r3, #3
 801b45e:	d001      	beq.n	801b464 <_ux_device_stack_alternate_setting_set+0x24>
        return(UX_FUNCTION_NOT_SUPPORTED);
 801b460:	2354      	movs	r3, #84	@ 0x54
 801b462:	e26e      	b.n	801b942 <_ux_device_stack_alternate_setting_set+0x502>

    /* Find the current interface.  */
    interface =  device -> ux_slave_device_first_interface;
 801b464:	2398      	movs	r3, #152	@ 0x98
 801b466:	18fb      	adds	r3, r7, r3
 801b468:	681b      	ldr	r3, [r3, #0]
 801b46a:	22f0      	movs	r2, #240	@ 0xf0
 801b46c:	589b      	ldr	r3, [r3, r2]
 801b46e:	22b4      	movs	r2, #180	@ 0xb4
 801b470:	18ba      	adds	r2, r7, r2
 801b472:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface != UX_NULL)
 801b474:	e00b      	b.n	801b48e <_ux_device_stack_alternate_setting_set+0x4e>
    {

        if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 801b476:	21b4      	movs	r1, #180	@ 0xb4
 801b478:	187b      	adds	r3, r7, r1
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	695b      	ldr	r3, [r3, #20]
 801b47e:	687a      	ldr	r2, [r7, #4]
 801b480:	429a      	cmp	r2, r3
 801b482:	d00a      	beq.n	801b49a <_ux_device_stack_alternate_setting_set+0x5a>
            break;
        else
            interface =  interface -> ux_slave_interface_next_interface;
 801b484:	187b      	adds	r3, r7, r1
 801b486:	681b      	ldr	r3, [r3, #0]
 801b488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b48a:	187a      	adds	r2, r7, r1
 801b48c:	6013      	str	r3, [r2, #0]
    while (interface != UX_NULL)
 801b48e:	23b4      	movs	r3, #180	@ 0xb4
 801b490:	18fb      	adds	r3, r7, r3
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	2b00      	cmp	r3, #0
 801b496:	d1ee      	bne.n	801b476 <_ux_device_stack_alternate_setting_set+0x36>
 801b498:	e000      	b.n	801b49c <_ux_device_stack_alternate_setting_set+0x5c>
            break;
 801b49a:	46c0      	nop			@ (mov r8, r8)
        interface = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface == UX_NULL)
 801b49c:	23b4      	movs	r3, #180	@ 0xb4
 801b49e:	18fb      	adds	r3, r7, r3
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d106      	bne.n	801b4b4 <_ux_device_stack_alternate_setting_set+0x74>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 801b4a6:	2252      	movs	r2, #82	@ 0x52
 801b4a8:	2107      	movs	r1, #7
 801b4aa:	2002      	movs	r0, #2
 801b4ac:	f7fc fb3e 	bl	8017b2c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 801b4b0:	2352      	movs	r3, #82	@ 0x52
 801b4b2:	e246      	b.n	801b942 <_ux_device_stack_alternate_setting_set+0x502>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 801b4b4:	23b4      	movs	r3, #180	@ 0xb4
 801b4b6:	18fb      	adds	r3, r7, r3
 801b4b8:	681b      	ldr	r3, [r3, #0]
 801b4ba:	699b      	ldr	r3, [r3, #24]
 801b4bc:	683a      	ldr	r2, [r7, #0]
 801b4be:	429a      	cmp	r2, r3
 801b4c0:	d101      	bne.n	801b4c6 <_ux_device_stack_alternate_setting_set+0x86>
        return(UX_SUCCESS);       
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	e23d      	b.n	801b942 <_ux_device_stack_alternate_setting_set+0x502>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 801b4c6:	4bbe      	ldr	r3, [pc, #760]	@ (801b7c0 <_ux_device_stack_alternate_setting_set+0x380>)
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	2294      	movs	r2, #148	@ 0x94
 801b4cc:	18ba      	adds	r2, r7, r2
 801b4ce:	6013      	str	r3, [r2, #0]

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801b4d0:	4bbb      	ldr	r3, [pc, #748]	@ (801b7c0 <_ux_device_stack_alternate_setting_set+0x380>)
 801b4d2:	681a      	ldr	r2, [r3, #0]
 801b4d4:	2394      	movs	r3, #148	@ 0x94
 801b4d6:	005b      	lsls	r3, r3, #1
 801b4d8:	58d3      	ldr	r3, [r2, r3]
 801b4da:	22b0      	movs	r2, #176	@ 0xb0
 801b4dc:	18ba      	adds	r2, r7, r2
 801b4de:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 801b4e0:	4bb7      	ldr	r3, [pc, #732]	@ (801b7c0 <_ux_device_stack_alternate_setting_set+0x380>)
 801b4e2:	681a      	ldr	r2, [r3, #0]
 801b4e4:	2396      	movs	r3, #150	@ 0x96
 801b4e6:	005b      	lsls	r3, r3, #1
 801b4e8:	58d3      	ldr	r3, [r2, r3]
 801b4ea:	22ac      	movs	r2, #172	@ 0xac
 801b4ec:	18ba      	adds	r2, r7, r2
 801b4ee:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 801b4f0:	e220      	b.n	801b934 <_ux_device_stack_alternate_setting_set+0x4f4>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 801b4f2:	20b0      	movs	r0, #176	@ 0xb0
 801b4f4:	183b      	adds	r3, r7, r0
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	781b      	ldrb	r3, [r3, #0]
 801b4fa:	2290      	movs	r2, #144	@ 0x90
 801b4fc:	18ba      	adds	r2, r7, r2
 801b4fe:	6013      	str	r3, [r2, #0]

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 801b500:	218f      	movs	r1, #143	@ 0x8f
 801b502:	187b      	adds	r3, r7, r1
 801b504:	183a      	adds	r2, r7, r0
 801b506:	6812      	ldr	r2, [r2, #0]
 801b508:	7852      	ldrb	r2, [r2, #1]
 801b50a:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 801b50c:	187b      	adds	r3, r7, r1
 801b50e:	781b      	ldrb	r3, [r3, #0]
 801b510:	2b02      	cmp	r3, #2
 801b512:	d000      	beq.n	801b516 <_ux_device_stack_alternate_setting_set+0xd6>
 801b514:	e1fd      	b.n	801b912 <_ux_device_stack_alternate_setting_set+0x4d2>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 801b516:	2458      	movs	r4, #88	@ 0x58
 801b518:	193b      	adds	r3, r7, r4
 801b51a:	49aa      	ldr	r1, [pc, #680]	@ (801b7c4 <_ux_device_stack_alternate_setting_set+0x384>)
 801b51c:	183a      	adds	r2, r7, r0
 801b51e:	6810      	ldr	r0, [r2, #0]
 801b520:	2208      	movs	r2, #8
 801b522:	f7fc fbf2 	bl	8017d0a <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 801b526:	0020      	movs	r0, r4
 801b528:	183b      	adds	r3, r7, r0
 801b52a:	691a      	ldr	r2, [r3, #16]
 801b52c:	2398      	movs	r3, #152	@ 0x98
 801b52e:	18fb      	adds	r3, r7, r3
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	21cc      	movs	r1, #204	@ 0xcc
 801b534:	585b      	ldr	r3, [r3, r1]
 801b536:	429a      	cmp	r2, r3
 801b538:	d000      	beq.n	801b53c <_ux_device_stack_alternate_setting_set+0xfc>
 801b53a:	e1ea      	b.n	801b912 <_ux_device_stack_alternate_setting_set+0x4d2>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 801b53c:	183b      	adds	r3, r7, r0
 801b53e:	689b      	ldr	r3, [r3, #8]
 801b540:	22ac      	movs	r2, #172	@ 0xac
 801b542:	18ba      	adds	r2, r7, r2
 801b544:	6013      	str	r3, [r2, #0]

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 801b546:	e1dd      	b.n	801b904 <_ux_device_stack_alternate_setting_set+0x4c4>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 801b548:	20b0      	movs	r0, #176	@ 0xb0
 801b54a:	183b      	adds	r3, r7, r0
 801b54c:	681b      	ldr	r3, [r3, #0]
 801b54e:	781b      	ldrb	r3, [r3, #0]
 801b550:	2290      	movs	r2, #144	@ 0x90
 801b552:	18ba      	adds	r2, r7, r2
 801b554:	6013      	str	r3, [r2, #0]

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 801b556:	218f      	movs	r1, #143	@ 0x8f
 801b558:	187b      	adds	r3, r7, r1
 801b55a:	183a      	adds	r2, r7, r0
 801b55c:	6812      	ldr	r2, [r2, #0]
 801b55e:	7852      	ldrb	r2, [r2, #1]
 801b560:	701a      	strb	r2, [r3, #0]
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 801b562:	187b      	adds	r3, r7, r1
 801b564:	781b      	ldrb	r3, [r3, #0]
 801b566:	2b04      	cmp	r3, #4
 801b568:	d000      	beq.n	801b56c <_ux_device_stack_alternate_setting_set+0x12c>
 801b56a:	e1ba      	b.n	801b8e2 <_ux_device_stack_alternate_setting_set+0x4a2>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 801b56c:	2434      	movs	r4, #52	@ 0x34
 801b56e:	193b      	adds	r3, r7, r4
 801b570:	4995      	ldr	r1, [pc, #596]	@ (801b7c8 <_ux_device_stack_alternate_setting_set+0x388>)
 801b572:	183a      	adds	r2, r7, r0
 801b574:	6810      	ldr	r0, [r2, #0]
 801b576:	2209      	movs	r2, #9
 801b578:	f7fc fbc7 	bl	8017d0a <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 801b57c:	193b      	adds	r3, r7, r4
 801b57e:	689b      	ldr	r3, [r3, #8]
 801b580:	687a      	ldr	r2, [r7, #4]
 801b582:	429a      	cmp	r2, r3
 801b584:	d000      	beq.n	801b588 <_ux_device_stack_alternate_setting_set+0x148>
 801b586:	e1ac      	b.n	801b8e2 <_ux_device_stack_alternate_setting_set+0x4a2>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 801b588:	193b      	adds	r3, r7, r4
 801b58a:	68db      	ldr	r3, [r3, #12]
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 801b58c:	683a      	ldr	r2, [r7, #0]
 801b58e:	429a      	cmp	r2, r3
 801b590:	d000      	beq.n	801b594 <_ux_device_stack_alternate_setting_set+0x154>
 801b592:	e1a6      	b.n	801b8e2 <_ux_device_stack_alternate_setting_set+0x4a2>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface -> ux_slave_interface_first_endpoint;
 801b594:	23b4      	movs	r3, #180	@ 0xb4
 801b596:	18fb      	adds	r3, r7, r3
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b59c:	22a8      	movs	r2, #168	@ 0xa8
 801b59e:	18ba      	adds	r2, r7, r2
 801b5a0:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 801b5a2:	e02c      	b.n	801b5fe <_ux_device_stack_alternate_setting_set+0x1be>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 801b5a4:	24a8      	movs	r4, #168	@ 0xa8
 801b5a6:	193b      	adds	r3, r7, r4
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	2126      	movs	r1, #38	@ 0x26
 801b5ac:	0018      	movs	r0, r3
 801b5ae:	f001 fdcd 	bl	801d14c <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 801b5b2:	2194      	movs	r1, #148	@ 0x94
 801b5b4:	187b      	adds	r3, r7, r1
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	699b      	ldr	r3, [r3, #24]
 801b5ba:	193a      	adds	r2, r7, r4
 801b5bc:	6812      	ldr	r2, [r2, #0]
 801b5be:	1879      	adds	r1, r7, r1
 801b5c0:	6808      	ldr	r0, [r1, #0]
 801b5c2:	210f      	movs	r1, #15
 801b5c4:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 801b5c6:	193b      	adds	r3, r7, r4
 801b5c8:	681b      	ldr	r3, [r3, #0]
 801b5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b5cc:	67bb      	str	r3, [r7, #120]	@ 0x78
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 801b5ce:	0021      	movs	r1, r4
 801b5d0:	187b      	adds	r3, r7, r1
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	2200      	movs	r2, #0
 801b5d6:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 801b5d8:	187b      	adds	r3, r7, r1
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	2200      	movs	r2, #0
 801b5de:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 801b5e0:	187b      	adds	r3, r7, r1
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	2200      	movs	r2, #0
 801b5e6:	625a      	str	r2, [r3, #36]	@ 0x24
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 801b5e8:	187b      	adds	r3, r7, r1
 801b5ea:	681b      	ldr	r3, [r3, #0]
 801b5ec:	2200      	movs	r2, #0
 801b5ee:	629a      	str	r2, [r3, #40]	@ 0x28
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 801b5f0:	187b      	adds	r3, r7, r1
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	2200      	movs	r2, #0
 801b5f6:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 801b5f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b5fa:	187a      	adds	r2, r7, r1
 801b5fc:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 801b5fe:	23a8      	movs	r3, #168	@ 0xa8
 801b600:	18fb      	adds	r3, r7, r3
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	2b00      	cmp	r3, #0
 801b606:	d1cd      	bne.n	801b5a4 <_ux_device_stack_alternate_setting_set+0x164>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface -> ux_slave_interface_first_endpoint = UX_NULL;
 801b608:	23b4      	movs	r3, #180	@ 0xb4
 801b60a:	18fb      	adds	r3, r7, r3
 801b60c:	681b      	ldr	r3, [r3, #0]
 801b60e:	2200      	movs	r2, #0
 801b610:	635a      	str	r2, [r3, #52]	@ 0x34

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 801b612:	21b0      	movs	r1, #176	@ 0xb0
 801b614:	187b      	adds	r3, r7, r1
 801b616:	681b      	ldr	r3, [r3, #0]
 801b618:	781b      	ldrb	r3, [r3, #0]
 801b61a:	001a      	movs	r2, r3
 801b61c:	20ac      	movs	r0, #172	@ 0xac
 801b61e:	183b      	adds	r3, r7, r0
 801b620:	681b      	ldr	r3, [r3, #0]
 801b622:	1a9b      	subs	r3, r3, r2
 801b624:	183a      	adds	r2, r7, r0
 801b626:	6013      	str	r3, [r2, #0]
                            device_framework +=  (ULONG) *device_framework;
 801b628:	187b      	adds	r3, r7, r1
 801b62a:	681b      	ldr	r3, [r3, #0]
 801b62c:	781b      	ldrb	r3, [r3, #0]
 801b62e:	001a      	movs	r2, r3
 801b630:	187b      	adds	r3, r7, r1
 801b632:	681b      	ldr	r3, [r3, #0]
 801b634:	189b      	adds	r3, r3, r2
 801b636:	187a      	adds	r2, r7, r1
 801b638:	6013      	str	r3, [r2, #0]
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 801b63a:	e10a      	b.n	801b852 <_ux_device_stack_alternate_setting_set+0x412>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 801b63c:	22b0      	movs	r2, #176	@ 0xb0
 801b63e:	18bb      	adds	r3, r7, r2
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	781b      	ldrb	r3, [r3, #0]
 801b644:	2190      	movs	r1, #144	@ 0x90
 801b646:	1879      	adds	r1, r7, r1
 801b648:	600b      	str	r3, [r1, #0]
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 801b64a:	218f      	movs	r1, #143	@ 0x8f
 801b64c:	187b      	adds	r3, r7, r1
 801b64e:	18ba      	adds	r2, r7, r2
 801b650:	6812      	ldr	r2, [r2, #0]
 801b652:	7852      	ldrb	r2, [r2, #1]
 801b654:	701a      	strb	r2, [r3, #0]
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 801b656:	187b      	adds	r3, r7, r1
 801b658:	781b      	ldrb	r3, [r3, #0]
 801b65a:	2b05      	cmp	r3, #5
 801b65c:	d008      	beq.n	801b670 <_ux_device_stack_alternate_setting_set+0x230>
 801b65e:	dd00      	ble.n	801b662 <_ux_device_stack_alternate_setting_set+0x222>
 801b660:	e0e5      	b.n	801b82e <_ux_device_stack_alternate_setting_set+0x3ee>
 801b662:	2b02      	cmp	r3, #2
 801b664:	d100      	bne.n	801b668 <_ux_device_stack_alternate_setting_set+0x228>
 801b666:	e0db      	b.n	801b820 <_ux_device_stack_alternate_setting_set+0x3e0>
 801b668:	2b04      	cmp	r3, #4
 801b66a:	d100      	bne.n	801b66e <_ux_device_stack_alternate_setting_set+0x22e>
 801b66c:	e0d8      	b.n	801b820 <_ux_device_stack_alternate_setting_set+0x3e0>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 801b66e:	e0de      	b.n	801b82e <_ux_device_stack_alternate_setting_set+0x3ee>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 801b670:	2198      	movs	r1, #152	@ 0x98
 801b672:	187b      	adds	r3, r7, r1
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	22fc      	movs	r2, #252	@ 0xfc
 801b678:	589b      	ldr	r3, [r3, r2]
 801b67a:	22a8      	movs	r2, #168	@ 0xa8
 801b67c:	18ba      	adds	r2, r7, r2
 801b67e:	6013      	str	r3, [r2, #0]
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 801b680:	187b      	adds	r3, r7, r1
 801b682:	681a      	ldr	r2, [r3, #0]
 801b684:	2380      	movs	r3, #128	@ 0x80
 801b686:	005b      	lsls	r3, r3, #1
 801b688:	58d3      	ldr	r3, [r2, r3]
 801b68a:	22a0      	movs	r2, #160	@ 0xa0
 801b68c:	18ba      	adds	r2, r7, r2
 801b68e:	6013      	str	r3, [r2, #0]
                                    while (endpoints_pool_number != 0)
 801b690:	e016      	b.n	801b6c0 <_ux_device_stack_alternate_setting_set+0x280>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 801b692:	22a8      	movs	r2, #168	@ 0xa8
 801b694:	18bb      	adds	r3, r7, r2
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d104      	bne.n	801b6a8 <_ux_device_stack_alternate_setting_set+0x268>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 801b69e:	18bb      	adds	r3, r7, r2
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	2201      	movs	r2, #1
 801b6a4:	601a      	str	r2, [r3, #0]
                                            break;
 801b6a6:	e010      	b.n	801b6ca <_ux_device_stack_alternate_setting_set+0x28a>
                                        endpoint++;
 801b6a8:	22a8      	movs	r2, #168	@ 0xa8
 801b6aa:	18bb      	adds	r3, r7, r2
 801b6ac:	681b      	ldr	r3, [r3, #0]
 801b6ae:	3390      	adds	r3, #144	@ 0x90
 801b6b0:	18ba      	adds	r2, r7, r2
 801b6b2:	6013      	str	r3, [r2, #0]
                                       endpoints_pool_number--; 
 801b6b4:	22a0      	movs	r2, #160	@ 0xa0
 801b6b6:	18bb      	adds	r3, r7, r2
 801b6b8:	681b      	ldr	r3, [r3, #0]
 801b6ba:	3b01      	subs	r3, #1
 801b6bc:	18ba      	adds	r2, r7, r2
 801b6be:	6013      	str	r3, [r2, #0]
                                    while (endpoints_pool_number != 0)
 801b6c0:	23a0      	movs	r3, #160	@ 0xa0
 801b6c2:	18fb      	adds	r3, r7, r3
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d1e3      	bne.n	801b692 <_ux_device_stack_alternate_setting_set+0x252>
                                    if (endpoints_pool_number == 0)
 801b6ca:	23a0      	movs	r3, #160	@ 0xa0
 801b6cc:	18fb      	adds	r3, r7, r3
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d101      	bne.n	801b6d8 <_ux_device_stack_alternate_setting_set+0x298>
                                        return(UX_MEMORY_INSUFFICIENT);
 801b6d4:	2312      	movs	r3, #18
 801b6d6:	e134      	b.n	801b942 <_ux_device_stack_alternate_setting_set+0x502>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 801b6d8:	24a8      	movs	r4, #168	@ 0xa8
 801b6da:	193b      	adds	r3, r7, r4
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 801b6e0:	493a      	ldr	r1, [pc, #232]	@ (801b7cc <_ux_device_stack_alternate_setting_set+0x38c>)
 801b6e2:	22b0      	movs	r2, #176	@ 0xb0
 801b6e4:	18ba      	adds	r2, r7, r2
 801b6e6:	6810      	ldr	r0, [r2, #0]
 801b6e8:	2206      	movs	r2, #6
 801b6ea:	f7fc fb0e 	bl	8017d0a <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801b6ee:	0021      	movs	r1, r4
 801b6f0:	187b      	adds	r3, r7, r1
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	3330      	adds	r3, #48	@ 0x30
 801b6f6:	2280      	movs	r2, #128	@ 0x80
 801b6f8:	18ba      	adds	r2, r7, r2
 801b6fa:	6013      	str	r3, [r2, #0]
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 801b6fc:	187b      	adds	r3, r7, r1
 801b6fe:	681b      	ldr	r3, [r3, #0]
 801b700:	69db      	ldr	r3, [r3, #28]
                                    max_transfer_length =
 801b702:	055b      	lsls	r3, r3, #21
 801b704:	0d5b      	lsrs	r3, r3, #21
 801b706:	209c      	movs	r0, #156	@ 0x9c
 801b708:	183a      	adds	r2, r7, r0
 801b70a:	6013      	str	r3, [r2, #0]
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801b70c:	4b2c      	ldr	r3, [pc, #176]	@ (801b7c0 <_ux_device_stack_alternate_setting_set+0x380>)
 801b70e:	681a      	ldr	r2, [r3, #0]
 801b710:	23d0      	movs	r3, #208	@ 0xd0
 801b712:	005b      	lsls	r3, r3, #1
 801b714:	58d3      	ldr	r3, [r2, r3]
 801b716:	2b02      	cmp	r3, #2
 801b718:	d11b      	bne.n	801b752 <_ux_device_stack_alternate_setting_set+0x312>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 801b71a:	187b      	adds	r3, r7, r1
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	699b      	ldr	r3, [r3, #24]
 801b720:	2201      	movs	r2, #1
 801b722:	4013      	ands	r3, r2
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801b724:	d015      	beq.n	801b752 <_ux_device_stack_alternate_setting_set+0x312>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 801b726:	187b      	adds	r3, r7, r1
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	69da      	ldr	r2, [r3, #28]
 801b72c:	23c0      	movs	r3, #192	@ 0xc0
 801b72e:	015b      	lsls	r3, r3, #5
 801b730:	4013      	ands	r3, r2
 801b732:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        if (n_trans)
 801b734:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b736:	2b00      	cmp	r3, #0
 801b738:	d00b      	beq.n	801b752 <_ux_device_stack_alternate_setting_set+0x312>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 801b73a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b73c:	0adb      	lsrs	r3, r3, #11
 801b73e:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                            n_trans ++;
 801b740:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b742:	3301      	adds	r3, #1
 801b744:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                            max_transfer_length *= n_trans;
 801b746:	183b      	adds	r3, r7, r0
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801b74c:	4353      	muls	r3, r2
 801b74e:	183a      	adds	r2, r7, r0
 801b750:	6013      	str	r3, [r2, #0]
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 801b752:	2180      	movs	r1, #128	@ 0x80
 801b754:	187b      	adds	r3, r7, r1
 801b756:	681b      	ldr	r3, [r3, #0]
 801b758:	229c      	movs	r2, #156	@ 0x9c
 801b75a:	18ba      	adds	r2, r7, r2
 801b75c:	6812      	ldr	r2, [r2, #0]
 801b75e:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 801b760:	187b      	adds	r3, r7, r1
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	24a8      	movs	r4, #168	@ 0xa8
 801b766:	193a      	adds	r2, r7, r4
 801b768:	6812      	ldr	r2, [r2, #0]
 801b76a:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 801b76c:	187b      	adds	r3, r7, r1
 801b76e:	681b      	ldr	r3, [r3, #0]
 801b770:	2201      	movs	r2, #1
 801b772:	4252      	negs	r2, r2
 801b774:	64da      	str	r2, [r3, #76]	@ 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface;
 801b776:	193b      	adds	r3, r7, r4
 801b778:	681b      	ldr	r3, [r3, #0]
 801b77a:	22b4      	movs	r2, #180	@ 0xb4
 801b77c:	18ba      	adds	r2, r7, r2
 801b77e:	6812      	ldr	r2, [r2, #0]
 801b780:	629a      	str	r2, [r3, #40]	@ 0x28
                                    endpoint -> ux_slave_endpoint_device =  device;
 801b782:	193b      	adds	r3, r7, r4
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	2298      	movs	r2, #152	@ 0x98
 801b788:	18ba      	adds	r2, r7, r2
 801b78a:	6812      	ldr	r2, [r2, #0]
 801b78c:	62da      	str	r2, [r3, #44]	@ 0x2c
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 801b78e:	2194      	movs	r1, #148	@ 0x94
 801b790:	187b      	adds	r3, r7, r1
 801b792:	681b      	ldr	r3, [r3, #0]
 801b794:	699b      	ldr	r3, [r3, #24]
 801b796:	193a      	adds	r2, r7, r4
 801b798:	6812      	ldr	r2, [r2, #0]
 801b79a:	1879      	adds	r1, r7, r1
 801b79c:	6808      	ldr	r0, [r1, #0]
 801b79e:	210e      	movs	r1, #14
 801b7a0:	4798      	blx	r3
 801b7a2:	0003      	movs	r3, r0
 801b7a4:	2184      	movs	r1, #132	@ 0x84
 801b7a6:	187a      	adds	r2, r7, r1
 801b7a8:	6013      	str	r3, [r2, #0]
                                    if (status != UX_SUCCESS)
 801b7aa:	187b      	adds	r3, r7, r1
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	d00e      	beq.n	801b7d0 <_ux_device_stack_alternate_setting_set+0x390>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 801b7b2:	193b      	adds	r3, r7, r4
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	2200      	movs	r2, #0
 801b7b8:	601a      	str	r2, [r3, #0]
                                        return(status);
 801b7ba:	187b      	adds	r3, r7, r1
 801b7bc:	681b      	ldr	r3, [r3, #0]
 801b7be:	e0c0      	b.n	801b942 <_ux_device_stack_alternate_setting_set+0x502>
 801b7c0:	20011854 	.word	0x20011854
 801b7c4:	2000002c 	.word	0x2000002c
 801b7c8:	20000034 	.word	0x20000034
 801b7cc:	20000014 	.word	0x20000014
                                    if (interface -> ux_slave_interface_first_endpoint == UX_NULL)
 801b7d0:	22b4      	movs	r2, #180	@ 0xb4
 801b7d2:	18bb      	adds	r3, r7, r2
 801b7d4:	681b      	ldr	r3, [r3, #0]
 801b7d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d106      	bne.n	801b7ea <_ux_device_stack_alternate_setting_set+0x3aa>
                                        interface -> ux_slave_interface_first_endpoint =  endpoint;
 801b7dc:	18bb      	adds	r3, r7, r2
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	22a8      	movs	r2, #168	@ 0xa8
 801b7e2:	18ba      	adds	r2, r7, r2
 801b7e4:	6812      	ldr	r2, [r2, #0]
 801b7e6:	635a      	str	r2, [r3, #52]	@ 0x34
                                    break;
 801b7e8:	e022      	b.n	801b830 <_ux_device_stack_alternate_setting_set+0x3f0>
                                        endpoint_link =  interface -> ux_slave_interface_first_endpoint;
 801b7ea:	23b4      	movs	r3, #180	@ 0xb4
 801b7ec:	18fb      	adds	r3, r7, r3
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b7f2:	22a4      	movs	r2, #164	@ 0xa4
 801b7f4:	18ba      	adds	r2, r7, r2
 801b7f6:	6013      	str	r3, [r2, #0]
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 801b7f8:	e005      	b.n	801b806 <_ux_device_stack_alternate_setting_set+0x3c6>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 801b7fa:	22a4      	movs	r2, #164	@ 0xa4
 801b7fc:	18bb      	adds	r3, r7, r2
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b802:	18ba      	adds	r2, r7, r2
 801b804:	6013      	str	r3, [r2, #0]
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 801b806:	22a4      	movs	r2, #164	@ 0xa4
 801b808:	18bb      	adds	r3, r7, r2
 801b80a:	681b      	ldr	r3, [r3, #0]
 801b80c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d1f3      	bne.n	801b7fa <_ux_device_stack_alternate_setting_set+0x3ba>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 801b812:	18bb      	adds	r3, r7, r2
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	22a8      	movs	r2, #168	@ 0xa8
 801b818:	18ba      	adds	r2, r7, r2
 801b81a:	6812      	ldr	r2, [r2, #0]
 801b81c:	625a      	str	r2, [r3, #36]	@ 0x24
                                    break;
 801b81e:	e007      	b.n	801b830 <_ux_device_stack_alternate_setting_set+0x3f0>
                                    device_framework_length =  descriptor_length;
 801b820:	2390      	movs	r3, #144	@ 0x90
 801b822:	18fb      	adds	r3, r7, r3
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	22ac      	movs	r2, #172	@ 0xac
 801b828:	18ba      	adds	r2, r7, r2
 801b82a:	6013      	str	r3, [r2, #0]
                                    break;
 801b82c:	e000      	b.n	801b830 <_ux_device_stack_alternate_setting_set+0x3f0>
                                    break;
 801b82e:	46c0      	nop			@ (mov r8, r8)
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 801b830:	21ac      	movs	r1, #172	@ 0xac
 801b832:	187b      	adds	r3, r7, r1
 801b834:	681a      	ldr	r2, [r3, #0]
 801b836:	2090      	movs	r0, #144	@ 0x90
 801b838:	183b      	adds	r3, r7, r0
 801b83a:	681b      	ldr	r3, [r3, #0]
 801b83c:	1ad3      	subs	r3, r2, r3
 801b83e:	187a      	adds	r2, r7, r1
 801b840:	6013      	str	r3, [r2, #0]
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 801b842:	21b0      	movs	r1, #176	@ 0xb0
 801b844:	187b      	adds	r3, r7, r1
 801b846:	681a      	ldr	r2, [r3, #0]
 801b848:	183b      	adds	r3, r7, r0
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	18d3      	adds	r3, r2, r3
 801b84e:	187a      	adds	r2, r7, r1
 801b850:	6013      	str	r3, [r2, #0]
                            while (device_framework_length != 0)
 801b852:	23ac      	movs	r3, #172	@ 0xac
 801b854:	18fb      	adds	r3, r7, r3
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d000      	beq.n	801b85e <_ux_device_stack_alternate_setting_set+0x41e>
 801b85c:	e6ee      	b.n	801b63c <_ux_device_stack_alternate_setting_set+0x1fc>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 801b85e:	24b4      	movs	r4, #180	@ 0xb4
 801b860:	193b      	adds	r3, r7, r4
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	330c      	adds	r3, #12
 801b866:	2234      	movs	r2, #52	@ 0x34
 801b868:	18b9      	adds	r1, r7, r2
 801b86a:	2224      	movs	r2, #36	@ 0x24
 801b86c:	0018      	movs	r0, r3
 801b86e:	f7fc fcbb 	bl	80181e8 <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class =  _ux_system_slave -> ux_system_slave_interface_class_array[interface -> ux_slave_interface_descriptor.bInterfaceNumber];
 801b872:	4b36      	ldr	r3, [pc, #216]	@ (801b94c <_ux_device_stack_alternate_setting_set+0x50c>)
 801b874:	681a      	ldr	r2, [r3, #0]
 801b876:	193b      	adds	r3, r7, r4
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	695b      	ldr	r3, [r3, #20]
 801b87c:	3358      	adds	r3, #88	@ 0x58
 801b87e:	009b      	lsls	r3, r3, #2
 801b880:	589b      	ldr	r3, [r3, r2]
 801b882:	2288      	movs	r2, #136	@ 0x88
 801b884:	18b9      	adds	r1, r7, r2
 801b886:	600b      	str	r3, [r1, #0]

                            /* Check if class driver is available. */
                            if (class == UX_NULL || class -> ux_slave_class_status == UX_UNUSED)
 801b888:	18bb      	adds	r3, r7, r2
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d004      	beq.n	801b89a <_ux_device_stack_alternate_setting_set+0x45a>
 801b890:	18bb      	adds	r3, r7, r2
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b896:	2b00      	cmp	r3, #0
 801b898:	d101      	bne.n	801b89e <_ux_device_stack_alternate_setting_set+0x45e>
                            {

                                return (UX_NO_CLASS_MATCH);
 801b89a:	2357      	movs	r3, #87	@ 0x57
 801b89c:	e051      	b.n	801b942 <_ux_device_stack_alternate_setting_set+0x502>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 801b89e:	2008      	movs	r0, #8
 801b8a0:	183b      	adds	r3, r7, r0
 801b8a2:	2206      	movs	r2, #6
 801b8a4:	601a      	str	r2, [r3, #0]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface;
 801b8a6:	183b      	adds	r3, r7, r0
 801b8a8:	21b4      	movs	r1, #180	@ 0xb4
 801b8aa:	187a      	adds	r2, r7, r1
 801b8ac:	6812      	ldr	r2, [r2, #0]
 801b8ae:	609a      	str	r2, [r3, #8]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class;
 801b8b0:	183b      	adds	r3, r7, r0
 801b8b2:	2488      	movs	r4, #136	@ 0x88
 801b8b4:	193a      	adds	r2, r7, r4
 801b8b6:	6812      	ldr	r2, [r2, #0]
 801b8b8:	621a      	str	r2, [r3, #32]
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class -> ux_slave_class_interface = interface;
 801b8ba:	193b      	adds	r3, r7, r4
 801b8bc:	681a      	ldr	r2, [r3, #0]
 801b8be:	2388      	movs	r3, #136	@ 0x88
 801b8c0:	005b      	lsls	r3, r3, #1
 801b8c2:	1879      	adds	r1, r7, r1
 801b8c4:	6809      	ldr	r1, [r1, #0]
 801b8c6:	50d1      	str	r1, [r2, r3]
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class -> ux_slave_class_entry_function(&class_command);
 801b8c8:	193b      	adds	r3, r7, r4
 801b8ca:	681b      	ldr	r3, [r3, #0]
 801b8cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b8ce:	183a      	adds	r2, r7, r0
 801b8d0:	0010      	movs	r0, r2
 801b8d2:	4798      	blx	r3
 801b8d4:	0003      	movs	r3, r0
 801b8d6:	2284      	movs	r2, #132	@ 0x84
 801b8d8:	18b9      	adds	r1, r7, r2
 801b8da:	600b      	str	r3, [r1, #0]

                            /* We are done here.  */
                            return(status); 
 801b8dc:	18bb      	adds	r3, r7, r2
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	e02f      	b.n	801b942 <_ux_device_stack_alternate_setting_set+0x502>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 801b8e2:	21ac      	movs	r1, #172	@ 0xac
 801b8e4:	187b      	adds	r3, r7, r1
 801b8e6:	681a      	ldr	r2, [r3, #0]
 801b8e8:	2090      	movs	r0, #144	@ 0x90
 801b8ea:	183b      	adds	r3, r7, r0
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	1ad3      	subs	r3, r2, r3
 801b8f0:	187a      	adds	r2, r7, r1
 801b8f2:	6013      	str	r3, [r2, #0]

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 801b8f4:	21b0      	movs	r1, #176	@ 0xb0
 801b8f6:	187b      	adds	r3, r7, r1
 801b8f8:	681a      	ldr	r2, [r3, #0]
 801b8fa:	183b      	adds	r3, r7, r0
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	18d3      	adds	r3, r2, r3
 801b900:	187a      	adds	r2, r7, r1
 801b902:	6013      	str	r3, [r2, #0]
                while (device_framework_length != 0)
 801b904:	23ac      	movs	r3, #172	@ 0xac
 801b906:	18fb      	adds	r3, r7, r3
 801b908:	681b      	ldr	r3, [r3, #0]
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	d000      	beq.n	801b910 <_ux_device_stack_alternate_setting_set+0x4d0>
 801b90e:	e61b      	b.n	801b548 <_ux_device_stack_alternate_setting_set+0x108>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 801b910:	e016      	b.n	801b940 <_ux_device_stack_alternate_setting_set+0x500>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 801b912:	21ac      	movs	r1, #172	@ 0xac
 801b914:	187b      	adds	r3, r7, r1
 801b916:	681a      	ldr	r2, [r3, #0]
 801b918:	2090      	movs	r0, #144	@ 0x90
 801b91a:	183b      	adds	r3, r7, r0
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	1ad3      	subs	r3, r2, r3
 801b920:	187a      	adds	r2, r7, r1
 801b922:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 801b924:	21b0      	movs	r1, #176	@ 0xb0
 801b926:	187b      	adds	r3, r7, r1
 801b928:	681a      	ldr	r2, [r3, #0]
 801b92a:	183b      	adds	r3, r7, r0
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	18d3      	adds	r3, r2, r3
 801b930:	187a      	adds	r2, r7, r1
 801b932:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 801b934:	23ac      	movs	r3, #172	@ 0xac
 801b936:	18fb      	adds	r3, r7, r3
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	d000      	beq.n	801b940 <_ux_device_stack_alternate_setting_set+0x500>
 801b93e:	e5d8      	b.n	801b4f2 <_ux_device_stack_alternate_setting_set+0xb2>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 801b940:	23ff      	movs	r3, #255	@ 0xff
#endif
}
 801b942:	0018      	movs	r0, r3
 801b944:	46bd      	mov	sp, r7
 801b946:	b02f      	add	sp, #188	@ 0xbc
 801b948:	bd90      	pop	{r4, r7, pc}
 801b94a:	46c0      	nop			@ (mov r8, r8)
 801b94c:	20011854 	.word	0x20011854

0801b950 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 801b950:	b580      	push	{r7, lr}
 801b952:	b094      	sub	sp, #80	@ 0x50
 801b954:	af00      	add	r7, sp, #0
 801b956:	60f8      	str	r0, [r7, #12]
 801b958:	60b9      	str	r1, [r7, #8]
 801b95a:	607a      	str	r2, [r7, #4]
 801b95c:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 801b95e:	2300      	movs	r3, #0
 801b960:	617b      	str	r3, [r7, #20]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 801b962:	2314      	movs	r3, #20
 801b964:	18f9      	adds	r1, r7, r3
 801b966:	68fb      	ldr	r3, [r7, #12]
 801b968:	223f      	movs	r2, #63	@ 0x3f
 801b96a:	0018      	movs	r0, r3
 801b96c:	f7fc fe6a 	bl	8018644 <_ux_utility_string_length_check>
 801b970:	0003      	movs	r3, r0
 801b972:	647b      	str	r3, [r7, #68]	@ 0x44
    if (status)
 801b974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b976:	2b00      	cmp	r3, #0
 801b978:	d001      	beq.n	801b97e <_ux_device_stack_class_register+0x2e>
        return(status);
 801b97a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b97c:	e04f      	b.n	801ba1e <_ux_device_stack_class_register+0xce>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 801b97e:	4b2a      	ldr	r3, [pc, #168]	@ (801ba28 <_ux_device_stack_class_register+0xd8>)
 801b980:	681a      	ldr	r2, [r3, #0]
 801b982:	23ae      	movs	r3, #174	@ 0xae
 801b984:	005b      	lsls	r3, r3, #1
 801b986:	58d3      	ldr	r3, [r2, r3]
 801b988:	64fb      	str	r3, [r7, #76]	@ 0x4c

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
    /* We need to parse the class table to find an empty spot.  */
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801b98a:	2300      	movs	r3, #0
 801b98c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b98e:	e03d      	b.n	801ba0c <_ux_device_stack_class_register+0xbc>
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 801b990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b994:	2b00      	cmp	r3, #0
 801b996:	d132      	bne.n	801b9fe <_ux_device_stack_class_register+0xae>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 801b998:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b99a:	697b      	ldr	r3, [r7, #20]
 801b99c:	1c5a      	adds	r2, r3, #1
 801b99e:	68fb      	ldr	r3, [r7, #12]
 801b9a0:	0019      	movs	r1, r3
 801b9a2:	f7fc fc21 	bl	80181e8 <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 801b9a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b9a8:	68ba      	ldr	r2, [r7, #8]
 801b9aa:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 801b9ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b9ae:	2382      	movs	r3, #130	@ 0x82
 801b9b0:	005b      	lsls	r3, r3, #1
 801b9b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b9b4:	50d1      	str	r1, [r2, r3]
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 801b9b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b9b8:	2386      	movs	r3, #134	@ 0x86
 801b9ba:	005b      	lsls	r3, r3, #1
 801b9bc:	6879      	ldr	r1, [r7, #4]
 801b9be:	50d1      	str	r1, [r2, r3]
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 801b9c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b9c2:	2384      	movs	r3, #132	@ 0x84
 801b9c4:	005b      	lsls	r3, r3, #1
 801b9c6:	6839      	ldr	r1, [r7, #0]
 801b9c8:	50d1      	str	r1, [r2, r3]
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 801b9ca:	2118      	movs	r1, #24
 801b9cc:	187b      	adds	r3, r7, r1
 801b9ce:	2205      	movs	r2, #5
 801b9d0:	601a      	str	r2, [r3, #0]
            command.ux_slave_class_command_parameter  =  parameter;
 801b9d2:	187b      	adds	r3, r7, r1
 801b9d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b9d6:	625a      	str	r2, [r3, #36]	@ 0x24
            command.ux_slave_class_command_class_ptr  =  class_inst;
 801b9d8:	187b      	adds	r3, r7, r1
 801b9da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b9dc:	621a      	str	r2, [r3, #32]

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 801b9de:	187a      	adds	r2, r7, r1
 801b9e0:	68bb      	ldr	r3, [r7, #8]
 801b9e2:	0010      	movs	r0, r2
 801b9e4:	4798      	blx	r3
 801b9e6:	0003      	movs	r3, r0
 801b9e8:	647b      	str	r3, [r7, #68]	@ 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 801b9ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d001      	beq.n	801b9f4 <_ux_device_stack_class_register+0xa4>
                return(status);
 801b9f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b9f2:	e014      	b.n	801ba1e <_ux_device_stack_class_register+0xce>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 801b9f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b9f6:	2201      	movs	r2, #1
 801b9f8:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 801b9fa:	2300      	movs	r3, #0
 801b9fc:	e00f      	b.n	801ba1e <_ux_device_stack_class_register+0xce>
        }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
        /* Move to the next class.  */
        class_inst ++;
 801b9fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ba00:	3315      	adds	r3, #21
 801ba02:	33ff      	adds	r3, #255	@ 0xff
 801ba04:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801ba06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ba08:	3301      	adds	r3, #1
 801ba0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ba0c:	4b06      	ldr	r3, [pc, #24]	@ (801ba28 <_ux_device_stack_class_register+0xd8>)
 801ba0e:	681a      	ldr	r2, [r3, #0]
 801ba10:	23ac      	movs	r3, #172	@ 0xac
 801ba12:	005b      	lsls	r3, r3, #1
 801ba14:	58d3      	ldr	r3, [r2, r3]
 801ba16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ba18:	429a      	cmp	r2, r3
 801ba1a:	d3b9      	bcc.n	801b990 <_ux_device_stack_class_register+0x40>
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 801ba1c:	2312      	movs	r3, #18
}
 801ba1e:	0018      	movs	r0, r3
 801ba20:	46bd      	mov	sp, r7
 801ba22:	b014      	add	sp, #80	@ 0x50
 801ba24:	bd80      	pop	{r7, pc}
 801ba26:	46c0      	nop			@ (mov r8, r8)
 801ba28:	20011854 	.word	0x20011854

0801ba2c <_ux_device_stack_clear_feature>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b08a      	sub	sp, #40	@ 0x28
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	60f8      	str	r0, [r7, #12]
 801ba34:	60b9      	str	r1, [r7, #8]
 801ba36:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801ba38:	4b2b      	ldr	r3, [pc, #172]	@ (801bae8 <_ux_device_stack_clear_feature+0xbc>)
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801ba3e:	4b2a      	ldr	r3, [pc, #168]	@ (801bae8 <_ux_device_stack_clear_feature+0xbc>)
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	3320      	adds	r3, #32
 801ba44:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801ba46:	69bb      	ldr	r3, [r7, #24]
 801ba48:	333c      	adds	r3, #60	@ 0x3c
 801ba4a:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	2203      	movs	r2, #3
 801ba50:	4013      	ands	r3, r2
 801ba52:	d002      	beq.n	801ba5a <_ux_device_stack_clear_feature+0x2e>
 801ba54:	2b02      	cmp	r3, #2
 801ba56:	d013      	beq.n	801ba80 <_ux_device_stack_clear_feature+0x54>
 801ba58:	e037      	b.n	801baca <_ux_device_stack_clear_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 801ba5a:	68bb      	ldr	r3, [r7, #8]
 801ba5c:	2b01      	cmp	r3, #1
 801ba5e:	d13c      	bne.n	801bada <_ux_device_stack_clear_feature+0xae>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 801ba60:	4b21      	ldr	r3, [pc, #132]	@ (801bae8 <_ux_device_stack_clear_feature+0xbc>)
 801ba62:	681a      	ldr	r2, [r3, #0]
 801ba64:	23d4      	movs	r3, #212	@ 0xd4
 801ba66:	005b      	lsls	r3, r3, #1
 801ba68:	58d3      	ldr	r3, [r2, r3]
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	d006      	beq.n	801ba7c <_ux_device_stack_clear_feature+0x50>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 801ba6e:	4b1e      	ldr	r3, [pc, #120]	@ (801bae8 <_ux_device_stack_clear_feature+0xbc>)
 801ba70:	681a      	ldr	r2, [r3, #0]
 801ba72:	23d6      	movs	r3, #214	@ 0xd6
 801ba74:	005b      	lsls	r3, r3, #1
 801ba76:	2100      	movs	r1, #0
 801ba78:	50d1      	str	r1, [r2, r3]

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 801ba7a:	e02e      	b.n	801bada <_ux_device_stack_clear_feature+0xae>
                return (UX_FUNCTION_NOT_SUPPORTED);
 801ba7c:	2354      	movs	r3, #84	@ 0x54
 801ba7e:	e02e      	b.n	801bade <_ux_device_stack_clear_feature+0xb2>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface =  device -> ux_slave_device_first_interface;
 801ba80:	69bb      	ldr	r3, [r7, #24]
 801ba82:	22f0      	movs	r2, #240	@ 0xf0
 801ba84:	589b      	ldr	r3, [r3, r2]
 801ba86:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface != UX_NULL)
 801ba88:	e01c      	b.n	801bac4 <_ux_device_stack_clear_feature+0x98>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 801ba8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ba8e:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 801ba90:	e012      	b.n	801bab8 <_ux_device_stack_clear_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 801ba92:	6a3b      	ldr	r3, [r7, #32]
 801ba94:	695b      	ldr	r3, [r3, #20]
 801ba96:	687a      	ldr	r2, [r7, #4]
 801ba98:	429a      	cmp	r2, r3
 801ba9a:	d10a      	bne.n	801bab2 <_ux_device_stack_clear_feature+0x86>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 801ba9c:	69fb      	ldr	r3, [r7, #28]
 801ba9e:	699b      	ldr	r3, [r3, #24]
 801baa0:	6a3a      	ldr	r2, [r7, #32]
 801baa2:	69f8      	ldr	r0, [r7, #28]
 801baa4:	2110      	movs	r1, #16
 801baa6:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 801baa8:	6a3b      	ldr	r3, [r7, #32]
 801baaa:	2200      	movs	r2, #0
 801baac:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 801baae:	2300      	movs	r3, #0
 801bab0:	e015      	b.n	801bade <_ux_device_stack_clear_feature+0xb2>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 801bab2:	6a3b      	ldr	r3, [r7, #32]
 801bab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bab6:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 801bab8:	6a3b      	ldr	r3, [r7, #32]
 801baba:	2b00      	cmp	r3, #0
 801babc:	d1e9      	bne.n	801ba92 <_ux_device_stack_clear_feature+0x66>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 801babe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bac2:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface != UX_NULL)
 801bac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d1df      	bne.n	801ba8a <_ux_device_stack_clear_feature+0x5e>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801baca:	69fb      	ldr	r3, [r7, #28]
 801bacc:	699b      	ldr	r3, [r3, #24]
 801bace:	697a      	ldr	r2, [r7, #20]
 801bad0:	69f8      	ldr	r0, [r7, #28]
 801bad2:	2114      	movs	r1, #20
 801bad4:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 801bad6:	2300      	movs	r3, #0
 801bad8:	e001      	b.n	801bade <_ux_device_stack_clear_feature+0xb2>
        break;
 801bada:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 801badc:	2300      	movs	r3, #0
}
 801bade:	0018      	movs	r0, r3
 801bae0:	46bd      	mov	sp, r7
 801bae2:	b00a      	add	sp, #40	@ 0x28
 801bae4:	bd80      	pop	{r7, pc}
 801bae6:	46c0      	nop			@ (mov r8, r8)
 801bae8:	20011854 	.word	0x20011854

0801baec <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 801baec:	b580      	push	{r7, lr}
 801baee:	b084      	sub	sp, #16
 801baf0:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801baf2:	4b10      	ldr	r3, [pc, #64]	@ (801bb34 <_ux_device_stack_configuration_get+0x48>)
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	3320      	adds	r3, #32
 801baf8:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801bafa:	68fb      	ldr	r3, [r7, #12]
 801bafc:	333c      	adds	r3, #60	@ 0x3c
 801bafe:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801bb00:	68bb      	ldr	r3, [r7, #8]
 801bb02:	3330      	adds	r3, #48	@ 0x30
 801bb04:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	22cc      	movs	r2, #204	@ 0xcc
 801bb0a:	589a      	ldr	r2, [r3, r2]
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 801bb10:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 801bb12:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	2203      	movs	r2, #3
 801bb18:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	2201      	movs	r2, #1
 801bb1e:	2101      	movs	r1, #1
 801bb20:	0018      	movs	r0, r3
 801bb22:	f001 fb27 	bl	801d174 <_ux_device_stack_transfer_request>
 801bb26:	0003      	movs	r3, r0
 801bb28:	603b      	str	r3, [r7, #0]

    /* Return the function status.  */
    return(status);
 801bb2a:	683b      	ldr	r3, [r7, #0]
}
 801bb2c:	0018      	movs	r0, r3
 801bb2e:	46bd      	mov	sp, r7
 801bb30:	b004      	add	sp, #16
 801bb32:	bd80      	pop	{r7, pc}
 801bb34:	20011854 	.word	0x20011854

0801bb38 <_ux_device_stack_configuration_set>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 801bb38:	b590      	push	{r4, r7, lr}
 801bb3a:	b0ad      	sub	sp, #180	@ 0xb4
 801bb3c:	af00      	add	r7, sp, #0
 801bb3e:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 801bb40:	2358      	movs	r3, #88	@ 0x58
 801bb42:	18fb      	adds	r3, r7, r3
 801bb44:	0018      	movs	r0, r3
 801bb46:	2320      	movs	r3, #32
 801bb48:	001a      	movs	r2, r3
 801bb4a:	2100      	movs	r1, #0
 801bb4c:	f003 f96e 	bl	801ee2c <memset>
UX_SLAVE_INTERFACE              *interface; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 801bb50:	2300      	movs	r3, #0
 801bb52:	229c      	movs	r2, #156	@ 0x9c
 801bb54:	18ba      	adds	r2, r7, r2
 801bb56:	6013      	str	r3, [r2, #0]
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 801bb58:	2300      	movs	r3, #0
 801bb5a:	2294      	movs	r2, #148	@ 0x94
 801bb5c:	18ba      	adds	r2, r7, r2
 801bb5e:	6013      	str	r3, [r2, #0]
ULONG                           iad_number_interfaces =  0;
 801bb60:	2300      	movs	r3, #0
 801bb62:	2290      	movs	r2, #144	@ 0x90
 801bb64:	18ba      	adds	r2, r7, r2
 801bb66:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801bb68:	4bd4      	ldr	r3, [pc, #848]	@ (801bebc <_ux_device_stack_configuration_set+0x384>)
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	2288      	movs	r2, #136	@ 0x88
 801bb6e:	18ba      	adds	r2, r7, r2
 801bb70:	6013      	str	r3, [r2, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801bb72:	4bd2      	ldr	r3, [pc, #840]	@ (801bebc <_ux_device_stack_configuration_set+0x384>)
 801bb74:	681b      	ldr	r3, [r3, #0]
 801bb76:	3320      	adds	r3, #32
 801bb78:	2284      	movs	r2, #132	@ 0x84
 801bb7a:	18b9      	adds	r1, r7, r2
 801bb7c:	600b      	str	r3, [r1, #0]
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 801bb7e:	2300      	movs	r3, #0
 801bb80:	2198      	movs	r1, #152	@ 0x98
 801bb82:	1879      	adds	r1, r7, r1
 801bb84:	600b      	str	r3, [r1, #0]

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 801bb86:	18bb      	adds	r3, r7, r2
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	22cc      	movs	r2, #204	@ 0xcc
 801bb8c:	589b      	ldr	r3, [r3, r2]
 801bb8e:	687a      	ldr	r2, [r7, #4]
 801bb90:	429a      	cmp	r2, r3
 801bb92:	d101      	bne.n	801bb98 <_ux_device_stack_configuration_set+0x60>
        return(UX_SUCCESS);
 801bb94:	2300      	movs	r3, #0
 801bb96:	e202      	b.n	801bf9e <_ux_device_stack_configuration_set+0x466>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 801bb98:	4bc8      	ldr	r3, [pc, #800]	@ (801bebc <_ux_device_stack_configuration_set+0x384>)
 801bb9a:	681a      	ldr	r2, [r3, #0]
 801bb9c:	2394      	movs	r3, #148	@ 0x94
 801bb9e:	005b      	lsls	r3, r3, #1
 801bba0:	58d3      	ldr	r3, [r2, r3]
 801bba2:	22ac      	movs	r2, #172	@ 0xac
 801bba4:	18ba      	adds	r2, r7, r2
 801bba6:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 801bba8:	4bc4      	ldr	r3, [pc, #784]	@ (801bebc <_ux_device_stack_configuration_set+0x384>)
 801bbaa:	681a      	ldr	r2, [r3, #0]
 801bbac:	2396      	movs	r3, #150	@ 0x96
 801bbae:	005b      	lsls	r3, r3, #1
 801bbb0:	58d3      	ldr	r3, [r2, r3]
 801bbb2:	22a8      	movs	r2, #168	@ 0xa8
 801bbb4:	18ba      	adds	r2, r7, r2
 801bbb6:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 801bbb8:	e02e      	b.n	801bc18 <_ux_device_stack_configuration_set+0xe0>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 801bbba:	20ac      	movs	r0, #172	@ 0xac
 801bbbc:	183b      	adds	r3, r7, r0
 801bbbe:	681b      	ldr	r3, [r3, #0]
 801bbc0:	781b      	ldrb	r3, [r3, #0]
 801bbc2:	2280      	movs	r2, #128	@ 0x80
 801bbc4:	18ba      	adds	r2, r7, r2
 801bbc6:	6013      	str	r3, [r2, #0]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 801bbc8:	217f      	movs	r1, #127	@ 0x7f
 801bbca:	187b      	adds	r3, r7, r1
 801bbcc:	183a      	adds	r2, r7, r0
 801bbce:	6812      	ldr	r2, [r2, #0]
 801bbd0:	7852      	ldrb	r2, [r2, #1]
 801bbd2:	701a      	strb	r2, [r3, #0]

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 801bbd4:	187b      	adds	r3, r7, r1
 801bbd6:	781b      	ldrb	r3, [r3, #0]
 801bbd8:	2b02      	cmp	r3, #2
 801bbda:	d10c      	bne.n	801bbf6 <_ux_device_stack_configuration_set+0xbe>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 801bbdc:	2458      	movs	r4, #88	@ 0x58
 801bbde:	193b      	adds	r3, r7, r4
 801bbe0:	49b7      	ldr	r1, [pc, #732]	@ (801bec0 <_ux_device_stack_configuration_set+0x388>)
 801bbe2:	183a      	adds	r2, r7, r0
 801bbe4:	6810      	ldr	r0, [r2, #0]
 801bbe6:	2208      	movs	r2, #8
 801bbe8:	f7fc f88f 	bl	8017d0a <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 801bbec:	193b      	adds	r3, r7, r4
 801bbee:	691b      	ldr	r3, [r3, #16]
 801bbf0:	687a      	ldr	r2, [r7, #4]
 801bbf2:	429a      	cmp	r2, r3
 801bbf4:	d016      	beq.n	801bc24 <_ux_device_stack_configuration_set+0xec>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 801bbf6:	21a8      	movs	r1, #168	@ 0xa8
 801bbf8:	187b      	adds	r3, r7, r1
 801bbfa:	681a      	ldr	r2, [r3, #0]
 801bbfc:	2080      	movs	r0, #128	@ 0x80
 801bbfe:	183b      	adds	r3, r7, r0
 801bc00:	681b      	ldr	r3, [r3, #0]
 801bc02:	1ad3      	subs	r3, r2, r3
 801bc04:	187a      	adds	r2, r7, r1
 801bc06:	6013      	str	r3, [r2, #0]
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 801bc08:	21ac      	movs	r1, #172	@ 0xac
 801bc0a:	187b      	adds	r3, r7, r1
 801bc0c:	681a      	ldr	r2, [r3, #0]
 801bc0e:	183b      	adds	r3, r7, r0
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	18d3      	adds	r3, r2, r3
 801bc14:	187a      	adds	r2, r7, r1
 801bc16:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 801bc18:	23a8      	movs	r3, #168	@ 0xa8
 801bc1a:	18fb      	adds	r3, r7, r3
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d1cb      	bne.n	801bbba <_ux_device_stack_configuration_set+0x82>
 801bc22:	e000      	b.n	801bc26 <_ux_device_stack_configuration_set+0xee>
                break;
 801bc24:	46c0      	nop			@ (mov r8, r8)
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 801bc26:	23a8      	movs	r3, #168	@ 0xa8
 801bc28:	18fb      	adds	r3, r7, r3
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d104      	bne.n	801bc3a <_ux_device_stack_configuration_set+0x102>
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d001      	beq.n	801bc3a <_ux_device_stack_configuration_set+0x102>
        return(UX_ERROR);
 801bc36:	23ff      	movs	r3, #255	@ 0xff
 801bc38:	e1b1      	b.n	801bf9e <_ux_device_stack_configuration_set+0x466>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 801bc3a:	2184      	movs	r1, #132	@ 0x84
 801bc3c:	187b      	adds	r3, r7, r1
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	22cc      	movs	r2, #204	@ 0xcc
 801bc42:	589b      	ldr	r3, [r3, r2]
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	d038      	beq.n	801bcba <_ux_device_stack_configuration_set+0x182>
    {

        /* Get the pointer to the first interface.  */
        interface =  device -> ux_slave_device_first_interface;
 801bc48:	187b      	adds	r3, r7, r1
 801bc4a:	681b      	ldr	r3, [r3, #0]
 801bc4c:	22f0      	movs	r2, #240	@ 0xf0
 801bc4e:	589b      	ldr	r3, [r3, r2]
 801bc50:	22a4      	movs	r2, #164	@ 0xa4
 801bc52:	18ba      	adds	r2, r7, r2
 801bc54:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface != UX_NULL)
 801bc56:	e02b      	b.n	801bcb0 <_ux_device_stack_configuration_set+0x178>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 801bc58:	2108      	movs	r1, #8
 801bc5a:	187b      	adds	r3, r7, r1
 801bc5c:	2203      	movs	r2, #3
 801bc5e:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface;
 801bc60:	187b      	adds	r3, r7, r1
 801bc62:	20a4      	movs	r0, #164	@ 0xa4
 801bc64:	183a      	adds	r2, r7, r0
 801bc66:	6812      	ldr	r2, [r2, #0]
 801bc68:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface -> ux_slave_interface_class;
 801bc6a:	183b      	adds	r3, r7, r0
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	685b      	ldr	r3, [r3, #4]
 801bc70:	22a0      	movs	r2, #160	@ 0xa0
 801bc72:	18b8      	adds	r0, r7, r2
 801bc74:	6003      	str	r3, [r0, #0]

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 801bc76:	187b      	adds	r3, r7, r1
 801bc78:	0010      	movs	r0, r2
 801bc7a:	18ba      	adds	r2, r7, r2
 801bc7c:	6812      	ldr	r2, [r2, #0]
 801bc7e:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 801bc80:	0002      	movs	r2, r0
 801bc82:	18bb      	adds	r3, r7, r2
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d005      	beq.n	801bc96 <_ux_device_stack_configuration_set+0x15e>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 801bc8a:	18bb      	adds	r3, r7, r2
 801bc8c:	681b      	ldr	r3, [r3, #0]
 801bc8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bc90:	187a      	adds	r2, r7, r1
 801bc92:	0010      	movs	r0, r2
 801bc94:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface -> ux_slave_interface_next_interface;
 801bc96:	24a4      	movs	r4, #164	@ 0xa4
 801bc98:	193b      	adds	r3, r7, r4
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bc9e:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface);
 801bca0:	193b      	adds	r3, r7, r4
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	0018      	movs	r0, r3
 801bca6:	f000 ffff 	bl	801cca8 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface =  next_interface;
 801bcaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801bcac:	193a      	adds	r2, r7, r4
 801bcae:	6013      	str	r3, [r2, #0]
        while (interface != UX_NULL)
 801bcb0:	23a4      	movs	r3, #164	@ 0xa4
 801bcb2:	18fb      	adds	r3, r7, r3
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d1ce      	bne.n	801bc58 <_ux_device_stack_configuration_set+0x120>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 801bcba:	2084      	movs	r0, #132	@ 0x84
 801bcbc:	183b      	adds	r3, r7, r0
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	22cc      	movs	r2, #204	@ 0xcc
 801bcc2:	2100      	movs	r1, #0
 801bcc4:	5099      	str	r1, [r3, r2]

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801bcc6:	183b      	adds	r3, r7, r0
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	2201      	movs	r2, #1
 801bccc:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 801bcce:	2288      	movs	r2, #136	@ 0x88
 801bcd0:	18bb      	adds	r3, r7, r2
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	699b      	ldr	r3, [r3, #24]
 801bcd6:	18ba      	adds	r2, r7, r2
 801bcd8:	6810      	ldr	r0, [r2, #0]
 801bcda:	2201      	movs	r2, #1
 801bcdc:	2113      	movs	r1, #19
 801bcde:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d101      	bne.n	801bcea <_ux_device_stack_configuration_set+0x1b2>
        return(UX_SUCCESS);
 801bce6:	2300      	movs	r3, #0
 801bce8:	e159      	b.n	801bf9e <_ux_device_stack_configuration_set+0x466>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 801bcea:	2084      	movs	r0, #132	@ 0x84
 801bcec:	183b      	adds	r3, r7, r0
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	21cc      	movs	r1, #204	@ 0xcc
 801bcf2:	687a      	ldr	r2, [r7, #4]
 801bcf4:	505a      	str	r2, [r3, r1]
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 801bcf6:	183b      	adds	r3, r7, r0
 801bcf8:	681b      	ldr	r3, [r3, #0]
 801bcfa:	33d0      	adds	r3, #208	@ 0xd0
    _ux_utility_descriptor_parse(device_framework,
 801bcfc:	4970      	ldr	r1, [pc, #448]	@ (801bec0 <_ux_device_stack_configuration_set+0x388>)
 801bcfe:	22ac      	movs	r2, #172	@ 0xac
 801bd00:	18ba      	adds	r2, r7, r2
 801bd02:	6810      	ldr	r0, [r2, #0]
 801bd04:	2208      	movs	r2, #8
 801bd06:	f7fc f800 	bl	8017d0a <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 801bd0a:	2358      	movs	r3, #88	@ 0x58
 801bd0c:	18fb      	adds	r3, r7, r3
 801bd0e:	699b      	ldr	r3, [r3, #24]
 801bd10:	2240      	movs	r2, #64	@ 0x40
 801bd12:	4013      	ands	r3, r2
 801bd14:	d001      	beq.n	801bd1a <_ux_device_stack_configuration_set+0x1e2>
 801bd16:	2202      	movs	r2, #2
 801bd18:	e000      	b.n	801bd1c <_ux_device_stack_configuration_set+0x1e4>
 801bd1a:	2201      	movs	r2, #1
 801bd1c:	4b67      	ldr	r3, [pc, #412]	@ (801bebc <_ux_device_stack_configuration_set+0x384>)
 801bd1e:	6819      	ldr	r1, [r3, #0]
 801bd20:	23d2      	movs	r3, #210	@ 0xd2
 801bd22:	005b      	lsls	r3, r3, #1
 801bd24:	50ca      	str	r2, [r1, r3]

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 801bd26:	2058      	movs	r0, #88	@ 0x58
 801bd28:	183b      	adds	r3, r7, r0
 801bd2a:	699b      	ldr	r3, [r3, #24]
 801bd2c:	0959      	lsrs	r1, r3, #5
 801bd2e:	4b63      	ldr	r3, [pc, #396]	@ (801bebc <_ux_device_stack_configuration_set+0x384>)
 801bd30:	681a      	ldr	r2, [r3, #0]
 801bd32:	2301      	movs	r3, #1
 801bd34:	4019      	ands	r1, r3
 801bd36:	23d4      	movs	r3, #212	@ 0xd4
 801bd38:	005b      	lsls	r3, r3, #1
 801bd3a:	50d1      	str	r1, [r2, r3]

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 801bd3c:	183b      	adds	r3, r7, r0
 801bd3e:	689b      	ldr	r3, [r3, #8]
 801bd40:	22a8      	movs	r2, #168	@ 0xa8
 801bd42:	18ba      	adds	r2, r7, r2
 801bd44:	6013      	str	r3, [r2, #0]

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 801bd46:	e115      	b.n	801bf74 <_ux_device_stack_configuration_set+0x43c>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 801bd48:	21ac      	movs	r1, #172	@ 0xac
 801bd4a:	187b      	adds	r3, r7, r1
 801bd4c:	681b      	ldr	r3, [r3, #0]
 801bd4e:	781b      	ldrb	r3, [r3, #0]
 801bd50:	2280      	movs	r2, #128	@ 0x80
 801bd52:	18ba      	adds	r2, r7, r2
 801bd54:	6013      	str	r3, [r2, #0]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 801bd56:	207f      	movs	r0, #127	@ 0x7f
 801bd58:	183b      	adds	r3, r7, r0
 801bd5a:	187a      	adds	r2, r7, r1
 801bd5c:	6812      	ldr	r2, [r2, #0]
 801bd5e:	7852      	ldrb	r2, [r2, #1]
 801bd60:	701a      	strb	r2, [r3, #0]

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 801bd62:	183b      	adds	r3, r7, r0
 801bd64:	781b      	ldrb	r3, [r3, #0]
 801bd66:	2b0b      	cmp	r3, #11
 801bd68:	d111      	bne.n	801bd8e <_ux_device_stack_configuration_set+0x256>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 801bd6a:	2301      	movs	r3, #1
 801bd6c:	2298      	movs	r2, #152	@ 0x98
 801bd6e:	18ba      	adds	r2, r7, r2
 801bd70:	6013      	str	r3, [r2, #0]

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 801bd72:	187b      	adds	r3, r7, r1
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	3302      	adds	r3, #2
 801bd78:	781b      	ldrb	r3, [r3, #0]
 801bd7a:	2294      	movs	r2, #148	@ 0x94
 801bd7c:	18ba      	adds	r2, r7, r2
 801bd7e:	6013      	str	r3, [r2, #0]

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 801bd80:	187b      	adds	r3, r7, r1
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	3303      	adds	r3, #3
 801bd86:	781b      	ldrb	r3, [r3, #0]
 801bd88:	2290      	movs	r2, #144	@ 0x90
 801bd8a:	18ba      	adds	r2, r7, r2
 801bd8c:	6013      	str	r3, [r2, #0]
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 801bd8e:	237f      	movs	r3, #127	@ 0x7f
 801bd90:	18fb      	adds	r3, r7, r3
 801bd92:	781b      	ldrb	r3, [r3, #0]
 801bd94:	2b04      	cmp	r3, #4
 801bd96:	d000      	beq.n	801bd9a <_ux_device_stack_configuration_set+0x262>
 801bd98:	e0db      	b.n	801bf52 <_ux_device_stack_configuration_set+0x41a>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 801bd9a:	2434      	movs	r4, #52	@ 0x34
 801bd9c:	193b      	adds	r3, r7, r4
 801bd9e:	4949      	ldr	r1, [pc, #292]	@ (801bec4 <_ux_device_stack_configuration_set+0x38c>)
 801bda0:	22ac      	movs	r2, #172	@ 0xac
 801bda2:	18ba      	adds	r2, r7, r2
 801bda4:	6810      	ldr	r0, [r2, #0]
 801bda6:	2209      	movs	r2, #9
 801bda8:	f7fb ffaf 	bl	8017d0a <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 801bdac:	0022      	movs	r2, r4
 801bdae:	18bb      	adds	r3, r7, r2
 801bdb0:	68db      	ldr	r3, [r3, #12]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d000      	beq.n	801bdb8 <_ux_device_stack_configuration_set+0x280>
 801bdb6:	e0cc      	b.n	801bf52 <_ux_device_stack_configuration_set+0x41a>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 801bdb8:	2398      	movs	r3, #152	@ 0x98
 801bdba:	18fb      	adds	r3, r7, r3
 801bdbc:	681b      	ldr	r3, [r3, #0]
 801bdbe:	2b01      	cmp	r3, #1
 801bdc0:	d16f      	bne.n	801bea2 <_ux_device_stack_configuration_set+0x36a>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 801bdc2:	18bb      	adds	r3, r7, r2
 801bdc4:	689b      	ldr	r3, [r3, #8]
 801bdc6:	2294      	movs	r2, #148	@ 0x94
 801bdc8:	18ba      	adds	r2, r7, r2
 801bdca:	6812      	ldr	r2, [r2, #0]
 801bdcc:	429a      	cmp	r2, r3
 801bdce:	d14e      	bne.n	801be6e <_ux_device_stack_configuration_set+0x336>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 801bdd0:	4b3a      	ldr	r3, [pc, #232]	@ (801bebc <_ux_device_stack_configuration_set+0x384>)
 801bdd2:	681a      	ldr	r2, [r3, #0]
 801bdd4:	23ae      	movs	r3, #174	@ 0xae
 801bdd6:	005b      	lsls	r3, r3, #1
 801bdd8:	58d3      	ldr	r3, [r2, r3]
 801bdda:	22a0      	movs	r2, #160	@ 0xa0
 801bddc:	18ba      	adds	r2, r7, r2
 801bdde:	6013      	str	r3, [r2, #0]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                        /* Parse all the class drivers.  */
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801bde0:	2300      	movs	r3, #0
 801bde2:	228c      	movs	r2, #140	@ 0x8c
 801bde4:	18ba      	adds	r2, r7, r2
 801bde6:	6013      	str	r3, [r2, #0]
 801bde8:	e036      	b.n	801be58 <_ux_device_stack_configuration_set+0x320>
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 801bdea:	21a0      	movs	r1, #160	@ 0xa0
 801bdec:	187b      	adds	r3, r7, r1
 801bdee:	681b      	ldr	r3, [r3, #0]
 801bdf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bdf2:	2b01      	cmp	r3, #1
 801bdf4:	d123      	bne.n	801be3e <_ux_device_stack_configuration_set+0x306>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 801bdf6:	2434      	movs	r4, #52	@ 0x34
 801bdf8:	193b      	adds	r3, r7, r4
 801bdfa:	689a      	ldr	r2, [r3, #8]
 801bdfc:	0008      	movs	r0, r1
 801bdfe:	187b      	adds	r3, r7, r1
 801be00:	6819      	ldr	r1, [r3, #0]
 801be02:	2384      	movs	r3, #132	@ 0x84
 801be04:	005b      	lsls	r3, r3, #1
 801be06:	58cb      	ldr	r3, [r1, r3]
 801be08:	429a      	cmp	r2, r3
 801be0a:	d118      	bne.n	801be3e <_ux_device_stack_configuration_set+0x306>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 801be0c:	0001      	movs	r1, r0
 801be0e:	187b      	adds	r3, r7, r1
 801be10:	681a      	ldr	r2, [r3, #0]
 801be12:	2386      	movs	r3, #134	@ 0x86
 801be14:	005b      	lsls	r3, r3, #1
 801be16:	58d3      	ldr	r3, [r2, r3]
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 801be18:	687a      	ldr	r2, [r7, #4]
 801be1a:	429a      	cmp	r2, r3
 801be1c:	d10f      	bne.n	801be3e <_ux_device_stack_configuration_set+0x306>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 801be1e:	4b27      	ldr	r3, [pc, #156]	@ (801bebc <_ux_device_stack_configuration_set+0x384>)
 801be20:	681a      	ldr	r2, [r3, #0]
 801be22:	193b      	adds	r3, r7, r4
 801be24:	689b      	ldr	r3, [r3, #8]
 801be26:	3358      	adds	r3, #88	@ 0x58
 801be28:	009b      	lsls	r3, r3, #2
 801be2a:	0008      	movs	r0, r1
 801be2c:	1879      	adds	r1, r7, r1
 801be2e:	6809      	ldr	r1, [r1, #0]
 801be30:	5099      	str	r1, [r3, r2]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 801be32:	183b      	adds	r3, r7, r0
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	229c      	movs	r2, #156	@ 0x9c
 801be38:	18ba      	adds	r2, r7, r2
 801be3a:	6013      	str	r3, [r2, #0]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                                    /* We are done here.  */
                                    break;
 801be3c:	e022      	b.n	801be84 <_ux_device_stack_configuration_set+0x34c>
                                }
                            }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                            /* Move to the next registered class.  */
                            class_inst ++;
 801be3e:	22a0      	movs	r2, #160	@ 0xa0
 801be40:	18bb      	adds	r3, r7, r2
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	3315      	adds	r3, #21
 801be46:	33ff      	adds	r3, #255	@ 0xff
 801be48:	18ba      	adds	r2, r7, r2
 801be4a:	6013      	str	r3, [r2, #0]
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801be4c:	228c      	movs	r2, #140	@ 0x8c
 801be4e:	18bb      	adds	r3, r7, r2
 801be50:	681b      	ldr	r3, [r3, #0]
 801be52:	3301      	adds	r3, #1
 801be54:	18ba      	adds	r2, r7, r2
 801be56:	6013      	str	r3, [r2, #0]
 801be58:	4b18      	ldr	r3, [pc, #96]	@ (801bebc <_ux_device_stack_configuration_set+0x384>)
 801be5a:	681a      	ldr	r2, [r3, #0]
 801be5c:	23ac      	movs	r3, #172	@ 0xac
 801be5e:	005b      	lsls	r3, r3, #1
 801be60:	58d3      	ldr	r3, [r2, r3]
 801be62:	228c      	movs	r2, #140	@ 0x8c
 801be64:	18ba      	adds	r2, r7, r2
 801be66:	6812      	ldr	r2, [r2, #0]
 801be68:	429a      	cmp	r2, r3
 801be6a:	d3be      	bcc.n	801bdea <_ux_device_stack_configuration_set+0x2b2>
 801be6c:	e00a      	b.n	801be84 <_ux_device_stack_configuration_set+0x34c>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 801be6e:	4b13      	ldr	r3, [pc, #76]	@ (801bebc <_ux_device_stack_configuration_set+0x384>)
 801be70:	681a      	ldr	r2, [r3, #0]
 801be72:	2334      	movs	r3, #52	@ 0x34
 801be74:	18fb      	adds	r3, r7, r3
 801be76:	689b      	ldr	r3, [r3, #8]
 801be78:	3358      	adds	r3, #88	@ 0x58
 801be7a:	009b      	lsls	r3, r3, #2
 801be7c:	219c      	movs	r1, #156	@ 0x9c
 801be7e:	1879      	adds	r1, r7, r1
 801be80:	6809      	ldr	r1, [r1, #0]
 801be82:	5099      	str	r1, [r3, r2]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 801be84:	2290      	movs	r2, #144	@ 0x90
 801be86:	18bb      	adds	r3, r7, r2
 801be88:	681b      	ldr	r3, [r3, #0]
 801be8a:	3b01      	subs	r3, #1
 801be8c:	18b9      	adds	r1, r7, r2
 801be8e:	600b      	str	r3, [r1, #0]

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 801be90:	18bb      	adds	r3, r7, r2
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	2b00      	cmp	r3, #0
 801be96:	d152      	bne.n	801bf3e <_ux_device_stack_configuration_set+0x406>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 801be98:	2300      	movs	r3, #0
 801be9a:	2298      	movs	r2, #152	@ 0x98
 801be9c:	18ba      	adds	r2, r7, r2
 801be9e:	6013      	str	r3, [r2, #0]
 801bea0:	e04d      	b.n	801bf3e <_ux_device_stack_configuration_set+0x406>
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 801bea2:	4b06      	ldr	r3, [pc, #24]	@ (801bebc <_ux_device_stack_configuration_set+0x384>)
 801bea4:	681a      	ldr	r2, [r3, #0]
 801bea6:	23ae      	movs	r3, #174	@ 0xae
 801bea8:	005b      	lsls	r3, r3, #1
 801beaa:	58d3      	ldr	r3, [r2, r3]
 801beac:	22a0      	movs	r2, #160	@ 0xa0
 801beae:	18ba      	adds	r2, r7, r2
 801beb0:	6013      	str	r3, [r2, #0]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                    /* Parse all the class drivers.  */
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801beb2:	2300      	movs	r3, #0
 801beb4:	228c      	movs	r2, #140	@ 0x8c
 801beb6:	18ba      	adds	r2, r7, r2
 801beb8:	6013      	str	r3, [r2, #0]
 801beba:	e036      	b.n	801bf2a <_ux_device_stack_configuration_set+0x3f2>
 801bebc:	20011854 	.word	0x20011854
 801bec0:	2000002c 	.word	0x2000002c
 801bec4:	20000034 	.word	0x20000034
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 801bec8:	21a0      	movs	r1, #160	@ 0xa0
 801beca:	187b      	adds	r3, r7, r1
 801becc:	681b      	ldr	r3, [r3, #0]
 801bece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bed0:	2b01      	cmp	r3, #1
 801bed2:	d11d      	bne.n	801bf10 <_ux_device_stack_configuration_set+0x3d8>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 801bed4:	2434      	movs	r4, #52	@ 0x34
 801bed6:	193b      	adds	r3, r7, r4
 801bed8:	689a      	ldr	r2, [r3, #8]
 801beda:	0008      	movs	r0, r1
 801bedc:	187b      	adds	r3, r7, r1
 801bede:	6819      	ldr	r1, [r3, #0]
 801bee0:	2384      	movs	r3, #132	@ 0x84
 801bee2:	005b      	lsls	r3, r3, #1
 801bee4:	58cb      	ldr	r3, [r1, r3]
 801bee6:	429a      	cmp	r2, r3
 801bee8:	d112      	bne.n	801bf10 <_ux_device_stack_configuration_set+0x3d8>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 801beea:	0001      	movs	r1, r0
 801beec:	187b      	adds	r3, r7, r1
 801beee:	681a      	ldr	r2, [r3, #0]
 801bef0:	2386      	movs	r3, #134	@ 0x86
 801bef2:	005b      	lsls	r3, r3, #1
 801bef4:	58d3      	ldr	r3, [r2, r3]
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 801bef6:	687a      	ldr	r2, [r7, #4]
 801bef8:	429a      	cmp	r2, r3
 801befa:	d109      	bne.n	801bf10 <_ux_device_stack_configuration_set+0x3d8>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 801befc:	4b2a      	ldr	r3, [pc, #168]	@ (801bfa8 <_ux_device_stack_configuration_set+0x470>)
 801befe:	681a      	ldr	r2, [r3, #0]
 801bf00:	193b      	adds	r3, r7, r4
 801bf02:	689b      	ldr	r3, [r3, #8]
 801bf04:	3358      	adds	r3, #88	@ 0x58
 801bf06:	009b      	lsls	r3, r3, #2
 801bf08:	1879      	adds	r1, r7, r1
 801bf0a:	6809      	ldr	r1, [r1, #0]
 801bf0c:	5099      	str	r1, [r3, r2]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                                /* We are done here.  */
                                break;
 801bf0e:	e016      	b.n	801bf3e <_ux_device_stack_configuration_set+0x406>
                            }
                        }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                        /* Move to the next registered class.  */
                        class_inst ++;
 801bf10:	22a0      	movs	r2, #160	@ 0xa0
 801bf12:	18bb      	adds	r3, r7, r2
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	3315      	adds	r3, #21
 801bf18:	33ff      	adds	r3, #255	@ 0xff
 801bf1a:	18ba      	adds	r2, r7, r2
 801bf1c:	6013      	str	r3, [r2, #0]
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801bf1e:	228c      	movs	r2, #140	@ 0x8c
 801bf20:	18bb      	adds	r3, r7, r2
 801bf22:	681b      	ldr	r3, [r3, #0]
 801bf24:	3301      	adds	r3, #1
 801bf26:	18ba      	adds	r2, r7, r2
 801bf28:	6013      	str	r3, [r2, #0]
 801bf2a:	4b1f      	ldr	r3, [pc, #124]	@ (801bfa8 <_ux_device_stack_configuration_set+0x470>)
 801bf2c:	681a      	ldr	r2, [r3, #0]
 801bf2e:	23ac      	movs	r3, #172	@ 0xac
 801bf30:	005b      	lsls	r3, r3, #1
 801bf32:	58d3      	ldr	r3, [r2, r3]
 801bf34:	228c      	movs	r2, #140	@ 0x8c
 801bf36:	18ba      	adds	r2, r7, r2
 801bf38:	6812      	ldr	r2, [r2, #0]
 801bf3a:	429a      	cmp	r2, r3
 801bf3c:	d3c4      	bcc.n	801bec8 <_ux_device_stack_configuration_set+0x390>
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 801bf3e:	23a8      	movs	r3, #168	@ 0xa8
 801bf40:	18fb      	adds	r3, r7, r3
 801bf42:	6819      	ldr	r1, [r3, #0]
 801bf44:	23ac      	movs	r3, #172	@ 0xac
 801bf46:	18fb      	adds	r3, r7, r3
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	2200      	movs	r2, #0
 801bf4c:	0018      	movs	r0, r3
 801bf4e:	f000 fef3 	bl	801cd38 <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 801bf52:	21a8      	movs	r1, #168	@ 0xa8
 801bf54:	187b      	adds	r3, r7, r1
 801bf56:	681a      	ldr	r2, [r3, #0]
 801bf58:	2080      	movs	r0, #128	@ 0x80
 801bf5a:	183b      	adds	r3, r7, r0
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	1ad3      	subs	r3, r2, r3
 801bf60:	187a      	adds	r2, r7, r1
 801bf62:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 801bf64:	21ac      	movs	r1, #172	@ 0xac
 801bf66:	187b      	adds	r3, r7, r1
 801bf68:	681a      	ldr	r2, [r3, #0]
 801bf6a:	183b      	adds	r3, r7, r0
 801bf6c:	681b      	ldr	r3, [r3, #0]
 801bf6e:	18d3      	adds	r3, r2, r3
 801bf70:	187a      	adds	r2, r7, r1
 801bf72:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 801bf74:	23a8      	movs	r3, #168	@ 0xa8
 801bf76:	18fb      	adds	r3, r7, r3
 801bf78:	681b      	ldr	r3, [r3, #0]
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d000      	beq.n	801bf80 <_ux_device_stack_configuration_set+0x448>
 801bf7e:	e6e3      	b.n	801bd48 <_ux_device_stack_configuration_set+0x210>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 801bf80:	2384      	movs	r3, #132	@ 0x84
 801bf82:	18fb      	adds	r3, r7, r3
 801bf84:	681b      	ldr	r3, [r3, #0]
 801bf86:	2203      	movs	r2, #3
 801bf88:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 801bf8a:	2288      	movs	r2, #136	@ 0x88
 801bf8c:	18bb      	adds	r3, r7, r2
 801bf8e:	681b      	ldr	r3, [r3, #0]
 801bf90:	699b      	ldr	r3, [r3, #24]
 801bf92:	18ba      	adds	r2, r7, r2
 801bf94:	6810      	ldr	r0, [r2, #0]
 801bf96:	2203      	movs	r2, #3
 801bf98:	2113      	movs	r1, #19
 801bf9a:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 801bf9c:	2300      	movs	r3, #0
}
 801bf9e:	0018      	movs	r0, r3
 801bfa0:	46bd      	mov	sp, r7
 801bfa2:	b02d      	add	sp, #180	@ 0xb4
 801bfa4:	bd90      	pop	{r4, r7, pc}
 801bfa6:	46c0      	nop			@ (mov r8, r8)
 801bfa8:	20011854 	.word	0x20011854

0801bfac <_ux_device_stack_control_request_process>:
/*                                            added printer support,      */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 801bfac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfae:	b09d      	sub	sp, #116	@ 0x74
 801bfb0:	af02      	add	r7, sp, #8
 801bfb2:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 801bfb4:	23ff      	movs	r3, #255	@ 0xff
 801bfb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801bfb8:	4ba1      	ldr	r3, [pc, #644]	@ (801c240 <_ux_device_stack_control_request_process+0x294>)
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801bfbe:	4ba0      	ldr	r3, [pc, #640]	@ (801c240 <_ux_device_stack_control_request_process+0x294>)
 801bfc0:	681b      	ldr	r3, [r3, #0]
 801bfc2:	3320      	adds	r3, #32
 801bfc4:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d000      	beq.n	801bfd0 <_ux_device_stack_control_request_process+0x24>
 801bfce:	e132      	b.n	801c236 <_ux_device_stack_control_request_process+0x28a>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	2254      	movs	r2, #84	@ 0x54
 801bfd4:	5c9b      	ldrb	r3, [r3, r2]
 801bfd6:	667b      	str	r3, [r7, #100]	@ 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	2255      	movs	r2, #85	@ 0x55
 801bfdc:	5c9b      	ldrb	r3, [r3, r2]
 801bfde:	653b      	str	r3, [r7, #80]	@ 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	3354      	adds	r3, #84	@ 0x54
 801bfe4:	3302      	adds	r3, #2
 801bfe6:	0018      	movs	r0, r3
 801bfe8:	f7fc facb 	bl	8018582 <_ux_utility_short_get>
 801bfec:	0003      	movs	r3, r0
 801bfee:	64fb      	str	r3, [r7, #76]	@ 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	3354      	adds	r3, #84	@ 0x54
 801bff4:	3304      	adds	r3, #4
 801bff6:	0018      	movs	r0, r3
 801bff8:	f7fc fac3 	bl	8018582 <_ux_utility_short_get>
 801bffc:	0003      	movs	r3, r0
 801bffe:	64bb      	str	r3, [r7, #72]	@ 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	3354      	adds	r3, #84	@ 0x54
 801c004:	3306      	adds	r3, #6
 801c006:	0018      	movs	r0, r3
 801c008:	f7fc fabb 	bl	8018582 <_ux_utility_short_get>
 801c00c:	0003      	movs	r3, r0
 801c00e:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 801c010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c012:	2b06      	cmp	r3, #6
 801c014:	d002      	beq.n	801c01c <_ux_device_stack_control_request_process+0x70>
 801c016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c018:	2b07      	cmp	r3, #7
 801c01a:	d10c      	bne.n	801c036 <_ux_device_stack_control_request_process+0x8a>
 801c01c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c01e:	0a1b      	lsrs	r3, r3, #8
 801c020:	2260      	movs	r2, #96	@ 0x60
 801c022:	4013      	ands	r3, r2
 801c024:	d007      	beq.n	801c036 <_ux_device_stack_control_request_process+0x8a>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 801c026:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c028:	2260      	movs	r2, #96	@ 0x60
 801c02a:	4393      	bics	r3, r2
 801c02c:	667b      	str	r3, [r7, #100]	@ 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 801c02e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c030:	2220      	movs	r2, #32
 801c032:	4313      	orrs	r3, r2
 801c034:	667b      	str	r3, [r7, #100]	@ 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 801c036:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c038:	2260      	movs	r2, #96	@ 0x60
 801c03a:	4013      	ands	r3, r2
 801c03c:	2b40      	cmp	r3, #64	@ 0x40
 801c03e:	d139      	bne.n	801c0b4 <_ux_device_stack_control_request_process+0x108>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 801c040:	4b7f      	ldr	r3, [pc, #508]	@ (801c240 <_ux_device_stack_control_request_process+0x294>)
 801c042:	681a      	ldr	r2, [r3, #0]
 801c044:	23e4      	movs	r3, #228	@ 0xe4
 801c046:	005b      	lsls	r3, r3, #1
 801c048:	58d3      	ldr	r3, [r2, r3]
 801c04a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c04c:	429a      	cmp	r2, r3
 801c04e:	d131      	bne.n	801c0b4 <_ux_device_stack_control_request_process+0x108>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 801c050:	2380      	movs	r3, #128	@ 0x80
 801c052:	005b      	lsls	r3, r3, #1
 801c054:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 801c056:	4b7a      	ldr	r3, [pc, #488]	@ (801c240 <_ux_device_stack_control_request_process+0x294>)
 801c058:	681a      	ldr	r2, [r3, #0]
 801c05a:	23e6      	movs	r3, #230	@ 0xe6
 801c05c:	005b      	lsls	r3, r3, #1
 801c05e:	58d4      	ldr	r4, [r2, r3]
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	68db      	ldr	r3, [r3, #12]
 801c064:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
 801c066:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 801c068:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801c06a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801c06c:	220c      	movs	r2, #12
 801c06e:	18ba      	adds	r2, r7, r2
 801c070:	9201      	str	r2, [sp, #4]
 801c072:	9300      	str	r3, [sp, #0]
 801c074:	0033      	movs	r3, r6
 801c076:	002a      	movs	r2, r5
 801c078:	47a0      	blx	r4
 801c07a:	0003      	movs	r3, r0
 801c07c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 801c07e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c080:	2b00      	cmp	r3, #0
 801c082:	d110      	bne.n	801c0a6 <_ux_device_stack_control_request_process+0xfa>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 801c084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c086:	333c      	adds	r3, #60	@ 0x3c
 801c088:	643b      	str	r3, [r7, #64]	@ 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801c08a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c08c:	3330      	adds	r3, #48	@ 0x30
 801c08e:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	2203      	movs	r2, #3
 801c094:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 801c096:	68f9      	ldr	r1, [r7, #12]
 801c098:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	0018      	movs	r0, r3
 801c09e:	f001 f869 	bl	801d174 <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	e0c8      	b.n	801c238 <_ux_device_stack_control_request_process+0x28c>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 801c0a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c0a8:	333c      	adds	r3, #60	@ 0x3c
 801c0aa:	0018      	movs	r0, r3
 801c0ac:	f000 fb76 	bl	801c79c <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	e0c1      	b.n	801c238 <_ux_device_stack_control_request_process+0x28c>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 801c0b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c0b6:	2260      	movs	r2, #96	@ 0x60
 801c0b8:	4013      	ands	r3, r2
 801c0ba:	2b20      	cmp	r3, #32
 801c0bc:	d004      	beq.n	801c0c8 <_ux_device_stack_control_request_process+0x11c>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 801c0be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c0c0:	2260      	movs	r2, #96	@ 0x60
 801c0c2:	4013      	ands	r3, r2
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 801c0c4:	2b40      	cmp	r3, #64	@ 0x40
 801c0c6:	d150      	bne.n	801c16a <_ux_device_stack_control_request_process+0x1be>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 801c0c8:	2310      	movs	r3, #16
 801c0ca:	18fb      	adds	r3, r7, r3
 801c0cc:	2204      	movs	r2, #4
 801c0ce:	601a      	str	r2, [r3, #0]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	663b      	str	r3, [r7, #96]	@ 0x60
 801c0d4:	e03a      	b.n	801c14c <_ux_device_stack_control_request_process+0x1a0>
            {

                /* Get the class for the interface.  */
                class =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 801c0d6:	4b5a      	ldr	r3, [pc, #360]	@ (801c240 <_ux_device_stack_control_request_process+0x294>)
 801c0d8:	681b      	ldr	r3, [r3, #0]
 801c0da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801c0dc:	3258      	adds	r2, #88	@ 0x58
 801c0de:	0092      	lsls	r2, r2, #2
 801c0e0:	58d3      	ldr	r3, [r2, r3]
 801c0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* If class is not ready, try next.  */
                if (class == UX_NULL)
 801c0e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	d02a      	beq.n	801c140 <_ux_device_stack_control_request_process+0x194>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 801c0ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c0ec:	2203      	movs	r2, #3
 801c0ee:	4013      	ands	r3, r2
 801c0f0:	2b01      	cmp	r3, #1
 801c0f2:	d116      	bne.n	801c122 <_ux_device_stack_control_request_process+0x176>
                       the request is for. So if the current index does not match 
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).  */
                    if (((request_index & 0xFF) != class_index) ||
 801c0f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c0f6:	22ff      	movs	r2, #255	@ 0xff
 801c0f8:	4013      	ands	r3, r2
 801c0fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801c0fc:	429a      	cmp	r2, r3
 801c0fe:	d121      	bne.n	801c144 <_ux_device_stack_control_request_process+0x198>
                        ((class -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 801c100:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c102:	2388      	movs	r3, #136	@ 0x88
 801c104:	005b      	lsls	r3, r3, #1
 801c106:	58d3      	ldr	r3, [r2, r3]
 801c108:	6a1b      	ldr	r3, [r3, #32]
                    if (((request_index & 0xFF) != class_index) ||
 801c10a:	2b07      	cmp	r3, #7
 801c10c:	d109      	bne.n	801c122 <_ux_device_stack_control_request_process+0x176>
                        ((class -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 801c10e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c110:	2b00      	cmp	r3, #0
 801c112:	d106      	bne.n	801c122 <_ux_device_stack_control_request_process+0x176>
                         (request == 0x00) &&
                         *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index))
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	2259      	movs	r2, #89	@ 0x59
 801c118:	5c9b      	ldrb	r3, [r3, r2]
 801c11a:	001a      	movs	r2, r3
                         (request == 0x00) &&
 801c11c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c11e:	4293      	cmp	r3, r2
 801c120:	d110      	bne.n	801c144 <_ux_device_stack_control_request_process+0x198>
                        continue;
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class;
 801c122:	2110      	movs	r1, #16
 801c124:	187b      	adds	r3, r7, r1
 801c126:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c128:	621a      	str	r2, [r3, #32]

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class -> ux_slave_class_entry_function(&class_command);
 801c12a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c12c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c12e:	187a      	adds	r2, r7, r1
 801c130:	0010      	movs	r0, r2
 801c132:	4798      	blx	r3
 801c134:	0003      	movs	r3, r0
 801c136:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 801c138:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	d00a      	beq.n	801c154 <_ux_device_stack_control_request_process+0x1a8>
 801c13e:	e002      	b.n	801c146 <_ux_device_stack_control_request_process+0x19a>
                    continue;
 801c140:	46c0      	nop			@ (mov r8, r8)
 801c142:	e000      	b.n	801c146 <_ux_device_stack_control_request_process+0x19a>
                        continue;
 801c144:	46c0      	nop			@ (mov r8, r8)
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 801c146:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c148:	3301      	adds	r3, #1
 801c14a:	663b      	str	r3, [r7, #96]	@ 0x60
 801c14c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c14e:	2b0f      	cmp	r3, #15
 801c150:	d9c1      	bls.n	801c0d6 <_ux_device_stack_control_request_process+0x12a>
 801c152:	e000      	b.n	801c156 <_ux_device_stack_control_request_process+0x1aa>

                    /* We are done, break the loop!  */
                    break;
 801c154:	46c0      	nop			@ (mov r8, r8)

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 801c156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d004      	beq.n	801c166 <_ux_device_stack_control_request_process+0x1ba>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 801c15c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c15e:	333c      	adds	r3, #60	@ 0x3c
 801c160:	0018      	movs	r0, r3
 801c162:	f000 fb1b 	bl	801c79c <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 801c166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c168:	e066      	b.n	801c238 <_ux_device_stack_control_request_process+0x28c>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 801c16a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c16c:	2b0c      	cmp	r3, #12
 801c16e:	d857      	bhi.n	801c220 <_ux_device_stack_control_request_process+0x274>
 801c170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c172:	009a      	lsls	r2, r3, #2
 801c174:	4b33      	ldr	r3, [pc, #204]	@ (801c244 <_ux_device_stack_control_request_process+0x298>)
 801c176:	18d3      	adds	r3, r2, r3
 801c178:	681b      	ldr	r3, [r3, #0]
 801c17a:	469f      	mov	pc, r3
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 801c17c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c17e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801c180:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c182:	0018      	movs	r0, r3
 801c184:	f000 fb40 	bl	801c808 <_ux_device_stack_get_status>
 801c188:	0003      	movs	r3, r0
 801c18a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801c18c:	e04b      	b.n	801c226 <_ux_device_stack_control_request_process+0x27a>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 801c18e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c190:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801c192:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c194:	0018      	movs	r0, r3
 801c196:	f7ff fc49 	bl	801ba2c <_ux_device_stack_clear_feature>
 801c19a:	0003      	movs	r3, r0
 801c19c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801c19e:	e042      	b.n	801c226 <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 801c1a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c1a2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801c1a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c1a6:	0018      	movs	r0, r3
 801c1a8:	f000 ff3c 	bl	801d024 <_ux_device_stack_set_feature>
 801c1ac:	0003      	movs	r3, r0
 801c1ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801c1b0:	e039      	b.n	801c226 <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 801c1b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c1b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c1b6:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 801c1b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c1ba:	699b      	ldr	r3, [r3, #24]
 801c1bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c1be:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801c1c0:	2111      	movs	r1, #17
 801c1c2:	4798      	blx	r3
 801c1c4:	0003      	movs	r3, r0
 801c1c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801c1c8:	e02d      	b.n	801c226 <_ux_device_stack_control_request_process+0x27a>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 801c1ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c1cc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801c1ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c1d0:	0018      	movs	r0, r3
 801c1d2:	f000 f839 	bl	801c248 <_ux_device_stack_descriptor_send>
 801c1d6:	0003      	movs	r3, r0
 801c1d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801c1da:	e024      	b.n	801c226 <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 801c1dc:	2354      	movs	r3, #84	@ 0x54
 801c1de:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801c1e0:	e021      	b.n	801c226 <_ux_device_stack_control_request_process+0x27a>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 801c1e2:	f7ff fc83 	bl	801baec <_ux_device_stack_configuration_get>
 801c1e6:	0003      	movs	r3, r0
 801c1e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801c1ea:	e01c      	b.n	801c226 <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 801c1ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c1ee:	0018      	movs	r0, r3
 801c1f0:	f7ff fca2 	bl	801bb38 <_ux_device_stack_configuration_set>
 801c1f4:	0003      	movs	r3, r0
 801c1f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801c1f8:	e015      	b.n	801c226 <_ux_device_stack_control_request_process+0x27a>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 801c1fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c1fc:	0018      	movs	r0, r3
 801c1fe:	f7ff f8df 	bl	801b3c0 <_ux_device_stack_alternate_setting_get>
 801c202:	0003      	movs	r3, r0
 801c204:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801c206:	e00e      	b.n	801c226 <_ux_device_stack_control_request_process+0x27a>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 801c208:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c20a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c20c:	0011      	movs	r1, r2
 801c20e:	0018      	movs	r0, r3
 801c210:	f7ff f916 	bl	801b440 <_ux_device_stack_alternate_setting_set>
 801c214:	0003      	movs	r3, r0
 801c216:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801c218:	e005      	b.n	801c226 <_ux_device_stack_control_request_process+0x27a>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 801c21a:	2300      	movs	r3, #0
 801c21c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801c21e:	e002      	b.n	801c226 <_ux_device_stack_control_request_process+0x27a>

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 801c220:	2354      	movs	r3, #84	@ 0x54
 801c222:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801c224:	46c0      	nop			@ (mov r8, r8)
        }

        if (status != UX_SUCCESS)
 801c226:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d004      	beq.n	801c236 <_ux_device_stack_control_request_process+0x28a>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 801c22c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c22e:	333c      	adds	r3, #60	@ 0x3c
 801c230:	0018      	movs	r0, r3
 801c232:	f000 fab3 	bl	801c79c <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 801c236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 801c238:	0018      	movs	r0, r3
 801c23a:	46bd      	mov	sp, r7
 801c23c:	b01b      	add	sp, #108	@ 0x6c
 801c23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c240:	20011854 	.word	0x20011854
 801c244:	0801f408 	.word	0x0801f408

0801c248 <_ux_device_stack_descriptor_send>:
/*                                            added BOS support,          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 801c248:	b590      	push	{r4, r7, lr}
 801c24a:	b0a3      	sub	sp, #140	@ 0x8c
 801c24c:	af00      	add	r7, sp, #0
 801c24e:	60f8      	str	r0, [r7, #12]
 801c250:	60b9      	str	r1, [r7, #8]
 801c252:	607a      	str	r2, [r7, #4]
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length;
UINT                            status =  UX_ERROR;
 801c254:	23ff      	movs	r3, #255	@ 0xff
 801c256:	673b      	str	r3, [r7, #112]	@ 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801c258:	4bde      	ldr	r3, [pc, #888]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	65fb      	str	r3, [r7, #92]	@ 0x5c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801c25e:	4bdd      	ldr	r3, [pc, #884]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	3320      	adds	r3, #32
 801c264:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801c266:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c268:	333c      	adds	r3, #60	@ 0x3c
 801c26a:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801c26c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c26e:	3330      	adds	r3, #48	@ 0x30
 801c270:	653b      	str	r3, [r7, #80]	@ 0x50

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801c272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c274:	2203      	movs	r2, #3
 801c276:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 801c278:	68fb      	ldr	r3, [r7, #12]
 801c27a:	22ff      	movs	r2, #255	@ 0xff
 801c27c:	4013      	ands	r3, r2
 801c27e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 801c280:	2300      	movs	r3, #0
 801c282:	2284      	movs	r2, #132	@ 0x84
 801c284:	18ba      	adds	r2, r7, r2
 801c286:	6013      	str	r3, [r2, #0]

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 801c288:	68fb      	ldr	r3, [r7, #12]
 801c28a:	0a1b      	lsrs	r3, r3, #8
 801c28c:	b2db      	uxtb	r3, r3
 801c28e:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	2b0f      	cmp	r3, #15
 801c298:	d900      	bls.n	801c29c <_ux_device_stack_descriptor_send+0x54>
 801c29a:	e20c      	b.n	801c6b6 <_ux_device_stack_descriptor_send+0x46e>
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	009a      	lsls	r2, r3, #2
 801c2a0:	4bcd      	ldr	r3, [pc, #820]	@ (801c5d8 <_ux_device_stack_descriptor_send+0x390>)
 801c2a2:	18d3      	adds	r3, r2, r3
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	469f      	mov	pc, r3
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	2b12      	cmp	r3, #18
 801c2ac:	d901      	bls.n	801c2b2 <_ux_device_stack_descriptor_send+0x6a>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 801c2ae:	2312      	movs	r3, #18
 801c2b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 801c2b2:	68fb      	ldr	r3, [r7, #12]
 801c2b4:	2b06      	cmp	r3, #6
 801c2b6:	d104      	bne.n	801c2c2 <_ux_device_stack_descriptor_send+0x7a>
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	2b0a      	cmp	r3, #10
 801c2bc:	d901      	bls.n	801c2c2 <_ux_device_stack_descriptor_send+0x7a>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 801c2be:	230a      	movs	r3, #10
 801c2c0:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	2b09      	cmp	r3, #9
 801c2c6:	d104      	bne.n	801c2d2 <_ux_device_stack_descriptor_send+0x8a>
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	2b05      	cmp	r3, #5
 801c2cc:	d901      	bls.n	801c2d2 <_ux_device_stack_descriptor_send+0x8a>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 801c2ce:	2305      	movs	r3, #5
 801c2d0:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801c2d2:	4bc0      	ldr	r3, [pc, #768]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c2d4:	681a      	ldr	r2, [r3, #0]
 801c2d6:	2394      	movs	r3, #148	@ 0x94
 801c2d8:	005b      	lsls	r3, r3, #1
 801c2da:	58d3      	ldr	r3, [r2, r3]
 801c2dc:	2180      	movs	r1, #128	@ 0x80
 801c2de:	187a      	adds	r2, r7, r1
 801c2e0:	6013      	str	r3, [r2, #0]
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 801c2e2:	4bbc      	ldr	r3, [pc, #752]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c2e4:	681a      	ldr	r2, [r3, #0]
 801c2e6:	2396      	movs	r3, #150	@ 0x96
 801c2e8:	005b      	lsls	r3, r3, #1
 801c2ea:	58d3      	ldr	r3, [r2, r3]
 801c2ec:	67bb      	str	r3, [r7, #120]	@ 0x78
        device_framework_end = device_framework + device_framework_length;
 801c2ee:	187b      	adds	r3, r7, r1
 801c2f0:	681a      	ldr	r2, [r3, #0]
 801c2f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801c2f4:	18d3      	adds	r3, r2, r3
 801c2f6:	67fb      	str	r3, [r7, #124]	@ 0x7c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 801c2f8:	e029      	b.n	801c34e <_ux_device_stack_descriptor_send+0x106>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 801c2fa:	2180      	movs	r1, #128	@ 0x80
 801c2fc:	187b      	adds	r3, r7, r1
 801c2fe:	681b      	ldr	r3, [r3, #0]
 801c300:	781b      	ldrb	r3, [r3, #0]
 801c302:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 801c304:	187b      	adds	r3, r7, r1
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	3301      	adds	r3, #1
 801c30a:	781b      	ldrb	r3, [r3, #0]
 801c30c:	001a      	movs	r2, r3
 801c30e:	68fb      	ldr	r3, [r7, #12]
 801c310:	4293      	cmp	r3, r2
 801c312:	d111      	bne.n	801c338 <_ux_device_stack_descriptor_send+0xf0>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 801c314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c316:	68db      	ldr	r3, [r3, #12]
 801c318:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801c31a:	1879      	adds	r1, r7, r1
 801c31c:	6809      	ldr	r1, [r1, #0]
 801c31e:	0018      	movs	r0, r3
 801c320:	f7fb ff62 	bl	80181e8 <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801c324:	687a      	ldr	r2, [r7, #4]
 801c326:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801c328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c32a:	0018      	movs	r0, r3
 801c32c:	f000 ff22 	bl	801d174 <_ux_device_stack_transfer_request>
 801c330:	0003      	movs	r3, r0
 801c332:	673b      	str	r3, [r7, #112]	@ 0x70
                break;
 801c334:	46c0      	nop			@ (mov r8, r8)
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 801c336:	e1c9      	b.n	801c6cc <_ux_device_stack_descriptor_send+0x484>
            device_framework_length -=  descriptor_length;
 801c338:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801c33a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c33c:	1ad3      	subs	r3, r2, r3
 801c33e:	67bb      	str	r3, [r7, #120]	@ 0x78
            device_framework +=  descriptor_length;
 801c340:	2180      	movs	r1, #128	@ 0x80
 801c342:	187b      	adds	r3, r7, r1
 801c344:	681a      	ldr	r2, [r3, #0]
 801c346:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c348:	18d3      	adds	r3, r2, r3
 801c34a:	187a      	adds	r2, r7, r1
 801c34c:	6013      	str	r3, [r2, #0]
        while (device_framework < device_framework_end)
 801c34e:	2380      	movs	r3, #128	@ 0x80
 801c350:	18fb      	adds	r3, r7, r3
 801c352:	681a      	ldr	r2, [r3, #0]
 801c354:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801c356:	429a      	cmp	r2, r3
 801c358:	d3cf      	bcc.n	801c2fa <_ux_device_stack_descriptor_send+0xb2>
        break;
 801c35a:	e1b7      	b.n	801c6cc <_ux_device_stack_descriptor_send+0x484>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 801c35c:	68fb      	ldr	r3, [r7, #12]
 801c35e:	2b07      	cmp	r3, #7
 801c360:	d113      	bne.n	801c38a <_ux_device_stack_descriptor_send+0x142>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 801c362:	4b9c      	ldr	r3, [pc, #624]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c364:	681a      	ldr	r2, [r3, #0]
 801c366:	2398      	movs	r3, #152	@ 0x98
 801c368:	005b      	lsls	r3, r3, #1
 801c36a:	58d3      	ldr	r3, [r2, r3]
 801c36c:	2180      	movs	r1, #128	@ 0x80
 801c36e:	187a      	adds	r2, r7, r1
 801c370:	6013      	str	r3, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 801c372:	4b98      	ldr	r3, [pc, #608]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c374:	681a      	ldr	r2, [r3, #0]
 801c376:	239a      	movs	r3, #154	@ 0x9a
 801c378:	005b      	lsls	r3, r3, #1
 801c37a:	58d3      	ldr	r3, [r2, r3]
 801c37c:	67bb      	str	r3, [r7, #120]	@ 0x78
            device_framework_end = device_framework + device_framework_length;
 801c37e:	187b      	adds	r3, r7, r1
 801c380:	681a      	ldr	r2, [r3, #0]
 801c382:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801c384:	18d3      	adds	r3, r2, r3
 801c386:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801c388:	e05b      	b.n	801c442 <_ux_device_stack_descriptor_send+0x1fa>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801c38a:	4b92      	ldr	r3, [pc, #584]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c38c:	681a      	ldr	r2, [r3, #0]
 801c38e:	2394      	movs	r3, #148	@ 0x94
 801c390:	005b      	lsls	r3, r3, #1
 801c392:	58d3      	ldr	r3, [r2, r3]
 801c394:	2180      	movs	r1, #128	@ 0x80
 801c396:	187a      	adds	r2, r7, r1
 801c398:	6013      	str	r3, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 801c39a:	4b8e      	ldr	r3, [pc, #568]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c39c:	681a      	ldr	r2, [r3, #0]
 801c39e:	2396      	movs	r3, #150	@ 0x96
 801c3a0:	005b      	lsls	r3, r3, #1
 801c3a2:	58d3      	ldr	r3, [r2, r3]
 801c3a4:	67bb      	str	r3, [r7, #120]	@ 0x78
            device_framework_end = device_framework + device_framework_length;
 801c3a6:	187b      	adds	r3, r7, r1
 801c3a8:	681a      	ldr	r2, [r3, #0]
 801c3aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801c3ac:	18d3      	adds	r3, r2, r3
 801c3ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 801c3b0:	e047      	b.n	801c442 <_ux_device_stack_descriptor_send+0x1fa>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 801c3b2:	2280      	movs	r2, #128	@ 0x80
 801c3b4:	18bb      	adds	r3, r7, r2
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	781b      	ldrb	r3, [r3, #0]
 801c3ba:	647b      	str	r3, [r7, #68]	@ 0x44

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 801c3bc:	68fb      	ldr	r3, [r7, #12]
 801c3be:	2b0f      	cmp	r3, #15
 801c3c0:	d113      	bne.n	801c3ea <_ux_device_stack_descriptor_send+0x1a2>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 801c3c2:	18bb      	adds	r3, r7, r2
 801c3c4:	681b      	ldr	r3, [r3, #0]
 801c3c6:	3301      	adds	r3, #1
 801c3c8:	781b      	ldrb	r3, [r3, #0]
 801c3ca:	2b0f      	cmp	r3, #15
 801c3cc:	d12e      	bne.n	801c42c <_ux_device_stack_descriptor_send+0x1e4>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 801c3ce:	2414      	movs	r4, #20
 801c3d0:	193b      	adds	r3, r7, r4
 801c3d2:	4982      	ldr	r1, [pc, #520]	@ (801c5dc <_ux_device_stack_descriptor_send+0x394>)
 801c3d4:	18ba      	adds	r2, r7, r2
 801c3d6:	6810      	ldr	r0, [r2, #0]
 801c3d8:	2204      	movs	r2, #4
 801c3da:	f7fb fc96 	bl	8017d0a <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 801c3de:	193b      	adds	r3, r7, r4
 801c3e0:	689b      	ldr	r3, [r3, #8]
 801c3e2:	677b      	str	r3, [r7, #116]	@ 0x74

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 801c3e4:	2300      	movs	r3, #0
 801c3e6:	673b      	str	r3, [r7, #112]	@ 0x70
                    break;
 801c3e8:	e031      	b.n	801c44e <_ux_device_stack_descriptor_send+0x206>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 801c3ea:	2080      	movs	r0, #128	@ 0x80
 801c3ec:	183b      	adds	r3, r7, r0
 801c3ee:	681b      	ldr	r3, [r3, #0]
 801c3f0:	3301      	adds	r3, #1
 801c3f2:	781b      	ldrb	r3, [r3, #0]
 801c3f4:	2b02      	cmp	r3, #2
 801c3f6:	d119      	bne.n	801c42c <_ux_device_stack_descriptor_send+0x1e4>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 801c3f8:	2384      	movs	r3, #132	@ 0x84
 801c3fa:	18fb      	adds	r3, r7, r3
 801c3fc:	681a      	ldr	r2, [r3, #0]
 801c3fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c400:	429a      	cmp	r2, r3
 801c402:	d10d      	bne.n	801c420 <_ux_device_stack_descriptor_send+0x1d8>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 801c404:	2424      	movs	r4, #36	@ 0x24
 801c406:	193b      	adds	r3, r7, r4
 801c408:	4975      	ldr	r1, [pc, #468]	@ (801c5e0 <_ux_device_stack_descriptor_send+0x398>)
 801c40a:	183a      	adds	r2, r7, r0
 801c40c:	6810      	ldr	r0, [r2, #0]
 801c40e:	2208      	movs	r2, #8
 801c410:	f7fb fc7b 	bl	8017d0a <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 801c414:	193b      	adds	r3, r7, r4
 801c416:	689b      	ldr	r3, [r3, #8]
 801c418:	677b      	str	r3, [r7, #116]	@ 0x74

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 801c41a:	2300      	movs	r3, #0
 801c41c:	673b      	str	r3, [r7, #112]	@ 0x70
                        break;
 801c41e:	e016      	b.n	801c44e <_ux_device_stack_descriptor_send+0x206>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 801c420:	2284      	movs	r2, #132	@ 0x84
 801c422:	18bb      	adds	r3, r7, r2
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	3301      	adds	r3, #1
 801c428:	18ba      	adds	r2, r7, r2
 801c42a:	6013      	str	r3, [r2, #0]
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 801c42c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801c42e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c430:	1ad3      	subs	r3, r2, r3
 801c432:	67bb      	str	r3, [r7, #120]	@ 0x78

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 801c434:	2180      	movs	r1, #128	@ 0x80
 801c436:	187b      	adds	r3, r7, r1
 801c438:	681a      	ldr	r2, [r3, #0]
 801c43a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c43c:	18d3      	adds	r3, r2, r3
 801c43e:	187a      	adds	r2, r7, r1
 801c440:	6013      	str	r3, [r2, #0]
        while (device_framework < device_framework_end)
 801c442:	2380      	movs	r3, #128	@ 0x80
 801c444:	18fb      	adds	r3, r7, r3
 801c446:	681a      	ldr	r2, [r3, #0]
 801c448:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801c44a:	429a      	cmp	r2, r3
 801c44c:	d3b1      	bcc.n	801c3b2 <_ux_device_stack_descriptor_send+0x16a>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 801c44e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c450:	2b00      	cmp	r3, #0
 801c452:	d000      	beq.n	801c456 <_ux_device_stack_descriptor_send+0x20e>
 801c454:	e137      	b.n	801c6c6 <_ux_device_stack_descriptor_send+0x47e>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 801c456:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	429a      	cmp	r2, r3
 801c45c:	d202      	bcs.n	801c464 <_ux_device_stack_descriptor_send+0x21c>
                length =  target_descriptor_length;
 801c45e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801c460:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801c462:	e001      	b.n	801c468 <_ux_device_stack_descriptor_send+0x220>
            else
                length =  host_length;
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 801c468:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801c46a:	2380      	movs	r3, #128	@ 0x80
 801c46c:	005b      	lsls	r3, r3, #1
 801c46e:	429a      	cmp	r2, r3
 801c470:	d90d      	bls.n	801c48e <_ux_device_stack_descriptor_send+0x246>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 801c472:	2212      	movs	r2, #18
 801c474:	2109      	movs	r1, #9
 801c476:	2002      	movs	r0, #2
 801c478:	f7fb fb58 	bl	8017b2c <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801c47c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c47e:	699b      	ldr	r3, [r3, #24]
 801c480:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c482:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801c484:	2114      	movs	r1, #20
 801c486:	4798      	blx	r3
 801c488:	0003      	movs	r3, r0
 801c48a:	673b      	str	r3, [r7, #112]	@ 0x70
                break;
 801c48c:	e11e      	b.n	801c6cc <_ux_device_stack_descriptor_send+0x484>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 801c48e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c490:	68db      	ldr	r3, [r3, #12]
 801c492:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801c494:	2180      	movs	r1, #128	@ 0x80
 801c496:	1879      	adds	r1, r7, r1
 801c498:	6809      	ldr	r1, [r1, #0]
 801c49a:	0018      	movs	r0, r3
 801c49c:	f7fb fea4 	bl	80181e8 <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 801c4a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c4a2:	68db      	ldr	r3, [r3, #12]
 801c4a4:	3301      	adds	r3, #1
 801c4a6:	68fa      	ldr	r2, [r7, #12]
 801c4a8:	b2d2      	uxtb	r2, r2
 801c4aa:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801c4ac:	687a      	ldr	r2, [r7, #4]
 801c4ae:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801c4b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c4b2:	0018      	movs	r0, r3
 801c4b4:	f000 fe5e 	bl	801d174 <_ux_device_stack_transfer_request>
 801c4b8:	0003      	movs	r3, r0
 801c4ba:	673b      	str	r3, [r7, #112]	@ 0x70
        }
        break;
 801c4bc:	e103      	b.n	801c6c6 <_ux_device_stack_descriptor_send+0x47e>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 801c4be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	d153      	bne.n	801c56c <_ux_device_stack_descriptor_send+0x324>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 801c4c4:	4b43      	ldr	r3, [pc, #268]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c4c6:	681a      	ldr	r2, [r3, #0]
 801c4c8:	23a6      	movs	r3, #166	@ 0xa6
 801c4ca:	005b      	lsls	r3, r3, #1
 801c4cc:	58d3      	ldr	r3, [r2, r3]
 801c4ce:	1c9a      	adds	r2, r3, #2
 801c4d0:	2380      	movs	r3, #128	@ 0x80
 801c4d2:	005b      	lsls	r3, r3, #1
 801c4d4:	429a      	cmp	r2, r3
 801c4d6:	d90d      	bls.n	801c4f4 <_ux_device_stack_descriptor_send+0x2ac>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 801c4d8:	2212      	movs	r2, #18
 801c4da:	2109      	movs	r1, #9
 801c4dc:	2002      	movs	r0, #2
 801c4de:	f7fb fb25 	bl	8017b2c <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801c4e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c4e4:	699b      	ldr	r3, [r3, #24]
 801c4e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c4e8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801c4ea:	2114      	movs	r1, #20
 801c4ec:	4798      	blx	r3
 801c4ee:	0003      	movs	r3, r0
 801c4f0:	673b      	str	r3, [r7, #112]	@ 0x70
                break;
 801c4f2:	e0eb      	b.n	801c6cc <_ux_device_stack_descriptor_send+0x484>
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 801c4f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c4f6:	68db      	ldr	r3, [r3, #12]
 801c4f8:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 801c4fa:	4b36      	ldr	r3, [pc, #216]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c4fc:	681a      	ldr	r2, [r3, #0]
 801c4fe:	23a6      	movs	r3, #166	@ 0xa6
 801c500:	005b      	lsls	r3, r3, #1
 801c502:	58d3      	ldr	r3, [r2, r3]
 801c504:	b2db      	uxtb	r3, r3
 801c506:	3302      	adds	r3, #2
 801c508:	b2da      	uxtb	r2, r3
 801c50a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c50c:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 801c50e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c510:	3301      	adds	r3, #1
 801c512:	2203      	movs	r2, #3
 801c514:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 801c516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c518:	1c98      	adds	r0, r3, #2
 801c51a:	4b2e      	ldr	r3, [pc, #184]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c51c:	681a      	ldr	r2, [r3, #0]
 801c51e:	23a4      	movs	r3, #164	@ 0xa4
 801c520:	005b      	lsls	r3, r3, #1
 801c522:	58d1      	ldr	r1, [r2, r3]
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 801c524:	4b2b      	ldr	r3, [pc, #172]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c526:	681a      	ldr	r2, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 801c528:	23a6      	movs	r3, #166	@ 0xa6
 801c52a:	005b      	lsls	r3, r3, #1
 801c52c:	58d3      	ldr	r3, [r2, r3]
 801c52e:	001a      	movs	r2, r3
 801c530:	f7fb fe5a 	bl	80181e8 <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 801c534:	4b27      	ldr	r3, [pc, #156]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c536:	681a      	ldr	r2, [r3, #0]
 801c538:	23a6      	movs	r3, #166	@ 0xa6
 801c53a:	005b      	lsls	r3, r3, #1
 801c53c:	58d3      	ldr	r3, [r2, r3]
 801c53e:	3302      	adds	r3, #2
 801c540:	687a      	ldr	r2, [r7, #4]
 801c542:	429a      	cmp	r2, r3
 801c544:	d907      	bls.n	801c556 <_ux_device_stack_descriptor_send+0x30e>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 801c546:	4b23      	ldr	r3, [pc, #140]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c548:	681a      	ldr	r2, [r3, #0]
 801c54a:	23a6      	movs	r3, #166	@ 0xa6
 801c54c:	005b      	lsls	r3, r3, #1
 801c54e:	58d3      	ldr	r3, [r2, r3]
 801c550:	3302      	adds	r3, #2
 801c552:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801c554:	e001      	b.n	801c55a <_ux_device_stack_descriptor_send+0x312>
            else
                length =  host_length;
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801c55a:	687a      	ldr	r2, [r7, #4]
 801c55c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801c55e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c560:	0018      	movs	r0, r3
 801c562:	f000 fe07 	bl	801d174 <_ux_device_stack_transfer_request>
 801c566:	0003      	movs	r3, r0
 801c568:	673b      	str	r3, [r7, #112]	@ 0x70
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 801c56a:	e0ae      	b.n	801c6ca <_ux_device_stack_descriptor_send+0x482>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 801c56c:	4b19      	ldr	r3, [pc, #100]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c56e:	681a      	ldr	r2, [r3, #0]
 801c570:	23a0      	movs	r3, #160	@ 0xa0
 801c572:	005b      	lsls	r3, r3, #1
 801c574:	58d3      	ldr	r3, [r2, r3]
 801c576:	66bb      	str	r3, [r7, #104]	@ 0x68
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 801c578:	4b16      	ldr	r3, [pc, #88]	@ (801c5d4 <_ux_device_stack_descriptor_send+0x38c>)
 801c57a:	681a      	ldr	r2, [r3, #0]
 801c57c:	23a2      	movs	r3, #162	@ 0xa2
 801c57e:	005b      	lsls	r3, r3, #1
 801c580:	58d3      	ldr	r3, [r2, r3]
 801c582:	667b      	str	r3, [r7, #100]	@ 0x64
            while (string_framework_length != 0)
 801c584:	e088      	b.n	801c698 <_ux_device_stack_descriptor_send+0x450>
                if (_ux_utility_short_get(string_framework) == request_index)
 801c586:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c588:	0018      	movs	r0, r3
 801c58a:	f7fb fffa 	bl	8018582 <_ux_utility_short_get>
 801c58e:	0002      	movs	r2, r0
 801c590:	68bb      	ldr	r3, [r7, #8]
 801c592:	4293      	cmp	r3, r2
 801c594:	d000      	beq.n	801c598 <_ux_device_stack_descriptor_send+0x350>
 801c596:	e070      	b.n	801c67a <_ux_device_stack_descriptor_send+0x432>
                    if (*(string_framework + 2) == descriptor_index)
 801c598:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c59a:	3302      	adds	r3, #2
 801c59c:	781b      	ldrb	r3, [r3, #0]
 801c59e:	001a      	movs	r2, r3
 801c5a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c5a2:	4293      	cmp	r3, r2
 801c5a4:	d169      	bne.n	801c67a <_ux_device_stack_descriptor_send+0x432>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 801c5a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c5a8:	3303      	adds	r3, #3
 801c5aa:	781b      	ldrb	r3, [r3, #0]
 801c5ac:	3301      	adds	r3, #1
 801c5ae:	005a      	lsls	r2, r3, #1
 801c5b0:	2380      	movs	r3, #128	@ 0x80
 801c5b2:	005b      	lsls	r3, r3, #1
 801c5b4:	429a      	cmp	r2, r3
 801c5b6:	dd15      	ble.n	801c5e4 <_ux_device_stack_descriptor_send+0x39c>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 801c5b8:	2212      	movs	r2, #18
 801c5ba:	2109      	movs	r1, #9
 801c5bc:	2002      	movs	r0, #2
 801c5be:	f7fb fab5 	bl	8017b2c <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801c5c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c5c4:	699b      	ldr	r3, [r3, #24]
 801c5c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c5c8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801c5ca:	2114      	movs	r1, #20
 801c5cc:	4798      	blx	r3
 801c5ce:	0003      	movs	r3, r0
 801c5d0:	673b      	str	r3, [r7, #112]	@ 0x70
                            break;
 801c5d2:	e065      	b.n	801c6a0 <_ux_device_stack_descriptor_send+0x458>
 801c5d4:	20011854 	.word	0x20011854
 801c5d8:	0801f43c 	.word	0x0801f43c
 801c5dc:	20000040 	.word	0x20000040
 801c5e0:	2000002c 	.word	0x2000002c
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 801c5e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c5e6:	68db      	ldr	r3, [r3, #12]
 801c5e8:	64bb      	str	r3, [r7, #72]	@ 0x48
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 801c5ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c5ec:	3303      	adds	r3, #3
 801c5ee:	781b      	ldrb	r3, [r3, #0]
 801c5f0:	3301      	adds	r3, #1
 801c5f2:	b2db      	uxtb	r3, r3
 801c5f4:	18db      	adds	r3, r3, r3
 801c5f6:	b2da      	uxtb	r2, r3
 801c5f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c5fa:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 801c5fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c5fe:	3301      	adds	r3, #1
 801c600:	2203      	movs	r2, #3
 801c602:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 801c604:	2300      	movs	r3, #0
 801c606:	663b      	str	r3, [r7, #96]	@ 0x60
 801c608:	e015      	b.n	801c636 <_ux_device_stack_descriptor_send+0x3ee>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 801c60a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c60c:	3304      	adds	r3, #4
 801c60e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801c610:	18d2      	adds	r2, r2, r3
 801c612:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c614:	3301      	adds	r3, #1
 801c616:	005b      	lsls	r3, r3, #1
 801c618:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801c61a:	18cb      	adds	r3, r1, r3
 801c61c:	7812      	ldrb	r2, [r2, #0]
 801c61e:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 801c620:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c622:	3301      	adds	r3, #1
 801c624:	005b      	lsls	r3, r3, #1
 801c626:	3301      	adds	r3, #1
 801c628:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c62a:	18d3      	adds	r3, r2, r3
 801c62c:	2200      	movs	r2, #0
 801c62e:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 801c630:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c632:	3301      	adds	r3, #1
 801c634:	663b      	str	r3, [r7, #96]	@ 0x60
 801c636:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c638:	3303      	adds	r3, #3
 801c63a:	781b      	ldrb	r3, [r3, #0]
 801c63c:	001a      	movs	r2, r3
 801c63e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c640:	4293      	cmp	r3, r2
 801c642:	d3e2      	bcc.n	801c60a <_ux_device_stack_descriptor_send+0x3c2>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 801c644:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c646:	3303      	adds	r3, #3
 801c648:	781b      	ldrb	r3, [r3, #0]
 801c64a:	3301      	adds	r3, #1
 801c64c:	005b      	lsls	r3, r3, #1
 801c64e:	001a      	movs	r2, r3
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	4293      	cmp	r3, r2
 801c654:	d906      	bls.n	801c664 <_ux_device_stack_descriptor_send+0x41c>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 801c656:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c658:	3303      	adds	r3, #3
 801c65a:	781b      	ldrb	r3, [r3, #0]
 801c65c:	3301      	adds	r3, #1
 801c65e:	005b      	lsls	r3, r3, #1
 801c660:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801c662:	e001      	b.n	801c668 <_ux_device_stack_descriptor_send+0x420>
                            length =  host_length;
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	66fb      	str	r3, [r7, #108]	@ 0x6c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801c668:	687a      	ldr	r2, [r7, #4]
 801c66a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801c66c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c66e:	0018      	movs	r0, r3
 801c670:	f000 fd80 	bl	801d174 <_ux_device_stack_transfer_request>
 801c674:	0003      	movs	r3, r0
 801c676:	673b      	str	r3, [r7, #112]	@ 0x70
                        break;
 801c678:	e012      	b.n	801c6a0 <_ux_device_stack_descriptor_send+0x458>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 801c67a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c67c:	3303      	adds	r3, #3
 801c67e:	781b      	ldrb	r3, [r3, #0]
 801c680:	001a      	movs	r2, r3
 801c682:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c684:	1a9b      	subs	r3, r3, r2
 801c686:	3b04      	subs	r3, #4
 801c688:	667b      	str	r3, [r7, #100]	@ 0x64
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 801c68a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c68c:	3303      	adds	r3, #3
 801c68e:	781b      	ldrb	r3, [r3, #0]
 801c690:	3304      	adds	r3, #4
 801c692:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801c694:	18d3      	adds	r3, r2, r3
 801c696:	66bb      	str	r3, [r7, #104]	@ 0x68
            while (string_framework_length != 0)
 801c698:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c69a:	2b00      	cmp	r3, #0
 801c69c:	d000      	beq.n	801c6a0 <_ux_device_stack_descriptor_send+0x458>
 801c69e:	e772      	b.n	801c586 <_ux_device_stack_descriptor_send+0x33e>
            if (string_framework_length == 0)
 801c6a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d111      	bne.n	801c6ca <_ux_device_stack_descriptor_send+0x482>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801c6a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c6a8:	699b      	ldr	r3, [r3, #24]
 801c6aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c6ac:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801c6ae:	2114      	movs	r1, #20
 801c6b0:	4798      	blx	r3
                return(UX_ERROR);
 801c6b2:	23ff      	movs	r3, #255	@ 0xff
 801c6b4:	e00b      	b.n	801c6ce <_ux_device_stack_descriptor_send+0x486>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801c6b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c6b8:	699b      	ldr	r3, [r3, #24]
 801c6ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c6bc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801c6be:	2114      	movs	r1, #20
 801c6c0:	4798      	blx	r3
        return(UX_ERROR);
 801c6c2:	23ff      	movs	r3, #255	@ 0xff
 801c6c4:	e003      	b.n	801c6ce <_ux_device_stack_descriptor_send+0x486>
        break;
 801c6c6:	46c0      	nop			@ (mov r8, r8)
 801c6c8:	e000      	b.n	801c6cc <_ux_device_stack_descriptor_send+0x484>
        break;
 801c6ca:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return the status to the caller.  */
    return(status);
 801c6cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
}
 801c6ce:	0018      	movs	r0, r3
 801c6d0:	46bd      	mov	sp, r7
 801c6d2:	b023      	add	sp, #140	@ 0x8c
 801c6d4:	bd90      	pop	{r4, r7, pc}
 801c6d6:	46c0      	nop			@ (mov r8, r8)

0801c6d8 <_ux_device_stack_disconnect>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 801c6d8:	b580      	push	{r7, lr}
 801c6da:	b092      	sub	sp, #72	@ 0x48
 801c6dc:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 801c6de:	23ff      	movs	r3, #255	@ 0xff
 801c6e0:	643b      	str	r3, [r7, #64]	@ 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801c6e2:	4b2d      	ldr	r3, [pc, #180]	@ (801c798 <_ux_device_stack_disconnect+0xc0>)
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801c6e8:	4b2b      	ldr	r3, [pc, #172]	@ (801c798 <_ux_device_stack_disconnect+0xc0>)
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	3320      	adds	r3, #32
 801c6ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 801c6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	2b03      	cmp	r3, #3
 801c6f6:	d127      	bne.n	801c748 <_ux_device_stack_disconnect+0x70>
    {
        /* Get the pointer to the first interface.  */
        interface =  device -> ux_slave_device_first_interface;
 801c6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c6fa:	22f0      	movs	r2, #240	@ 0xf0
 801c6fc:	589b      	ldr	r3, [r3, r2]
 801c6fe:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface != UX_NULL)
 801c700:	e01c      	b.n	801c73c <_ux_device_stack_disconnect+0x64>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 801c702:	1d3b      	adds	r3, r7, #4
 801c704:	2203      	movs	r2, #3
 801c706:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface;
 801c708:	1d3b      	adds	r3, r7, #4
 801c70a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c70c:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class =  interface -> ux_slave_interface_class;
 801c70e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c710:	685b      	ldr	r3, [r3, #4]
 801c712:	637b      	str	r3, [r7, #52]	@ 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class;
 801c714:	1d3b      	adds	r3, r7, #4
 801c716:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c718:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class != UX_NULL)
 801c71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d004      	beq.n	801c72a <_ux_device_stack_disconnect+0x52>
            
                /* Call the class with the DEACTIVATE signal.  */
                class -> ux_slave_class_entry_function(&class_command);
 801c720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c724:	1d3a      	adds	r2, r7, #4
 801c726:	0010      	movs	r0, r2
 801c728:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface -> ux_slave_interface_next_interface;
 801c72a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c72c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c72e:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface);
 801c730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c732:	0018      	movs	r0, r3
 801c734:	f000 fab8 	bl	801cca8 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface =  next_interface;
 801c738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c73a:	647b      	str	r3, [r7, #68]	@ 0x44
        while (interface != UX_NULL)
 801c73c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d1df      	bne.n	801c702 <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801c742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c744:	2201      	movs	r2, #1
 801c746:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 801c748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c74a:	681b      	ldr	r3, [r3, #0]
 801c74c:	2b01      	cmp	r3, #1
 801c74e:	d108      	bne.n	801c762 <_ux_device_stack_disconnect+0x8a>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 801c750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c752:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 801c754:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c756:	323c      	adds	r2, #60	@ 0x3c
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 801c758:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801c75a:	210f      	movs	r1, #15
 801c75c:	4798      	blx	r3
 801c75e:	0003      	movs	r3, r0
 801c760:	643b      	str	r3, [r7, #64]	@ 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 801c762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c764:	22cc      	movs	r2, #204	@ 0xcc
 801c766:	2100      	movs	r1, #0
 801c768:	5099      	str	r1, [r3, r2]

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 801c76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c76c:	2200      	movs	r2, #0
 801c76e:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 801c770:	4b09      	ldr	r3, [pc, #36]	@ (801c798 <_ux_device_stack_disconnect+0xc0>)
 801c772:	681a      	ldr	r2, [r3, #0]
 801c774:	23e2      	movs	r3, #226	@ 0xe2
 801c776:	005b      	lsls	r3, r3, #1
 801c778:	58d3      	ldr	r3, [r2, r3]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d006      	beq.n	801c78c <_ux_device_stack_disconnect+0xb4>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 801c77e:	4b06      	ldr	r3, [pc, #24]	@ (801c798 <_ux_device_stack_disconnect+0xc0>)
 801c780:	681a      	ldr	r2, [r3, #0]
 801c782:	23e2      	movs	r3, #226	@ 0xe2
 801c784:	005b      	lsls	r3, r3, #1
 801c786:	58d3      	ldr	r3, [r2, r3]
 801c788:	200a      	movs	r0, #10
 801c78a:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 801c78c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 801c78e:	0018      	movs	r0, r3
 801c790:	46bd      	mov	sp, r7
 801c792:	b012      	add	sp, #72	@ 0x48
 801c794:	bd80      	pop	{r7, pc}
 801c796:	46c0      	nop			@ (mov r8, r8)
 801c798:	20011854 	.word	0x20011854

0801c79c <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 801c79c:	b580      	push	{r7, lr}
 801c79e:	b088      	sub	sp, #32
 801c7a0:	af00      	add	r7, sp, #0
 801c7a2:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801c7a4:	4b17      	ldr	r3, [pc, #92]	@ (801c804 <_ux_device_stack_endpoint_stall+0x68>)
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 801c7aa:	23ff      	movs	r3, #255	@ 0xff
 801c7ac:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801c7ae:	f3ef 8310 	mrs	r3, PRIMASK
 801c7b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801c7b4:	b672      	cpsid	i
    return(primask_value);
 801c7b6:	693b      	ldr	r3, [r7, #16]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 801c7b8:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 801c7ba:	4b12      	ldr	r3, [pc, #72]	@ (801c804 <_ux_device_stack_endpoint_stall+0x68>)
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	6a1b      	ldr	r3, [r3, #32]
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	d013      	beq.n	801c7ec <_ux_device_stack_endpoint_stall+0x50>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 801c7c8:	2b02      	cmp	r3, #2
 801c7ca:	d00f      	beq.n	801c7ec <_ux_device_stack_endpoint_stall+0x50>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801c7cc:	69bb      	ldr	r3, [r7, #24]
 801c7ce:	699b      	ldr	r3, [r3, #24]
 801c7d0:	687a      	ldr	r2, [r7, #4]
 801c7d2:	69b8      	ldr	r0, [r7, #24]
 801c7d4:	2114      	movs	r1, #20
 801c7d6:	4798      	blx	r3
 801c7d8:	0003      	movs	r3, r0
 801c7da:	61fb      	str	r3, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	699b      	ldr	r3, [r3, #24]
 801c7e0:	2203      	movs	r2, #3
 801c7e2:	4013      	ands	r3, r2
 801c7e4:	d002      	beq.n	801c7ec <_ux_device_stack_endpoint_stall+0x50>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	2202      	movs	r2, #2
 801c7ea:	605a      	str	r2, [r3, #4]
 801c7ec:	697b      	ldr	r3, [r7, #20]
 801c7ee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	f383 8810 	msr	PRIMASK, r3
}
 801c7f6:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 801c7f8:	69fb      	ldr	r3, [r7, #28]
}
 801c7fa:	0018      	movs	r0, r3
 801c7fc:	46bd      	mov	sp, r7
 801c7fe:	b008      	add	sp, #32
 801c800:	bd80      	pop	{r7, pc}
 801c802:	46c0      	nop			@ (mov r8, r8)
 801c804:	20011854 	.word	0x20011854

0801c808 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 801c808:	b580      	push	{r7, lr}
 801c80a:	b08a      	sub	sp, #40	@ 0x28
 801c80c:	af00      	add	r7, sp, #0
 801c80e:	60f8      	str	r0, [r7, #12]
 801c810:	60b9      	str	r1, [r7, #8]
 801c812:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801c814:	4b3d      	ldr	r3, [pc, #244]	@ (801c90c <_ux_device_stack_get_status+0x104>)
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801c81a:	4b3c      	ldr	r3, [pc, #240]	@ (801c90c <_ux_device_stack_get_status+0x104>)
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	3320      	adds	r3, #32
 801c820:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801c822:	69fb      	ldr	r3, [r7, #28]
 801c824:	333c      	adds	r3, #60	@ 0x3c
 801c826:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801c828:	69bb      	ldr	r3, [r7, #24]
 801c82a:	3330      	adds	r3, #48	@ 0x30
 801c82c:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 801c82e:	697b      	ldr	r3, [r7, #20]
 801c830:	68db      	ldr	r3, [r3, #12]
 801c832:	2200      	movs	r2, #0
 801c834:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 801c836:	697b      	ldr	r3, [r7, #20]
 801c838:	68db      	ldr	r3, [r3, #12]
 801c83a:	3301      	adds	r3, #1
 801c83c:	2200      	movs	r2, #0
 801c83e:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 801c840:	2302      	movs	r3, #2
 801c842:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 801c844:	68fb      	ldr	r3, [r7, #12]
 801c846:	2203      	movs	r2, #3
 801c848:	4013      	ands	r3, r2
 801c84a:	d002      	beq.n	801c852 <_ux_device_stack_get_status+0x4a>
 801c84c:	2b02      	cmp	r3, #2
 801c84e:	d024      	beq.n	801c89a <_ux_device_stack_get_status+0x92>
 801c850:	e040      	b.n	801c8d4 <_ux_device_stack_get_status+0xcc>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 801c852:	68ba      	ldr	r2, [r7, #8]
 801c854:	23f0      	movs	r3, #240	@ 0xf0
 801c856:	021b      	lsls	r3, r3, #8
 801c858:	429a      	cmp	r2, r3
 801c85a:	d102      	bne.n	801c862 <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 801c85c:	2301      	movs	r3, #1
 801c85e:	627b      	str	r3, [r7, #36]	@ 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 801c860:	e040      	b.n	801c8e4 <_ux_device_stack_get_status+0xdc>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 801c862:	4b2a      	ldr	r3, [pc, #168]	@ (801c90c <_ux_device_stack_get_status+0x104>)
 801c864:	681a      	ldr	r2, [r3, #0]
 801c866:	23d2      	movs	r3, #210	@ 0xd2
 801c868:	005b      	lsls	r3, r3, #1
 801c86a:	58d3      	ldr	r3, [r2, r3]
 801c86c:	2b02      	cmp	r3, #2
 801c86e:	d103      	bne.n	801c878 <_ux_device_stack_get_status+0x70>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 801c870:	697b      	ldr	r3, [r7, #20]
 801c872:	68db      	ldr	r3, [r3, #12]
 801c874:	2201      	movs	r2, #1
 801c876:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 801c878:	4b24      	ldr	r3, [pc, #144]	@ (801c90c <_ux_device_stack_get_status+0x104>)
 801c87a:	681a      	ldr	r2, [r3, #0]
 801c87c:	23d6      	movs	r3, #214	@ 0xd6
 801c87e:	005b      	lsls	r3, r3, #1
 801c880:	58d3      	ldr	r3, [r2, r3]
 801c882:	2b00      	cmp	r3, #0
 801c884:	d02e      	beq.n	801c8e4 <_ux_device_stack_get_status+0xdc>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 801c886:	697b      	ldr	r3, [r7, #20]
 801c888:	68db      	ldr	r3, [r3, #12]
 801c88a:	781a      	ldrb	r2, [r3, #0]
 801c88c:	697b      	ldr	r3, [r7, #20]
 801c88e:	68db      	ldr	r3, [r3, #12]
 801c890:	2102      	movs	r1, #2
 801c892:	430a      	orrs	r2, r1
 801c894:	b2d2      	uxtb	r2, r2
 801c896:	701a      	strb	r2, [r3, #0]
        break;
 801c898:	e024      	b.n	801c8e4 <_ux_device_stack_get_status+0xdc>

#ifndef UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT

        /* This feature returns the halt state of a specific endpoint.  The endpoint index
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
 801c89a:	6a3b      	ldr	r3, [r7, #32]
 801c89c:	699b      	ldr	r3, [r3, #24]
 801c89e:	68ba      	ldr	r2, [r7, #8]
 801c8a0:	2180      	movs	r1, #128	@ 0x80
 801c8a2:	438a      	bics	r2, r1
 801c8a4:	6a38      	ldr	r0, [r7, #32]
 801c8a6:	2115      	movs	r1, #21
 801c8a8:	4798      	blx	r3
 801c8aa:	0003      	movs	r3, r0
 801c8ac:	613b      	str	r3, [r7, #16]
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 801c8ae:	693b      	ldr	r3, [r7, #16]
 801c8b0:	2bff      	cmp	r3, #255	@ 0xff
 801c8b2:	d007      	beq.n	801c8c4 <_ux_device_stack_get_status+0xbc>
        {

            if (status == UX_TRUE)
 801c8b4:	693b      	ldr	r3, [r7, #16]
 801c8b6:	2b01      	cmp	r3, #1
 801c8b8:	d116      	bne.n	801c8e8 <_ux_device_stack_get_status+0xe0>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 801c8ba:	697b      	ldr	r3, [r7, #20]
 801c8bc:	68db      	ldr	r3, [r3, #12]
 801c8be:	2201      	movs	r2, #1
 801c8c0:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 801c8c2:	e011      	b.n	801c8e8 <_ux_device_stack_get_status+0xe0>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801c8c4:	6a3b      	ldr	r3, [r7, #32]
 801c8c6:	699b      	ldr	r3, [r3, #24]
 801c8c8:	69ba      	ldr	r2, [r7, #24]
 801c8ca:	6a38      	ldr	r0, [r7, #32]
 801c8cc:	2114      	movs	r1, #20
 801c8ce:	4798      	blx	r3
            return(UX_SUCCESS);            
 801c8d0:	2300      	movs	r3, #0
 801c8d2:	e016      	b.n	801c902 <_ux_device_stack_get_status+0xfa>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801c8d4:	6a3b      	ldr	r3, [r7, #32]
 801c8d6:	699b      	ldr	r3, [r3, #24]
 801c8d8:	69ba      	ldr	r2, [r7, #24]
 801c8da:	6a38      	ldr	r0, [r7, #32]
 801c8dc:	2114      	movs	r1, #20
 801c8de:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 801c8e0:	2300      	movs	r3, #0
 801c8e2:	e00e      	b.n	801c902 <_ux_device_stack_get_status+0xfa>
        break;
 801c8e4:	46c0      	nop			@ (mov r8, r8)
 801c8e6:	e000      	b.n	801c8ea <_ux_device_stack_get_status+0xe2>
        break;
 801c8e8:	46c0      	nop			@ (mov r8, r8)
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801c8ea:	697b      	ldr	r3, [r7, #20]
 801c8ec:	2203      	movs	r2, #3
 801c8ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 801c8f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c8f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c8f4:	697b      	ldr	r3, [r7, #20]
 801c8f6:	0018      	movs	r0, r3
 801c8f8:	f000 fc3c 	bl	801d174 <_ux_device_stack_transfer_request>
 801c8fc:	0003      	movs	r3, r0
 801c8fe:	613b      	str	r3, [r7, #16]

    /* Return the function status.  */
    return(status);
 801c900:	693b      	ldr	r3, [r7, #16]
}
 801c902:	0018      	movs	r0, r3
 801c904:	46bd      	mov	sp, r7
 801c906:	b00a      	add	sp, #40	@ 0x28
 801c908:	bd80      	pop	{r7, pc}
 801c90a:	46c0      	nop			@ (mov r8, r8)
 801c90c:	20011854 	.word	0x20011854

0801c910 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 801c910:	b580      	push	{r7, lr}
 801c912:	b094      	sub	sp, #80	@ 0x50
 801c914:	af00      	add	r7, sp, #0
 801c916:	60f8      	str	r0, [r7, #12]
 801c918:	60b9      	str	r1, [r7, #8]
 801c91a:	607a      	str	r2, [r7, #4]
 801c91c:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801c91e:	4bbe      	ldr	r3, [pc, #760]	@ (801cc18 <_ux_device_stack_initialize+0x308>)
 801c920:	681b      	ldr	r3, [r3, #0]
 801c922:	3320      	adds	r3, #32
 801c924:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 801c926:	4bbc      	ldr	r3, [pc, #752]	@ (801cc18 <_ux_device_stack_initialize+0x308>)
 801c928:	681a      	ldr	r2, [r3, #0]
 801c92a:	239c      	movs	r3, #156	@ 0x9c
 801c92c:	005b      	lsls	r3, r3, #1
 801c92e:	68f9      	ldr	r1, [r7, #12]
 801c930:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 801c932:	4bb9      	ldr	r3, [pc, #740]	@ (801cc18 <_ux_device_stack_initialize+0x308>)
 801c934:	681a      	ldr	r2, [r3, #0]
 801c936:	239e      	movs	r3, #158	@ 0x9e
 801c938:	005b      	lsls	r3, r3, #1
 801c93a:	68b9      	ldr	r1, [r7, #8]
 801c93c:	50d1      	str	r1, [r2, r3]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 801c93e:	4bb6      	ldr	r3, [pc, #728]	@ (801cc18 <_ux_device_stack_initialize+0x308>)
 801c940:	681a      	ldr	r2, [r3, #0]
 801c942:	2398      	movs	r3, #152	@ 0x98
 801c944:	005b      	lsls	r3, r3, #1
 801c946:	6879      	ldr	r1, [r7, #4]
 801c948:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 801c94a:	4bb3      	ldr	r3, [pc, #716]	@ (801cc18 <_ux_device_stack_initialize+0x308>)
 801c94c:	681a      	ldr	r2, [r3, #0]
 801c94e:	239a      	movs	r3, #154	@ 0x9a
 801c950:	005b      	lsls	r3, r3, #1
 801c952:	6839      	ldr	r1, [r7, #0]
 801c954:	50d1      	str	r1, [r2, r3]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 801c956:	4bb0      	ldr	r3, [pc, #704]	@ (801cc18 <_ux_device_stack_initialize+0x308>)
 801c958:	681a      	ldr	r2, [r3, #0]
 801c95a:	23a0      	movs	r3, #160	@ 0xa0
 801c95c:	005b      	lsls	r3, r3, #1
 801c95e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801c960:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 801c962:	4bad      	ldr	r3, [pc, #692]	@ (801cc18 <_ux_device_stack_initialize+0x308>)
 801c964:	681a      	ldr	r2, [r3, #0]
 801c966:	23a2      	movs	r3, #162	@ 0xa2
 801c968:	005b      	lsls	r3, r3, #1
 801c96a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801c96c:	50d1      	str	r1, [r2, r3]

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 801c96e:	4baa      	ldr	r3, [pc, #680]	@ (801cc18 <_ux_device_stack_initialize+0x308>)
 801c970:	681a      	ldr	r2, [r3, #0]
 801c972:	23a4      	movs	r3, #164	@ 0xa4
 801c974:	005b      	lsls	r3, r3, #1
 801c976:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801c978:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 801c97a:	4ba7      	ldr	r3, [pc, #668]	@ (801cc18 <_ux_device_stack_initialize+0x308>)
 801c97c:	681a      	ldr	r2, [r3, #0]
 801c97e:	23a6      	movs	r3, #166	@ 0xa6
 801c980:	005b      	lsls	r3, r3, #1
 801c982:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801c984:	50d1      	str	r1, [r2, r3]

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
 801c986:	4ba4      	ldr	r3, [pc, #656]	@ (801cc18 <_ux_device_stack_initialize+0x308>)
 801c988:	681a      	ldr	r2, [r3, #0]
 801c98a:	23ac      	movs	r3, #172	@ 0xac
 801c98c:	005b      	lsls	r3, r3, #1
 801c98e:	2103      	movs	r1, #3
 801c990:	50d1      	str	r1, [r2, r3]
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 801c992:	4ba1      	ldr	r3, [pc, #644]	@ (801cc18 <_ux_device_stack_initialize+0x308>)
 801c994:	681a      	ldr	r2, [r3, #0]
 801c996:	23e2      	movs	r3, #226	@ 0xe2
 801c998:	005b      	lsls	r3, r3, #1
 801c99a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801c99c:	50d1      	str	r1, [r2, r3]

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 801c99e:	23cf      	movs	r3, #207	@ 0xcf
 801c9a0:	009b      	lsls	r3, r3, #2
 801c9a2:	001a      	movs	r2, r3
 801c9a4:	2100      	movs	r1, #0
 801c9a6:	2000      	movs	r0, #0
 801c9a8:	f7fb fad8 	bl	8017f5c <_ux_utility_memory_allocate>
 801c9ac:	0003      	movs	r3, r0
 801c9ae:	623b      	str	r3, [r7, #32]
    if (memory == UX_NULL)
 801c9b0:	6a3b      	ldr	r3, [r7, #32]
 801c9b2:	2b00      	cmp	r3, #0
 801c9b4:	d101      	bne.n	801c9ba <_ux_device_stack_initialize+0xaa>
        return(UX_MEMORY_INSUFFICIENT);
 801c9b6:	2312      	movs	r3, #18
 801c9b8:	e170      	b.n	801cc9c <_ux_device_stack_initialize+0x38c>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 801c9ba:	4b97      	ldr	r3, [pc, #604]	@ (801cc18 <_ux_device_stack_initialize+0x308>)
 801c9bc:	681a      	ldr	r2, [r3, #0]
 801c9be:	23ae      	movs	r3, #174	@ 0xae
 801c9c0:	005b      	lsls	r3, r3, #1
 801c9c2:	6a39      	ldr	r1, [r7, #32]
 801c9c4:	50d1      	str	r1, [r2, r3]

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 801c9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9c8:	336c      	adds	r3, #108	@ 0x6c
 801c9ca:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 801c9cc:	2380      	movs	r3, #128	@ 0x80
 801c9ce:	005b      	lsls	r3, r3, #1
 801c9d0:	001a      	movs	r2, r3
 801c9d2:	2101      	movs	r1, #1
 801c9d4:	2000      	movs	r0, #0
 801c9d6:	f7fb fac1 	bl	8017f5c <_ux_utility_memory_allocate>
 801c9da:	0002      	movs	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 801c9dc:	69fb      	ldr	r3, [r7, #28]
 801c9de:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 801c9e0:	69fb      	ldr	r3, [r7, #28]
 801c9e2:	68db      	ldr	r3, [r3, #12]
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d102      	bne.n	801c9ee <_ux_device_stack_initialize+0xde>
        status = UX_MEMORY_INSUFFICIENT;
 801c9e8:	2312      	movs	r3, #18
 801c9ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c9ec:	e001      	b.n	801c9f2 <_ux_device_stack_initialize+0xe2>
    else
        status = UX_SUCCESS;
 801c9ee:	2300      	movs	r3, #0
 801c9f0:	64bb      	str	r3, [r7, #72]	@ 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 801c9f2:	2300      	movs	r3, #0
 801c9f4:	647b      	str	r3, [r7, #68]	@ 0x44
    endpoints_found                    =  0;
 801c9f6:	2300      	movs	r3, #0
 801c9f8:	643b      	str	r3, [r7, #64]	@ 0x40
    max_interface_number               =  0;
 801c9fa:	2300      	movs	r3, #0
 801c9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 801c9fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d000      	beq.n	801ca06 <_ux_device_stack_initialize+0xf6>
 801ca04:	e094      	b.n	801cb30 <_ux_device_stack_initialize+0x220>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 801ca06:	4b84      	ldr	r3, [pc, #528]	@ (801cc18 <_ux_device_stack_initialize+0x308>)
 801ca08:	681a      	ldr	r2, [r3, #0]
 801ca0a:	2398      	movs	r3, #152	@ 0x98
 801ca0c:	005b      	lsls	r3, r3, #1
 801ca0e:	58d3      	ldr	r3, [r2, r3]
 801ca10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 801ca12:	4b81      	ldr	r3, [pc, #516]	@ (801cc18 <_ux_device_stack_initialize+0x308>)
 801ca14:	681a      	ldr	r2, [r3, #0]
 801ca16:	239a      	movs	r3, #154	@ 0x9a
 801ca18:	005b      	lsls	r3, r3, #1
 801ca1a:	58d3      	ldr	r3, [r2, r3]
 801ca1c:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 801ca1e:	2300      	movs	r3, #0
 801ca20:	63bb      	str	r3, [r7, #56]	@ 0x38
        local_endpoints_found              =  0;
 801ca22:	2300      	movs	r3, #0
 801ca24:	637b      	str	r3, [r7, #52]	@ 0x34
        endpoints_in_interface_found       =  0;
 801ca26:	2300      	movs	r3, #0
 801ca28:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 801ca2a:	e057      	b.n	801cadc <_ux_device_stack_initialize+0x1cc>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 801ca2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca2e:	781b      	ldrb	r3, [r3, #0]
 801ca30:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 801ca32:	2117      	movs	r1, #23
 801ca34:	187b      	adds	r3, r7, r1
 801ca36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ca38:	7852      	ldrb	r2, [r2, #1]
 801ca3a:	701a      	strb	r2, [r3, #0]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 801ca3c:	187b      	adds	r3, r7, r1
 801ca3e:	781b      	ldrb	r3, [r3, #0]
 801ca40:	2b02      	cmp	r3, #2
 801ca42:	d029      	beq.n	801ca98 <_ux_device_stack_initialize+0x188>
 801ca44:	2b04      	cmp	r3, #4
 801ca46:	d13e      	bne.n	801cac6 <_ux_device_stack_initialize+0x1b6>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 801ca48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca4a:	3303      	adds	r3, #3
 801ca4c:	781b      	ldrb	r3, [r3, #0]
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	d10b      	bne.n	801ca6a <_ux_device_stack_initialize+0x15a>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 801ca52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ca54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca56:	18d3      	adds	r3, r2, r3
 801ca58:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 801ca5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca5c:	3304      	adds	r3, #4
 801ca5e:	781b      	ldrb	r3, [r3, #0]
 801ca60:	633b      	str	r3, [r7, #48]	@ 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 801ca62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca64:	3301      	adds	r3, #1
 801ca66:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ca68:	e00a      	b.n	801ca80 <_ux_device_stack_initialize+0x170>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 801ca6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca6c:	3304      	adds	r3, #4
 801ca6e:	781b      	ldrb	r3, [r3, #0]
 801ca70:	001a      	movs	r2, r3
 801ca72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca74:	4293      	cmp	r3, r2
 801ca76:	d203      	bcs.n	801ca80 <_ux_device_stack_initialize+0x170>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 801ca78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca7a:	3304      	adds	r3, #4
 801ca7c:	781b      	ldrb	r3, [r3, #0]
 801ca7e:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 801ca80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca82:	3302      	adds	r3, #2
 801ca84:	781b      	ldrb	r3, [r3, #0]
 801ca86:	001a      	movs	r2, r3
 801ca88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ca8a:	4293      	cmp	r3, r2
 801ca8c:	d21d      	bcs.n	801caca <_ux_device_stack_initialize+0x1ba>
                    max_interface_number = *(device_framework + 2);
 801ca8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca90:	3302      	adds	r3, #2
 801ca92:	781b      	ldrb	r3, [r3, #0]
 801ca94:	63fb      	str	r3, [r7, #60]	@ 0x3c

                break;
 801ca96:	e018      	b.n	801caca <_ux_device_stack_initialize+0x1ba>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 801ca98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ca9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ca9c:	429a      	cmp	r2, r3
 801ca9e:	d901      	bls.n	801caa4 <_ux_device_stack_initialize+0x194>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 801caa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801caa2:	647b      	str	r3, [r7, #68]	@ 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 801caa4:	2300      	movs	r3, #0
 801caa6:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 801caa8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801caaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801caac:	18d3      	adds	r3, r2, r3
 801caae:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 801cab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801cab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cab4:	429a      	cmp	r2, r3
 801cab6:	d901      	bls.n	801cabc <_ux_device_stack_initialize+0x1ac>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 801cab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801caba:	643b      	str	r3, [r7, #64]	@ 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 801cabc:	2300      	movs	r3, #0
 801cabe:	637b      	str	r3, [r7, #52]	@ 0x34
                endpoints_in_interface_found  =  0;
 801cac0:	2300      	movs	r3, #0
 801cac2:	633b      	str	r3, [r7, #48]	@ 0x30

                break;
 801cac4:	e002      	b.n	801cacc <_ux_device_stack_initialize+0x1bc>

            default:
                break;
 801cac6:	46c0      	nop			@ (mov r8, r8)
 801cac8:	e000      	b.n	801cacc <_ux_device_stack_initialize+0x1bc>
                break;
 801caca:	46c0      	nop			@ (mov r8, r8)
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 801cacc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cace:	69bb      	ldr	r3, [r7, #24]
 801cad0:	1ad3      	subs	r3, r2, r3
 801cad2:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 801cad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801cad6:	69bb      	ldr	r3, [r7, #24]
 801cad8:	18d3      	adds	r3, r2, r3
 801cada:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (device_framework_length != 0)
 801cadc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d1a4      	bne.n	801ca2c <_ux_device_stack_initialize+0x11c>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 801cae2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801cae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cae6:	18d3      	adds	r3, r2, r3
 801cae8:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 801caea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801caec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801caee:	429a      	cmp	r2, r3
 801caf0:	d901      	bls.n	801caf6 <_ux_device_stack_initialize+0x1e6>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 801caf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801caf4:	643b      	str	r3, [r7, #64]	@ 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 801caf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801caf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cafa:	429a      	cmp	r2, r3
 801cafc:	d901      	bls.n	801cb02 <_ux_device_stack_initialize+0x1f2>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 801cafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb00:	647b      	str	r3, [r7, #68]	@ 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 801cb02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	d106      	bne.n	801cb16 <_ux_device_stack_initialize+0x206>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 801cb08:	2242      	movs	r2, #66	@ 0x42
 801cb0a:	2103      	movs	r1, #3
 801cb0c:	2002      	movs	r0, #2
 801cb0e:	f7fb f80d 	bl	8017b2c <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 801cb12:	2342      	movs	r3, #66	@ 0x42
 801cb14:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 801cb16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	d109      	bne.n	801cb30 <_ux_device_stack_initialize+0x220>
 801cb1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cb1e:	2b0f      	cmp	r3, #15
 801cb20:	d906      	bls.n	801cb30 <_ux_device_stack_initialize+0x220>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 801cb22:	2212      	movs	r2, #18
 801cb24:	2103      	movs	r1, #3
 801cb26:	2002      	movs	r0, #2
 801cb28:	f7fb f800 	bl	8017b2c <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 801cb2c:	2312      	movs	r3, #18
 801cb2e:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 801cb30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	d11a      	bne.n	801cb6c <_ux_device_stack_initialize+0x25c>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 801cb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb38:	21f8      	movs	r1, #248	@ 0xf8
 801cb3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801cb3c:	505a      	str	r2, [r3, r1]
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 801cb3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801cb40:	2380      	movs	r3, #128	@ 0x80
 801cb42:	005b      	lsls	r3, r3, #1
 801cb44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801cb46:	50d1      	str	r1, [r2, r3]

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 801cb48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801cb4a:	2338      	movs	r3, #56	@ 0x38
 801cb4c:	2100      	movs	r1, #0
 801cb4e:	2000      	movs	r0, #0
 801cb50:	f7fb fb0c 	bl	801816c <_ux_utility_memory_allocate_mulc_safe>
 801cb54:	0003      	movs	r3, r0
 801cb56:	613b      	str	r3, [r7, #16]
        if (interfaces_pool == UX_NULL)
 801cb58:	693b      	ldr	r3, [r7, #16]
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	d102      	bne.n	801cb64 <_ux_device_stack_initialize+0x254>
            status = UX_MEMORY_INSUFFICIENT;
 801cb5e:	2312      	movs	r3, #18
 801cb60:	64bb      	str	r3, [r7, #72]	@ 0x48
 801cb62:	e003      	b.n	801cb6c <_ux_device_stack_initialize+0x25c>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 801cb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb66:	21f4      	movs	r1, #244	@ 0xf4
 801cb68:	693a      	ldr	r2, [r7, #16]
 801cb6a:	505a      	str	r2, [r3, r1]
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 801cb6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	d046      	beq.n	801cc00 <_ux_device_stack_initialize+0x2f0>
 801cb72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	d143      	bne.n	801cc00 <_ux_device_stack_initialize+0x2f0>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 801cb78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801cb7a:	2390      	movs	r3, #144	@ 0x90
 801cb7c:	2100      	movs	r1, #0
 801cb7e:	2000      	movs	r0, #0
 801cb80:	f7fb faf4 	bl	801816c <_ux_utility_memory_allocate_mulc_safe>
 801cb84:	0003      	movs	r3, r0
 801cb86:	64fb      	str	r3, [r7, #76]	@ 0x4c
        if (endpoints_pool == UX_NULL)
 801cb88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d102      	bne.n	801cb94 <_ux_device_stack_initialize+0x284>
            status = UX_MEMORY_INSUFFICIENT;
 801cb8e:	2312      	movs	r3, #18
 801cb90:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (endpoints_pool == UX_NULL)
 801cb92:	e037      	b.n	801cc04 <_ux_device_stack_initialize+0x2f4>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 801cb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb96:	21fc      	movs	r1, #252	@ 0xfc
 801cb98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cb9a:	505a      	str	r2, [r3, r1]

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 801cb9c:	e022      	b.n	801cbe4 <_ux_device_stack_initialize+0x2d4>
            {

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 801cb9e:	2380      	movs	r3, #128	@ 0x80
 801cba0:	011b      	lsls	r3, r3, #4
 801cba2:	001a      	movs	r2, r3
 801cba4:	2101      	movs	r1, #1
 801cba6:	2000      	movs	r0, #0
 801cba8:	f7fb f9d8 	bl	8017f5c <_ux_utility_memory_allocate>
 801cbac:	0002      	movs	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 801cbae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cbb0:	63da      	str	r2, [r3, #60]	@ 0x3c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 801cbb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cbb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d102      	bne.n	801cbc0 <_ux_device_stack_initialize+0x2b0>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 801cbba:	2312      	movs	r3, #18
 801cbbc:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 801cbbe:	e01e      	b.n	801cbfe <_ux_device_stack_initialize+0x2ee>
                }
        
                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 801cbc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cbc2:	3360      	adds	r3, #96	@ 0x60
 801cbc4:	4915      	ldr	r1, [pc, #84]	@ (801cc1c <_ux_device_stack_initialize+0x30c>)
 801cbc6:	2200      	movs	r2, #0
 801cbc8:	0018      	movs	r0, r3
 801cbca:	f7fb fc63 	bl	8018494 <_ux_utility_semaphore_create>
 801cbce:	0003      	movs	r3, r0
 801cbd0:	64bb      	str	r3, [r7, #72]	@ 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 801cbd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d002      	beq.n	801cbde <_ux_device_stack_initialize+0x2ce>
                {
                    status = UX_SEMAPHORE_ERROR;
 801cbd8:	2315      	movs	r3, #21
 801cbda:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 801cbdc:	e00f      	b.n	801cbfe <_ux_device_stack_initialize+0x2ee>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 801cbde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cbe0:	3390      	adds	r3, #144	@ 0x90
 801cbe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 801cbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbe6:	22fc      	movs	r2, #252	@ 0xfc
 801cbe8:	5899      	ldr	r1, [r3, r2]
 801cbea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801cbec:	0013      	movs	r3, r2
 801cbee:	00db      	lsls	r3, r3, #3
 801cbf0:	189b      	adds	r3, r3, r2
 801cbf2:	011b      	lsls	r3, r3, #4
 801cbf4:	18cb      	adds	r3, r1, r3
 801cbf6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cbf8:	429a      	cmp	r2, r3
 801cbfa:	d3d0      	bcc.n	801cb9e <_ux_device_stack_initialize+0x28e>
        if (endpoints_pool == UX_NULL)
 801cbfc:	e002      	b.n	801cc04 <_ux_device_stack_initialize+0x2f4>
 801cbfe:	e001      	b.n	801cc04 <_ux_device_stack_initialize+0x2f4>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 801cc00:	2300      	movs	r3, #0
 801cc02:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 801cc04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cc06:	2b00      	cmp	r3, #0
 801cc08:	d101      	bne.n	801cc0e <_ux_device_stack_initialize+0x2fe>
        return(UX_SUCCESS);
 801cc0a:	2300      	movs	r3, #0
 801cc0c:	e046      	b.n	801cc9c <_ux_device_stack_initialize+0x38c>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 801cc0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	d026      	beq.n	801cc62 <_ux_device_stack_initialize+0x352>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 801cc14:	e019      	b.n	801cc4a <_ux_device_stack_initialize+0x33a>
 801cc16:	46c0      	nop			@ (mov r8, r8)
 801cc18:	20011854 	.word	0x20011854
 801cc1c:	0801f01c 	.word	0x0801f01c
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 801cc20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d004      	beq.n	801cc32 <_ux_device_stack_initialize+0x322>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 801cc28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc2a:	3360      	adds	r3, #96	@ 0x60
 801cc2c:	0018      	movs	r0, r3
 801cc2e:	f7fb fc4d 	bl	80184cc <_ux_utility_semaphore_delete>

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 801cc32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d004      	beq.n	801cc44 <_ux_device_stack_initialize+0x334>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 801cc3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cc3e:	0018      	movs	r0, r3
 801cc40:	f7fb faee 	bl	8018220 <_ux_utility_memory_free>

            /* Move to previous endpoint.  */
            endpoints_pool --;
 801cc44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cc46:	3b90      	subs	r3, #144	@ 0x90
 801cc48:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 801cc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc4c:	22fc      	movs	r2, #252	@ 0xfc
 801cc4e:	589b      	ldr	r3, [r3, r2]
 801cc50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cc52:	429a      	cmp	r2, r3
 801cc54:	d2e4      	bcs.n	801cc20 <_ux_device_stack_initialize+0x310>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 801cc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc58:	22fc      	movs	r2, #252	@ 0xfc
 801cc5a:	589b      	ldr	r3, [r3, r2]
 801cc5c:	0018      	movs	r0, r3
 801cc5e:	f7fb fadf 	bl	8018220 <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 801cc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc64:	22f4      	movs	r2, #244	@ 0xf4
 801cc66:	589b      	ldr	r3, [r3, r2]
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d005      	beq.n	801cc78 <_ux_device_stack_initialize+0x368>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 801cc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc6e:	22f4      	movs	r2, #244	@ 0xf4
 801cc70:	589b      	ldr	r3, [r3, r2]
 801cc72:	0018      	movs	r0, r3
 801cc74:	f7fb fad4 	bl	8018220 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 801cc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d004      	beq.n	801cc8a <_ux_device_stack_initialize+0x37a>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 801cc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cc84:	0018      	movs	r0, r3
 801cc86:	f7fb facb 	bl	8018220 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 801cc8a:	4b06      	ldr	r3, [pc, #24]	@ (801cca4 <_ux_device_stack_initialize+0x394>)
 801cc8c:	681a      	ldr	r2, [r3, #0]
 801cc8e:	23ae      	movs	r3, #174	@ 0xae
 801cc90:	005b      	lsls	r3, r3, #1
 801cc92:	58d3      	ldr	r3, [r2, r3]
 801cc94:	0018      	movs	r0, r3
 801cc96:	f7fb fac3 	bl	8018220 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 801cc9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 801cc9c:	0018      	movs	r0, r3
 801cc9e:	46bd      	mov	sp, r7
 801cca0:	b014      	add	sp, #80	@ 0x50
 801cca2:	bd80      	pop	{r7, pc}
 801cca4:	20011854 	.word	0x20011854

0801cca8 <_ux_device_stack_interface_delete>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface)
{
 801cca8:	b580      	push	{r7, lr}
 801ccaa:	b086      	sub	sp, #24
 801ccac:	af00      	add	r7, sp, #0
 801ccae:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801ccb0:	4b20      	ldr	r3, [pc, #128]	@ (801cd34 <_ux_device_stack_interface_delete+0x8c>)
 801ccb2:	681b      	ldr	r3, [r3, #0]
 801ccb4:	3320      	adds	r3, #32
 801ccb6:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface -> ux_slave_interface_first_endpoint;        
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ccbc:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 801ccbe:	e01c      	b.n	801ccfa <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 801ccc0:	697b      	ldr	r3, [r7, #20]
 801ccc2:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 801ccc4:	68fb      	ldr	r3, [r7, #12]
 801ccc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ccc8:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 801ccca:	4b1a      	ldr	r3, [pc, #104]	@ (801cd34 <_ux_device_stack_interface_delete+0x8c>)
 801cccc:	681b      	ldr	r3, [r3, #0]
 801ccce:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 801ccd0:	68bb      	ldr	r3, [r7, #8]
 801ccd2:	699b      	ldr	r3, [r3, #24]
 801ccd4:	68fa      	ldr	r2, [r7, #12]
 801ccd6:	68b8      	ldr	r0, [r7, #8]
 801ccd8:	210f      	movs	r1, #15
 801ccda:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 801ccdc:	68fb      	ldr	r3, [r7, #12]
 801ccde:	2200      	movs	r2, #0
 801cce0:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 801cce2:	68fb      	ldr	r3, [r7, #12]
 801cce4:	2200      	movs	r2, #0
 801cce6:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 801cce8:	68fb      	ldr	r3, [r7, #12]
 801ccea:	2200      	movs	r2, #0
 801ccec:	625a      	str	r2, [r3, #36]	@ 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 801ccee:	68fb      	ldr	r3, [r7, #12]
 801ccf0:	2200      	movs	r2, #0
 801ccf2:	629a      	str	r2, [r3, #40]	@ 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 801ccf4:	68fb      	ldr	r3, [r7, #12]
 801ccf6:	2200      	movs	r2, #0
 801ccf8:	62da      	str	r2, [r3, #44]	@ 0x2c
    while (next_endpoint != UX_NULL)
 801ccfa:	697b      	ldr	r3, [r7, #20]
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	d1df      	bne.n	801ccc0 <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface -> ux_slave_interface_next_interface;
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801cd04:	693b      	ldr	r3, [r7, #16]
 801cd06:	21f0      	movs	r1, #240	@ 0xf0
 801cd08:	505a      	str	r2, [r3, r1]

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface -> ux_slave_interface_class          =  UX_NULL;
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	2200      	movs	r2, #0
 801cd0e:	605a      	str	r2, [r3, #4]
    interface -> ux_slave_interface_class_instance =  UX_NULL;
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	2200      	movs	r2, #0
 801cd14:	609a      	str	r2, [r3, #8]
    interface -> ux_slave_interface_next_interface =  UX_NULL;
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	2200      	movs	r2, #0
 801cd1a:	631a      	str	r2, [r3, #48]	@ 0x30
    interface -> ux_slave_interface_first_endpoint =  UX_NULL;
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	2200      	movs	r2, #0
 801cd20:	635a      	str	r2, [r3, #52]	@ 0x34
    interface -> ux_slave_interface_status         =  UX_UNUSED;
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	2200      	movs	r2, #0
 801cd26:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 801cd28:	2300      	movs	r3, #0
}
 801cd2a:	0018      	movs	r0, r3
 801cd2c:	46bd      	mov	sp, r7
 801cd2e:	b006      	add	sp, #24
 801cd30:	bd80      	pop	{r7, pc}
 801cd32:	46c0      	nop			@ (mov r8, r8)
 801cd34:	20011854 	.word	0x20011854

0801cd38 <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 801cd38:	b580      	push	{r7, lr}
 801cd3a:	b092      	sub	sp, #72	@ 0x48
 801cd3c:	af00      	add	r7, sp, #0
 801cd3e:	60f8      	str	r0, [r7, #12]
 801cd40:	60b9      	str	r1, [r7, #8]
 801cd42:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801cd44:	4b86      	ldr	r3, [pc, #536]	@ (801cf60 <_ux_device_stack_interface_set+0x228>)
 801cd46:	681b      	ldr	r3, [r3, #0]
 801cd48:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801cd4a:	4b85      	ldr	r3, [pc, #532]	@ (801cf60 <_ux_device_stack_interface_set+0x228>)
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	3320      	adds	r3, #32
 801cd50:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface = device -> ux_slave_device_interfaces_pool;
 801cd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd54:	22f4      	movs	r2, #244	@ 0xf4
 801cd56:	589b      	ldr	r3, [r3, r2]
 801cd58:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 801cd5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd5c:	22f8      	movs	r2, #248	@ 0xf8
 801cd5e:	589b      	ldr	r3, [r3, r2]
 801cd60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 801cd62:	e009      	b.n	801cd78 <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface -> ux_slave_interface_status == UX_UNUSED)
 801cd64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cd66:	681b      	ldr	r3, [r3, #0]
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d009      	beq.n	801cd80 <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface++;
 801cd6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cd6e:	3338      	adds	r3, #56	@ 0x38
 801cd70:	647b      	str	r3, [r7, #68]	@ 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 801cd72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cd74:	3b01      	subs	r3, #1
 801cd76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 801cd78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d1f2      	bne.n	801cd64 <_ux_device_stack_interface_set+0x2c>
 801cd7e:	e000      	b.n	801cd82 <_ux_device_stack_interface_set+0x4a>
            break;
 801cd80:	46c0      	nop			@ (mov r8, r8)
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 801cd82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	d101      	bne.n	801cd8c <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 801cd88:	2312      	movs	r3, #18
 801cd8a:	e0e5      	b.n	801cf58 <_ux_device_stack_interface_set+0x220>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface -> ux_slave_interface_status = UX_USED;
 801cd8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cd8e:	2201      	movs	r2, #1
 801cd90:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface -> ux_slave_interface_descriptor);
 801cd92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cd94:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 801cd96:	4973      	ldr	r1, [pc, #460]	@ (801cf64 <_ux_device_stack_interface_set+0x22c>)
 801cd98:	68f8      	ldr	r0, [r7, #12]
 801cd9a:	2209      	movs	r2, #9
 801cd9c:	f7fa ffb5 	bl	8017d0a <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 801cda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cda2:	22f0      	movs	r2, #240	@ 0xf0
 801cda4:	589b      	ldr	r3, [r3, r2]
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	d104      	bne.n	801cdb4 <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface;
 801cdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdac:	21f0      	movs	r1, #240	@ 0xf0
 801cdae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801cdb0:	505a      	str	r2, [r3, r1]
 801cdb2:	e00e      	b.n	801cdd2 <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 801cdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdb6:	22f0      	movs	r2, #240	@ 0xf0
 801cdb8:	589b      	ldr	r3, [r3, r2]
 801cdba:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 801cdbc:	e002      	b.n	801cdc4 <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 801cdbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cdc2:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 801cdc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d1f8      	bne.n	801cdbe <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface;
 801cdcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801cdd0:	631a      	str	r2, [r3, #48]	@ 0x30
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 801cdd2:	68fb      	ldr	r3, [r7, #12]
 801cdd4:	781b      	ldrb	r3, [r3, #0]
 801cdd6:	001a      	movs	r2, r3
 801cdd8:	68bb      	ldr	r3, [r7, #8]
 801cdda:	1a9b      	subs	r3, r3, r2
 801cddc:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	781b      	ldrb	r3, [r3, #0]
 801cde2:	001a      	movs	r2, r3
 801cde4:	68fb      	ldr	r3, [r7, #12]
 801cde6:	189b      	adds	r3, r3, r2
 801cde8:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 801cdea:	e0aa      	b.n	801cf42 <_ux_device_stack_interface_set+0x20a>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 801cdec:	68fb      	ldr	r3, [r7, #12]
 801cdee:	781b      	ldrb	r3, [r3, #0]
 801cdf0:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 801cdf2:	211b      	movs	r1, #27
 801cdf4:	187b      	adds	r3, r7, r1
 801cdf6:	68fa      	ldr	r2, [r7, #12]
 801cdf8:	7852      	ldrb	r2, [r2, #1]
 801cdfa:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 801cdfc:	187b      	adds	r3, r7, r1
 801cdfe:	781b      	ldrb	r3, [r3, #0]
 801ce00:	2b05      	cmp	r3, #5
 801ce02:	d008      	beq.n	801ce16 <_ux_device_stack_interface_set+0xde>
 801ce04:	dd00      	ble.n	801ce08 <_ux_device_stack_interface_set+0xd0>
 801ce06:	e093      	b.n	801cf30 <_ux_device_stack_interface_set+0x1f8>
 801ce08:	2b02      	cmp	r3, #2
 801ce0a:	d100      	bne.n	801ce0e <_ux_device_stack_interface_set+0xd6>
 801ce0c:	e088      	b.n	801cf20 <_ux_device_stack_interface_set+0x1e8>
 801ce0e:	2b04      	cmp	r3, #4
 801ce10:	d100      	bne.n	801ce14 <_ux_device_stack_interface_set+0xdc>
 801ce12:	e085      	b.n	801cf20 <_ux_device_stack_interface_set+0x1e8>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 801ce14:	e08c      	b.n	801cf30 <_ux_device_stack_interface_set+0x1f8>
            endpoint = device -> ux_slave_device_endpoints_pool;
 801ce16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce18:	22fc      	movs	r2, #252	@ 0xfc
 801ce1a:	589b      	ldr	r3, [r3, r2]
 801ce1c:	63bb      	str	r3, [r7, #56]	@ 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 801ce1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ce20:	2380      	movs	r3, #128	@ 0x80
 801ce22:	005b      	lsls	r3, r3, #1
 801ce24:	58d3      	ldr	r3, [r2, r3]
 801ce26:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 801ce28:	e00d      	b.n	801ce46 <_ux_device_stack_interface_set+0x10e>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 801ce2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d103      	bne.n	801ce3a <_ux_device_stack_interface_set+0x102>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 801ce32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce34:	2201      	movs	r2, #1
 801ce36:	601a      	str	r2, [r3, #0]
                    break;
 801ce38:	e008      	b.n	801ce4c <_ux_device_stack_interface_set+0x114>
                endpoint++;
 801ce3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce3c:	3390      	adds	r3, #144	@ 0x90
 801ce3e:	63bb      	str	r3, [r7, #56]	@ 0x38
               endpoints_pool_number--; 
 801ce40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce42:	3b01      	subs	r3, #1
 801ce44:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 801ce46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	d1ee      	bne.n	801ce2a <_ux_device_stack_interface_set+0xf2>
            if (endpoints_pool_number == 0)
 801ce4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	d101      	bne.n	801ce56 <_ux_device_stack_interface_set+0x11e>
                return(UX_MEMORY_INSUFFICIENT);
 801ce52:	2312      	movs	r3, #18
 801ce54:	e080      	b.n	801cf58 <_ux_device_stack_interface_set+0x220>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 801ce56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce58:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 801ce5a:	4943      	ldr	r1, [pc, #268]	@ (801cf68 <_ux_device_stack_interface_set+0x230>)
 801ce5c:	68f8      	ldr	r0, [r7, #12]
 801ce5e:	2206      	movs	r2, #6
 801ce60:	f7fa ff53 	bl	8017d0a <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801ce64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce66:	3330      	adds	r3, #48	@ 0x30
 801ce68:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 801ce6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce6c:	69db      	ldr	r3, [r3, #28]
            max_transfer_length =
 801ce6e:	055b      	lsls	r3, r3, #21
 801ce70:	0d5b      	lsrs	r3, r3, #21
 801ce72:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801ce74:	4b3a      	ldr	r3, [pc, #232]	@ (801cf60 <_ux_device_stack_interface_set+0x228>)
 801ce76:	681a      	ldr	r2, [r3, #0]
 801ce78:	23d0      	movs	r3, #208	@ 0xd0
 801ce7a:	005b      	lsls	r3, r3, #1
 801ce7c:	58d3      	ldr	r3, [r2, r3]
 801ce7e:	2b02      	cmp	r3, #2
 801ce80:	d117      	bne.n	801ceb2 <_ux_device_stack_interface_set+0x17a>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 801ce82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce84:	699b      	ldr	r3, [r3, #24]
 801ce86:	2201      	movs	r2, #1
 801ce88:	4013      	ands	r3, r2
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801ce8a:	d012      	beq.n	801ceb2 <_ux_device_stack_interface_set+0x17a>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 801ce8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce8e:	69da      	ldr	r2, [r3, #28]
 801ce90:	23c0      	movs	r3, #192	@ 0xc0
 801ce92:	015b      	lsls	r3, r3, #5
 801ce94:	4013      	ands	r3, r2
 801ce96:	613b      	str	r3, [r7, #16]
                if (n_trans)
 801ce98:	693b      	ldr	r3, [r7, #16]
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d009      	beq.n	801ceb2 <_ux_device_stack_interface_set+0x17a>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 801ce9e:	693b      	ldr	r3, [r7, #16]
 801cea0:	0adb      	lsrs	r3, r3, #11
 801cea2:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 801cea4:	693b      	ldr	r3, [r7, #16]
 801cea6:	3301      	adds	r3, #1
 801cea8:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 801ceaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ceac:	693a      	ldr	r2, [r7, #16]
 801ceae:	4353      	muls	r3, r2
 801ceb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 801ceb2:	697b      	ldr	r3, [r7, #20]
 801ceb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ceb6:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 801ceb8:	697b      	ldr	r3, [r7, #20]
 801ceba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cebc:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 801cebe:	697b      	ldr	r3, [r7, #20]
 801cec0:	2201      	movs	r2, #1
 801cec2:	4252      	negs	r2, r2
 801cec4:	64da      	str	r2, [r3, #76]	@ 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface;
 801cec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cec8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ceca:	629a      	str	r2, [r3, #40]	@ 0x28
            endpoint -> ux_slave_endpoint_device =  device;
 801cecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ced0:	62da      	str	r2, [r3, #44]	@ 0x2c
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 801ced2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ced4:	699b      	ldr	r3, [r3, #24]
 801ced6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ced8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ceda:	210e      	movs	r1, #14
 801cedc:	4798      	blx	r3
 801cede:	0003      	movs	r3, r0
 801cee0:	623b      	str	r3, [r7, #32]
            if (status != UX_SUCCESS)
 801cee2:	6a3b      	ldr	r3, [r7, #32]
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d004      	beq.n	801cef2 <_ux_device_stack_interface_set+0x1ba>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 801cee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ceea:	2200      	movs	r2, #0
 801ceec:	601a      	str	r2, [r3, #0]
                return(status);
 801ceee:	6a3b      	ldr	r3, [r7, #32]
 801cef0:	e032      	b.n	801cf58 <_ux_device_stack_interface_set+0x220>
            if (interface -> ux_slave_interface_first_endpoint == UX_NULL)
 801cef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d103      	bne.n	801cf02 <_ux_device_stack_interface_set+0x1ca>
                interface -> ux_slave_interface_first_endpoint =  endpoint;
 801cefa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cefc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cefe:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 801cf00:	e017      	b.n	801cf32 <_ux_device_stack_interface_set+0x1fa>
                endpoint_link =  interface -> ux_slave_interface_first_endpoint;
 801cf02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cf04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cf06:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 801cf08:	e002      	b.n	801cf10 <_ux_device_stack_interface_set+0x1d8>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 801cf0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cf0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf0e:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 801cf10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cf12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d1f8      	bne.n	801cf0a <_ux_device_stack_interface_set+0x1d2>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 801cf18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cf1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cf1c:	625a      	str	r2, [r3, #36]	@ 0x24
            break;
 801cf1e:	e008      	b.n	801cf32 <_ux_device_stack_interface_set+0x1fa>
            status =  _ux_device_stack_interface_start(interface);
 801cf20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cf22:	0018      	movs	r0, r3
 801cf24:	f000 f822 	bl	801cf6c <_ux_device_stack_interface_start>
 801cf28:	0003      	movs	r3, r0
 801cf2a:	623b      	str	r3, [r7, #32]
            return(status);
 801cf2c:	6a3b      	ldr	r3, [r7, #32]
 801cf2e:	e013      	b.n	801cf58 <_ux_device_stack_interface_set+0x220>
            break;
 801cf30:	46c0      	nop			@ (mov r8, r8)
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 801cf32:	68ba      	ldr	r2, [r7, #8]
 801cf34:	69fb      	ldr	r3, [r7, #28]
 801cf36:	1ad3      	subs	r3, r2, r3
 801cf38:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 801cf3a:	68fa      	ldr	r2, [r7, #12]
 801cf3c:	69fb      	ldr	r3, [r7, #28]
 801cf3e:	18d3      	adds	r3, r2, r3
 801cf40:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 801cf42:	68bb      	ldr	r3, [r7, #8]
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	d000      	beq.n	801cf4a <_ux_device_stack_interface_set+0x212>
 801cf48:	e750      	b.n	801cdec <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface);
 801cf4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cf4c:	0018      	movs	r0, r3
 801cf4e:	f000 f80d 	bl	801cf6c <_ux_device_stack_interface_start>
 801cf52:	0003      	movs	r3, r0
 801cf54:	623b      	str	r3, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 801cf56:	6a3b      	ldr	r3, [r7, #32]
}
 801cf58:	0018      	movs	r0, r3
 801cf5a:	46bd      	mov	sp, r7
 801cf5c:	b012      	add	sp, #72	@ 0x48
 801cf5e:	bd80      	pop	{r7, pc}
 801cf60:	20011854 	.word	0x20011854
 801cf64:	20000034 	.word	0x20000034
 801cf68:	20000014 	.word	0x20000014

0801cf6c <_ux_device_stack_interface_start>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface)
{
 801cf6c:	b590      	push	{r4, r7, lr}
 801cf6e:	b091      	sub	sp, #68	@ 0x44
 801cf70:	af00      	add	r7, sp, #0
 801cf72:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class =  _ux_system_slave -> ux_system_slave_interface_class_array[interface -> ux_slave_interface_descriptor.bInterfaceNumber];
 801cf74:	4b2a      	ldr	r3, [pc, #168]	@ (801d020 <_ux_device_stack_interface_start+0xb4>)
 801cf76:	681a      	ldr	r2, [r3, #0]
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	695b      	ldr	r3, [r3, #20]
 801cf7c:	3358      	adds	r3, #88	@ 0x58
 801cf7e:	009b      	lsls	r3, r3, #2
 801cf80:	589b      	ldr	r3, [r3, r2]
 801cf82:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check if class driver is available. */
    if (class == UX_NULL)
 801cf84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cf86:	2b00      	cmp	r3, #0
 801cf88:	d101      	bne.n	801cf8e <_ux_device_stack_interface_start+0x22>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 801cf8a:	2357      	movs	r3, #87	@ 0x57
 801cf8c:	e044      	b.n	801d018 <_ux_device_stack_interface_start+0xac>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801cf8e:	4b24      	ldr	r3, [pc, #144]	@ (801d020 <_ux_device_stack_interface_start+0xb4>)
 801cf90:	681b      	ldr	r3, [r3, #0]
 801cf92:	3320      	adds	r3, #32
 801cf94:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 801cf96:	2008      	movs	r0, #8
 801cf98:	183b      	adds	r3, r7, r0
 801cf9a:	2201      	movs	r2, #1
 801cf9c:	601a      	str	r2, [r3, #0]
    class_command.ux_slave_class_command_interface =   (VOID *)interface;
 801cf9e:	183b      	adds	r3, r7, r0
 801cfa0:	687a      	ldr	r2, [r7, #4]
 801cfa2:	609a      	str	r2, [r3, #8]
    class_command.ux_slave_class_command_class     =   interface -> ux_slave_interface_descriptor.bInterfaceClass;
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	6a1a      	ldr	r2, [r3, #32]
 801cfa8:	183b      	adds	r3, r7, r0
 801cfaa:	615a      	str	r2, [r3, #20]
    class_command.ux_slave_class_command_subclass  =   interface -> ux_slave_interface_descriptor.bInterfaceSubClass;
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801cfb0:	183b      	adds	r3, r7, r0
 801cfb2:	619a      	str	r2, [r3, #24]
    class_command.ux_slave_class_command_protocol  =   interface -> ux_slave_interface_descriptor.bInterfaceProtocol;
 801cfb4:	687b      	ldr	r3, [r7, #4]
 801cfb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801cfb8:	183b      	adds	r3, r7, r0
 801cfba:	61da      	str	r2, [r3, #28]
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 801cfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfbe:	6a1a      	ldr	r2, [r3, #32]
 801cfc0:	183b      	adds	r3, r7, r0
 801cfc2:	611a      	str	r2, [r3, #16]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 801cfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801cfc8:	183b      	adds	r3, r7, r0
 801cfca:	60da      	str	r2, [r3, #12]

    /* We can now memorize the interface pointer associated with this class.  */
    class -> ux_slave_class_interface = interface;
 801cfcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cfce:	2388      	movs	r3, #136	@ 0x88
 801cfd0:	005b      	lsls	r3, r3, #1
 801cfd2:	6879      	ldr	r1, [r7, #4]
 801cfd4:	50d1      	str	r1, [r2, r3]
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class -> ux_slave_class_entry_function(&class_command);
 801cfd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cfd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cfda:	0004      	movs	r4, r0
 801cfdc:	183a      	adds	r2, r7, r0
 801cfde:	0010      	movs	r0, r2
 801cfe0:	4798      	blx	r3
 801cfe2:	0003      	movs	r3, r0
 801cfe4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 801cfe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cfe8:	2b00      	cmp	r3, #0
 801cfea:	d114      	bne.n	801d016 <_ux_device_stack_interface_start+0xaa>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class;
 801cfec:	193b      	adds	r3, r7, r4
 801cfee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cff0:	621a      	str	r2, [r3, #32]
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 801cff2:	193b      	adds	r3, r7, r4
 801cff4:	2202      	movs	r2, #2
 801cff6:	601a      	str	r2, [r3, #0]
        
        /* Activate the class.  */
        status = class -> ux_slave_class_entry_function(&class_command);
 801cff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cffc:	193a      	adds	r2, r7, r4
 801cffe:	0010      	movs	r0, r2
 801d000:	4798      	blx	r3
 801d002:	0003      	movs	r3, r0
 801d004:	637b      	str	r3, [r7, #52]	@ 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 801d006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d008:	2b00      	cmp	r3, #0
 801d00a:	d102      	bne.n	801d012 <_ux_device_stack_interface_start+0xa6>
            interface -> ux_slave_interface_class =  class;
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d010:	605a      	str	r2, [r3, #4]

        return(status); 
 801d012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d014:	e000      	b.n	801d018 <_ux_device_stack_interface_start+0xac>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 801d016:	2357      	movs	r3, #87	@ 0x57
}
 801d018:	0018      	movs	r0, r3
 801d01a:	46bd      	mov	sp, r7
 801d01c:	b011      	add	sp, #68	@ 0x44
 801d01e:	bd90      	pop	{r4, r7, pc}
 801d020:	20011854 	.word	0x20011854

0801d024 <_ux_device_stack_set_feature>:
/*                                            supported device requests,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 801d024:	b580      	push	{r7, lr}
 801d026:	b08a      	sub	sp, #40	@ 0x28
 801d028:	af00      	add	r7, sp, #0
 801d02a:	60f8      	str	r0, [r7, #12]
 801d02c:	60b9      	str	r1, [r7, #8]
 801d02e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801d030:	4b29      	ldr	r3, [pc, #164]	@ (801d0d8 <_ux_device_stack_set_feature+0xb4>)
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801d036:	4b28      	ldr	r3, [pc, #160]	@ (801d0d8 <_ux_device_stack_set_feature+0xb4>)
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	3320      	adds	r3, #32
 801d03c:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801d03e:	69bb      	ldr	r3, [r7, #24]
 801d040:	333c      	adds	r3, #60	@ 0x3c
 801d042:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 801d044:	68fb      	ldr	r3, [r7, #12]
 801d046:	2203      	movs	r2, #3
 801d048:	4013      	ands	r3, r2
 801d04a:	d002      	beq.n	801d052 <_ux_device_stack_set_feature+0x2e>
 801d04c:	2b02      	cmp	r3, #2
 801d04e:	d016      	beq.n	801d07e <_ux_device_stack_set_feature+0x5a>
 801d050:	e037      	b.n	801d0c2 <_ux_device_stack_set_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 801d052:	68bb      	ldr	r3, [r7, #8]
 801d054:	2b01      	cmp	r3, #1
 801d056:	d110      	bne.n	801d07a <_ux_device_stack_set_feature+0x56>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 801d058:	4b1f      	ldr	r3, [pc, #124]	@ (801d0d8 <_ux_device_stack_set_feature+0xb4>)
 801d05a:	681a      	ldr	r2, [r3, #0]
 801d05c:	23d4      	movs	r3, #212	@ 0xd4
 801d05e:	005b      	lsls	r3, r3, #1
 801d060:	58d3      	ldr	r3, [r2, r3]
 801d062:	2b00      	cmp	r3, #0
 801d064:	d007      	beq.n	801d076 <_ux_device_stack_set_feature+0x52>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 801d066:	4b1c      	ldr	r3, [pc, #112]	@ (801d0d8 <_ux_device_stack_set_feature+0xb4>)
 801d068:	681a      	ldr	r2, [r3, #0]
 801d06a:	23d6      	movs	r3, #214	@ 0xd6
 801d06c:	005b      	lsls	r3, r3, #1
 801d06e:	2101      	movs	r1, #1
 801d070:	50d1      	str	r1, [r2, r3]

                /* OK. */
                return (UX_SUCCESS);
 801d072:	2300      	movs	r3, #0
 801d074:	e02c      	b.n	801d0d0 <_ux_device_stack_set_feature+0xac>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 801d076:	2354      	movs	r3, #84	@ 0x54
 801d078:	e02a      	b.n	801d0d0 <_ux_device_stack_set_feature+0xac>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 801d07a:	2354      	movs	r3, #84	@ 0x54
 801d07c:	e028      	b.n	801d0d0 <_ux_device_stack_set_feature+0xac>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface =  device -> ux_slave_device_first_interface;
 801d07e:	69bb      	ldr	r3, [r7, #24]
 801d080:	22f0      	movs	r2, #240	@ 0xf0
 801d082:	589b      	ldr	r3, [r3, r2]
 801d084:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface != UX_NULL)
 801d086:	e019      	b.n	801d0bc <_ux_device_stack_set_feature+0x98>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 801d088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d08a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d08c:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 801d08e:	e00f      	b.n	801d0b0 <_ux_device_stack_set_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 801d090:	6a3b      	ldr	r3, [r7, #32]
 801d092:	695b      	ldr	r3, [r3, #20]
 801d094:	687a      	ldr	r2, [r7, #4]
 801d096:	429a      	cmp	r2, r3
 801d098:	d107      	bne.n	801d0aa <_ux_device_stack_set_feature+0x86>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 801d09a:	69fb      	ldr	r3, [r7, #28]
 801d09c:	699b      	ldr	r3, [r3, #24]
 801d09e:	6a3a      	ldr	r2, [r7, #32]
 801d0a0:	69f8      	ldr	r0, [r7, #28]
 801d0a2:	2114      	movs	r1, #20
 801d0a4:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 801d0a6:	2300      	movs	r3, #0
 801d0a8:	e012      	b.n	801d0d0 <_ux_device_stack_set_feature+0xac>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 801d0aa:	6a3b      	ldr	r3, [r7, #32]
 801d0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d0ae:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 801d0b0:	6a3b      	ldr	r3, [r7, #32]
 801d0b2:	2b00      	cmp	r3, #0
 801d0b4:	d1ec      	bne.n	801d090 <_ux_device_stack_set_feature+0x6c>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 801d0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d0ba:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface != UX_NULL)
 801d0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d1e2      	bne.n	801d088 <_ux_device_stack_set_feature+0x64>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801d0c2:	69fb      	ldr	r3, [r7, #28]
 801d0c4:	699b      	ldr	r3, [r3, #24]
 801d0c6:	697a      	ldr	r2, [r7, #20]
 801d0c8:	69f8      	ldr	r0, [r7, #28]
 801d0ca:	2114      	movs	r1, #20
 801d0cc:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 801d0ce:	2300      	movs	r3, #0
    }
}
 801d0d0:	0018      	movs	r0, r3
 801d0d2:	46bd      	mov	sp, r7
 801d0d4:	b00a      	add	sp, #40	@ 0x28
 801d0d6:	bd80      	pop	{r7, pc}
 801d0d8:	20011854 	.word	0x20011854

0801d0dc <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 801d0dc:	b580      	push	{r7, lr}
 801d0de:	b088      	sub	sp, #32
 801d0e0:	af00      	add	r7, sp, #0
 801d0e2:	6078      	str	r0, [r7, #4]
 801d0e4:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801d0e6:	4b18      	ldr	r3, [pc, #96]	@ (801d148 <_ux_device_stack_transfer_abort+0x6c>)
 801d0e8:	681b      	ldr	r3, [r3, #0]
 801d0ea:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	683a      	ldr	r2, [r7, #0]
 801d0f0:	625a      	str	r2, [r3, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d0f2:	f3ef 8310 	mrs	r3, PRIMASK
 801d0f6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d0f8:	b672      	cpsid	i
    return(primask_value);
 801d0fa:	697b      	ldr	r3, [r7, #20]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 801d0fc:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	681b      	ldr	r3, [r3, #0]
 801d102:	2b01      	cmp	r3, #1
 801d104:	d114      	bne.n	801d130 <_ux_device_stack_transfer_abort+0x54>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 801d106:	69fb      	ldr	r3, [r7, #28]
 801d108:	699b      	ldr	r3, [r3, #24]
 801d10a:	687a      	ldr	r2, [r7, #4]
 801d10c:	69f8      	ldr	r0, [r7, #28]
 801d10e:	210d      	movs	r1, #13
 801d110:	4798      	blx	r3
 801d112:	69bb      	ldr	r3, [r7, #24]
 801d114:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d116:	693b      	ldr	r3, [r7, #16]
 801d118:	f383 8810 	msr	PRIMASK, r3
}
 801d11c:	46c0      	nop			@ (mov r8, r8)

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	2204      	movs	r2, #4
 801d122:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	3330      	adds	r3, #48	@ 0x30
 801d128:	0018      	movs	r0, r3
 801d12a:	f7fb fa1b 	bl	8018564 <_ux_utility_semaphore_put>
 801d12e:	e005      	b.n	801d13c <_ux_device_stack_transfer_abort+0x60>
 801d130:	69bb      	ldr	r3, [r7, #24]
 801d132:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d134:	68fb      	ldr	r3, [r7, #12]
 801d136:	f383 8810 	msr	PRIMASK, r3
}
 801d13a:	46c0      	nop			@ (mov r8, r8)
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 801d13c:	2300      	movs	r3, #0
}
 801d13e:	0018      	movs	r0, r3
 801d140:	46bd      	mov	sp, r7
 801d142:	b008      	add	sp, #32
 801d144:	bd80      	pop	{r7, pc}
 801d146:	46c0      	nop			@ (mov r8, r8)
 801d148:	20011854 	.word	0x20011854

0801d14c <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 801d14c:	b580      	push	{r7, lr}
 801d14e:	b084      	sub	sp, #16
 801d150:	af00      	add	r7, sp, #0
 801d152:	6078      	str	r0, [r7, #4]
 801d154:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	3330      	adds	r3, #48	@ 0x30
 801d15a:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 801d15c:	683a      	ldr	r2, [r7, #0]
 801d15e:	68fb      	ldr	r3, [r7, #12]
 801d160:	0011      	movs	r1, r2
 801d162:	0018      	movs	r0, r3
 801d164:	f7ff ffba 	bl	801d0dc <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 801d168:	2300      	movs	r3, #0
}
 801d16a:	0018      	movs	r0, r3
 801d16c:	46bd      	mov	sp, r7
 801d16e:	b004      	add	sp, #16
 801d170:	bd80      	pop	{r7, pc}
	...

0801d174 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 801d174:	b580      	push	{r7, lr}
 801d176:	b08c      	sub	sp, #48	@ 0x30
 801d178:	af00      	add	r7, sp, #0
 801d17a:	60f8      	str	r0, [r7, #12]
 801d17c:	60b9      	str	r1, [r7, #8]
 801d17e:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 801d180:	68fb      	ldr	r3, [r7, #12]
 801d182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d184:	2b01      	cmp	r3, #1
 801d186:	d101      	bne.n	801d18c <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 801d188:	2300      	movs	r3, #0
 801d18a:	e073      	b.n	801d274 <_ux_device_stack_transfer_request+0x100>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801d18c:	f3ef 8310 	mrs	r3, PRIMASK
 801d190:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801d192:	b672      	cpsid	i
    return(primask_value);
 801d194:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 801d196:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 801d198:	4b38      	ldr	r3, [pc, #224]	@ (801d27c <_ux_device_stack_transfer_request+0x108>)
 801d19a:	681b      	ldr	r3, [r3, #0]
 801d19c:	6a1b      	ldr	r3, [r3, #32]
 801d19e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 801d1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1a2:	2b01      	cmp	r3, #1
 801d1a4:	d005      	beq.n	801d1b2 <_ux_device_stack_transfer_request+0x3e>
 801d1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1a8:	2b02      	cmp	r3, #2
 801d1aa:	d002      	beq.n	801d1b2 <_ux_device_stack_transfer_request+0x3e>
            || (device_state == UX_DEVICE_CONFIGURED))
 801d1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1ae:	2b03      	cmp	r3, #3
 801d1b0:	d114      	bne.n	801d1dc <_ux_device_stack_transfer_request+0x68>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 801d1b2:	68fb      	ldr	r3, [r7, #12]
 801d1b4:	2201      	movs	r2, #1
 801d1b6:	601a      	str	r2, [r3, #0]
 801d1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d1ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d1bc:	697b      	ldr	r3, [r7, #20]
 801d1be:	f383 8810 	msr	PRIMASK, r3
}
 801d1c2:	46c0      	nop			@ (mov r8, r8)
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801d1c4:	4b2d      	ldr	r3, [pc, #180]	@ (801d27c <_ux_device_stack_transfer_request+0x108>)
 801d1c6:	681b      	ldr	r3, [r3, #0]
 801d1c8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	689b      	ldr	r3, [r3, #8]
 801d1ce:	623b      	str	r3, [r7, #32]
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 801d1d0:	6a3b      	ldr	r3, [r7, #32]
 801d1d2:	699b      	ldr	r3, [r3, #24]
 801d1d4:	2203      	movs	r2, #3
 801d1d6:	4013      	ands	r3, r2
 801d1d8:	d10b      	bne.n	801d1f2 <_ux_device_stack_transfer_request+0x7e>
 801d1da:	e01a      	b.n	801d212 <_ux_device_stack_transfer_request+0x9e>
 801d1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d1de:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801d1e0:	693b      	ldr	r3, [r7, #16]
 801d1e2:	f383 8810 	msr	PRIMASK, r3
}
 801d1e6:	46c0      	nop			@ (mov r8, r8)
        return(UX_TRANSFER_NOT_READY);
 801d1e8:	2325      	movs	r3, #37	@ 0x25
 801d1ea:	e043      	b.n	801d274 <_ux_device_stack_transfer_request+0x100>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 801d1ec:	2064      	movs	r0, #100	@ 0x64
 801d1ee:	f7fa fd73 	bl	8017cd8 <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 801d1f2:	6a3b      	ldr	r3, [r7, #32]
 801d1f4:	685b      	ldr	r3, [r3, #4]
 801d1f6:	2b02      	cmp	r3, #2
 801d1f8:	d0f8      	beq.n	801d1ec <_ux_device_stack_transfer_request+0x78>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 801d1fa:	6a3b      	ldr	r3, [r7, #32]
 801d1fc:	695b      	ldr	r3, [r3, #20]
 801d1fe:	2280      	movs	r2, #128	@ 0x80
 801d200:	4013      	ands	r3, r2
 801d202:	d003      	beq.n	801d20c <_ux_device_stack_transfer_request+0x98>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801d204:	68fb      	ldr	r3, [r7, #12]
 801d206:	2203      	movs	r2, #3
 801d208:	629a      	str	r2, [r3, #40]	@ 0x28
 801d20a:	e002      	b.n	801d212 <_ux_device_stack_transfer_request+0x9e>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 801d20c:	68fb      	ldr	r3, [r7, #12]
 801d20e:	2202      	movs	r2, #2
 801d210:	629a      	str	r2, [r3, #40]	@ 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 801d212:	68fb      	ldr	r3, [r7, #12]
 801d214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d216:	2b03      	cmp	r3, #3
 801d218:	d113      	bne.n	801d242 <_ux_device_stack_transfer_request+0xce>
 801d21a:	68bb      	ldr	r3, [r7, #8]
 801d21c:	2b00      	cmp	r3, #0
 801d21e:	d010      	beq.n	801d242 <_ux_device_stack_transfer_request+0xce>
        (slave_length != 0) && (host_length != slave_length) && 
 801d220:	687a      	ldr	r2, [r7, #4]
 801d222:	68bb      	ldr	r3, [r7, #8]
 801d224:	429a      	cmp	r2, r3
 801d226:	d00c      	beq.n	801d242 <_ux_device_stack_transfer_request+0xce>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 801d228:	6a3b      	ldr	r3, [r7, #32]
 801d22a:	69da      	ldr	r2, [r3, #28]
 801d22c:	68bb      	ldr	r3, [r7, #8]
 801d22e:	0011      	movs	r1, r2
 801d230:	0018      	movs	r0, r3
 801d232:	f7e9 f98d 	bl	8006550 <__aeabi_uidivmod>
 801d236:	1e0b      	subs	r3, r1, #0
        (slave_length != 0) && (host_length != slave_length) && 
 801d238:	d103      	bne.n	801d242 <_ux_device_stack_transfer_request+0xce>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 801d23a:	68fb      	ldr	r3, [r7, #12]
 801d23c:	2201      	movs	r2, #1
 801d23e:	651a      	str	r2, [r3, #80]	@ 0x50
 801d240:	e002      	b.n	801d248 <_ux_device_stack_transfer_request+0xd4>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 801d242:	68fb      	ldr	r3, [r7, #12]
 801d244:	2200      	movs	r2, #0
 801d246:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 801d248:	68fb      	ldr	r3, [r7, #12]
 801d24a:	2200      	movs	r2, #0
 801d24c:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 801d24e:	68fb      	ldr	r3, [r7, #12]
 801d250:	68ba      	ldr	r2, [r7, #8]
 801d252:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 801d254:	68fb      	ldr	r3, [r7, #12]
 801d256:	68ba      	ldr	r2, [r7, #8]
 801d258:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 801d25a:	68fb      	ldr	r3, [r7, #12]
 801d25c:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 801d25e:	68fb      	ldr	r3, [r7, #12]
 801d260:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 801d262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d264:	699b      	ldr	r3, [r3, #24]
 801d266:	68fa      	ldr	r2, [r7, #12]
 801d268:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d26a:	210c      	movs	r1, #12
 801d26c:	4798      	blx	r3
 801d26e:	0003      	movs	r3, r0
 801d270:	61fb      	str	r3, [r7, #28]

    /* And return the status.  */
    return(status);
 801d272:	69fb      	ldr	r3, [r7, #28]

#endif
}
 801d274:	0018      	movs	r0, r3
 801d276:	46bd      	mov	sp, r7
 801d278:	b00c      	add	sp, #48	@ 0x30
 801d27a:	bd80      	pop	{r7, pc}
 801d27c:	20011854 	.word	0x20011854

0801d280 <USBPD_PreInitOs>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
unsigned int USBPD_PreInitOs(void)
{
 801d280:	b580      	push	{r7, lr}
 801d282:	af00      	add	r7, sp, #0
  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 801d284:	f7f9 fabc 	bl	8016800 <USBPD_HW_IF_GlobalHwInit>
 /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 801d288:	f000 f808 	bl	801d29c <USBPD_DPM_InitCore>
 801d28c:	1e03      	subs	r3, r0, #0
 801d28e:	d001      	beq.n	801d294 <USBPD_PreInitOs+0x14>
  {
    return USBPD_ERROR;
 801d290:	2302      	movs	r3, #2
 801d292:	e000      	b.n	801d296 <USBPD_PreInitOs+0x16>
  }

  return USBPD_OK;
 801d294:	2300      	movs	r3, #0
}
 801d296:	0018      	movs	r0, r3
 801d298:	46bd      	mov	sp, r7
 801d29a:	bd80      	pop	{r7, pc}

0801d29c <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 801d29c:	b5b0      	push	{r4, r5, r7, lr}
 801d29e:	b082      	sub	sp, #8
 801d2a0:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 801d2a2:	1dfb      	adds	r3, r7, #7
 801d2a4:	2200      	movs	r2, #0
 801d2a6:	701a      	strb	r2, [r3, #0]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(LIB_ID))
 801d2a8:	4b62      	ldr	r3, [pc, #392]	@ (801d434 <USBPD_DPM_InitCore+0x198>)
 801d2aa:	0018      	movs	r0, r3
 801d2ac:	f7e4 fa4a 	bl	8001744 <USBPD_PE_CheckLIB>
 801d2b0:	0003      	movs	r3, r0
 801d2b2:	2b01      	cmp	r3, #1
 801d2b4:	d003      	beq.n	801d2be <USBPD_DPM_InitCore+0x22>
  {
    _retr = USBPD_ERROR;
 801d2b6:	1dfb      	adds	r3, r7, #7
 801d2b8:	2202      	movs	r2, #2
 801d2ba:	701a      	strb	r2, [r3, #0]
    goto error;
 801d2bc:	e0b4      	b.n	801d428 <USBPD_DPM_InitCore+0x18c>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 801d2be:	f7e4 fa4f 	bl	8001760 <USBPD_PE_GetMemoryConsumption>
 801d2c2:	0003      	movs	r3, r0
 801d2c4:	603b      	str	r3, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801d2c6:	1dbb      	adds	r3, r7, #6
 801d2c8:	2200      	movs	r2, #0
 801d2ca:	701a      	strb	r2, [r3, #0]
 801d2cc:	e0a6      	b.n	801d41c <USBPD_DPM_InitCore+0x180>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 801d2ce:	1dbb      	adds	r3, r7, #6
 801d2d0:	781b      	ldrb	r3, [r3, #0]
 801d2d2:	4a59      	ldr	r2, [pc, #356]	@ (801d438 <USBPD_DPM_InitCore+0x19c>)
 801d2d4:	009b      	lsls	r3, r3, #2
 801d2d6:	18d3      	adds	r3, r2, r3
 801d2d8:	785a      	ldrb	r2, [r3, #1]
 801d2da:	2108      	movs	r1, #8
 801d2dc:	438a      	bics	r2, r1
 801d2de:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 801d2e0:	1dbb      	adds	r3, r7, #6
 801d2e2:	781a      	ldrb	r2, [r3, #0]
 801d2e4:	1dbb      	adds	r3, r7, #6
 801d2e6:	7818      	ldrb	r0, [r3, #0]
 801d2e8:	4954      	ldr	r1, [pc, #336]	@ (801d43c <USBPD_DPM_InitCore+0x1a0>)
 801d2ea:	0013      	movs	r3, r2
 801d2ec:	005b      	lsls	r3, r3, #1
 801d2ee:	189b      	adds	r3, r3, r2
 801d2f0:	009b      	lsls	r3, r3, #2
 801d2f2:	18cb      	adds	r3, r1, r3
 801d2f4:	791b      	ldrb	r3, [r3, #4]
 801d2f6:	079b      	lsls	r3, r3, #30
 801d2f8:	0f9b      	lsrs	r3, r3, #30
 801d2fa:	b2d9      	uxtb	r1, r3
 801d2fc:	4b4e      	ldr	r3, [pc, #312]	@ (801d438 <USBPD_DPM_InitCore+0x19c>)
 801d2fe:	0082      	lsls	r2, r0, #2
 801d300:	2003      	movs	r0, #3
 801d302:	4001      	ands	r1, r0
 801d304:	000c      	movs	r4, r1
 801d306:	5cd1      	ldrb	r1, [r2, r3]
 801d308:	2003      	movs	r0, #3
 801d30a:	4381      	bics	r1, r0
 801d30c:	1c08      	adds	r0, r1, #0
 801d30e:	1c21      	adds	r1, r4, #0
 801d310:	4301      	orrs	r1, r0
 801d312:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 801d314:	1dbb      	adds	r3, r7, #6
 801d316:	781a      	ldrb	r2, [r3, #0]
 801d318:	1dbb      	adds	r3, r7, #6
 801d31a:	7818      	ldrb	r0, [r3, #0]
 801d31c:	4947      	ldr	r1, [pc, #284]	@ (801d43c <USBPD_DPM_InitCore+0x1a0>)
 801d31e:	0013      	movs	r3, r2
 801d320:	005b      	lsls	r3, r3, #1
 801d322:	189b      	adds	r3, r3, r2
 801d324:	009b      	lsls	r3, r3, #2
 801d326:	18cb      	adds	r3, r1, r3
 801d328:	791b      	ldrb	r3, [r3, #4]
 801d32a:	075b      	lsls	r3, r3, #29
 801d32c:	0fdb      	lsrs	r3, r3, #31
 801d32e:	b2d9      	uxtb	r1, r3
 801d330:	4b41      	ldr	r3, [pc, #260]	@ (801d438 <USBPD_DPM_InitCore+0x19c>)
 801d332:	0082      	lsls	r2, r0, #2
 801d334:	2001      	movs	r0, #1
 801d336:	4001      	ands	r1, r0
 801d338:	008c      	lsls	r4, r1, #2
 801d33a:	5cd1      	ldrb	r1, [r2, r3]
 801d33c:	2004      	movs	r0, #4
 801d33e:	4381      	bics	r1, r0
 801d340:	1c08      	adds	r0, r1, #0
 801d342:	1c21      	adds	r1, r4, #0
 801d344:	4301      	orrs	r1, r0
 801d346:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 801d348:	1dbb      	adds	r3, r7, #6
 801d34a:	781a      	ldrb	r2, [r3, #0]
 801d34c:	4b3a      	ldr	r3, [pc, #232]	@ (801d438 <USBPD_DPM_InitCore+0x19c>)
 801d34e:	0092      	lsls	r2, r2, #2
 801d350:	5cd1      	ldrb	r1, [r2, r3]
 801d352:	2010      	movs	r0, #16
 801d354:	4381      	bics	r1, r0
 801d356:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 801d358:	1dbb      	adds	r3, r7, #6
 801d35a:	781a      	ldrb	r2, [r3, #0]
 801d35c:	4b36      	ldr	r3, [pc, #216]	@ (801d438 <USBPD_DPM_InitCore+0x19c>)
 801d35e:	0092      	lsls	r2, r2, #2
 801d360:	5cd1      	ldrb	r1, [r2, r3]
 801d362:	203f      	movs	r0, #63	@ 0x3f
 801d364:	4001      	ands	r1, r0
 801d366:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 801d368:	1dbb      	adds	r3, r7, #6
 801d36a:	781b      	ldrb	r3, [r3, #0]
 801d36c:	4a32      	ldr	r2, [pc, #200]	@ (801d438 <USBPD_DPM_InitCore+0x19c>)
 801d36e:	009b      	lsls	r3, r3, #2
 801d370:	18d3      	adds	r3, r2, r3
 801d372:	785a      	ldrb	r2, [r3, #1]
 801d374:	2160      	movs	r1, #96	@ 0x60
 801d376:	438a      	bics	r2, r1
 801d378:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 801d37a:	1dbb      	adds	r3, r7, #6
 801d37c:	781b      	ldrb	r3, [r3, #0]
 801d37e:	4a2e      	ldr	r2, [pc, #184]	@ (801d438 <USBPD_DPM_InitCore+0x19c>)
 801d380:	009b      	lsls	r3, r3, #2
 801d382:	18d3      	adds	r3, r2, r3
 801d384:	785a      	ldrb	r2, [r3, #1]
 801d386:	217f      	movs	r1, #127	@ 0x7f
 801d388:	400a      	ands	r2, r1
 801d38a:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index,
 801d38c:	1dbb      	adds	r3, r7, #6
 801d38e:	781a      	ldrb	r2, [r3, #0]
 801d390:	0013      	movs	r3, r2
 801d392:	005b      	lsls	r3, r3, #1
 801d394:	189b      	adds	r3, r3, r2
 801d396:	009b      	lsls	r3, r3, #2
 801d398:	4a28      	ldr	r2, [pc, #160]	@ (801d43c <USBPD_DPM_InitCore+0x1a0>)
 801d39a:	189c      	adds	r4, r3, r2
 801d39c:	1dbb      	adds	r3, r7, #6
 801d39e:	781b      	ldrb	r3, [r3, #0]
 801d3a0:	009a      	lsls	r2, r3, #2
 801d3a2:	4b25      	ldr	r3, [pc, #148]	@ (801d438 <USBPD_DPM_InitCore+0x19c>)
 801d3a4:	18d2      	adds	r2, r2, r3
 801d3a6:	4926      	ldr	r1, [pc, #152]	@ (801d440 <USBPD_DPM_InitCore+0x1a4>)
 801d3a8:	1dbb      	adds	r3, r7, #6
 801d3aa:	7818      	ldrb	r0, [r3, #0]
 801d3ac:	0013      	movs	r3, r2
 801d3ae:	0022      	movs	r2, r4
 801d3b0:	f7e2 ffde 	bl	8000370 <USBPD_CAD_Init>
 801d3b4:	1e03      	subs	r3, r0, #0
 801d3b6:	d003      	beq.n	801d3c0 <USBPD_DPM_InitCore+0x124>
 801d3b8:	1dfb      	adds	r3, r7, #7
 801d3ba:	2202      	movs	r2, #2
 801d3bc:	701a      	strb	r2, [r3, #0]
 801d3be:	e033      	b.n	801d428 <USBPD_DPM_InitCore+0x18c>
                                           &CAD_cbs,
                                           &DPM_Settings[_port_index],
                                           &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 801d3c0:	1dbb      	adds	r3, r7, #6
 801d3c2:	781a      	ldrb	r2, [r3, #0]
 801d3c4:	0013      	movs	r3, r2
 801d3c6:	005b      	lsls	r3, r3, #1
 801d3c8:	189b      	adds	r3, r3, r2
 801d3ca:	009b      	lsls	r3, r3, #2
 801d3cc:	4a1b      	ldr	r2, [pc, #108]	@ (801d43c <USBPD_DPM_InitCore+0x1a0>)
 801d3ce:	1899      	adds	r1, r3, r2
 801d3d0:	1dbb      	adds	r3, r7, #6
 801d3d2:	781b      	ldrb	r3, [r3, #0]
 801d3d4:	009a      	lsls	r2, r3, #2
 801d3d6:	4b18      	ldr	r3, [pc, #96]	@ (801d438 <USBPD_DPM_InitCore+0x19c>)
 801d3d8:	18d2      	adds	r2, r2, r3
 801d3da:	1dfc      	adds	r4, r7, #7
 801d3dc:	4d19      	ldr	r5, [pc, #100]	@ (801d444 <USBPD_DPM_InitCore+0x1a8>)
 801d3de:	1dbb      	adds	r3, r7, #6
 801d3e0:	7818      	ldrb	r0, [r3, #0]
 801d3e2:	002b      	movs	r3, r5
 801d3e4:	f7e3 f8a2 	bl	800052c <USBPD_PE_Init>
 801d3e8:	0003      	movs	r3, r0
 801d3ea:	7023      	strb	r3, [r4, #0]
 801d3ec:	1dfb      	adds	r3, r7, #7
 801d3ee:	781b      	ldrb	r3, [r3, #0]
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d119      	bne.n	801d428 <USBPD_DPM_InitCore+0x18c>
                                         &DPM_Params[_port_index], &dpmCallbacks));

    /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 801d3f4:	1dbb      	adds	r3, r7, #6
 801d3f6:	781b      	ldrb	r3, [r3, #0]
 801d3f8:	4a0f      	ldr	r2, [pc, #60]	@ (801d438 <USBPD_DPM_InitCore+0x19c>)
 801d3fa:	009b      	lsls	r3, r3, #2
 801d3fc:	18d3      	adds	r3, r2, r3
 801d3fe:	785a      	ldrb	r2, [r3, #1]
 801d400:	2108      	movs	r1, #8
 801d402:	430a      	orrs	r2, r1
 801d404:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
    USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 801d406:	1dbb      	adds	r3, r7, #6
 801d408:	781b      	ldrb	r3, [r3, #0]
 801d40a:	2101      	movs	r1, #1
 801d40c:	0018      	movs	r0, r3
 801d40e:	f7e2 ffdc 	bl	80003ca <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801d412:	1dbb      	adds	r3, r7, #6
 801d414:	1dba      	adds	r2, r7, #6
 801d416:	7812      	ldrb	r2, [r2, #0]
 801d418:	3201      	adds	r2, #1
 801d41a:	701a      	strb	r2, [r3, #0]
 801d41c:	1dbb      	adds	r3, r7, #6
 801d41e:	781b      	ldrb	r3, [r3, #0]
 801d420:	2b01      	cmp	r3, #1
 801d422:	d800      	bhi.n	801d426 <USBPD_DPM_InitCore+0x18a>
 801d424:	e753      	b.n	801d2ce <USBPD_DPM_InitCore+0x32>

#ifdef _LOW_POWER
  USBPD_LOWPOWER_Init();
#endif /* _LOW_POWER */

error :
 801d426:	46c0      	nop			@ (mov r8, r8)
  return _retr;
 801d428:	1dfb      	adds	r3, r7, #7
 801d42a:	781b      	ldrb	r3, [r3, #0]
}
 801d42c:	0018      	movs	r0, r3
 801d42e:	46bd      	mov	sp, r7
 801d430:	b002      	add	sp, #8
 801d432:	bdb0      	pop	{r4, r5, r7, pc}
 801d434:	30410000 	.word	0x30410000
 801d438:	20011a60 	.word	0x20011a60
 801d43c:	200000b0 	.word	0x200000b0
 801d440:	0801f47c 	.word	0x0801f47c
 801d444:	0801f484 	.word	0x0801f484

0801d448 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 801d448:	b580      	push	{r7, lr}
 801d44a:	b084      	sub	sp, #16
 801d44c:	af00      	add	r7, sp, #0
 801d44e:	0002      	movs	r2, r0
 801d450:	1dfb      	adds	r3, r7, #7
 801d452:	701a      	strb	r2, [r3, #0]
  OS_PUT_MESSAGE_QUEUE(PEQueueId[PortNum], 0xFFFFU, 0U);
 801d454:	4b09      	ldr	r3, [pc, #36]	@ (801d47c <USBPD_PE_TaskWakeUp+0x34>)
 801d456:	60fb      	str	r3, [r7, #12]
 801d458:	1dfb      	adds	r3, r7, #7
 801d45a:	781a      	ldrb	r2, [r3, #0]
 801d45c:	0013      	movs	r3, r2
 801d45e:	00db      	lsls	r3, r3, #3
 801d460:	1a9b      	subs	r3, r3, r2
 801d462:	00db      	lsls	r3, r3, #3
 801d464:	4a06      	ldr	r2, [pc, #24]	@ (801d480 <USBPD_PE_TaskWakeUp+0x38>)
 801d466:	189b      	adds	r3, r3, r2
 801d468:	220c      	movs	r2, #12
 801d46a:	18b9      	adds	r1, r7, r2
 801d46c:	2200      	movs	r2, #0
 801d46e:	0018      	movs	r0, r3
 801d470:	f7f6 fc1c 	bl	8013cac <_txe_queue_send>
}
 801d474:	46c0      	nop			@ (mov r8, r8)
 801d476:	46bd      	mov	sp, r7
 801d478:	b004      	add	sp, #16
 801d47a:	bd80      	pop	{r7, pc}
 801d47c:	0000ffff 	.word	0x0000ffff
 801d480:	200119f0 	.word	0x200119f0

0801d484 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 801d484:	b580      	push	{r7, lr}
 801d486:	b082      	sub	sp, #8
 801d488:	af00      	add	r7, sp, #0
  OS_PUT_MESSAGE_QUEUE(CADQueueId, 0xFFFF, 0);
 801d48a:	4b06      	ldr	r3, [pc, #24]	@ (801d4a4 <USBPD_DPM_CADTaskWakeUp+0x20>)
 801d48c:	607b      	str	r3, [r7, #4]
 801d48e:	1d39      	adds	r1, r7, #4
 801d490:	4b05      	ldr	r3, [pc, #20]	@ (801d4a8 <USBPD_DPM_CADTaskWakeUp+0x24>)
 801d492:	2200      	movs	r2, #0
 801d494:	0018      	movs	r0, r3
 801d496:	f7f6 fc09 	bl	8013cac <_txe_queue_send>
}
 801d49a:	46c0      	nop			@ (mov r8, r8)
 801d49c:	46bd      	mov	sp, r7
 801d49e:	b002      	add	sp, #8
 801d4a0:	bd80      	pop	{r7, pc}
 801d4a2:	46c0      	nop			@ (mov r8, r8)
 801d4a4:	0000ffff 	.word	0x0000ffff
 801d4a8:	200119b8 	.word	0x200119b8

0801d4ac <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 801d4ac:	b580      	push	{r7, lr}
 801d4ae:	b084      	sub	sp, #16
 801d4b0:	af00      	add	r7, sp, #0
 801d4b2:	603a      	str	r2, [r7, #0]
 801d4b4:	1dfb      	adds	r3, r7, #7
 801d4b6:	1c02      	adds	r2, r0, #0
 801d4b8:	701a      	strb	r2, [r3, #0]
 801d4ba:	1dbb      	adds	r3, r7, #6
 801d4bc:	1c0a      	adds	r2, r1, #0
 801d4be:	701a      	strb	r2, [r3, #0]
 /* _TRACE */
  (void)(Cc);
  switch (State)
 801d4c0:	1dbb      	adds	r3, r7, #6
 801d4c2:	781b      	ldrb	r3, [r3, #0]
 801d4c4:	2b04      	cmp	r3, #4
 801d4c6:	d009      	beq.n	801d4dc <USBPD_DPM_CADCallback+0x30>
 801d4c8:	dd00      	ble.n	801d4cc <USBPD_DPM_CADCallback+0x20>
 801d4ca:	e06f      	b.n	801d5ac <USBPD_DPM_CADCallback+0x100>
 801d4cc:	2b03      	cmp	r3, #3
 801d4ce:	d01d      	beq.n	801d50c <USBPD_DPM_CADCallback+0x60>
 801d4d0:	dc6c      	bgt.n	801d5ac <USBPD_DPM_CADCallback+0x100>
 801d4d2:	2b01      	cmp	r3, #1
 801d4d4:	d01a      	beq.n	801d50c <USBPD_DPM_CADCallback+0x60>
 801d4d6:	2b02      	cmp	r3, #2
 801d4d8:	d00c      	beq.n	801d4f4 <USBPD_DPM_CADCallback+0x48>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
      break;
    }
    default :
      /* nothing to do */
      break;
 801d4da:	e067      	b.n	801d5ac <USBPD_DPM_CADCallback+0x100>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTEMC);
 801d4dc:	1dfb      	adds	r3, r7, #7
 801d4de:	781b      	ldrb	r3, [r3, #0]
 801d4e0:	2104      	movs	r1, #4
 801d4e2:	0018      	movs	r0, r3
 801d4e4:	f000 f932 	bl	801d74c <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 801d4e8:	1dfb      	adds	r3, r7, #7
 801d4ea:	781b      	ldrb	r3, [r3, #0]
 801d4ec:	0018      	movs	r0, r3
 801d4ee:	f000 f867 	bl	801d5c0 <DPM_StartPETask>
      break;
 801d4f2:	e05c      	b.n	801d5ae <USBPD_DPM_CADCallback+0x102>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTACHED);
 801d4f4:	1dfb      	adds	r3, r7, #7
 801d4f6:	781b      	ldrb	r3, [r3, #0]
 801d4f8:	2102      	movs	r1, #2
 801d4fa:	0018      	movs	r0, r3
 801d4fc:	f000 f926 	bl	801d74c <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 801d500:	1dfb      	adds	r3, r7, #7
 801d502:	781b      	ldrb	r3, [r3, #0]
 801d504:	0018      	movs	r0, r3
 801d506:	f000 f85b 	bl	801d5c0 <DPM_StartPETask>
      break;
 801d50a:	e050      	b.n	801d5ae <USBPD_DPM_CADCallback+0x102>
      uint8_t _timeout = 0;
 801d50c:	230f      	movs	r3, #15
 801d50e:	18fb      	adds	r3, r7, r3
 801d510:	2200      	movs	r2, #0
 801d512:	701a      	strb	r2, [r3, #0]
      USBPD_PE_TaskWakeUp(PortNum);
 801d514:	1dfb      	adds	r3, r7, #7
 801d516:	781b      	ldrb	r3, [r3, #0]
 801d518:	0018      	movs	r0, r3
 801d51a:	f7ff ff95 	bl	801d448 <USBPD_PE_TaskWakeUp>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 801d51e:	e016      	b.n	801d54e <USBPD_DPM_CADCallback+0xa2>
        (void)OS_DELAY(1);
 801d520:	2001      	movs	r0, #1
 801d522:	f7f4 fff3 	bl	801250c <_tx_thread_sleep>
        _timeout++;
 801d526:	210f      	movs	r1, #15
 801d528:	187b      	adds	r3, r7, r1
 801d52a:	781a      	ldrb	r2, [r3, #0]
 801d52c:	187b      	adds	r3, r7, r1
 801d52e:	3201      	adds	r2, #1
 801d530:	701a      	strb	r2, [r3, #0]
        if (_timeout > 30u)
 801d532:	187b      	adds	r3, r7, r1
 801d534:	781b      	ldrb	r3, [r3, #0]
 801d536:	2b1e      	cmp	r3, #30
 801d538:	d909      	bls.n	801d54e <USBPD_DPM_CADCallback+0xa2>
          (void)OS_TASK_SUSPEND(&DPM_PEThreadId_Table[PortNum]);
 801d53a:	1dfb      	adds	r3, r7, #7
 801d53c:	781b      	ldrb	r3, [r3, #0]
 801d53e:	22b0      	movs	r2, #176	@ 0xb0
 801d540:	435a      	muls	r2, r3
 801d542:	4b1d      	ldr	r3, [pc, #116]	@ (801d5b8 <USBPD_DPM_CADCallback+0x10c>)
 801d544:	18d3      	adds	r3, r2, r3
 801d546:	0018      	movs	r0, r3
 801d548:	f7f6 febe 	bl	80142c8 <_txe_thread_suspend>
          break;
 801d54c:	e009      	b.n	801d562 <USBPD_DPM_CADCallback+0xb6>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 801d54e:	1dfb      	adds	r3, r7, #7
 801d550:	781b      	ldrb	r3, [r3, #0]
 801d552:	4a19      	ldr	r2, [pc, #100]	@ (801d5b8 <USBPD_DPM_CADCallback+0x10c>)
 801d554:	21b0      	movs	r1, #176	@ 0xb0
 801d556:	434b      	muls	r3, r1
 801d558:	18d3      	adds	r3, r2, r3
 801d55a:	3330      	adds	r3, #48	@ 0x30
 801d55c:	681b      	ldr	r3, [r3, #0]
 801d55e:	2b03      	cmp	r3, #3
 801d560:	d1de      	bne.n	801d520 <USBPD_DPM_CADCallback+0x74>
      USBPD_PE_StateMachine_Stop(PortNum);
 801d562:	1dfb      	adds	r3, r7, #7
 801d564:	781b      	ldrb	r3, [r3, #0]
 801d566:	0018      	movs	r0, r3
 801d568:	f7e3 f8ab 	bl	80006c2 <USBPD_PE_StateMachine_Stop>
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 801d56c:	1dfb      	adds	r3, r7, #7
 801d56e:	781a      	ldrb	r2, [r3, #0]
 801d570:	4b12      	ldr	r3, [pc, #72]	@ (801d5bc <USBPD_DPM_CADCallback+0x110>)
 801d572:	0092      	lsls	r2, r2, #2
 801d574:	5cd1      	ldrb	r1, [r2, r3]
 801d576:	2010      	movs	r0, #16
 801d578:	4381      	bics	r1, r0
 801d57a:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 801d57c:	1dfb      	adds	r3, r7, #7
 801d57e:	781b      	ldrb	r3, [r3, #0]
 801d580:	4a0e      	ldr	r2, [pc, #56]	@ (801d5bc <USBPD_DPM_CADCallback+0x110>)
 801d582:	009b      	lsls	r3, r3, #2
 801d584:	18d3      	adds	r3, r2, r3
 801d586:	785a      	ldrb	r2, [r3, #1]
 801d588:	2107      	movs	r1, #7
 801d58a:	438a      	bics	r2, r1
 801d58c:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 801d58e:	1dbb      	adds	r3, r7, #6
 801d590:	781a      	ldrb	r2, [r3, #0]
 801d592:	1dfb      	adds	r3, r7, #7
 801d594:	781b      	ldrb	r3, [r3, #0]
 801d596:	0011      	movs	r1, r2
 801d598:	0018      	movs	r0, r3
 801d59a:	f000 f8d7 	bl	801d74c <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
 801d59e:	1dfb      	adds	r3, r7, #7
 801d5a0:	781b      	ldrb	r3, [r3, #0]
 801d5a2:	2169      	movs	r1, #105	@ 0x69
 801d5a4:	0018      	movs	r0, r3
 801d5a6:	f000 f8de 	bl	801d766 <USBPD_DPM_Notification>
      break;
 801d5aa:	e000      	b.n	801d5ae <USBPD_DPM_CADCallback+0x102>
      break;
 801d5ac:	46c0      	nop			@ (mov r8, r8)
  }
}
 801d5ae:	46c0      	nop			@ (mov r8, r8)
 801d5b0:	46bd      	mov	sp, r7
 801d5b2:	b004      	add	sp, #16
 801d5b4:	bd80      	pop	{r7, pc}
 801d5b6:	46c0      	nop			@ (mov r8, r8)
 801d5b8:	20011858 	.word	0x20011858
 801d5bc:	20011a60 	.word	0x20011a60

0801d5c0 <DPM_StartPETask>:

static void DPM_StartPETask(uint8_t PortNum)
{
 801d5c0:	b580      	push	{r7, lr}
 801d5c2:	b082      	sub	sp, #8
 801d5c4:	af00      	add	r7, sp, #0
 801d5c6:	0002      	movs	r2, r0
 801d5c8:	1dfb      	adds	r3, r7, #7
 801d5ca:	701a      	strb	r2, [r3, #0]
  USBPD_PE_StateMachine_Reset(PortNum);
 801d5cc:	1dfb      	adds	r3, r7, #7
 801d5ce:	781b      	ldrb	r3, [r3, #0]
 801d5d0:	0018      	movs	r0, r3
 801d5d2:	f7e3 f870 	bl	80006b6 <USBPD_PE_StateMachine_Reset>
  /* Resume the PE task */
  switch (PortNum)
 801d5d6:	1dfb      	adds	r3, r7, #7
 801d5d8:	781b      	ldrb	r3, [r3, #0]
 801d5da:	2b01      	cmp	r3, #1
 801d5dc:	d809      	bhi.n	801d5f2 <DPM_StartPETask+0x32>
  {
    case USBPD_PORT_0:
    case USBPD_PORT_1:
    {
      OS_TASK_RESUME(DPM_PEThreadId_Table[PortNum]);
 801d5de:	1dfb      	adds	r3, r7, #7
 801d5e0:	781b      	ldrb	r3, [r3, #0]
 801d5e2:	22b0      	movs	r2, #176	@ 0xb0
 801d5e4:	435a      	muls	r2, r3
 801d5e6:	4b09      	ldr	r3, [pc, #36]	@ (801d60c <DPM_StartPETask+0x4c>)
 801d5e8:	18d3      	adds	r3, r2, r3
 801d5ea:	0018      	movs	r0, r3
 801d5ec:	f7f6 fe4c 	bl	8014288 <_txe_thread_resume>
      break;
 801d5f0:	e002      	b.n	801d5f8 <DPM_StartPETask+0x38>
    }
    default :
    {
      USBPD_DPM_ErrorHandler();
 801d5f2:	f000 f80d 	bl	801d610 <USBPD_DPM_ErrorHandler>
      break;
 801d5f6:	46c0      	nop			@ (mov r8, r8)
    }
  }
 /* _RTOS || THREADX */
  USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_START);
 801d5f8:	1dfb      	adds	r3, r7, #7
 801d5fa:	781b      	ldrb	r3, [r3, #0]
 801d5fc:	2168      	movs	r1, #104	@ 0x68
 801d5fe:	0018      	movs	r0, r3
 801d600:	f000 f8b1 	bl	801d766 <USBPD_DPM_Notification>
}
 801d604:	46c0      	nop			@ (mov r8, r8)
 801d606:	46bd      	mov	sp, r7
 801d608:	b002      	add	sp, #8
 801d60a:	bd80      	pop	{r7, pc}
 801d60c:	20011858 	.word	0x20011858

0801d610 <USBPD_DPM_ErrorHandler>:
 /* USBPDCORE_LIB_NO_PD */

__WEAK void USBPD_DPM_ErrorHandler(void)
{
 801d610:	b580      	push	{r7, lr}
 801d612:	af00      	add	r7, sp, #0
  /* This function is called to block application execution
     in case of an unexpected behavior
     another solution could be to reset application */
  while (1u == 1u) {};
 801d614:	46c0      	nop			@ (mov r8, r8)
 801d616:	e7fd      	b.n	801d614 <USBPD_DPM_ErrorHandler+0x4>

0801d618 <USBPD_PWR_IF_SetProfile>:
  * @brief  Sets the required power profile, now it works only with Fixed ones
  * @param  PortNum Port number
  * @retval USBPD status
*/
USBPD_StatusTypeDef USBPD_PWR_IF_SetProfile(uint8_t PortNum)
{
 801d618:	b580      	push	{r7, lr}
 801d61a:	b084      	sub	sp, #16
 801d61c:	af00      	add	r7, sp, #0
 801d61e:	0002      	movs	r2, r0
 801d620:	1dfb      	adds	r3, r7, #7
 801d622:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SetProfile */
  USBPD_StatusTypeDef      _status = USBPD_ERROR;
 801d624:	210f      	movs	r1, #15
 801d626:	187b      	adds	r3, r7, r1
 801d628:	2202      	movs	r2, #2
 801d62a:	701a      	strb	r2, [r3, #0]
/*   if (BSP_ERROR_NONE == BSP_USBPD_PWR_VBUSSetVoltage_Fixed(PortNum, 5000, 3000, 3000))
  {
     _status = USBPD_OK;
  }
 */
   return _status;
 801d62c:	187b      	adds	r3, r7, r1
 801d62e:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SetProfile */
}
 801d630:	0018      	movs	r0, r3
 801d632:	46bd      	mov	sp, r7
 801d634:	b004      	add	sp, #16
 801d636:	bd80      	pop	{r7, pc}

0801d638 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801d638:	b580      	push	{r7, lr}
 801d63a:	b084      	sub	sp, #16
 801d63c:	af00      	add	r7, sp, #0
 801d63e:	0002      	movs	r2, r0
 801d640:	1dfb      	adds	r3, r7, #7
 801d642:	701a      	strb	r2, [r3, #0]
 801d644:	1dbb      	adds	r3, r7, #6
 801d646:	1c0a      	adds	r2, r1, #0
 801d648:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 801d64a:	230f      	movs	r3, #15
 801d64c:	18fb      	adds	r3, r7, r3
 801d64e:	2202      	movs	r2, #2
 801d650:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 801d652:	1dfb      	adds	r3, r7, #7
 801d654:	781b      	ldrb	r3, [r3, #0]
 801d656:	2b01      	cmp	r3, #1
 801d658:	d901      	bls.n	801d65e <USBPD_PWR_IF_SupplyReady+0x26>
  {
    return USBPD_ERROR;
 801d65a:	2302      	movs	r3, #2
 801d65c:	e024      	b.n	801d6a8 <USBPD_PWR_IF_SupplyReady+0x70>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 801d65e:	1dfb      	adds	r3, r7, #7
 801d660:	781b      	ldrb	r3, [r3, #0]
 801d662:	2208      	movs	r2, #8
 801d664:	18ba      	adds	r2, r7, r2
 801d666:	0011      	movs	r1, r2
 801d668:	0018      	movs	r0, r3
 801d66a:	f000 f9de 	bl	801da2a <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 801d66e:	1dbb      	adds	r3, r7, #6
 801d670:	781b      	ldrb	r3, [r3, #0]
 801d672:	2b00      	cmp	r3, #0
 801d674:	d10a      	bne.n	801d68c <USBPD_PWR_IF_SupplyReady+0x54>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801d676:	68bb      	ldr	r3, [r7, #8]
 801d678:	4a0d      	ldr	r2, [pc, #52]	@ (801d6b0 <USBPD_PWR_IF_SupplyReady+0x78>)
 801d67a:	4293      	cmp	r3, r2
 801d67c:	d801      	bhi.n	801d682 <USBPD_PWR_IF_SupplyReady+0x4a>
 801d67e:	2200      	movs	r2, #0
 801d680:	e000      	b.n	801d684 <USBPD_PWR_IF_SupplyReady+0x4c>
 801d682:	2202      	movs	r2, #2
 801d684:	230f      	movs	r3, #15
 801d686:	18fb      	adds	r3, r7, r3
 801d688:	701a      	strb	r2, [r3, #0]
 801d68a:	e00a      	b.n	801d6a2 <USBPD_PWR_IF_SupplyReady+0x6a>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801d68c:	68ba      	ldr	r2, [r7, #8]
 801d68e:	23af      	movs	r3, #175	@ 0xaf
 801d690:	011b      	lsls	r3, r3, #4
 801d692:	429a      	cmp	r2, r3
 801d694:	d901      	bls.n	801d69a <USBPD_PWR_IF_SupplyReady+0x62>
 801d696:	2200      	movs	r2, #0
 801d698:	e000      	b.n	801d69c <USBPD_PWR_IF_SupplyReady+0x64>
 801d69a:	2202      	movs	r2, #2
 801d69c:	230f      	movs	r3, #15
 801d69e:	18fb      	adds	r3, r7, r3
 801d6a0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801d6a2:	230f      	movs	r3, #15
 801d6a4:	18fb      	adds	r3, r7, r3
 801d6a6:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 801d6a8:	0018      	movs	r0, r3
 801d6aa:	46bd      	mov	sp, r7
 801d6ac:	b004      	add	sp, #16
 801d6ae:	bd80      	pop	{r7, pc}
 801d6b0:	000002ed 	.word	0x000002ed

0801d6b4 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 801d6b4:	b580      	push	{r7, lr}
 801d6b6:	b084      	sub	sp, #16
 801d6b8:	af00      	add	r7, sp, #0
 801d6ba:	0002      	movs	r2, r0
 801d6bc:	1dfb      	adds	r3, r7, #7
 801d6be:	701a      	strb	r2, [r3, #0]
 801d6c0:	1dbb      	adds	r3, r7, #6
 801d6c2:	1c0a      	adds	r2, r1, #0
 801d6c4:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 801d6c6:	230f      	movs	r3, #15
 801d6c8:	18fb      	adds	r3, r7, r3
 801d6ca:	2200      	movs	r2, #0
 801d6cc:	701a      	strb	r2, [r3, #0]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 801d6ce:	1dfb      	adds	r3, r7, #7
 801d6d0:	781b      	ldrb	r3, [r3, #0]
 801d6d2:	0018      	movs	r0, r3
 801d6d4:	f7f9 fef2 	bl	80174bc <HW_IF_PWR_GetVoltage>
 801d6d8:	0003      	movs	r3, r0
 801d6da:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 801d6dc:	1dbb      	adds	r3, r7, #6
 801d6de:	781b      	ldrb	r3, [r3, #0]
 801d6e0:	2b02      	cmp	r3, #2
 801d6e2:	d018      	beq.n	801d716 <USBPD_PWR_IF_GetVBUSStatus+0x62>
 801d6e4:	dc21      	bgt.n	801d72a <USBPD_PWR_IF_GetVBUSStatus+0x76>
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	d002      	beq.n	801d6f0 <USBPD_PWR_IF_GetVBUSStatus+0x3c>
 801d6ea:	2b01      	cmp	r3, #1
 801d6ec:	d009      	beq.n	801d702 <USBPD_PWR_IF_GetVBUSStatus+0x4e>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 801d6ee:	e01c      	b.n	801d72a <USBPD_PWR_IF_GetVBUSStatus+0x76>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801d6f0:	68bb      	ldr	r3, [r7, #8]
 801d6f2:	4a15      	ldr	r2, [pc, #84]	@ (801d748 <USBPD_PWR_IF_GetVBUSStatus+0x94>)
 801d6f4:	4293      	cmp	r3, r2
 801d6f6:	d81a      	bhi.n	801d72e <USBPD_PWR_IF_GetVBUSStatus+0x7a>
 801d6f8:	230f      	movs	r3, #15
 801d6fa:	18fb      	adds	r3, r7, r3
 801d6fc:	2201      	movs	r2, #1
 801d6fe:	701a      	strb	r2, [r3, #0]
    break;
 801d700:	e015      	b.n	801d72e <USBPD_PWR_IF_GetVBUSStatus+0x7a>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801d702:	68ba      	ldr	r2, [r7, #8]
 801d704:	23af      	movs	r3, #175	@ 0xaf
 801d706:	011b      	lsls	r3, r3, #4
 801d708:	429a      	cmp	r2, r3
 801d70a:	d312      	bcc.n	801d732 <USBPD_PWR_IF_GetVBUSStatus+0x7e>
 801d70c:	230f      	movs	r3, #15
 801d70e:	18fb      	adds	r3, r7, r3
 801d710:	2201      	movs	r2, #1
 801d712:	701a      	strb	r2, [r3, #0]
    break;
 801d714:	e00d      	b.n	801d732 <USBPD_PWR_IF_GetVBUSStatus+0x7e>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801d716:	68ba      	ldr	r2, [r7, #8]
 801d718:	23af      	movs	r3, #175	@ 0xaf
 801d71a:	011b      	lsls	r3, r3, #4
 801d71c:	429a      	cmp	r2, r3
 801d71e:	d20a      	bcs.n	801d736 <USBPD_PWR_IF_GetVBUSStatus+0x82>
 801d720:	230f      	movs	r3, #15
 801d722:	18fb      	adds	r3, r7, r3
 801d724:	2201      	movs	r2, #1
 801d726:	701a      	strb	r2, [r3, #0]
    break;
 801d728:	e005      	b.n	801d736 <USBPD_PWR_IF_GetVBUSStatus+0x82>
    break;
 801d72a:	46c0      	nop			@ (mov r8, r8)
 801d72c:	e004      	b.n	801d738 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 801d72e:	46c0      	nop			@ (mov r8, r8)
 801d730:	e002      	b.n	801d738 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 801d732:	46c0      	nop			@ (mov r8, r8)
 801d734:	e000      	b.n	801d738 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 801d736:	46c0      	nop			@ (mov r8, r8)
  }
  return _status;
 801d738:	230f      	movs	r3, #15
 801d73a:	18fb      	adds	r3, r7, r3
 801d73c:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 801d73e:	0018      	movs	r0, r3
 801d740:	46bd      	mov	sp, r7
 801d742:	b004      	add	sp, #16
 801d744:	bd80      	pop	{r7, pc}
 801d746:	46c0      	nop			@ (mov r8, r8)
 801d748:	000002ed 	.word	0x000002ed

0801d74c <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 801d74c:	b580      	push	{r7, lr}
 801d74e:	b082      	sub	sp, #8
 801d750:	af00      	add	r7, sp, #0
 801d752:	0002      	movs	r2, r0
 801d754:	1dfb      	adds	r3, r7, #7
 801d756:	701a      	strb	r2, [r3, #0]
 801d758:	1dbb      	adds	r3, r7, #6
 801d75a:	1c0a      	adds	r2, r1, #0
 801d75c:	701a      	strb	r2, [r3, #0]
      // }
      // break;
    // }
  // }
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 801d75e:	46c0      	nop			@ (mov r8, r8)
 801d760:	46bd      	mov	sp, r7
 801d762:	b002      	add	sp, #8
 801d764:	bd80      	pop	{r7, pc}

0801d766 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 801d766:	b580      	push	{r7, lr}
 801d768:	b082      	sub	sp, #8
 801d76a:	af00      	add	r7, sp, #0
 801d76c:	0002      	movs	r2, r0
 801d76e:	1dfb      	adds	r3, r7, #7
 801d770:	701a      	strb	r2, [r3, #0]
 801d772:	1dbb      	adds	r3, r7, #6
 801d774:	1c0a      	adds	r2, r1, #0
 801d776:	701a      	strb	r2, [r3, #0]
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
      break;
 801d778:	46c0      	nop			@ (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_Notification */
}
 801d77a:	46c0      	nop			@ (mov r8, r8)
 801d77c:	46bd      	mov	sp, r7
 801d77e:	b002      	add	sp, #8
 801d780:	bd80      	pop	{r7, pc}

0801d782 <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 801d782:	b580      	push	{r7, lr}
 801d784:	b082      	sub	sp, #8
 801d786:	af00      	add	r7, sp, #0
 801d788:	6039      	str	r1, [r7, #0]
 801d78a:	0011      	movs	r1, r2
 801d78c:	1dfb      	adds	r3, r7, #7
 801d78e:	1c02      	adds	r2, r0, #0
 801d790:	701a      	strb	r2, [r3, #0]
 801d792:	1dbb      	adds	r3, r7, #6
 801d794:	1c0a      	adds	r2, r1, #0
 801d796:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 801d798:	46c0      	nop			@ (mov r8, r8)
 801d79a:	46bd      	mov	sp, r7
 801d79c:	b002      	add	sp, #8
 801d79e:	bd80      	pop	{r7, pc}

0801d7a0 <USBPD_DPM_SetupNewPower>:
  * @brief  Request the DPM to setup the new power level.
  * @param  PortNum The current port number
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_SetupNewPower(uint8_t PortNum)
{
 801d7a0:	b580      	push	{r7, lr}
 801d7a2:	b082      	sub	sp, #8
 801d7a4:	af00      	add	r7, sp, #0
 801d7a6:	0002      	movs	r2, r0
 801d7a8:	1dfb      	adds	r3, r7, #7
 801d7aa:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SetupNewPower */
  return USBPD_PWR_IF_SetProfile(PortNum);
 801d7ac:	1dfb      	adds	r3, r7, #7
 801d7ae:	781b      	ldrb	r3, [r3, #0]
 801d7b0:	0018      	movs	r0, r3
 801d7b2:	f7ff ff31 	bl	801d618 <USBPD_PWR_IF_SetProfile>
 801d7b6:	0003      	movs	r3, r0
/* USER CODE END USBPD_DPM_SetupNewPower */
}
 801d7b8:	0018      	movs	r0, r3
 801d7ba:	46bd      	mov	sp, r7
 801d7bc:	b002      	add	sp, #8
 801d7be:	bd80      	pop	{r7, pc}

0801d7c0 <USBPD_DPM_EvaluatePowerRoleSwap>:
  * @brief  Evaluate the swap request from PE.
  * @param  PortNum The current port number
  * @retval USBPD_ACCEPT, USBPD_WAIT, USBPD_REJECT
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluatePowerRoleSwap(uint8_t PortNum)
{
 801d7c0:	b580      	push	{r7, lr}
 801d7c2:	b082      	sub	sp, #8
 801d7c4:	af00      	add	r7, sp, #0
 801d7c6:	0002      	movs	r2, r0
 801d7c8:	1dfb      	adds	r3, r7, #7
 801d7ca:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluatePowerRoleSwap */
  return USBPD_ACCEPT;
 801d7cc:	230a      	movs	r3, #10
/* USER CODE END USBPD_DPM_EvaluatePowerRoleSwap */
}
 801d7ce:	0018      	movs	r0, r3
 801d7d0:	46bd      	mov	sp, r7
 801d7d2:	b002      	add	sp, #8
 801d7d4:	bd80      	pop	{r7, pc}

0801d7d6 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 801d7d6:	b580      	push	{r7, lr}
 801d7d8:	b084      	sub	sp, #16
 801d7da:	af00      	add	r7, sp, #0
 801d7dc:	60ba      	str	r2, [r7, #8]
 801d7de:	607b      	str	r3, [r7, #4]
 801d7e0:	230f      	movs	r3, #15
 801d7e2:	18fb      	adds	r3, r7, r3
 801d7e4:	1c02      	adds	r2, r0, #0
 801d7e6:	701a      	strb	r2, [r3, #0]
 801d7e8:	230e      	movs	r3, #14
 801d7ea:	18fb      	adds	r3, r7, r3
 801d7ec:	1c0a      	adds	r2, r1, #0
 801d7ee:	701a      	strb	r2, [r3, #0]
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 801d7f0:	46c0      	nop			@ (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 801d7f2:	46c0      	nop			@ (mov r8, r8)
 801d7f4:	46bd      	mov	sp, r7
 801d7f6:	b004      	add	sp, #16
 801d7f8:	bd80      	pop	{r7, pc}

0801d7fa <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 801d7fa:	b580      	push	{r7, lr}
 801d7fc:	b084      	sub	sp, #16
 801d7fe:	af00      	add	r7, sp, #0
 801d800:	60ba      	str	r2, [r7, #8]
 801d802:	607b      	str	r3, [r7, #4]
 801d804:	230f      	movs	r3, #15
 801d806:	18fb      	adds	r3, r7, r3
 801d808:	1c02      	adds	r2, r0, #0
 801d80a:	701a      	strb	r2, [r3, #0]
 801d80c:	230e      	movs	r3, #14
 801d80e:	18fb      	adds	r3, r7, r3
 801d810:	1c0a      	adds	r2, r1, #0
 801d812:	701a      	strb	r2, [r3, #0]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 801d814:	46c0      	nop			@ (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 801d816:	46c0      	nop			@ (mov r8, r8)
 801d818:	46bd      	mov	sp, r7
 801d81a:	b004      	add	sp, #16
 801d81c:	bd80      	pop	{r7, pc}

0801d81e <USBPD_DPM_EvaluateRequest>:
  * @param  PortNum Port number
  * @param  PtrPowerObject  Pointer on the power data object
  * @retval USBPD status : USBPD_ACCEPT, USBPD_REJECT, USBPD_WAIT, USBPD_GOTOMIN
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateRequest(uint8_t PortNum, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 801d81e:	b580      	push	{r7, lr}
 801d820:	b082      	sub	sp, #8
 801d822:	af00      	add	r7, sp, #0
 801d824:	0002      	movs	r2, r0
 801d826:	6039      	str	r1, [r7, #0]
 801d828:	1dfb      	adds	r3, r7, #7
 801d82a:	701a      	strb	r2, [r3, #0]
    Set power data object to initialize value.
    This parameter is used by the stack to start or not tPPSTimeout
    (in case of USBPD_CORE_PDO_TYPE_APDO, stack will wait for periodic request
    from the port partner in PPS mode).
  */
  *PtrPowerObject = USBPD_CORE_PDO_TYPE_FIXED;
 801d82c:	683b      	ldr	r3, [r7, #0]
 801d82e:	2200      	movs	r2, #0
 801d830:	601a      	str	r2, [r3, #0]

  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_EvaluateRequest");
  return USBPD_REJECT;
 801d832:	230c      	movs	r3, #12
/* USER CODE END USBPD_DPM_EvaluateRequest */
}
 801d834:	0018      	movs	r0, r3
 801d836:	46bd      	mov	sp, r7
 801d838:	b002      	add	sp, #8
 801d83a:	bd80      	pop	{r7, pc}

0801d83c <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 801d83c:	b580      	push	{r7, lr}
 801d83e:	b084      	sub	sp, #16
 801d840:	af00      	add	r7, sp, #0
 801d842:	60b9      	str	r1, [r7, #8]
 801d844:	607a      	str	r2, [r7, #4]
 801d846:	230f      	movs	r3, #15
 801d848:	18fb      	adds	r3, r7, r3
 801d84a:	1c02      	adds	r2, r0, #0
 801d84c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 801d84e:	46c0      	nop			@ (mov r8, r8)
 801d850:	46bd      	mov	sp, r7
 801d852:	b004      	add	sp, #16
 801d854:	bd80      	pop	{r7, pc}

0801d856 <USBPD_DPM_PowerRoleSwap>:
  * @param  CurrentRole the current role
  * @param  Status status on power role swap event
  * @retval None
  */
void USBPD_DPM_PowerRoleSwap(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_PRS_Status_TypeDef Status)
{
 801d856:	b580      	push	{r7, lr}
 801d858:	b082      	sub	sp, #8
 801d85a:	af00      	add	r7, sp, #0
 801d85c:	6039      	str	r1, [r7, #0]
 801d85e:	0011      	movs	r1, r2
 801d860:	1dfb      	adds	r3, r7, #7
 801d862:	1c02      	adds	r2, r0, #0
 801d864:	701a      	strb	r2, [r3, #0]
 801d866:	1dbb      	adds	r3, r7, #6
 801d868:	1c0a      	adds	r2, r1, #0
 801d86a:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_PowerRoleSwap */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_PowerRoleSwap");
/* USER CODE END USBPD_DPM_PowerRoleSwap */
}
 801d86c:	46c0      	nop			@ (mov r8, r8)
 801d86e:	46bd      	mov	sp, r7
 801d870:	b002      	add	sp, #8
 801d872:	bd80      	pop	{r7, pc}

0801d874 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 801d874:	b590      	push	{r4, r7, lr}
 801d876:	b083      	sub	sp, #12
 801d878:	af00      	add	r7, sp, #0
 801d87a:	0004      	movs	r4, r0
 801d87c:	0008      	movs	r0, r1
 801d87e:	603a      	str	r2, [r7, #0]
 801d880:	0019      	movs	r1, r3
 801d882:	1dfb      	adds	r3, r7, #7
 801d884:	1c22      	adds	r2, r4, #0
 801d886:	701a      	strb	r2, [r3, #0]
 801d888:	1dbb      	adds	r3, r7, #6
 801d88a:	1c02      	adds	r2, r0, #0
 801d88c:	701a      	strb	r2, [r3, #0]
 801d88e:	1d3b      	adds	r3, r7, #4
 801d890:	1c0a      	adds	r2, r1, #0
 801d892:	801a      	strh	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 801d894:	46c0      	nop			@ (mov r8, r8)
 801d896:	46bd      	mov	sp, r7
 801d898:	b003      	add	sp, #12
 801d89a:	bd90      	pop	{r4, r7, pc}

0801d89c <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 801d89c:	b580      	push	{r7, lr}
 801d89e:	b082      	sub	sp, #8
 801d8a0:	af00      	add	r7, sp, #0
 801d8a2:	0002      	movs	r2, r0
 801d8a4:	1dfb      	adds	r3, r7, #7
 801d8a6:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 801d8a8:	1dfb      	adds	r3, r7, #7
 801d8aa:	781b      	ldrb	r3, [r3, #0]
 801d8ac:	0018      	movs	r0, r3
 801d8ae:	f7e2 fe29 	bl	8000504 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 801d8b2:	46c0      	nop			@ (mov r8, r8)
 801d8b4:	46bd      	mov	sp, r7
 801d8b6:	b002      	add	sp, #8
 801d8b8:	bd80      	pop	{r7, pc}
	...

0801d8bc <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 801d8bc:	b580      	push	{r7, lr}
 801d8be:	b084      	sub	sp, #16
 801d8c0:	af00      	add	r7, sp, #0
 801d8c2:	0002      	movs	r2, r0
 801d8c4:	1dfb      	adds	r3, r7, #7
 801d8c6:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 801d8c8:	230f      	movs	r3, #15
 801d8ca:	18fb      	adds	r3, r7, r3
 801d8cc:	220c      	movs	r2, #12
 801d8ce:	701a      	strb	r2, [r3, #0]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 801d8d0:	1dfb      	adds	r3, r7, #7
 801d8d2:	781a      	ldrb	r2, [r3, #0]
 801d8d4:	4b2c      	ldr	r3, [pc, #176]	@ (801d988 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801d8d6:	2154      	movs	r1, #84	@ 0x54
 801d8d8:	434a      	muls	r2, r1
 801d8da:	5cd3      	ldrb	r3, [r2, r3]
 801d8dc:	07db      	lsls	r3, r3, #31
 801d8de:	0fdb      	lsrs	r3, r3, #31
 801d8e0:	b2db      	uxtb	r3, r3
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d015      	beq.n	801d912 <USBPD_DPM_EvaluateDataRoleSwap+0x56>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 801d8e6:	1dfb      	adds	r3, r7, #7
 801d8e8:	781a      	ldrb	r2, [r3, #0]
 801d8ea:	4b27      	ldr	r3, [pc, #156]	@ (801d988 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801d8ec:	2154      	movs	r1, #84	@ 0x54
 801d8ee:	434a      	muls	r2, r1
 801d8f0:	5cd3      	ldrb	r3, [r2, r3]
 801d8f2:	075b      	lsls	r3, r3, #29
 801d8f4:	0fdb      	lsrs	r3, r3, #31
 801d8f6:	b2db      	uxtb	r3, r3
 801d8f8:	2b00      	cmp	r3, #0
 801d8fa:	d10f      	bne.n	801d91c <USBPD_DPM_EvaluateDataRoleSwap+0x60>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 801d8fc:	1dfb      	adds	r3, r7, #7
 801d8fe:	781a      	ldrb	r2, [r3, #0]
 801d900:	4b21      	ldr	r3, [pc, #132]	@ (801d988 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801d902:	2154      	movs	r1, #84	@ 0x54
 801d904:	434a      	muls	r2, r1
 801d906:	5cd3      	ldrb	r3, [r2, r3]
 801d908:	071b      	lsls	r3, r3, #28
 801d90a:	0fdb      	lsrs	r3, r3, #31
 801d90c:	b2db      	uxtb	r3, r3
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d104      	bne.n	801d91c <USBPD_DPM_EvaluateDataRoleSwap+0x60>
  {
    status = USBPD_NOTSUPPORTED;
 801d912:	230f      	movs	r3, #15
 801d914:	18fb      	adds	r3, r7, r3
 801d916:	2201      	movs	r2, #1
 801d918:	701a      	strb	r2, [r3, #0]
 801d91a:	e02d      	b.n	801d978 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 801d91c:	1dfb      	adds	r3, r7, #7
 801d91e:	781a      	ldrb	r2, [r3, #0]
 801d920:	4b19      	ldr	r3, [pc, #100]	@ (801d988 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801d922:	2154      	movs	r1, #84	@ 0x54
 801d924:	434a      	muls	r2, r1
 801d926:	5cd3      	ldrb	r3, [r2, r3]
 801d928:	075b      	lsls	r3, r3, #29
 801d92a:	0fdb      	lsrs	r3, r3, #31
 801d92c:	b2db      	uxtb	r3, r3
 801d92e:	2b01      	cmp	r3, #1
 801d930:	d109      	bne.n	801d946 <USBPD_DPM_EvaluateDataRoleSwap+0x8a>
 801d932:	1dfb      	adds	r3, r7, #7
 801d934:	781a      	ldrb	r2, [r3, #0]
 801d936:	4b15      	ldr	r3, [pc, #84]	@ (801d98c <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801d938:	0092      	lsls	r2, r2, #2
 801d93a:	5cd3      	ldrb	r3, [r2, r3]
 801d93c:	071b      	lsls	r3, r3, #28
 801d93e:	0fdb      	lsrs	r3, r3, #31
 801d940:	b2db      	uxtb	r3, r3
 801d942:	2b00      	cmp	r3, #0
 801d944:	d014      	beq.n	801d970 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 801d946:	1dfb      	adds	r3, r7, #7
 801d948:	781a      	ldrb	r2, [r3, #0]
 801d94a:	4b0f      	ldr	r3, [pc, #60]	@ (801d988 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801d94c:	2154      	movs	r1, #84	@ 0x54
 801d94e:	434a      	muls	r2, r1
 801d950:	5cd3      	ldrb	r3, [r2, r3]
 801d952:	071b      	lsls	r3, r3, #28
 801d954:	0fdb      	lsrs	r3, r3, #31
 801d956:	b2db      	uxtb	r3, r3
 801d958:	2b01      	cmp	r3, #1
 801d95a:	d10d      	bne.n	801d978 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
 801d95c:	1dfb      	adds	r3, r7, #7
 801d95e:	781a      	ldrb	r2, [r3, #0]
 801d960:	4b0a      	ldr	r3, [pc, #40]	@ (801d98c <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801d962:	0092      	lsls	r2, r2, #2
 801d964:	5cd3      	ldrb	r3, [r2, r3]
 801d966:	071b      	lsls	r3, r3, #28
 801d968:	0fdb      	lsrs	r3, r3, #31
 801d96a:	b2db      	uxtb	r3, r3
 801d96c:	2b01      	cmp	r3, #1
 801d96e:	d103      	bne.n	801d978 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
    {
      status = USBPD_ACCEPT;
 801d970:	230f      	movs	r3, #15
 801d972:	18fb      	adds	r3, r7, r3
 801d974:	220a      	movs	r2, #10
 801d976:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 801d978:	230f      	movs	r3, #15
 801d97a:	18fb      	adds	r3, r7, r3
 801d97c:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 801d97e:	0018      	movs	r0, r3
 801d980:	46bd      	mov	sp, r7
 801d982:	b004      	add	sp, #16
 801d984:	bd80      	pop	{r7, pc}
 801d986:	46c0      	nop			@ (mov r8, r8)
 801d988:	200000c8 	.word	0x200000c8
 801d98c:	20011a60 	.word	0x20011a60

0801d990 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801d990:	b580      	push	{r7, lr}
 801d992:	b082      	sub	sp, #8
 801d994:	af00      	add	r7, sp, #0
 801d996:	0002      	movs	r2, r0
 801d998:	1dfb      	adds	r3, r7, #7
 801d99a:	701a      	strb	r2, [r3, #0]
 801d99c:	1dbb      	adds	r3, r7, #6
 801d99e:	1c0a      	adds	r2, r1, #0
 801d9a0:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 801d9a2:	1dbb      	adds	r3, r7, #6
 801d9a4:	781a      	ldrb	r2, [r3, #0]
 801d9a6:	1dfb      	adds	r3, r7, #7
 801d9a8:	781b      	ldrb	r3, [r3, #0]
 801d9aa:	0011      	movs	r1, r2
 801d9ac:	0018      	movs	r0, r3
 801d9ae:	f7ff fe43 	bl	801d638 <USBPD_PWR_IF_SupplyReady>
 801d9b2:	0003      	movs	r3, r0
 801d9b4:	425a      	negs	r2, r3
 801d9b6:	4153      	adcs	r3, r2
 801d9b8:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 801d9ba:	0018      	movs	r0, r3
 801d9bc:	46bd      	mov	sp, r7
 801d9be:	b002      	add	sp, #8
 801d9c0:	bd80      	pop	{r7, pc}

0801d9c2 <BSP_USBPD_PWR_Init>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 801d9c2:	b580      	push	{r7, lr}
 801d9c4:	b084      	sub	sp, #16
 801d9c6:	af00      	add	r7, sp, #0
 801d9c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801d9ca:	2300      	movs	r3, #0
 801d9cc:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	2b01      	cmp	r3, #1
 801d9d2:	d902      	bls.n	801d9da <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801d9d4:	2302      	movs	r3, #2
 801d9d6:	425b      	negs	r3, r3
 801d9d8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801d9da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 801d9dc:	0018      	movs	r0, r3
 801d9de:	46bd      	mov	sp, r7
 801d9e0:	b004      	add	sp, #16
 801d9e2:	bd80      	pop	{r7, pc}

0801d9e4 <BSP_USBPD_PWR_VBUSInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 801d9e4:	b580      	push	{r7, lr}
 801d9e6:	b084      	sub	sp, #16
 801d9e8:	af00      	add	r7, sp, #0
 801d9ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801d9ec:	2300      	movs	r3, #0
 801d9ee:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801d9f0:	687b      	ldr	r3, [r7, #4]
 801d9f2:	2b01      	cmp	r3, #1
 801d9f4:	d902      	bls.n	801d9fc <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801d9f6:	2302      	movs	r3, #2
 801d9f8:	425b      	negs	r3, r3
 801d9fa:	60fb      	str	r3, [r7, #12]
      inside this function
    !!! */
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 801d9fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 801d9fe:	0018      	movs	r0, r3
 801da00:	46bd      	mov	sp, r7
 801da02:	b004      	add	sp, #16
 801da04:	bd80      	pop	{r7, pc}

0801da06 <BSP_USBPD_PWR_VBUSDeInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 801da06:	b580      	push	{r7, lr}
 801da08:	b084      	sub	sp, #16
 801da0a:	af00      	add	r7, sp, #0
 801da0c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801da0e:	230b      	movs	r3, #11
 801da10:	425b      	negs	r3, r3
 801da12:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	2b01      	cmp	r3, #1
 801da18:	d902      	bls.n	801da20 <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801da1a:	2302      	movs	r3, #2
 801da1c:	425b      	negs	r3, r3
 801da1e:	60fb      	str	r3, [r7, #12]
  /* !!!
      BSP_PWR_VBUSDeInit is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSDeInit");
  return ret;
 801da20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 801da22:	0018      	movs	r0, r3
 801da24:	46bd      	mov	sp, r7
 801da26:	b004      	add	sp, #16
 801da28:	bd80      	pop	{r7, pc}

0801da2a <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 801da2a:	b580      	push	{r7, lr}
 801da2c:	b084      	sub	sp, #16
 801da2e:	af00      	add	r7, sp, #0
 801da30:	6078      	str	r0, [r7, #4]
 801da32:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801da34:	2300      	movs	r3, #0
 801da36:	60fb      	str	r3, [r7, #12]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 801da38:	687b      	ldr	r3, [r7, #4]
 801da3a:	2b01      	cmp	r3, #1
 801da3c:	d802      	bhi.n	801da44 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 801da3e:	683b      	ldr	r3, [r7, #0]
 801da40:	2b00      	cmp	r3, #0
 801da42:	d102      	bne.n	801da4a <BSP_USBPD_PWR_VBUSGetVoltage+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801da44:	2302      	movs	r3, #2
 801da46:	425b      	negs	r3, r3
 801da48:	60fb      	str	r3, [r7, #12]
  }
  *pVoltage = 0u;
 801da4a:	683b      	ldr	r3, [r7, #0]
 801da4c:	2200      	movs	r2, #0
 801da4e:	601a      	str	r2, [r3, #0]
  /* !!!
      BSP_PWR_VBUSGetVoltage is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  return ret;
 801da50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 801da52:	0018      	movs	r0, r3
 801da54:	46bd      	mov	sp, r7
 801da56:	b004      	add	sp, #16
 801da58:	bd80      	pop	{r7, pc}

0801da5a <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 801da5a:	b580      	push	{r7, lr}
 801da5c:	b084      	sub	sp, #16
 801da5e:	af00      	add	r7, sp, #0
 801da60:	6078      	str	r0, [r7, #4]
  UINT ret = UX_SUCCESS;
 801da62:	2300      	movs	r3, #0
 801da64:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN MX_USBX_Device_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END MX_USBX_Device_MEM_POOL */

  /* USER CODE BEGIN MX_USBX_Device_Init */
usb_init(memory_ptr);
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	0018      	movs	r0, r3
 801da6e:	f7e9 f943 	bl	8006cf8 <usb_init>
/* USER CODE END MX_USBX_Device_Init */

  return ret;
 801da72:	68fb      	ldr	r3, [r7, #12]
}
 801da74:	0018      	movs	r0, r3
 801da76:	46bd      	mov	sp, r7
 801da78:	b004      	add	sp, #16
 801da7a:	bd80      	pop	{r7, pc}

0801da7c <USBD_Get_Device_Framework_Speed>:
 * @param  Speed : HIGH or FULL SPEED flag
 * @param  length : length of HIGH or FULL SPEED array
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 801da7c:	b580      	push	{r7, lr}
 801da7e:	b084      	sub	sp, #16
 801da80:	af00      	add	r7, sp, #0
 801da82:	0002      	movs	r2, r0
 801da84:	6039      	str	r1, [r7, #0]
 801da86:	1dfb      	adds	r3, r7, #7
 801da88:	701a      	strb	r2, [r3, #0]
	uint8_t *pFrameWork = NULL;
 801da8a:	2300      	movs	r3, #0
 801da8c:	60fb      	str	r3, [r7, #12]
	/* USER CODE BEGIN Device_Framework0 */

	/* USER TAG BEGIN Device_Framework0 */

	if (USBD_FULL_SPEED == Speed)
 801da8e:	1dfb      	adds	r3, r7, #7
 801da90:	781b      	ldrb	r3, [r3, #0]
 801da92:	2b00      	cmp	r3, #0
 801da94:	d116      	bne.n	801dac4 <USBD_Get_Device_Framework_Speed+0x48>
	{
		USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 801da96:	4b19      	ldr	r3, [pc, #100]	@ (801dafc <USBD_Get_Device_Framework_Speed+0x80>)
 801da98:	6819      	ldr	r1, [r3, #0]
 801da9a:	1dfb      	adds	r3, r7, #7
 801da9c:	781b      	ldrb	r3, [r3, #0]
 801da9e:	4a18      	ldr	r2, [pc, #96]	@ (801db00 <USBD_Get_Device_Framework_Speed+0x84>)
 801daa0:	4818      	ldr	r0, [pc, #96]	@ (801db04 <USBD_Get_Device_Framework_Speed+0x88>)
 801daa2:	f000 f9fd 	bl	801dea0 <USBD_Device_Framework_Builder>
				UserClassInstance, Speed);

		/* Get the length of USBD_device_framework_full_speed */
		*Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 801daa6:	4a17      	ldr	r2, [pc, #92]	@ (801db04 <USBD_Get_Device_Framework_Speed+0x88>)
 801daa8:	2390      	movs	r3, #144	@ 0x90
 801daaa:	005b      	lsls	r3, r3, #1
 801daac:	58d2      	ldr	r2, [r2, r3]
 801daae:	4915      	ldr	r1, [pc, #84]	@ (801db04 <USBD_Get_Device_Framework_Speed+0x88>)
 801dab0:	2392      	movs	r3, #146	@ 0x92
 801dab2:	005b      	lsls	r3, r3, #1
 801dab4:	58cb      	ldr	r3, [r1, r3]
 801dab6:	18d2      	adds	r2, r2, r3
 801dab8:	683b      	ldr	r3, [r7, #0]
 801daba:	601a      	str	r2, [r3, #0]

		pFrameWork = pDevFrameWorkDesc_FS;
 801dabc:	4b0f      	ldr	r3, [pc, #60]	@ (801dafc <USBD_Get_Device_Framework_Speed+0x80>)
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	60fb      	str	r3, [r7, #12]
 801dac2:	e015      	b.n	801daf0 <USBD_Get_Device_Framework_Speed+0x74>
	}
	else
	{
		USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 801dac4:	4b10      	ldr	r3, [pc, #64]	@ (801db08 <USBD_Get_Device_Framework_Speed+0x8c>)
 801dac6:	6819      	ldr	r1, [r3, #0]
 801dac8:	1dfb      	adds	r3, r7, #7
 801daca:	781b      	ldrb	r3, [r3, #0]
 801dacc:	4a0c      	ldr	r2, [pc, #48]	@ (801db00 <USBD_Get_Device_Framework_Speed+0x84>)
 801dace:	480f      	ldr	r0, [pc, #60]	@ (801db0c <USBD_Get_Device_Framework_Speed+0x90>)
 801dad0:	f000 f9e6 	bl	801dea0 <USBD_Device_Framework_Builder>
				UserClassInstance, Speed);

		/* Get the length of USBD_device_framework_high_speed */
		*Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 801dad4:	4a0d      	ldr	r2, [pc, #52]	@ (801db0c <USBD_Get_Device_Framework_Speed+0x90>)
 801dad6:	2390      	movs	r3, #144	@ 0x90
 801dad8:	005b      	lsls	r3, r3, #1
 801dada:	58d2      	ldr	r2, [r2, r3]
 801dadc:	490b      	ldr	r1, [pc, #44]	@ (801db0c <USBD_Get_Device_Framework_Speed+0x90>)
 801dade:	2392      	movs	r3, #146	@ 0x92
 801dae0:	005b      	lsls	r3, r3, #1
 801dae2:	58cb      	ldr	r3, [r1, r3]
 801dae4:	18d2      	adds	r2, r2, r3
 801dae6:	683b      	ldr	r3, [r7, #0]
 801dae8:	601a      	str	r2, [r3, #0]

		pFrameWork = pDevFrameWorkDesc_HS;
 801daea:	4b07      	ldr	r3, [pc, #28]	@ (801db08 <USBD_Get_Device_Framework_Speed+0x8c>)
 801daec:	681b      	ldr	r3, [r3, #0]
 801daee:	60fb      	str	r3, [r7, #12]
	}
	/* USER CODE Device_Framework1 */

	/* USER CODE Device_Framework1 */
	return pFrameWork;
 801daf0:	68fb      	ldr	r3, [r7, #12]
}
 801daf2:	0018      	movs	r0, r3
 801daf4:	46bd      	mov	sp, r7
 801daf6:	b004      	add	sp, #16
 801daf8:	bd80      	pop	{r7, pc}
 801dafa:	46c0      	nop			@ (mov r8, r8)
 801dafc:	20000180 	.word	0x20000180
 801db00:	20000170 	.word	0x20000170
 801db04:	20011a68 	.word	0x20011a68
 801db08:	20000184 	.word	0x20000184
 801db0c:	20011b90 	.word	0x20011b90

0801db10 <USBD_Get_String_Framework>:
 *         Return the language_id_framework
 * @param  Length : Length of String_Framework
 * @retval Pointer to language_id_framework buffer
 */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 801db10:	b5b0      	push	{r4, r5, r7, lr}
 801db12:	b084      	sub	sp, #16
 801db14:	af00      	add	r7, sp, #0
 801db16:	6078      	str	r0, [r7, #4]
	uint16_t len = 0U;
 801db18:	250c      	movs	r5, #12
 801db1a:	197b      	adds	r3, r7, r5
 801db1c:	2200      	movs	r2, #0
 801db1e:	801a      	strh	r2, [r3, #0]
	uint8_t count = 0U;
 801db20:	240f      	movs	r4, #15
 801db22:	193b      	adds	r3, r7, r4
 801db24:	2200      	movs	r2, #0
 801db26:	701a      	strb	r2, [r3, #0]
	/* USER CODE String_Framework0 */

	/* USER CODE String_Framework0 */

	/* Set the Manufacturer language Id and index in USBD_string_framework */
	USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801db28:	193b      	adds	r3, r7, r4
 801db2a:	781b      	ldrb	r3, [r3, #0]
 801db2c:	193a      	adds	r2, r7, r4
 801db2e:	1c59      	adds	r1, r3, #1
 801db30:	7011      	strb	r1, [r2, #0]
 801db32:	001a      	movs	r2, r3
 801db34:	4b43      	ldr	r3, [pc, #268]	@ (801dc44 <USBD_Get_String_Framework+0x134>)
 801db36:	2109      	movs	r1, #9
 801db38:	5499      	strb	r1, [r3, r2]
	USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 801db3a:	193b      	adds	r3, r7, r4
 801db3c:	781b      	ldrb	r3, [r3, #0]
 801db3e:	193a      	adds	r2, r7, r4
 801db40:	1c59      	adds	r1, r3, #1
 801db42:	7011      	strb	r1, [r2, #0]
 801db44:	001a      	movs	r2, r3
 801db46:	4b3f      	ldr	r3, [pc, #252]	@ (801dc44 <USBD_Get_String_Framework+0x134>)
 801db48:	2104      	movs	r1, #4
 801db4a:	5499      	strb	r1, [r3, r2]
	USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 801db4c:	193b      	adds	r3, r7, r4
 801db4e:	781b      	ldrb	r3, [r3, #0]
 801db50:	193a      	adds	r2, r7, r4
 801db52:	1c59      	adds	r1, r3, #1
 801db54:	7011      	strb	r1, [r2, #0]
 801db56:	001a      	movs	r2, r3
 801db58:	4b3a      	ldr	r3, [pc, #232]	@ (801dc44 <USBD_Get_String_Framework+0x134>)
 801db5a:	2101      	movs	r1, #1
 801db5c:	5499      	strb	r1, [r3, r2]

	/* Set the Manufacturer string in string_framework */
	USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 801db5e:	193b      	adds	r3, r7, r4
 801db60:	781a      	ldrb	r2, [r3, #0]
 801db62:	4b38      	ldr	r3, [pc, #224]	@ (801dc44 <USBD_Get_String_Framework+0x134>)
 801db64:	18d1      	adds	r1, r2, r3
 801db66:	197a      	adds	r2, r7, r5
 801db68:	4b37      	ldr	r3, [pc, #220]	@ (801dc48 <USBD_Get_String_Framework+0x138>)
 801db6a:	0018      	movs	r0, r3
 801db6c:	f000 f93d 	bl	801ddea <USBD_Desc_GetString>

	/* Set the Product language Id and index in USBD_string_framework */
	count += len + 1;
 801db70:	197b      	adds	r3, r7, r5
 801db72:	881b      	ldrh	r3, [r3, #0]
 801db74:	b2da      	uxtb	r2, r3
 801db76:	193b      	adds	r3, r7, r4
 801db78:	781b      	ldrb	r3, [r3, #0]
 801db7a:	18d3      	adds	r3, r2, r3
 801db7c:	b2da      	uxtb	r2, r3
 801db7e:	193b      	adds	r3, r7, r4
 801db80:	3201      	adds	r2, #1
 801db82:	701a      	strb	r2, [r3, #0]
	USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801db84:	193b      	adds	r3, r7, r4
 801db86:	781b      	ldrb	r3, [r3, #0]
 801db88:	193a      	adds	r2, r7, r4
 801db8a:	1c59      	adds	r1, r3, #1
 801db8c:	7011      	strb	r1, [r2, #0]
 801db8e:	001a      	movs	r2, r3
 801db90:	4b2c      	ldr	r3, [pc, #176]	@ (801dc44 <USBD_Get_String_Framework+0x134>)
 801db92:	2109      	movs	r1, #9
 801db94:	5499      	strb	r1, [r3, r2]
	USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 801db96:	193b      	adds	r3, r7, r4
 801db98:	781b      	ldrb	r3, [r3, #0]
 801db9a:	193a      	adds	r2, r7, r4
 801db9c:	1c59      	adds	r1, r3, #1
 801db9e:	7011      	strb	r1, [r2, #0]
 801dba0:	001a      	movs	r2, r3
 801dba2:	4b28      	ldr	r3, [pc, #160]	@ (801dc44 <USBD_Get_String_Framework+0x134>)
 801dba4:	2104      	movs	r1, #4
 801dba6:	5499      	strb	r1, [r3, r2]
	USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 801dba8:	193b      	adds	r3, r7, r4
 801dbaa:	781b      	ldrb	r3, [r3, #0]
 801dbac:	193a      	adds	r2, r7, r4
 801dbae:	1c59      	adds	r1, r3, #1
 801dbb0:	7011      	strb	r1, [r2, #0]
 801dbb2:	001a      	movs	r2, r3
 801dbb4:	4b23      	ldr	r3, [pc, #140]	@ (801dc44 <USBD_Get_String_Framework+0x134>)
 801dbb6:	2102      	movs	r1, #2
 801dbb8:	5499      	strb	r1, [r3, r2]

	/* Set the Product string in USBD_string_framework */
	USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 801dbba:	193b      	adds	r3, r7, r4
 801dbbc:	781a      	ldrb	r2, [r3, #0]
 801dbbe:	4b21      	ldr	r3, [pc, #132]	@ (801dc44 <USBD_Get_String_Framework+0x134>)
 801dbc0:	18d1      	adds	r1, r2, r3
 801dbc2:	197a      	adds	r2, r7, r5
 801dbc4:	4b21      	ldr	r3, [pc, #132]	@ (801dc4c <USBD_Get_String_Framework+0x13c>)
 801dbc6:	0018      	movs	r0, r3
 801dbc8:	f000 f90f 	bl	801ddea <USBD_Desc_GetString>

	/* Set Serial language Id and index in string_framework */
	count += len + 1;
 801dbcc:	197b      	adds	r3, r7, r5
 801dbce:	881b      	ldrh	r3, [r3, #0]
 801dbd0:	b2da      	uxtb	r2, r3
 801dbd2:	193b      	adds	r3, r7, r4
 801dbd4:	781b      	ldrb	r3, [r3, #0]
 801dbd6:	18d3      	adds	r3, r2, r3
 801dbd8:	b2da      	uxtb	r2, r3
 801dbda:	193b      	adds	r3, r7, r4
 801dbdc:	3201      	adds	r2, #1
 801dbde:	701a      	strb	r2, [r3, #0]
	USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801dbe0:	193b      	adds	r3, r7, r4
 801dbe2:	781b      	ldrb	r3, [r3, #0]
 801dbe4:	0020      	movs	r0, r4
 801dbe6:	193a      	adds	r2, r7, r4
 801dbe8:	1c59      	adds	r1, r3, #1
 801dbea:	7011      	strb	r1, [r2, #0]
 801dbec:	001a      	movs	r2, r3
 801dbee:	4b15      	ldr	r3, [pc, #84]	@ (801dc44 <USBD_Get_String_Framework+0x134>)
 801dbf0:	2109      	movs	r1, #9
 801dbf2:	5499      	strb	r1, [r3, r2]
	USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 801dbf4:	183b      	adds	r3, r7, r0
 801dbf6:	781b      	ldrb	r3, [r3, #0]
 801dbf8:	183a      	adds	r2, r7, r0
 801dbfa:	1c59      	adds	r1, r3, #1
 801dbfc:	7011      	strb	r1, [r2, #0]
 801dbfe:	001a      	movs	r2, r3
 801dc00:	4b10      	ldr	r3, [pc, #64]	@ (801dc44 <USBD_Get_String_Framework+0x134>)
 801dc02:	2104      	movs	r1, #4
 801dc04:	5499      	strb	r1, [r3, r2]
	USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 801dc06:	183b      	adds	r3, r7, r0
 801dc08:	781b      	ldrb	r3, [r3, #0]
 801dc0a:	183a      	adds	r2, r7, r0
 801dc0c:	1c59      	adds	r1, r3, #1
 801dc0e:	7011      	strb	r1, [r2, #0]
 801dc10:	001a      	movs	r2, r3
 801dc12:	4b0c      	ldr	r3, [pc, #48]	@ (801dc44 <USBD_Get_String_Framework+0x134>)
 801dc14:	2103      	movs	r1, #3
 801dc16:	5499      	strb	r1, [r3, r2]

	/* Set the Serial number in USBD_string_framework */
	USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 801dc18:	183b      	adds	r3, r7, r0
 801dc1a:	781a      	ldrb	r2, [r3, #0]
 801dc1c:	4b09      	ldr	r3, [pc, #36]	@ (801dc44 <USBD_Get_String_Framework+0x134>)
 801dc1e:	18d1      	adds	r1, r2, r3
 801dc20:	197a      	adds	r2, r7, r5
 801dc22:	4b0b      	ldr	r3, [pc, #44]	@ (801dc50 <USBD_Get_String_Framework+0x140>)
 801dc24:	0018      	movs	r0, r3
 801dc26:	f000 f8e0 	bl	801ddea <USBD_Desc_GetString>
	/* USER CODE String_Framework1 */

	/* USER CODE String_Framework1 */

	/* Get the length of USBD_string_framework */
	*Length = strlen((const char *)USBD_string_framework);
 801dc2a:	4b06      	ldr	r3, [pc, #24]	@ (801dc44 <USBD_Get_String_Framework+0x134>)
 801dc2c:	0018      	movs	r0, r3
 801dc2e:	f7e8 fc01 	bl	8006434 <strlen>
 801dc32:	0002      	movs	r2, r0
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	601a      	str	r2, [r3, #0]

	return USBD_string_framework;
 801dc38:	4b02      	ldr	r3, [pc, #8]	@ (801dc44 <USBD_Get_String_Framework+0x134>)
}
 801dc3a:	0018      	movs	r0, r3
 801dc3c:	46bd      	mov	sp, r7
 801dc3e:	b004      	add	sp, #16
 801dc40:	bdb0      	pop	{r4, r5, r7, pc}
 801dc42:	46c0      	nop			@ (mov r8, r8)
 801dc44:	20011e48 	.word	0x20011e48
 801dc48:	0801f03c 	.word	0x0801f03c
 801dc4c:	0801f050 	.word	0x0801f050
 801dc50:	0801f068 	.word	0x0801f068

0801dc54 <USBD_Get_Language_Id_Framework>:
 *         Return the language_id_framework
 * @param  Length : Length of Language_Id_Framework
 * @retval Pointer to language_id_framework buffer
 */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 801dc54:	b580      	push	{r7, lr}
 801dc56:	b084      	sub	sp, #16
 801dc58:	af00      	add	r7, sp, #0
 801dc5a:	6078      	str	r0, [r7, #4]
	uint8_t count = 0U;
 801dc5c:	200f      	movs	r0, #15
 801dc5e:	183b      	adds	r3, r7, r0
 801dc60:	2200      	movs	r2, #0
 801dc62:	701a      	strb	r2, [r3, #0]

	/* Set the language Id in USBD_language_id_framework */
	USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801dc64:	183b      	adds	r3, r7, r0
 801dc66:	781b      	ldrb	r3, [r3, #0]
 801dc68:	183a      	adds	r2, r7, r0
 801dc6a:	1c59      	adds	r1, r3, #1
 801dc6c:	7011      	strb	r1, [r2, #0]
 801dc6e:	001a      	movs	r2, r3
 801dc70:	4b0b      	ldr	r3, [pc, #44]	@ (801dca0 <USBD_Get_Language_Id_Framework+0x4c>)
 801dc72:	2109      	movs	r1, #9
 801dc74:	5499      	strb	r1, [r3, r2]
	USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 801dc76:	183b      	adds	r3, r7, r0
 801dc78:	781b      	ldrb	r3, [r3, #0]
 801dc7a:	183a      	adds	r2, r7, r0
 801dc7c:	1c59      	adds	r1, r3, #1
 801dc7e:	7011      	strb	r1, [r2, #0]
 801dc80:	001a      	movs	r2, r3
 801dc82:	4b07      	ldr	r3, [pc, #28]	@ (801dca0 <USBD_Get_Language_Id_Framework+0x4c>)
 801dc84:	2104      	movs	r1, #4
 801dc86:	5499      	strb	r1, [r3, r2]

	/* Get the length of USBD_language_id_framework */
	*Length = strlen((const char *)USBD_language_id_framework);
 801dc88:	4b05      	ldr	r3, [pc, #20]	@ (801dca0 <USBD_Get_Language_Id_Framework+0x4c>)
 801dc8a:	0018      	movs	r0, r3
 801dc8c:	f7e8 fbd2 	bl	8006434 <strlen>
 801dc90:	0002      	movs	r2, r0
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	601a      	str	r2, [r3, #0]

	return USBD_language_id_framework;
 801dc96:	4b02      	ldr	r3, [pc, #8]	@ (801dca0 <USBD_Get_Language_Id_Framework+0x4c>)
}
 801dc98:	0018      	movs	r0, r3
 801dc9a:	46bd      	mov	sp, r7
 801dc9c:	b004      	add	sp, #16
 801dc9e:	bd80      	pop	{r7, pc}
 801dca0:	20011f48 	.word	0x20011f48

0801dca4 <USBD_Get_Interface_Number>:
 * @param  class_type : Device class type
 * @param  interface_type : Device interface type
 * @retval interface number
 */
uint16_t USBD_Get_Interface_Number(uint8_t class_type, uint8_t interface_type)
{
 801dca4:	b590      	push	{r4, r7, lr}
 801dca6:	b085      	sub	sp, #20
 801dca8:	af00      	add	r7, sp, #0
 801dcaa:	0002      	movs	r2, r0
 801dcac:	1dfb      	adds	r3, r7, #7
 801dcae:	701a      	strb	r2, [r3, #0]
 801dcb0:	1dbb      	adds	r3, r7, #6
 801dcb2:	1c0a      	adds	r2, r1, #0
 801dcb4:	701a      	strb	r2, [r3, #0]
	uint8_t itf_num = 0U;
 801dcb6:	230f      	movs	r3, #15
 801dcb8:	18fb      	adds	r3, r7, r3
 801dcba:	2200      	movs	r2, #0
 801dcbc:	701a      	strb	r2, [r3, #0]
	uint8_t idx = 0U;
 801dcbe:	210e      	movs	r1, #14
 801dcc0:	187b      	adds	r3, r7, r1
 801dcc2:	2200      	movs	r2, #0
 801dcc4:	701a      	strb	r2, [r3, #0]

	/* USER CODE BEGIN USBD_Get_Interface_Number0 */

	/* USER CODE BEGIN USBD_Get_Interface_Number0 */

	for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 801dcc6:	187b      	adds	r3, r7, r1
 801dcc8:	2200      	movs	r2, #0
 801dcca:	701a      	strb	r2, [r3, #0]
 801dccc:	e02a      	b.n	801dd24 <USBD_Get_Interface_Number+0x80>
	{
		if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 801dcce:	200e      	movs	r0, #14
 801dcd0:	183b      	adds	r3, r7, r0
 801dcd2:	781b      	ldrb	r3, [r3, #0]
 801dcd4:	4a1a      	ldr	r2, [pc, #104]	@ (801dd40 <USBD_Get_Interface_Number+0x9c>)
 801dcd6:	215c      	movs	r1, #92	@ 0x5c
 801dcd8:	434b      	muls	r3, r1
 801dcda:	18d3      	adds	r3, r2, r3
 801dcdc:	330c      	adds	r3, #12
 801dcde:	781b      	ldrb	r3, [r3, #0]
 801dce0:	1dfa      	adds	r2, r7, #7
 801dce2:	7812      	ldrb	r2, [r2, #0]
 801dce4:	429a      	cmp	r2, r3
 801dce6:	d117      	bne.n	801dd18 <USBD_Get_Interface_Number+0x74>
				(USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 801dce8:	183b      	adds	r3, r7, r0
 801dcea:	781b      	ldrb	r3, [r3, #0]
 801dcec:	4a14      	ldr	r2, [pc, #80]	@ (801dd40 <USBD_Get_Interface_Number+0x9c>)
 801dcee:	215c      	movs	r1, #92	@ 0x5c
 801dcf0:	434b      	muls	r3, r1
 801dcf2:	18d3      	adds	r3, r2, r3
 801dcf4:	3314      	adds	r3, #20
 801dcf6:	781b      	ldrb	r3, [r3, #0]
		if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 801dcf8:	1dba      	adds	r2, r7, #6
 801dcfa:	7812      	ldrb	r2, [r2, #0]
 801dcfc:	429a      	cmp	r2, r3
 801dcfe:	d10b      	bne.n	801dd18 <USBD_Get_Interface_Number+0x74>
		{
			itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 801dd00:	183b      	adds	r3, r7, r0
 801dd02:	781a      	ldrb	r2, [r3, #0]
 801dd04:	230f      	movs	r3, #15
 801dd06:	18fb      	adds	r3, r7, r3
 801dd08:	490d      	ldr	r1, [pc, #52]	@ (801dd40 <USBD_Get_Interface_Number+0x9c>)
 801dd0a:	205a      	movs	r0, #90	@ 0x5a
 801dd0c:	245c      	movs	r4, #92	@ 0x5c
 801dd0e:	4362      	muls	r2, r4
 801dd10:	188a      	adds	r2, r1, r2
 801dd12:	1812      	adds	r2, r2, r0
 801dd14:	7812      	ldrb	r2, [r2, #0]
 801dd16:	701a      	strb	r2, [r3, #0]
	for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 801dd18:	210e      	movs	r1, #14
 801dd1a:	187b      	adds	r3, r7, r1
 801dd1c:	781a      	ldrb	r2, [r3, #0]
 801dd1e:	187b      	adds	r3, r7, r1
 801dd20:	3201      	adds	r2, #1
 801dd22:	701a      	strb	r2, [r3, #0]
 801dd24:	230e      	movs	r3, #14
 801dd26:	18fb      	adds	r3, r7, r3
 801dd28:	781b      	ldrb	r3, [r3, #0]
 801dd2a:	2b02      	cmp	r3, #2
 801dd2c:	d9cf      	bls.n	801dcce <USBD_Get_Interface_Number+0x2a>

	/* USER CODE BEGIN USBD_Get_Interface_Number1 */

	/* USER CODE BEGIN USBD_Get_Interface_Number1 */

	return itf_num;
 801dd2e:	230f      	movs	r3, #15
 801dd30:	18fb      	adds	r3, r7, r3
 801dd32:	781b      	ldrb	r3, [r3, #0]
 801dd34:	b29b      	uxth	r3, r3
}
 801dd36:	0018      	movs	r0, r3
 801dd38:	46bd      	mov	sp, r7
 801dd3a:	b005      	add	sp, #20
 801dd3c:	bd90      	pop	{r4, r7, pc}
 801dd3e:	46c0      	nop			@ (mov r8, r8)
 801dd40:	20011a68 	.word	0x20011a68

0801dd44 <USBD_Get_Configuration_Number>:
 * @param  class_type : Device class type
 * @param  interface_type : Device interface type
 * @retval configuration number
 */
uint16_t USBD_Get_Configuration_Number(uint8_t class_type, uint8_t interface_type)
{
 801dd44:	b580      	push	{r7, lr}
 801dd46:	b084      	sub	sp, #16
 801dd48:	af00      	add	r7, sp, #0
 801dd4a:	0002      	movs	r2, r0
 801dd4c:	1dfb      	adds	r3, r7, #7
 801dd4e:	701a      	strb	r2, [r3, #0]
 801dd50:	1dbb      	adds	r3, r7, #6
 801dd52:	1c0a      	adds	r2, r1, #0
 801dd54:	701a      	strb	r2, [r3, #0]
	uint8_t cfg_num = 1U;
 801dd56:	210f      	movs	r1, #15
 801dd58:	187b      	adds	r3, r7, r1
 801dd5a:	2201      	movs	r2, #1
 801dd5c:	701a      	strb	r2, [r3, #0]

	/* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

	/* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

	return cfg_num;
 801dd5e:	187b      	adds	r3, r7, r1
 801dd60:	781b      	ldrb	r3, [r3, #0]
 801dd62:	b29b      	uxth	r3, r3
}
 801dd64:	0018      	movs	r0, r3
 801dd66:	46bd      	mov	sp, r7
 801dd68:	b004      	add	sp, #16
 801dd6a:	bd80      	pop	{r7, pc}

0801dd6c <USBD_HID_ReportDesc>:
 *         Return the device HID Report Descriptor
 * @param  hid_type : HID Device type
 * @retval Pointer to HID Report Descriptor buffer
 */
uint8_t *USBD_HID_ReportDesc(uint8_t hid_type)
{
 801dd6c:	b580      	push	{r7, lr}
 801dd6e:	b084      	sub	sp, #16
 801dd70:	af00      	add	r7, sp, #0
 801dd72:	0002      	movs	r2, r0
 801dd74:	1dfb      	adds	r3, r7, #7
 801dd76:	701a      	strb	r2, [r3, #0]
	uint8_t *pHidReportDesc = NULL;
 801dd78:	2300      	movs	r3, #0
 801dd7a:	60fb      	str	r3, [r7, #12]

	/* USER CODE HidReportDesc0 */

	/* USER CODE HidReportDesc0 */

	switch(hid_type)
 801dd7c:	1dfb      	adds	r3, r7, #7
 801dd7e:	781b      	ldrb	r3, [r3, #0]
 801dd80:	2b01      	cmp	r3, #1
 801dd82:	d004      	beq.n	801dd8e <USBD_HID_ReportDesc+0x22>
 801dd84:	2b02      	cmp	r3, #2
 801dd86:	d105      	bne.n	801dd94 <USBD_HID_ReportDesc+0x28>
	{
	case INTERFACE_HID_MOUSE:
		pHidReportDesc = USBD_HID_MOUSE_ReportDesc;
 801dd88:	4b05      	ldr	r3, [pc, #20]	@ (801dda0 <USBD_HID_ReportDesc+0x34>)
 801dd8a:	60fb      	str	r3, [r7, #12]
		break;
 801dd8c:	e003      	b.n	801dd96 <USBD_HID_ReportDesc+0x2a>

	case INTERFACE_HID_KEYBOARD:
		pHidReportDesc = USBD_HID_KEYBOARD_ReportDesc;
 801dd8e:	4b05      	ldr	r3, [pc, #20]	@ (801dda4 <USBD_HID_ReportDesc+0x38>)
 801dd90:	60fb      	str	r3, [r7, #12]
		break;
 801dd92:	e000      	b.n	801dd96 <USBD_HID_ReportDesc+0x2a>

	default:
		break;
 801dd94:	46c0      	nop			@ (mov r8, r8)

	/* USER CODE HidReportDesc1 */

	/* USER CODE HidReportDesc1 */

	return pHidReportDesc;
 801dd96:	68fb      	ldr	r3, [r7, #12]
}
 801dd98:	0018      	movs	r0, r3
 801dd9a:	46bd      	mov	sp, r7
 801dd9c:	b004      	add	sp, #16
 801dd9e:	bd80      	pop	{r7, pc}
 801dda0:	20000188 	.word	0x20000188
 801dda4:	200001d4 	.word	0x200001d4

0801dda8 <USBD_HID_ReportDesc_length>:
 *         Return the device HID Report Descriptor
 * @param  hid_type : HID Device type
 * @retval Size of HID Report Descriptor buffer
 */
uint16_t USBD_HID_ReportDesc_length(uint8_t hid_type)
{
 801dda8:	b580      	push	{r7, lr}
 801ddaa:	b084      	sub	sp, #16
 801ddac:	af00      	add	r7, sp, #0
 801ddae:	0002      	movs	r2, r0
 801ddb0:	1dfb      	adds	r3, r7, #7
 801ddb2:	701a      	strb	r2, [r3, #0]
	uint16_t ReportDesc_Size = 0;
 801ddb4:	210e      	movs	r1, #14
 801ddb6:	187b      	adds	r3, r7, r1
 801ddb8:	2200      	movs	r2, #0
 801ddba:	801a      	strh	r2, [r3, #0]

	/* USER CODE ReportDesc_Size0 */

	/* USER CODE ReportDesc_Size0 */

	switch(hid_type)
 801ddbc:	1dfb      	adds	r3, r7, #7
 801ddbe:	781b      	ldrb	r3, [r3, #0]
 801ddc0:	2b01      	cmp	r3, #1
 801ddc2:	d005      	beq.n	801ddd0 <USBD_HID_ReportDesc_length+0x28>
 801ddc4:	2b02      	cmp	r3, #2
 801ddc6:	d108      	bne.n	801ddda <USBD_HID_ReportDesc_length+0x32>
	{
	case INTERFACE_HID_MOUSE:
		ReportDesc_Size = sizeof(USBD_HID_MOUSE_ReportDesc);
 801ddc8:	187b      	adds	r3, r7, r1
 801ddca:	224a      	movs	r2, #74	@ 0x4a
 801ddcc:	801a      	strh	r2, [r3, #0]
		break;
 801ddce:	e005      	b.n	801dddc <USBD_HID_ReportDesc_length+0x34>

	case INTERFACE_HID_KEYBOARD:
		ReportDesc_Size = sizeof(USBD_HID_KEYBOARD_ReportDesc);
 801ddd0:	230e      	movs	r3, #14
 801ddd2:	18fb      	adds	r3, r7, r3
 801ddd4:	222d      	movs	r2, #45	@ 0x2d
 801ddd6:	801a      	strh	r2, [r3, #0]
		break;
 801ddd8:	e000      	b.n	801dddc <USBD_HID_ReportDesc_length+0x34>

	default:
		break;
 801ddda:	46c0      	nop			@ (mov r8, r8)

	/* USER CODE ReportDesc_Size1 */

	/* USER CODE ReportDesc_Size1 */

	return ReportDesc_Size;
 801dddc:	230e      	movs	r3, #14
 801ddde:	18fb      	adds	r3, r7, r3
 801dde0:	881b      	ldrh	r3, [r3, #0]
}
 801dde2:	0018      	movs	r0, r3
 801dde4:	46bd      	mov	sp, r7
 801dde6:	b004      	add	sp, #16
 801dde8:	bd80      	pop	{r7, pc}

0801ddea <USBD_Desc_GetString>:
 * @param  Unicode : Formatted string buffer (Unicode)
 * @param  len : descriptor length
 * @retval None
 */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801ddea:	b590      	push	{r4, r7, lr}
 801ddec:	b087      	sub	sp, #28
 801ddee:	af00      	add	r7, sp, #0
 801ddf0:	60f8      	str	r0, [r7, #12]
 801ddf2:	60b9      	str	r1, [r7, #8]
 801ddf4:	607a      	str	r2, [r7, #4]
	uint8_t idx = 0U;
 801ddf6:	2417      	movs	r4, #23
 801ddf8:	193b      	adds	r3, r7, r4
 801ddfa:	2200      	movs	r2, #0
 801ddfc:	701a      	strb	r2, [r3, #0]
	uint8_t *pdesc;

	if (desc == NULL)
 801ddfe:	68fb      	ldr	r3, [r7, #12]
 801de00:	2b00      	cmp	r3, #0
 801de02:	d029      	beq.n	801de58 <USBD_Desc_GetString+0x6e>
	{
		return;
	}

	pdesc = desc;
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	613b      	str	r3, [r7, #16]
	*len = (uint16_t)USBD_Desc_GetLen(pdesc);
 801de08:	693b      	ldr	r3, [r7, #16]
 801de0a:	0018      	movs	r0, r3
 801de0c:	f000 f828 	bl	801de60 <USBD_Desc_GetLen>
 801de10:	0003      	movs	r3, r0
 801de12:	001a      	movs	r2, r3
 801de14:	687b      	ldr	r3, [r7, #4]
 801de16:	801a      	strh	r2, [r3, #0]

	unicode[idx++] = *(uint8_t *)len;
 801de18:	193b      	adds	r3, r7, r4
 801de1a:	781b      	ldrb	r3, [r3, #0]
 801de1c:	193a      	adds	r2, r7, r4
 801de1e:	1c59      	adds	r1, r3, #1
 801de20:	7011      	strb	r1, [r2, #0]
 801de22:	001a      	movs	r2, r3
 801de24:	68bb      	ldr	r3, [r7, #8]
 801de26:	189b      	adds	r3, r3, r2
 801de28:	687a      	ldr	r2, [r7, #4]
 801de2a:	7812      	ldrb	r2, [r2, #0]
 801de2c:	701a      	strb	r2, [r3, #0]

	while (*pdesc != (uint8_t)'\0')
 801de2e:	e00e      	b.n	801de4e <USBD_Desc_GetString+0x64>
	{
		unicode[idx++] = *pdesc;
 801de30:	2217      	movs	r2, #23
 801de32:	18bb      	adds	r3, r7, r2
 801de34:	781b      	ldrb	r3, [r3, #0]
 801de36:	18ba      	adds	r2, r7, r2
 801de38:	1c59      	adds	r1, r3, #1
 801de3a:	7011      	strb	r1, [r2, #0]
 801de3c:	001a      	movs	r2, r3
 801de3e:	68bb      	ldr	r3, [r7, #8]
 801de40:	189b      	adds	r3, r3, r2
 801de42:	693a      	ldr	r2, [r7, #16]
 801de44:	7812      	ldrb	r2, [r2, #0]
 801de46:	701a      	strb	r2, [r3, #0]
		pdesc++;
 801de48:	693b      	ldr	r3, [r7, #16]
 801de4a:	3301      	adds	r3, #1
 801de4c:	613b      	str	r3, [r7, #16]
	while (*pdesc != (uint8_t)'\0')
 801de4e:	693b      	ldr	r3, [r7, #16]
 801de50:	781b      	ldrb	r3, [r3, #0]
 801de52:	2b00      	cmp	r3, #0
 801de54:	d1ec      	bne.n	801de30 <USBD_Desc_GetString+0x46>
 801de56:	e000      	b.n	801de5a <USBD_Desc_GetString+0x70>
		return;
 801de58:	46c0      	nop			@ (mov r8, r8)
	}
}
 801de5a:	46bd      	mov	sp, r7
 801de5c:	b007      	add	sp, #28
 801de5e:	bd90      	pop	{r4, r7, pc}

0801de60 <USBD_Desc_GetLen>:
 *         return the string length
 * @param  buf : pointer to the ASCII string buffer
 * @retval string length
 */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 801de60:	b580      	push	{r7, lr}
 801de62:	b084      	sub	sp, #16
 801de64:	af00      	add	r7, sp, #0
 801de66:	6078      	str	r0, [r7, #4]
	uint8_t  len = 0U;
 801de68:	230f      	movs	r3, #15
 801de6a:	18fb      	adds	r3, r7, r3
 801de6c:	2200      	movs	r2, #0
 801de6e:	701a      	strb	r2, [r3, #0]
	uint8_t *pbuff = buf;
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	60bb      	str	r3, [r7, #8]

	while (*pbuff != (uint8_t)'\0')
 801de74:	e008      	b.n	801de88 <USBD_Desc_GetLen+0x28>
	{
		len++;
 801de76:	210f      	movs	r1, #15
 801de78:	187b      	adds	r3, r7, r1
 801de7a:	781a      	ldrb	r2, [r3, #0]
 801de7c:	187b      	adds	r3, r7, r1
 801de7e:	3201      	adds	r2, #1
 801de80:	701a      	strb	r2, [r3, #0]
		pbuff++;
 801de82:	68bb      	ldr	r3, [r7, #8]
 801de84:	3301      	adds	r3, #1
 801de86:	60bb      	str	r3, [r7, #8]
	while (*pbuff != (uint8_t)'\0')
 801de88:	68bb      	ldr	r3, [r7, #8]
 801de8a:	781b      	ldrb	r3, [r3, #0]
 801de8c:	2b00      	cmp	r3, #0
 801de8e:	d1f2      	bne.n	801de76 <USBD_Desc_GetLen+0x16>
	}

	return len;
 801de90:	230f      	movs	r3, #15
 801de92:	18fb      	adds	r3, r7, r3
 801de94:	781b      	ldrb	r3, [r3, #0]
}
 801de96:	0018      	movs	r0, r3
 801de98:	46bd      	mov	sp, r7
 801de9a:	b004      	add	sp, #16
 801de9c:	bd80      	pop	{r7, pc}
	...

0801dea0 <USBD_Device_Framework_Builder>:
 */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
		uint8_t *pDevFrameWorkDesc,
		uint8_t *UserClassInstance,
		uint8_t Speed)
{
 801dea0:	b580      	push	{r7, lr}
 801dea2:	b088      	sub	sp, #32
 801dea4:	af02      	add	r7, sp, #8
 801dea6:	60f8      	str	r0, [r7, #12]
 801dea8:	60b9      	str	r1, [r7, #8]
 801deaa:	607a      	str	r2, [r7, #4]
 801deac:	001a      	movs	r2, r3
 801deae:	1cfb      	adds	r3, r7, #3
 801deb0:	701a      	strb	r2, [r3, #0]
	static USBD_DeviceDescTypedef   *pDevDesc;
	static USBD_DevQualiDescTypedef *pDevQualDesc;
	uint8_t Idx_Instance = 0U;
 801deb2:	2317      	movs	r3, #23
 801deb4:	18fb      	adds	r3, r7, r3
 801deb6:	2200      	movs	r2, #0
 801deb8:	701a      	strb	r2, [r3, #0]

	/* Set Dev and conf descriptors size to 0 */
	pdev->CurrConfDescSz = 0U;
 801deba:	68fa      	ldr	r2, [r7, #12]
 801debc:	2392      	movs	r3, #146	@ 0x92
 801debe:	005b      	lsls	r3, r3, #1
 801dec0:	2100      	movs	r1, #0
 801dec2:	50d1      	str	r1, [r2, r3]
	pdev->CurrDevDescSz = 0U;
 801dec4:	68fa      	ldr	r2, [r7, #12]
 801dec6:	2390      	movs	r3, #144	@ 0x90
 801dec8:	005b      	lsls	r3, r3, #1
 801deca:	2100      	movs	r1, #0
 801decc:	50d1      	str	r1, [r2, r3]

	/* Set the pointer to the device descriptor area*/
	pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 801dece:	4b89      	ldr	r3, [pc, #548]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801ded0:	68ba      	ldr	r2, [r7, #8]
 801ded2:	601a      	str	r2, [r3, #0]

	/* Start building the generic device descriptor common part */
	pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 801ded4:	4b87      	ldr	r3, [pc, #540]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801ded6:	681b      	ldr	r3, [r3, #0]
 801ded8:	2212      	movs	r2, #18
 801deda:	701a      	strb	r2, [r3, #0]
	pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 801dedc:	4b85      	ldr	r3, [pc, #532]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801dede:	681b      	ldr	r3, [r3, #0]
 801dee0:	2201      	movs	r2, #1
 801dee2:	705a      	strb	r2, [r3, #1]
	pDevDesc->bcdUSB = USB_BCDUSB;
 801dee4:	4b83      	ldr	r3, [pc, #524]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801dee6:	681b      	ldr	r3, [r3, #0]
 801dee8:	789a      	ldrb	r2, [r3, #2]
 801deea:	2100      	movs	r1, #0
 801deec:	400a      	ands	r2, r1
 801deee:	709a      	strb	r2, [r3, #2]
 801def0:	78da      	ldrb	r2, [r3, #3]
 801def2:	2100      	movs	r1, #0
 801def4:	400a      	ands	r2, r1
 801def6:	1c11      	adds	r1, r2, #0
 801def8:	2202      	movs	r2, #2
 801defa:	430a      	orrs	r2, r1
 801defc:	70da      	strb	r2, [r3, #3]
	pDevDesc->bDeviceClass = 0x00;
 801defe:	4b7d      	ldr	r3, [pc, #500]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801df00:	681b      	ldr	r3, [r3, #0]
 801df02:	2200      	movs	r2, #0
 801df04:	711a      	strb	r2, [r3, #4]
	pDevDesc->bDeviceSubClass = 0x00;
 801df06:	4b7b      	ldr	r3, [pc, #492]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801df08:	681b      	ldr	r3, [r3, #0]
 801df0a:	2200      	movs	r2, #0
 801df0c:	715a      	strb	r2, [r3, #5]
	pDevDesc->bDeviceProtocol = 0x00;
 801df0e:	4b79      	ldr	r3, [pc, #484]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801df10:	681b      	ldr	r3, [r3, #0]
 801df12:	2200      	movs	r2, #0
 801df14:	719a      	strb	r2, [r3, #6]
	pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 801df16:	4b77      	ldr	r3, [pc, #476]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801df18:	681b      	ldr	r3, [r3, #0]
 801df1a:	2240      	movs	r2, #64	@ 0x40
 801df1c:	71da      	strb	r2, [r3, #7]
	pDevDesc->idVendor = USBD_VID;
 801df1e:	4b75      	ldr	r3, [pc, #468]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801df20:	681b      	ldr	r3, [r3, #0]
 801df22:	7a1a      	ldrb	r2, [r3, #8]
 801df24:	2100      	movs	r1, #0
 801df26:	400a      	ands	r2, r1
 801df28:	1c11      	adds	r1, r2, #0
 801df2a:	227d      	movs	r2, #125	@ 0x7d
 801df2c:	4252      	negs	r2, r2
 801df2e:	430a      	orrs	r2, r1
 801df30:	721a      	strb	r2, [r3, #8]
 801df32:	7a5a      	ldrb	r2, [r3, #9]
 801df34:	2100      	movs	r1, #0
 801df36:	400a      	ands	r2, r1
 801df38:	1c11      	adds	r1, r2, #0
 801df3a:	2204      	movs	r2, #4
 801df3c:	430a      	orrs	r2, r1
 801df3e:	725a      	strb	r2, [r3, #9]
	pDevDesc->idProduct = USBD_PID;
 801df40:	4b6c      	ldr	r3, [pc, #432]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801df42:	681b      	ldr	r3, [r3, #0]
 801df44:	7a9a      	ldrb	r2, [r3, #10]
 801df46:	2100      	movs	r1, #0
 801df48:	400a      	ands	r2, r1
 801df4a:	1c11      	adds	r1, r2, #0
 801df4c:	2250      	movs	r2, #80	@ 0x50
 801df4e:	430a      	orrs	r2, r1
 801df50:	729a      	strb	r2, [r3, #10]
 801df52:	7ada      	ldrb	r2, [r3, #11]
 801df54:	2100      	movs	r1, #0
 801df56:	400a      	ands	r2, r1
 801df58:	1c11      	adds	r1, r2, #0
 801df5a:	2257      	movs	r2, #87	@ 0x57
 801df5c:	430a      	orrs	r2, r1
 801df5e:	72da      	strb	r2, [r3, #11]
	pDevDesc->bcdDevice = 0x0200;
 801df60:	4b64      	ldr	r3, [pc, #400]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801df62:	681b      	ldr	r3, [r3, #0]
 801df64:	7b1a      	ldrb	r2, [r3, #12]
 801df66:	2100      	movs	r1, #0
 801df68:	400a      	ands	r2, r1
 801df6a:	731a      	strb	r2, [r3, #12]
 801df6c:	7b5a      	ldrb	r2, [r3, #13]
 801df6e:	2100      	movs	r1, #0
 801df70:	400a      	ands	r2, r1
 801df72:	1c11      	adds	r1, r2, #0
 801df74:	2202      	movs	r2, #2
 801df76:	430a      	orrs	r2, r1
 801df78:	735a      	strb	r2, [r3, #13]
	pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 801df7a:	4b5e      	ldr	r3, [pc, #376]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801df7c:	681b      	ldr	r3, [r3, #0]
 801df7e:	2201      	movs	r2, #1
 801df80:	739a      	strb	r2, [r3, #14]
	pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 801df82:	4b5c      	ldr	r3, [pc, #368]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801df84:	681b      	ldr	r3, [r3, #0]
 801df86:	2202      	movs	r2, #2
 801df88:	73da      	strb	r2, [r3, #15]
	pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 801df8a:	4b5a      	ldr	r3, [pc, #360]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801df8c:	681b      	ldr	r3, [r3, #0]
 801df8e:	2203      	movs	r2, #3
 801df90:	741a      	strb	r2, [r3, #16]
	pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 801df92:	4b58      	ldr	r3, [pc, #352]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801df94:	681b      	ldr	r3, [r3, #0]
 801df96:	2201      	movs	r2, #1
 801df98:	745a      	strb	r2, [r3, #17]
	pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 801df9a:	68fa      	ldr	r2, [r7, #12]
 801df9c:	2390      	movs	r3, #144	@ 0x90
 801df9e:	005b      	lsls	r3, r3, #1
 801dfa0:	58d3      	ldr	r3, [r2, r3]
 801dfa2:	3312      	adds	r3, #18
 801dfa4:	0019      	movs	r1, r3
 801dfa6:	68fa      	ldr	r2, [r7, #12]
 801dfa8:	2390      	movs	r3, #144	@ 0x90
 801dfaa:	005b      	lsls	r3, r3, #1
 801dfac:	50d1      	str	r1, [r2, r3]

	/* Check if USBx is in high speed mode to add qualifier descriptor */
	if (Speed == USBD_HIGH_SPEED)
 801dfae:	1cfb      	adds	r3, r7, #3
 801dfb0:	781b      	ldrb	r3, [r3, #0]
 801dfb2:	2b01      	cmp	r3, #1
 801dfb4:	d172      	bne.n	801e09c <USBD_Device_Framework_Builder+0x1fc>
	{
		pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 801dfb6:	68fa      	ldr	r2, [r7, #12]
 801dfb8:	2390      	movs	r3, #144	@ 0x90
 801dfba:	005b      	lsls	r3, r3, #1
 801dfbc:	58d3      	ldr	r3, [r2, r3]
 801dfbe:	68ba      	ldr	r2, [r7, #8]
 801dfc0:	18d2      	adds	r2, r2, r3
 801dfc2:	4b4d      	ldr	r3, [pc, #308]	@ (801e0f8 <USBD_Device_Framework_Builder+0x258>)
 801dfc4:	601a      	str	r2, [r3, #0]
		pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 801dfc6:	4b4c      	ldr	r3, [pc, #304]	@ (801e0f8 <USBD_Device_Framework_Builder+0x258>)
 801dfc8:	681b      	ldr	r3, [r3, #0]
 801dfca:	220a      	movs	r2, #10
 801dfcc:	701a      	strb	r2, [r3, #0]
		pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 801dfce:	4b4a      	ldr	r3, [pc, #296]	@ (801e0f8 <USBD_Device_Framework_Builder+0x258>)
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	2206      	movs	r2, #6
 801dfd4:	705a      	strb	r2, [r3, #1]
		pDevQualDesc->bcdDevice = 0x0200;
 801dfd6:	4b48      	ldr	r3, [pc, #288]	@ (801e0f8 <USBD_Device_Framework_Builder+0x258>)
 801dfd8:	681b      	ldr	r3, [r3, #0]
 801dfda:	789a      	ldrb	r2, [r3, #2]
 801dfdc:	2100      	movs	r1, #0
 801dfde:	400a      	ands	r2, r1
 801dfe0:	709a      	strb	r2, [r3, #2]
 801dfe2:	78da      	ldrb	r2, [r3, #3]
 801dfe4:	2100      	movs	r1, #0
 801dfe6:	400a      	ands	r2, r1
 801dfe8:	1c11      	adds	r1, r2, #0
 801dfea:	2202      	movs	r2, #2
 801dfec:	430a      	orrs	r2, r1
 801dfee:	70da      	strb	r2, [r3, #3]
		pDevQualDesc->Class = 0x00;
 801dff0:	4b41      	ldr	r3, [pc, #260]	@ (801e0f8 <USBD_Device_Framework_Builder+0x258>)
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	2200      	movs	r2, #0
 801dff6:	711a      	strb	r2, [r3, #4]
		pDevQualDesc->SubClass = 0x00;
 801dff8:	4b3f      	ldr	r3, [pc, #252]	@ (801e0f8 <USBD_Device_Framework_Builder+0x258>)
 801dffa:	681b      	ldr	r3, [r3, #0]
 801dffc:	2200      	movs	r2, #0
 801dffe:	715a      	strb	r2, [r3, #5]
		pDevQualDesc->Protocol = 0x00;
 801e000:	4b3d      	ldr	r3, [pc, #244]	@ (801e0f8 <USBD_Device_Framework_Builder+0x258>)
 801e002:	681b      	ldr	r3, [r3, #0]
 801e004:	2200      	movs	r2, #0
 801e006:	719a      	strb	r2, [r3, #6]
		pDevQualDesc->bMaxPacketSize = 0x40;
 801e008:	4b3b      	ldr	r3, [pc, #236]	@ (801e0f8 <USBD_Device_Framework_Builder+0x258>)
 801e00a:	681b      	ldr	r3, [r3, #0]
 801e00c:	2240      	movs	r2, #64	@ 0x40
 801e00e:	71da      	strb	r2, [r3, #7]
		pDevQualDesc->bNumConfigurations = 0x01;
 801e010:	4b39      	ldr	r3, [pc, #228]	@ (801e0f8 <USBD_Device_Framework_Builder+0x258>)
 801e012:	681b      	ldr	r3, [r3, #0]
 801e014:	2201      	movs	r2, #1
 801e016:	721a      	strb	r2, [r3, #8]
		pDevQualDesc->bReserved = 0x00;
 801e018:	4b37      	ldr	r3, [pc, #220]	@ (801e0f8 <USBD_Device_Framework_Builder+0x258>)
 801e01a:	681b      	ldr	r3, [r3, #0]
 801e01c:	2200      	movs	r2, #0
 801e01e:	725a      	strb	r2, [r3, #9]
		pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 801e020:	68fa      	ldr	r2, [r7, #12]
 801e022:	2390      	movs	r3, #144	@ 0x90
 801e024:	005b      	lsls	r3, r3, #1
 801e026:	58d3      	ldr	r3, [r2, r3]
 801e028:	330a      	adds	r3, #10
 801e02a:	0019      	movs	r1, r3
 801e02c:	68fa      	ldr	r2, [r7, #12]
 801e02e:	2390      	movs	r3, #144	@ 0x90
 801e030:	005b      	lsls	r3, r3, #1
 801e032:	50d1      	str	r1, [r2, r3]
	}

	/* Build the device framework */
	while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 801e034:	e032      	b.n	801e09c <USBD_Device_Framework_Builder+0x1fc>
	{
		if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 801e036:	68fb      	ldr	r3, [r7, #12]
 801e038:	685b      	ldr	r3, [r3, #4]
 801e03a:	2b02      	cmp	r3, #2
 801e03c:	d828      	bhi.n	801e090 <USBD_Device_Framework_Builder+0x1f0>
				(pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 801e03e:	68fb      	ldr	r3, [r7, #12]
 801e040:	689b      	ldr	r3, [r3, #8]
		if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 801e042:	2b02      	cmp	r3, #2
 801e044:	d824      	bhi.n	801e090 <USBD_Device_Framework_Builder+0x1f0>
				(UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 801e046:	2117      	movs	r1, #23
 801e048:	187b      	adds	r3, r7, r1
 801e04a:	781b      	ldrb	r3, [r3, #0]
 801e04c:	687a      	ldr	r2, [r7, #4]
 801e04e:	18d3      	adds	r3, r2, r3
 801e050:	781b      	ldrb	r3, [r3, #0]
				(pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 801e052:	2b00      	cmp	r3, #0
 801e054:	d01c      	beq.n	801e090 <USBD_Device_Framework_Builder+0x1f0>
		{
			/* Call the composite class builder */
			(void)USBD_FrameWork_AddClass(pdev,
					(USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 801e056:	187b      	adds	r3, r7, r1
 801e058:	781b      	ldrb	r3, [r3, #0]
 801e05a:	687a      	ldr	r2, [r7, #4]
 801e05c:	18d3      	adds	r3, r2, r3
			(void)USBD_FrameWork_AddClass(pdev,
 801e05e:	7819      	ldrb	r1, [r3, #0]
					0, Speed,
					(pDevFrameWorkDesc + pdev->CurrDevDescSz));
 801e060:	68fa      	ldr	r2, [r7, #12]
 801e062:	2390      	movs	r3, #144	@ 0x90
 801e064:	005b      	lsls	r3, r3, #1
 801e066:	58d3      	ldr	r3, [r2, r3]
			(void)USBD_FrameWork_AddClass(pdev,
 801e068:	68ba      	ldr	r2, [r7, #8]
 801e06a:	18d3      	adds	r3, r2, r3
 801e06c:	1cfa      	adds	r2, r7, #3
 801e06e:	7812      	ldrb	r2, [r2, #0]
 801e070:	68f8      	ldr	r0, [r7, #12]
 801e072:	9300      	str	r3, [sp, #0]
 801e074:	0013      	movs	r3, r2
 801e076:	2200      	movs	r2, #0
 801e078:	f000 f840 	bl	801e0fc <USBD_FrameWork_AddClass>

			/* Increment the ClassId for the next occurrence */
			pdev->classId ++;
 801e07c:	68fb      	ldr	r3, [r7, #12]
 801e07e:	685b      	ldr	r3, [r3, #4]
 801e080:	1c5a      	adds	r2, r3, #1
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	605a      	str	r2, [r3, #4]
			pdev->NumClasses ++;
 801e086:	68fb      	ldr	r3, [r7, #12]
 801e088:	689b      	ldr	r3, [r3, #8]
 801e08a:	1c5a      	adds	r2, r3, #1
 801e08c:	68fb      	ldr	r3, [r7, #12]
 801e08e:	609a      	str	r2, [r3, #8]
		}

		Idx_Instance++;
 801e090:	2117      	movs	r1, #23
 801e092:	187b      	adds	r3, r7, r1
 801e094:	781a      	ldrb	r2, [r3, #0]
 801e096:	187b      	adds	r3, r7, r1
 801e098:	3201      	adds	r2, #1
 801e09a:	701a      	strb	r2, [r3, #0]
	while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 801e09c:	2317      	movs	r3, #23
 801e09e:	18fb      	adds	r3, r7, r3
 801e0a0:	781b      	ldrb	r3, [r3, #0]
 801e0a2:	2b02      	cmp	r3, #2
 801e0a4:	d9c7      	bls.n	801e036 <USBD_Device_Framework_Builder+0x196>
	}

	/* Check if there is a composite class and update device class */
	if (pdev->NumClasses > 1)
 801e0a6:	68fb      	ldr	r3, [r7, #12]
 801e0a8:	689b      	ldr	r3, [r3, #8]
 801e0aa:	2b01      	cmp	r3, #1
 801e0ac:	d90c      	bls.n	801e0c8 <USBD_Device_Framework_Builder+0x228>
	{
		pDevDesc->bDeviceClass = 0xEF;
 801e0ae:	4b11      	ldr	r3, [pc, #68]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	22ef      	movs	r2, #239	@ 0xef
 801e0b4:	711a      	strb	r2, [r3, #4]
		pDevDesc->bDeviceSubClass = 0x02;
 801e0b6:	4b0f      	ldr	r3, [pc, #60]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	2202      	movs	r2, #2
 801e0bc:	715a      	strb	r2, [r3, #5]
		pDevDesc->bDeviceProtocol = 0x01;
 801e0be:	4b0d      	ldr	r3, [pc, #52]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	2201      	movs	r2, #1
 801e0c4:	719a      	strb	r2, [r3, #6]
 801e0c6:	e00f      	b.n	801e0e8 <USBD_Device_Framework_Builder+0x248>
	}
	else
	{
		/* Check if the CDC ACM class is set and update device class */
		if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	781b      	ldrb	r3, [r3, #0]
 801e0cc:	2b02      	cmp	r3, #2
 801e0ce:	d10b      	bne.n	801e0e8 <USBD_Device_Framework_Builder+0x248>
		{
			pDevDesc->bDeviceClass = 0x02;
 801e0d0:	4b08      	ldr	r3, [pc, #32]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801e0d2:	681b      	ldr	r3, [r3, #0]
 801e0d4:	2202      	movs	r2, #2
 801e0d6:	711a      	strb	r2, [r3, #4]
			pDevDesc->bDeviceSubClass = 0x02;
 801e0d8:	4b06      	ldr	r3, [pc, #24]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801e0da:	681b      	ldr	r3, [r3, #0]
 801e0dc:	2202      	movs	r2, #2
 801e0de:	715a      	strb	r2, [r3, #5]
			pDevDesc->bDeviceProtocol = 0x00;
 801e0e0:	4b04      	ldr	r3, [pc, #16]	@ (801e0f4 <USBD_Device_Framework_Builder+0x254>)
 801e0e2:	681b      	ldr	r3, [r3, #0]
 801e0e4:	2200      	movs	r2, #0
 801e0e6:	719a      	strb	r2, [r3, #6]
		}
	}

	return pDevFrameWorkDesc;
 801e0e8:	68bb      	ldr	r3, [r7, #8]
}
 801e0ea:	0018      	movs	r0, r3
 801e0ec:	46bd      	mov	sp, r7
 801e0ee:	b006      	add	sp, #24
 801e0f0:	bd80      	pop	{r7, pc}
 801e0f2:	46c0      	nop			@ (mov r8, r8)
 801e0f4:	20011f4c 	.word	0x20011f4c
 801e0f8:	20011f50 	.word	0x20011f50

0801e0fc <USBD_FrameWork_AddClass>:
 */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
		USBD_CompositeClassTypeDef class,
		uint8_t cfgidx, uint8_t Speed,
		uint8_t *pCmpstConfDesc)
{
 801e0fc:	b590      	push	{r4, r7, lr}
 801e0fe:	b083      	sub	sp, #12
 801e100:	af00      	add	r7, sp, #0
 801e102:	6078      	str	r0, [r7, #4]
 801e104:	000c      	movs	r4, r1
 801e106:	0010      	movs	r0, r2
 801e108:	0019      	movs	r1, r3
 801e10a:	1cfb      	adds	r3, r7, #3
 801e10c:	1c22      	adds	r2, r4, #0
 801e10e:	701a      	strb	r2, [r3, #0]
 801e110:	1cbb      	adds	r3, r7, #2
 801e112:	1c02      	adds	r2, r0, #0
 801e114:	701a      	strb	r2, [r3, #0]
 801e116:	1c7b      	adds	r3, r7, #1
 801e118:	1c0a      	adds	r2, r1, #0
 801e11a:	701a      	strb	r2, [r3, #0]
	static uint8_t interface_idx = 0U;

	if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	685b      	ldr	r3, [r3, #4]
 801e120:	2b02      	cmp	r3, #2
 801e122:	d850      	bhi.n	801e1c6 <USBD_FrameWork_AddClass+0xca>
			(pdev->tclasslist[pdev->classId].Active == 0U))
 801e124:	687b      	ldr	r3, [r7, #4]
 801e126:	685b      	ldr	r3, [r3, #4]
 801e128:	687a      	ldr	r2, [r7, #4]
 801e12a:	215c      	movs	r1, #92	@ 0x5c
 801e12c:	434b      	muls	r3, r1
 801e12e:	18d3      	adds	r3, r2, r3
 801e130:	3318      	adds	r3, #24
 801e132:	681b      	ldr	r3, [r3, #0]
	if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 801e134:	2b00      	cmp	r3, #0
 801e136:	d146      	bne.n	801e1c6 <USBD_FrameWork_AddClass+0xca>
	{
		/* Store the class parameters in the global tab */
		pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	6858      	ldr	r0, [r3, #4]
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	685a      	ldr	r2, [r3, #4]
 801e140:	6879      	ldr	r1, [r7, #4]
 801e142:	235c      	movs	r3, #92	@ 0x5c
 801e144:	4343      	muls	r3, r0
 801e146:	18cb      	adds	r3, r1, r3
 801e148:	3310      	adds	r3, #16
 801e14a:	601a      	str	r2, [r3, #0]
		pdev->tclasslist[pdev->classId].Active = 1U;
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	685b      	ldr	r3, [r3, #4]
 801e150:	687a      	ldr	r2, [r7, #4]
 801e152:	215c      	movs	r1, #92	@ 0x5c
 801e154:	434b      	muls	r3, r1
 801e156:	18d3      	adds	r3, r2, r3
 801e158:	3318      	adds	r3, #24
 801e15a:	2201      	movs	r2, #1
 801e15c:	601a      	str	r2, [r3, #0]
		pdev->tclasslist[pdev->classId].ClassType = class;
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	685b      	ldr	r3, [r3, #4]
 801e162:	687a      	ldr	r2, [r7, #4]
 801e164:	215c      	movs	r1, #92	@ 0x5c
 801e166:	434b      	muls	r3, r1
 801e168:	18d3      	adds	r3, r2, r3
 801e16a:	330c      	adds	r3, #12
 801e16c:	1cfa      	adds	r2, r7, #3
 801e16e:	7812      	ldrb	r2, [r2, #0]
 801e170:	701a      	strb	r2, [r3, #0]

		if (class == CLASS_TYPE_HID)
 801e172:	1cfb      	adds	r3, r7, #3
 801e174:	781b      	ldrb	r3, [r3, #0]
 801e176:	2b01      	cmp	r3, #1
 801e178:	d11a      	bne.n	801e1b0 <USBD_FrameWork_AddClass+0xb4>
		{
			pdev->tclasslist[pdev->classId].InterfaceType = UserHIDInterface[interface_idx];
 801e17a:	4b15      	ldr	r3, [pc, #84]	@ (801e1d0 <USBD_FrameWork_AddClass+0xd4>)
 801e17c:	781b      	ldrb	r3, [r3, #0]
 801e17e:	0019      	movs	r1, r3
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	685b      	ldr	r3, [r3, #4]
 801e184:	4a13      	ldr	r2, [pc, #76]	@ (801e1d4 <USBD_FrameWork_AddClass+0xd8>)
 801e186:	5c50      	ldrb	r0, [r2, r1]
 801e188:	687a      	ldr	r2, [r7, #4]
 801e18a:	215c      	movs	r1, #92	@ 0x5c
 801e18c:	434b      	muls	r3, r1
 801e18e:	18d3      	adds	r3, r2, r3
 801e190:	3314      	adds	r3, #20
 801e192:	1c02      	adds	r2, r0, #0
 801e194:	701a      	strb	r2, [r3, #0]

			interface_idx++;
 801e196:	4b0e      	ldr	r3, [pc, #56]	@ (801e1d0 <USBD_FrameWork_AddClass+0xd4>)
 801e198:	781b      	ldrb	r3, [r3, #0]
 801e19a:	3301      	adds	r3, #1
 801e19c:	b2da      	uxtb	r2, r3
 801e19e:	4b0c      	ldr	r3, [pc, #48]	@ (801e1d0 <USBD_FrameWork_AddClass+0xd4>)
 801e1a0:	701a      	strb	r2, [r3, #0]

			if (interface_idx == sizeof(UserHIDInterface))
 801e1a2:	4b0b      	ldr	r3, [pc, #44]	@ (801e1d0 <USBD_FrameWork_AddClass+0xd4>)
 801e1a4:	781b      	ldrb	r3, [r3, #0]
 801e1a6:	2b02      	cmp	r3, #2
 801e1a8:	d102      	bne.n	801e1b0 <USBD_FrameWork_AddClass+0xb4>
			{
				interface_idx = 0U;
 801e1aa:	4b09      	ldr	r3, [pc, #36]	@ (801e1d0 <USBD_FrameWork_AddClass+0xd4>)
 801e1ac:	2200      	movs	r2, #0
 801e1ae:	701a      	strb	r2, [r3, #0]
			}
		}

		/* Call configuration descriptor builder and endpoint configuration builder */
		if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 801e1b0:	69ba      	ldr	r2, [r7, #24]
 801e1b2:	1c7b      	adds	r3, r7, #1
 801e1b4:	7819      	ldrb	r1, [r3, #0]
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	0018      	movs	r0, r3
 801e1ba:	f000 f80d 	bl	801e1d8 <USBD_FrameWork_AddToConfDesc>
 801e1be:	1e03      	subs	r3, r0, #0
 801e1c0:	d001      	beq.n	801e1c6 <USBD_FrameWork_AddClass+0xca>
		{
			return UX_ERROR;
 801e1c2:	23ff      	movs	r3, #255	@ 0xff
 801e1c4:	e000      	b.n	801e1c8 <USBD_FrameWork_AddClass+0xcc>
		}
	}

	UNUSED(cfgidx);

	return UX_SUCCESS;
 801e1c6:	2300      	movs	r3, #0
}
 801e1c8:	0018      	movs	r0, r3
 801e1ca:	46bd      	mov	sp, r7
 801e1cc:	b003      	add	sp, #12
 801e1ce:	bd90      	pop	{r4, r7, pc}
 801e1d0:	20011f54 	.word	0x20011f54
 801e1d4:	2000017c 	.word	0x2000017c

0801e1d8 <USBD_FrameWork_AddToConfDesc>:
 * @param  pCmpstConfDesc: to composite device configuration descriptor
 * @retval status
 */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
		uint8_t *pCmpstConfDesc)
{
 801e1d8:	b5b0      	push	{r4, r5, r7, lr}
 801e1da:	b086      	sub	sp, #24
 801e1dc:	af00      	add	r7, sp, #0
 801e1de:	60f8      	str	r0, [r7, #12]
 801e1e0:	607a      	str	r2, [r7, #4]
 801e1e2:	200b      	movs	r0, #11
 801e1e4:	183b      	adds	r3, r7, r0
 801e1e6:	1c0a      	adds	r2, r1, #0
 801e1e8:	701a      	strb	r2, [r3, #0]
	uint8_t interface = 0U;
 801e1ea:	2317      	movs	r3, #23
 801e1ec:	18fb      	adds	r3, r7, r3
 801e1ee:	2200      	movs	r2, #0
 801e1f0:	701a      	strb	r2, [r3, #0]
	/* USER CODE FrameWork_AddToConfDesc_0 */

	/* USER CODE FrameWork_AddToConfDesc_0 */

	/* The USB drivers do not set the speed value, so set it here before starting */
	pdev->Speed = Speed;
 801e1f2:	68fb      	ldr	r3, [r7, #12]
 801e1f4:	183a      	adds	r2, r7, r0
 801e1f6:	7812      	ldrb	r2, [r2, #0]
 801e1f8:	701a      	strb	r2, [r3, #0]

	/* start building the config descriptor common part */
	if (pdev->classId == 0U)
 801e1fa:	68fb      	ldr	r3, [r7, #12]
 801e1fc:	685b      	ldr	r3, [r3, #4]
 801e1fe:	2b00      	cmp	r3, #0
 801e200:	d107      	bne.n	801e212 <USBD_FrameWork_AddToConfDesc+0x3a>
	{
		/* Add configuration and IAD descriptors */
		USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 801e202:	687a      	ldr	r2, [r7, #4]
 801e204:	68fb      	ldr	r3, [r7, #12]
 801e206:	3325      	adds	r3, #37	@ 0x25
 801e208:	33ff      	adds	r3, #255	@ 0xff
 801e20a:	0019      	movs	r1, r3
 801e20c:	0010      	movs	r0, r2
 801e20e:	f000 f91d 	bl	801e44c <USBD_FrameWork_AddConfDesc>
	}

	switch (pdev->tclasslist[pdev->classId].ClassType)
 801e212:	68fb      	ldr	r3, [r7, #12]
 801e214:	685b      	ldr	r3, [r3, #4]
 801e216:	68fa      	ldr	r2, [r7, #12]
 801e218:	215c      	movs	r1, #92	@ 0x5c
 801e21a:	434b      	muls	r3, r1
 801e21c:	18d3      	adds	r3, r2, r3
 801e21e:	330c      	adds	r3, #12
 801e220:	781b      	ldrb	r3, [r3, #0]
 801e222:	2b01      	cmp	r3, #1
 801e224:	d000      	beq.n	801e228 <USBD_FrameWork_AddToConfDesc+0x50>
 801e226:	e0e1      	b.n	801e3ec <USBD_FrameWork_AddToConfDesc+0x214>

#if USBD_HID_CLASS_ACTIVATED == 1U

	case CLASS_TYPE_HID:

		switch(pdev->tclasslist[pdev->classId].InterfaceType)
 801e228:	68fb      	ldr	r3, [r7, #12]
 801e22a:	685b      	ldr	r3, [r3, #4]
 801e22c:	68fa      	ldr	r2, [r7, #12]
 801e22e:	215c      	movs	r1, #92	@ 0x5c
 801e230:	434b      	muls	r3, r1
 801e232:	18d3      	adds	r3, r2, r3
 801e234:	3314      	adds	r3, #20
 801e236:	781b      	ldrb	r3, [r3, #0]
 801e238:	2b03      	cmp	r3, #3
 801e23a:	d100      	bne.n	801e23e <USBD_FrameWork_AddToConfDesc+0x66>
 801e23c:	e086      	b.n	801e34c <USBD_FrameWork_AddToConfDesc+0x174>
 801e23e:	dd00      	ble.n	801e242 <USBD_FrameWork_AddToConfDesc+0x6a>
 801e240:	e0d2      	b.n	801e3e8 <USBD_FrameWork_AddToConfDesc+0x210>
 801e242:	2b01      	cmp	r3, #1
 801e244:	d042      	beq.n	801e2cc <USBD_FrameWork_AddToConfDesc+0xf4>
 801e246:	2b02      	cmp	r3, #2
 801e248:	d000      	beq.n	801e24c <USBD_FrameWork_AddToConfDesc+0x74>
 801e24a:	e0cd      	b.n	801e3e8 <USBD_FrameWork_AddToConfDesc+0x210>
#if USBD_HID_MOUSE_ACTIVATED == 1U

		case INTERFACE_HID_MOUSE:

			/* Find the first available interface slot and Assign number of interfaces */
			interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 801e24c:	2517      	movs	r5, #23
 801e24e:	197c      	adds	r4, r7, r5
 801e250:	68fb      	ldr	r3, [r7, #12]
 801e252:	0018      	movs	r0, r3
 801e254:	f000 f8d0 	bl	801e3f8 <USBD_FrameWork_FindFreeIFNbr>
 801e258:	0003      	movs	r3, r0
 801e25a:	7023      	strb	r3, [r4, #0]
			pdev->tclasslist[pdev->classId].NumIf = 1U;
 801e25c:	68fb      	ldr	r3, [r7, #12]
 801e25e:	685b      	ldr	r3, [r3, #4]
 801e260:	68fa      	ldr	r2, [r7, #12]
 801e262:	215c      	movs	r1, #92	@ 0x5c
 801e264:	434b      	muls	r3, r1
 801e266:	18d3      	adds	r3, r2, r3
 801e268:	3320      	adds	r3, #32
 801e26a:	2201      	movs	r2, #1
 801e26c:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 801e26e:	68fb      	ldr	r3, [r7, #12]
 801e270:	685b      	ldr	r3, [r3, #4]
 801e272:	68fa      	ldr	r2, [r7, #12]
 801e274:	215a      	movs	r1, #90	@ 0x5a
 801e276:	205c      	movs	r0, #92	@ 0x5c
 801e278:	4343      	muls	r3, r0
 801e27a:	18d3      	adds	r3, r2, r3
 801e27c:	185b      	adds	r3, r3, r1
 801e27e:	197a      	adds	r2, r7, r5
 801e280:	7812      	ldrb	r2, [r2, #0]
 801e282:	701a      	strb	r2, [r3, #0]

			/* Assign endpoint numbers */
			pdev->tclasslist[pdev->classId].NumEps = 1U; /* EP_IN */
 801e284:	68fb      	ldr	r3, [r7, #12]
 801e286:	685b      	ldr	r3, [r3, #4]
 801e288:	68fa      	ldr	r2, [r7, #12]
 801e28a:	215c      	movs	r1, #92	@ 0x5c
 801e28c:	434b      	muls	r3, r1
 801e28e:	18d3      	adds	r3, r2, r3
 801e290:	331c      	adds	r3, #28
 801e292:	2201      	movs	r2, #1
 801e294:	601a      	str	r2, [r3, #0]

			/* Check the current speed to assign endpoint IN */
			if (pdev->Speed == USBD_HIGH_SPEED)
 801e296:	68fb      	ldr	r3, [r7, #12]
 801e298:	781b      	ldrb	r3, [r3, #0]
 801e29a:	2b01      	cmp	r3, #1
 801e29c:	d106      	bne.n	801e2ac <USBD_FrameWork_AddToConfDesc+0xd4>
			{
				/* Assign IN Endpoint */
				USBD_FrameWork_AssignEp(pdev, USBD_HID_MOUSE_EPIN_ADDR,
 801e29e:	68f8      	ldr	r0, [r7, #12]
 801e2a0:	2304      	movs	r3, #4
 801e2a2:	2203      	movs	r2, #3
 801e2a4:	2183      	movs	r1, #131	@ 0x83
 801e2a6:	f000 f900 	bl	801e4aa <USBD_FrameWork_AssignEp>
 801e2aa:	e005      	b.n	801e2b8 <USBD_FrameWork_AddToConfDesc+0xe0>
						USBD_EP_TYPE_INTR, USBD_HID_MOUSE_EPIN_HS_MPS);
			}
			else
			{
				/* Assign IN Endpoint */
				USBD_FrameWork_AssignEp(pdev, USBD_HID_MOUSE_EPIN_ADDR,
 801e2ac:	68f8      	ldr	r0, [r7, #12]
 801e2ae:	2304      	movs	r3, #4
 801e2b0:	2203      	movs	r2, #3
 801e2b2:	2183      	movs	r1, #131	@ 0x83
 801e2b4:	f000 f8f9 	bl	801e4aa <USBD_FrameWork_AssignEp>
						USBD_EP_TYPE_INTR, USBD_HID_MOUSE_EPIN_FS_MPS);
			}

			/* Configure and Append the Descriptor */
			USBD_FrameWork_HID_Desc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 801e2b8:	6879      	ldr	r1, [r7, #4]
 801e2ba:	68fb      	ldr	r3, [r7, #12]
 801e2bc:	3325      	adds	r3, #37	@ 0x25
 801e2be:	33ff      	adds	r3, #255	@ 0xff
 801e2c0:	001a      	movs	r2, r3
 801e2c2:	68fb      	ldr	r3, [r7, #12]
 801e2c4:	0018      	movs	r0, r3
 801e2c6:	f000 f96b 	bl	801e5a0 <USBD_FrameWork_HID_Desc>

			break;
 801e2ca:	e08e      	b.n	801e3ea <USBD_FrameWork_AddToConfDesc+0x212>
#if USBD_HID_KEYBOARD_ACTIVATED == 1U

		case INTERFACE_HID_KEYBOARD:

			/* Find the first available interface slot and Assign number of interfaces */
			interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 801e2cc:	2517      	movs	r5, #23
 801e2ce:	197c      	adds	r4, r7, r5
 801e2d0:	68fb      	ldr	r3, [r7, #12]
 801e2d2:	0018      	movs	r0, r3
 801e2d4:	f000 f890 	bl	801e3f8 <USBD_FrameWork_FindFreeIFNbr>
 801e2d8:	0003      	movs	r3, r0
 801e2da:	7023      	strb	r3, [r4, #0]
			pdev->tclasslist[pdev->classId].NumIf = 1U;
 801e2dc:	68fb      	ldr	r3, [r7, #12]
 801e2de:	685b      	ldr	r3, [r3, #4]
 801e2e0:	68fa      	ldr	r2, [r7, #12]
 801e2e2:	215c      	movs	r1, #92	@ 0x5c
 801e2e4:	434b      	muls	r3, r1
 801e2e6:	18d3      	adds	r3, r2, r3
 801e2e8:	3320      	adds	r3, #32
 801e2ea:	2201      	movs	r2, #1
 801e2ec:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 801e2ee:	68fb      	ldr	r3, [r7, #12]
 801e2f0:	685b      	ldr	r3, [r3, #4]
 801e2f2:	68fa      	ldr	r2, [r7, #12]
 801e2f4:	215a      	movs	r1, #90	@ 0x5a
 801e2f6:	205c      	movs	r0, #92	@ 0x5c
 801e2f8:	4343      	muls	r3, r0
 801e2fa:	18d3      	adds	r3, r2, r3
 801e2fc:	185b      	adds	r3, r3, r1
 801e2fe:	197a      	adds	r2, r7, r5
 801e300:	7812      	ldrb	r2, [r2, #0]
 801e302:	701a      	strb	r2, [r3, #0]

			/* Assign endpoint numbers */
			pdev->tclasslist[pdev->classId].NumEps = 1U; /* EP_IN */
 801e304:	68fb      	ldr	r3, [r7, #12]
 801e306:	685b      	ldr	r3, [r3, #4]
 801e308:	68fa      	ldr	r2, [r7, #12]
 801e30a:	215c      	movs	r1, #92	@ 0x5c
 801e30c:	434b      	muls	r3, r1
 801e30e:	18d3      	adds	r3, r2, r3
 801e310:	331c      	adds	r3, #28
 801e312:	2201      	movs	r2, #1
 801e314:	601a      	str	r2, [r3, #0]

			/* Check the current speed to assign endpoint IN */
			if (pdev->Speed == USBD_HIGH_SPEED)
 801e316:	68fb      	ldr	r3, [r7, #12]
 801e318:	781b      	ldrb	r3, [r3, #0]
 801e31a:	2b01      	cmp	r3, #1
 801e31c:	d106      	bne.n	801e32c <USBD_FrameWork_AddToConfDesc+0x154>
			{
				/* Assign IN Endpoint */
				USBD_FrameWork_AssignEp(pdev, USBD_HID_KEYBOARD_EPIN_ADDR,
 801e31e:	68f8      	ldr	r0, [r7, #12]
 801e320:	2304      	movs	r3, #4
 801e322:	2203      	movs	r2, #3
 801e324:	2184      	movs	r1, #132	@ 0x84
 801e326:	f000 f8c0 	bl	801e4aa <USBD_FrameWork_AssignEp>
 801e32a:	e005      	b.n	801e338 <USBD_FrameWork_AddToConfDesc+0x160>
						USBD_EP_TYPE_INTR, USBD_HID_KEYBOARD_EPIN_HS_MPS);
			}
			else
			{
				/* Assign IN Endpoint */
				USBD_FrameWork_AssignEp(pdev, USBD_HID_KEYBOARD_EPIN_ADDR,
 801e32c:	68f8      	ldr	r0, [r7, #12]
 801e32e:	2304      	movs	r3, #4
 801e330:	2203      	movs	r2, #3
 801e332:	2184      	movs	r1, #132	@ 0x84
 801e334:	f000 f8b9 	bl	801e4aa <USBD_FrameWork_AssignEp>
						USBD_EP_TYPE_INTR, USBD_HID_KEYBOARD_EPIN_FS_MPS);
			}

			/* Configure and Append the Descriptor */
			USBD_FrameWork_HID_Desc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 801e338:	6879      	ldr	r1, [r7, #4]
 801e33a:	68fb      	ldr	r3, [r7, #12]
 801e33c:	3325      	adds	r3, #37	@ 0x25
 801e33e:	33ff      	adds	r3, #255	@ 0xff
 801e340:	001a      	movs	r2, r3
 801e342:	68fb      	ldr	r3, [r7, #12]
 801e344:	0018      	movs	r0, r3
 801e346:	f000 f92b 	bl	801e5a0 <USBD_FrameWork_HID_Desc>

			break;
 801e34a:	e04e      	b.n	801e3ea <USBD_FrameWork_AddToConfDesc+0x212>
#if USBD_MSC_CLASS_ACTIVATED == 1U

    case CLASS_TYPE_MSC:

      /* Find the first available interface slot and Assign number of interfaces */
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 801e34c:	2517      	movs	r5, #23
 801e34e:	197c      	adds	r4, r7, r5
 801e350:	68fb      	ldr	r3, [r7, #12]
 801e352:	0018      	movs	r0, r3
 801e354:	f000 f850 	bl	801e3f8 <USBD_FrameWork_FindFreeIFNbr>
 801e358:	0003      	movs	r3, r0
 801e35a:	7023      	strb	r3, [r4, #0]
      pdev->tclasslist[pdev->classId].NumIf = 1U;
 801e35c:	68fb      	ldr	r3, [r7, #12]
 801e35e:	685b      	ldr	r3, [r3, #4]
 801e360:	68fa      	ldr	r2, [r7, #12]
 801e362:	215c      	movs	r1, #92	@ 0x5c
 801e364:	434b      	muls	r3, r1
 801e366:	18d3      	adds	r3, r2, r3
 801e368:	3320      	adds	r3, #32
 801e36a:	2201      	movs	r2, #1
 801e36c:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 801e36e:	68fb      	ldr	r3, [r7, #12]
 801e370:	685b      	ldr	r3, [r3, #4]
 801e372:	68fa      	ldr	r2, [r7, #12]
 801e374:	215a      	movs	r1, #90	@ 0x5a
 801e376:	205c      	movs	r0, #92	@ 0x5c
 801e378:	4343      	muls	r3, r0
 801e37a:	18d3      	adds	r3, r2, r3
 801e37c:	185b      	adds	r3, r3, r1
 801e37e:	197a      	adds	r2, r7, r5
 801e380:	7812      	ldrb	r2, [r2, #0]
 801e382:	701a      	strb	r2, [r3, #0]

      /* Assign endpoint numbers */
      pdev->tclasslist[pdev->classId].NumEps = 2; /* EP_IN, EP_OUT */
 801e384:	68fb      	ldr	r3, [r7, #12]
 801e386:	685b      	ldr	r3, [r3, #4]
 801e388:	68fa      	ldr	r2, [r7, #12]
 801e38a:	215c      	movs	r1, #92	@ 0x5c
 801e38c:	434b      	muls	r3, r1
 801e38e:	18d3      	adds	r3, r2, r3
 801e390:	331c      	adds	r3, #28
 801e392:	2202      	movs	r2, #2
 801e394:	601a      	str	r2, [r3, #0]

      /* Check the current speed to assign endpoints */
      if (pdev->Speed == USBD_HIGH_SPEED)
 801e396:	68fb      	ldr	r3, [r7, #12]
 801e398:	781b      	ldrb	r3, [r3, #0]
 801e39a:	2b01      	cmp	r3, #1
 801e39c:	d10e      	bne.n	801e3bc <USBD_FrameWork_AddToConfDesc+0x1e4>
      {
        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPIN_ADDR,
 801e39e:	2380      	movs	r3, #128	@ 0x80
 801e3a0:	009b      	lsls	r3, r3, #2
 801e3a2:	68f8      	ldr	r0, [r7, #12]
 801e3a4:	2202      	movs	r2, #2
 801e3a6:	2181      	movs	r1, #129	@ 0x81
 801e3a8:	f000 f87f 	bl	801e4aa <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_MSC_EPIN_HS_MPS);

        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 801e3ac:	2380      	movs	r3, #128	@ 0x80
 801e3ae:	009b      	lsls	r3, r3, #2
 801e3b0:	68f8      	ldr	r0, [r7, #12]
 801e3b2:	2202      	movs	r2, #2
 801e3b4:	2102      	movs	r1, #2
 801e3b6:	f000 f878 	bl	801e4aa <USBD_FrameWork_AssignEp>
 801e3ba:	e00b      	b.n	801e3d4 <USBD_FrameWork_AddToConfDesc+0x1fc>
                                USBD_EP_TYPE_BULK, USBD_MSC_EPOUT_HS_MPS);
      }
      else
      {
        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPIN_ADDR,
 801e3bc:	68f8      	ldr	r0, [r7, #12]
 801e3be:	2340      	movs	r3, #64	@ 0x40
 801e3c0:	2202      	movs	r2, #2
 801e3c2:	2181      	movs	r1, #129	@ 0x81
 801e3c4:	f000 f871 	bl	801e4aa <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_MSC_EPIN_FS_MPS);

        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_MSC_EPOUT_ADDR,
 801e3c8:	68f8      	ldr	r0, [r7, #12]
 801e3ca:	2340      	movs	r3, #64	@ 0x40
 801e3cc:	2202      	movs	r2, #2
 801e3ce:	2102      	movs	r1, #2
 801e3d0:	f000 f86b 	bl	801e4aa <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_MSC_EPOUT_FS_MPS);
      }

      /* Configure and Append the Descriptor */
      USBD_FrameWork_MSCDesc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 801e3d4:	6879      	ldr	r1, [r7, #4]
 801e3d6:	68fb      	ldr	r3, [r7, #12]
 801e3d8:	3325      	adds	r3, #37	@ 0x25
 801e3da:	33ff      	adds	r3, #255	@ 0xff
 801e3dc:	001a      	movs	r2, r3
 801e3de:	68fb      	ldr	r3, [r7, #12]
 801e3e0:	0018      	movs	r0, r3
 801e3e2:	f000 fb7f 	bl	801eae4 <USBD_FrameWork_MSCDesc>

      break;
 801e3e6:	e000      	b.n	801e3ea <USBD_FrameWork_AddToConfDesc+0x212>

#endif /* USBD_MSC_CLASS_ACTIVATED */

		default:
			break;
 801e3e8:	46c0      	nop			@ (mov r8, r8)
		}

		break;
 801e3ea:	e000      	b.n	801e3ee <USBD_FrameWork_AddToConfDesc+0x216>

		default:
			/* USER CODE FrameWork_AddToConfDesc_2 */

			/* USER CODE FrameWork_AddToConfDesc_2 */
			break;
 801e3ec:	46c0      	nop			@ (mov r8, r8)
	}

	return UX_SUCCESS;
 801e3ee:	2300      	movs	r3, #0
}
 801e3f0:	0018      	movs	r0, r3
 801e3f2:	46bd      	mov	sp, r7
 801e3f4:	b006      	add	sp, #24
 801e3f6:	bdb0      	pop	{r4, r5, r7, pc}

0801e3f8 <USBD_FrameWork_FindFreeIFNbr>:
 *         Find the first interface available slot
 * @param  pdev: device instance
 * @retval The interface number to be used
 */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 801e3f8:	b580      	push	{r7, lr}
 801e3fa:	b086      	sub	sp, #24
 801e3fc:	af00      	add	r7, sp, #0
 801e3fe:	6078      	str	r0, [r7, #4]
	uint32_t idx = 0U;
 801e400:	2300      	movs	r3, #0
 801e402:	617b      	str	r3, [r7, #20]

	/* Unroll all already activated classes */
	for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 801e404:	2300      	movs	r3, #0
 801e406:	613b      	str	r3, [r7, #16]
 801e408:	e015      	b.n	801e436 <USBD_FrameWork_FindFreeIFNbr+0x3e>
	{
		/* Unroll each class interfaces */
		for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 801e40a:	2300      	movs	r3, #0
 801e40c:	60fb      	str	r3, [r7, #12]
 801e40e:	e005      	b.n	801e41c <USBD_FrameWork_FindFreeIFNbr+0x24>
		{
			/* Increment the interface counter index */
			idx++;
 801e410:	697b      	ldr	r3, [r7, #20]
 801e412:	3301      	adds	r3, #1
 801e414:	617b      	str	r3, [r7, #20]
		for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 801e416:	68fb      	ldr	r3, [r7, #12]
 801e418:	3301      	adds	r3, #1
 801e41a:	60fb      	str	r3, [r7, #12]
 801e41c:	687a      	ldr	r2, [r7, #4]
 801e41e:	693b      	ldr	r3, [r7, #16]
 801e420:	215c      	movs	r1, #92	@ 0x5c
 801e422:	434b      	muls	r3, r1
 801e424:	18d3      	adds	r3, r2, r3
 801e426:	3320      	adds	r3, #32
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	68fa      	ldr	r2, [r7, #12]
 801e42c:	429a      	cmp	r2, r3
 801e42e:	d3ef      	bcc.n	801e410 <USBD_FrameWork_FindFreeIFNbr+0x18>
	for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 801e430:	693b      	ldr	r3, [r7, #16]
 801e432:	3301      	adds	r3, #1
 801e434:	613b      	str	r3, [r7, #16]
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	689b      	ldr	r3, [r3, #8]
 801e43a:	693a      	ldr	r2, [r7, #16]
 801e43c:	429a      	cmp	r2, r3
 801e43e:	d3e4      	bcc.n	801e40a <USBD_FrameWork_FindFreeIFNbr+0x12>
		}
	}

	/* Return the first available interface slot */
	return (uint8_t)idx;
 801e440:	697b      	ldr	r3, [r7, #20]
 801e442:	b2db      	uxtb	r3, r3
}
 801e444:	0018      	movs	r0, r3
 801e446:	46bd      	mov	sp, r7
 801e448:	b006      	add	sp, #24
 801e44a:	bd80      	pop	{r7, pc}

0801e44c <USBD_FrameWork_AddConfDesc>:
 * @param  Conf: configuration descriptor
 * @param  pSze: pointer to the configuration descriptor size
 * @retval none
 */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 801e44c:	b580      	push	{r7, lr}
 801e44e:	b084      	sub	sp, #16
 801e450:	af00      	add	r7, sp, #0
 801e452:	6078      	str	r0, [r7, #4]
 801e454:	6039      	str	r1, [r7, #0]
	/* Intermediate variable to comply with MISRA-C Rule 11.3 */
	USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	60fb      	str	r3, [r7, #12]

	ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 801e45a:	68fb      	ldr	r3, [r7, #12]
 801e45c:	2209      	movs	r2, #9
 801e45e:	701a      	strb	r2, [r3, #0]
	ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 801e460:	68fb      	ldr	r3, [r7, #12]
 801e462:	2202      	movs	r2, #2
 801e464:	705a      	strb	r2, [r3, #1]
	ptr->wDescriptorLength = 0U;
 801e466:	68fb      	ldr	r3, [r7, #12]
 801e468:	789a      	ldrb	r2, [r3, #2]
 801e46a:	2100      	movs	r1, #0
 801e46c:	400a      	ands	r2, r1
 801e46e:	709a      	strb	r2, [r3, #2]
 801e470:	78da      	ldrb	r2, [r3, #3]
 801e472:	2100      	movs	r1, #0
 801e474:	400a      	ands	r2, r1
 801e476:	70da      	strb	r2, [r3, #3]
	ptr->bNumInterfaces = 0U;
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	2200      	movs	r2, #0
 801e47c:	711a      	strb	r2, [r3, #4]
	ptr->bConfigurationValue = 1U;
 801e47e:	68fb      	ldr	r3, [r7, #12]
 801e480:	2201      	movs	r2, #1
 801e482:	715a      	strb	r2, [r3, #5]
	ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 801e484:	68fb      	ldr	r3, [r7, #12]
 801e486:	2200      	movs	r2, #0
 801e488:	719a      	strb	r2, [r3, #6]
	ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 801e48a:	68fb      	ldr	r3, [r7, #12]
 801e48c:	22c0      	movs	r2, #192	@ 0xc0
 801e48e:	71da      	strb	r2, [r3, #7]
	ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 801e490:	68fb      	ldr	r3, [r7, #12]
 801e492:	2219      	movs	r2, #25
 801e494:	721a      	strb	r2, [r3, #8]
	*pSze += sizeof(USBD_ConfigDescTypedef);
 801e496:	683b      	ldr	r3, [r7, #0]
 801e498:	681b      	ldr	r3, [r3, #0]
 801e49a:	3309      	adds	r3, #9
 801e49c:	001a      	movs	r2, r3
 801e49e:	683b      	ldr	r3, [r7, #0]
 801e4a0:	601a      	str	r2, [r3, #0]
}
 801e4a2:	46c0      	nop			@ (mov r8, r8)
 801e4a4:	46bd      	mov	sp, r7
 801e4a6:	b004      	add	sp, #16
 801e4a8:	bd80      	pop	{r7, pc}

0801e4aa <USBD_FrameWork_AssignEp>:
 * @param  Sze: Endpoint max packet size
 * @retval none
 */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
		uint8_t Add, uint8_t Type, uint32_t Sze)
{
 801e4aa:	b590      	push	{r4, r7, lr}
 801e4ac:	b087      	sub	sp, #28
 801e4ae:	af00      	add	r7, sp, #0
 801e4b0:	60f8      	str	r0, [r7, #12]
 801e4b2:	0008      	movs	r0, r1
 801e4b4:	0011      	movs	r1, r2
 801e4b6:	607b      	str	r3, [r7, #4]
 801e4b8:	230b      	movs	r3, #11
 801e4ba:	18fb      	adds	r3, r7, r3
 801e4bc:	1c02      	adds	r2, r0, #0
 801e4be:	701a      	strb	r2, [r3, #0]
 801e4c0:	230a      	movs	r3, #10
 801e4c2:	18fb      	adds	r3, r7, r3
 801e4c4:	1c0a      	adds	r2, r1, #0
 801e4c6:	701a      	strb	r2, [r3, #0]
	uint32_t idx = 0U;
 801e4c8:	2300      	movs	r3, #0
 801e4ca:	617b      	str	r3, [r7, #20]

	/* Find the first available endpoint slot */
	while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801e4cc:	e002      	b.n	801e4d4 <USBD_FrameWork_AssignEp+0x2a>
			((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
	{
		/* Increment the index */
		idx++;
 801e4ce:	697b      	ldr	r3, [r7, #20]
 801e4d0:	3301      	adds	r3, #1
 801e4d2:	617b      	str	r3, [r7, #20]
	while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801e4d4:	68fb      	ldr	r3, [r7, #12]
 801e4d6:	685b      	ldr	r3, [r3, #4]
 801e4d8:	68fa      	ldr	r2, [r7, #12]
 801e4da:	215c      	movs	r1, #92	@ 0x5c
 801e4dc:	434b      	muls	r3, r1
 801e4de:	18d3      	adds	r3, r2, r3
 801e4e0:	331c      	adds	r3, #28
 801e4e2:	681b      	ldr	r3, [r3, #0]
 801e4e4:	697a      	ldr	r2, [r7, #20]
 801e4e6:	429a      	cmp	r2, r3
 801e4e8:	d210      	bcs.n	801e50c <USBD_FrameWork_AssignEp+0x62>
			((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 801e4ea:	68fb      	ldr	r3, [r7, #12]
 801e4ec:	6858      	ldr	r0, [r3, #4]
 801e4ee:	68f9      	ldr	r1, [r7, #12]
 801e4f0:	697a      	ldr	r2, [r7, #20]
 801e4f2:	2428      	movs	r4, #40	@ 0x28
 801e4f4:	0013      	movs	r3, r2
 801e4f6:	005b      	lsls	r3, r3, #1
 801e4f8:	189b      	adds	r3, r3, r2
 801e4fa:	005b      	lsls	r3, r3, #1
 801e4fc:	225c      	movs	r2, #92	@ 0x5c
 801e4fe:	4342      	muls	r2, r0
 801e500:	189b      	adds	r3, r3, r2
 801e502:	18cb      	adds	r3, r1, r3
 801e504:	191b      	adds	r3, r3, r4
 801e506:	781b      	ldrb	r3, [r3, #0]
	while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801e508:	2b00      	cmp	r3, #0
 801e50a:	d1e0      	bne.n	801e4ce <USBD_FrameWork_AssignEp+0x24>
	}

	/* Configure the endpoint */
	pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 801e50c:	68fb      	ldr	r3, [r7, #12]
 801e50e:	6858      	ldr	r0, [r3, #4]
 801e510:	68f9      	ldr	r1, [r7, #12]
 801e512:	697a      	ldr	r2, [r7, #20]
 801e514:	2424      	movs	r4, #36	@ 0x24
 801e516:	0013      	movs	r3, r2
 801e518:	005b      	lsls	r3, r3, #1
 801e51a:	189b      	adds	r3, r3, r2
 801e51c:	005b      	lsls	r3, r3, #1
 801e51e:	225c      	movs	r2, #92	@ 0x5c
 801e520:	4342      	muls	r2, r0
 801e522:	189b      	adds	r3, r3, r2
 801e524:	18cb      	adds	r3, r1, r3
 801e526:	191b      	adds	r3, r3, r4
 801e528:	220b      	movs	r2, #11
 801e52a:	18ba      	adds	r2, r7, r2
 801e52c:	7812      	ldrb	r2, [r2, #0]
 801e52e:	701a      	strb	r2, [r3, #0]
	pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 801e530:	68fb      	ldr	r3, [r7, #12]
 801e532:	6858      	ldr	r0, [r3, #4]
 801e534:	68f9      	ldr	r1, [r7, #12]
 801e536:	697a      	ldr	r2, [r7, #20]
 801e538:	2425      	movs	r4, #37	@ 0x25
 801e53a:	0013      	movs	r3, r2
 801e53c:	005b      	lsls	r3, r3, #1
 801e53e:	189b      	adds	r3, r3, r2
 801e540:	005b      	lsls	r3, r3, #1
 801e542:	225c      	movs	r2, #92	@ 0x5c
 801e544:	4342      	muls	r2, r0
 801e546:	189b      	adds	r3, r3, r2
 801e548:	18cb      	adds	r3, r1, r3
 801e54a:	191b      	adds	r3, r3, r4
 801e54c:	220a      	movs	r2, #10
 801e54e:	18ba      	adds	r2, r7, r2
 801e550:	7812      	ldrb	r2, [r2, #0]
 801e552:	701a      	strb	r2, [r3, #0]
	pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 801e554:	68fb      	ldr	r3, [r7, #12]
 801e556:	6858      	ldr	r0, [r3, #4]
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	b29c      	uxth	r4, r3
 801e55c:	68f9      	ldr	r1, [r7, #12]
 801e55e:	697a      	ldr	r2, [r7, #20]
 801e560:	0013      	movs	r3, r2
 801e562:	005b      	lsls	r3, r3, #1
 801e564:	189b      	adds	r3, r3, r2
 801e566:	005b      	lsls	r3, r3, #1
 801e568:	225c      	movs	r2, #92	@ 0x5c
 801e56a:	4342      	muls	r2, r0
 801e56c:	189b      	adds	r3, r3, r2
 801e56e:	18cb      	adds	r3, r1, r3
 801e570:	3326      	adds	r3, #38	@ 0x26
 801e572:	1c22      	adds	r2, r4, #0
 801e574:	801a      	strh	r2, [r3, #0]
	pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 801e576:	68fb      	ldr	r3, [r7, #12]
 801e578:	6858      	ldr	r0, [r3, #4]
 801e57a:	68f9      	ldr	r1, [r7, #12]
 801e57c:	697a      	ldr	r2, [r7, #20]
 801e57e:	2428      	movs	r4, #40	@ 0x28
 801e580:	0013      	movs	r3, r2
 801e582:	005b      	lsls	r3, r3, #1
 801e584:	189b      	adds	r3, r3, r2
 801e586:	005b      	lsls	r3, r3, #1
 801e588:	225c      	movs	r2, #92	@ 0x5c
 801e58a:	4342      	muls	r2, r0
 801e58c:	189b      	adds	r3, r3, r2
 801e58e:	18cb      	adds	r3, r1, r3
 801e590:	191b      	adds	r3, r3, r4
 801e592:	2201      	movs	r2, #1
 801e594:	701a      	strb	r2, [r3, #0]
}
 801e596:	46c0      	nop			@ (mov r8, r8)
 801e598:	46bd      	mov	sp, r7
 801e59a:	b007      	add	sp, #28
 801e59c:	bd90      	pop	{r4, r7, pc}
	...

0801e5a0 <USBD_FrameWork_HID_Desc>:
 * @param  Sze: pointer to the current configuration descriptor size
 * @retval None
 */
static void  USBD_FrameWork_HID_Desc(USBD_DevClassHandleTypeDef *pdev,
		uint32_t pConf, uint32_t *Sze)
{
 801e5a0:	b590      	push	{r4, r7, lr}
 801e5a2:	b085      	sub	sp, #20
 801e5a4:	af00      	add	r7, sp, #0
 801e5a6:	60f8      	str	r0, [r7, #12]
 801e5a8:	60b9      	str	r1, [r7, #8]
 801e5aa:	607a      	str	r2, [r7, #4]
	static USBD_IfDescTypedef       *pIfDesc;
	static USBD_EpDescTypedef       *pEpDesc;
	static USBD_HIDDescTypedef      *pHidDesc;

	switch(pdev->tclasslist[pdev->classId].InterfaceType)
 801e5ac:	68fb      	ldr	r3, [r7, #12]
 801e5ae:	685b      	ldr	r3, [r3, #4]
 801e5b0:	68fa      	ldr	r2, [r7, #12]
 801e5b2:	215c      	movs	r1, #92	@ 0x5c
 801e5b4:	434b      	muls	r3, r1
 801e5b6:	18d3      	adds	r3, r2, r3
 801e5b8:	3314      	adds	r3, #20
 801e5ba:	781b      	ldrb	r3, [r3, #0]
 801e5bc:	2b01      	cmp	r3, #1
 801e5be:	d100      	bne.n	801e5c2 <USBD_FrameWork_HID_Desc+0x22>
 801e5c0:	e138      	b.n	801e834 <USBD_FrameWork_HID_Desc+0x294>
 801e5c2:	2b02      	cmp	r3, #2
 801e5c4:	d000      	beq.n	801e5c8 <USBD_FrameWork_HID_Desc+0x28>
 801e5c6:	e264      	b.n	801ea92 <USBD_FrameWork_HID_Desc+0x4f2>

#if USBD_HID_MOUSE_ACTIVATED == 1U
	case INTERFACE_HID_MOUSE:

		/* Append HID Interface descriptor to Configuration descriptor */
		__USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U,
 801e5c8:	687b      	ldr	r3, [r7, #4]
 801e5ca:	681a      	ldr	r2, [r3, #0]
 801e5cc:	68bb      	ldr	r3, [r7, #8]
 801e5ce:	18d3      	adds	r3, r2, r3
 801e5d0:	001a      	movs	r2, r3
 801e5d2:	4b95      	ldr	r3, [pc, #596]	@ (801e828 <USBD_FrameWork_HID_Desc+0x288>)
 801e5d4:	601a      	str	r2, [r3, #0]
 801e5d6:	4b94      	ldr	r3, [pc, #592]	@ (801e828 <USBD_FrameWork_HID_Desc+0x288>)
 801e5d8:	681b      	ldr	r3, [r3, #0]
 801e5da:	2209      	movs	r2, #9
 801e5dc:	701a      	strb	r2, [r3, #0]
 801e5de:	4b92      	ldr	r3, [pc, #584]	@ (801e828 <USBD_FrameWork_HID_Desc+0x288>)
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	2204      	movs	r2, #4
 801e5e4:	705a      	strb	r2, [r3, #1]
 801e5e6:	68fb      	ldr	r3, [r7, #12]
 801e5e8:	685a      	ldr	r2, [r3, #4]
 801e5ea:	4b8f      	ldr	r3, [pc, #572]	@ (801e828 <USBD_FrameWork_HID_Desc+0x288>)
 801e5ec:	681b      	ldr	r3, [r3, #0]
 801e5ee:	68f9      	ldr	r1, [r7, #12]
 801e5f0:	205a      	movs	r0, #90	@ 0x5a
 801e5f2:	245c      	movs	r4, #92	@ 0x5c
 801e5f4:	4362      	muls	r2, r4
 801e5f6:	188a      	adds	r2, r1, r2
 801e5f8:	1812      	adds	r2, r2, r0
 801e5fa:	7812      	ldrb	r2, [r2, #0]
 801e5fc:	709a      	strb	r2, [r3, #2]
 801e5fe:	4b8a      	ldr	r3, [pc, #552]	@ (801e828 <USBD_FrameWork_HID_Desc+0x288>)
 801e600:	681b      	ldr	r3, [r3, #0]
 801e602:	2200      	movs	r2, #0
 801e604:	70da      	strb	r2, [r3, #3]
 801e606:	68fb      	ldr	r3, [r7, #12]
 801e608:	685b      	ldr	r3, [r3, #4]
 801e60a:	68fa      	ldr	r2, [r7, #12]
 801e60c:	215c      	movs	r1, #92	@ 0x5c
 801e60e:	434b      	muls	r3, r1
 801e610:	18d3      	adds	r3, r2, r3
 801e612:	331c      	adds	r3, #28
 801e614:	681a      	ldr	r2, [r3, #0]
 801e616:	4b84      	ldr	r3, [pc, #528]	@ (801e828 <USBD_FrameWork_HID_Desc+0x288>)
 801e618:	681b      	ldr	r3, [r3, #0]
 801e61a:	b2d2      	uxtb	r2, r2
 801e61c:	711a      	strb	r2, [r3, #4]
 801e61e:	4b82      	ldr	r3, [pc, #520]	@ (801e828 <USBD_FrameWork_HID_Desc+0x288>)
 801e620:	681b      	ldr	r3, [r3, #0]
 801e622:	2203      	movs	r2, #3
 801e624:	715a      	strb	r2, [r3, #5]
 801e626:	4b80      	ldr	r3, [pc, #512]	@ (801e828 <USBD_FrameWork_HID_Desc+0x288>)
 801e628:	681b      	ldr	r3, [r3, #0]
 801e62a:	2201      	movs	r2, #1
 801e62c:	719a      	strb	r2, [r3, #6]
 801e62e:	4b7e      	ldr	r3, [pc, #504]	@ (801e828 <USBD_FrameWork_HID_Desc+0x288>)
 801e630:	681b      	ldr	r3, [r3, #0]
 801e632:	2202      	movs	r2, #2
 801e634:	71da      	strb	r2, [r3, #7]
 801e636:	4b7c      	ldr	r3, [pc, #496]	@ (801e828 <USBD_FrameWork_HID_Desc+0x288>)
 801e638:	681b      	ldr	r3, [r3, #0]
 801e63a:	2200      	movs	r2, #0
 801e63c:	721a      	strb	r2, [r3, #8]
 801e63e:	687b      	ldr	r3, [r7, #4]
 801e640:	681b      	ldr	r3, [r3, #0]
 801e642:	3309      	adds	r3, #9
 801e644:	001a      	movs	r2, r3
 801e646:	687b      	ldr	r3, [r7, #4]
 801e648:	601a      	str	r2, [r3, #0]
				(uint8_t)(pdev->tclasslist[pdev->classId].NumEps),
				UX_DEVICE_CLASS_HID_CLASS,
				0x01U, INTERFACE_HID_MOUSE, 0U);

		/* Append HID Functional descriptor to Configuration descriptor */
		pHidDesc = ((USBD_HIDDescTypedef *)(pConf + *Sze));
 801e64a:	687b      	ldr	r3, [r7, #4]
 801e64c:	681a      	ldr	r2, [r3, #0]
 801e64e:	68bb      	ldr	r3, [r7, #8]
 801e650:	18d3      	adds	r3, r2, r3
 801e652:	001a      	movs	r2, r3
 801e654:	4b75      	ldr	r3, [pc, #468]	@ (801e82c <USBD_FrameWork_HID_Desc+0x28c>)
 801e656:	601a      	str	r2, [r3, #0]
		pHidDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypedef);
 801e658:	4b74      	ldr	r3, [pc, #464]	@ (801e82c <USBD_FrameWork_HID_Desc+0x28c>)
 801e65a:	681b      	ldr	r3, [r3, #0]
 801e65c:	2209      	movs	r2, #9
 801e65e:	701a      	strb	r2, [r3, #0]
		pHidDesc->bDescriptorType = UX_DEVICE_CLASS_HID_DESCRIPTOR_HID;
 801e660:	4b72      	ldr	r3, [pc, #456]	@ (801e82c <USBD_FrameWork_HID_Desc+0x28c>)
 801e662:	681b      	ldr	r3, [r3, #0]
 801e664:	2221      	movs	r2, #33	@ 0x21
 801e666:	705a      	strb	r2, [r3, #1]
		pHidDesc->bcdHID = 0x0111U;
 801e668:	4b70      	ldr	r3, [pc, #448]	@ (801e82c <USBD_FrameWork_HID_Desc+0x28c>)
 801e66a:	681b      	ldr	r3, [r3, #0]
 801e66c:	789a      	ldrb	r2, [r3, #2]
 801e66e:	2100      	movs	r1, #0
 801e670:	400a      	ands	r2, r1
 801e672:	1c11      	adds	r1, r2, #0
 801e674:	2211      	movs	r2, #17
 801e676:	430a      	orrs	r2, r1
 801e678:	709a      	strb	r2, [r3, #2]
 801e67a:	78da      	ldrb	r2, [r3, #3]
 801e67c:	2100      	movs	r1, #0
 801e67e:	400a      	ands	r2, r1
 801e680:	1c11      	adds	r1, r2, #0
 801e682:	2201      	movs	r2, #1
 801e684:	430a      	orrs	r2, r1
 801e686:	70da      	strb	r2, [r3, #3]
		pHidDesc->bCountryCode = 0x00U;
 801e688:	4b68      	ldr	r3, [pc, #416]	@ (801e82c <USBD_FrameWork_HID_Desc+0x28c>)
 801e68a:	681b      	ldr	r3, [r3, #0]
 801e68c:	2200      	movs	r2, #0
 801e68e:	711a      	strb	r2, [r3, #4]
		pHidDesc->bNumDescriptors = 0x01U;
 801e690:	4b66      	ldr	r3, [pc, #408]	@ (801e82c <USBD_FrameWork_HID_Desc+0x28c>)
 801e692:	681b      	ldr	r3, [r3, #0]
 801e694:	2201      	movs	r2, #1
 801e696:	715a      	strb	r2, [r3, #5]
		pHidDesc->bHIDDescriptorType = 0x22U;
 801e698:	4b64      	ldr	r3, [pc, #400]	@ (801e82c <USBD_FrameWork_HID_Desc+0x28c>)
 801e69a:	681b      	ldr	r3, [r3, #0]
 801e69c:	2222      	movs	r2, #34	@ 0x22
 801e69e:	719a      	strb	r2, [r3, #6]
		pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_MOUSE);
 801e6a0:	4b62      	ldr	r3, [pc, #392]	@ (801e82c <USBD_FrameWork_HID_Desc+0x28c>)
 801e6a2:	681c      	ldr	r4, [r3, #0]
 801e6a4:	2002      	movs	r0, #2
 801e6a6:	f7ff fb7f 	bl	801dda8 <USBD_HID_ReportDesc_length>
 801e6aa:	0003      	movs	r3, r0
 801e6ac:	001a      	movs	r2, r3
 801e6ae:	1de3      	adds	r3, r4, #7
 801e6b0:	21ff      	movs	r1, #255	@ 0xff
 801e6b2:	4011      	ands	r1, r2
 801e6b4:	000c      	movs	r4, r1
 801e6b6:	7819      	ldrb	r1, [r3, #0]
 801e6b8:	2000      	movs	r0, #0
 801e6ba:	4001      	ands	r1, r0
 801e6bc:	1c08      	adds	r0, r1, #0
 801e6be:	1c21      	adds	r1, r4, #0
 801e6c0:	4301      	orrs	r1, r0
 801e6c2:	7019      	strb	r1, [r3, #0]
 801e6c4:	0a12      	lsrs	r2, r2, #8
 801e6c6:	b290      	uxth	r0, r2
 801e6c8:	785a      	ldrb	r2, [r3, #1]
 801e6ca:	2100      	movs	r1, #0
 801e6cc:	400a      	ands	r2, r1
 801e6ce:	1c11      	adds	r1, r2, #0
 801e6d0:	1c02      	adds	r2, r0, #0
 801e6d2:	430a      	orrs	r2, r1
 801e6d4:	705a      	strb	r2, [r3, #1]
		*Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 801e6d6:	687b      	ldr	r3, [r7, #4]
 801e6d8:	681b      	ldr	r3, [r3, #0]
 801e6da:	3309      	adds	r3, #9
 801e6dc:	001a      	movs	r2, r3
 801e6de:	687b      	ldr	r3, [r7, #4]
 801e6e0:	601a      	str	r2, [r3, #0]

		if (pdev->Speed == USBD_HIGH_SPEED)
 801e6e2:	68fb      	ldr	r3, [r7, #12]
 801e6e4:	781b      	ldrb	r3, [r3, #0]
 801e6e6:	2b01      	cmp	r3, #1
 801e6e8:	d14e      	bne.n	801e788 <USBD_FrameWork_HID_Desc+0x1e8>
		{
			/* Append Endpoint descriptor to Configuration descriptor */
			__USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 801e6ea:	687b      	ldr	r3, [r7, #4]
 801e6ec:	681a      	ldr	r2, [r3, #0]
 801e6ee:	68bb      	ldr	r3, [r7, #8]
 801e6f0:	18d3      	adds	r3, r2, r3
 801e6f2:	001a      	movs	r2, r3
 801e6f4:	4b4e      	ldr	r3, [pc, #312]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e6f6:	601a      	str	r2, [r3, #0]
 801e6f8:	4b4d      	ldr	r3, [pc, #308]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e6fa:	681b      	ldr	r3, [r3, #0]
 801e6fc:	2207      	movs	r2, #7
 801e6fe:	701a      	strb	r2, [r3, #0]
 801e700:	4b4b      	ldr	r3, [pc, #300]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e702:	681b      	ldr	r3, [r3, #0]
 801e704:	2205      	movs	r2, #5
 801e706:	705a      	strb	r2, [r3, #1]
 801e708:	68fb      	ldr	r3, [r7, #12]
 801e70a:	685a      	ldr	r2, [r3, #4]
 801e70c:	4b48      	ldr	r3, [pc, #288]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e70e:	681b      	ldr	r3, [r3, #0]
 801e710:	68f9      	ldr	r1, [r7, #12]
 801e712:	2024      	movs	r0, #36	@ 0x24
 801e714:	245c      	movs	r4, #92	@ 0x5c
 801e716:	4362      	muls	r2, r4
 801e718:	188a      	adds	r2, r1, r2
 801e71a:	1812      	adds	r2, r2, r0
 801e71c:	7812      	ldrb	r2, [r2, #0]
 801e71e:	709a      	strb	r2, [r3, #2]
 801e720:	4b43      	ldr	r3, [pc, #268]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e722:	681b      	ldr	r3, [r3, #0]
 801e724:	2203      	movs	r2, #3
 801e726:	70da      	strb	r2, [r3, #3]
 801e728:	68fb      	ldr	r3, [r7, #12]
 801e72a:	685a      	ldr	r2, [r3, #4]
 801e72c:	4b40      	ldr	r3, [pc, #256]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e72e:	681b      	ldr	r3, [r3, #0]
 801e730:	68f9      	ldr	r1, [r7, #12]
 801e732:	205c      	movs	r0, #92	@ 0x5c
 801e734:	4342      	muls	r2, r0
 801e736:	188a      	adds	r2, r1, r2
 801e738:	3226      	adds	r2, #38	@ 0x26
 801e73a:	8812      	ldrh	r2, [r2, #0]
 801e73c:	21ff      	movs	r1, #255	@ 0xff
 801e73e:	4011      	ands	r1, r2
 801e740:	000c      	movs	r4, r1
 801e742:	7919      	ldrb	r1, [r3, #4]
 801e744:	2000      	movs	r0, #0
 801e746:	4001      	ands	r1, r0
 801e748:	1c08      	adds	r0, r1, #0
 801e74a:	1c21      	adds	r1, r4, #0
 801e74c:	4301      	orrs	r1, r0
 801e74e:	7119      	strb	r1, [r3, #4]
 801e750:	0a12      	lsrs	r2, r2, #8
 801e752:	b290      	uxth	r0, r2
 801e754:	795a      	ldrb	r2, [r3, #5]
 801e756:	2100      	movs	r1, #0
 801e758:	400a      	ands	r2, r1
 801e75a:	1c11      	adds	r1, r2, #0
 801e75c:	1c02      	adds	r2, r0, #0
 801e75e:	430a      	orrs	r2, r1
 801e760:	715a      	strb	r2, [r3, #5]
 801e762:	68fb      	ldr	r3, [r7, #12]
 801e764:	781b      	ldrb	r3, [r3, #0]
 801e766:	2b01      	cmp	r3, #1
 801e768:	d104      	bne.n	801e774 <USBD_FrameWork_HID_Desc+0x1d4>
 801e76a:	4b31      	ldr	r3, [pc, #196]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e76c:	681b      	ldr	r3, [r3, #0]
 801e76e:	2205      	movs	r2, #5
 801e770:	719a      	strb	r2, [r3, #6]
 801e772:	e003      	b.n	801e77c <USBD_FrameWork_HID_Desc+0x1dc>
 801e774:	4b2e      	ldr	r3, [pc, #184]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e776:	681b      	ldr	r3, [r3, #0]
 801e778:	2205      	movs	r2, #5
 801e77a:	719a      	strb	r2, [r3, #6]
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	1dda      	adds	r2, r3, #7
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	601a      	str	r2, [r3, #0]
					(uint16_t)pdev->tclasslist[pdev->classId].Eps[0].size,
					USBD_HID_MOUSE_EPIN_HS_BINTERVAL,
					USBD_HID_MOUSE_EPIN_FS_BINTERVAL);
		}

		break;
 801e786:	e185      	b.n	801ea94 <USBD_FrameWork_HID_Desc+0x4f4>
			__USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 801e788:	687b      	ldr	r3, [r7, #4]
 801e78a:	681a      	ldr	r2, [r3, #0]
 801e78c:	68bb      	ldr	r3, [r7, #8]
 801e78e:	18d3      	adds	r3, r2, r3
 801e790:	001a      	movs	r2, r3
 801e792:	4b27      	ldr	r3, [pc, #156]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e794:	601a      	str	r2, [r3, #0]
 801e796:	4b26      	ldr	r3, [pc, #152]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e798:	681b      	ldr	r3, [r3, #0]
 801e79a:	2207      	movs	r2, #7
 801e79c:	701a      	strb	r2, [r3, #0]
 801e79e:	4b24      	ldr	r3, [pc, #144]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e7a0:	681b      	ldr	r3, [r3, #0]
 801e7a2:	2205      	movs	r2, #5
 801e7a4:	705a      	strb	r2, [r3, #1]
 801e7a6:	68fb      	ldr	r3, [r7, #12]
 801e7a8:	685a      	ldr	r2, [r3, #4]
 801e7aa:	4b21      	ldr	r3, [pc, #132]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e7ac:	681b      	ldr	r3, [r3, #0]
 801e7ae:	68f9      	ldr	r1, [r7, #12]
 801e7b0:	2024      	movs	r0, #36	@ 0x24
 801e7b2:	245c      	movs	r4, #92	@ 0x5c
 801e7b4:	4362      	muls	r2, r4
 801e7b6:	188a      	adds	r2, r1, r2
 801e7b8:	1812      	adds	r2, r2, r0
 801e7ba:	7812      	ldrb	r2, [r2, #0]
 801e7bc:	709a      	strb	r2, [r3, #2]
 801e7be:	4b1c      	ldr	r3, [pc, #112]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e7c0:	681b      	ldr	r3, [r3, #0]
 801e7c2:	2203      	movs	r2, #3
 801e7c4:	70da      	strb	r2, [r3, #3]
 801e7c6:	68fb      	ldr	r3, [r7, #12]
 801e7c8:	685a      	ldr	r2, [r3, #4]
 801e7ca:	4b19      	ldr	r3, [pc, #100]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	68f9      	ldr	r1, [r7, #12]
 801e7d0:	205c      	movs	r0, #92	@ 0x5c
 801e7d2:	4342      	muls	r2, r0
 801e7d4:	188a      	adds	r2, r1, r2
 801e7d6:	3226      	adds	r2, #38	@ 0x26
 801e7d8:	8812      	ldrh	r2, [r2, #0]
 801e7da:	21ff      	movs	r1, #255	@ 0xff
 801e7dc:	4011      	ands	r1, r2
 801e7de:	000c      	movs	r4, r1
 801e7e0:	7919      	ldrb	r1, [r3, #4]
 801e7e2:	2000      	movs	r0, #0
 801e7e4:	4001      	ands	r1, r0
 801e7e6:	1c08      	adds	r0, r1, #0
 801e7e8:	1c21      	adds	r1, r4, #0
 801e7ea:	4301      	orrs	r1, r0
 801e7ec:	7119      	strb	r1, [r3, #4]
 801e7ee:	0a12      	lsrs	r2, r2, #8
 801e7f0:	b290      	uxth	r0, r2
 801e7f2:	795a      	ldrb	r2, [r3, #5]
 801e7f4:	2100      	movs	r1, #0
 801e7f6:	400a      	ands	r2, r1
 801e7f8:	1c11      	adds	r1, r2, #0
 801e7fa:	1c02      	adds	r2, r0, #0
 801e7fc:	430a      	orrs	r2, r1
 801e7fe:	715a      	strb	r2, [r3, #5]
 801e800:	68fb      	ldr	r3, [r7, #12]
 801e802:	781b      	ldrb	r3, [r3, #0]
 801e804:	2b01      	cmp	r3, #1
 801e806:	d104      	bne.n	801e812 <USBD_FrameWork_HID_Desc+0x272>
 801e808:	4b09      	ldr	r3, [pc, #36]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e80a:	681b      	ldr	r3, [r3, #0]
 801e80c:	2205      	movs	r2, #5
 801e80e:	719a      	strb	r2, [r3, #6]
 801e810:	e003      	b.n	801e81a <USBD_FrameWork_HID_Desc+0x27a>
 801e812:	4b07      	ldr	r3, [pc, #28]	@ (801e830 <USBD_FrameWork_HID_Desc+0x290>)
 801e814:	681b      	ldr	r3, [r3, #0]
 801e816:	2205      	movs	r2, #5
 801e818:	719a      	strb	r2, [r3, #6]
 801e81a:	687b      	ldr	r3, [r7, #4]
 801e81c:	681b      	ldr	r3, [r3, #0]
 801e81e:	1dda      	adds	r2, r3, #7
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	601a      	str	r2, [r3, #0]
		break;
 801e824:	e136      	b.n	801ea94 <USBD_FrameWork_HID_Desc+0x4f4>
 801e826:	46c0      	nop			@ (mov r8, r8)
 801e828:	20011f58 	.word	0x20011f58
 801e82c:	20011f5c 	.word	0x20011f5c
 801e830:	20011f60 	.word	0x20011f60

#if USBD_HID_KEYBOARD_ACTIVATED == 1U
	case INTERFACE_HID_KEYBOARD:

		/* Append HID Interface descriptor to Configuration descriptor */
		__USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U,
 801e834:	687b      	ldr	r3, [r7, #4]
 801e836:	681a      	ldr	r2, [r3, #0]
 801e838:	68bb      	ldr	r3, [r7, #8]
 801e83a:	18d3      	adds	r3, r2, r3
 801e83c:	001a      	movs	r2, r3
 801e83e:	4ba6      	ldr	r3, [pc, #664]	@ (801ead8 <USBD_FrameWork_HID_Desc+0x538>)
 801e840:	601a      	str	r2, [r3, #0]
 801e842:	4ba5      	ldr	r3, [pc, #660]	@ (801ead8 <USBD_FrameWork_HID_Desc+0x538>)
 801e844:	681b      	ldr	r3, [r3, #0]
 801e846:	2209      	movs	r2, #9
 801e848:	701a      	strb	r2, [r3, #0]
 801e84a:	4ba3      	ldr	r3, [pc, #652]	@ (801ead8 <USBD_FrameWork_HID_Desc+0x538>)
 801e84c:	681b      	ldr	r3, [r3, #0]
 801e84e:	2204      	movs	r2, #4
 801e850:	705a      	strb	r2, [r3, #1]
 801e852:	68fb      	ldr	r3, [r7, #12]
 801e854:	685a      	ldr	r2, [r3, #4]
 801e856:	4ba0      	ldr	r3, [pc, #640]	@ (801ead8 <USBD_FrameWork_HID_Desc+0x538>)
 801e858:	681b      	ldr	r3, [r3, #0]
 801e85a:	68f9      	ldr	r1, [r7, #12]
 801e85c:	205a      	movs	r0, #90	@ 0x5a
 801e85e:	245c      	movs	r4, #92	@ 0x5c
 801e860:	4362      	muls	r2, r4
 801e862:	188a      	adds	r2, r1, r2
 801e864:	1812      	adds	r2, r2, r0
 801e866:	7812      	ldrb	r2, [r2, #0]
 801e868:	709a      	strb	r2, [r3, #2]
 801e86a:	4b9b      	ldr	r3, [pc, #620]	@ (801ead8 <USBD_FrameWork_HID_Desc+0x538>)
 801e86c:	681b      	ldr	r3, [r3, #0]
 801e86e:	2200      	movs	r2, #0
 801e870:	70da      	strb	r2, [r3, #3]
 801e872:	68fb      	ldr	r3, [r7, #12]
 801e874:	685b      	ldr	r3, [r3, #4]
 801e876:	68fa      	ldr	r2, [r7, #12]
 801e878:	215c      	movs	r1, #92	@ 0x5c
 801e87a:	434b      	muls	r3, r1
 801e87c:	18d3      	adds	r3, r2, r3
 801e87e:	331c      	adds	r3, #28
 801e880:	681a      	ldr	r2, [r3, #0]
 801e882:	4b95      	ldr	r3, [pc, #596]	@ (801ead8 <USBD_FrameWork_HID_Desc+0x538>)
 801e884:	681b      	ldr	r3, [r3, #0]
 801e886:	b2d2      	uxtb	r2, r2
 801e888:	711a      	strb	r2, [r3, #4]
 801e88a:	4b93      	ldr	r3, [pc, #588]	@ (801ead8 <USBD_FrameWork_HID_Desc+0x538>)
 801e88c:	681b      	ldr	r3, [r3, #0]
 801e88e:	2203      	movs	r2, #3
 801e890:	715a      	strb	r2, [r3, #5]
 801e892:	4b91      	ldr	r3, [pc, #580]	@ (801ead8 <USBD_FrameWork_HID_Desc+0x538>)
 801e894:	681b      	ldr	r3, [r3, #0]
 801e896:	2201      	movs	r2, #1
 801e898:	719a      	strb	r2, [r3, #6]
 801e89a:	4b8f      	ldr	r3, [pc, #572]	@ (801ead8 <USBD_FrameWork_HID_Desc+0x538>)
 801e89c:	681b      	ldr	r3, [r3, #0]
 801e89e:	2201      	movs	r2, #1
 801e8a0:	71da      	strb	r2, [r3, #7]
 801e8a2:	4b8d      	ldr	r3, [pc, #564]	@ (801ead8 <USBD_FrameWork_HID_Desc+0x538>)
 801e8a4:	681b      	ldr	r3, [r3, #0]
 801e8a6:	2200      	movs	r2, #0
 801e8a8:	721a      	strb	r2, [r3, #8]
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	681b      	ldr	r3, [r3, #0]
 801e8ae:	3309      	adds	r3, #9
 801e8b0:	001a      	movs	r2, r3
 801e8b2:	687b      	ldr	r3, [r7, #4]
 801e8b4:	601a      	str	r2, [r3, #0]
				(uint8_t)(pdev->tclasslist[pdev->classId].NumEps),
				UX_DEVICE_CLASS_HID_CLASS,
				0x01U, INTERFACE_HID_KEYBOARD, 0U);

		/* Append HID Functional descriptor to Configuration descriptor */
		pHidDesc = ((USBD_HIDDescTypedef *)(pConf + *Sze));
 801e8b6:	687b      	ldr	r3, [r7, #4]
 801e8b8:	681a      	ldr	r2, [r3, #0]
 801e8ba:	68bb      	ldr	r3, [r7, #8]
 801e8bc:	18d3      	adds	r3, r2, r3
 801e8be:	001a      	movs	r2, r3
 801e8c0:	4b86      	ldr	r3, [pc, #536]	@ (801eadc <USBD_FrameWork_HID_Desc+0x53c>)
 801e8c2:	601a      	str	r2, [r3, #0]
		pHidDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypedef);
 801e8c4:	4b85      	ldr	r3, [pc, #532]	@ (801eadc <USBD_FrameWork_HID_Desc+0x53c>)
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	2209      	movs	r2, #9
 801e8ca:	701a      	strb	r2, [r3, #0]
		pHidDesc->bDescriptorType = UX_DEVICE_CLASS_HID_DESCRIPTOR_HID;
 801e8cc:	4b83      	ldr	r3, [pc, #524]	@ (801eadc <USBD_FrameWork_HID_Desc+0x53c>)
 801e8ce:	681b      	ldr	r3, [r3, #0]
 801e8d0:	2221      	movs	r2, #33	@ 0x21
 801e8d2:	705a      	strb	r2, [r3, #1]
		pHidDesc->bcdHID = 0x0111U;
 801e8d4:	4b81      	ldr	r3, [pc, #516]	@ (801eadc <USBD_FrameWork_HID_Desc+0x53c>)
 801e8d6:	681b      	ldr	r3, [r3, #0]
 801e8d8:	789a      	ldrb	r2, [r3, #2]
 801e8da:	2100      	movs	r1, #0
 801e8dc:	400a      	ands	r2, r1
 801e8de:	1c11      	adds	r1, r2, #0
 801e8e0:	2211      	movs	r2, #17
 801e8e2:	430a      	orrs	r2, r1
 801e8e4:	709a      	strb	r2, [r3, #2]
 801e8e6:	78da      	ldrb	r2, [r3, #3]
 801e8e8:	2100      	movs	r1, #0
 801e8ea:	400a      	ands	r2, r1
 801e8ec:	1c11      	adds	r1, r2, #0
 801e8ee:	2201      	movs	r2, #1
 801e8f0:	430a      	orrs	r2, r1
 801e8f2:	70da      	strb	r2, [r3, #3]
		pHidDesc->bCountryCode = 0x00U;
 801e8f4:	4b79      	ldr	r3, [pc, #484]	@ (801eadc <USBD_FrameWork_HID_Desc+0x53c>)
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	2200      	movs	r2, #0
 801e8fa:	711a      	strb	r2, [r3, #4]
		pHidDesc->bNumDescriptors = 0x01U;
 801e8fc:	4b77      	ldr	r3, [pc, #476]	@ (801eadc <USBD_FrameWork_HID_Desc+0x53c>)
 801e8fe:	681b      	ldr	r3, [r3, #0]
 801e900:	2201      	movs	r2, #1
 801e902:	715a      	strb	r2, [r3, #5]
		pHidDesc->bHIDDescriptorType = 0x22U;
 801e904:	4b75      	ldr	r3, [pc, #468]	@ (801eadc <USBD_FrameWork_HID_Desc+0x53c>)
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	2222      	movs	r2, #34	@ 0x22
 801e90a:	719a      	strb	r2, [r3, #6]
		pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_KEYBOARD);
 801e90c:	4b73      	ldr	r3, [pc, #460]	@ (801eadc <USBD_FrameWork_HID_Desc+0x53c>)
 801e90e:	681c      	ldr	r4, [r3, #0]
 801e910:	2001      	movs	r0, #1
 801e912:	f7ff fa49 	bl	801dda8 <USBD_HID_ReportDesc_length>
 801e916:	0003      	movs	r3, r0
 801e918:	001a      	movs	r2, r3
 801e91a:	1de3      	adds	r3, r4, #7
 801e91c:	21ff      	movs	r1, #255	@ 0xff
 801e91e:	4011      	ands	r1, r2
 801e920:	000c      	movs	r4, r1
 801e922:	7819      	ldrb	r1, [r3, #0]
 801e924:	2000      	movs	r0, #0
 801e926:	4001      	ands	r1, r0
 801e928:	1c08      	adds	r0, r1, #0
 801e92a:	1c21      	adds	r1, r4, #0
 801e92c:	4301      	orrs	r1, r0
 801e92e:	7019      	strb	r1, [r3, #0]
 801e930:	0a12      	lsrs	r2, r2, #8
 801e932:	b290      	uxth	r0, r2
 801e934:	785a      	ldrb	r2, [r3, #1]
 801e936:	2100      	movs	r1, #0
 801e938:	400a      	ands	r2, r1
 801e93a:	1c11      	adds	r1, r2, #0
 801e93c:	1c02      	adds	r2, r0, #0
 801e93e:	430a      	orrs	r2, r1
 801e940:	705a      	strb	r2, [r3, #1]
		*Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	681b      	ldr	r3, [r3, #0]
 801e946:	3309      	adds	r3, #9
 801e948:	001a      	movs	r2, r3
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	601a      	str	r2, [r3, #0]

		if (pdev->Speed == USBD_HIGH_SPEED)
 801e94e:	68fb      	ldr	r3, [r7, #12]
 801e950:	781b      	ldrb	r3, [r3, #0]
 801e952:	2b01      	cmp	r3, #1
 801e954:	d14e      	bne.n	801e9f4 <USBD_FrameWork_HID_Desc+0x454>
		{
			/* Append Endpoint descriptor to Configuration descriptor */
			__USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 801e956:	687b      	ldr	r3, [r7, #4]
 801e958:	681a      	ldr	r2, [r3, #0]
 801e95a:	68bb      	ldr	r3, [r7, #8]
 801e95c:	18d3      	adds	r3, r2, r3
 801e95e:	001a      	movs	r2, r3
 801e960:	4b5f      	ldr	r3, [pc, #380]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801e962:	601a      	str	r2, [r3, #0]
 801e964:	4b5e      	ldr	r3, [pc, #376]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801e966:	681b      	ldr	r3, [r3, #0]
 801e968:	2207      	movs	r2, #7
 801e96a:	701a      	strb	r2, [r3, #0]
 801e96c:	4b5c      	ldr	r3, [pc, #368]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	2205      	movs	r2, #5
 801e972:	705a      	strb	r2, [r3, #1]
 801e974:	68fb      	ldr	r3, [r7, #12]
 801e976:	685a      	ldr	r2, [r3, #4]
 801e978:	4b59      	ldr	r3, [pc, #356]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	68f9      	ldr	r1, [r7, #12]
 801e97e:	2024      	movs	r0, #36	@ 0x24
 801e980:	245c      	movs	r4, #92	@ 0x5c
 801e982:	4362      	muls	r2, r4
 801e984:	188a      	adds	r2, r1, r2
 801e986:	1812      	adds	r2, r2, r0
 801e988:	7812      	ldrb	r2, [r2, #0]
 801e98a:	709a      	strb	r2, [r3, #2]
 801e98c:	4b54      	ldr	r3, [pc, #336]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	2203      	movs	r2, #3
 801e992:	70da      	strb	r2, [r3, #3]
 801e994:	68fb      	ldr	r3, [r7, #12]
 801e996:	685a      	ldr	r2, [r3, #4]
 801e998:	4b51      	ldr	r3, [pc, #324]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801e99a:	681b      	ldr	r3, [r3, #0]
 801e99c:	68f9      	ldr	r1, [r7, #12]
 801e99e:	205c      	movs	r0, #92	@ 0x5c
 801e9a0:	4342      	muls	r2, r0
 801e9a2:	188a      	adds	r2, r1, r2
 801e9a4:	3226      	adds	r2, #38	@ 0x26
 801e9a6:	8812      	ldrh	r2, [r2, #0]
 801e9a8:	21ff      	movs	r1, #255	@ 0xff
 801e9aa:	4011      	ands	r1, r2
 801e9ac:	000c      	movs	r4, r1
 801e9ae:	7919      	ldrb	r1, [r3, #4]
 801e9b0:	2000      	movs	r0, #0
 801e9b2:	4001      	ands	r1, r0
 801e9b4:	1c08      	adds	r0, r1, #0
 801e9b6:	1c21      	adds	r1, r4, #0
 801e9b8:	4301      	orrs	r1, r0
 801e9ba:	7119      	strb	r1, [r3, #4]
 801e9bc:	0a12      	lsrs	r2, r2, #8
 801e9be:	b290      	uxth	r0, r2
 801e9c0:	795a      	ldrb	r2, [r3, #5]
 801e9c2:	2100      	movs	r1, #0
 801e9c4:	400a      	ands	r2, r1
 801e9c6:	1c11      	adds	r1, r2, #0
 801e9c8:	1c02      	adds	r2, r0, #0
 801e9ca:	430a      	orrs	r2, r1
 801e9cc:	715a      	strb	r2, [r3, #5]
 801e9ce:	68fb      	ldr	r3, [r7, #12]
 801e9d0:	781b      	ldrb	r3, [r3, #0]
 801e9d2:	2b01      	cmp	r3, #1
 801e9d4:	d104      	bne.n	801e9e0 <USBD_FrameWork_HID_Desc+0x440>
 801e9d6:	4b42      	ldr	r3, [pc, #264]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801e9d8:	681b      	ldr	r3, [r3, #0]
 801e9da:	2205      	movs	r2, #5
 801e9dc:	719a      	strb	r2, [r3, #6]
 801e9de:	e003      	b.n	801e9e8 <USBD_FrameWork_HID_Desc+0x448>
 801e9e0:	4b3f      	ldr	r3, [pc, #252]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	2205      	movs	r2, #5
 801e9e6:	719a      	strb	r2, [r3, #6]
 801e9e8:	687b      	ldr	r3, [r7, #4]
 801e9ea:	681b      	ldr	r3, [r3, #0]
 801e9ec:	1dda      	adds	r2, r3, #7
 801e9ee:	687b      	ldr	r3, [r7, #4]
 801e9f0:	601a      	str	r2, [r3, #0]
					(uint16_t)pdev->tclasslist[pdev->classId].Eps[0].size,
					USBD_HID_KEYBOARD_EPIN_HS_BINTERVAL,
					USBD_HID_KEYBOARD_EPIN_FS_BINTERVAL);
		}

		break;
 801e9f2:	e04f      	b.n	801ea94 <USBD_FrameWork_HID_Desc+0x4f4>
			__USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 801e9f4:	687b      	ldr	r3, [r7, #4]
 801e9f6:	681a      	ldr	r2, [r3, #0]
 801e9f8:	68bb      	ldr	r3, [r7, #8]
 801e9fa:	18d3      	adds	r3, r2, r3
 801e9fc:	001a      	movs	r2, r3
 801e9fe:	4b38      	ldr	r3, [pc, #224]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801ea00:	601a      	str	r2, [r3, #0]
 801ea02:	4b37      	ldr	r3, [pc, #220]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801ea04:	681b      	ldr	r3, [r3, #0]
 801ea06:	2207      	movs	r2, #7
 801ea08:	701a      	strb	r2, [r3, #0]
 801ea0a:	4b35      	ldr	r3, [pc, #212]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801ea0c:	681b      	ldr	r3, [r3, #0]
 801ea0e:	2205      	movs	r2, #5
 801ea10:	705a      	strb	r2, [r3, #1]
 801ea12:	68fb      	ldr	r3, [r7, #12]
 801ea14:	685a      	ldr	r2, [r3, #4]
 801ea16:	4b32      	ldr	r3, [pc, #200]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801ea18:	681b      	ldr	r3, [r3, #0]
 801ea1a:	68f9      	ldr	r1, [r7, #12]
 801ea1c:	2024      	movs	r0, #36	@ 0x24
 801ea1e:	245c      	movs	r4, #92	@ 0x5c
 801ea20:	4362      	muls	r2, r4
 801ea22:	188a      	adds	r2, r1, r2
 801ea24:	1812      	adds	r2, r2, r0
 801ea26:	7812      	ldrb	r2, [r2, #0]
 801ea28:	709a      	strb	r2, [r3, #2]
 801ea2a:	4b2d      	ldr	r3, [pc, #180]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801ea2c:	681b      	ldr	r3, [r3, #0]
 801ea2e:	2203      	movs	r2, #3
 801ea30:	70da      	strb	r2, [r3, #3]
 801ea32:	68fb      	ldr	r3, [r7, #12]
 801ea34:	685a      	ldr	r2, [r3, #4]
 801ea36:	4b2a      	ldr	r3, [pc, #168]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801ea38:	681b      	ldr	r3, [r3, #0]
 801ea3a:	68f9      	ldr	r1, [r7, #12]
 801ea3c:	205c      	movs	r0, #92	@ 0x5c
 801ea3e:	4342      	muls	r2, r0
 801ea40:	188a      	adds	r2, r1, r2
 801ea42:	3226      	adds	r2, #38	@ 0x26
 801ea44:	8812      	ldrh	r2, [r2, #0]
 801ea46:	21ff      	movs	r1, #255	@ 0xff
 801ea48:	4011      	ands	r1, r2
 801ea4a:	000c      	movs	r4, r1
 801ea4c:	7919      	ldrb	r1, [r3, #4]
 801ea4e:	2000      	movs	r0, #0
 801ea50:	4001      	ands	r1, r0
 801ea52:	1c08      	adds	r0, r1, #0
 801ea54:	1c21      	adds	r1, r4, #0
 801ea56:	4301      	orrs	r1, r0
 801ea58:	7119      	strb	r1, [r3, #4]
 801ea5a:	0a12      	lsrs	r2, r2, #8
 801ea5c:	b290      	uxth	r0, r2
 801ea5e:	795a      	ldrb	r2, [r3, #5]
 801ea60:	2100      	movs	r1, #0
 801ea62:	400a      	ands	r2, r1
 801ea64:	1c11      	adds	r1, r2, #0
 801ea66:	1c02      	adds	r2, r0, #0
 801ea68:	430a      	orrs	r2, r1
 801ea6a:	715a      	strb	r2, [r3, #5]
 801ea6c:	68fb      	ldr	r3, [r7, #12]
 801ea6e:	781b      	ldrb	r3, [r3, #0]
 801ea70:	2b01      	cmp	r3, #1
 801ea72:	d104      	bne.n	801ea7e <USBD_FrameWork_HID_Desc+0x4de>
 801ea74:	4b1a      	ldr	r3, [pc, #104]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801ea76:	681b      	ldr	r3, [r3, #0]
 801ea78:	2205      	movs	r2, #5
 801ea7a:	719a      	strb	r2, [r3, #6]
 801ea7c:	e003      	b.n	801ea86 <USBD_FrameWork_HID_Desc+0x4e6>
 801ea7e:	4b18      	ldr	r3, [pc, #96]	@ (801eae0 <USBD_FrameWork_HID_Desc+0x540>)
 801ea80:	681b      	ldr	r3, [r3, #0]
 801ea82:	2205      	movs	r2, #5
 801ea84:	719a      	strb	r2, [r3, #6]
 801ea86:	687b      	ldr	r3, [r7, #4]
 801ea88:	681b      	ldr	r3, [r3, #0]
 801ea8a:	1dda      	adds	r2, r3, #7
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	601a      	str	r2, [r3, #0]
		break;
 801ea90:	e000      	b.n	801ea94 <USBD_FrameWork_HID_Desc+0x4f4>

#endif /* USBD_HID_KEYBOARD_ACTIVATED == 1U */

	default:
		break;
 801ea92:	46c0      	nop			@ (mov r8, r8)
	}

	/* Update Config Descriptor and IAD descriptor */
	((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 801ea94:	68bb      	ldr	r3, [r7, #8]
 801ea96:	791a      	ldrb	r2, [r3, #4]
 801ea98:	68bb      	ldr	r3, [r7, #8]
 801ea9a:	3201      	adds	r2, #1
 801ea9c:	b2d2      	uxtb	r2, r2
 801ea9e:	711a      	strb	r2, [r3, #4]
	((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	681a      	ldr	r2, [r3, #0]
 801eaa4:	68bb      	ldr	r3, [r7, #8]
 801eaa6:	b292      	uxth	r2, r2
 801eaa8:	21ff      	movs	r1, #255	@ 0xff
 801eaaa:	4011      	ands	r1, r2
 801eaac:	000c      	movs	r4, r1
 801eaae:	7899      	ldrb	r1, [r3, #2]
 801eab0:	2000      	movs	r0, #0
 801eab2:	4001      	ands	r1, r0
 801eab4:	1c08      	adds	r0, r1, #0
 801eab6:	1c21      	adds	r1, r4, #0
 801eab8:	4301      	orrs	r1, r0
 801eaba:	7099      	strb	r1, [r3, #2]
 801eabc:	0a12      	lsrs	r2, r2, #8
 801eabe:	b290      	uxth	r0, r2
 801eac0:	78da      	ldrb	r2, [r3, #3]
 801eac2:	2100      	movs	r1, #0
 801eac4:	400a      	ands	r2, r1
 801eac6:	1c11      	adds	r1, r2, #0
 801eac8:	1c02      	adds	r2, r0, #0
 801eaca:	430a      	orrs	r2, r1
 801eacc:	70da      	strb	r2, [r3, #3]

}
 801eace:	46c0      	nop			@ (mov r8, r8)
 801ead0:	46bd      	mov	sp, r7
 801ead2:	b005      	add	sp, #20
 801ead4:	bd90      	pop	{r4, r7, pc}
 801ead6:	46c0      	nop			@ (mov r8, r8)
 801ead8:	20011f58 	.word	0x20011f58
 801eadc:	20011f5c 	.word	0x20011f5c
 801eae0:	20011f60 	.word	0x20011f60

0801eae4 <USBD_FrameWork_MSCDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_FrameWork_MSCDesc(USBD_DevClassHandleTypeDef *pdev,
                                    uint32_t pConf, uint32_t *Sze)
{
 801eae4:	b590      	push	{r4, r7, lr}
 801eae6:	b087      	sub	sp, #28
 801eae8:	af00      	add	r7, sp, #0
 801eaea:	60f8      	str	r0, [r7, #12]
 801eaec:	60b9      	str	r1, [r7, #8]
 801eaee:	607a      	str	r2, [r7, #4]
  USBD_IfDescTypedef       *pIfDesc;
  USBD_EpDescTypedef       *pEpDesc;

  /* Append MSC Interface descriptor */
  __USBD_FRAMEWORK_SET_IF((pdev->tclasslist[pdev->classId].Ifs[0]), (0U), \
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	681a      	ldr	r2, [r3, #0]
 801eaf4:	68bb      	ldr	r3, [r7, #8]
 801eaf6:	18d3      	adds	r3, r2, r3
 801eaf8:	617b      	str	r3, [r7, #20]
 801eafa:	697b      	ldr	r3, [r7, #20]
 801eafc:	2209      	movs	r2, #9
 801eafe:	701a      	strb	r2, [r3, #0]
 801eb00:	697b      	ldr	r3, [r7, #20]
 801eb02:	2204      	movs	r2, #4
 801eb04:	705a      	strb	r2, [r3, #1]
 801eb06:	68fb      	ldr	r3, [r7, #12]
 801eb08:	685b      	ldr	r3, [r3, #4]
 801eb0a:	68fa      	ldr	r2, [r7, #12]
 801eb0c:	215a      	movs	r1, #90	@ 0x5a
 801eb0e:	205c      	movs	r0, #92	@ 0x5c
 801eb10:	4343      	muls	r3, r0
 801eb12:	18d3      	adds	r3, r2, r3
 801eb14:	185b      	adds	r3, r3, r1
 801eb16:	781a      	ldrb	r2, [r3, #0]
 801eb18:	697b      	ldr	r3, [r7, #20]
 801eb1a:	709a      	strb	r2, [r3, #2]
 801eb1c:	697b      	ldr	r3, [r7, #20]
 801eb1e:	2200      	movs	r2, #0
 801eb20:	70da      	strb	r2, [r3, #3]
 801eb22:	68fb      	ldr	r3, [r7, #12]
 801eb24:	685b      	ldr	r3, [r3, #4]
 801eb26:	68fa      	ldr	r2, [r7, #12]
 801eb28:	215c      	movs	r1, #92	@ 0x5c
 801eb2a:	434b      	muls	r3, r1
 801eb2c:	18d3      	adds	r3, r2, r3
 801eb2e:	331c      	adds	r3, #28
 801eb30:	681b      	ldr	r3, [r3, #0]
 801eb32:	b2da      	uxtb	r2, r3
 801eb34:	697b      	ldr	r3, [r7, #20]
 801eb36:	711a      	strb	r2, [r3, #4]
 801eb38:	697b      	ldr	r3, [r7, #20]
 801eb3a:	2208      	movs	r2, #8
 801eb3c:	715a      	strb	r2, [r3, #5]
 801eb3e:	697b      	ldr	r3, [r7, #20]
 801eb40:	2206      	movs	r2, #6
 801eb42:	719a      	strb	r2, [r3, #6]
 801eb44:	697b      	ldr	r3, [r7, #20]
 801eb46:	2250      	movs	r2, #80	@ 0x50
 801eb48:	71da      	strb	r2, [r3, #7]
 801eb4a:	697b      	ldr	r3, [r7, #20]
 801eb4c:	2200      	movs	r2, #0
 801eb4e:	721a      	strb	r2, [r3, #8]
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	681b      	ldr	r3, [r3, #0]
 801eb54:	3309      	adds	r3, #9
 801eb56:	001a      	movs	r2, r3
 801eb58:	687b      	ldr	r3, [r7, #4]
 801eb5a:	601a      	str	r2, [r3, #0]
                          (uint8_t)(pdev->tclasslist[pdev->classId].NumEps),
                          (0x08U), (0x06U), (0x50U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add),
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	681a      	ldr	r2, [r3, #0]
 801eb60:	68bb      	ldr	r3, [r7, #8]
 801eb62:	18d3      	adds	r3, r2, r3
 801eb64:	613b      	str	r3, [r7, #16]
 801eb66:	693b      	ldr	r3, [r7, #16]
 801eb68:	2207      	movs	r2, #7
 801eb6a:	701a      	strb	r2, [r3, #0]
 801eb6c:	693b      	ldr	r3, [r7, #16]
 801eb6e:	2205      	movs	r2, #5
 801eb70:	705a      	strb	r2, [r3, #1]
 801eb72:	68fb      	ldr	r3, [r7, #12]
 801eb74:	685b      	ldr	r3, [r3, #4]
 801eb76:	68fa      	ldr	r2, [r7, #12]
 801eb78:	2124      	movs	r1, #36	@ 0x24
 801eb7a:	205c      	movs	r0, #92	@ 0x5c
 801eb7c:	4343      	muls	r3, r0
 801eb7e:	18d3      	adds	r3, r2, r3
 801eb80:	185b      	adds	r3, r3, r1
 801eb82:	781a      	ldrb	r2, [r3, #0]
 801eb84:	693b      	ldr	r3, [r7, #16]
 801eb86:	709a      	strb	r2, [r3, #2]
 801eb88:	693b      	ldr	r3, [r7, #16]
 801eb8a:	2202      	movs	r2, #2
 801eb8c:	70da      	strb	r2, [r3, #3]
 801eb8e:	68fb      	ldr	r3, [r7, #12]
 801eb90:	685b      	ldr	r3, [r3, #4]
 801eb92:	68fa      	ldr	r2, [r7, #12]
 801eb94:	215c      	movs	r1, #92	@ 0x5c
 801eb96:	434b      	muls	r3, r1
 801eb98:	18d3      	adds	r3, r2, r3
 801eb9a:	3326      	adds	r3, #38	@ 0x26
 801eb9c:	881a      	ldrh	r2, [r3, #0]
 801eb9e:	693b      	ldr	r3, [r7, #16]
 801eba0:	21ff      	movs	r1, #255	@ 0xff
 801eba2:	4011      	ands	r1, r2
 801eba4:	000c      	movs	r4, r1
 801eba6:	7919      	ldrb	r1, [r3, #4]
 801eba8:	2000      	movs	r0, #0
 801ebaa:	4001      	ands	r1, r0
 801ebac:	1c08      	adds	r0, r1, #0
 801ebae:	1c21      	adds	r1, r4, #0
 801ebb0:	4301      	orrs	r1, r0
 801ebb2:	7119      	strb	r1, [r3, #4]
 801ebb4:	0a12      	lsrs	r2, r2, #8
 801ebb6:	b290      	uxth	r0, r2
 801ebb8:	795a      	ldrb	r2, [r3, #5]
 801ebba:	2100      	movs	r1, #0
 801ebbc:	400a      	ands	r2, r1
 801ebbe:	1c11      	adds	r1, r2, #0
 801ebc0:	1c02      	adds	r2, r0, #0
 801ebc2:	430a      	orrs	r2, r1
 801ebc4:	715a      	strb	r2, [r3, #5]
 801ebc6:	68fb      	ldr	r3, [r7, #12]
 801ebc8:	781b      	ldrb	r3, [r3, #0]
 801ebca:	2b01      	cmp	r3, #1
 801ebcc:	d103      	bne.n	801ebd6 <USBD_FrameWork_MSCDesc+0xf2>
 801ebce:	693b      	ldr	r3, [r7, #16]
 801ebd0:	2200      	movs	r2, #0
 801ebd2:	719a      	strb	r2, [r3, #6]
 801ebd4:	e002      	b.n	801ebdc <USBD_FrameWork_MSCDesc+0xf8>
 801ebd6:	693b      	ldr	r3, [r7, #16]
 801ebd8:	2200      	movs	r2, #0
 801ebda:	719a      	strb	r2, [r3, #6]
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	681b      	ldr	r3, [r3, #0]
 801ebe0:	1dda      	adds	r2, r3, #7
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add),
 801ebe6:	687b      	ldr	r3, [r7, #4]
 801ebe8:	681a      	ldr	r2, [r3, #0]
 801ebea:	68bb      	ldr	r3, [r7, #8]
 801ebec:	18d3      	adds	r3, r2, r3
 801ebee:	613b      	str	r3, [r7, #16]
 801ebf0:	693b      	ldr	r3, [r7, #16]
 801ebf2:	2207      	movs	r2, #7
 801ebf4:	701a      	strb	r2, [r3, #0]
 801ebf6:	693b      	ldr	r3, [r7, #16]
 801ebf8:	2205      	movs	r2, #5
 801ebfa:	705a      	strb	r2, [r3, #1]
 801ebfc:	68fb      	ldr	r3, [r7, #12]
 801ebfe:	685b      	ldr	r3, [r3, #4]
 801ec00:	68fa      	ldr	r2, [r7, #12]
 801ec02:	212a      	movs	r1, #42	@ 0x2a
 801ec04:	205c      	movs	r0, #92	@ 0x5c
 801ec06:	4343      	muls	r3, r0
 801ec08:	18d3      	adds	r3, r2, r3
 801ec0a:	185b      	adds	r3, r3, r1
 801ec0c:	781a      	ldrb	r2, [r3, #0]
 801ec0e:	693b      	ldr	r3, [r7, #16]
 801ec10:	709a      	strb	r2, [r3, #2]
 801ec12:	693b      	ldr	r3, [r7, #16]
 801ec14:	2202      	movs	r2, #2
 801ec16:	70da      	strb	r2, [r3, #3]
 801ec18:	68fb      	ldr	r3, [r7, #12]
 801ec1a:	685b      	ldr	r3, [r3, #4]
 801ec1c:	68fa      	ldr	r2, [r7, #12]
 801ec1e:	215c      	movs	r1, #92	@ 0x5c
 801ec20:	434b      	muls	r3, r1
 801ec22:	18d3      	adds	r3, r2, r3
 801ec24:	332c      	adds	r3, #44	@ 0x2c
 801ec26:	881a      	ldrh	r2, [r3, #0]
 801ec28:	693b      	ldr	r3, [r7, #16]
 801ec2a:	21ff      	movs	r1, #255	@ 0xff
 801ec2c:	4011      	ands	r1, r2
 801ec2e:	000c      	movs	r4, r1
 801ec30:	7919      	ldrb	r1, [r3, #4]
 801ec32:	2000      	movs	r0, #0
 801ec34:	4001      	ands	r1, r0
 801ec36:	1c08      	adds	r0, r1, #0
 801ec38:	1c21      	adds	r1, r4, #0
 801ec3a:	4301      	orrs	r1, r0
 801ec3c:	7119      	strb	r1, [r3, #4]
 801ec3e:	0a12      	lsrs	r2, r2, #8
 801ec40:	b290      	uxth	r0, r2
 801ec42:	795a      	ldrb	r2, [r3, #5]
 801ec44:	2100      	movs	r1, #0
 801ec46:	400a      	ands	r2, r1
 801ec48:	1c11      	adds	r1, r2, #0
 801ec4a:	1c02      	adds	r2, r0, #0
 801ec4c:	430a      	orrs	r2, r1
 801ec4e:	715a      	strb	r2, [r3, #5]
 801ec50:	68fb      	ldr	r3, [r7, #12]
 801ec52:	781b      	ldrb	r3, [r3, #0]
 801ec54:	2b01      	cmp	r3, #1
 801ec56:	d103      	bne.n	801ec60 <USBD_FrameWork_MSCDesc+0x17c>
 801ec58:	693b      	ldr	r3, [r7, #16]
 801ec5a:	2200      	movs	r2, #0
 801ec5c:	719a      	strb	r2, [r3, #6]
 801ec5e:	e002      	b.n	801ec66 <USBD_FrameWork_MSCDesc+0x182>
 801ec60:	693b      	ldr	r3, [r7, #16]
 801ec62:	2200      	movs	r2, #0
 801ec64:	719a      	strb	r2, [r3, #6]
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	681b      	ldr	r3, [r3, #0]
 801ec6a:	1dda      	adds	r2, r3, #7
 801ec6c:	687b      	ldr	r3, [r7, #4]
 801ec6e:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0U), (0U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 801ec70:	68bb      	ldr	r3, [r7, #8]
 801ec72:	791a      	ldrb	r2, [r3, #4]
 801ec74:	68bb      	ldr	r3, [r7, #8]
 801ec76:	3201      	adds	r2, #1
 801ec78:	b2d2      	uxtb	r2, r2
 801ec7a:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	681a      	ldr	r2, [r3, #0]
 801ec80:	68bb      	ldr	r3, [r7, #8]
 801ec82:	b292      	uxth	r2, r2
 801ec84:	21ff      	movs	r1, #255	@ 0xff
 801ec86:	4011      	ands	r1, r2
 801ec88:	000c      	movs	r4, r1
 801ec8a:	7899      	ldrb	r1, [r3, #2]
 801ec8c:	2000      	movs	r0, #0
 801ec8e:	4001      	ands	r1, r0
 801ec90:	1c08      	adds	r0, r1, #0
 801ec92:	1c21      	adds	r1, r4, #0
 801ec94:	4301      	orrs	r1, r0
 801ec96:	7099      	strb	r1, [r3, #2]
 801ec98:	0a12      	lsrs	r2, r2, #8
 801ec9a:	b290      	uxth	r0, r2
 801ec9c:	78da      	ldrb	r2, [r3, #3]
 801ec9e:	2100      	movs	r1, #0
 801eca0:	400a      	ands	r2, r1
 801eca2:	1c11      	adds	r1, r2, #0
 801eca4:	1c02      	adds	r2, r0, #0
 801eca6:	430a      	orrs	r2, r1
 801eca8:	70da      	strb	r2, [r3, #3]
}
 801ecaa:	46c0      	nop			@ (mov r8, r8)
 801ecac:	46bd      	mov	sp, r7
 801ecae:	b007      	add	sp, #28
 801ecb0:	bd90      	pop	{r4, r7, pc}
	...

0801ecb4 <malloc>:
 801ecb4:	b510      	push	{r4, lr}
 801ecb6:	4b03      	ldr	r3, [pc, #12]	@ (801ecc4 <malloc+0x10>)
 801ecb8:	0001      	movs	r1, r0
 801ecba:	6818      	ldr	r0, [r3, #0]
 801ecbc:	f000 f826 	bl	801ed0c <_malloc_r>
 801ecc0:	bd10      	pop	{r4, pc}
 801ecc2:	46c0      	nop			@ (mov r8, r8)
 801ecc4:	20000204 	.word	0x20000204

0801ecc8 <sbrk_aligned>:
 801ecc8:	b570      	push	{r4, r5, r6, lr}
 801ecca:	4e0f      	ldr	r6, [pc, #60]	@ (801ed08 <sbrk_aligned+0x40>)
 801eccc:	000d      	movs	r5, r1
 801ecce:	6831      	ldr	r1, [r6, #0]
 801ecd0:	0004      	movs	r4, r0
 801ecd2:	2900      	cmp	r1, #0
 801ecd4:	d102      	bne.n	801ecdc <sbrk_aligned+0x14>
 801ecd6:	f000 f8b1 	bl	801ee3c <_sbrk_r>
 801ecda:	6030      	str	r0, [r6, #0]
 801ecdc:	0029      	movs	r1, r5
 801ecde:	0020      	movs	r0, r4
 801ece0:	f000 f8ac 	bl	801ee3c <_sbrk_r>
 801ece4:	1c43      	adds	r3, r0, #1
 801ece6:	d103      	bne.n	801ecf0 <sbrk_aligned+0x28>
 801ece8:	2501      	movs	r5, #1
 801ecea:	426d      	negs	r5, r5
 801ecec:	0028      	movs	r0, r5
 801ecee:	bd70      	pop	{r4, r5, r6, pc}
 801ecf0:	2303      	movs	r3, #3
 801ecf2:	1cc5      	adds	r5, r0, #3
 801ecf4:	439d      	bics	r5, r3
 801ecf6:	42a8      	cmp	r0, r5
 801ecf8:	d0f8      	beq.n	801ecec <sbrk_aligned+0x24>
 801ecfa:	1a29      	subs	r1, r5, r0
 801ecfc:	0020      	movs	r0, r4
 801ecfe:	f000 f89d 	bl	801ee3c <_sbrk_r>
 801ed02:	3001      	adds	r0, #1
 801ed04:	d1f2      	bne.n	801ecec <sbrk_aligned+0x24>
 801ed06:	e7ef      	b.n	801ece8 <sbrk_aligned+0x20>
 801ed08:	20011f64 	.word	0x20011f64

0801ed0c <_malloc_r>:
 801ed0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ed0e:	2203      	movs	r2, #3
 801ed10:	1ccb      	adds	r3, r1, #3
 801ed12:	4393      	bics	r3, r2
 801ed14:	3308      	adds	r3, #8
 801ed16:	0005      	movs	r5, r0
 801ed18:	001f      	movs	r7, r3
 801ed1a:	2b0c      	cmp	r3, #12
 801ed1c:	d234      	bcs.n	801ed88 <_malloc_r+0x7c>
 801ed1e:	270c      	movs	r7, #12
 801ed20:	42b9      	cmp	r1, r7
 801ed22:	d833      	bhi.n	801ed8c <_malloc_r+0x80>
 801ed24:	0028      	movs	r0, r5
 801ed26:	f000 f871 	bl	801ee0c <__malloc_lock>
 801ed2a:	4e37      	ldr	r6, [pc, #220]	@ (801ee08 <_malloc_r+0xfc>)
 801ed2c:	6833      	ldr	r3, [r6, #0]
 801ed2e:	001c      	movs	r4, r3
 801ed30:	2c00      	cmp	r4, #0
 801ed32:	d12f      	bne.n	801ed94 <_malloc_r+0x88>
 801ed34:	0039      	movs	r1, r7
 801ed36:	0028      	movs	r0, r5
 801ed38:	f7ff ffc6 	bl	801ecc8 <sbrk_aligned>
 801ed3c:	0004      	movs	r4, r0
 801ed3e:	1c43      	adds	r3, r0, #1
 801ed40:	d15f      	bne.n	801ee02 <_malloc_r+0xf6>
 801ed42:	6834      	ldr	r4, [r6, #0]
 801ed44:	9400      	str	r4, [sp, #0]
 801ed46:	9b00      	ldr	r3, [sp, #0]
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	d14a      	bne.n	801ede2 <_malloc_r+0xd6>
 801ed4c:	2c00      	cmp	r4, #0
 801ed4e:	d052      	beq.n	801edf6 <_malloc_r+0xea>
 801ed50:	6823      	ldr	r3, [r4, #0]
 801ed52:	0028      	movs	r0, r5
 801ed54:	18e3      	adds	r3, r4, r3
 801ed56:	9900      	ldr	r1, [sp, #0]
 801ed58:	9301      	str	r3, [sp, #4]
 801ed5a:	f000 f86f 	bl	801ee3c <_sbrk_r>
 801ed5e:	9b01      	ldr	r3, [sp, #4]
 801ed60:	4283      	cmp	r3, r0
 801ed62:	d148      	bne.n	801edf6 <_malloc_r+0xea>
 801ed64:	6823      	ldr	r3, [r4, #0]
 801ed66:	0028      	movs	r0, r5
 801ed68:	1aff      	subs	r7, r7, r3
 801ed6a:	0039      	movs	r1, r7
 801ed6c:	f7ff ffac 	bl	801ecc8 <sbrk_aligned>
 801ed70:	3001      	adds	r0, #1
 801ed72:	d040      	beq.n	801edf6 <_malloc_r+0xea>
 801ed74:	6823      	ldr	r3, [r4, #0]
 801ed76:	19db      	adds	r3, r3, r7
 801ed78:	6023      	str	r3, [r4, #0]
 801ed7a:	6833      	ldr	r3, [r6, #0]
 801ed7c:	685a      	ldr	r2, [r3, #4]
 801ed7e:	2a00      	cmp	r2, #0
 801ed80:	d133      	bne.n	801edea <_malloc_r+0xde>
 801ed82:	9b00      	ldr	r3, [sp, #0]
 801ed84:	6033      	str	r3, [r6, #0]
 801ed86:	e019      	b.n	801edbc <_malloc_r+0xb0>
 801ed88:	2b00      	cmp	r3, #0
 801ed8a:	dac9      	bge.n	801ed20 <_malloc_r+0x14>
 801ed8c:	230c      	movs	r3, #12
 801ed8e:	602b      	str	r3, [r5, #0]
 801ed90:	2000      	movs	r0, #0
 801ed92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ed94:	6821      	ldr	r1, [r4, #0]
 801ed96:	1bc9      	subs	r1, r1, r7
 801ed98:	d420      	bmi.n	801eddc <_malloc_r+0xd0>
 801ed9a:	290b      	cmp	r1, #11
 801ed9c:	d90a      	bls.n	801edb4 <_malloc_r+0xa8>
 801ed9e:	19e2      	adds	r2, r4, r7
 801eda0:	6027      	str	r7, [r4, #0]
 801eda2:	42a3      	cmp	r3, r4
 801eda4:	d104      	bne.n	801edb0 <_malloc_r+0xa4>
 801eda6:	6032      	str	r2, [r6, #0]
 801eda8:	6863      	ldr	r3, [r4, #4]
 801edaa:	6011      	str	r1, [r2, #0]
 801edac:	6053      	str	r3, [r2, #4]
 801edae:	e005      	b.n	801edbc <_malloc_r+0xb0>
 801edb0:	605a      	str	r2, [r3, #4]
 801edb2:	e7f9      	b.n	801eda8 <_malloc_r+0x9c>
 801edb4:	6862      	ldr	r2, [r4, #4]
 801edb6:	42a3      	cmp	r3, r4
 801edb8:	d10e      	bne.n	801edd8 <_malloc_r+0xcc>
 801edba:	6032      	str	r2, [r6, #0]
 801edbc:	0028      	movs	r0, r5
 801edbe:	f000 f82d 	bl	801ee1c <__malloc_unlock>
 801edc2:	0020      	movs	r0, r4
 801edc4:	2207      	movs	r2, #7
 801edc6:	300b      	adds	r0, #11
 801edc8:	1d23      	adds	r3, r4, #4
 801edca:	4390      	bics	r0, r2
 801edcc:	1ac2      	subs	r2, r0, r3
 801edce:	4298      	cmp	r0, r3
 801edd0:	d0df      	beq.n	801ed92 <_malloc_r+0x86>
 801edd2:	1a1b      	subs	r3, r3, r0
 801edd4:	50a3      	str	r3, [r4, r2]
 801edd6:	e7dc      	b.n	801ed92 <_malloc_r+0x86>
 801edd8:	605a      	str	r2, [r3, #4]
 801edda:	e7ef      	b.n	801edbc <_malloc_r+0xb0>
 801eddc:	0023      	movs	r3, r4
 801edde:	6864      	ldr	r4, [r4, #4]
 801ede0:	e7a6      	b.n	801ed30 <_malloc_r+0x24>
 801ede2:	9c00      	ldr	r4, [sp, #0]
 801ede4:	6863      	ldr	r3, [r4, #4]
 801ede6:	9300      	str	r3, [sp, #0]
 801ede8:	e7ad      	b.n	801ed46 <_malloc_r+0x3a>
 801edea:	001a      	movs	r2, r3
 801edec:	685b      	ldr	r3, [r3, #4]
 801edee:	42a3      	cmp	r3, r4
 801edf0:	d1fb      	bne.n	801edea <_malloc_r+0xde>
 801edf2:	2300      	movs	r3, #0
 801edf4:	e7da      	b.n	801edac <_malloc_r+0xa0>
 801edf6:	230c      	movs	r3, #12
 801edf8:	0028      	movs	r0, r5
 801edfa:	602b      	str	r3, [r5, #0]
 801edfc:	f000 f80e 	bl	801ee1c <__malloc_unlock>
 801ee00:	e7c6      	b.n	801ed90 <_malloc_r+0x84>
 801ee02:	6007      	str	r7, [r0, #0]
 801ee04:	e7da      	b.n	801edbc <_malloc_r+0xb0>
 801ee06:	46c0      	nop			@ (mov r8, r8)
 801ee08:	20011f68 	.word	0x20011f68

0801ee0c <__malloc_lock>:
 801ee0c:	b510      	push	{r4, lr}
 801ee0e:	4802      	ldr	r0, [pc, #8]	@ (801ee18 <__malloc_lock+0xc>)
 801ee10:	f000 f850 	bl	801eeb4 <__retarget_lock_acquire_recursive>
 801ee14:	bd10      	pop	{r4, pc}
 801ee16:	46c0      	nop			@ (mov r8, r8)
 801ee18:	200120a8 	.word	0x200120a8

0801ee1c <__malloc_unlock>:
 801ee1c:	b510      	push	{r4, lr}
 801ee1e:	4802      	ldr	r0, [pc, #8]	@ (801ee28 <__malloc_unlock+0xc>)
 801ee20:	f000 f849 	bl	801eeb6 <__retarget_lock_release_recursive>
 801ee24:	bd10      	pop	{r4, pc}
 801ee26:	46c0      	nop			@ (mov r8, r8)
 801ee28:	200120a8 	.word	0x200120a8

0801ee2c <memset>:
 801ee2c:	0003      	movs	r3, r0
 801ee2e:	1882      	adds	r2, r0, r2
 801ee30:	4293      	cmp	r3, r2
 801ee32:	d100      	bne.n	801ee36 <memset+0xa>
 801ee34:	4770      	bx	lr
 801ee36:	7019      	strb	r1, [r3, #0]
 801ee38:	3301      	adds	r3, #1
 801ee3a:	e7f9      	b.n	801ee30 <memset+0x4>

0801ee3c <_sbrk_r>:
 801ee3c:	2300      	movs	r3, #0
 801ee3e:	b570      	push	{r4, r5, r6, lr}
 801ee40:	4d06      	ldr	r5, [pc, #24]	@ (801ee5c <_sbrk_r+0x20>)
 801ee42:	0004      	movs	r4, r0
 801ee44:	0008      	movs	r0, r1
 801ee46:	602b      	str	r3, [r5, #0]
 801ee48:	f7e8 fd9c 	bl	8007984 <_sbrk>
 801ee4c:	1c43      	adds	r3, r0, #1
 801ee4e:	d103      	bne.n	801ee58 <_sbrk_r+0x1c>
 801ee50:	682b      	ldr	r3, [r5, #0]
 801ee52:	2b00      	cmp	r3, #0
 801ee54:	d000      	beq.n	801ee58 <_sbrk_r+0x1c>
 801ee56:	6023      	str	r3, [r4, #0]
 801ee58:	bd70      	pop	{r4, r5, r6, pc}
 801ee5a:	46c0      	nop			@ (mov r8, r8)
 801ee5c:	200120a4 	.word	0x200120a4

0801ee60 <__errno>:
 801ee60:	4b01      	ldr	r3, [pc, #4]	@ (801ee68 <__errno+0x8>)
 801ee62:	6818      	ldr	r0, [r3, #0]
 801ee64:	4770      	bx	lr
 801ee66:	46c0      	nop			@ (mov r8, r8)
 801ee68:	20000204 	.word	0x20000204

0801ee6c <__libc_init_array>:
 801ee6c:	b570      	push	{r4, r5, r6, lr}
 801ee6e:	2600      	movs	r6, #0
 801ee70:	4c0c      	ldr	r4, [pc, #48]	@ (801eea4 <__libc_init_array+0x38>)
 801ee72:	4d0d      	ldr	r5, [pc, #52]	@ (801eea8 <__libc_init_array+0x3c>)
 801ee74:	1b64      	subs	r4, r4, r5
 801ee76:	10a4      	asrs	r4, r4, #2
 801ee78:	42a6      	cmp	r6, r4
 801ee7a:	d109      	bne.n	801ee90 <__libc_init_array+0x24>
 801ee7c:	2600      	movs	r6, #0
 801ee7e:	f000 f835 	bl	801eeec <_init>
 801ee82:	4c0a      	ldr	r4, [pc, #40]	@ (801eeac <__libc_init_array+0x40>)
 801ee84:	4d0a      	ldr	r5, [pc, #40]	@ (801eeb0 <__libc_init_array+0x44>)
 801ee86:	1b64      	subs	r4, r4, r5
 801ee88:	10a4      	asrs	r4, r4, #2
 801ee8a:	42a6      	cmp	r6, r4
 801ee8c:	d105      	bne.n	801ee9a <__libc_init_array+0x2e>
 801ee8e:	bd70      	pop	{r4, r5, r6, pc}
 801ee90:	00b3      	lsls	r3, r6, #2
 801ee92:	58eb      	ldr	r3, [r5, r3]
 801ee94:	4798      	blx	r3
 801ee96:	3601      	adds	r6, #1
 801ee98:	e7ee      	b.n	801ee78 <__libc_init_array+0xc>
 801ee9a:	00b3      	lsls	r3, r6, #2
 801ee9c:	58eb      	ldr	r3, [r5, r3]
 801ee9e:	4798      	blx	r3
 801eea0:	3601      	adds	r6, #1
 801eea2:	e7f2      	b.n	801ee8a <__libc_init_array+0x1e>
 801eea4:	0801f4c4 	.word	0x0801f4c4
 801eea8:	0801f4c4 	.word	0x0801f4c4
 801eeac:	0801f4c8 	.word	0x0801f4c8
 801eeb0:	0801f4c4 	.word	0x0801f4c4

0801eeb4 <__retarget_lock_acquire_recursive>:
 801eeb4:	4770      	bx	lr

0801eeb6 <__retarget_lock_release_recursive>:
 801eeb6:	4770      	bx	lr

0801eeb8 <__aeabi_memcpy>:
 801eeb8:	b510      	push	{r4, lr}
 801eeba:	f000 f80d 	bl	801eed8 <memcpy>
 801eebe:	bd10      	pop	{r4, pc}

0801eec0 <__aeabi_memset>:
 801eec0:	000b      	movs	r3, r1
 801eec2:	b510      	push	{r4, lr}
 801eec4:	0011      	movs	r1, r2
 801eec6:	001a      	movs	r2, r3
 801eec8:	f7ff ffb0 	bl	801ee2c <memset>
 801eecc:	bd10      	pop	{r4, pc}

0801eece <__aeabi_memclr>:
 801eece:	b510      	push	{r4, lr}
 801eed0:	2200      	movs	r2, #0
 801eed2:	f7ff fff5 	bl	801eec0 <__aeabi_memset>
 801eed6:	bd10      	pop	{r4, pc}

0801eed8 <memcpy>:
 801eed8:	2300      	movs	r3, #0
 801eeda:	b510      	push	{r4, lr}
 801eedc:	429a      	cmp	r2, r3
 801eede:	d100      	bne.n	801eee2 <memcpy+0xa>
 801eee0:	bd10      	pop	{r4, pc}
 801eee2:	5ccc      	ldrb	r4, [r1, r3]
 801eee4:	54c4      	strb	r4, [r0, r3]
 801eee6:	3301      	adds	r3, #1
 801eee8:	e7f8      	b.n	801eedc <memcpy+0x4>
	...

0801eeec <_init>:
 801eeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eeee:	46c0      	nop			@ (mov r8, r8)
 801eef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eef2:	bc08      	pop	{r3}
 801eef4:	469e      	mov	lr, r3
 801eef6:	4770      	bx	lr

0801eef8 <_fini>:
 801eef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eefa:	46c0      	nop			@ (mov r8, r8)
 801eefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eefe:	bc08      	pop	{r3}
 801ef00:	469e      	mov	lr, r3
 801ef02:	4770      	bx	lr
